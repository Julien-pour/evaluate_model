[
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"Find and return the product of all elements in the given matrix.\"\"\"\n    total_product = 1\n    for row in matrix:\n        for element in row:\n            total_product *= element\n    return total_product\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == 362880\n\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(m: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a permutation matrix\"\"\"\n    n = len(m)\n    for i in range(n):\n        if m[i].count(1) != 1 or m[i].count(0) != n - 1:\n            return False\n        for j in range(n):\n            if i != j and m[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], \n            [0, 1, 0], \n            [0, 0, 1]]\n\nassert f(g())\n",
        "idx_generation": 209,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='abcdefghijklmnopqrstuvwxyz') -> bool:\n    \"\"\"Given a string s and an integer n, check if there exists a substring of length n that consists of all unique characters from s.\"\"\"\n    for i in range(len(s)-n+1):\n        substring = s[i:i+n]\n        if len(substring) == len(set(substring)):\n            return True\n    return False\ndef g(s='abcdefghijklmnopqrstuvwxyz'):\n    return len(s)\nassert f(g())\n",
        "idx_generation": 3,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(grades: Dict[str, int], passing_grade=60) -> bool:\n    \"\"\"Check if all the grades in the dictionary are above or equal to the passing grade.\"\"\"\n    return all(grade >= passing_grade for grade in grades.values())\n\ndef g(passing_grade=60):\n    return {\"Math\": 70, \"Science\": 80, \"English\": 90}\n\nassert f(g())\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]):\n    return primes[0]\n\nassert f(g())\n",
        "idx_generation": 11,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if two numbers are coprime.\"\"\"\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return gcd(n, m) == 1\n\ndef g():\n    return 9, 16\n\nassert f(*g())\n",
        "idx_generation": 98,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"Given a string, determine if it contains a substring.\"\"\"\n    return substr in string\n\ndef g(substr='abc'):\n    return 'xyz' + substr + '123'\n\nassert f(g())\n",
        "idx_generation": 126,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order.\"\"\"\n    for i in range(1, len(nums)):\n        if nums[i] < nums[i-1]:\n            return False\n    return True\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 108,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a Toeplitz matrix.\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    \n    # Check if all elements on each diagonal are the same\n    for i in range(n-1):\n        for j in range(m-1):\n            if matrix[i][j] != matrix[i+1][j+1]:\n                return False\n    \n    return True\n\ndef g(matrix=[[1, 2, 3], [4, 1, 2], [7, 4, 1]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 120,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(x: int, y=4, z=2) -> bool:\n    \"\"\"Check if the square root of x plus y is equal to z\"\"\"\n    return math.sqrt(x + y) == z\ndef g(y=4, z=2):\n    return z**2 - y\nassert f(g())\n",
        "idx_generation": 121,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a sublist in the list whose elements sum up to the target.\"\"\"\n    return any(sum(lst[i:j]) == target for i in range(len(lst)) for j in range(i+1, len(lst)+1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 7,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(prices: List[float], discount=0.2) -> bool:\n    \"\"\"Given a list of prices, find if there is any combination of prices that can be discounted by the given discount amount\n    to make the total price less than or equal to 100. Return True if such a combination exists, False otherwise.\"\"\"\n    for i in range(len(prices)):\n        for j in range(i + 1, len(prices)):\n            if prices[i] + prices[j] <= 100 * (1 - discount):\n                return True\n    return False\n\ndef g(discount=0.2):\n    return [50, 30, 20, 40]\n\nassert f(g()) == True\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], x=2, y=3, z=5) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that satisfy the equation x^2 + y^2 = z^2.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i]**2 + nums[j]**2 == nums[k]**2:\n                    return True\n    return False\ndef g(x=2, y=3, z=5):\n    return [3, 4, 5, 6, 7]\nassert f(g())\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='Python', t='python') -> bool:\n    \"\"\"Ignoring case, compare s, t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.\"\"\"\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s='Python', t='python'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g())\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=[1, 2, 3, 4, 5, 6], b=[4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if n is present in both lists a and b\"\"\"\n    return n in a and n in b\ndef g(a=[1, 2, 3, 4, 5, 6], b=[4, 5, 6, 7, 8, 9]):\n    return next((n for n in b if n in a))\nassert f(g())\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a number that can be written as the sum of two cubes in two different ways.\"\"\"\n    cubes = [i**3 for i in range(1, 100)]\n    for i in range(len(cubes)):\n        for j in range(i, len(cubes)):\n            if cubes[i] + cubes[j] == n:\n                return True\n    return False\ndef g():\n    return 1729\nassert f(g())\n",
        "idx_generation": 17,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the given matrix is a magic square of size n x n.\"\"\"\n    diagonal_sum = 0\n    anti_diagonal_sum = 0\n    row_sums = [0] * n\n    column_sums = [0] * n\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n        anti_diagonal_sum += matrix[i][n-1-i]\n        for j in range(n):\n            row_sums[i] += matrix[i][j]\n            column_sums[j] += matrix[i][j]\n    return diagonal_sum == anti_diagonal_sum and all(sum == row_sums[0] for sum in row_sums) and all(sum == column_sums[0] for sum in column_sums)\n\ndef g(n=3):\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 7,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is prime\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g():\n    num = 2\n    count = 0\n    while True:\n        if f(num):\n            count += 1\n        if count == 1000:\n            return num\n        num += 1\nassert f(g())\n",
        "idx_generation": 67,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return (3, [[1, 2, 3], [2, 4, 5], [3, 5, 6]])\n\nassert f(*g())\n",
        "idx_generation": 20,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if a string starts and ends with the same character 'char'.\"\"\"\n    return s[0] == s[-1] == char\n\ndef g(char='a'):\n    return char + 'hello' + char\n\nassert f(g())\n",
        "idx_generation": 106,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Find if the given substring is a consecutive substring of s\"\"\"\n    return substr in s\ndef g(substr='abc'):\n    return 'defghijklmnopabcqrstuvwxyz'\nassert f(g())\n",
        "idx_generation": 28,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import re\nfrom typing import*\n\ndef f(emails: List[str], domain='gmail.com') -> bool:\n    \"\"\"Check if any of the email addresses in the list belong to the given domain.\"\"\"\n    pattern = r\"[a-zA-Z0-9._%+-]+@\" + re.escape(domain) + \"$\"\n    for email in emails:\n        if re.match(pattern, email):\n            return True\n    return False\n\ndef g(domain='gmail.com'):\n    return ['john@gmail.com', 'jane@yahoo.com', 'alex@gmail.com']\nassert f(g())\n",
        "idx_generation": 38,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Find n such that the sum of the first n prime numbers is divisible by k\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes_sum = 0\n    prime_count = 0\n    num = 2\n    \n    while prime_count < n:\n        if is_prime(num):\n            primes_sum += num\n            prime_count += 1\n        num += 1\n    \n    return primes_sum % k == 0\n\ndef g(k=3):\n    n = 1\n    while True:\n        if f(n, k):\n            return n\n        n += 1\n\nassert f(g())\n",
        "idx_generation": 8,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"Find the maximum element in the given matrix.\"\"\"\n    max_element = float('-inf')\n    for row in matrix:\n        for element in row:\n            if element > max_element:\n                max_element = element\n    return max_element\n\ndef g():\n    return [[3, 5, 2], [9, 1, 7], [4, 6, 8]]\n\nassert f(g()) == 9\n\n",
        "idx_generation": 319,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_product=24) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list such that their product is equal to the target_product.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] * numbers[j] == target_product:\n                return True\n    return False\ndef g(target_product=24):\n    return [i for i in range(1, target_product) if target_product % i == 0]\nassert f(g())\n",
        "idx_generation": 45,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str, target=3) -> bool:\n    \"\"\"Check if two strings are anagrams of each other, where an anagram is a word or phrase formed by rearranging the letters of another.\nSample Input:\ns1 = \"listen\"\ns2 = \"silent\"\nSample Output:\nTrue\"\"\"\n    return sorted(s1) == sorted(s2) and len(s1) == len(s2) and len(set(s1)) >= target\ndef g(target=3):\n    return \"listen\", \"silent\"\nassert f(*g())\n",
        "idx_generation": 55,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> int:\n    \"\"\"Find the maximum product of any three numbers in the given list\"\"\"\n    sorted_nums = sorted(numbers, reverse=True)\n    return max(sorted_nums[0] * sorted_nums[1] * sorted_nums[2], sorted_nums[0] * sorted_nums[-1] * sorted_nums[-2])\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 720\n",
        "idx_generation": 356,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return n in primes\n\ndef g(n=17):\n    return n\n\nassert f(g())\n",
        "idx_generation": 54,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, height: float, volume: float) -> bool:\n    \"\"\"Check if the given radius and height of a cylinder results in the specified volume.\"\"\"\n    calculated_volume = math.pi * (radius ** 2) * height\n    return abs(calculated_volume - volume) < 1e-06\n\ndef g():\n    return (2, 5, 62.83185307179586)\n\nassert f(*g())\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is sorted in non-decreasing order.\"\"\"\n    return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 10,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int, p: int, q: int) -> bool:\n    \"\"\"Check if n is a multiple of m, and p is a factor of q.\"\"\"\n    return n % m == 0 and q % p == 0\n\ndef g():\n    return (20, 5, 3, 36)\n\nassert f(*g())\n",
        "idx_generation": 11,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a stochastic matrix, where each row sums up to 1.\"\"\"\n    n = len(matrix)\n    for row in matrix:\n        if sum(row) != 1:\n            return False\n    return True\n\ndef g():\n    return [[0.5, 0.5], [0.25, 0.75]]\n\nassert f(g())\n",
        "idx_generation": 94,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=1, b=1) -> bool:\n    \"\"\"Check if the given number is a Fibonacci number.\"\"\"\n    if n < 0:\n        return False\n    if n == 0 or n == 1:\n        return True\n    fib1 = 0\n    fib2 = 1\n    while fib2 < n:\n        fib1, fib2 = fib2, fib1 + fib2\n    return fib2 == n\ndef g(a=1, b=1):\n    return a + b + 1\nassert f(g())\n",
        "idx_generation": 192,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], k=3) -> bool:\n    \"\"\"Given a list of integers, find if there exists a subset of size k with consecutive elements.\n    Return True if such a subset exists, False otherwise.\"\"\"\n    li.sort()\n    n = len(li)\n    if n < k:\n        return False\n    for i in range(n-k+1):\n        if li[i+k-1] - li[i] == k-1:\n            return True\n    return False\n\ndef g(k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 28,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target_char='a') -> bool:\n    \"\"\"Given a string, check if the target_char appears as the first character of any word in the string.\"\"\"\n    words = string.split()\n    for word in words:\n        if word[0] == target_char:\n            return True\n    return False\ndef g(target_char='a'):\n    return \"apple banana cherry date\"\nassert f(g())\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], pattern=\"abc\") -> bool:\n    \"\"\"Given a list of words and a pattern string, find if there exists a word in the list that follows the pattern.\n    The pattern is a string of alphabets where each unique alphabet represents a unique character in the word.\n    Return True if a word follows the pattern, False otherwise.\"\"\"\n    for word in words:\n        if len(word) != len(pattern):\n            continue\n        mapping = {}\n        for i in range(len(word)):\n            if pattern[i] not in mapping:\n                mapping[pattern[i]] = word[i]\n            else:\n                if mapping[pattern[i]] != word[i]:\n                    break\n        else:\n            return True\n    return False\n\ndef g(pattern=\"abc\"):\n    return [\"apple\", \"banana\", \"cherry\", \"dog\"]\n\nassert f(g()) == True\n",
        "idx_generation": 42,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring: str) -> bool:\n    \"\"\"Check if the given string contains the given substring.\"\"\"\n    return substring in string\n\ndef g(string='Hello, World!', substring='World'):\n    return string, substring\n\nassert f(*g())\n",
        "idx_generation": 315,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sum=15) -> bool:\n    \"\"\"Find if there exists a row in the matrix such that the sum of its elements is equal to the given row_sum.\"\"\"\n    return any((sum(row) == row_sum) for row in matrix)\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n",
        "idx_generation": 52,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=10) -> bool:\n    \"\"\"Find if there exists a subarray of length n, such that the sum of its elements is equal to 0\"\"\"\n    return any(sum(arr[i:i+n]) == 0 for i in range(len(arr)-n+1))\ndef g(n=10):\n    return [0] * n\nassert f(g())\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=7, s='python') -> bool:\n    \"\"\"Check if the given number n is a multiple of m and if the string s contains the letter 'o'.\"\"\"\n    return n % m == 0 and 'o' in s\n\ndef g(m=7, s='python'):\n    return m\n\nassert f(g())\n",
        "idx_generation": 473,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_length=4, target_sum=10) -> bool:\n    \"\"\"Check if there exists a subsequence in the given list whose length is equal to the target length\n    and the sum of its elements is equal to the target sum.\n    Return True if such a subsequence exists, False otherwise.\"\"\"\n    def is_subsequence(sub, main):\n        i = 0\n        for j in range(len(main)):\n            if i < len(sub) and sub[i] == main[j]:\n                i += 1\n        return i == len(sub)\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            subsequence = arr[i:j+1]\n            if len(subsequence) == target_length and sum(subsequence) == target_sum and is_subsequence(subsequence, arr):\n                return True\n    return False\n\ndef g(target_length=4, target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 152,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target=5, min_length=3) -> bool:\n    \"\"\"Check if there is a word in the list that has a length greater than or equal to min_length and is divisible by the target value.\"\"\"\n    for word in words:\n        if len(word) >= min_length and len(word) % target == 0:\n            return True\n    return False\n\ndef g(target=5, min_length=3):\n    return ['apple', 'banana', 'kiwi', 'orange', 'grape']\n\nassert f(g())\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], k=10) -> bool:\n    \"\"\"Check if the product of any two numbers in the list is divisible by k.\"\"\"\n    return any(li[i] * li[j] % k == 0 for i in range(len(li)) for j in range(i + 1, len(li)))\n\ndef g(k=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"Find and return the maximum element in each row of the given matrix.\"\"\"\n    max_elements = []\n    for row in matrix:\n        max_elements.append(max(row))\n    return max_elements\n\ndef g():\n    return [[4, 2, 7], [1, 5, 3], [8, 6, 9]]\n\nassert f(g()) == [7, 5, 9]\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, a=4, b=9) -> bool:\n    \"\"\"Check if the given number is a perfect square and a multiple of both a and b\"\"\"\n    return sqrt(n).is_integer() and n % a == 0 and n % b == 0\n\ndef g(a=4, b=9):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 311,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target_char='n') -> bool:\n    \"\"\"Given a string, check if the target_char appears as the second character of any word in the string.\"\"\"\n    words = string.split()\n    for word in words:\n        if len(word) > 1 and word[1] == target_char:\n            return True\n    return False\ndef g(target_char='n'):\n    return \"no one notices the new changes\"\nassert f(g())\n",
        "idx_generation": 442,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nimport re\nfrom typing import List\n\ndef f(expressions: List[str], allowed_operators=['+', '-', '*', '/']) -> bool:\n    \"\"\"Check if any of the expressions in the list are valid mathematical expressions.\n    Each expression should only contain digits and allowed_operators, and should have a correct syntax.\"\"\"\n    pattern = r'^[\\d\\s' + re.escape(''.join(allowed_operators)) + ']+$'\n    for expression in expressions:\n        if not re.match(pattern, expression):\n            return False\n    return True\n\ndef g(allowed_operators=['+', '-', '*', '/']):\n    return ['2 + 3', '4 * 6 - 2', '8 / 2 + 5', '2 * 3 -']\n\nassert f(g())\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(dictionary: Dict[str, int], target_key=\"apple\") -> bool:\n    \"\"\"Check if the given key exists in the dictionary\"\"\"\n    return target_key in dictionary\n\ndef g(dictionary={\"apple\": 1, \"banana\": 2, \"cherry\": 3}):\n    return dictionary\n\nassert f(g())\n",
        "idx_generation": 434,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there exists a path in the matrix that sums up to the target number.\"\"\"\n    def backtrack(row, col, curr_sum):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or row >= len(matrix) or col >= len(matrix[0]):\n            return False\n        \n        if backtrack(row + 1, col, curr_sum + matrix[row][col]) or backtrack(row, col + 1, curr_sum + matrix[row][col]):\n            return True\n        \n        return False\n    \n    return backtrack(0, 0, 0)\n\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 185,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Check if the given number is divisible by the length of any word in the list and is divisible by at least one length in the list\"\"\"\n    for word in words:\n        if n % len(word) == 0:\n            return True\n    return False\n\ndef g(words=['apple', 'banana', 'cherry', 'date']):\n    n = 1\n    for word in words:\n        n *= len(word)\n    return n\n\nassert f(g())\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a diagonal matrix, where all the values outside the main diagonal are zero.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 4, 0], [0, 0, 6]]\n\nassert f(g())\n",
        "idx_generation": 101,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], target_length=7) -> bool:\n    \"\"\"Check if any string in the list has a length greater than or equal to the target_length,\n    and that string contains only uppercase letters\"\"\"\n    return any(len(s) >= target_length and s.isupper() for s in strings)\n\ndef g(target_length=7):\n    return [\"HELLO\", \"WORLD\", \"PYTHON\", \"PROGRAMMING\", \"PUZZLES\"]\n\nassert f(g())\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, letters=['a', 'b', 'c', 'd', 'e']) -> bool:\n    \"\"\"Given a word and a list of letters, find if the word can be formed using all the letters exactly once.\n    Return True if it can be formed, False otherwise.\"\"\"\n    word = word.lower()\n    for letter in letters:\n        if letter not in word:\n            return False\n        word = word.replace(letter, '', 1)\n    return True\n\ndef g(letters=['a', 'b', 'c', 'd', 'e']):\n    return \"abcde\"\n\nassert f(g()) == True\n",
        "idx_generation": 28,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(password: str) -> bool:\n    \"\"\"Check if the given password satisfies all the following criteria:\n    1. Contains at least 8 characters\n    2. Contains at least one uppercase letter\n    3. Contains at least one lowercase letter\n    4. Contains at least one digit\n    5. Contains at least one special character (!@#$%^&*)\n    \"\"\"\n    if len(password) < 8:\n        return False\n    if not any(char.isupper() for char in password):\n        return False\n    if not any(char.islower() for char in password):\n        return False\n    if not any(char.isdigit() for char in password):\n        return False\n    if not any(char in \"!@#$%^&*\" for char in password):\n        return False\n    return True\n\ndef g():\n    return \"Passw0rd!\"\n\nassert f(g())\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    arr = np.array(matrix)\n    return np.array_equal(arr, arr.T)\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n\n",
        "idx_generation": 274,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int = 5) -> bool:\n    \"\"\"Find a string that repeats n times.\"\"\"\n    return s * n == s + s + s + s + s\ndef g(n: int = 5):\n    return \"hello\" * n\nassert f(g())\n",
        "idx_generation": 14,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray) -> bool:\n    \"\"\"Check if the matrix is symmetric along the main diagonal.\"\"\"\n    return np.array_equal(matrix, matrix.T)\n\ndef g():\n    return np.array([[1, 2, 3], [2, 4, 5], [3, 5, 6]])\n\nassert f(g())\n",
        "idx_generation": 178,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, t=5, upper=10) -> bool:\n    \"\"\"Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper\ndef g(t=5, upper=10):\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\nassert f(g())\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=1, b=1) -> bool:\n    \"\"\"Check if the given number is a Fibonacci number.\"\"\"\n    if n == 0:\n        return True\n    fib1, fib2 = 0, 1\n    while fib2 <= n:\n        if fib2 == n:\n            return True\n        fib1, fib2 = fib2, fib1 + fib2\n    return False\ndef g(a=1, b=1):\n    return a + b\nassert f(g())\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=10, max_numbers=4, options=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Find a combination of at most max_numbers numbers whose product is equal to the target value.\"\"\"\n    for num in numbers:\n        assert num in options\n    product = 1\n    for num in numbers:\n        product *= num\n    return len(numbers) <= max_numbers and product == target\ndef g(target=10, max_numbers=4, options=[1, 2, 3, 4, 5, 6]):\n    from itertools import combinations\n    for n in range(max_numbers + 1):\n        for c in combinations(options, n):\n            product = 1\n            for num in c:\n                product *= num\n            if product == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 40,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target_sum=15) -> bool:\n    \"\"\"Check if a matrix contains a submatrix with the given sum\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            for k in range(i, n):\n                for l in range(j, n):\n                    submatrix_sum = sum(matrix[x][y] for x in range(i, k+1) for y in range(j, l+1))\n                    if submatrix_sum == target_sum:\n                        return True\n    return False\n\ndef g(target_sum=15):\n    return [[2, 3, 4], [5, 6, 7], [8, 9, 10]]\n\nassert f(g())\n",
        "idx_generation": 100,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(words: List[str], n=3) -> bool:\n    \"\"\"Check if there exists a combination of n words from the given list that have a common character.\"\"\"\n    from itertools import combinations\n    return any(len(set(''.join(c))) != len(c) for c in combinations(words, n))\ndef g(n=3):\n    words = ['apple', 'banana', 'cherry', 'date']\n    from itertools import combinations\n    for c in combinations(words, n):\n        if len(set(''.join(c))) != len(c):\n            return list(c)\nassert f(g())\n",
        "idx_generation": 29,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a given list of numbers is a palindrome\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 155,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix, check if it is a symmetric matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 3,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=2) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the list.\"\"\"\n    return any((nums[i:i+k] == list(range(nums[i], nums[i]+k)) for i in range(len(nums)-k+1)))\ndef g(k=2):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "idx_generation": 8,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return ([[1, 2, 3],\n             [2, 4, 5],\n             [3, 5, 6]],)\n\nassert f(*g())\n",
        "idx_generation": 15,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, k=3) -> bool:\n    \"\"\"Check if the given string contains any character repeated exactly k times in a row.\"\"\"\n    for i in range(len(string) - k + 1):\n        if len(set(string[i:i+k])) == 1:\n            return True\n    return False\n\ndef g():\n    return \"aabbccddeeeff\"\n\nassert f(g())\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Given two strings s and t, determine if they are isomorphic. Two strings are isomorphic if the characters in s\n    can be replaced to get t.\"\"\"\n    if len(s) != len(t):\n        return False\n    mapping = {}\n    for i in range(len(s)):\n        if s[i] not in mapping:\n            mapping[s[i]] = t[i]\n        elif mapping[s[i]] != t[i]:\n            return False\n    return True\ndef g(s=\"paper\", t=\"title\"):\n    return s, t\nassert f(*g())\n",
        "idx_generation": 19,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(squares: List[List[int]], m=41, n=12, target=492) -> bool:\n    \"\"\"Tile an m x n checkerboard with 3 x 1 tiles. The solution is a list of sixtuples [i1, j1, i2, j2, i3, j3] with\ni2 == i1 and j2 == j1 + 1 or i2 == i1 + 1 and j2 == j1 with no overlap.\"\"\"\n    covered = []\n    for (i1, j1, i2, j2, i3, j3) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j3 < n and (j3 - j1 + i3 - i1 == 2)\n        covered += [(i1, j1), (i2, j2), (i3, j3)]\n    return len(set(covered)) == len(covered) == target\n\ndef g(m=41, n=12, target=492):\n    if m % 3 == 0:\n        ans = [[i, j, i + 1, j, i + 2, j] for i in range(0, m, 3) for j in range(n)]\n    elif n % 3 == 0:\n        ans = [[i, j, i, j + 1, i, j + 2] for i in range(m) for j in range(0, n, 3)]\n    else:\n        ans = [[i, j, i + 1, j, i + 2, j] for i in range(2, m, 3) for j in range(n)]\n        ans += [[0, j, 1, j, 2, j] for j in range(0, n - 2, 3)]\n    return ans\n\nassert f(g())\n",
        "idx_generation": 76,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]]) -> int:\n    \"\"\"Given a 2D grid of 0s and 1s, find the number of islands. An island is surrounded by water and is formed by connecting\n    adjacent lands horizontally or vertically. Return the total number of islands in the grid.\"\"\"\n    if not grid:\n        return 0\n    \n    def dfs(row, col):\n        if row < 0 or col < 0 or row >= len(grid) or col >= len(grid[0]) or grid[row][col] != 1:\n            return\n        \n        grid[row][col] = -1\n        \n        dfs(row+1, col)\n        dfs(row-1, col)\n        dfs(row, col+1)\n        dfs(row, col-1)\n    \n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                dfs(i, j)\n                count += 1\n    \n    return count\n\ndef g():\n    return [[1, 1, 0, 0, 0],\n            [1, 1, 0, 0, 0],\n            [0, 0, 1, 0, 0],\n            [0, 0, 0, 1, 1]]\n\nassert f(g()) == 3\n\n\n",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray in the given array whose sum is divisible by k\"\"\"\n    n = len(arr)\n    prefix_sum = 0\n    sum_set = set()\n    for i in range(n):\n        prefix_sum = (prefix_sum + arr[i]) % k\n        if prefix_sum == 0 or prefix_sum in sum_set:\n            return True\n        sum_set.add(prefix_sum)\n    return False\n\ndef g(arr: List[int] = [10, 7, 5, 3, 2], k=3):\n    return (arr, k)\n\nassert f(*g())\n",
        "idx_generation": 183,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring=\"abc\") -> bool:\n    \"\"\"Check if a given substring exists in the given string.\nSample Input:\n`\"abcdefg\"`\nSample Output:\n`True`\"\"\"\n    return substring in string\n\ndef g(substring=\"abc\"):\n    return \"abcdefg\"\n\nassert f(g())\n",
        "idx_generation": 16,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3, c=4) -> bool:\n    \"\"\"Check if the given number n can be expressed as a sum of a, b, and c\"\"\"\n    if n < min(a, b, c):\n        return False\n    if n == a or n == b or n == c:\n        return True\n    if n == a + b or n == a + c or n == b + c:\n        return True\n    if n < a + b + c:\n        return False\n    return f(n-a) or f(n-b) or f(n-c)\n\ndef g(a=2, b=3, c=4):\n    return a + b + c\n\nassert f(g())\n",
        "idx_generation": 12,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a sparse matrix.\"\"\"\n    n = len(matrix)\n    \n    count_zeros = 0\n    count_non_zeros = 0\n    \n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 0:\n                count_zeros += 1\n            else:\n                count_non_zeros += 1\n    \n    return count_zeros > count_non_zeros\n\ndef g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\nassert f(g())\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lb: List[bool], trips=[[0, 0, 1], [0, 1, 1], [0, 0, 1], [0, 1, 1]]) -> bool:\n    \"\"\"Given a list of lists of triples of integers, return True for each list with a total of at least 2 and\nFalse for each other list.\"\"\"\n    return len(lb) == len(trips) and all((b is True if sum(s) >= 2 else b is False for (b, s) in zip(lb, trips)))\n\ndef g(trips=[[0, 0, 1], [0, 1, 1], [0, 0, 1], [0, 1, 1]]):\n    return [sum(s) >= 2 for s in trips]\n\nassert f(g())\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y=-5, z=10) -> bool:\n    \"\"\"Check if the sum of three numbers is equal to x.\"\"\"\n    return x == (y + z)\ndef g(y=-5, z=10):\n    return y + z\nassert f(g())\n",
        "idx_generation": 1,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if a given substring exists in the given string.\"\"\"\n    return substr in s.lower()\ndef g(substr='python'):\n    return 'Python is awesome!'\nassert f(g())\n",
        "idx_generation": 23,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int) -> bool:\n    \"\"\"Check if a given number is a perfect square.\"\"\"\n    return x > 0 and int(x ** 0.5) ** 2 == x\ndef g():\n    return 144\nassert f(g())\n",
        "idx_generation": 0,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=1000, b=10000) -> bool:\n    \"\"\"Find a number that is divisible by n and is the product of a and b.\"\"\"\n    return n % n == 0 and n % a == 0 and n % b == 0\n\ndef g(a=1000, b=10000):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the given string contains all the characters in the target string in the same order.\"\"\"\n    target_index = 0\n    for char in s:\n        if char == target[target_index]:\n            target_index += 1\n        if target_index == len(target):\n            return True\n    return False\n\ndef g(target='python'):\n    return 'python programming'\n\nassert f(g())",
        "idx_generation": 7,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if there are three consecutive numbers in the list that form a geometric progression\"\"\"\n    for i in range(len(arr)-2):\n        if arr[i+1] / arr[i] == arr[i+2] / arr[i+1]:\n            return True\n    return False\n\ndef g():\n    return [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]\n\nassert f(g())\n",
        "idx_generation": 274,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if the given string contains all the characters in the target string.\nSample Input:\n`'heolll'`\nSample Output:\n`True`\"\"\"\n    target_chars = set(target)\n    for char in s:\n        target_chars.discard(char)\n        if not target_chars:\n            return True\n    return False\n\ndef g(target='hello'):\n    return target\n\nassert f(g())\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if the given string s contains a subsequence of length n with all distinct characters.\"\"\"\n    if n > len(s):\n        return False\n    subsequences = itertools.combinations(s, n)\n    for sub in subsequences:\n        if len(set(sub)) == n:\n            return True\n    return False\n\ndef g(n: int):\n    return \"abcdefghijklmnopqrstuvwxyz\" * (n // 26 + 1)\n\nassert f(g(5), 5)\n",
        "idx_generation": 91,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a way to remove all duplicates from a list, while preserving the original order of elements.\"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums == list(dict.fromkeys(nums))\ndef g():\n    return [1, 2, 3, 4, 3, 2, 1]\nassert f(g())\n",
        "idx_generation": 39,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Check if a date is in the specified format\"\"\"\n    try:\n        datetime.strptime(date, format)\n        return True\n    except ValueError:\n        return False\n\ndef g(format='%Y-%m-%d'):\n    return datetime.now().strftime(format)\n\nassert f(g())\n",
        "idx_generation": 25,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=5, b=10) -> bool:\n    \"\"\"Check if a number is within a given range\"\"\"\n    return a <= x <= b\ndef g(a=5, b=10):\n    return 7\nassert f(g())\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(deck: List[str], num_players: int, num_cards: int) -> bool:\n    \"\"\"Check if each player has a unique set of cards from the given deck.\"\"\"\n    random.shuffle(deck)\n    hands = [deck[i:i+num_cards] for i in range(0, num_players*num_cards, num_cards)]\n    return len(set(tuple(hand) for hand in hands)) == num_players\n\ndef g():\n    return (['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'] * 4, 4, 5)\n\nassert f(*g())\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if n is a multiple of m\"\"\"\n    return n % m == 0\n\ndef g(m: int):\n    return 100\n\nassert f(g(5), 20)\n",
        "idx_generation": 422,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if the given string s contains a subsequence of length n with all vowels.\"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    if n > len(s):\n        return False\n    subsequences = itertools.combinations(s, n)\n    for sub in subsequences:\n        if len(set(sub).intersection(vowels)) == n:\n            return True\n    return False\n\ndef g(n: int):\n    return \"aeiou\" * (n // 5 + 1)\n\nassert f(g(3), 3)\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import string\nfrom typing import*\n\ndef f(phrase: str, letters=string.ascii_lowercase) -> bool:\n    \"\"\"Check if all the letters in the given phrase are present in the list of letters.\n    Return True if all letters are present, False otherwise.\"\"\"\n    phrase_letters = set(phrase.lower())\n    return set(letters) == phrase_letters\n\ndef g(letters=string.ascii_lowercase):\n    return \"the quick brown fox\"\n\nassert f(g()) == False\n\n",
        "idx_generation": 81,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='programming', t='coding') -> bool:\n    \"\"\"Check if the given number n is divisible by the length of s, and return True if it is.\"\"\"\n    return n % len(s) == 0\n\ndef g(s='programming', t='coding'):\n    return len(s)\n\nassert f(g())\n",
        "idx_generation": 147,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form a strictly decreasing sequence.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+1] < arr[i+j] for j in range(k-1)):\n            return True\n    return False\n\ndef g():\n    return [10, 8, 6, 4, 2, 0]\n\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a magic square, where the sum of each row, column, and diagonal is the same.\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) != target_sum:\n            return False\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum or sum(matrix[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n    return True\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nassert f(g())\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, matrix: List[List[int]]) -> List[int]:\n    \"\"\"Find and return the maximum element in each column of the given matrix.\"\"\"\n    max_elements = []\n    for col in range(len(matrix[0])):\n        column_values = [row[col] for row in matrix]\n        max_elements.append(max(column_values))\n    return max_elements\n\ndef g():\n    return [[4, 2, 7], [1, 5, 3], [8, 6, 9]]\n\nassert f(3, g()) == [8, 6, 9]\n\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import factorial\n\ndef f(x: int, n: int = 4) -> bool:\n    \"\"\"Find a number whose factorial is divisible by n.\"\"\"\n    return factorial(x) % n == 0\ndef g(n: int = 4):\n    x = 1\n    while factorial(x) % n != 0:\n        x += 1\n    return x\nassert f(g())\n",
        "idx_generation": 14,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=5, k=10) -> bool:\n    \"\"\"Given an integer `n`, find the smallest integer `m` such that `m` is divisible by `n` and the sum of its digits is greater than or equal to `k`.\n    Return True if such a number exists, False otherwise.\"\"\"\n    def digit_sum(num):\n        return sum([int(digit) for digit in str(num)])\n    \n    while m % n != 0 or digit_sum(m) < k:\n        m += 1\n    \n    return True\n\ndef g(m=5, k=10):\n    return m\n\nassert f(g())\n",
        "idx_generation": 97,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if the product of two positive integers n and m is equal to the sum of all the integers from 1 to n+m.\"\"\"\n    return n * m == sum(range(1, n + m + 1))\n\ndef g():\n    return (2, 3)\n\nassert f(*g()) == False\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=5, c=7) -> bool:\n    \"\"\"Check if a given number is divisible by all three numbers a, b, and c.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=3, b=5, c=7):\n    n = a * b * c\n    return n\nassert f(g())\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom collections import Counter\n\ndef f(string: str, k=2) -> bool:\n    \"\"\"Check if the given string contains any repeated characters k times.\"\"\"\n    char_counts = Counter(string)\n    for count in char_counts.values():\n        if count == k:\n            return True\n    return False\n\ndef g():\n    return \"aabbccddeeff\"\n\nassert f(g())\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a Fibonacci sequence.\"\"\"\n    if len(numbers) < 3:\n        return False\n    for i in range(2, len(numbers)):\n        if numbers[i] != numbers[i-1] + numbers[i-2]:\n            return False\n    return True\ndef g():\n    return [1, 1, 2, 3, 5, 8, 13]\nassert f(g())\n",
        "idx_generation": 55,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target='hello world') -> bool:\n    \"\"\"Check if the given string is a valid anagram of the target string.\"\"\"\n    if len(string) != len(target):\n        return False\n    freq = {}\n    for char in string:\n        freq[char] = freq.get(char, 0) + 1\n    for char in target:\n        if char not in freq or freq[char] == 0:\n            return False\n        freq[char] -= 1\n    return True\n\ndef g(target='hello world'):\n    return ''.join(sorted(target, reverse=True))\n\nassert f(g())\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4]) -> bool:\n    \"\"\"Given a list of integers 'lst' and an integer 'n', find if there exists a pair of integers in the list such that their\n    sum is equal to 'n'. Return True if a pair exists, False otherwise.\"\"\"\n    seen = set()\n    for num in lst:\n        if n - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(lst=[1, 2, 3, 4]):\n    return 5\n\nassert f(g()) == True\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Check if the given number n is divisible by both a and b.\"\"\"\n    return n % a == 0 and n % b == 0\n\ndef g(a=2, b=3):\n    n = a * b\n    return n\n\nassert f(g())\n",
        "idx_generation": 115,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a lower triangular matrix.\"\"\"\n    n = len(matrix)\n    \n    # Check if matrix is lower triangular\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != 0:\n                return False\n    \n    return True\n\ndef g(matrix=[[1, 0, 0], [2, 3, 0], [4, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 107,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=3, num_occurrences=2) -> bool:\n    \"\"\"Check if the target value occurs exactly twice in the given list.\"\"\"\n    return arr.count(target) == num_occurrences\n\ndef g(target=3, num_occurrences=2):\n    arr = [target] * num_occurrences\n    return arr\n\nassert f(g())\n",
        "idx_generation": 178,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(rectangles: List[List[int]]) -> bool:\n    \"\"\"Check if the given list of rectangles overlaps with each other.\"\"\"\n    for i, rect1 in enumerate(rectangles):\n        for j, rect2 in enumerate(rectangles):\n            if i != j:\n                if rect1[0] < rect2[2] and rect1[2] > rect2[0] and rect1[1] < rect2[3] and rect1[3] > rect2[1]:\n                    return True\n    return False\n\ndef g():\n    return [[0, 0, 2, 2], [1, 1, 3, 3], [4, 4, 6, 6], [5, 5, 7, 7]]\n\nassert f(g())\n",
        "idx_generation": 171,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is an identity matrix\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if (i == j and matrix[i][j] != 1) or (i != j and matrix[i][j] != 0):\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n\nassert f(g())\n",
        "idx_generation": 111,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='Python') -> bool:\n    \"\"\"Check if a given string starts with the target string.\"\"\"\n    return s.startswith(target)\n\ndef g(target='Python'):\n    return target + ' Programming'\n\nassert f(g())\n",
        "idx_generation": 89,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome and contains only even numbers.\"\"\"\n    return nums == nums[::-1] and all(num % 2 == 0 for num in nums)\n\ndef g():\n    return [2, 4, 6, 8, 10, 8, 6, 4, 2]\n\nassert f(g())\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    if rows != cols:\n        return False\n    \n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    \n    return True\n\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], n=5) -> bool:\n    \"\"\"Find if there exists a list of n words that are all palindromes\"\"\"\n    return all(word == word[::-1] for word in words) and len(words) == n\ndef g(n=5):\n    return ['level'] * n\nassert f(g())\n\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(year: int, month: int, day: int) -> bool:\n    \"\"\"Check if the given date is a national holiday in the United States.\"\"\"\n    us_holidays = [\n        (1, 1),   # New Year's Day\n        (7, 4),   # Independence Day\n        (12, 25)  # Christmas Day\n    ]\n    return (month, day) in us_holidays\n\ndef g():\n    current_year = datetime.datetime.now().year\n    return current_year, 7, 4\n\nassert f(*g())\n",
        "idx_generation": 91,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Find a number in the list that is divisible by n.\"\"\"\n    return any(num % n == 0 for num in nums)\ndef g(nums=[4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return next((num for num in nums if num % 2 == 0))\nassert f(g())\n",
        "idx_generation": 9,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str) -> bool:\n    \"\"\"Check if the given date is a weekend\"\"\"\n    date_obj = datetime.strptime(date, '%Y-%m-%d')\n    return date_obj.weekday() >= 5\n\ndef g():\n    return '2022-12-25'\n\nassert f(g())\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(n: int, numbers: List[int]) -> bool:\n    \"\"\"Check if n can be obtained by adding up any combination of numbers from the given list.\"\"\"\n    for r in range(1, len(numbers)+1):\n        for combination in itertools.combinations(numbers, r):\n            if sum(combination) == n:\n                return True\n    return False\n\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return sum(numbers)\n\nassert f(g(), numbers=[1, 2, 3, 4, 5])\n",
        "idx_generation": 248,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]], target=20) -> bool:\n    \"\"\"Find a path in the grid that sums up to the target value.\"\"\"\n    def dfs(row, col, curr_sum):\n        if row >= len(grid) or col >= len(grid[0]):\n            return False\n        curr_sum += grid[row][col]\n        if curr_sum == target:\n            return True\n        return dfs(row + 1, col, curr_sum) or dfs(row, col + 1, curr_sum)\n\n    return dfs(0, 0, 0)\n\ndef g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 37,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abcde') -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substring in s\n\ndef g(substring='abcde'):\n    return 'abcdefghijklmnopqrstuvwxyz'\n\nassert f(g())\n",
        "idx_generation": 0,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=0) -> int:\n    \"\"\"Find the total number of occurrences of a target value in the given matrix.\"\"\"\n    count = 0\n    for row in matrix:\n        count += row.count(target)\n    return count\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 0, 6], [7, 0, 9]]\n\nassert f(g()) == 2\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a subsequence of numbers in the array that sums up to the target value\"\"\"\n    n = len(arr)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < arr[i-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]]\n    return dp[n][target]\n\ndef g(target=15):\n    return [5, 2, 8, 4, 1, 3, 7]\n\nassert f(g())\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=4, s=15) -> bool:\n    \"\"\"Find a list of n positive integers that sum up to s and the maximum number is greater than the sum of the other numbers.\"\"\"\n    return len(x) == n and sum(x) == s and max(x) > (sum(x) - max(x))\ndef g(n=4, s=15):\n    x = [1] * n\n    x[0] = s - (n - 1)\n    return x\nassert f(g())\n",
        "idx_generation": 1,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target: str) -> List[str]:\n    \"\"\"Given a list of words and a target word, find all the words that can be formed by rearranging the letters of the target word.\n    Return a list of all the words that can be formed.\"\"\"\n    target = sorted(target)\n    result = []\n    for word in words:\n        if sorted(word) == target:\n            result.append(word)\n    return result\n\ndef g():\n    return [\"cat\", \"act\", \"dog\", \"god\", \"tree\"]\n\nassert f(g(), \"act\") == [\"cat\", \"act\"]\n\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=2) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form a perfect square sequence.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+1] == arr[i+j] ** 2 for j in range(k-1)):\n            return True\n    return False\n\ndef g():\n    return [1, 4, 16, 5, 25]\n\nassert f(g())\n",
        "idx_generation": 134,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=500, arr=[100, 200, 300, 400, 500]) -> bool:\n    \"\"\"Find the smallest n such that the sum of the first n elements in the array exceeds m.\"\"\"\n    return sum(arr[:n]) > m\n\ndef g(m=500, arr=[100, 200, 300, 400, 500]):\n    n = 0\n    sum_elements = 0\n    while sum_elements <= m:\n        n += 1\n        sum_elements = sum(arr[:n])\n    return n\n\nassert f(g())\n",
        "idx_generation": 93,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a given number is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 13\n\nassert f(g())\n",
        "idx_generation": 10,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Check if x is a concatenation of all words in the list.\"\"\"\n    return ''.join(words) == x\ndef g(words=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(words)\nassert f(g())\n",
        "idx_generation": 9,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list such that their sum is equal to the product of their absolute difference and their average.\"\"\"\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i+1, n):\n            if numbers[i] + numbers[j] == abs(numbers[i] - numbers[j]) * ((numbers[i] + numbers[j]) / 2):\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(prime_list: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers contains any twin primes.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    return any(prime_list[i] - prime_list[i-1] == 2 for i in range(1, len(prime_list))) and all(is_prime(num) for num in prime_list)\ndef g():\n    return [3, 5, 11, 13, 17, 19, 31, 37]\nassert f(g())\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Dict\n\ndef f(records: List[Dict[str, int]], key='age') -> bool:\n    \"\"\"Check if any of the records in the list have the specified key.\"\"\"\n    return any(key in record for record in records)\n\ndef g(key='age'):\n    return [{'name': 'Alice', 'score': 90}, {'name': 'Bob', 'age': 25}, {'name': 'Charlie', 'score': 110}]\n\nassert f(g())\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(d: Dict[str, int], target=100) -> List[str]:\n    \"\"\"Find all keys in the dictionary whose value is divisible by the given target.\"\"\"\n    divisible_keys = [key for key, value in d.items() if value % target == 0]\n    return divisible_keys\n\ndef g(target=100):\n    d = {'a': 200, 'b': 300, 'c': 500, 'd': 400, 'e': 600, 'f': 700}\n    return d\n\nassert f(g()) == ['a', 'b', 'c', 'd', 'e', 'f']\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, letter='e', count=2) -> bool:\n    \"\"\"Check if a given sentence contains at least a specified number of occurrences of a specified letter.\"\"\"\n    return sentence.count(letter) >= count\n\ndef g():\n    return (\"The quick brown fox jumps over the lazy dog.\", \"o\", 2)\n\nassert f(*g())\n",
        "idx_generation": 31,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric along its main diagonal\"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix[0])):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 83,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(password: str, strength=3) -> bool:\n    \"\"\"Check if the given password meets the required strength criteria.\"\"\"\n    if len(password) >= 8:\n        uppercase = any(c.isupper() for c in password)\n        lowercase = any(c.islower() for c in password)\n        digit = any(c.isdigit() for c in password)\n        special = any(not c.isalnum() for c in password)\n        return uppercase + lowercase + digit + special >= strength\n    return False\n\ndef g(password='Password123!'):\n    return password\n\nassert f(g())\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import string\nfrom typing import*\n\ndef f(words: List[str], suffix='logy') -> List[str]:\n    \"\"\"Find all the words in the list that end with the given suffix.\"\"\"\n    return [word for word in words if word.endswith(suffix)]\n\ndef g(suffix='logy'):\n    return ['biology', 'psychology', 'geology', 'history']\n\nassert f(g()) == ['biology', 'psychology', 'geology']\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, target: int) -> bool:\n    \"\"\"Check if the given number n is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(target: int) -> int:\n    \"\"\"Find the largest prime number smaller than or equal to the target number.\"\"\"\n    for n in range(target, 1, -1):\n        if f(n, target):\n            return n\n    return -1\n\nassert f(g(target=20), target=20)\n\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is an upper triangular matrix, where all the values below the main diagonal are zero.\"\"\"\n    n = len(matrix)\n    for i in range(1, n):\n        for j in range(i):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [0, 4, 5], [0, 0, 6]]\n\nassert f(g())\n",
        "idx_generation": 101,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(s: str, t: str) -> bool:\n    \"\"\"Check if two strings are anagrams of each other.\"\"\"\n    if len(s) != len(t):\n        return False\n    \n    s_count = [0] * 26\n    t_count = [0] * 26\n    \n    for char in s:\n        s_count[ord(char) - ord('a')] += 1\n    \n    for char in t:\n        t_count[ord(char) - ord('a')] += 1\n    \n    return s_count == t_count\n\ndef g():\n    return \"listen\", \"silent\"\n\nassert f(*g())\n",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Check if the given 2D list is a diagonal matrix.\"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and arr[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    arr = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> List[int]:\n    \"\"\"Return the list of diagonal elements from the given matrix.\"\"\"\n    diag = []\n\n    for i in range(len(arr)):\n        diag.append(arr[i][i])\n\n    return diag\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == [1, 5, 9]\n",
        "idx_generation": 457,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the length of the string s is a multiple of n.\"\"\"\n    return len(s) % n == 0\ndef g(n=3):\n    return 'a' * n\nassert f(g())\n",
        "idx_generation": 40,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(grades: Dict[str, int], passing_grade=60, subject=\"Math\") -> bool:\n    \"\"\"Check if the grade for a specific subject in the dictionary is above or equal to the passing grade.\"\"\"\n    return grades.get(subject, 0) >= passing_grade\n\ndef g(passing_grade=60, subject=\"Math\"):\n    return {\"Math\": 70, \"Science\": 80, \"English\": 90}\n\nassert f(g())\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Given a list of numbers, find if there exists a subset of numbers that adds up to the target number.\n    Return True if such a subset exists, False otherwise.\"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in numbers:\n        for i in range(target, num - 1, -1):\n            if dp[i - num]:\n                dp[i] = True\n    return dp[target]\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g()) == True\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Check if the given number n is the result of multiplying two specific numbers.\"\"\"\n    return n == a * b\ndef g(a=2, b=3):\n    return math.prod([a, b])\nassert f(g())\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a={'apple': 1, 'banana': 2, 'orange': 3}, b={'mango': 4, 'banana': 5, 'kiwi': 6}) -> bool:\n    \"\"\"Find a key that is present in both dictionaries a and b\"\"\"\n    return s in a and s in b\ndef g(a={'apple': 1, 'banana': 2, 'orange': 3}, b={'mango': 4, 'banana': 5, 'kiwi': 6}):\n    return next((key for key in b if key in a))\nassert f(g())\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"Given a string, determine if it contains a substring and if the substring appears an odd number of times.\"\"\"\n    return substr in string and string.count(substr) % 2 != 0\n\ndef g(substr='abc'):\n    return 'xyz' + substr*3 + '123'\n\nassert f(g())\n",
        "idx_generation": 155,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is sorted in ascending order.\"\"\"\n    return numbers == sorted(numbers)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \nassert f(g())\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 315,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y=42, z=0, w=0) -> bool:\n    \"\"\"Check if the product of four numbers is equal to 0\"\"\"\n    return x * y * z * w == 0\ndef g(y=42, z=0, w=0):\n    if y == 0 or z == 0 or w == 0:\n        return 0\n    return 1\nassert f(g())\n",
        "idx_generation": 156,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=16) -> bool:\n    \"\"\"Find if there are two numbers in the list that sum up to the target value.\"\"\"\n    num_set = set()\n    for num in numbers:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(target=16):\n    numbers = [1, 5, 9, 12, 4, 7]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 16,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(prices: List[float], discount=0.2) -> bool:\n    \"\"\"Given a list of prices, find if there is any combination of prices that can be discounted by the given discount amount\n    to make the total price less than or equal to 100. Return True if such a combination exists, False otherwise.\"\"\"\n    for i in range(len(prices)):\n        for j in range(i + 1, len(prices)):\n            for k in range(j + 1, len(prices)):\n                if prices[i] + prices[j] + prices[k] <= 100 * (1 - discount):\n                    return True\n    return False\n\ndef g(discount=0.3):\n    return [50, 30, 20, 40]\n\nassert f(g()) == False\n\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that satisfy the equation x^3 + y^3 = z^3.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i]**3 + nums[j]**3 == nums[k]**3:\n                    return True\n    return False\n\ndef g(target=100):\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == False\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='programming', t='coding') -> bool:\n    \"\"\"Check if the length of s is greater than the length of t, and return True if it is.\"\"\"\n    return len(s) > len(t)\n\ndef g(s='programming', t='coding'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[0])))\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 58,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, numbers=[1, 2, 3, 4, 5], target=6) -> bool:\n    \"\"\"Check if there is a pair of numbers from a list that sums up to the target number.\"\"\"\n    return any((num1 + num2 == target for num1 in numbers for num2 in numbers)) and s == \"Yes\"\ndef g(numbers=[1, 2, 3, 4, 5], target=6):\n    return \"Yes\"\nassert f(g())\n",
        "idx_generation": 93,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the given matrix is a magic square, where the sum of each row, column, and diagonal is the same.\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum = sum(matrix[i][i] for i in range(n))\n    anti_diagonal_sum = sum(matrix[i][n-i-1] for i in range(n))\n    return len(set(row_sums + col_sums + [diagonal_sum, anti_diagonal_sum])) == 1\ndef g(n=3):\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nassert f(g())\n",
        "idx_generation": 65,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=4, b=8) -> bool:\n    \"\"\"Check if the given number is a multiple of either a or b\"\"\"\n    return n % a == 0 or n % b == 0\n\ndef g(a=4, b=8):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 119,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list where the second number is the square of the first number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[i] == nums[j]:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 9, 16, 25]\n\nassert f(g())\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='bye') -> bool:\n    \"\"\"Check if a word appears anywhere in a string.\"\"\"\n    return word in s\ndef g(word='bye'):\n    return \"Goodbye \" + word\nassert f(g())\n",
        "idx_generation": 136,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x=5) -> bool:\n    \"\"\"Find if the given number n is a prime number or not\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 13\n\nassert f(g())\n",
        "idx_generation": 12,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='programming') -> bool:\n    \"\"\"Check if the characters of a word appear in reverse order in a string.\"\"\"\n    i = len(word) - 1\n    for char in s:\n        if char == word[i]:\n            i -= 1\n        if i == -1:\n            return True\n    return False\ndef g(word='programming'):\n    return word[::-1]\nassert f(g())\n",
        "idx_generation": 153,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"Find and return the maximum element in the given matrix.\"\"\"\n    max_element = float('-inf')\n    for row in matrix:\n        for element in row:\n            if element > max_element:\n                max_element = element\n    return max_element\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == 9\n\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find the product of all numbers in the list lst, and return True if the product is divisible by n\"\"\"\n    product = 1\n    for num in lst:\n        product *= num\n    return product % n == 0\ndef g(lst=[1, 2, 3, 4, 5]):\n    product = 1\n    for num in lst:\n        product *= num\n    return product\nassert f(g())\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='programming', max_len=5) -> bool:\n    \"\"\"Check if the given word can be formed by rearranging the letters of the given string\"\"\"\n    if len(word) != len(s):\n        return False\n    return sorted(word) == sorted(s)\n\ndef g(word='programming', max_len=5):\n    if len(word) <= max_len:\n        return word\n    return ''.join(sorted(word))\n\nassert f(g())\n",
        "idx_generation": 325,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, primes: List[int]=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"Check if the given number is a prime number and present in the list of primes.\"\"\"\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return n in primes\n\ndef g(n: int=5, primes: List[int]=[2, 3, 5, 7, 11, 13, 17, 19]):\n    return n\n\nassert f(g())\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a pangram, which is a sentence that contains every letter of the alphabet at least once.\"\"\"\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    return set(s.lower()) >= alphabet\n\ndef g():\n    return 'The quick brown fox jumps over the lazy dog'\n\nassert f(g())\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the given list whose sum is equal to the target.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target) for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(nums=[10, 20, 30, 40, 50]):\n    return nums\nassert f(g())\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a Fibonacci sequence.\"\"\"\n    if len(nums) < 3:\n        return False\n    for i in range(2, len(nums)):\n        if nums[i] != nums[i-1] + nums[i-2]:\n            return False\n    return True\n\ndef g():\n    return [0, 1, 1, 2, 3, 5, 8]\n\nassert f(g())\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag_sum1 = sum(matrix[i][i] for i in range(n))\n    diag_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum == target_sum for sum in row_sums + col_sums + [diag_sum1, diag_sum2])\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nassert f(g())\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target_char='a') -> bool:\n    \"\"\"Given a string, check if the target_char appears as the last character of any word in the string.\"\"\"\n    words = string.split()\n    for word in words:\n        if word[-1] == target_char:\n            return True\n    return False\ndef g(target_char='a'):\n    return \"apple banana cherry date\"\nassert f(g())\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], pattern=\"abc\") -> bool:\n    \"\"\"Given a list of words and a pattern string, find if there exists a word in the list that does not follow the pattern.\n    The pattern is a string of alphabets where each unique alphabet represents a unique character in the word.\n    Return True if a word does not follow the pattern, False otherwise.\"\"\"\n    for word in words:\n        if len(word) != len(pattern):\n            continue\n        mapping = {}\n        for i in range(len(word)):\n            if pattern[i] not in mapping:\n                mapping[pattern[i]] = word[i]\n            else:\n                if mapping[pattern[i]] != word[i]:\n                    return True\n    return False\n\ndef g(pattern=\"abc\"):\n    return [\"apple\", \"banana\", \"cherry\", \"dog\"]\n\nassert f(g()) == False\n",
        "idx_generation": 216,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"Check if the given string ends with the given substring.\"\"\"\n    return string.endswith(substr)\ndef g(substr='abc'):\n    return \"defgabc\"\nassert f(g())\n",
        "idx_generation": 391,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix has a unique maximum value.\"\"\"\n    max_value = max(matrix[i][j] for i in range(len(matrix)) for j in range(len(matrix[0])))\n    count = sum(1 for i in range(len(matrix)) for j in range(len(matrix[0])) if matrix[i][j] == max_value)\n    return count == 1\n\ndef g(matrix: List[List[int]]):\n    return [[matrix[j][i] for j in range(len(matrix[0]))] for i in range(len(matrix))]\n\nassert f(g([[1, 2, 3], [2, 4, 5], [3, 5, 6]]))\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the given list contains a pair of numbers that sum up to n\"\"\"\n    seen = set()\n    for num in lst:\n        if n - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst\nassert f(7, g())\n",
        "idx_generation": 56,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_length=2, target_sum=10) -> bool:\n    \"\"\"Check if there exists a subsequence in the given list whose length is equal to the target length\n    and the sum of its elements is equal to the target sum.\n    Return True if such a subsequence exists, False otherwise.\"\"\"\n    def is_subsequence(sub, main):\n        i = 0\n        for j in range(len(main)):\n            if i < len(sub) and sub[i] == main[j]:\n                i += 1\n        return i == len(sub)\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            subsequence = arr[i:j+1]\n            if len(subsequence) == target_length and sum(subsequence) == target_sum and is_subsequence(subsequence, arr):\n                return True\n    return False\n\ndef g(target_length=2, target_sum=10):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert f(g()) == True\n",
        "idx_generation": 204,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> List[int]:\n    \"\"\"Given a list of integers, return the k largest numbers in descending order.\"\"\"\n    nums.sort(reverse=True)\n    return nums[:k]\ndef g(k=3):\n    return [1, 5, 2, 8, 3, 9, 4, 7, 6, 10]\nassert f(g()) == [10, 9, 8]\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(n: int, matrix: List[List[int]]) -> List[int]:\n    \"\"\"Find and return the maximum element in each column of the given matrix.\"\"\"\n    max_elements = []\n    for col in range(len(matrix[0])):\n        max_elements.append(max(row[col] for row in matrix))\n    return max_elements\n\ndef g():\n    return [[4, 2, 7], [1, 5, 3], [8, 6, 9]]\n\nassert f(3, g()) == [8, 6, 9]\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, numbers=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(numbers=[1, 2, 3, 4, 5, 6]):\n    return numbers[1]\n\nassert f(g())\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nimport re\nfrom typing import List\n\ndef f(expressions: List[str], allowed_operators=['+', '-', '*', '/']) -> bool:\n    \"\"\"Check if all of the expressions in the list are valid mathematical expressions.\n    Each expression should only contain digits and allowed_operators, and should have a correct syntax.\"\"\"\n    pattern = r'^[\\d\\s' + re.escape(''.join(allowed_operators)) + ']+$'\n    for expression in expressions:\n        if not re.match(pattern, expression):\n            return False\n    return True\n\ndef g(allowed_operators=['+', '-', '*', '/']):\n    return ['2 + 3', '4 * 6 - 2', '8 / 2 + 5', '2 * 3']\n\nassert f(g())\n",
        "idx_generation": 120,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there exists a path in the matrix that sums up to the target number.\"\"\"\n    def backtrack(row, col, curr_sum):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or row >= len(matrix) or col >= len(matrix[0]):\n            return False\n        \n        if backtrack(row + 1, col, curr_sum + matrix[row][col]) or backtrack(row, col + 1, curr_sum + matrix[row][col]):\n            return True\n        \n        return False\n    \n    return backtrack(0, 0, 0)\n\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a diagonal matrix, where all the values outside the main diagonal are zero.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\nassert f(g())\n\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target_word=\"python\") -> bool:\n    \"\"\"Find if there exists a word in the list that can be formed by rearranging the letters of the target_word\"\"\"\n    target_freq = [0] * 26\n    for char in target_word:\n        target_freq[ord(char) - ord('a')] += 1\n    \n    for word in words:\n        word_freq = [0] * 26\n        for char in word:\n            word_freq[ord(char) - ord('a')] += 1\n        if word_freq == target_freq:\n            return True\n    return False\n\ndef g(words=[\"typhon\", \"typhoon\", \"python\", \"phonyt\"]):\n    return words\n\nassert f(g())\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, letters=['a', 'b', 'c', 'd', 'e']) -> bool:\n    \"\"\"Given a word and a list of letters, find if the word can be formed using all the letters exactly once.\n    Return True if it can be formed, False otherwise.\"\"\"\n    word = word.lower()\n    for letter in letters:\n        if letter not in word:\n            return False\n        word = word.replace(letter, '', 1)\n    return True\n\ndef g(letters=['a', 'b', 'c', 'd', 'e']):\n    return \"abcde\"\n\nassert f(g()) == True\n",
        "idx_generation": 29,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int = 3) -> bool:\n    \"\"\"Find a string that repeats n times.\"\"\"\n    return s * n == s + s + s\ndef g(n: int = 3):\n    return \"world\" * n\nassert f(g())\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[str]) -> bool:\n    \"\"\"Find a way to rearrange the letters in the word \"eleven plus two\" to form the word \"twelve plus one\". The answer should be represented as a list of index mappings.\"\"\"\n    return ['eleven plus two'[i] for i in li] == list('twelve plus one')\ndef g():\n    return ['eleven plus two'.index(t) for t in 'twelve plus one']\nassert f(g())\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    return np.array_equal(matrix, matrix.T)\n\ndef g():\n    return np.array([[1, 2, 3], [2, 4, 5], [3, 5, 6]])\n\nassert f(g())\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, t=42, upper=100) -> bool:\n    \"\"\"Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper\ndef g(t=42, upper=100):\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\nassert f(g())\n",
        "idx_generation": 114,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=1, b=1) -> bool:\n    \"\"\"Check if the given number is a Fibonacci number.\"\"\"\n    if n == 0:\n        return True\n    fib1, fib2 = 0, 1\n    while fib2 <= n:\n        if fib2 == n:\n            return True\n        fib1, fib2 = fib2, fib1 + fib2\n    return False\ndef g(a=2, b=3):\n    return a + b\nassert f(g())\n\n",
        "idx_generation": 279,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list that adds up to the target.\"\"\"\n    prefix_sum = 0\n    sum_set = set()\n    for num in numbers:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in sum_set:\n            return True\n        sum_set.add(prefix_sum)\n    return False\n\ndef g(target=5):\n    return [2, 3, 5, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 258,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]], n: int = 0) -> bool:\n    \"\"\"Check if the sum of the elements in each row of the matrix is equal to n.\"\"\"\n    return all(sum(row) == n for row in matrix)\n\ndef g(n: int = 0):\n    return [[i for i in range(1, n+1)]]\n\nassert f(g())\n",
        "idx_generation": 261,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a valid email address.\"\"\"\n    pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n    return bool(re.match(pattern, s))\n\ndef g():\n    return 'test@example.com'\n\nassert f(g())\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    n = len(matrix)\n    \n    # Check if matrix is symmetric\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    \n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 107,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list nums whose absolute difference is equal to k.\"\"\"\n    seen = set()\n    for num in nums:\n        if num + k in seen or num - k in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return ([3, 1, 4, 8, 5, 2], 2)\n\nassert f(*g())\n",
        "idx_generation": 15,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix, check if it is symmetric.\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[0])))\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(s: str, target='abcabcabc') -> bool:\n    \"\"\"Check if a string s can be rearranged to form the target string\"\"\"\n    char_count_s = {char: s.count(char) for char in set(s)}\n    char_count_target = {char: target.count(char) for char in set(target)}\n\n    return char_count_s == char_count_target\n\ndef g(target='abcabcabc'):\n    from itertools import permutations\n\n    for perm in permutations(target):\n        s = ''.join(perm)\n        if f(s, target):\n            return s\n\nassert f(g())\n",
        "idx_generation": 21,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the given array whose sum is divisible by k\"\"\"\n    n = len(arr)\n    prefix_sum = 0\n    sum_set = set()\n    for i in range(n):\n        prefix_sum = (prefix_sum + arr[i]) % k\n        if prefix_sum == 0 or prefix_sum in sum_set:\n            return True\n        sum_set.add(prefix_sum)\n    return False\n\ndef g(arr: List[int] = [12, 6, 3, 9, 4], k=5):\n    return (arr, k)\n\nassert f(*g())\n",
        "idx_generation": 240,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if the substring 'abc' exists in the given string s.\"\"\"\n    return substr in s\ndef g(substr='abc'):\n    return 'xyz' + substr + '123'\nassert f(g())\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=100, b=50) -> bool:\n    \"\"\"Check if the difference between two numbers is equal to x\"\"\"\n    return abs(a - b) == x\ndef g(a=100, b=50):\n    return a - b\nassert f(g())\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=3) -> bool:\n    \"\"\"Find if the given number n is a perfect power of m\"\"\"\n    power = 1\n    while m ** power <= n:\n        if m ** power == n:\n            return True\n        power += 1\n    return False\n\ndef g(m=3):\n    return m ** 4\n\nassert f(g())\n",
        "idx_generation": 12,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int) -> bool:\n    \"\"\"Check if a given number is a prime number.\"\"\"\n    if x < 2:\n        return False\n    for i in range(2, int(x ** 0.5) + 1):\n        if x % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g())\n",
        "idx_generation": 0,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y=12, z=6) -> bool:\n    \"\"\"Check if x is divisible by y and z.\"\"\"\n    return x % y == 0 and x % z == 0\n\ndef g(y=12, z=6):\n    return y * z\n\nassert f(g())\n",
        "idx_generation": 325,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find the number of coconuts to solve the following riddle:\n    There is a pile of coconuts, owned by five men. One man divides the pile into five equal piles, giving the\n    one left over coconut to a passing monkey, and takes away his own share. The second man then repeats the\n    procedure, dividing the remaining pile into five and taking away his share, as do the third, fourth, and\n    fifth, each of them finding one coconut left over when dividing the pile by five, and giving it to a monkey.\n    Finally, the group divide the remaining coconuts into five equal piles: this time no coconuts are left over.\n    How many coconuts were there in the original pile?\n                                      Quoted from https://en.wikipedia.org/wiki/The_monkey_and_the_coconuts\"\"\"\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g())\n",
        "idx_generation": 67,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char_count={'a': 2, 'b': 3, 'c': 1}) -> bool:\n    \"\"\"Check if the given string contains at least the same count of each character as specified in the dictionary.\"\"\"\n    count = {char: s.count(char) for char in set(s)}\n    return all(count[char] >= char_count[char] for char in count)\ndef g(char_count={'a': 2, 'b': 3, 'c': 1}):\n    s = ''\n    for char, count in char_count.items():\n        s += char * count\n    return s\nassert f(g())\n",
        "idx_generation": 23,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=5) -> bool:\n    \"\"\"Check if the given number is a perfect square or a perfect cube\"\"\"\n    return (n ** (1/2)).is_integer() or (n ** (1/3)).is_integer()\ndef g(a=3, b=5):\n    return a ** 2\nassert f(g())\n",
        "idx_generation": 4,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: float, n=3, k=7) -> bool:\n    \"\"\"Check if a floating-point number has a specific number of decimal places.\"\"\"\n    return len(str(x).split('.')[1]) == n and int(x * 10**n) % k == 0\ndef g(n=3, k=7):\n    return k / 10**n\nassert f(g())\n",
        "idx_generation": 99,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_substring='abc') -> bool:\n    \"\"\"Check if a given string contains the target substring in reverse order, ignoring case.\"\"\"\n    return target_substring[::-1].lower() in s.lower()\n\ndef g(target_substring='abc'):\n    return \"XYZcbazyx123\"\n\nassert f(g())\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the given string contains the target string.\"\"\"\n    return target in s\n\ndef g(target='python'):\n    return 'programming with python'\n\nassert f(g())\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Consider a directed graph where each node has exactly one outgoing edge. For each edge (u, v), call u the parent and\nv the child. Then find such a directed graph where the parent of the first node is not equal to the child of the second node,\nbut the grandparent of the first node is equal to the grandchild of the second node. Represent this graph by the list of children indices.\"\"\"\n    return li[0] != li[1] and li[li[li[0]]] == li[li[li[1]]]\ndef g():\n    return [1, 2, 3, 3]\nassert f(g())\n",
        "idx_generation": 311,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='puzzle') -> bool:\n    \"\"\"Check if the given string contains all the characters in the target string.\nSample Input:\n`'pzlule'`\nSample Output:\n`False`\"\"\"\n    target_chars = set(target)\n    for char in s:\n        target_chars.discard(char)\n        if not target_chars:\n            return True\n    return False\n\ndef g(target='puzzle'):\n    return target[::-1]\n\nassert f(g())\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=36) -> bool:\n    \"\"\"Check if the sum of two positive integers n and m is equal to 36.\"\"\"\n    return n + m == 36\n\ndef g(m=36):\n    return int(36 - m)\n\nassert f(g())\n",
        "idx_generation": 412,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if a given list contains any duplicate elements.\"\"\"\n    return len(arr) != len(set(arr))\n\ndef g():\n    return [1, 2, 2, 3, 4]\n\nassert f(g())\n",
        "idx_generation": 64,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format=\"%Y-%m-%d\") -> bool:\n    \"\"\"Check if the given date string can be formatted using the provided format\"\"\"\n    try:\n        datetime.strptime(date, format)\n        return True\n    except ValueError:\n        return False\n\ndef g(date=\"2022-01-01\"):\n    return date\n\nassert f(g())\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, lower=100, upper=1000) -> bool:\n    \"\"\"Check if a number is within the given range (inclusive)\"\"\"\n    return lower <= num <= upper\n\ndef g(lower=100, upper=1000):\n    return lower + (upper - lower) // 2\n\nassert f(g())\n",
        "idx_generation": 205,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(deck: List[str], num_players: int, num_cards: int) -> bool:\n    \"\"\"Check if each player has at least one matching card with another player from the given deck.\"\"\"\n    random.shuffle(deck)\n    hands = [deck[i:i+num_cards] for i in range(0, num_players*num_cards, num_cards)]\n    for i in range(num_players):\n        for j in range(i+1, num_players):\n            if any(card in hands[j] for card in hands[i]):\n                return True\n    return False\n\ndef g():\n    return (['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'] * 4, 4, 5)\n\nassert f(*g())\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import string\nfrom typing import*\n\ndef f(phrase: str, letters=string.ascii_lowercase) -> bool:\n    \"\"\"Check if all the letters in the given phrase are present in the list of letters.\n    Return True if all letters are present, False otherwise.\"\"\"\n    phrase_letters = set(phrase.lower())\n    return all(letter in phrase_letters for letter in letters)\n\ndef g(letters=string.ascii_lowercase):\n    return \"the quick brown fox\"\n\nassert f(g()) == False\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int], k=4) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form a non-decreasing sequence.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+1] >= arr[i+j] for j in range(k-1)):\n            return True\n    return False\n\ndef g():\n    return [2, 4, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 412,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square, where the sum of each row, each column, and each diagonal is the same.\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for i in range(n):\n        column_sum = sum(matrix[j][i] for j in range(n))\n        if column_sum != target_sum:\n            return False\n    \n    # Check main diagonal\n    diagonal_sum = sum(matrix[i][i] for i in range(n))\n    if diagonal_sum != target_sum:\n        return False\n    \n    # Check secondary diagonal\n    secondary_diagonal_sum = sum(matrix[i][n-i-1] for i in range(n))\n    if secondary_diagonal_sum != target_sum:\n        return False\n    \n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n    \nassert f(g())\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, matrix: List[List[int]]) -> int:\n    \"\"\"Find the sum of the even elements in the given matrix.\"\"\"\n    even_sum = 0\n    for row in matrix:\n        for element in row:\n            if element % 2 == 0:\n                even_sum += element\n    return even_sum\n\ndef g():\n    return [[4, 2, 7], [1, 5, 3], [8, 6, 9]]\n\nassert f(3, g()) == 20\n",
        "idx_generation": 375,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[987654321, 123456789], upper_bound=1000000000000000000) -> bool:\n    \"\"\"Check if a number is divisible by all the numbers in a list.\"\"\"\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums=[987654321, 123456789], upper_bound=1000000000000000000):\n    ans = 1\n    for i in nums:\n        ans *= i\n    return ans\nassert f(g())\n",
        "idx_generation": 18,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=5) -> bool:\n    \"\"\"Given an integer `n`, find the largest integer `m` such that the sum of all numbers from 1 to `m` is divisible by `n`.\n    Return True if such a number exists, False otherwise.\"\"\"\n    def sum_of_numbers(num):\n        return (num * (num + 1)) // 2\n    \n    while sum_of_numbers(m) % n != 0:\n        m -= 1\n    \n    return True\n\ndef g(m=5):\n    return m\n\nassert f(g())\n",
        "idx_generation": 97,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=4, c=6) -> bool:\n    \"\"\"Check if a given number is divisible by any two of the three numbers a, b, and c.\"\"\"\n    return (n % a == 0 and n % b == 0) or (n % b == 0 and n % c == 0) or (n % a == 0 and n % c == 0)\ndef g(a=2, b=4, c=6):\n    n = a * b * c\n    return n\nassert f(g())\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a Fibonacci sequence.\"\"\"\n    if len(numbers) < 3:\n        return False\n    for i in range(2, len(numbers)):\n        if numbers[i] != numbers[i-1] + numbers[i-2]:\n            return False\n    return True\n\ndef g():\n    return [0, 1, 1, 2, 3, 5, 8, 13, 21]\n\nassert f(g()) == True\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find the smallest integer k such that the sum of the first k triangular numbers is divisible by n\"\"\"\n    triangular_sum = 0\n    k = 1\n    while True:\n        triangular_sum += (k * (k + 1)) // 2\n        if triangular_sum % n == 0:\n            return True\n        k += 1\ndef g():\n    return 1\nassert f(g())\n",
        "idx_generation": 3,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3]) -> bool:\n    \"\"\"Check if the maximum element in a list is equal to a given number.\"\"\"\n    maximum = max(lst)\n    return maximum == 3\ndef g(lst=[1, 2, 3]):\n    return 3\nassert f(g())\n",
        "idx_generation": 219,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=4, b=5, c=6) -> bool:\n    \"\"\"Check if the given number n is divisible by a, b, and c.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\n\ndef g(a=4, b=5, c=6):\n    n = a * b * c\n    return n\n\nassert f(g())\n",
        "idx_generation": 152,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int) -> bool:\n    \"\"\"Check if a given number is a palindrome.\"\"\"\n    return str(x) == str(x)[::-1]\ndef g():\n    return 12321\nassert f(g())\n",
        "idx_generation": 0,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray) -> bool:\n    \"\"\"Check if the matrix is a lower triangular matrix.\"\"\"\n    n = matrix.shape[0]\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return np.array([[1, 0, 0], [2, 3, 0], [4, 5, 6]])\n\nassert f(g())\n",
        "idx_generation": 218,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find two numbers from the given list, whose sum is equal to the target.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]], target=0) -> List[Tuple[int, int]]:\n    \"\"\"Find the indices of all occurrences of a target value in the given matrix.\"\"\"\n    indices = []\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == target:\n                indices.append((i, j))\n    return indices\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 0, 6], [7, 0, 9]]\n\nassert f(g()) == [(1, 1), (2, 1)]\n\n",
        "idx_generation": 168,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='world') -> bool:\n    \"\"\"Check if a word appears at the end of a string.\"\"\"\n    return s.endswith(word)\ndef g(word='world'):\n    return \"Hello \" + word\nassert f(g())\n",
        "idx_generation": 91,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0]) if rows > 0 else 0\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i + 1, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 279,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Dict\n\ndef f(records: List[Dict[str, int]], key='score') -> List[str]:\n    \"\"\"Find and return the names of all the records in the list that have the specified key.\"\"\"\n    return [record['name'] for record in records if key in record]\n\ndef g(key='score'):\n    return [{'name': 'Alice', 'score': 90}, {'name': 'Bob', 'score': 80}, {'name': 'Charlie', 'score': 110}]\n\nassert f(g()) == ['Alice', 'Bob', 'Charlie']\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Find a number in the list that is a factor of x.\"\"\"\n    return any(x % num == 0 for num in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return next((num for num in nums if num % 3 == 0))\nassert f(g())\n",
        "idx_generation": 9,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a path in the matrix that sums up to the target value.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def dfs(row, col, curr_sum):\n        if row == rows or col == cols:\n            return False\n        curr_sum += matrix[row][col]\n        if curr_sum == target:\n            return True\n        return dfs(row+1, col, curr_sum) or dfs(row, col+1, curr_sum)\n\n    return dfs(0, 0, 0)\n\ndef g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 64,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Determine if a given string contains a given substring\"\"\"\n    return substring in s\ndef g(substring='abc'):\n    s = \"abcdefghi\"\n    return s\n\nassert f(g())\n",
        "idx_generation": 47,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=0) -> int:\n    \"\"\"Find the total number of occurrences of a target value in the given matrix.\"\"\"\n    count = 0\n    for row in matrix:\n        count += row.count(target)\n    return count\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 0, 6], [7, 0, 9]]\n\nassert f(g()) == 2\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subsequence of numbers in the array that sums up to the target value\"\"\"\n    n = len(arr)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < arr[i-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]]\n    return dp[n][target]\n\ndef g(target=10):\n    return [3, 5, 7, 2, 4, 1]\n\nassert f(g())\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], x=5, y=7) -> bool:\n    \"\"\"Check if there are two distinct integers in the list whose sum is equal to x + y\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == x + y:\n                return True\n    return False\ndef g(x=5, y=7):\n    return [1, 2, 3, 4, 6, 8, 9]\nassert f(g())\n",
        "idx_generation": 21,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[5, 10, 15]) -> bool:\n    \"\"\"Check if the minimum element in a list is equal to a given number.\"\"\"\n    minimum = min(lst)\n    return minimum == 5\ndef g(lst=[5, 10, 15]):\n    return 5\nassert f(g())\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int, p: int) -> bool:\n    \"\"\"Check if n is a palindrome number, m is an even number, and p is a prime number.\"\"\"\n    return str(n) == str(n)[::-1] and m % 2 == 0 and is_prime(p)\n\ndef g():\n    return (121, 4, 7)\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nassert f(*g())\n",
        "idx_generation": 11,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Find a word in the list that contains all the letters of the target word.\"\"\"\n    for word in words:\n        if all(letter in word for letter in target):\n            return True\n    return False\n\ndef g(target='python'):\n    return ['python', 'programming', 'puzzle', 'coding']\n\nassert f(g())\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(i: int, li=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=5) -> bool:\n    \"\"\"Find the index of an item in a list using negative indexing.\"\"\"\n    return li[i] == target and i < 0\ndef g(li=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=5):\n    return li.index(target) - len(li)\nassert f(g())\n",
        "idx_generation": 44,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list where the second number is the cube of the first number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[i] * nums[i] == nums[j]:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 27, 64, 125]\n\nassert f(g())\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if there exists three consecutive numbers in the list that form an arithmetic progression\"\"\"\n    for i in range(len(arr)-2):\n        if arr[i+1] - arr[i] == arr[i+2] - arr[i+1]:\n            return True\n    return False\n\ndef g():\n    return [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\n\nassert f(g())\n",
        "idx_generation": 58,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Dict\n\ndef f(records: List[Dict[str, int]], key='age', value=30) -> bool:\n    \"\"\"Check if all the records in the list have the specified key equal to a certain value.\"\"\"\n    return all(record.get(key) == value for record in records)\n\ndef g(key='age', value=30):\n    return [{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 30}, {'name': 'Charlie', 'age': 30}]\n\nassert f(g())\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(probs: List[float]) -> bool:\n    \"\"\"Check if the probabilities form a valid distribution\"\"\"\n    assert len(probs) == 4 and abs(sum(probs) - 1) < 1e-06\n    return all(p >= 0 for p in probs)\ndef g():\n    return [0.25] * 4\nassert f(g())\n",
        "idx_generation": 18,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a lower triangular matrix, where all the values above the main diagonal are zero.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [2, 3, 0], [4, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 94,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric along its main diagonal\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='hello', index=1) -> bool:\n    \"\"\"Check if a word appears at a certain index in a string\"\"\"\n    return s[index:index+len(word)] == word\ndef g(word='hello', index=1):\n    return \"h\" + word + \" world\"\nassert f(g())\n",
        "idx_generation": 1,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, target: int) -> bool:\n    \"\"\"Check if the given number n is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(target: int) -> int:\n    \"\"\"Find the smallest prime number larger than or equal to the target number.\"\"\"\n    for n in range(target, target*2):\n        if f(n, target):\n            return n\n    return -1\n\nassert f(g(target=20), target=20)\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is an upper triangular matrix, where all the values below the main diagonal are zero.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [0, 4, 5], [0, 0, 6]]\n\nassert f(g())\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if the two strings are anagrams of each other.\"\"\"\n    return sorted(s1.lower()) == sorted(s2.lower())\n\ndef g(s1='listen', s2='silent'):\n    return s1\n\nassert f(g(), 'silent')\n",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='abcde') -> bool:\n    \"\"\"Find the index of the first occurrence of character 'e' in string s, if it exists, and return True if the index is equal to n\"\"\"\n    try:\n        index = s.index('e')\n        return index == n\n    except ValueError:\n        return False\ndef g(s='abcde'):\n    try:\n        index = s.index('e')\n        return index\n    except ValueError:\n        return -1\nassert f(g())\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(grades: List[int], passing_grade=60) -> bool:\n    \"\"\"Check if all the grades in the given list are above or equal to the passing_grade.\n    Return True if all grades are passing, False otherwise.\"\"\"\n    return all(grade >= passing_grade for grade in grades)\n\ndef g(passing_grade=60):\n    return [75, 82, 68, 90, 77]\n\nassert f(g()) == True\n\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, num_list=[2, 3, 5, 7, 11]) -> bool:\n    \"\"\"Check if the given number n is a prime number\"\"\"\n    if n in num_list:\n        return True\n    if n < 2 or any(n % i == 0 for i in range(2, int(n ** 0.5) + 1)):\n        return False\n    return True\n\ndef g(num_list=[2, 3, 5, 7, 11]):\n    return num_list[0]\n\nassert f(g())\n",
        "idx_generation": 83,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(number: int, target=7) -> bool:\n    \"\"\"Check if the given number is a multiple of the target number.\"\"\"\n    return number % target == 0\ndef g(target=7):\n    return target * 5\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a={'apple': 1, 'banana': 2, 'orange': 3}, b={'mango': 4, 'banana': 5, 'kiwi': 6}) -> bool:\n    \"\"\"Find a key that is present in dictionary a but not in dictionary b\"\"\"\n    return s in a and s not in b\ndef g(a={'apple': 1, 'banana': 2, 'orange': 3}, b={'mango': 4, 'banana': 5, 'kiwi': 6}):\n    return next((key for key in a if key not in b))\nassert f(g())\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"Check if the given substring is a prefix of the given string.\"\"\"\n    return string.startswith(substr)\ndef g(substr='abc'):\n    return \"abcdefg\"\nassert f(g())\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a list of numbers is sorted in ascending order.\"\"\"\n    return sorted(nums) == nums\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric (equal to its transpose).\"\"\"\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n\n    for i in range(num_rows):\n        for j in range(num_cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 474,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]], target=5) -> bool:\n    \"\"\"Find if there is a path in the grid that sums up to the target value.\"\"\"\n    def dfs(i, j, curr_sum):\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]):\n            return False\n        curr_sum += grid[i][j]\n        if curr_sum == target:\n            return True\n        return dfs(i + 1, j, curr_sum) or dfs(i, j + 1, curr_sum)\n\n    return dfs(0, 0, 0)\n\ndef g(target=5):\n    grid = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return grid\n\nassert f(g())\n",
        "idx_generation": 16,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(numbers: List[float], target_value=0) -> bool:\n    \"\"\"Given a list of numbers, check if there exists a number in the list that is greater than or equal to the target_value.\"\"\"\n    for number in numbers:\n        if number >= target_value:\n            return True\n    return False\n\ndef g(target_value=0):\n    return [random.uniform(-1, 1) for _ in range(10)]\n\nassert f(g())\n",
        "idx_generation": 115,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that satisfy the equation x^2 + y^2 = target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i]**2 + nums[j]**2 == target:\n                return True\n    return False\n\ndef g(target: int = 10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], b=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Check if a number is present in both lists a and b\"\"\"\n    return n in a and n in b\ndef g(a=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], b=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return next((n for n in b if n in a), None)\nassert f(g())\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, numbers=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers from a list that has a product equal to a given number.\"\"\"\n    return any((num1 * num2 == target for num1 in numbers for num2 in numbers)) and s == \"True\"\ndef g(numbers=[1, 2, 3, 4, 5], target=10):\n    return \"True\"\nassert f(g())\n",
        "idx_generation": 93,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a symmetric matrix, where the element at i,j is equal to the element at j,i for all i and j.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 101,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Check if the given number is a multiple of a and b\"\"\"\n    return n % a == 0 and n % b == 0\n\ndef g(a=2, b=3):\n    return a * b\n\nassert f(g())\n\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]], rows=3, cols=3) -> bool:\n    \"\"\"Check if a given grid is a valid Sudoku solution\"\"\"\n    for i in range(rows):\n        row = set()\n        col = set()\n        for j in range(cols):\n            if grid[i][j] in row or grid[j][i] in col:\n                return False\n            row.add(grid[i][j])\n            col.add(grid[j][i])\n    return True\ndef g(rows=3, cols=3):\n    return [[5, 3, 4, 6, 7, 8, 9, 1, 2],\n            [6, 7, 2, 1, 9, 5, 3, 4, 8],\n            [1, 9, 8, 3, 4, 2, 5, 6, 7],\n            [8, 5, 9, 7, 6, 1, 4, 2, 3],\n            [4, 2, 6, 8, 5, 3, 7, 9, 1],\n            [7, 1, 3, 9, 2, 4, 8, 5, 6],\n            [9, 6, 1, 5, 3, 7, 2, 8, 4],\n            [2, 8, 7, 4, 1, 9, 6, 3, 5],\n            [3, 4, 5, 2, 8, 6, 1, 7, 9]]\nassert f(g())\n",
        "idx_generation": 28,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if a string contains a given substring in reverse order.\"\"\"\n    return substr[::-1] in s\n\ndef g(substr='abc'):\n    return 'xyz' + substr[::-1] + 'def'\n\nassert f(g())\n",
        "idx_generation": 218,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Determine if the number n can be expressed as the sum of two prime numbers\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    for i in range(2, n):\n        if is_prime(i) and is_prime(n-i):\n            return True\n    return False\n\ndef g(m=10):\n    n = 4\n    while True:\n        if f(n):\n            return n\n        n += 1\n\nassert f(g())\n",
        "idx_generation": 141,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='challenge') -> bool:\n    \"\"\"Check if the characters of a word appear in reverse order in a string, but with any number of characters between them.\"\"\"\n    i = len(word) - 1\n    for char in s:\n        if char == word[i]:\n            i -= 1\n        if i == -1:\n            return True\n    return False\ndef g(word='challenge'):\n    return word[::-1]\nassert f(g())\n",
        "idx_generation": 153,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given number can be found in the matrix.\"\"\"\n    for row in matrix:\n        if n in row:\n            return True\n    return False\n\ndef g(matrix: List[List[int]]) -> int:\n    return matrix[0][0]\n\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), [[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=3) -> bool:\n    \"\"\"Check if there exists a subarray in the list with product equal to a given number n\"\"\"\n    for i in range(len(arr)):\n        prod = 1\n        for j in range(i, len(arr)):\n            prod *= arr[j]\n            if prod == n:\n                return True\n    return False\n\ndef g(n=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 133,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a given number is a prime number.\"\"\"\n    return n in primes\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return primes[0]\nassert f(g())\n",
        "idx_generation": 149,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub_str=\"python\") -> bool:\n    \"\"\"Check if the given substring exists in the string.\"\"\"\n    return sub_str in s.lower()\ndef g(s: str):\n    return s, \"python\"\nassert f(*g(\"I love Python programming!\"))\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    \nassert f(g())\n\n",
        "idx_generation": 151,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the sum of the list is divisible by 10.\"\"\"\n    return sum(numbers) % 10 == 0\ndef g():\n    return [10, 20, 30, 40, 50]\nassert f(g())\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0]) if rows > 0 else 0\n    return all(len(row) == cols for row in matrix)\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 70,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target_char='a') -> bool:\n    \"\"\"Check if the target character appears an odd number of times in the given string.\"\"\"\n    count = 0\n    for char in string:\n        if char == target_char:\n            count += 1\n    return count % 2 == 1\n\ndef g(target_char='a'):\n    return \"abracadabra\"\n\nassert f(g())\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    \"\"\"Given a list of words, determine if they are all anagrams of each other.\n    Return True if they are all anagrams, False otherwise.\"\"\"\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return len(set(sorted_words)) == 1\n\ndef g():\n    return ['listen', 'silent', 'tinsel']\n\nassert f(g()) == True\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], row_sum=10) -> bool:\n    \"\"\"Check if there is a row in the matrix that has a sum greater than or equal to the given row_sum.\"\"\"\n    for row in matrix:\n        if sum(row) >= row_sum:\n            return True\n    return False\n\ndef g(row_sum=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 154,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(words: List[str], n=5, m=4) -> bool:\n    \"\"\"Find a list of n words that have a length greater than m\"\"\"\n    return len(words) == n and all((len(word) > m for word in words))\ndef g(n=5, m=4):\n    import random\n    words = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']\n    return random.sample(words, n)\nassert f(g())\n",
        "idx_generation": 56,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], n=7) -> bool:\n    \"\"\"Check if the sum of any three distinct elements in the list is equal to n.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == n:\n                    return True\n    return False\n\ndef g(n=7):\n    return [i for i in range(-n, n+1)]\n\nassert f(g())\n",
        "idx_generation": 216,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if n is a prime number and exists in the list lst.\"\"\"\n    if n not in lst:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0 or n == 1:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef g(lst=[1, 2, 3, 4, 5]):\n    for num in lst:\n        if num == 2:\n            return num\n        if num % 2 != 0 and num != 1:\n            prime = True\n            for i in range(3, int(num ** 0.5) + 1, 2):\n                if num % i == 0:\n                    prime = False\n                    break\n            if prime:\n                return num\n    return 0\nassert f(g())\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, m=100) -> bool:\n    \"\"\"Check if a number is prime and its square root is less than m\"\"\"\n    if n <= 1 or n > m:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(m=100):\n    n = 89\n    return n\n\nassert f(g())\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nimport re\nfrom typing import List\n\ndef f(expressions: List[str], allowed_operators=['+', '-', '*', '/']) -> bool:\n    \"\"\"Check if all of the expressions in the list are valid mathematical expressions.\n    Each expression should only contain digits and allowed_operators, and should have a correct syntax.\"\"\"\n    pattern = r'^[\\d\\s' + re.escape(''.join(allowed_operators)) + ']+$'\n    for expression in expressions:\n        if not re.match(pattern, expression):\n            return True\n    return True\n\ndef g(allowed_operators=['+', '-', '*', '/']):\n    return ['2 + 3', '4 * 6 - 2', '8 / 2 + 5', '2 * 3']\n\nassert f(g())\n",
        "idx_generation": 120,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exists a path in the matrix that sums up to the target number.\"\"\"\n    def backtrack(row, col, curr_sum):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or row >= len(matrix) or col >= len(matrix[0]):\n            return False\n        \n        if backtrack(row + 1, col, curr_sum + matrix[row][col]) or backtrack(row, col + 1, curr_sum + matrix[row][col]):\n            return True\n        \n        return False\n    \n    return backtrack(0, 0, 0)\n\ndef g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a diagonal matrix, where all the values outside the main diagonal are zero.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\nassert f(g())\n",
        "idx_generation": 367,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(moves: List[str], target_position=(0, 0)) -> bool:\n    \"\"\"Check if the given moves lead to the target position\"\"\"\n    x, y = 0, 0\n    for move in moves:\n        if move == 'U':\n            y += 1\n        elif move == 'D':\n            y -= 1\n        elif move == 'L':\n            x -= 1\n        elif move == 'R':\n            x += 1\n    return (x, y) == target_position\ndef g(target_position=(0, 0)):\n    moves = ['U', 'U', 'L', 'R', 'D', 'D']\n    return moves\n\nassert f(g())\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, letters=['a', 'b', 'c', 'd', 'e']) -> bool:\n    \"\"\"Given a word and a list of letters, find if the word can be formed using all the letters exactly once.\n    Return True if it can be formed, False otherwise.\"\"\"\n    word = word.lower()\n    for letter in letters:\n        if letter not in word:\n            return False\n        word = word.replace(letter, '', 1)\n    return True\n\ndef g(letters=['a', 'b', 'c', 'd', 'e']):\n    return \"abcde\"\n\nassert f(g()) == True\n",
        "idx_generation": 29,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a banded matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    bandwidth = 2\n    for i in range(rows):\n        for j in range(cols):\n            if abs(i-j) > bandwidth:\n                if matrix[i][j] != 0:\n                    return False\n    return True\n\ndef g():\n    return [[1, 2, 0, 0], [3, 4, 5, 0], [0, 6, 7, 8], [0, 0, 9, 10]]\n\nassert f(g())\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Check if x is a concatenation of any two words in the list.\"\"\"\n    for i in range(len(words)):\n        for j in range(i+1, len(words)):\n            if words[i] + words[j] == x:\n                return True\n    return False\ndef g(words=['apple', 'banana', 'cherry', 'date']):\n    return words[0] + words[1]\nassert f(g())\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, t=10, upper=50) -> bool:\n    \"\"\"Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper\ndef g(t=10, upper=50):\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\nassert f(g())\n",
        "idx_generation": 114,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=1, b=1) -> bool:\n    \"\"\"Check if the given number is a Fibonacci number.\"\"\"\n    if n == 0:\n        return True\n    fib1, fib2 = 0, 1\n    while fib2 <= n:\n        if fib2 == n:\n            return True\n        fib1, fib2 = fib2, fib1 + fib2\n    return False\ndef g(a=5, b=8):\n    return a + b\nassert f(g())\n\n",
        "idx_generation": 279,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10, k=3) -> bool:\n    \"\"\"Find a subarray of length k whose sum is equal to the target.\"\"\"\n    for i in range(len(nums) - k + 1):\n        if sum(nums[i:i + k]) == target:\n            return True\n    return False\n\ndef g(target=10, k=3):\n    return [2, 4, 5, 7, 3, 1, 6, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 277,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(letters: str, target='abcde') -> bool:\n    \"\"\"Check if the given string contains all the characters in the target string in any order.\"\"\"\n    return set(target).issubset(set(letters))\ndef g(target='abcde'):\n    return ''.join(target)\nassert f(g())\n",
        "idx_generation": 65,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix of integers, determine if it is a symmetric matrix.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 126,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k: int = 3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list that has all distinct elements.\"\"\"\n    for i in range(len(nums) - k + 1):\n        subarray = nums[i:i+k]\n        if len(set(subarray)) == k:\n            return True\n    return False\ndef g(k: int = 3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 38,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(tree: List[List[int]], target=10) -> bool:\n    \"\"\"Find a path in the tree that sums up to the target value.\"\"\"\n    def dfs(node, curr_sum):\n        if node is None:\n            return False\n        curr_sum += node.val\n        if curr_sum == target:\n            return True\n        return dfs(node.left, curr_sum) or dfs(node.right, curr_sum)\n\n    return dfs(tree, 0)\n    \ndef g(target=10):\n    class Node:\n        def __init__(self, val=0, left=None, right=None):\n            self.val = val\n            self.left = left\n            self.right = right\n\n    # create the tree\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n\n    return root\n\nassert f(g())\n",
        "idx_generation": 16,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return ([[1, 2, 3], [2, 4, 5], [3, 5, 6]])\n\nassert f(g())\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the characters in target appear in s in any order\"\"\"\n    return all((char in s for char in target))\n\ndef g(target='python'):\n    s = 'typhoons'\n    return s\n\nassert f(g())\n",
        "idx_generation": 103,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a subarray in the given array whose sum is divisible by k\"\"\"\n    n = len(arr)\n    prefix_sum = 0\n    sum_set = set()\n    for i in range(n):\n        prefix_sum = (prefix_sum + arr[i]) % k\n        if prefix_sum == 0 or prefix_sum in sum_set:\n            return True\n        sum_set.add(prefix_sum)\n    return False\n\ndef g(arr: List[int] = [8, 16, 12, 4, 20], k=4):\n    return (arr, k)\n\nassert f(*g())\n",
        "idx_generation": 240,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if the given substring exists in the given string s.\"\"\"\n    return substr in s\ndef g(substr='abc'):\n    s = 'xyzabc123'\n    return s\nassert f(g())\n",
        "idx_generation": 59,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=100, b=50) -> bool:\n    \"\"\"Check if the product of two numbers is equal to x\"\"\"\n    return a * b == x\ndef g(a=100, b=50):\n    return a * b\nassert f(g())\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=5) -> bool:\n    \"\"\"Find if the given number n is a perfect power of m\"\"\"\n    power = 1\n    while m ** power <= n:\n        if m ** power == n:\n            return True\n        power += 1\n    return False\n\ndef g(m=5):\n    return m ** 3\n\nassert f(g())\n",
        "idx_generation": 30,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: float, a=10) -> bool:\n    \"\"\"Find a positive number that when squared is greater than a.\"\"\"\n    return x ** 2 > a and x > 0\ndef g(a=10):\n    return a ** 0.5 + 1\nassert f(g())\n",
        "idx_generation": 4,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y=8, z=4) -> bool:\n    \"\"\"Check if x is divisible by y and z.\"\"\"\n    return x % y == 0 and x % z == 0\n\ndef g(y=8, z=4):\n    return y * z\n\nassert f(g())\n\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find the number of apples to solve the following riddle:\n    There are five friends who want to share a pile of apples equally. \n    They start by dividing the pile into five equal shares and giving one apple each to five monkeys. \n    Then, the first friend takes one share and takes away his own share. \n    The second friend repeats the procedure, dividing the remaining pile into five and taking away his share. \n    The third, fourth, and fifth friends do the same. \n    Finally, the group divides the remaining apples into five equal shares: \n    this time no apples are left over. \n    How many apples were there in the original pile?\n                                      Quoted from https://en.wikipedia.org/wiki/The_monkey_and_the_coconuts\"\"\"\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g())\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], suffix='ly') -> bool:\n    \"\"\"Check if all words in the list have the given suffix.\"\"\"\n    return all(word.endswith(suffix) for word in words)\n\ndef g(suffix='ly'):\n    return ['beautifully', 'happily', 'quickly', 'amazingly']\n\nassert f(g())\n",
        "idx_generation": 54,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int, p: int) -> bool:\n    \"\"\"Check if n is a perfect square, m is a perfect cube, and p is a perfect fourth power.\"\"\"\n    return n ** 0.5 == int(n ** 0.5) and m ** (1 / 3) == int(m ** (1 / 3)) and p ** (1 / 4) == int(p ** (1 / 4))\n\ndef g():\n    return (16, 27, 16)\n\nassert f(*g())\n",
        "idx_generation": 11,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=3, length=12) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring='abc', count=3, length=12):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g())\n",
        "idx_generation": 2,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if a given string contains all the characters of the target string in the same order.\"\"\"\n    target_idx = 0\n    for char in s:\n        if char == target[target_idx]:\n            target_idx += 1\n        if target_idx == len(target):\n            return True\n    return False\ndef g(target='python'):\n    return 'pypythonthon'\nassert f(g())\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers contains any duplicate elements.\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 81,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format_str='%Y-%m-%d') -> bool:\n    \"\"\"Check if the given date string matches the specified format\"\"\"\n    try:\n        datetime.strptime(date, format_str)\n        return True\n    except ValueError:\n        return False\n\ndef g(format_str='%Y-%m-%d'):\n    return datetime.now().strftime(format_str)\n\nassert f(g())\n",
        "idx_generation": 70,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import string\nfrom typing import*\n\ndef f(phrase: str, letters=string.ascii_lowercase) -> bool:\n    \"\"\"Check if all the letters in the given phrase are present in the list of letters.\n    Return True if all letters are present, False otherwise.\"\"\"\n    phrase_letters = set(phrase.lower())\n    return phrase_letters.issuperset(set(letters))\n\ndef g(letters=string.ascii_lowercase):\n    return \"the quick brown fox\"\n\nassert f(g()) == False\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=5) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form a strictly decreasing sequence.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+1] < arr[i+j] for j in range(k-1)):\n            return True\n    return False\n\ndef g():\n    return [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, ops=['x++', '--x', '++x', '--x'], target=100) -> bool:\n    \"\"\"Given a sequence of operations \"++x\", \"--x\", \"++x\", \"--x\", and a target value, find initial value so that the\nfinal value is the target value.\nSample Input:\nops = [\"++x\", \"--x\", \"++x\"]\ntarget = 5\nSample Output:\n4\"\"\"\n    for op in ops:\n        if op in ['++x', 'x++']:\n            n += 1\n        else:\n            assert op in ['--x', 'x--']\n            n -= 1\n    return n == target\ndef g(ops=['x++', 'x++', '--x', 'x--'], target=100):\n    return target - ops.count('++x') - ops.count('x++') + ops.count('--x') + ops.count('x--')\nassert f(g())\n",
        "idx_generation": 23,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix, where the elements are symmetric along the main diagonal.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n    \nassert f(g())\n\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, matrix: List[List[int]]) -> List[int]:\n    \"\"\"Find and return the minimum element in each row of the given matrix.\"\"\"\n    min_elements = []\n    for row in matrix:\n        min_elements.append(min(row))\n    return min_elements\n\ndef g():\n    return [[4, 2, 7], [1, 5, 3], [8, 6, 9]]\n\nassert f(3, g()) == [2, 1, 6]\n",
        "idx_generation": 375,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int) -> bool:\n    \"\"\"Check if the sum of two integers is divisible by their difference.\"\"\"\n    return (x + y) % (x - y) == 0\ndef g():\n    return 5, 3\nassert f(*g())\n",
        "idx_generation": 20,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=1, b=20) -> bool:\n    \"\"\"Check if the given number is divisible by any number in the range of a to b (inclusive).\"\"\"\n    return any(n % i == 0 for i in range(a, b+1))\n\ndef g(a=1, b=20):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=5, c=7) -> bool:\n    \"\"\"Check if a given number is divisible by all three numbers a, b, and c.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=3, b=5, c=7):\n    n = a * b * c\n    return n\nassert f(g())\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find the smallest number m which is a multiple of both n and 10\"\"\"\n    m = 0\n    while True:\n        m += n\n        if m % 10 == 0:\n            return True\ndef g():\n    return 5\nassert f(g())\n",
        "idx_generation": 5,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the n random numbers generated are all present in the given list.\"\"\"\n    random_nums = random.choices(lst, k=n)\n    return all(num in lst for num in random_nums)\n\ndef g(n=5, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return n, lst\n\nassert f(*g())\n",
        "idx_generation": 368,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=7, b=8) -> bool:\n    \"\"\"Check if the given number n is divisible by either a or b.\"\"\"\n    return n % a == 0 or n % b == 0\n\ndef g(a=7, b=8):\n    n = a * b\n    return n\n\nassert f(g())\n",
        "idx_generation": 152,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=1) -> bool:\n    \"\"\"Check if the string s is a palindrome after appending n copies of itself.\"\"\"\n    return s == s[::-1] and s == s * n\ndef g(n=1):\n    return \"racecar\"\nassert f(g())\n",
        "idx_generation": 2,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a diagonal matrix. A matrix is diagonal if all its non-diagonal elements are zero.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\nassert f(g())\n",
        "idx_generation": 254,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subsequence of numbers in the given list whose sum is equal to the target number.\"\"\"\n    n = len(arr)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target]\n\ndef g():\n    return [1, 3, 5, 7, 9]\n\nassert f(g())\n",
        "idx_generation": 319,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='world') -> bool:\n    \"\"\"Check if a substring is present in a given string.\"\"\"\n    return target in s\n\ndef g(target='world'):\n    return 'Hello, world!'\n\nassert f(g())\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subarray in the given array whose sum is equal to the target value.\"\"\"\n    n = len(arr)\n    curr_sum = arr[0]\n    start = 0\n\n    for i in range(1, n+1):\n        while curr_sum > target and start < i-1:\n            curr_sum = curr_sum - arr[start]\n            start += 1\n\n        if curr_sum == target:\n            return True\n\n        if i < n:\n            curr_sum = curr_sum + arr[i]\n\n    return False\n\ndef g(arr: List[int]):\n    target = sum(arr) // 2\n    return arr, target\n\nassert f(*g([2, 4, 6, 8, 10, 12, 14, 16]))\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the given string starts with the target string.\"\"\"\n    return s.startswith(target)\n\ndef g(target='python'):\n    return 'python programming'\n\nassert f(g())\n",
        "idx_generation": 193,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(d: Dict[str, int], total=100) -> bool:\n    \"\"\"Check if the sum of all values in the dictionary is equal to the given total.\"\"\"\n    return sum(d.values()) == total\n\ndef g(total=100):\n    d = {'a': 20, 'b': 30, 'c': 50}\n    return d\n\nassert f(g())\n",
        "idx_generation": 323,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is present in the list of numbers.\"\"\"\n    return n in nums\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[5]\n\nassert f(g())\n",
        "idx_generation": 76,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a path in the matrix that sums up to the target value.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def dfs(row, col, curr_sum):\n        if row == rows or col == cols:\n            return False\n        curr_sum += matrix[row][col]\n        if curr_sum == target:\n            return True\n        return dfs(row+1, col, curr_sum) or dfs(row, col+1, curr_sum)\n\n    return dfs(0, 0, 0)\n\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 213,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target='python') -> bool:\n    \"\"\"Check if the target word is a substring of the given string\"\"\"\n    return target in string\n\ndef g():\n    return \"I love python programming\"\n\nassert f(g())\n\n",
        "idx_generation": 391,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], n=10) -> bool:\n    \"\"\"Find the sum of n integers in the list\"\"\"\n    return sum(li) == n\ndef g(n=10):\n    return [1] * n\nassert f(g())\n",
        "idx_generation": 33,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Find a subset of the list whose sum is equal to n.\"\"\"\n    return any(sum(subset) == n for r in range(len(lst) + 1) for subset in itertools.combinations(lst, r))\n\ndef g():\n    return (10, [1, 2, 3, 4, 5])\n\nassert f(*g())\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[2, 4, 6]) -> bool:\n    \"\"\"Check if any element in a list is greater than a given number.\"\"\"\n    return any(e > n for e in lst)\ndef g(lst=[2, 4, 6]):\n    return 2\nassert f(g())\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, days=7) -> bool:\n    \"\"\"Check if a given date is exactly `days` days from the current date.\"\"\"\n    current_date = datetime.date.today()\n    target_date = current_date + datetime.timedelta(days=days)\n    return date == target_date\n\ndef g(days=7):\n    current_date = datetime.date.today()\n    return current_date + datetime.timedelta(days=days)\n\nassert f(g())\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Given a list of words, check if there exists a word that starts with a given prefix.\"\"\"\n    for word in words:\n        if word.startswith(prefix):\n            return True\n    return False\n\ndef g(words=['prefix', 'suffix', 'preposition']):\n    return words\n\nassert f(g())\n",
        "idx_generation": 55,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10, count=2) -> bool:\n    \"\"\"Check if a given list contains at least a specified number of occurrences of a specified target number.\"\"\"\n    return arr.count(target) >= count\n\ndef g(target=10, count=2):\n    return [2, 5, 10, 4, 10, 6, 8, 10, 3, 7]\n\nassert f(g())\n",
        "idx_generation": 58,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a subarray in the given list whose sum is equal to the target sum.\n    Return True if such a subarray exists, False otherwise.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            subarray = arr[i:j+1]\n            if sum(subarray) == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a diagonal matrix, where all the elements outside the main diagonal are zero.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\nassert f(g())\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(items: List[str], target_item='apple') -> bool:\n    \"\"\"Check if the target_item is present in the list of items.\"\"\"\n    return target_item in items\n\ndef g(target_item='apple'):\n    return ['banana', 'orange', 'apple', 'grape']\n\nassert f(g())\n",
        "idx_generation": 266,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"Check if any word in the list has the target length.\"\"\"\n    for word in words:\n        if len(word) == target_length:\n            return True\n    return False\n\ndef g(target_length=5):\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n\nassert f(g())\n",
        "idx_generation": 45,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a lower triangular matrix, where all the values above the main diagonal are zero.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [2, 3, 0], [4, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s:str, word='world', index=0) -> bool:\n    \"\"\"Check if a word appears at the beginning of a string\"\"\"\n    return s.startswith(word)\n\ndef g(word='world', index=0):\n    return word + 'hello'\n\nassert f(g())\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is an upper triangular matrix, where all the values below the main diagonal are zero.\"\"\"\n    n = len(matrix)\n    for i in range(1, n):\n        for j in range(i):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [0, 5, 6], [0, 0, 9]]\n\nassert f(g())\n",
        "idx_generation": 355,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='Hello World') -> bool:\n    \"\"\"Find the number of occurrences of character 'o' in string s, and return True if the count is equal to n\"\"\"\n    count = s.count('o')\n    return count == n\ndef g(s='Hello World'):\n    count = s.count('o')\n    return count\nassert f(g())\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, num_list=[2, 3, 5, 7, 11]) -> bool:\n    \"\"\"Check if the given number n is a prime number\"\"\"\n    if n in num_list:\n        return True\n    if n < 2 or any(n % i == 0 for i in range(2, int(n ** 0.5) + 1)):\n        return False\n    return True\n\ndef g(num_list=[2, 3, 5, 7, 11]):\n    return num_list[-1]\n\nassert f(g())\n",
        "idx_generation": 95,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=20) -> bool:\n    \"\"\"Check if the number is a multiple of both a and b.\"\"\"\n    return n % a == 0 and n % b == 0\n\ndef g(a=10, b=20):\n    return max(a, b)\n\nassert f(g())\n",
        "idx_generation": 275,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a='hello', b='world') -> bool:\n    \"\"\"Check if a string is a concatenation of two given strings\"\"\"\n    return x == a + b\ndef g(a='hello', b='world'):\n    return a + b\nassert f(g())\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is sorted in ascending order.\"\"\"\n    return numbers == sorted(numbers)\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5], target=15) -> bool:\n    \"\"\"Find n such that the sum of the first n elements in the arr list is equal to the target value\"\"\"\n    return n * (n + 1) // 2 == target\ndef g(arr=[1, 2, 3, 4, 5], target=15):\n    sum_arr = sum(arr)\n    n = 1\n    while (n * (n + 1) // 2) < target:\n        n += 1\n    return n\nassert f(g())\n",
        "idx_generation": 23,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=2) -> bool:\n    \"\"\"Check if there are exactly k duplicate elements in the list.\"\"\"\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    duplicates = [num for num in count if count[num] > 1]\n    return len(duplicates) == k\n\ndef g(k=2):\n    return [1, 2, 2, 3, 4, 4]\n\nassert f(g())\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if the list can be divided into two subarrays of equal sum.\"\"\"\n    total_sum = sum(numbers)\n    if total_sum % 2 != 0:\n        return False\n    target_sum = total_sum // 2\n    dp = [False] * (target_sum + 1)\n    dp[0] = True\n    for num in numbers:\n        for j in range(target_sum, num-1, -1):\n            dp[j] |= dp[j - num]\n    return dp[target_sum]\n\ndef g(numbers: List[int]):\n    return numbers\n\nassert f(g([3, 5, 8, 10, 4, 2]))",
        "idx_generation": 437,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is symmetric\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[0])))\n\ndef g(matrix: List[List[int]]):\n    return [[matrix[j][i] for j in range(len(matrix[0]))] for i in range(len(matrix))]\n\nassert f(g([[1, 2, 3], [2, 4, 5], [3, 5, 6]]))\n",
        "idx_generation": 79,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find three numbers from the given list whose sum is equal to the target value.\n    Return True if such a combination exists, False otherwise.\"\"\"\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g()) == True\n",
        "idx_generation": 212,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a symmetric matrix, where the elements at position (i, j) are equal to the elements at position (j, i).\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=1, b=9876543210) -> bool:\n    \"\"\"Check if the given number is a prime number\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(a=1, b=9876543210):\n    if a == 0:\n        return 2 * b\n    for n in range(b // a, 2, -1):\n        if f(n, a, b):\n            return n\n\nassert f(g())\n",
        "idx_generation": 325,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Check if a given 2D list is a magic square.\"\"\"\n    n = len(arr)\n    target_sum = n * (n**2 + 1) // 2\n\n    # Check rows and columns\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n        if sum(arr[j][i] for j in range(n)) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(arr[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(arr[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n\n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='world') -> bool:\n    \"\"\"Check if the string 'target' is present in the given string.\"\"\"\n    return target in s\n\ndef g(target='world'):\n    return \"Hello, world!\"\n\nassert f(g())\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"Check if a given number is a prime number\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 170,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: str, target='abc') -> bool:\n    \"\"\"Check if a given string can be rearranged to form the target string.\"\"\"\n    if len(nums) != len(target):\n        return False\n    for char in target:\n        if char not in nums:\n            return False\n    return True\n\ndef g(target='abc'):\n    return 'cab'\n\nassert f(g())\n",
        "idx_generation": 155,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given number can be found in the matrix.\"\"\"\n    for row in matrix:\n        if n in row:\n            return True\n    return False\n\ndef g(matrix: List[List[int]]) -> int:\n    return matrix[-1][-1]\n\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), [[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target_length=10) -> bool:\n    \"\"\"Find a substring of the given string that has the target length.\"\"\"\n    substrings = []\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            substrings.append(string[i:j])\n    for substring in substrings:\n        if len(substring) == target_length:\n            return True\n    return False\n\ndef g(target_length=10):\n    return \"programming\"\n\nassert f(g())\n",
        "idx_generation": 32,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nimport math\nfrom typing import*\ndef f(numbers: List[int], target_product=120) -> bool:\n    \"\"\"Find if there exists a combination of numbers that multiplies up to the target_product\"\"\"\n    return any(math.prod(subset) == target_product for r in range(1, len(numbers) + 1) for subset in itertools.combinations(numbers, r))\n    \ndef g(target_product=120):\n    return [2, 3, 5, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 193,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int, nums=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(nums=[2, 3, 5, 7, 11, 13]):\n    return nums[len(nums)-1]\n\nassert f(g())\n",
        "idx_generation": 249,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str]) -> List[str]:\n    \"\"\"Sort the given list of strings in descending order of their lengths\"\"\"\n    return sorted(strings, key=lambda x: len(x), reverse=True)\n\ndef g():\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\"]\n\nassert f(g()) == [\"elderberry\", \"banana\", \"cherry\", \"apple\", \"grape\", \"date\", \"fig\"]\n\n",
        "idx_generation": 378,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Find two numbers in the given list whose product is equal to the target.\"\"\"\n    return any((nums[i] * nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(nums=[5, 10, 15, 20, 25]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 152,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(a: List[int], b: List[int]) -> bool:\n    \"\"\"Check if all elements in list a are divisible by any element in list b.\"\"\"\n    return all(any(i % j == 0 for j in b) for i in a)\n\ndef g():\n    return [10, 20, 30, 40], [2, 4, 6, 8]\n\nassert f(*g())\n",
        "idx_generation": 152,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0]) if rows > 0 else 0\n    return all(len(row) == cols for row in matrix) and all(sum(row) == 0 for row in matrix)\n\ndef g():\n    return [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n\nassert f(g())\n",
        "idx_generation": 89,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(s: str, target_char='a') -> bool:\n    \"\"\"Given a string, check if the target_char appears as the first character of any word in the string.\"\"\"\n    words = s.split()\n    for word in words:\n        if word[0] == target_char:\n            return True\n    return False\n\ndef g(target_char='a'):\n    return \"apple banana cherry date\"\n\nassert f(g()) == True\n",
        "idx_generation": 355,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"Check if the target word exists in the list of words.\n    Return True if the target word exists, False otherwise.\"\"\"\n    return target_word in words\n\ndef g(target_word='python'):\n    return ['hello', 'world', 'python', 'programming']\n\nassert f(g()) == True\n\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], column_sum=15) -> bool:\n    \"\"\"Check if there is a column in the matrix that has a sum less than or equal to the given column_sum.\"\"\"\n    for j in range(len(matrix[0])):\n        col_sum = 0\n        for i in range(len(matrix)):\n            col_sum += matrix[i][j]\n        if col_sum <= column_sum:\n            return True\n    return False\n\ndef g(column_sum=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 180,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], n=3) -> bool:\n    \"\"\"Check if there exists a subarray in the list with sum equal to a given number n\"\"\"\n    for i in range(len(arr)):\n        sum = 0\n        for j in range(i, len(arr)):\n            sum += arr[j]\n            if sum == n:\n                return True\n    return False\n\ndef g(n=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 58,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_length=3, target_sum=15) -> bool:\n    \"\"\"Check if there exists a subsequence in the given list whose length is equal to the target length\n    and the sum of its elements is equal to the target sum.\n    Return True if such a subsequence exists, False otherwise.\"\"\"\n    \n    def is_subsequence(sub, main):\n        i = 0\n        for j in range(len(main)):\n            if i < len(sub) and sub[i] == main[j]:\n                i += 1\n        return i == len(sub)\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            subsequence = arr[i:j+1]\n            if len(subsequence) == target_length and sum(subsequence) == target_sum and is_subsequence(subsequence, arr):\n                return True\n    return False\n\ndef g(target_length=3, target_sum=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 240,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8]) -> bool:\n    \"\"\"Check if the given number `n` is a prime number and exists in the given list `lst`.\"\"\"\n    return n in lst and all(n % i != 0 for i in range(2, int(n**0.5) + 1))\n    \ndef g(lst=[2, 4, 6, 8]):\n    return lst[0]\n\nassert f(g())\n",
        "idx_generation": 242,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nimport re\nfrom typing import List\n\ndef f(expressions: List[str], allowed_operators=['+', '-', '*', '/']) -> bool:\n    \"\"\"Check if any of the expressions in the list are valid mathematical expressions.\n    Each expression should only contain digits and allowed_operators, and should have a correct syntax.\"\"\"\n    pattern = r'^[\\d\\s' + re.escape(''.join(allowed_operators)) + ']+$'\n    for expression in expressions:\n        if re.match(pattern, expression):\n            return True\n    return False\n\ndef g(allowed_operators=['+', '-', '*', '/']):\n    return ['2 + 3', '4 * 6 - 2', '8 / 2 + 5', '2 * 3']\n\nassert f(g())\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exists a path in the matrix that sums up to the target number, moving only right or down.\"\"\"\n    def backtrack(row, col, curr_sum):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or row >= len(matrix) or col >= len(matrix[0]):\n            return False\n        \n        if backtrack(row + 1, col, curr_sum + matrix[row][col]) or backtrack(row, col + 1, curr_sum + matrix[row][col]):\n            return True\n        \n        return False\n    \n    return backtrack(0, 0, 0)\n\ndef g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, letters=['a', 'b', 'c', 'd', 'e']) -> bool:\n    \"\"\"Given a word and a list of letters, find if the word can be formed using all the letters exactly once.\n    Return True if it can be formed, False otherwise.\"\"\"\n    word = word.lower()\n    for letter in letters:\n        if letter not in word:\n            return False\n        word = word.replace(letter, '', 1)\n    return True\n\ndef g(letters=['a', 'b', 'c', 'd', 'e']):\n    return \"abcde\"\n\nassert f(g()) == True\n",
        "idx_generation": 29,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, parts=['abcdefghi', 'jklmnopqr'], string='abcdefghi123jklmnopqr') -> bool:\n    \"\"\"Find a separator that when used to join a given string gives a certain result.\nThis is related to the previous problem but there are some edge cases that differ.\"\"\"\n    return x.join(parts) == string\ndef g(parts=['abcdefghi', 'jklmnopqr'], string='abcdefghi123jklmnopqr'):\n    if len(parts) <= 1:\n        return ''\n    length = (len(string) - len(''.join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g())\n",
        "idx_generation": 64,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, t=5, upper=10) -> bool:\n    \"\"\"Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper\ndef g(t=5, upper=10):\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\nassert f(g())\n",
        "idx_generation": 114,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subarray in the list that sums to the target.\"\"\"\n    prefixes = set()\n    prefix_sum = 0\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in prefixes:\n            return True\n        prefixes.add(prefix_sum)\n    return False\n\ndef g(target=100):\n    return [5, 10, 15, 20, 25, 30, 35, 40]\n\nassert f(g())\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=6) -> bool:\n    \"\"\"Check if a given string is a valid password, which should contain at least one uppercase letter, one lowercase letter, and one digit.\"\"\"\n    return any(c.isupper() for c in s) and any(c.islower() for c in s) and any(c.isdigit() for c in s) and len(s) >= n\ndef g(n=6):\n    return 'Abc123'\nassert f(g())\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of integers contains a Pythagorean triplet, which is a set of three numbers such that a^2 + b^2 = c^2.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if nums[i]**2 + nums[j]**2 == nums[k]**2:\n                    return True\n    return False\n\ndef g():\n    return [3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int = 3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list that has at least one negative element.\"\"\"\n    for i in range(len(nums) - k + 1):\n        subarray = nums[i:i+k]\n        if any(num < 0 for num in subarray):\n            return True\n    return False\n\ndef g(k: int = 3):\n    return [1, 2, -3, 4, 5, 6, 7, -8, 9]\n\nassert f(g())\n",
        "idx_generation": 55,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exists a path in the matrix that adds up to the target.\"\"\"\n    def dfs(row, col, current_sum):\n        if row < 0 or row >= len(matrix) or col < 0 or col >= len(matrix[0]):\n            return False\n        current_sum += matrix[row][col]\n        if current_sum == target:\n            return True\n        return dfs(row + 1, col, current_sum) or dfs(row, col + 1, current_sum)\n    \n    return dfs(0, 0, 0)\ndef g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 109,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0]) if rows > 0 else 0\n    return all(matrix[i][j] == matrix[j][i] for i in range(rows) for j in range(cols))\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 72,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_char='a') -> bool:\n    \"\"\"Given a string, check if the target_char appears as the last character of any word in the string.\"\"\"\n    words = s.split()\n    for word in words:\n        if word[-1] == target_char:\n            return True\n    return False\n\ndef g(target_char='a'):\n    return \"apple banana cherry date\"\n    \nassert f(g())\n",
        "idx_generation": 115,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=6) -> bool:\n    \"\"\"Check if there exists a subarray in the given array whose sum is divisible by k\"\"\"\n    n = len(arr)\n    prefix_sum = 0\n    sum_set = set()\n    for i in range(n):\n        prefix_sum = (prefix_sum + arr[i]) % k\n        if prefix_sum == 0 or prefix_sum in sum_set:\n            return True\n        sum_set.add(prefix_sum)\n    return False\n\ndef g(arr: List[int] = [5, 10, 15, 20, 25], k=6):\n    return (arr, k)\n\nassert f(*g())\n",
        "idx_generation": 240,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, pattern: str = 'abc') -> bool:\n    \"\"\"Find if the given pattern exists as a substring in the given string.\"\"\"\n    return pattern in s\n\ndef g(pattern: str = 'abc'):\n    return \"xyzabc123\"\n\nassert f(g())\n",
        "idx_generation": 104,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string s.\"\"\"\n    return sub in s\n\ndef g(sub='abc'):\n    return 'xyz' + sub + 'pqr'\n\nassert f(g())\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=100, b=50) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to x\"\"\"\n    return a + b == x\ndef g(a=100, b=50):\n    return a + b\nassert f(g())\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=2) -> bool:\n    \"\"\"Find if the given number n is a perfect power of m\"\"\"\n    power = 1\n    while m ** power <= n:\n        if m ** power == n:\n            return True\n        power += 1\n    return False\n\ndef g(m=2):\n    return m ** 6\n\nassert f(g())\n",
        "idx_generation": 30,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a number whose square root is a prime number.\"\"\"\n    return int(n**0.5) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\ndef g():\n    return 49\nassert f(g())\n",
        "idx_generation": 17,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y=15, z=3) -> bool:\n    \"\"\"Check if x is divisible by y and z.\"\"\"\n    return x % y == 0 and x % z == 0\n\ndef g(y=15, z=3):\n    return y * z\n\nassert f(g())\n\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(n: int) -> bool:\n    \"\"\"Find the number of apples to solve the following riddle:\n    There are five friends who want to share a pile of apples equally. \n    They start by dividing the pile into five equal shares and giving one apple each to five monkeys. \n    Then, the first friend takes one share and takes away his own share. \n    The second friend repeats the procedure, dividing the remaining pile into five and taking away his share. \n    The third, fourth, and fifth friends do the same. \n    Finally, the group divides the remaining apples into five equal shares: \n    this time no apples are left over. \n    How many apples were there in the original pile?\n                                      Quoted from https://en.wikipedia.org/wiki/The_monkey_and_the_coconuts\"\"\"\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\n\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\n\nassert f(g())\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], length=5) -> bool:\n    \"\"\"Check if there exists a name in the list that has a length greater than or equal to a given length.\"\"\"\n    return any(len(name) >= length for name in names)\n\ndef g(length=5):\n    return ['John', 'Jane', 'Mike', 'Sarah', 'Mark']\n\nassert f(g())\n",
        "idx_generation": 68,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=2) -> bool:\n    \"\"\"Find if the given number n is a perfect square of m\"\"\"\n    return m ** 2 == n\n\ndef g(m=2):\n    return m ** 2\n\nassert f(g())\n",
        "idx_generation": 18,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=5, length=50) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring='abc', count=5, length=50):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g())\n",
        "idx_generation": 168,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(tri: List[int], edges=[[4, 4], [5, 5], [3, 5], [3, 1], [0, 1], [4, 0], [3, 2], [5, 3], [1, 3], [2, 5], [2, 0]]) -> bool:\n    \"\"\"Find any triangle in the given directed graph where the sum of the triangle's vertices is even.\"\"\"\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a) and sum([a, b, c]) % 2 == 0\n\ndef g(edges=[[4, 4], [5, 5], [3, 5], [3, 1], [0, 1], [4, 0], [3, 2], [5, 3], [1, 3], [2, 5], [2, 0]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for (i, j) in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g())\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains any duplicate elements.\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', length=20) -> bool:\n    \"\"\"Check if the string starts with the given substring and has the specified length\"\"\"\n    return string.startswith(substring) and len(string) == length\n\ndef g(substring='abc', length=20):\n    return substring + 'd' * (length - len(substring))\n\nassert f(g())\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import string\nfrom typing import*\n\ndef f(phrase: str, letters=string.ascii_lowercase) -> bool:\n    \"\"\"Check if all the letters in the given phrase are present in the list of letters.\n    Return True if all letters are present, False otherwise.\"\"\"\n    phrase_letters = set(phrase.lower())\n    return len(phrase_letters) == len(set(letters))\n\ndef g(letters=string.ascii_lowercase):\n    return \"the quick brown fox\"\n\nassert f(g()) == False\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=4) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form a non-decreasing sequence.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+1] >= arr[i+j] for j in range(k-1)):\n            return True\n    return False\n\ndef g():\n    return [5, 8, 9, 9, 10, 11, 13, 15, 18, 20]\n\nassert f(g())\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, ops=['x++', '--x', '++x', '--x'], target=100) -> bool:\n    \"\"\"Given a sequence of operations \"++x\", \"--x\", \"++x\", \"--x\", and a target value, find the minimum initial value\nso that the final value is greater than or equal to the target value.\nSample Input:\nops = [\"++x\", \"--x\", \"++x\"]\ntarget = 5\nSample Output:\n4\"\"\"\n    for op in ops:\n        if op in ['++x', 'x++']:\n            n += 1\n        else:\n            assert op in ['--x', 'x--']\n            n -= 1\n    return n >= target\n\ndef g(ops=['x++', 'x++', '--x', 'x--'], target=100):\n    return target - ops.count('++x') - ops.count('x++') + ops.count('--x') + ops.count('x--')\nassert f(g())\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix, determine if it is a magic square.\n    A magic square is a square matrix where the sum of each row, each column, and both diagonals are equal.\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    for i in range(1, n):\n        if sum(matrix[i]) != target_sum:\n            return False\n    \n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n    \n    diagonal_sum = 0\n    anti_diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n        anti_diagonal_sum += matrix[i][n-i-1]\n    if diagonal_sum != target_sum or anti_diagonal_sum != target_sum:\n        return False\n    \n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g()) == True\n\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a target number in a matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, target], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 0,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=127, b=289, c=53, d=73) -> bool:\n    \"\"\"Check if n is divisible by all four given numbers.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0 and n % d == 0\ndef g(a=127, b=289, c=53, d=73):\n    return a * b * c * d\nassert f(g())\n",
        "idx_generation": 45,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=20, upper_bound=100) -> bool:\n    \"\"\"Find a number that is divisible by both a and b, and less than or equal to the upper_bound.\"\"\"\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\n\ndef g(a=10, b=20, upper_bound=100):\n    lcm = a if a > b else b\n    while True:\n        if lcm % a == 0 and lcm % b == 0:\n            break\n        lcm += 1\n    return lcm\n\nassert f(g())\n",
        "idx_generation": 169,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3, c=5, d=7) -> bool:\n    \"\"\"Check if a given number is divisible by any three of the four numbers a, b, c, and d.\"\"\"\n    return (n % a == 0 and n % b == 0 and n % c == 0) or (n % b == 0 and n % c == 0 and n % d == 0) or (n % a == 0 and n % c == 0 and n % d == 0) or (n % a == 0 and n % b == 0 and n % d == 0)\ndef g(a=2, b=3, c=5, d=7):\n    n = a * b * c * d\n    return n\nassert f(g())\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Determine if the number n can be expressed as the sum of two Fibonacci numbers\"\"\"\n    def generate_fibonacci(n):\n        fib = [0, 1]\n        while len(fib) < n:\n            fib.append(fib[-1] + fib[-2])\n        return fib\n    \n    fib_numbers = generate_fibonacci(n)\n    \n    for i in range(len(fib_numbers)):\n        for j in range(i, len(fib_numbers)):\n            if fib_numbers[i] + fib_numbers[j] == n:\n                return True\n    return False\n\ndef g(m=10):\n    n = 4\n    while True:\n        if f(n):\n            return n\n        n += 1\n\nassert f(g())\n",
        "idx_generation": 143,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\nfrom typing import List\n\ndef f(dates: List[datetime.date], year=2022) -> bool:\n    \"\"\"Check if any of the dates in the list falls in a given year.\n    Return True if such a date exists, False otherwise.\"\"\"\n    for date in dates:\n        if date.year == year:\n            return True\n    return False\n\ndef g(year=2022):\n    return [datetime.date(2021, 1, 1), datetime.date(2022, 2, 2), datetime.date(2023, 3, 3)]\n\nassert f(g()) == True\n\n\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=7) -> bool:\n    \"\"\"Check if the given number n is divisible by both a and b.\"\"\"\n    return n % a == 0 and n % b == 0\n\ndef g(a=3, b=7):\n    n = a * b\n    return n\n\nassert f(g())\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str) -> bool:\n    \"\"\"Check if a given string is a palindrome.\"\"\"\n    return x == x[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n",
        "idx_generation": 5,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is diagonal.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(matrix=[[1, 0, 0], [0, 2, 0], [0, 0, 3]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subsequence of numbers in the given list whose sum is equal to the target number.\"\"\"\n    n = len(arr)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target]\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 319,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if the given string contains exactly k consecutive occurrences of a substring.\"\"\"\n    for i in range(len(s) - k + 1):\n        if s[i:i+k] * (len(s) // k) == s:\n            return True\n    return False\n\ndef g(k=3):\n    return 'abcabcabc'\nassert f(g())\n",
        "idx_generation": 202,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is an identity matrix. An identity matrix is a square matrix where all diagonal elements are 1 and all non-diagonal elements are 0.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if i == j:\n                if matrix[i][j] != 1:\n                    return False\n            else:\n                if matrix[i][j] != 0:\n                    return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n\nassert f(g())\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the given string ends with the target string.\"\"\"\n    return s.endswith(target)\n\ndef g(target='python'):\n    return 'programming python'\n\nassert f(g())\n",
        "idx_generation": 198,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom collections import Counter\n\ndef f(string: str, k=3) -> bool:\n    \"\"\"Check if the given string contains any unique characters k times.\"\"\"\n    char_counts = Counter(string)\n    for count in char_counts.values():\n        if count == k:\n            return True\n    return False\n\ndef g():\n    return \"abcdeabcdeabcde\"\n\nassert f(g())\n",
        "idx_generation": 407,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"Check if there exists a substring of length k in the string that appears more than once.\"\"\"\n    for i in range(len(s)-k):\n        substring = s[i:i+k]\n        if s.count(substring) > 1:\n            return True\n    return False\n\ndef g(k=2):\n    return \"abracadabra\"\n\nassert f(g())\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if the given number n is divisible by all the elements in the list lst\"\"\"\n    for num in lst:\n        if n % num != 0:\n            return False\n    return True\ndef g(lst=[2, 4, 6, 8, 10]):\n    result = 1\n    for num in lst:\n        result *= num\n    return result\nassert f(g())\n",
        "idx_generation": 7,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a given number is present in a list of numbers.\"\"\"\n    return n in nums\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums[0]\nassert f(g())\n",
        "idx_generation": 95,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(maze: List[List[int]], start=(0, 0), end=(4, 4)) -> bool:\n    \"\"\"Find a path from the start position to the end position in the given maze.\"\"\"\n    rows = len(maze)\n    cols = len(maze[0])\n    visited = [[False] * cols for _ in range(rows)]\n\n    def backtrack(row, col):\n        if row == end[0] and col == end[1]:\n            return True\n        if row < 0 or col < 0 or row >= rows or col >= cols or maze[row][col] == 1 or visited[row][col]:\n            return False\n\n        visited[row][col] = True\n\n        if backtrack(row+1, col) or backtrack(row-1, col) or backtrack(row, col+1) or backtrack(row, col-1):\n            return True\n\n        visited[row][col] = False\n        return False\n\n    return backtrack(start[0], start[1])\n\ndef g(maze=[[0, 1, 0, 0, 0],\n            [0, 1, 0, 1, 0],\n            [0, 0, 0, 1, 0],\n            [0, 1, 0, 0, 0],\n            [0, 0, 0, 1, 0]], start=(0, 0), end=(4, 4)):\n    return maze\n\nassert f(g())\n",
        "idx_generation": 6,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=25) -> bool:\n    \"\"\"Find a path in the matrix that sums up to the target value.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def dfs(row, col, curr_sum):\n        if row == rows or col == cols:\n            return False\n        curr_sum += matrix[row][col]\n        if curr_sum == target:\n            return True\n        return dfs(row+1, col, curr_sum) or dfs(row, col+1, curr_sum)\n\n    return dfs(0, 0, 0)\n\ndef g(target=25):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 213,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Find if the given substring is a consecutive substring of s and is followed by a digit\"\"\"\n    return substr in s and s[s.index(substr)+len(substr)].isdigit()\ndef g(substr='abc'):\n    return 'defghijklmnopabc123'\nassert f(g())\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of points in the list such that the sum of their x-coordinates is equal to the target_sum.\"\"\"\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            if points[i][0] + points[j][0] == target_sum:\n                return True\n    return False\ndef g(target_sum=100):\n    return [(i, j) for i in range(target_sum) for j in range(target_sum)]\nassert f(g())\n",
        "idx_generation": 34,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find the sum of the first n elements in the list and check if it is divisible by n.\"\"\"\n    return sum(lst[:n]) % n == 0\ndef g(lst=[1, 2, 3, 4, 5]):\n    return len(lst), lst\nassert f(*g())\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, target=50) -> bool:\n    \"\"\"Check if the given number can be expressed as the sum of consecutive positive integers, where the sum is equal to the target value.\"\"\"\n    for i in range(1, num//2 + 1):\n        temp = i\n        for j in range(i+1, num+1):\n            temp += j\n            if temp == target:\n                return True\n            if temp > target:\n                break\n    return False\n\ndef g(target=50):\n    return target\n\nassert f(g())\n",
        "idx_generation": 31,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if the target word can be formed by concatenating words from the given list.\"\"\"\n    def can_form_word(word, remaining):\n        if not remaining:\n            return word == target\n        for i in range(len(remaining)):\n            if can_form_word(word + remaining[i], remaining[:i] + remaining[i+1:]):\n                return True\n        return False\n    return can_form_word('', words)\ndef g(target='python'):\n    return ['py', 'th', 'on']\nassert f(g())\n",
        "idx_generation": 65,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if a given list is sorted in descending order.\"\"\"\n    return arr == sorted(arr, reverse=True)\n\ndef g():\n    return [9, 7, 5, 3, 1]\n\nassert f(g())\n",
        "idx_generation": 64,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_count=3) -> bool:\n    \"\"\"Check if there exists a subarray in the given list whose count is equal to the target count.\n    Return True if such a subarray exists, False otherwise.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            subarray = arr[i:j+1]\n            if len(subarray) == target_count:\n                return True\n    return False\n\ndef g(target_count=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a list contains at least two consecutive numbers that are divisible by 3.\"\"\"\n    for i in range(len(nums)-1):\n        if nums[i] % 3 == 0 and nums[i+1] % 3 == 0:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 6, 4, 9]\n\nassert f(g())\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"Check if there is a word in the list that has the target length.\"\"\"\n    return any(len(word) == target_length for word in words)\n\ndef g(target_length=5):\n    return (['apple', 'banana', 'cherry', 'date'], target_length)\n\nassert f(*g())\n",
        "idx_generation": 63,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a diagonal matrix.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\ndef g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\nassert f(g())\n\n",
        "idx_generation": 233,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[str], word='python') -> bool:\n    \"\"\"Check if the given list of strings contains the word 'python'\"\"\"\n    return word in x\n\ndef g(word='python'):\n    x = ['java', 'c', 'python', 'javascript', 'ruby']\n    return x\n\nassert f(g())\n",
        "idx_generation": 268,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Count the number of occurrences of the given character in the string and check if it is divisible by n.\"\"\"\n    count = s.count('a')\n    return count % n == 0\n\ndef g(n=3):\n    return 'aaaabaaaaa'\n\nassert f(g())\n",
        "idx_generation": 76,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state=[3, 3, 2, 2, 3, 8]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g())\n\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if a given number is divisible by any of the prime numbers in the list\"\"\"\n    for prime in primes:\n        if n % prime == 0:\n            return True\n    return False\ndef g(primes=[2, 3, 5, 7, 11, 13]):\n    n = max(primes) * 2\n    return n\nassert f(g())\n",
        "idx_generation": 106,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_num=10) -> bool:\n    \"\"\"Check if the target_num is present in the list of numbers.\"\"\"\n    return target_num in nums\n\ndef g(target_num=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 266,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that sum to the target value\"\"\"\n    return any((a + b == target for row in matrix for i, a in enumerate(row) for b in row[i+1:]))\ndef g(matrix=[[2, 4, 6], [8, 10, 12], [14, 16, 18]]):\n    return matrix\nassert f(g())\n",
        "idx_generation": 34,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Dict\n\ndef f(students: List[Dict[str, int]], passing_score: int = 70) -> List[str]:\n    \"\"\"Find the names of students who have scored above the passing score.\n    Return a list of names.\"\"\"\n    above_passing = []\n    for student in students:\n        if student['score'] > passing_score:\n            above_passing.append(student['name'])\n    return above_passing\n\ndef g():\n    return [\n        {'name': 'Alice', 'score': 80},\n        {'name': 'Bob', 'score': 65},\n        {'name': 'Charlie', 'score': 90},\n        {'name': 'David', 'score': 75}\n    ]\n\nassert f(g(), passing_score=75) == ['Alice', 'Charlie']",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nimport numpy as np\n\ndef f(arr: np.ndarray) -> bool:\n    \"\"\"Check if the given array is a magic square\"\"\"\n    n = len(arr)\n    target_sum = n * (n ** 2 + 1) // 2\n\n    # Check rows and columns\n    if not all(np.sum(arr, axis=1) == target_sum) or not all(np.sum(arr, axis=0) == target_sum):\n        return False\n\n    # Check diagonals\n    if np.trace(arr) != target_sum or np.trace(np.flip(arr, axis=1)) != target_sum:\n        return False\n\n    return True\n\ndef g():\n    return np.array([[2, 9, 4], [7, 5, 3], [6, 1, 8]])\n\nassert f(g())\n",
        "idx_generation": 111,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=5, b=10) -> bool:\n    \"\"\"Check if the given number is a multiple of both a and b\"\"\"\n    return x % a == 0 and x % b == 0\n\ndef g(a=5, b=10):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 420,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list where the second number is the square of the first number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[i] == nums[j]:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 9, 16, 25]\n\nassert f(g())\n",
        "idx_generation": 71,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"Check if the given string, when reversed, is equal to its original value.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, coeffs=[3, 4, 5]) -> bool:\n    \"\"\"Find any (real) solution to:  a x^2 + b x + c where coeffs = [a, b, c].\n\"\"\"\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\ndef g(coeffs=[3, 4, 5]):\n    (a, b, c) = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans\nassert f(g())\n",
        "idx_generation": 216,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 7\n\nassert f(g())\n",
        "idx_generation": 261,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: str, target='abc') -> bool:\n    \"\"\"Check if a given string can be rearranged to form the target string.\"\"\"\n    if len(nums) != len(target):\n        return False\n    for char in target:\n        if char not in nums:\n            return False\n    return True\n\ndef g(target='abc'):\n    return 'bac'\n\nassert f(g())\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given number can be found in the matrix.\"\"\"\n    for row in matrix:\n        if n in row:\n            return True\n    return False\n\ndef g(matrix: List[List[int]]) -> int:\n    return matrix[-1][0]\n\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), [[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=\"helloworld\") -> bool:\n    \"\"\"Check if the given string s is a substring of the target string.\"\"\"\n    return s in target\ndef g(target=\"helloworld\"):\n    return target\nassert f(g())\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_product=24) -> bool:\n    \"\"\"Find a triplet of numbers from the list whose product is equal to the target product\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] * numbers[j] * numbers[k] == target_product:\n                    return True\n    return False\n\ndef g(target_product=24):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if num < 2:\n        return False\n    for prime in primes:\n        if num % prime == 0:\n            return False\n    return True\n\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return primes[-1] + 2\n\nassert f(g())\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Find a pair of numbers from the list whose sum is equal to the target_sum.\"\"\"\n    return any((numbers[i] + numbers[j] == target_sum for i in range(len(numbers)) for j in range(i+1, len(numbers))))\ndef g(target_sum=100):\n    return [25, 75, 10, 5, 90]\nassert f(g())\n",
        "idx_generation": 168,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(ls: List[int]) -> bool:\n    \"\"\"Check if the list contains both odd and even numbers\"\"\"\n    return any(x % 2 == 0 for x in ls) and any(x % 2 != 0 for x in ls)\ndef g():\n    return [1, 2, 3, 4, 5, 6]\nassert f(g())\n",
        "idx_generation": 19,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(a: List[int], b: List[int]) -> bool:\n    \"\"\"Check if all elements in list a are divisible by any element in list b, or vice versa.\"\"\"\n    return all(any(i % j == 0 for j in b) or any(j % i == 0 for j in b) for i in a)\n\ndef g():\n    return [10, 20, 30, 40], [2, 4, 6, 8]\n\nassert f(*g())\n",
        "idx_generation": 153,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a symmetric matrix, where the values across the main diagonal are mirrored.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 94,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> str:\n    \"\"\"Return a string with only the duplicate characters removed\"\"\"\n    return ''.join(char for char in s if s.count(char) == 1)\n\ndef g():\n    return \"abracadabra\"\n\nassert f(g()) == \"cd\"",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, start='abc', end='ghi') -> bool:\n    \"\"\"Check if the given string starts with the start substring and ends with the end substring.\"\"\"\n    return s.startswith(start) and s.endswith(end)\n\ndef g(start='abc', end='ghi'):\n    return start + 'def' + end\n\nassert f(g())\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a sparse matrix, where the majority of the elements are zero.\"\"\"\n    zero_count = 0\n    total_count = 0\n    for row in matrix:\n        for element in row:\n            total_count += 1\n            if element == 0:\n                zero_count += 1\n    return (zero_count / total_count) > 0.5\n\ndef g():\n    return [[0, 0, 0], [0, 1, 0], [0, 0, 0]]\n    \nassert f(g())\n\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, limit=1000, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is a prime number\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\ndef g(limit=1000, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    for num in range(2, limit+1):\n        if all(num % i != 0 for i in range(2, int(num**0.5)+1)):\n            return num\nassert f(g())\n",
        "idx_generation": 80,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], n=100, s=5050) -> bool:\n    \"\"\"Check if the sum of the first n natural numbers is equal to s\"\"\"\n    return sum(x) == s\n\ndef g(n=100, s=5050):\n    x = [i for i in range(1, n+1)]\n    return x\n\nassert f(g())\n",
        "idx_generation": 268,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums: List[int], prime=False) -> bool:\n    \"\"\"Check if the given number is divisible by any of the numbers in the list.\n    If prime is True, check for divisibility by prime numbers only. If prime is False, check for divisibility by any numbers.\"\"\"\n    if prime:\n        divisors = [num for num in nums if all(num % i != 0 for i in range(2, int(num**0.5) + 1))]\n    else:\n        divisors = nums\n    for num in divisors:\n        if n % num == 0:\n            return True\n    return False\n\ndef g(prime=False):\n    if prime:\n        return [2, 3, 5, 7, 11]\n    else:\n        return [4, 6, 8, 9, 10]\n\nassert f(20, g())\n",
        "idx_generation": 375,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if a given string `s` can be rearranged to form the target string 'python'.\"\"\"\n    return sorted(s) == sorted(target)\n    \ndef g(target='python'):\n    import random\n    s = list(target)\n    random.shuffle(s)\n    return ''.join(s)\n\nassert f(g())\n",
        "idx_generation": 6,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nimport re\nfrom typing import List\n\ndef f(expressions: List[str], allowed_operators=['+', '-', '*', '/']) -> bool:\n    \"\"\"Check if all of the expressions in the list are valid mathematical expressions.\n    Each expression should only contain digits and allowed_operators, and should have a correct syntax.\"\"\"\n    pattern = r'^[\\d\\s' + re.escape(''.join(allowed_operators)) + ']+$'\n    for expression in expressions:\n        if not re.match(pattern, expression):\n            return False\n    return True\n\ndef g(allowed_operators=['+', '-', '*', '/']):\n    return ['2 + 3', '4 * 6 - 2', '8 / 2 + 5', '2 * 3']\n\nassert f(g())\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry'], char='e') -> bool:\n    \"\"\"Find a word from a list that contains a given character.\"\"\"\n    return any((char in word for word in words)) and 0 < len(s) <= len(words)\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry'], char='e'):\n    return char\nassert f(g())\n",
        "idx_generation": 31,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=50) -> bool:\n    \"\"\"Check if the sum of any two numbers in a list equals the target.\"\"\"\n    return any(lst[i] + lst[j] == target for i in range(len(lst)) for j in range(i+1, len(lst)))\ndef g():\n    return [10, 20, 30, 40]\nassert f(g())\n",
        "idx_generation": 4,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import gcd\ndef f(n: int, m=20) -> bool:\n    \"\"\"Check if n and m are coprime (i.e. their greatest common divisor is 1)\"\"\"\n    return gcd(n, m) == 1\ndef g(m=20):\n    return 1 if m % 2 == 0 else 3\nassert f(g())\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, t=100, upper=15) -> bool:\n    \"\"\"Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper\ndef g(t=100, upper=15):\n    bound = t + 5\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\nassert f(g())\n",
        "idx_generation": 144,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\nfrom typing import List\n\ndef f(numbers: List[int], n=3) -> List[int]:\n    \"\"\"Find the largest n numbers in the given list.\"\"\"\n    return sorted(numbers, reverse=True)[:n]\n\ndef g():\n    return [9, 5, 2, 7, 1, 8, 3, 6, 4, 10]\n\nassert f(g(), n=4) == [10, 9, 8, 7]\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if the given character 'char' is present at least twice in the string 's'.\"\"\"\n    return s.count(char) >= 2\n\ndef g(char='a'):\n    return \"abracadabra\"\n\nassert f(g())\n",
        "idx_generation": 74,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of at least two people having the same birthday in a group of n is near 1.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return prob >= 0.99\ndef g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.01, 1)\n    while distinct_prob > 0.01:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.01 - distinct_prob), n))\n    return best[1]\nassert f(g())\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a symmetric matrix, where the matrix is equal to its transpose.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 171,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int = 3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list that contains consecutive elements.\"\"\"\n    for i in range(len(nums) - k + 1):\n        subarray = nums[i:i+k]\n        if all(subarray[j] == subarray[j-1] + 1 for j in range(1, k)):\n            return True\n    return False\n\ndef g(k: int = 3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 55,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exists a path in the matrix that adds up to the target.\"\"\"\n    def dfs(row, col, current_sum, visited):\n        if row < 0 or row >= len(matrix) or col < 0 or col >= len(matrix[0]) or (row, col) in visited:\n            return False\n        visited.add((row, col))\n        current_sum += matrix[row][col]\n        if current_sum == target:\n            return True\n        return dfs(row + 1, col, current_sum, visited) or dfs(row, col + 1, current_sum, visited)\n    \n    return dfs(0, 0, 0, set())\ndef g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the given string contains all the characters in the target string in any order.\"\"\"\n    target_chars = set(target)\n    for char in s:\n        if char in target_chars:\n            target_chars.remove(char)\n        if len(target_chars) == 0:\n            return True\n    return False\n\ndef g(target='python'):\n    return ''.join(sorted(target))\n\nassert f(g())\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sequence: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subsequence in the given sequence where the sum of any k consecutive numbers is divisible by k\"\"\"\n    for i in range(len(sequence)):\n        for j in range(i+1, len(sequence)+1):\n            subsequence = sequence[i:j]\n            if len(subsequence) >= k and all(sum(subsequence[h:h+k]) % k == 0 for h in range(len(subsequence)-k+1)):\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, pattern: str = 'abc') -> bool:\n    \"\"\"Check if a given pattern is a subsequence of a given word.\"\"\"\n    i = j = 0\n    while i < len(word) and j < len(pattern):\n        if word[i] == pattern[j]:\n            j += 1\n        i += 1\n    return j == len(pattern)\n\ndef g(pattern: str = 'abc'):\n    return \"xyabcz123\"\n\nassert f(g())\n",
        "idx_generation": 111,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string s, ignoring case.\"\"\"\n    return sub.lower() in s.lower()\n\ndef g(sub='abc'):\n    return 'xyz' + sub.upper() + 'pqr'\n\nassert f(g())\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, area=50) -> bool:\n    \"\"\"Check if the area of a circle with a given radius is equal to the target area\"\"\"\n    circle_area = math.pi * radius**2\n    return circle_area == area\n\ndef g(area=50):\n    radius = math.sqrt(area / math.pi)\n    return radius\n\nassert f(g())\n",
        "idx_generation": 85,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Find if the given number n is a perfect power of m\"\"\"\n    power = 1\n    while m ** power <= n:\n        if m ** power == n:\n            return True\n        power += 1\n    return False\n\ndef g(m=10):\n    return m ** 2\n\nassert f(g())\n",
        "idx_generation": 30,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, prime=True) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\ndef g(prime=True):\n    n = 2\n    while True:\n        if prime:\n            if f(n):\n                return n\n        else:\n            return n\n        n += 1\nassert f(g())",
        "idx_generation": 36,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y=20, z=10) -> bool:\n    \"\"\"Check if x is divisible by y and z.\"\"\"\n    return x % y == 0 and x % z == 0\n\ndef g(y=20, z=10):\n    return y * z\n\nassert f(g())\n\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], max_length=5) -> bool:\n    \"\"\"Check if there exists a name in the list that has a length less than or equal to a given length.\"\"\"\n    return any(len(name) <= max_length for name in names)\n\ndef g(max_length=5):\n    return ['Sophia', 'William', 'Isabella', 'Mason', 'Emma']\n\nassert f(g())\n",
        "idx_generation": 80,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int) -> bool:\n    \"\"\"Find a number that is a perfect square and a multiple of 5.\"\"\"\n    return x % 5 == 0 and x ** 0.5 == int(x ** 0.5)\ndef g():\n    return 25\nassert f(g())\n",
        "idx_generation": 20,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=5, length=50) -> bool:\n    \"\"\"Check if a string contains a certain number of copies of a given substring and has a length that is a multiple of a given number\"\"\"\n    return string.count(substring) == count and len(string) % length == 0\ndef g(substring='abc', count=5, length=50):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g())\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers contains any duplicate elements.\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 5]\n\nassert f(g())\n",
        "idx_generation": 116,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', length=20) -> bool:\n    \"\"\"Check if the string ends with the given substring and has the specified length\"\"\"\n    return string.endswith(substring) and len(string) == length\n\ndef g(substring='abc', length=20):\n    return 'd' * (length - len(substring)) + substring\n\nassert f(g())\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=2) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form a strictly decreasing sequence.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+1] < arr[i+j] for j in range(k-1)):\n            return True\n    return False\n\ndef g():\n    return [100, 50, 40, 30, 20, 10]\n\nassert f(g())\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, ops=['x++', '--x', '++x', '--x'], target=100) -> bool:\n    \"\"\"Given a sequence of operations \"++x\", \"--x\", \"++x\", \"--x\", and a target value, find the maximum initial value\nso that the final value is less than or equal to the target value.\nSample Input:\nops = [\"++x\", \"--x\", \"++x\"]\ntarget = 5\nSample Output:\n6\"\"\"\n    for op in ops:\n        if op in ['++x', 'x++']:\n            n += 1\n        else:\n            assert op in ['--x', 'x--']\n            n -= 1\n    return n <= target\n\ndef g(ops=['x++', 'x++', '--x', 'x--'], target=100):\n    return target - ops.count('++x') - ops.count('x++') + ops.count('--x') + ops.count('x--')\nassert f(g())\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a Toeplitz matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(1, rows):\n        for j in range(1, cols):\n            if matrix[i][j] != matrix[i-1][j-1]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [4, 1, 2], [7, 4, 1]]\n\nassert f(g())\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a combination of numbers that sums up to a target number\"\"\"\n    return sum(numbers) == target\ndef g(target=10):\n    return [1, 2, 3, 4]\nassert f(g())\n",
        "idx_generation": 2,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is sorted in non-increasing order.\"\"\"\n    return all(nums[i] >= nums[i + 1] for i in range(len(nums) - 1))\n\ndef g():\n    return [5, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 57,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=25, b=30, upper_bound=300) -> bool:\n    \"\"\"Find the smallest number that is divisible by both a and b and is less than or equal to the upper bound.\"\"\"\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\n\ndef g(a=25, b=30, upper_bound=300):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return a * (b // n)\n\nassert f(g())\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3, c=5) -> bool:\n    \"\"\"Check if a given number is divisible by any three of the three numbers a, b, and c.\"\"\"\n    return (n % a == 0 and n % b == 0 and n % c == 0)\ndef g(a=2, b=3, c=5):\n    n = a * b * c\n    return n\nassert f(g())\n\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(coordinates: List[Tuple[float, float]], target_distance=10) -> bool:\n    \"\"\"Check if any two coordinates in the list are closer than the target_distance\"\"\"\n    return any(math.dist(coord1, coord2) < target_distance for i, coord1 in enumerate(coordinates) for coord2 in coordinates[i+1:])\n\ndef g(target_distance=10):\n    coordinates = [(0, 0), (3, 4), (1, 1), (6, 8)]\n    return coordinates\n\nassert f(g())\n",
        "idx_generation": 119,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Determine if the number n can be expressed as a sum of m consecutive integers\"\"\"\n    if m == 0:\n        return False\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    return f(n-m, m) or f(n, m-1)\n\ndef g(m=10):\n    return m\n\nassert f(g())\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the given number n is present in the list lst.\"\"\"\n    return n in lst\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst[2]\n\nassert f(g()) == True\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Check if the given number is divisible by both a and b\"\"\"\n    return n % a == 0 and n % b == 0\n\ndef g(a=2, b=3):\n    return math.lcm(a, b)\n\nassert f(g())\n\n",
        "idx_generation": 442,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='racecar') -> bool:\n    \"\"\"Check if the given string is a palindrome and contains all the characters in the target string in the same order.\"\"\"\n    target_index = 0\n    for char in s:\n        if char == target[target_index]:\n            target_index += 1\n        if target_index == len(target) and s == s[::-1]:\n            return True\n    return False\n\ndef g(target='racecar'):\n    return 'racecar'\n\nassert f(g())\n",
        "idx_generation": 11,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if the given integers x, y, and z form a Pythagorean triple.\"\"\"\n    return x**2 + y**2 == z**2\n\ndef g():\n    return 3, 4, 5\n\nassert f(*g())\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"Find the index of the first occurrence of 'target' in the given list 'nums'.\"\"\"\n    return nums.index(target)\n\ndef g(nums: List[int]=[10, 20, 30, 40, 50], target: int=30):\n    return (nums, target)\n\nassert f(*g()) == 2\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello', length=5) -> bool:\n    \"\"\"Find a substring of the given length centered within the target string.\"\"\"\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target='hello', length=5):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g())\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is an identity matrix\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0]) if rows > 0 else 0\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i == j and matrix[i][j] != 1:\n                return False\n            elif i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n\nassert f(g())\n",
        "idx_generation": 313,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the given string starts with the target string.\"\"\"\n    return s.startswith(target)\n\ndef g(target='python'):\n    return 'python programming'\n\nassert f(g())\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a Toeplitz matrix\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    for i in range(rows-1):\n        for j in range(cols-1):\n            if matrix[i][j] != matrix[i+1][j+1]:\n                return False\n\n    return True\n\ndef g():\n    return [[1, 2, 3], [4, 1, 2], [7, 4, 1]]\n\nassert f(g())\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"Check if there exists a substring of length k in the string that appears exactly twice.\"\"\"\n    for i in range(len(s)-k):\n        substring = s[i:i+k]\n        if s.count(substring) == 2:\n            return True\n    return False\n\ndef g(k=2):\n    return \"abracadabra\"\n\nassert f(g())\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by a given number\"\"\"\n    for num in nums:\n        if num % n != 0:\n            return False\n    return True\n\ndef g(n=3):\n    return [9, 18, 27, 36, 45]\n\nassert f(g())\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray) -> bool:\n    \"\"\"Check if the given array is a magic square\"\"\"\n    n = len(arr)\n    target_sum = n * (n ** 2 + 1) // 2\n\n    # Check rows and columns\n    if not all(np.sum(arr, axis=1) == target_sum) or not all(np.sum(arr, axis=0) == target_sum):\n        return False\n\n    # Check diagonals\n    if np.trace(arr) != target_sum or np.trace(np.flip(arr, axis=1)) != target_sum:\n        return False\n\n    return True\n\ndef g():\n    return np.array([[2, 7, 6], [9, 5, 1], [4, 3, 8]])\n\nassert f(g())\n",
        "idx_generation": 95,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10, k=5) -> bool:\n    \"\"\"Given an integer `n`, find the smallest integer `m` such that `m` is divisible by `n` and contains at least `k` distinct digits.\n    Return True if such a number exists, False otherwise.\"\"\"\n    def count_distinct_digits(num):\n        return len(set(str(num)))\n    \n    while m % n != 0 or count_distinct_digits(m) < k:\n        m += 1\n    \n    return True\n\ndef g(m=10, k=5):\n    return m\n\nassert f(g())\n",
        "idx_generation": 97,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(graph: List[List[int]], start=0, end=3) -> bool:\n    \"\"\"Check if there exists a path in the graph from start to end.\"\"\"\n    visited = set()\n\n    def dfs(node):\n        if node == end:\n            return True\n        visited.add(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                if dfs(neighbor):\n                    return True\n        return False\n\n    return dfs(start)\n\ndef g():\n    graph = [\n        [1, 2],\n        [2, 3],\n        [3],\n        [4],\n        []\n    ]\n    return graph\n\nassert f(g())\n",
        "idx_generation": 79,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a diagonal matrix. A matrix is diagonal if all non-diagonal elements are zero.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 4, 0], [0, 0, 6]]\n\nassert f(g())\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target value, find if there exists a subsequence in the list whose sum is equal to the target value.\n    Return True if such a subsequence exists, False otherwise.\"\"\"\n    n = len(lst)\n    dp = [[False for _ in range(target+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = True\n    for i in range(1, n+1):\n        for j in range(1, target+1):\n            if lst[i-1] <= j:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-lst[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][target]\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, pairs=[[459604, 0], [364611, 68505], [562652, 512251], [668655, 471975], [464486, 626280], [138684, 177065], [163296, 68630], [188271, 104677], [367839, 338137], [73022, 362103], [464143, 484458], [214935, 189299], [643725, 283515], [908210, 541732], [710201, 234839], [854230, 34479], [3288, 675724], [846637, 396244], [0, 2526576]]) -> bool:\n    \"\"\"Given a sequence of integer pairs, p_i, m_i, where \\\\sum p_i-m_i = 0, find the maximum value, over t, of\np_{t+1} + \\\\sum_{i=1}^t p_i - m_i\"\"\"\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\n\ndef g(pairs=[[459604, 0], [364611, 68505], [562652, 512251], [668655, 471975], [464486, 626280], [138684, 177065], [163296, 68630], [188271, 104677], [367839, 338137], [73022, 362103], [464143, 484458], [214935, 189299], [643725, 283515], [908210, 541732], [710201, 234839], [854230, 34479], [3288, 675724], [846637, 396244], [0, 2526576]]):\n    tot = 0\n    n = 0\n    for (p, m) in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\n\nassert f(g())\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(names: List[str], target_name='Alice', index=2) -> bool:\n    \"\"\"Check if the target_name is located at the given index of the names list\"\"\"\n    return names[index] == target_name\n\ndef g(target_name='Alice', index=2):\n    names = ['John', 'Bob', 'Alice', 'Sarah']\n    return names\n\nassert f(g())\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the elements in a list are in increasing order.\"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    return [1, 3, 5, 7, 9]\n\nassert f(g())\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, n=3) -> bool:\n    \"\"\"Check if a number is an Armstrong number of order n.\"\"\"\n    order = len(str(num))\n    temp = num\n    sum = 0\n    while temp > 0:\n       digit = temp % 10\n       sum += digit ** order\n       temp //= 10\n    return num == sum\ndef g(n=3):\n    return 153\nassert f(g())\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], pattern='abcd') -> bool:\n    \"\"\"Check if the given words list follows a specific pattern.\"\"\"\n    pattern_dict = {}\n    for i, char in enumerate(pattern):\n        if char not in pattern_dict:\n            pattern_dict[char] = words[i]\n        else:\n            if pattern_dict[char] != words[i]:\n                return False\n    return True\n\ndef g(pattern='abcd'):\n    return [chr(ord(pattern[0]) + i) for i in range(len(pattern))]\n\nassert f(g())\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if the given number n is present in the list arr.\"\"\"\n    return n in arr\ndef g(arr=[1, 2, 3, 4, 5, 6]):\n    return arr[0]\nassert f(g())\n",
        "idx_generation": 99,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to obtain the target sum by adding or subtracting numbers from the given list.\"\"\"\n    def can_reach_target(num, curr_sum, remaining):\n        if curr_sum == target:\n            return True\n        if not remaining:\n            return False\n        return can_reach_target(num + 1, curr_sum + remaining[0], remaining[1:]) or can_reach_target(num + 1, curr_sum - remaining[0], remaining[1:])\n    return can_reach_target(0, 0, numbers)\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\nassert f(g())\n",
        "idx_generation": 198,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(a: List[int], b: List[int]) -> bool:\n    \"\"\"Check if all elements in list a are divisible by any element in list b, but not vice versa.\"\"\"\n    return all(any(i % j == 0 for j in b) and all(j % i != 0 for j in b) for i in a)\n\ndef g():\n    return [10, 20, 30, 40], [2, 4, 6, 8]\n\nassert f(*g())\n",
        "idx_generation": 153,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(prices: List[float], discount=0.2) -> bool:\n    \"\"\"Given a list of prices, find if there is any combination of prices that can be discounted by the given discount amount\n    to make the total price less than or equal to 100. Return True if such a combination exists, False otherwise.\"\"\"\n    for i in range(len(prices)):\n        for j in range(i + 1, len(prices)):\n            if prices[i] * discount + prices[j] <= 100:\n                return True\n    return False\n\ndef g(discount=0.2):\n    return [80, 30, 20, 40]\n\nassert f(g()) == True\n\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a lower triangular matrix, where all the values above the main diagonal are zero.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [2, 3, 0], [4, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 249,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nimport re\n\ndef f(s: str, pattern: str) -> bool:\n    \"\"\"Check if the given pattern matches the string\"\"\"\n    return bool(re.match(pattern, s))\n\ndef g():\n    return \"abbcccddddeeeee\"\n\nassert f(g(), \"a+b+c+d+e+\")\n",
        "idx_generation": 282,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], max_length=5) -> bool:\n    \"\"\"Check if there is a word in the list that has a length greater than the maximum length\"\"\"\n    return any((len(word) > max_length for word in words))\ndef g(words=['apple', 'banana', 'car', 'dog']):\n    return words\nassert f(g())\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, string='hello') -> bool:\n    \"\"\"Find if the given string contains n unique characters\"\"\"\n    return len(set(string)) == n\ndef g(string='hello'):\n    return string + \"world\"\nassert f(7, g())\n",
        "idx_generation": 81,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state=[3, 3, 2, 2, 3, 8]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g())\n",
        "idx_generation": 220,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if the given number is divisible by all the prime numbers in the list\"\"\"\n    for prime in primes:\n        if n % prime != 0:\n            return False\n    return True\n\ndef g(primes=[2, 3, 5, 7, 11, 13]):\n    n = 1\n    for prime in primes:\n        n *= prime\n    return n\n\nassert f(g())\n",
        "idx_generation": 141,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is sorted in ascending order.\"\"\"\n    return numbers == sorted(numbers)\ndef g():\n    return [1, 4, 7, 9, 12, 16]\nassert f(g())\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(d: Dict[str, int], target=50) -> bool:\n    \"\"\"Given a dictionary of string keys and integer values, check if there exists a pair of values that sum up to the target value.\n    Return True if such a pair exists, False otherwise.\"\"\"\n    values = list(d.values())\n    n = len(values)\n    for i in range(n):\n        for j in range(i+1, n):\n            if values[i] + values[j] == target:\n                return True\n    return False\n\ndef g(target=50):\n    return {'a': 10, 'b': 20, 'c': 30, 'd': 40}\n\nassert f(g()) == True\n",
        "idx_generation": 54,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g() -> List[List[int]]:\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a subsequence of numbers in the given list whose sum is equal to the target number.\"\"\"\n    n = len(numbers)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if numbers[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - numbers[i - 1]]\n    return dp[n][target]\n\ndef g():\n    return [1, 5, 10, 15]\n\nassert f(g())\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], threshold=0.5) -> bool:\n    \"\"\"Check if a matrix is a binary matrix, where each element is either 0 or 1, and if the sum of each row is equal to or greater than the threshold.\"\"\"\n    n = len(matrix)\n    for row in matrix:\n        if any((element != 0 and element != 1 for element in row)) or sum(row) < threshold:\n            return False\n    return True\n\ndef g(threshold=0.5):\n    return [[1, 0, 1], [0, 1, 1], [1, 1, 0], [1, 0, 0]]\n\nassert f(g())\n",
        "idx_generation": 151,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=3) -> bool:\n    \"\"\"Check if the given number is a multiple of both a and b\"\"\"\n    return n % a == 0 and n % b == 0\n\ndef g(a=10, b=3):\n    return a * b\n\nassert f(g())\n\n",
        "idx_generation": 435,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a perfect square sequence.\"\"\"\n    if len(nums) < 3:\n        return False\n    for i in range(2, len(nums)):\n        if nums[i] != nums[i-1] ** 2:\n            return False\n    return True\n\ndef g():\n    return [1, 4, 16, 256, 65536]\n\nassert f(g())\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=10) -> bool:\n    \"\"\"Check if the given string is equal to its reverse.\"\"\"\n    return string == string[::-1]\n\ndef g(n=10):\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if the given string has exactly n number of distinct vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count == n\n\ndef g():\n    return (\"Hello, World!\", 3)\n\nassert f(*g())\n",
        "idx_generation": 20,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, big_str='hello world', index=5) -> bool:\n    \"\"\"Find a string whose *first* index in big_str is index\"\"\"\n    return big_str.index(s) == index\n\ndef g(big_str='hello world', index=5):\n    return big_str[index:]\n\nassert f(g())\n",
        "idx_generation": 306,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: float, coeffs=[-3, 2, -1]) -> bool:\n    \"\"\"Find any (real) solution to:  a x^2 + b x + c where coeffs = [a, b, c].\n\"\"\"\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\ndef g(coeffs=[-3, 2, -1]):\n    (a, b, c) = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans\nassert f(g())\n",
        "idx_generation": 216,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(num: int) -> bool:\n    \"\"\"Check if the given number is a prime number\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    return 13\n\nassert f(g())\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int]) -> bool:\n    \"\"\"Determine if a list of integers is in increasing order.\"\"\"\n    return all(x[i] < x[i+1] for i in range(len(x)-1))\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 5,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, char='a') -> bool:\n    \"\"\"Check if the given character is the most frequent character in the string.\"\"\"\n    from collections import Counter\n    counter = Counter(string)\n    most_common_char, freq = counter.most_common(1)[0]\n    return most_common_char == char\n\ndef g(char='a'):\n    return 'abracadabra'\n\nassert f(g())\n",
        "idx_generation": 474,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given number can be found in the matrix.\"\"\"\n    for row in matrix:\n        if n in row:\n            return True\n    return False\n\ndef g(matrix: List[List[int]]) -> int:\n    return matrix[1][1]\n\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), [[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='abc') -> bool:\n    \"\"\"Check if the target string is a subsequence of the given string.\"\"\"\n    i = 0\n    for char in s:\n        if char == target[i]:\n            i += 1\n        if i == len(target):\n            return True\n    return False\ndef g(s='abcdefg'):\n    return s\nassert f(g())",
        "idx_generation": 64,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, parts=['numegixuly', 'koxyfihimurukothasyl'], string='numegixulypyjetkoxyfihimurukothasyl') -> bool:\n    \"\"\"Check if a given string can be constructed by concatenating the parts list in order, with x as the separator.\"\"\"\n    return x.join(parts) == string\n\ndef g(parts=['numegixuly', 'koxyfihimurukothasyl'], string='numegixulypyjetkoxyfihimurukothasyl'):\n    if len(parts) <= 1:\n        return ''\n    length = (len(string) - len(''.join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\n\nassert f(g())\n",
        "idx_generation": 57,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=50) -> bool:\n    \"\"\"Given a list of numbers, find if there exists a combination of numbers in the list that multiplies to the target number.\n    Return True if a combination is found, False otherwise.\"\"\"\n    def combination_product(numbers, target, partial=[]):\n        p = 1\n        for num in partial:\n            p *= num\n        if p == target:\n            return True\n        if p > target:\n            return False\n        for i in range(len(numbers)):\n            n = numbers[i]\n            remaining = numbers[i + 1:]\n            if combination_product(remaining, target, partial + [n]):\n                return True\n        return False\n    \n    return combination_product(numbers, target)\n\ndef g(target=50):\n    return [10, 5, 2, 4]\n\nassert f(g()) == True\n",
        "idx_generation": 271,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n == 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Find a pair of numbers from the list whose sum is greater than the target_sum.\"\"\"\n    return any((numbers[i] + numbers[j] > target_sum for i in range(len(numbers)) for j in range(i+1, len(numbers))))\n\ndef g(target_sum=100):\n    return [25, 75, 10, 5, 90]\n\nassert f(g())\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], n=5) -> bool:\n    \"\"\"Check if the list contains exactly n even numbers\"\"\"\n    return len([x for x in li if x % 2 == 0]) == n\ndef g(n=5):\n    return [2, 4, 6, 8, 10] * (n // 5)\nassert f(g())\n",
        "idx_generation": 33,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, t='python') -> bool:\n    \"\"\"Check if the given string s is an anagram of t.\"\"\"\n    return sorted(s.lower()) == sorted(t.lower())\ndef g(t='python'):\n    import random\n    s = list(t.lower())\n    random.shuffle(s)\n    return ''.join(s)\nassert f(g())\n",
        "idx_generation": 94,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the given list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 12,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a Fibonacci sequence.\"\"\"\n    if len(nums) < 3:\n        return False\n    for i in range(2, len(nums)):\n        if nums[i] != nums[i-1] + nums[i-2]:\n            return False\n    return True\n\ndef g():\n    return [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n\nassert f(g())\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find the smallest integer k such that the sum of the first k prime numbers is divisible by n\"\"\"\n    primes = [2]\n    current_sum = 2\n    i = 3\n    while True:\n        if all(i % prime != 0 for prime in primes):\n            primes.append(i)\n            current_sum += i\n            if current_sum % n == 0:\n                return True\n        i += 1\ndef g():\n    return 1\nassert f(g())\n",
        "idx_generation": 3,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if all words in a list start with a given prefix\"\"\"\n    for word in words:\n        if not word.startswith(prefix):\n            return False\n    return True\n\ndef g(words=['preheat', 'precooked', 'prepaid', 'premature']):\n    return words\n\nassert f(g())\n",
        "idx_generation": 11,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    \n    # Check if all rows, columns, and diagonals have the same sum\n    target_sum = sum(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) != target_sum:\n            return False\n        if sum(row[i] for row in matrix) != target_sum:\n            return False\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(matrix[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n    \n    return True\n\ndef g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 120,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target_char='e') -> bool:\n    \"\"\"Given a string, check if the target_char appears as the first character of any word in the string.\"\"\"\n    words = string.split()\n    for word in words:\n        if word[0] == target_char:\n            return True\n    return False\ndef g(target_char='e'):\n    return \"elephant eats every evening\"\nassert f(g())\n",
        "idx_generation": 442,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(delta: List[int], nums=[[-16, 53, 37], [-54, -85, 65], [-46, 49, -81], [88, -47, -35], [53, -82, 4], [45, 94, 39], [72, -57, 27], [40, 35, -44], [-15, 32, 21]]) -> bool:\n    \"\"\"Check if the given delta values can be added to each triple of integers in nums to make them all add up to 0 coordinatewise\"\"\"\n    return all((sum((vec[i] for vec in nums)) + delta[i] == 0 for i in range(3)))\n\ndef g(nums=[[-16, 53, 37], [-54, -85, 65], [-46, 49, -81], [88, -47, -35], [53, -82, 4], [45, 94, 39], [72, -57, 27], [40, 35, -44], [-15, 32, 21]]):\n    return [(0 - sum((vec[i] for vec in nums))) for i in range(3)]\n\nassert f(g())\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if the two given strings are anagrams of each other.\"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g(s1='listen', s2='silent'):\n    return s1, s2\n\nassert f(*g())\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\ndef f(dt: datetime.datetime, days=30) -> bool:\n    \"\"\"Check if a given date is within a given number of days from today\"\"\"\n    now = datetime.datetime.now()\n    diff = dt - now\n    return abs(diff.days) <= days\ndef g(days=30):\n    dt = datetime.datetime.now() + datetime.timedelta(days=15)\n    return dt\nassert f(g())\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a sparse matrix. A matrix is sparse if the majority of its elements are zeros.\"\"\"\n    zero_count = 0\n    total_count = 0\n\n    for row in matrix:\n        for element in row:\n            if element == 0:\n                zero_count += 1\n            total_count += 1\n\n    return zero_count > (total_count // 2)\n\ndef g():\n    return [[1, 0, 0], [0, 0, 0], [0, 0, 1]]\n\nassert f(g())\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(res: int, n=5) -> bool:\n    \"\"\"Find the result of applying the following operation to the number n, until it becomes zero: if n is even, divide it by 2, otherwise subtract 1.\"\"\"\n    while n > 0:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n - 1\n    return res == n\n\ndef g(n=5):\n    while n > 0:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n - 1\n    return n\n\nassert f(g())\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4]) -> bool:\n    \"\"\"Find if the list contains exactly n prime numbers\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    primes = [num for num in lst if is_prime(num)]\n    return len(primes) == n\ndef g(lst=[1, 2, 3, 4]):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    primes = [num for num in lst if is_prime(num)]\n    return primes\nassert f(2, g())\n",
        "idx_generation": 81,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], n=10, s=55) -> bool:\n    \"\"\"Find if there exists a subset of n elements in the list that sum up to s\"\"\"\n    def subset_sum(nums, target, n):\n        if target == 0:\n            return True\n        if n == 0:\n            return False\n        if nums[n-1] > target:\n            return subset_sum(nums, target, n-1)\n        return subset_sum(nums, target, n-1) or subset_sum(nums, target-nums[n-1], n-1)\n\n    return subset_sum(x, s, n)\n\ndef g(n=10, s=55):\n    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return x\n\nassert f(g())\n",
        "idx_generation": 268,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> List[int]:\n    \"\"\"Given a list of integers 'nums' and a number 'k', rotate the list to the right by 'k' steps.\"\"\"\n    k = k % len(nums)\n    return nums[-k:] + nums[:-k]\n\ndef g(nums: List[int]=[1, 2, 3, 4, 5], k: int=2):\n    return (nums, k)\n\nassert f(*g()) == [4, 5, 1, 2, 3]\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], n=6) -> bool:\n    \"\"\"Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\nwhere indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\nthat are multiples of 3 (as proven in the IMO problem).\nSample input:\n6\nSample output:\n[_, _, _, _, _, _]\n(Sample output hidden because showing sample output would give away too much information.)\"\"\"\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n=6):\n    return [-1, -1, 2] * (n // 3)\nassert f(g())\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(t: Tuple[int, ...], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the tuple that sums up to the target value\"\"\"\n    for i in range(len(t)):\n        for j in range(i+1, len(t)):\n            if t[i] + t[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return (1, 2, 3, 4, 5, 6, 7, 8, 9)\n\nassert f(g())\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='nivosypetextyzavalag', reverse=False) -> bool:\n    \"\"\"Either reverse a string or don't based on the reverse flag\"\"\"\n    return (len(s) == len(target)) == reverse\ndef g(target='nivosypetextyzavalag', reverse=False):\n    return target[::-1] if reverse else target + 'x'\nassert f(g())\n",
        "idx_generation": 44,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nimport re\nfrom typing import List\n\ndef f(expressions: List[str], allowed_operators=['+', '-', '*', '/']) -> bool:\n    \"\"\"Check if any of the expressions in the list are valid mathematical expressions.\n    Each expression should only contain digits and allowed_operators, and should have a correct syntax.\"\"\"\n    pattern = r'^[\\d\\s' + re.escape(''.join(allowed_operators)) + ']+$'\n    for expression in expressions:\n        if re.match(pattern, expression):\n            return True\n    return False\n\ndef g(allowed_operators=['+', '-', '*', '/']):\n    return ['2 + 3', '4 * 6 - 2', '8 / 2 + 5', '2 * 3']\n\nassert f(g())\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a geometric sequence.\"\"\"\n    if len(numbers) < 2:\n        return False\n    ratio = numbers[1] / numbers[0]\n    for i in range(2, len(numbers)):\n        if numbers[i] / numbers[i-1] != ratio:\n            return False\n    return True\n\ndef g():\n    return [1, 2, 4, 8, 16, 32, 64]\n\nassert f(g())\n\n",
        "idx_generation": 146,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lb: List[bool], trips=[[0, 0, 0], [1, 0, 0], [0, 1, 1], [0, 1, 1]]) -> bool:\n    \"\"\"Given a list of lists of triples of integers, return True for each list with a total of at least 2 and\nFalse for each other list.\"\"\"\n    return all((b is True if sum(s) >= 2 else b is False for (b, s) in zip(lb, trips)))\n\ndef g(trips=[[0, 0, 0], [1, 0, 0], [0, 1, 1], [0, 1, 1]]):\n    return [sum(s) >= 2 for s in trips]\n\nassert f(g())\n",
        "idx_generation": 250,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, vowels='aeiou') -> bool:\n    \"\"\"Given a string, determine if it contains only vowels.\"\"\"\n    return all((c in vowels for c in s))\ndef g():\n    return \"aei\"\nassert f(g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 7,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub1='apple', sub2='orange', count1=12, count2=8) -> bool:\n    \"\"\"Find a string that has count1 occurrences of sub1 and count2 occurrences of sub2 and starts and ends with\nthe same 5 characters\"\"\"\n    return s.count(sub1) == count1 and s.count(sub2) == count2 and (s[:5] == s[-5:])\ndef g(sub1='apple', sub2='orange', count1=12, count2=8):\n    if sub1 == sub2:\n        ans = (sub1 + '?') * count1\n    elif sub1.count(sub2):\n        ans = (sub1 + '?') * count1\n        ans += (sub2 + '?') * (count2 - ans.count(sub2))\n    else:\n        ans = (sub2 + '?') * count2\n        ans += (sub1 + '?') * (count1 - ans.count(sub1))\n    return '?' * 5 + ans + '?' * 5\nassert f(g())\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, perm='abcdefghijklmnopqrstuvwxyz', target='thequickbrownfoxjumpsoverthelazydog') -> bool:\n    \"\"\"Find a string that, when a given permutation of characters is applied, has a given result.\"\"\"\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm='abcdefghijklmnopqrstuvwxyz', target='thequickbrownfoxjumpsoverthelazydog'):\n    return ''.join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c for c in target))\nassert f(g())\n",
        "idx_generation": 2,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x: int = 2) -> bool:\n    \"\"\"Check if a given number is a power of x\"\"\"\n    return n != 0 and (n & (n - 1)) == 0 and n != 1 and n % x == 0\n\ndef g(x: int = 2):\n    return 16\n\nassert f(g())\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, div=5) -> bool:\n    \"\"\"Find a number that is divisible by 'div' and its sum of digits is equal to the number itself.\"\"\"\n    return n % div == 0 and sum([int(digit) for digit in str(n)]) == n\ndef g(div=5):\n    n = 0\n    while True:\n        if n % div == 0 and sum([int(digit) for digit in str(n)]) == n:\n            return n\n        n += 1\nassert f(g())\n",
        "idx_generation": 17,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a subset of numbers in the given list whose sum equals the target value.\"\"\"\n    def subset_sum(arr, n, target) -> bool:\n        if target == 0:\n            return True\n        if n == 0 and target != 0:\n            return False\n        if arr[n - 1] > target:\n            return subset_sum(arr, n - 1, target)\n        return subset_sum(arr, n - 1, target) or subset_sum(arr, n - 1, target - arr[n - 1])\n\n    return subset_sum(nums, len(nums), target)\n    \ndef g(target=100):\n    nums = [10, 25, 30, 50, 70]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 5,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, t=150, upper=25) -> bool:\n    \"\"\"Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper\ndef g(t=150, upper=25):\n    bound = t + 7\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\nassert f(g())\n",
        "idx_generation": 144,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(numbers: List[int], target: int = 7) -> bool:\n    \"\"\"Check if the target number is a multiple of any number in the list of numbers.\"\"\"\n    return any(target % num == 0 for num in numbers)\n\ndef g(target: int = 7):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return random.sample(numbers, len(numbers))\n\nassert f(g()) == True\n\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target_length: int = 5) -> bool:\n    \"\"\"Check if there is a name in the list that has more characters than the target length.\"\"\"\n    for name in names:\n        if len(name) > target_length:\n            return True\n    return False\ndef g(target_length: int = 5):\n    return [\"John\", \"Sarah\", \"Michael\", \"Emma\"]\nassert f(g())\n",
        "idx_generation": 90,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import datetime\nfrom typing import*\ndef f(dates: List[datetime.date], target_year=2022) -> bool:\n    \"\"\"Check if there exists a date in a list of dates that falls on the target year.\"\"\"\n    for date in dates:\n        if date.year == target_year:\n            return True\n    return False\n\ndef g(target_year=2022):\n    return [datetime.date(2021, 1, 1), datetime.date(2022, 1, 1), datetime.date(2023, 1, 1)]\n\nassert f(g())\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers contains a subsequence that is a perfect square\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            subsequence = numbers[i:j]\n            is_perfect_square = all((int(num**0.5))**2 == num for num in subsequence)\n            if is_perfect_square:\n                return True\n    return False\n\ndef g():\n    return [1, 4, 9, 16, 25, 36, 49, 64, 81]\n\nassert f(g())\n",
        "idx_generation": 212,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], k=4) -> bool:\n    \"\"\"Check if the given list contains k consecutive numbers.\"\"\"\n    nums.sort()\n    for i in range(len(nums) - k + 1):\n        if nums[i] + k - 1 == nums[i + k - 1]:\n            return True\n    return False\n\ndef g(k=4):\n    nums = [random.randint(1, 10) for _ in range(10)]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 59,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exists a path in the matrix that adds up to the target.\"\"\"\n    def dfs(row, col, current_sum, visited):\n        if row < 0 or row >= len(matrix) or col < 0 or col >= len(matrix[0]) or (row, col) in visited:\n            return False\n        visited.add((row, col))\n        current_sum += matrix[row][col]\n        if current_sum == target:\n            return True\n        return dfs(row + 1, col, current_sum, visited) or dfs(row, col + 1, current_sum, visited) or dfs(row - 1, col, current_sum, visited) or dfs(row, col - 1, current_sum, visited)\n    \n    return dfs(0, 0, 0, set())\ndef g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    n = len(matrix)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    \n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_char='a') -> bool:\n    \"\"\"Given a string, check if the target_char appears as the last character of any word in the string.\"\"\"\n    words = s.split()\n    for word in words:\n        if word[-1] == target_char:\n            return True\n    return False\n\ndef g(target_char='a'):\n    return \"apple banana cherry date\"\n    \nassert f(g())\n",
        "idx_generation": 134,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(t: List[str], s='python') -> bool:\n    \"\"\"Check if the given list of strings contains the target string\"\"\"\n    return s in t\n\ndef g(s='python'):\n    return ['I', 'love', 'python', 'programming']\n\nassert f(g())\n\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(substring: str, string='purpleappleorangeapplemangobananalemon', count=2) -> bool:\n    \"\"\"Find a substring with a certain count in a given string\"\"\"\n    return string.count(substring) == count\ndef g(string='purpleappleorangeapplemangobananalemon', count=2):\n    substrings = []\n    for i in range(len(string)):\n        for j in range(i + 1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count and substring not in substrings:\n                substrings.append(substring)\n    return substrings[count-1]\nassert f(g())\n",
        "idx_generation": 105,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nimport itertools\n\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"Check if there exists a sublist in the array whose sum is a multiple of k\"\"\"\n    return any((sum(sublist) % k == 0 for sublist in itertools.combinations(arr, len(arr)//2)))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), 3)\n",
        "idx_generation": 282,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if the target string is present in the given string.\"\"\"\n    return target in s\n\ndef g():\n    s = \"hello world\"\n    return s\n\nassert f(g(), target=\"world\")\n",
        "idx_generation": 370,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, volume=1000) -> bool:\n    \"\"\"Check if the volume of a sphere with the given radius is equal to the target volume\"\"\"\n    return abs((4/3) * math.pi * radius**3 - volume) < 0.0001\ndef g(volume=1000):\n    radius = (volume * 3 / (4 * math.pi))**(1/3)\n    return radius\nassert f(g())\n",
        "idx_generation": 103,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 7\n\nassert f(g())\n\n",
        "idx_generation": 39,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(st: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring exists in the given string.\"\"\"\n    return substring in st\n\ndef g(substring='abc'):\n    return \"xyzabc123\"\n\nassert f(g())\n",
        "idx_generation": 250,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=20) -> bool:\n    \"\"\"Check if the sum of n and a is equal to b.\"\"\"\n    return n + a == b\ndef g(a=10, b=20):\n    return b - a\nassert f(g())\n",
        "idx_generation": 40,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, word_count=5) -> bool:\n    \"\"\"Check if there exists a sentence in which the word count is equal to a given number.\"\"\"\n    words = sentence.split()\n    return len(words) == word_count\n\ndef g(word_count=5):\n    return \"This is a sample sentence.\"\n\nassert f(g())\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=12, max_numbers=3, options=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Find a combination of at most max_numbers numbers whose sum is the target value.\"\"\"\n    for num in numbers:\n        assert num in options\n    return len(numbers) <= max_numbers and sum(numbers) == target\ndef g(target=12, max_numbers=3, options=[1, 2, 3, 4, 5, 6]):\n    from itertools import combinations\n    for n in range(max_numbers + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 39,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if two given numbers are both perfect squares.\"\"\"\n    return math.isqrt(n)**2 == n and math.isqrt(m)**2 == m\n\ndef g():\n    return (49, 16)\n\nassert f(*g())\n",
        "idx_generation": 31,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=4, b=12, c=20) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c even integers)\"\"\"\n    return n + a == sum([b * (2*i) for i in range(1, c+1)])\ndef g(a=4, b=12, c=20):\n    return -a + sum([b * (2*i) for i in range(1, c+1)])\nassert f(g())\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=5, length=15) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring='abc', count=5, length=15):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g())\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='dinosaur', max_len=7) -> bool:\n    \"\"\"Check if a string is an abbreviation of a given word. An abbreviation is formed by keeping only the first and last character of the word and inserting the number of characters in between.\"\"\"\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\ndef g(word='dinosaur', max_len=7):\n    if len(word) <= max_len:\n        return word\n    return f'{word[0]}{len(word) - 2}{word[-1]}'\nassert f(g())\n",
        "idx_generation": 354,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['hello', 'world', 'python']) -> bool:\n    \"\"\"Check if a given string consists of all the words in a list concatenated together\"\"\"\n    return ''.join(words) == s\ndef g(words=['hello', 'world', 'python']):\n    return ''.join(words)\nassert f(g())\n",
        "idx_generation": 3,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers contains a duplicate element\"\"\"\n    return len(set(nums)) != len(nums)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\n\nassert f(g())\n",
        "idx_generation": 120,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x=756, y=249) -> bool:\n    \"\"\"Find the smallest n such that x raised to the power of n exceeds y.\"\"\"\n    return x ** n > y\ndef g(x=756, y=249):\n    n = 0\n    while x ** n <= y:\n        n += 1\n    return n\nassert f(g())\n",
        "idx_generation": 59,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', length=20) -> bool:\n    \"\"\"Check if the string starts with the given substring and has the specified length\"\"\"\n    return string.startswith(substring) and len(string) == length\n\ndef g(substring='abc', length=20):\n    return substring + 'd' * (length - len(substring))\n\nassert f(g())\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a given number is a power of 2\"\"\"\n    return n != 0 and (n & (n - 1)) == 0\ndef g():\n    return 16\nassert f(g())\n",
        "idx_generation": 5,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Given a list of integers, find if there exists a subsequence of length n such that its elements are in strictly increasing order.\nSample Input:\nnums = [1, 3, 2, 4, 5]\nn = 3\nSample Output:\nTrue\"\"\"\n    for i in range(len(nums) - n + 1):\n        subseq = nums[i:i + n]\n        if sorted(subseq) == subseq:\n            return True\n    return False\ndef g(n=3):\n    return [1, 3, 2, 4, 5, n]\nassert f(g())",
        "idx_generation": 55,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=4) -> bool:\n    \"\"\"Check if there exists k consecutive elements in the list that form a strictly decreasing sequence.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+1] < arr[i+j] for j in range(k-1)):\n            return True\n    return False\n\ndef g():\n    return [10, 8, 6, 4, 2, 0]\n\nassert f(g())\n",
        "idx_generation": 468,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target: int = 6174) -> int:\n    \"\"\"Consider the following process. Start with a four-digit integer `n` and repeatedly applying the operation:\n    * Arrange the digits of `n` in ascending order to form a new number `asc`\n    * Arrange the digits of `n` in descending order to form a new number `desc`\n    * Calculate the difference `diff` between `desc` and `asc`\n    * Repeat the process with `diff` as the new value of `n`\n    Find the number of steps it takes to reach the target number `6174`.\"\"\"\n    steps = 0\n    while n != target:\n        asc = int(\"\".join(sorted(str(n))))\n        desc = int(\"\".join(sorted(str(n), reverse=True)))\n        diff = desc - asc\n        n = diff\n        steps += 1\n    return steps\n\ndef g():\n    return 3456\n\nassert f(g()) == 3\n\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, scores=[90, 80, 75, 70, 65, 60, 55, 50, 45, 40], k=3) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\nare strictly greater than the kth.\"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s > scores[k] and s > 0 for s in scores[:n])) and all((s <= scores[k] or s <= 0 for s in scores[n:]))\ndef g(scores=[90, 80, 75, 70, 65, 60, 55, 50, 45, 40], k=3):\n    threshold = scores[k]\n    return sum((s > threshold for s in scores))\nassert f(g())\n",
        "idx_generation": 2,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a Toeplitz matrix.\"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    # Check if the matrix is rectangular\n    if any(len(row) != m for row in arr):\n        return False\n\n    # Check if the matrix is a Toeplitz matrix\n    for i in range(n-1):\n        for j in range(m-1):\n            if arr[i][j] != arr[i+1][j+1]:\n                return False\n\n    return True\n\ndef g():\n    return [[1, 2, 3], [4, 1, 2], [7, 4, 1]]\n\nassert f(g())\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Check if the given number n is present in the given list of lists lst\"\"\"\n    for sublist in lst:\n        if n in sublist:\n            return True\n    return False\ndef g(lst=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return lst[1][0]\nassert f(g())\n",
        "idx_generation": 7,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10, num_elements=3, order='ascending') -> bool:\n    \"\"\"Find a sublist of num_elements from the given list that sums up to the target.\"\"\"\n    if order == 'ascending':\n        nums.sort()\n    elif order == 'descending':\n        nums.sort(reverse=True)\n    else:\n        raise ValueError(\"Invalid order argument\")\n\n    def backtrack(curr_sum, start, count):\n        if curr_sum == target and count == num_elements:\n            return True\n        if curr_sum > target or count > num_elements:\n            return False\n        for i in range(start, len(nums)):\n            if i > start and nums[i] == nums[i-1]:\n                continue\n            if backtrack(curr_sum + nums[i], i+1, count+1):\n                return True\n        return False\n\n    return backtrack(0, 0, 0)\n\ndef g(nums=[1, 5, 2, 4, 3], target=10, num_elements=3, order='ascending'):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 6,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x=5, y=7) -> bool:\n    \"\"\"Check if the given number n is divisible by both x and y.\n    Return True if n is divisible by both x and y, False otherwise.\"\"\"\n    return n % x == 0 and n % y == 0\n\ndef g(x=5, y=7):\n    return x * y * 2\n\nassert f(g()) == True\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=24) -> bool:\n    \"\"\"Check if the product of two positive integers n and m is equal to 24.\"\"\"\n    return n * m == 24\n\ndef g(m=24):\n    return int(24 / m)\n\nassert f(g())\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport math\n\ndef f(points: List[Tuple[float, float]], origin=(0, 0)) -> bool:\n    \"\"\"Check if all the points in the given list are located within the specified radius from the origin.\n    Return True if all points are within the radius, False otherwise.\"\"\"\n    radius = 10\n    return all(math.sqrt((x - origin[0])**2 + (y - origin[1])**2) <= radius for x, y in points)\n\ndef g(origin=(0, 0)):\n    x_coords = [random.uniform(-15, 15) for _ in range(10)]\n    y_coords = [random.uniform(-15, 15) for _ in range(10)]\n    points = list(zip(x_coords, y_coords))\n    return points\n\nassert f(g()) == False\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if there exists a substring of length k which is a palindrome.\"\"\"\n    return any([s[i:i+k] == s[i:i+k][::-1] for i in range(len(s)-k+1)])\ndef g(k=3):\n    return \"racecar\"\nassert f(g())\n",
        "idx_generation": 13,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, matrix: List[List[int]]) -> int:\n    \"\"\"Find the sum of the diagonal elements in the given matrix.\"\"\"\n    diagonal_sum = 0\n    for i in range(len(matrix)):\n        diagonal_sum += matrix[i][i]\n    return diagonal_sum\n\ndef g():\n    return [[4, 2, 7], [1, 5, 3], [8, 6, 9]]\n\nassert f(3, g()) == 18\n",
        "idx_generation": 375,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if the target value exists in the given list of numbers.\"\"\"\n    return target in nums\n\ndef g(target=5):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is an identity matrix.\"\"\"\n    n = len(matrix)\n    \n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != 1 and i == j:\n                return False\n            if matrix[i][j] != 0 and i != j:\n                return False\n    return True\n\ndef g(matrix=[[1, 0, 0], [0, 1, 0], [0, 0, 1]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, lst=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Check if the given string s is present in the list lst\"\"\"\n    return s in lst\ndef g(lst=['apple', 'banana', 'cherry', 'date']):\n    return lst[2]\nassert f(g())\n",
        "idx_generation": 7,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the given string starts with the target string.\"\"\"\n    return s.startswith(target)\n\ndef g(target='python'):\n    return 'python programming'\n\nassert f(g())\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Check if there exists n consecutive numbers in the list that are all divisible by 2\"\"\"\n    count = 0\n    for num in nums:\n        if num % 2 == 0:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(n=3):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert f(g())\n",
        "idx_generation": 38,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a given number n is present in the list nums.\"\"\"\n    return n in nums\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums[0]\nassert f(g())\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(graph: Dict[str, List[str]], start='A', end='D', path_length=10) -> bool:\n    \"\"\"Find a path from the start node to the end node in the given graph, with a path length less than or equal to path_length.\n    The graph is represented as a dictionary where the keys are nodes and the values are lists of adjacent nodes.\"\"\"\n    queue = [(start, [start])]\n    while queue:\n        (node, path) = queue.pop(0)\n        if node == end and len(path) <= path_length:\n            return True\n        neighbors = graph.get(node, [])\n        for neighbor in neighbors:\n            if neighbor not in path:\n                queue.append((neighbor, path + [neighbor]))\n    return False\n\ndef g(start='A', end='D', path_length=10):\n    return {\n        'A': ['B', 'C', 'D'],\n        'B': ['A', 'C'],\n        'C': ['A', 'B', 'D'],\n        'D': ['A', 'C']\n    }\n\nassert f(g())\n\n",
        "idx_generation": 97,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(target: str, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Check if there exists a word in the list of words that is a substring of the target string\"\"\"\n    for word in words:\n        if word in target:\n            return True\n    return False\ndef g(words=['apple', 'banana', 'cherry', 'date']):\n    return words[0]\nassert f(g())\n",
        "idx_generation": 10,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[int], n: int) -> bool:\n    \"\"\"Find all possible combinations of the list elements and check if any of them sums up to n.\"\"\"\n    return any(sum(comb) == n for r in range(len(lst) + 1) for comb in itertools.combinations(lst, r))\ndef g(lst: List[int]):\n    return lst, sum(lst)\nassert f(*g([1, 2, 3, 4, 5]))\n\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, pairs=[[459604, 0], [364611, 68505], [562652, 512251], [668655, 471975], [464486, 626280], [138684, 177065], [163296, 68630], [188271, 104677], [367839, 338137], [73022, 362103], [464143, 484458], [214935, 189299], [643725, 283515], [908210, 541732], [710201, 234839], [854230, 34479], [3288, 675724], [846637, 396244], [0, 2526576]]) -> bool:\n    \"\"\"Given a sequence of integer pairs, p_i, m_i, where \\\\sum p_i-m_i = 0, find the maximum value, over t, of\np_{t+1} + \\\\sum_{i=1}^t p_i - m_i\"\"\"\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\n\ndef g(pairs=[[459604, 0], [364611, 68505], [562652, 512251], [668655, 471975], [464486, 626280], [138684, 177065], [163296, 68630], [188271, 104677], [367839, 338137], [73022, 362103], [464143, 484458], [214935, 189299], [643725, 283515], [908210, 541732], [710201, 234839], [854230, 34479], [3288, 675724], [846637, 396244], [0, 2526576]]):\n    tot = 0\n    n = 0\n    for (p, m) in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\n\nassert f(g())\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(names: List[str], target_name='Alice', index=2) -> bool:\n    \"\"\"Check if the target_name is located at the given index of the names list\"\"\"\n    if index < 0 or index >= len(names):\n        return False\n    return names[index] == target_name\n\ndef g(target_name='Alice', index=2):\n    names = ['John', 'Bob', 'Alice', 'Sarah']\n    return names\n\nassert f(g())\n\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='Python', t='python') -> bool:\n    \"\"\"Check if s and t are anagrams, case-insensitive, and return True if they are.\"\"\"\n    return sorted(s.lower()) == sorted(t.lower())\n\ndef g(s='Python', t='python'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order.\"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if the given number can be expressed as the sum of k prime numbers.\"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    if n < primes[k - 1]:\n        return False\n    if k == 1:\n        return n in primes\n    if k == 2:\n        for prime in primes:\n            if f(n - prime, 1):\n                return True\n        return False\n    for i in range(2, n // k + 1):\n        if all(f(n - i * j, k - 1) for j in range(2, k + 1)):\n            return True\n    return False\ndef g(n=20, k=3):\n    return n\nassert f(g())\n",
        "idx_generation": 68,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(words: List[str], n=5) -> bool:\n    \"\"\"Given a list of words, find a combination of n words that all share a common letter.\"\"\"\n    from itertools import combinations\n    return any(len(set(word1) & set(word2)) > 0 for comb in combinations(words, n) for word1, word2 in combinations(comb, 2))\ndef g(n=5):\n    return ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew']\nassert f(g())\n",
        "idx_generation": 127,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if the target number is present in the list.\"\"\"\n    return target in nums\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 10]\n\nassert f(g())\n",
        "idx_generation": 104,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int], target_sum=100) -> bool:\n    \"\"\"Find a subset of n integers from the list such that their sum equals the target_sum.\"\"\"\n    return sum(lst) == target_sum and len(lst) == n\n\ndef g(lst=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    return lst[:5]\n\nassert f(5, g(), target_sum=150)\n",
        "idx_generation": 217,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Check if the given string s is a rotation of string t.\"\"\"\n    if len(s) != len(t):\n        return False\n    return t in s + s\n\ndef g():\n    return \"abcd\", \"cdab\"\n\nassert f(*g())\n",
        "idx_generation": 169,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the list contains a pair of numbers that add up to 10.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == 10:\n                return True\n    return False\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 170,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target_length=5) -> bool:\n    \"\"\"Check if there exists a name in the list that has a length equal to a given length.\"\"\"\n    return any(len(name) == target_length for name in names)\n\ndef g(target_length=5):\n    return ['Liam', 'Mia', 'Benjamin', 'James', 'Charlotte']\n\nassert f(g())\n",
        "idx_generation": 80,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is diagonally dominant\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    if rows != cols:\n        return False\n\n    for i in range(rows):\n        diag_sum = abs(matrix[i][i])\n        row_sum = sum(abs(matrix[i][j]) for j in range(cols) if j != i)\n        if diag_sum <= row_sum:\n            return False\n\n    return True\n\ndef g():\n    return [[4, 1, 1],\n            [1, 5, 1],\n            [1, 1, 6]]\n\nassert f(g())\n",
        "idx_generation": 265,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(x: List[int], t=2183536, a=36, e=8450, s=1) -> bool:\n    \"\"\"Check if the sum of sublist values matches the target value and if all non-zero values are unique\"\"\"\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\n\ndef g(t=2183536, a=36, e=8450, s=1):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\n\nassert f(g())\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given 2D matrix is a magic square, where the sum of each row, column, and diagonal is the same.\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) != target_sum:\n            return False\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum or sum(matrix[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n    return True\ndef g():\n    return [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\nassert f(g())\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is prime\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g():\n    return 13\nassert f(g())\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=3, length=15) -> bool:\n    \"\"\"Check if a string contains a certain number of copies of a given substring and is of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring='abc', count=3, length=15):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * '!'\nassert f(g())\n",
        "idx_generation": 39,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for i in range(n):\n        col_sum = sum(matrix[j][i] for j in range(n))\n        if col_sum != target_sum:\n            return False\n    \n    # Check diagonals\n    diag_sum1 = sum(matrix[i][i] for i in range(n))\n    diag_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    if diag_sum1 != diag_sum2 or diag_sum1 != target_sum:\n        return False\n    \n    return True\n\ndef g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 60,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], n=3) -> bool:\n    \"\"\"Check if there exists n words in the list that have the same length\"\"\"\n    length_counts = {}\n    for word in words:\n        length = len(word)\n        if length in length_counts:\n            length_counts[length] += 1\n            if length_counts[length] == n:\n                return True\n        else:\n            length_counts[length] = 1\n    return False\n\ndef g(n=3):\n    return ['apple', 'banana', 'pear', 'kiwi', 'grape', 'melon', 'orange']\n\nassert f(g())\n",
        "idx_generation": 38,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5, m=2) -> bool:\n    \"\"\"Check if the length of s is divisible by the sum of n and m\"\"\"\n    return len(s) % (n + m) == 0\ndef g(n=5, m=2):\n    return \"a\" * (n + m)\nassert f(g())\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state=[3, 3, 2, 2, 3, 8]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def suboptimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(state[i], 0, -1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n    while True:\n        suboptimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g())\n",
        "idx_generation": 220,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if the given number is divisible by any prime number in the list and not divisible by all the other primes\"\"\"\n    divisible = False\n    for prime in primes:\n        if n % prime == 0:\n            divisible = True\n        else:\n            if all(n % other_prime != 0 for other_prime in primes if other_prime != prime):\n                return False\n    return divisible\n\ndef g(primes=[2, 3, 5, 7, 11, 13]):\n    n = max(primes) * 4\n    return n\n\nassert f(g())\n",
        "idx_generation": 141,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"Check if the given number n is present in the list nums.\"\"\"\n    return n in nums\n\ndef g():\n    return 5, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(*g())\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value.\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 57,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix\"\"\"\n    return all((matrix[i][j] == matrix[j][i]) for i in range(len(matrix)) for j in range(len(matrix[i])))\n\ndef g() -> List[List[int]]:\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 125,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subsequence of numbers in the given list whose sum is equal to the target number.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]\n\ndef g():\n    return [2, 4, 6, 8, 10, 12]\n\nassert f(g())\n",
        "idx_generation": 419,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a square matrix, where the number of rows is equal to the number of columns.\"\"\"\n    n = len(matrix)\n    for row in matrix:\n        if len(row) != n:\n            return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 171,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Check if the given number is a common multiple of both a and b\"\"\"\n    return n % a == 0 and n % b == 0\n\ndef g(a=2, b=3):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    magic_sum = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        column_sum = sum(matrix[i][j] for i in range(n))\n        if column_sum != magic_sum:\n            return False\n\n    # Check diagonals\n    diagonal_sum = sum(matrix[i][i] for i in range(n))\n    if diagonal_sum != magic_sum:\n        return False\n\n    reverse_diagonal_sum = sum(matrix[i][n-i-1] for i in range(n))\n    if reverse_diagonal_sum != magic_sum:\n        return False\n\n    return True\n\ndef g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 187,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if the given string is an anagram of the target string.\"\"\"\n    return sorted(s) == sorted(target)\n\ndef g(target='hello'):\n    return 'leloh'\n\nassert f(g())\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int = 5) -> bool:\n    \"\"\"Check if the string s contains at least n distinct vowels\"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n            if count >= n:\n                return True\n    return False\n\ndef g(n=5):\n    return \"Hello, how are you today?\"\n\nassert f(g())\n",
        "idx_generation": 60,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if n is a perfect power of k (k^n).\"\"\"\n    return (n ** (1 / k)) % 1 == 0\ndef g(k=3):\n    n = k ** 3\n    return n\nassert f(g())\n",
        "idx_generation": 8,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, big_str='python', index=2) -> bool:\n    \"\"\"Find a string whose *first* index in big_str is index\"\"\"\n    return big_str.index(s) == index\ndef g(big_str='python', index=2):\n    return big_str[index:]\nassert f(g())\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, coeffs=[2.5, 1.3, -0.5], tolerance=1e-06) -> bool:\n    \"\"\"Find the root of a quadratic equation given the coefficients (a, b, c), where coeffs = [a, b, c].\n    The function returns True if the calculated root is within the provided tolerance, False otherwise.\n    \"\"\"\n    (a, b, c) = coeffs\n    root = (-b + math.sqrt(b**2 - 4*a*c))/(2*a)\n    return abs(a * root ** 2 + b * root + c) < tolerance\n\ndef g(coeffs=[2.5, 1.3, -0.5]):\n    (a, b, c) = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans\n\nassert f(g())\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"Check if the given number is a prime number\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g() -> int:\n    return 17\n\nassert f(g())\n",
        "idx_generation": 391,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Check if there exists a subarray of length n in the list for which the sum of its elements is equal to 0.\"\"\"\n    for i in range(len(arr)-n+1):\n        if sum(arr[i:i+n]) == 0:\n            return True\n    return False\n\ndef g(n=5):\n    return [i for i in range(-n, n+1)]\n\nassert f(g())\n",
        "idx_generation": 31,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=\"abc\") -> bool:\n    \"\"\"Check if the given string contains a subsequence that matches the target string.\"\"\"\n    i = 0\n    for char in s:\n        if char == target[i]:\n            i += 1\n            if i == len(target):\n                return True\n    return False\n\ndef g(target=\"abc\"):\n    return \"axbycz\"\n\nassert f(g())\n",
        "idx_generation": 64,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=3) -> bool:\n    \"\"\"Check if the given string can be split into n equal parts.\"\"\"\n    if len(string) % n != 0:\n        return False\n    part_length = len(string) // n\n    parts = [string[i:i+part_length] for i in range(0, len(string), part_length)]\n    return len(set(parts)) == 1\ndef g(n=3):\n    return \"abc\" * n\nassert f(g())\n",
        "idx_generation": 205,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, numbers: List[int] = [1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the given number is the product of any two numbers in the list\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] * numbers[j] == n:\n                return True\n    return False\n\ndef g(numbers: List[int] = [1, 2, 3, 4, 5]):\n    return numbers[0] * numbers[1]\n\nassert f(g())\n",
        "idx_generation": 306,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=100, target_length=5) -> bool:\n    \"\"\"Check if a list of integers has a length equal to the target length\n    and if the sum of the integers is equal to the target sum.\"\"\"\n    return len(nums) == target_length and sum(nums) == target_sum\n\ndef g(target_sum=100, target_length=5):\n    return [40, 30, 10, 10, 10]\n\nassert f(g())\n",
        "idx_generation": 192,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list contains all prime numbers in ascending order.\"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return arr == primes\ndef g():\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nassert f(g())\n",
        "idx_generation": 37,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target_char='e') -> bool:\n    \"\"\"Check if the target character is the most common character in the string.\"\"\"\n    return string.count(target_char) == max(string.count(char) for char in string)\ndef g(target_char='e'):\n    return 'elephant'\nassert f(g())\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(num_list: List[int], target_sum=20) -> bool:\n    \"\"\"Find a subset of the given list that adds up to the target_sum.\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(num_list, target_sum)\ndef g(target_sum=20):\n    from random import randint\n    num_list = [randint(1, 10) for _ in range(10)]\n    return num_list\nassert f(g())\n",
        "idx_generation": 15,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"Find and return the minimum element in each column of the given matrix.\"\"\"\n    min_elements = []\n    for col in range(len(matrix[0])):\n        column_elements = [matrix[row][col] for row in range(len(matrix))]\n        min_elements.append(min(column_elements))\n    return min_elements\n\ndef g():\n    return [[4, 2, 7], [1, 5, 3], [8, 6, 9]]\n\nassert f(g()) == [1, 2, 3]\n",
        "idx_generation": 271,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find the smallest positive integer k such that k * (k+1) * (k+2) is divisible by n\"\"\"\n    k = 1\n    while True:\n        if (k * (k+1) * (k+2)) % n == 0:\n            return True\n        k += 1\ndef g():\n    return 1\nassert f(g())\n",
        "idx_generation": 3,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if any word in the list starts with the given prefix\"\"\"\n    for word in words:\n        if word.startswith(prefix):\n            return True\n    return False\ndef g(prefix='pre'):\n    return ['prefix', 'word', 'list', 'presto']\nassert f(g())\n",
        "idx_generation": 14,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    return len(matrix) == len(matrix[0])\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y=42, z=0) -> bool:\n    \"\"\"Check if the sum of three numbers is equal to 42\"\"\"\n    return x + y + z == 42\ndef g(y=42, z=0):\n    return 42 - y - z\nassert f(g())\n",
        "idx_generation": 89,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\n\ndef f(strs: List[str]) -> bool:\n    \"\"\"Check if there exists a string in the list that is a permutation of the concatenation of all other strings\"\"\"\n    for s in strs:\n        others = [x for x in strs if x != s]\n        permutations = list(itertools.permutations(others))\n        merged = ''.join(s for s in others)\n        if merged in [''.join(p) for p in permutations]:\n            return True\n    return False\n\ndef g():\n    strs = ['abc', 'def', 'ghi', 'jkl']\n    return strs\n\nassert f(g())\n",
        "idx_generation": 409,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if there exists a subset of size k in the range from 1 to n such that the sum of its elements is divisible by k\"\"\"\n    nums = list(range(1, n+1))\n    subsets = []\n    for i in range(1, n+1):\n        temp = [[]]\n        for j in range(i, n+1):\n            temp += [x + [j] for x in temp]\n        subsets += temp\n\n    for subset in subsets:\n        if len(subset) == k and sum(subset) % k == 0:\n            return True\n    return False\n\ndef g(k=3):\n    return 10\n\nassert f(g())\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], row: int = 0, col: int = 0) -> bool:\n    \"\"\"Check if the given element at the specified row and column is equal to its index\"\"\"\n    return matrix[row][col] == row and matrix[row][col] == col\ndef g(row: int = 0, col: int = 0):\n    return [[i for i in range(3)] for j in range(3)]\nassert f(g())\n",
        "idx_generation": 281,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(res: int, n=100) -> bool:\n    \"\"\"Find the result of applying the following operation to the number n, until it becomes zero: if n is even, divide it by 2, otherwise subtract 3.\"\"\"\n    while n > 0:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n - 3\n    return res == n\n\ndef g(n=100):\n    while n > 0:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n - 3\n    return n\n\nassert f(g())\n\n",
        "idx_generation": 30,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4]) -> bool:\n    \"\"\"Find if the list contains a prime number that is divisible by n\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    primes = [num for num in lst if is_prime(num)]\n    return any(prime % n == 0 for prime in primes)\ndef g(lst=[1, 2, 3, 4]):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    primes = [num for num in lst if is_prime(num)]\n    return primes\nassert f(3, g())\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], n=4, s=30) -> bool:\n    \"\"\"Find if there exists a subset of n elements in the list that sum up to s\"\"\"\n    def subset_sum(nums, target, n):\n        if target == 0:\n            return True\n        if n == 0:\n            return False\n        if nums[n-1] > target:\n            return subset_sum(nums, target, n-1)\n        return subset_sum(nums, target, n-1) or subset_sum(nums, target-nums[n-1], n-1)\n\n    return subset_sum(x, s, n)\n\ndef g(n=4, s=30):\n    x = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\n    return x\n\nassert f(g())\n",
        "idx_generation": 292,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n: int = 5) -> List[int]:\n    \"\"\"Return a list of the first n numbers from the given list that are divisible by 3.\"\"\"\n    return [num for num in nums if num % 3 == 0][:n]\n\ndef g(n: int = 5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [3, 6, 9]\n",
        "idx_generation": 433,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, target=50) -> bool:\n    \"\"\"Check if there is a number in the range from 1 to x (inclusive) that is divisible by the target\"\"\"\n    for i in range(1, x+1):\n        if i % target == 0:\n            return True\n    return False\n\ndef g(target=50):\n    return target\n\nassert f(g())\n",
        "idx_generation": 101,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='nivosypetextyzavalag', reverse=False) -> bool:\n    \"\"\"Either reverse a string or don't based on the reverse flag\"\"\"\n    return (s.lower() == target.lower()) == reverse\ndef g(target='nivosypetextyzavalag', reverse=False):\n    return target[::-1] if reverse else target + 'x'\nassert f(g())\n",
        "idx_generation": 44,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nimport re\nfrom typing import List\n\ndef f(expressions: List[str], allowed_operators=['+', '-', '*', '/']) -> bool:\n    \"\"\"Check if all of the expressions in the list are valid mathematical expressions.\n    Each expression should only contain digits and allowed_operators, and should have a correct syntax.\"\"\"\n    pattern = r'^[\\d\\s' + re.escape(''.join(allowed_operators)) + ']+$'\n    for expression in expressions:\n        if not re.match(pattern, expression) and not re.match(r'^[\\d\\s]+$', expression):\n            return False\n    return True\n\ndef g(allowed_operators=['+', '-', '*', '/']):\n    return ['2 + 3', '4 * 6 - 2', '8 / 2 + 5', '2 * 3']\n\nassert f(g())\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> int:\n    \"\"\"Given a positive integer n, find the nth number in the Fibonacci sequence.\"\"\"\n    if n <= 0:\n        return -1\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n-2):\n            a, b = b, a + b\n        return b\n\ndef g() -> int:\n    return 6\n\nassert f(g()) == 5\n",
        "idx_generation": 384,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lb: List[bool], trips=[[0, 0, 1], [0, 1, 1], [0, 0, 1], [0, 1, 1]]) -> bool:\n    \"\"\"Given a list of lists of triples of integers, return True for each list with a total of at least 2 and\n    False for each other list.\"\"\"\n    return len(lb) == len(trips) and all((b is True if sum(s) >= 2 else b is False for (b, s) in zip(lb, trips)))\n\ndef g(trips=[[0, 0, 1], [0, 1, 1], [0, 0, 1], [0, 1, 1]]):\n    return [sum(s) >= 2 for s in trips]\n\nassert f(g())\n",
        "idx_generation": 325,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, vowels='aeiou') -> bool:\n    \"\"\"Check if a string contains all the vowels in order.\"\"\"\n    vowel_index = 0\n    for char in s:\n        if char.lower() == vowels[vowel_index]:\n            vowel_index += 1\n            if vowel_index == len(vowels):\n                return True\n    return False\ndef g(vowels='aeiou'):\n    return ''.join(vowels)\nassert f(g())\n\n",
        "idx_generation": 109,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Find a pair of numbers in the array that sums up to the target_sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 11,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, perm='abcdefghijklmnopqrstuvwxyz', target='hello world') -> bool:\n    \"\"\"Rearrange the characters in the string to match the target string.\"\"\"\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm='abcdefghijklmnopqrstuvwxyz', target='hello world'):\n    return ''.join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c for c in target))\nassert f(g())\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=4) -> bool:\n    \"\"\"Find n such that the product of the first n positive integers is divisible by m\"\"\"\n    prod = 1\n    for i in range(1, n+1):\n        prod *= i\n    return prod % m == 0\ndef g(m=4):\n    n = 1\n    while True:\n        prod = 1\n        for i in range(1, n+1):\n            prod *= i\n        if prod % m == 0:\n            return n\n        n += 1\nassert f(g())\n\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, digits=2) -> bool:\n    \"\"\"Find a number such that the sum of its squared digits is equal to the number itself.\"\"\"\n    return sum([int(digit)**2 for digit in str(n)]) == n\ndef g(digits=2):\n    n = 0\n    while True:\n        if sum([int(digit)**2 for digit in str(n)]) == n:\n            return n\n        n += 1\nassert f(g())\n",
        "idx_generation": 36,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"Check if the given list of integers contains n consecutive numbers.\"\"\"\n    nums = sorted(nums)\n    for i in range(len(nums)-1):\n        if nums[i+1] - nums[i] != 1:\n            return False\n    return True\n\ndef g():\n    return (4, [1, 2, 3, 4, 5, 6])\n\nassert f(*g())\n",
        "idx_generation": 20,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, t=120, upper=18) -> bool:\n    \"\"\"Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper\ndef g(t=120, upper=18):\n    bound = t + 8\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\nassert f(g())\n",
        "idx_generation": 144,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(numbers: List[int], target: int = 7) -> bool:\n    \"\"\"Check if the target number is divisible by the sum of any two numbers in the list of numbers.\"\"\"\n    sums = [a + b for i, a in enumerate(numbers) for b in numbers[i+1:]]\n    return any(target % s == 0 for s in sums)\n\ndef g(target: int = 7):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return random.sample(numbers, len(numbers))\n\nassert f(g()) == True\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if the given character char is present in the string s.\"\"\"\n    return char in s\ndef g(char='a'):\n    return char * 5\nassert f(g())\n",
        "idx_generation": 99,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(dt: datetime) -> bool:\n    \"\"\"Check if the given date is a weekend.\"\"\"\n    return dt.weekday() >= 5\n\ndef g():\n    return datetime(2021, 6, 19)\n\nassert f(g())\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a symmetric matrix, where the values are the same when mirrored along the main diagonal.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], k=3) -> bool:\n    \"\"\"Find a submatrix of size k x k with the highest sum of elements.\"\"\"\n    assert len(matrix) >= k, 'Matrix is smaller than k'\n    assert all(len(row) >= k for row in matrix), 'Row length of matrix is smaller than k'\n    submatrix_sums = []\n    for i in range(len(matrix) - k + 1):\n        for j in range(len(matrix[0]) - k + 1):\n            submatrix_sum = sum(sum(matrix[i + x][j + y] for y in range(k)) for x in range(k))\n            submatrix_sums.append(submatrix_sum)\n    max_sum = max(submatrix_sums)\n    return max_sum > 0\ndef g(k=3):\n    matrix = [[1, 2, 3, 4, 5],\n              [6, 7, 8, 9, 10],\n              [11, 12, 13, 14, 15],\n              [16, 17, 18, 19, 20],\n              [21, 22, 23, 24, 25]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 72,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exists a path in the matrix that adds up to the target.\"\"\"\n    def dfs(row, col, current_sum, visited):\n        if row < 0 or row >= len(matrix) or col < 0 or col >= len(matrix[0]) or (row, col) in visited:\n            return False\n        visited.add((row, col))\n        current_sum += matrix[row][col]\n        if current_sum == target:\n            return True\n        if current_sum > target:\n            return False\n        return dfs(row + 1, col, current_sum, visited) or dfs(row, col + 1, current_sum, visited) or dfs(row - 1, col, current_sum, visited) or dfs(row, col - 1, current_sum, visited)\n    \n    return dfs(0, 0, 0, set())\ndef g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_char='a') -> bool:\n    \"\"\"Given a string, check if the target_char appears as the last character of any word in the string.\"\"\"\n    words = s.split()\n    for word in words:\n        if word[-1] == target_char:\n            return True\n    return False\n\ndef g(target_char='a'):\n    return \"apple banana cherry date\"\n\nassert f(g())\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the given string contains all the characters in the target string.\nSample Input:\n`'ntpyoh'`\nSample Output:\n`True`\"\"\"\n    target_chars = set(target)\n    for char in s:\n        target_chars.discard(char)\n        if not target_chars:\n            return True\n    return False\n\ndef g(target='python'):\n    return ''.join(sorted(target))\n\nassert f(g())\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(substring: str, string='abcdefghijkabcdefghijk', count=2) -> bool:\n    \"\"\"Find a substring with a certain count in a given string\"\"\"\n    return string.count(substring) == count\ndef g(string='abcdefghijkabcdefghijk', count=2):\n    substrings = []\n    for i in range(len(string)):\n        for j in range(i + 1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count and substring not in substrings:\n                substrings.append(substring)\n    return substrings[count-1]\nassert f(g())\n",
        "idx_generation": 105,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nimport itertools\n\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"Check if there exists a sublist in the array whose sum is a multiple of k\"\"\"\n    return any((sum(sublist) % k == 0 for sublist in itertools.combinations(arr, 3)))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), 3)\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"Check if the given string is equal to the given substring repeated twice.\"\"\"\n    return string == substr*2\ndef g(substr='abc'):\n    return substr*2\nassert f(g())\n",
        "idx_generation": 429,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=-345, b=600) -> bool:\n    \"\"\"Check if the sum of a and x is equal to b\"\"\"\n    return a + x == b\n\ndef g(a=-345, b=600):\n    return b - a\n\nassert f(g())\n",
        "idx_generation": 107,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=6, b=7, c=8) -> bool:\n    \"\"\"Check if the given number n can be expressed as a product of a, b, and c\"\"\"\n    if n < min(a, b, c):\n        return False\n    if n == a or n == b or n == c:\n        return True\n    if n == a * b or n == a * c or n == b * c:\n        return True\n    if n < a * b * c:\n        return False\n    return f(n//a) or f(n//b) or f(n//c)\n\ndef g(a=6, b=7, c=8):\n    return a * b * c\n\nassert f(g())\n",
        "idx_generation": 110,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.array) -> bool:\n    \"\"\"Check if a 2D numpy array is symmetric along its diagonal.\"\"\"\n    return np.array_equal(arr, arr.T)\n\ndef g():\n    return np.array([[1, 2, 3], [2, 4, 5], [3, 5, 6]])\n\nassert f(g())\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, names=['Alice', 'Bob', 'Charlie', 'David'], length=4) -> bool:\n    \"\"\"Check if there is a name in the list that has a length greater than a given number.\"\"\"\n    return any((len(name) > length for name in names)) and s == \"Found\"\ndef g(names=['Alice', 'Bob', 'Charlie', 'David'], length=4):\n    return \"Found\"\nassert f(g())\n",
        "idx_generation": 93,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format: str = '%Y-%m-%d', target: str = '2022-12-31') -> bool:\n    \"\"\"Check if a given date is before the target date.\"\"\"\n    date_obj = datetime.strptime(date, format)\n    target_obj = datetime.strptime(target, format)\n    return date_obj < target_obj\n\ndef g(format: str = '%Y-%m-%d', target: str = '2022-12-31'):\n    return '2022-10-01'\n\nassert f(g())\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a perfect square.\"\"\"\n    return int(n ** 0.5) ** 2 == n\ndef g():\n    return 144\nassert f(g())\n",
        "idx_generation": 37,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=4, c=6) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c odd integers)\"\"\"\n    return n + a == sum([b * (2*i + 1) for i in range(c)])\ndef g(a=2, b=4, c=6):\n    return -a + sum([b * (2*i + 1) for i in range(c)])\nassert f(g())\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=10, length=30) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring='abc', count=10, length=30):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g())\n",
        "idx_generation": 295,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python', max_len=6) -> bool:\n    \"\"\"Check if the given string is a valid abbreviation of a word. An abbreviation is formed by keeping the first character and replacing the middle characters with an integer indicating the number of characters omitted, followed by the last character.\"\"\"\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\ndef g(word='python', max_len=6):\n    if len(word) <= max_len:\n        return word\n    return f'{word[0]}{len(word) - 2}{word[-1]}'\nassert f(g())\n",
        "idx_generation": 354,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring=\"python\") -> bool:\n    \"\"\"Check if the given string contains the substring in a specific pattern.\"\"\"\n    n = len(string)\n    m = len(substring)\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if string[i] == substring[j]:\n            j += 1\n        i += 1\n    return j == m\ndef g(substring=\"python\"):\n    return substring\nassert f(g())\n",
        "idx_generation": 9,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    \"\"\"Check if the list contains any duplicate elements.\"\"\"\n    return len(li) != len(set(li))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]\n\nassert f(g())\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, x=5, y=100) -> bool:\n    \"\"\"Find the smallest n such that the sum of the first n odd numbers exceeds y.\"\"\"\n    sum_odd = 0\n    for i in range(n):\n        sum_odd += 2*i + 1\n        if sum_odd > y:\n            return True\n    return False\n\ndef g(x=5, y=100):\n    n = 1\n    sum_odd = 1\n    while sum_odd <= y:\n        n += 1\n        sum_odd += 2*n - 1\n    return n\n\nassert f(g())\n",
        "idx_generation": 93,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a power of two\"\"\"\n    return n > 0 and (n & (n - 1)) == 0\ndef g():\n    return 16\nassert f(g())\n",
        "idx_generation": 90,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], x=10, y=100, length=7) -> bool:\n    \"\"\"Find a sequence of numbers that are all divisible by x and less than y, with a length of length\"\"\"\n    return all((num % x == 0 for num in nums)) and len(nums) == length and all((num < y for num in nums))\n    \ndef g(x=10, y=100, length=7):\n    return [i * x for i in range(1, length + 1)]\n\nassert f(g())\n",
        "idx_generation": 105,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Dict\n\ndef f(records: List[Dict[str, int]], target=100) -> bool:\n    \"\"\"Check if there exists a record in the list where the value associated with the key 'score' is greater than or equal to the target.\"\"\"\n    for record in records:\n        if 'score' in record and record['score'] >= target:\n            return True\n    return False\n\ndef g(records=[{'name': 'Alice', 'score': 90}, {'name': 'Bob', 'score': 80}, {'name': 'Charlie', 'score': 110}]):\n    return records\n\nassert f(g())\n\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, lst: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Check if the given number n is present in the given list of lists lst\"\"\"\n    for sublist in lst:\n        if n in sublist:\n            return True\n    return False\n\ndef g(lst: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return lst[0][2]\n\nassert f(g())\n",
        "idx_generation": 10,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target number.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "idx_generation": 8,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that sums up to the target value.\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for r in range(len(numbers) + 1) for c in combinations(numbers, r))\ndef g(target=100):\n    return list(range(1, target // 2 + 1))\nassert f(g())\n",
        "idx_generation": 65,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, r: int = 2) -> bool:\n    \"\"\"Check if the given number n is a power of r.\"\"\"\n    while n % r == 0:\n        n /= r\n    return n == 1\n\ndef g(r: int = 2):\n    return 16\n\nassert f(g())\n\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nimport random\nfrom typing import*\n\ndef f(points: List[Tuple[float, float]], origin=(0, 0), radius=10) -> bool:\n    \"\"\"Check if at least one point in the given list is located within the specified radius from the origin.\n    Return True if there is at least one point within the radius, False otherwise.\"\"\"\n    return any(math.sqrt((x - origin[0])**2 + (y - origin[1])**2) <= radius for x, y in points)\n\ndef g(origin=(0, 0), num_points=5):\n    x_coords = [random.uniform(-15, 15) for _ in range(num_points)]\n    y_coords = [random.uniform(-15, 15) for _ in range(num_points)]\n    points = list(zip(x_coords, y_coords))\n    return points\n\nassert f(g()) == True\n",
        "idx_generation": 148,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if a given string is a palindrome and contains at least one vowel.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    string = string.lower()\n    return string == string[::-1] and any((char in vowels for char in string))\ndef g():\n    return \"Madam\"\nassert f(g())\n",
        "idx_generation": 17,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a diagonal matrix.\"\"\"\n    n = len(matrix)\n    \n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    \n    return True\n\ndef g():\n    return [[4, 0, 0], [0, 3, 0], [0, 0, 1]]\n\nassert f(g())\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that add up to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    target = 8\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is an identity matrix.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                if arr[i][j] != 1:\n                    return False\n            else:\n                if arr[i][j] != 0:\n                    return False\n    return True\n\ndef g():\n    return np.eye(3).tolist()\n\nassert f(g())\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='abc') -> bool:\n    \"\"\"Given a string and a target substring, find if the target substring exists in the string in reverse order.\n    Return True if the target substring exists in reverse order, False otherwise.\"\"\"\n    return target[::-1] in s\n\ndef g(target='abc'):\n    return 'xyz' + target[::-1] + '123'\n\nassert f(g()) == True\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target='hello') -> bool:\n    \"\"\"Check if the given string ends with the target string.\"\"\"\n    return string.endswith(target)\n\ndef g(target='hello'):\n    return 'world, hello'\n\nassert f(g())\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g() -> List[List[int]]:\n    \"\"\"Generate a symmetric matrix\"\"\"\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the sum of all numbers in the list lst is divisible by n\"\"\"\n    return sum(lst) % n == 0\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst\n\nassert f(5, g())\n",
        "idx_generation": 100,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is present in the list of numbers.\"\"\"\n    return n in nums\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return 7\nassert f(g())\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(graph: Dict[str, List[str]], start='A', end='D', path_length=10) -> bool:\n    \"\"\"Find the shortest path from the start node to the end node in the given graph, with a path length less than or equal to path_length.\n    The graph is represented as a dictionary where the keys are nodes and the values are lists of adjacent nodes.\"\"\"\n    queue = [(start, [start])]\n    while queue:\n        (node, path) = queue.pop(0)\n        if node == end and len(path) <= path_length:\n            return True\n        neighbors = graph.get(node, [])\n        for neighbor in neighbors:\n            if neighbor not in path:\n                queue.append((neighbor, path + [neighbor]))\n    return False\n\ndef g(start='A', end='D', path_length=10):\n    return {\n        'A': ['B', 'C'],\n        'B': ['A', 'C', 'D'],\n        'C': ['A', 'B', 'D'],\n        'D': ['B', 'C']\n    }\n\nassert f(g())\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='python', b='programming') -> bool:\n    \"\"\"Check if string s contains both strings a and b\"\"\"\n    return a in s and b in s\ndef g(a='python', b='programming'):\n    s = \"I love python programming\"\n    return s\nassert f(g())\n",
        "idx_generation": 19,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target_length=6, n_values=3) -> bool:\n    \"\"\"Find if there exists n_values consecutive numbers in the list with a length of target_length\"\"\"\n    assert all([v > 0 for v in x])\n    start = 0\n    count = 0\n    for i in range(len(x)):\n        if x[i] - x[start] == target_length:\n            count += 1\n            if count == n_values:\n                return True\n            start += 1\n        elif x[i] - x[start] > target_length:\n            start += 1\n    return False\n\ndef g(target_length=6, n_values=3):\n    return [1, 2, 4, 5, 7, 8, 10, 11, 13, 14, 16, 17, 19, 20]\n\nassert f(g())\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, pairs=[[459604, 0], [364611, 68505], [562652, 512251], [668655, 471975], [464486, 626280], [138684, 177065], [163296, 68630], [188271, 104677], [367839, 338137], [73022, 362103], [464143, 484458], [214935, 189299], [643725, 283515], [908210, 541732], [710201, 234839], [854230, 34479], [3288, 675724], [846637, 396244], [0, 2526576]]) -> bool:\n    \"\"\"Given a sequence of integer pairs, p_i, m_i, where \\\\sum p_i-m_i = 0, find the maximum value, over t, of\np_{t+1} + \\\\sum_{i=1}^t p_i - m_i\"\"\"\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\n\ndef g(pairs=[[459604, 0], [364611, 68505], [562652, 512251], [668655, 471975], [464486, 626280], [138684, 177065], [163296, 68630], [188271, 104677], [367839, 338137], [73022, 362103], [464143, 484458], [214935, 189299], [643725, 283515], [908210, 541732], [710201, 234839], [854230, 34479], [3288, 675724], [846637, 396244], [0, 2526576]]):\n    tot = 0\n    n = 0\n    for (p, m) in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\n\nassert f(g())\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target_name='Alice', index=2) -> bool:\n    \"\"\"Check if the target_name is located at the given index of the names list\"\"\"\n    if index < 0 or index >= len(names):\n        return False\n    return names[index] == target_name\n\ndef g(target_name='Alice', index=2):\n    names = ['John', 'Bob', 'Alice', 'Sarah']\n    return names\n\nassert f(g())\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='abc', t='xyz') -> bool:\n    \"\"\"Check if the sum of ASCII values of characters in s is equal to the sum of ASCII values of characters in t.\"\"\"\n    sum_s = sum(ord(c) for c in s)\n    sum_t = sum(ord(c) for c in t)\n    return sum_s == sum_t\n\ndef g(s='abc', t='xyz'):\n    return s, t\n\nassert f(*g())\n",
        "idx_generation": 56,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if a list of numbers is sorted in non-decreasing order.\"\"\"\n    return numbers == sorted(numbers)\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=1111111111111111, b=9999999999999999) -> bool:\n    \"\"\"Check if the given number is a palindrome and falls within a specific range.\"\"\"\n    return str(x) == str(x)[::-1] and a <= x <= b\ndef g(a=1111111111111111, b=9999999999999999):\n    return (a + b) // 2\nassert f(g())\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict, Any\n\ndef f(data: Dict[str, Any], target_key: str) -> bool:\n    \"\"\"Check if the target key is present in the dictionary and its corresponding value is a string.\"\"\"\n    return target_key in data and isinstance(data[target_key], str)\n\ndef g(target_key='name'):\n    return ({\"name\": \"John Doe\", \"age\": 25, \"city\": \"New York\"}, target_key)\n\nassert f(*g())\n",
        "idx_generation": 127,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4]) -> bool:\n    \"\"\"Check if a given number is present in the list.\n    Return True if it is present, False otherwise.\"\"\"\n    return n in lst\n\ndef g(lst=[1, 2, 3, 4]):\n    return lst[0]\n\nassert f(g()) == True\n",
        "idx_generation": 126,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose sum is equal to the target value.\"\"\"\n    n = len(seq)\n    for i in range(1, 2**n):\n        subset = [seq[j] for j in range(n) if (i & (1 << j))]\n        if sum(subset) == target:\n            return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == False\n",
        "idx_generation": 355,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t: str, n: int = 2) -> bool:\n    \"\"\"Check if the given string s is a rotation of string t, after rotating it n times.\"\"\"\n    if len(s) != len(t):\n        return False\n    return t in s + s * n\n\ndef g(n: int = 2):\n    return \"abcd\", \"cdab\"\n\nassert f(*g())\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string can be formed by repeating a substring n times.\"\"\"\n    return s == s[:len(s)//n] * n\ndef g(n=3):\n    return 'abc' * n\nassert f(g())\n",
        "idx_generation": 36,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], n=3) -> bool:\n    \"\"\"Check if there exists a subarray of length n in the list for which the sum of its elements is greater than or equal to 10.\"\"\"\n    for i in range(len(arr)-n+1):\n        if sum(arr[i:i+n]) >= 10:\n            return True\n    return False\n\ndef g(n=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 185,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target_length=5) -> bool:\n    \"\"\"Check if there exists a name in the list that has a length greater than or equal to the target length.\"\"\"\n    for name in names:\n        if len(name) >= target_length:\n            return True\n    return False\n\ndef g():\n    return ([\"John\", \"Sarah\", \"Mike\", \"Emily\", \"Jack\"], 5)\n\nassert f(*g())\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a lower triangular matrix. A lower triangular matrix is a square matrix where all elements above the main diagonal are zero.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(i + 1, len(matrix[0])):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [2, 3, 0], [4, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(x: List[int], t=2183536, a=36, e=8450, s=1) -> bool:\n    \"\"\"Check if the sum of sublist values matches the target value and if all non-zero values are unique\"\"\"\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\n\ndef g(t=2183536, a=36, e=8450, s=1):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\n\nassert f(g())\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given 2D matrix is a magic square, where the sum of each row, column, and diagonal is the same.\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) != target_sum:\n            return False\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum or sum(matrix[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 178,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Check if the given number is a power of both a and b\"\"\"\n    while n % a == 0:\n        n //= a\n    while n % b == 0:\n        n //= b\n    return n == 1\n\ndef g(a=2, b=3):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 107,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python', count=3) -> bool:\n    \"\"\"Find if the given string contains the target substring exactly 'count' number of times\"\"\"\n    return s.count(target) == count\ndef g(target='python', count=3):\n    return target * count\nassert f(g())\n",
        "idx_generation": 40,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square. A magic square is a square matrix in which the sums of each row, each column, and both main diagonals are the same.\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in range(n):\n        col_sum = 0\n        for row in range(n):\n            col_sum += matrix[row][col]\n        if col_sum != target_sum:\n            return False\n    \n    # Check main diagonal\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n    if diagonal_sum != target_sum:\n        return False\n    \n    # Check secondary diagonal\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][n-i-1]\n    if diagonal_sum != target_sum:\n        return False\n    \n    return True\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nassert f(g())\n",
        "idx_generation": 205,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='ABCDEFGHIJKLMNPQRSTUVWXYZ') -> bool:\n    \"\"\"Given an integer n, check if the length of the string s is divisible by n and if every character in s is a letter\"\"\"\n    return len(s) % n == 0 and all(c.isalpha() for c in s)\n\ndef g(s='ABCDEFGHIJKLMNPQRSTUVWXYZ'):\n    return 5\n\nassert f(g())\n",
        "idx_generation": 107,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a given string has a length of n and contains only unique characters.\"\"\"\n    return len(s) == n and len(set(s)) == n\n\ndef g(n=5):\n    return 'abcde'\n\nassert f(g())\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if the given number is divisible by any prime number in the list and divisible by at least one even number\"\"\"\n    for prime in primes:\n        if n % prime == 0:\n            return True\n    return n % 2 == 0\n\ndef g(primes=[2, 3, 5, 7, 11, 13]):\n    n = max(primes) * 3\n    return n\n\nassert f(g())\n",
        "idx_generation": 141,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is sorted in ascending order.\"\"\"\n    for i in range(len(numbers) - 1):\n        if numbers[i] > numbers[i + 1]:\n            return False\n    return True\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 358,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Find a submatrix in the given matrix where the sum of all elements equals the target value.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            for k in range(i, m):\n                for l in range(j, n):\n                    sub_matrix = [row[j:l+1] for row in matrix[i:k+1]]\n                    if sum([sum(row) for row in sub_matrix]) == target:\n                        return True\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n",
        "idx_generation": 68,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(colors: List[str], target_color='red') -> bool:\n    \"\"\"Check if the target_color is present in the colors list\"\"\"\n    return target_color in colors\n\ndef g(target_color='red'):\n    colors = ['red', 'blue', 'green', 'yellow']\n    return colors\n\nassert f(g())\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a subsequence of numbers in the given list whose sum is equal to the target number.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]\n\ndef g():\n    return [10, 20, 30, 40, 50, 60]\n\nassert f(g())\n",
        "idx_generation": 419,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix. A symmetric matrix is a square matrix that is equal to its transpose.\"\"\"\n    n = len(matrix)\n    \n    # Check if the matrix is square\n    if len(matrix) != len(matrix[0]):\n        return False\n    \n    # Check if the matrix is equal to its transpose\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    \n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 221,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\nassert f(g([[1, 2, 3], [2, 4, 5], [3, 5, 6]]))\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if the given character is present in the string at least 3 times in a row.\"\"\"\n    return any(s[i] == char and s[i:i+3] == char*3 for i in range(len(s)-2))\n\ndef g(char='a'):\n    return 'abcaaadef'\n\nassert f(g())\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, n=3) -> bool:\n    \"\"\"Check if the given string is a palindrome of length n\"\"\"\n    return x == x[::-1] and len(x) == n\n\ndef g(n=3):\n    return \"aba\"\n\nassert f(g())\n",
        "idx_generation": 95,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if n is a perfect square and m is a perfect cube.\"\"\"\n    return n ** 0.5 == int(n ** 0.5) and m ** (1 / 3) == int(m ** (1 / 3))\n\ndef g():\n    return (16, 27)\n\nassert f(*g())\n",
        "idx_generation": 10,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: float, coeffs=[2.5, 1.3, -0.5]) -> bool:\n    \"\"\"Determine if the given value is a root of the quadratic equation:  a x^2 + b x + c = 0, where coeffs = [a, b, c].\"\"\"\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\n\ndef g(coeffs=[2.5, 1.3, -0.5]):\n    (a, b, c) = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans\n\nassert f(g())\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a given number is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=10, b=20) -> bool:\n    \"\"\"Check if x is between the values of a and b (inclusive)\"\"\"\n    return a <= x <= b\ndef g(a=10, b=20):\n    return 15\n\nassert f(g())\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_substring='abc') -> bool:\n    \"\"\"Check if a given string contains the target substring.\"\"\"\n    return target_substring in s\ndef g(target_substring='abc'):\n    return \"xyzabc123\"\nassert f(g())\n",
        "idx_generation": 74,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target: str) -> bool:\n    \"\"\"Check if the target string can be formed by concatenating the words from the given list.\"\"\"\n    return target == \"\".join(words)\n\ndef g():\n    return ([\"Hello\", \"World\", \"!\"], \"HelloWorld!\")\n\nassert f(*g())\n",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> int:\n    \"\"\"Find the product of all the numbers in the given list\"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 120\n",
        "idx_generation": 369,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target sum.\"\"\"\n    seen = set()\n    for num in numbers:\n        complement = target_sum - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target_sum=10):\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\n\ndef f(lst: List[int], n: int = 5) -> bool:\n    \"\"\"Check if the given list contains all the numbers from 1 to n in random order.\"\"\"\n    return sorted(lst) == list(range(1, n+1))\n\ndef g(n: int = 5):\n    lst = random.sample(range(1, n+1), n)\n    return lst\nassert f(g())\n\n",
        "idx_generation": 38,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target_char='e') -> bool:\n    \"\"\"Given a string, check if the target_char appears as the first character of any word in the string.\"\"\"\n    words = string.split()\n    for word in words:\n        if word[0] == target_char:\n            return True\n    return False\ndef g(target_char='e'):\n    return \"elephant eats eggs every day\"\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Find if there exists two numbers in the given list that sum up to the target sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5, 6]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"Find and return the minimum element in each column of the given matrix.\"\"\"\n    min_elements = []\n    for col in range(len(matrix[0])):\n        column_values = [row[col] for row in matrix]\n        min_elements.append(min(column_values))\n    return min_elements\n\ndef g():\n    return [[4, 2, 7], [1, 5, 3], [8, 6, 9]]\n\nassert f(g()) == [1, 2, 3]\n\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find the smallest integer k such that the sum of the first k square numbers is divisible by n\"\"\"\n    square_sum = 0\n    k = 1\n    while True:\n        square_sum += k**2\n        if square_sum % n == 0:\n            return True\n        k += 1\ndef g():\n    return 2\nassert f(g())\n",
        "idx_generation": 5,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, vowels={'a', 'e', 'i', 'o', 'u'}) -> bool:\n    \"\"\"Check if a string contains all vowels\"\"\"\n    return all(v in s.lower() for v in vowels)\ndef g(vowels={'a', 'e', 'i', 'o', 'u'}):\n    return ''.join(vowels)\nassert f(g())\n",
        "idx_generation": 14,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a symmetric matrix, where the elements are symmetric along the main diagonal.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(delta: List[int], nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Find the missing triple of integers to make them all add up to 20 coordinatewise\"\"\"\n    return all((sum((vec[i] for vec in nums)) + delta[i] == 20 for i in range(3)))\ndef g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return [20 - sum((vec[i] for vec in nums)) for i in range(3)]\nassert f(g())\n",
        "idx_generation": 226,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sum=15) -> bool:\n    \"\"\"Check if there is a row in the matrix that has a sum greater than or equal to the given row_sum.\"\"\"\n    for row in matrix:\n        if sum(row) >= row_sum:\n            return True\n    return False\n\ndef g(row_sum=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\n\nassert f(g())\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(res: int, n: int = 100, limit: int = 10) -> bool:\n    \"\"\"Find the result of applying the following operation to the number n, until it becomes zero or reaches the limit: if n is even, divide it by 2, otherwise subtract 3.\"\"\"\n    while n > 0 and n != limit:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n - 3\n    return res == n\n\ndef g(n: int = 100, limit: int = 10):\n    while n > 0 and n != limit:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n - 3\n    return n\n\nassert f(g())\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Find if there exists a subarray of length n, such that the product of its elements is equal to 120\"\"\"\n    return any(arr[i:i+n] == [2, 3, 4, 5, 6] for i in range(len(arr)-n+1))\ndef g(n=5):\n    return [2, 3, 4, 5, 6] * n\nassert f(g())\n\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], n=3, s=15) -> bool:\n    \"\"\"Find if there exists a subset of n elements in the list whose product is equal to s\"\"\"\n    def subset_product(nums, target, n):\n        if target == 1:\n            return True\n        if n == 0:\n            return False\n        if nums[n-1] > target:\n            return subset_product(nums, target, n-1)\n        return subset_product(nums, target, n-1) or subset_product(nums, target//nums[n-1], n-1)\n\n    return subset_product(x, s, n)\n\ndef g(n=3, s=15):\n    x = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    return x\n\nassert f(g())\n",
        "idx_generation": 388,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[3, 6, 9]) -> bool:\n    \"\"\"Check if all elements in a list are divisible by a given number.\"\"\"\n    return all(e % n == 0 for e in lst)\ndef g(lst=[3, 6, 9]):\n    return 3\nassert f(g())\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array that sums up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    return [10, 5, 15, 7, 2]\n\nassert f(g())\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello', reverse=False) -> bool:\n    \"\"\"Either reverse a string or don't based on the reverse flag\"\"\"\n    return (s.lower() == target.lower()) == reverse\ndef g(target='hello', reverse=False):\n    return target[::-1] if reverse else target + 'x'\nassert f(g())\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nimport re\nfrom typing import List\n\ndef f(expressions: List[str], allowed_operators=['+', '-', '*', '/']) -> bool:\n    \"\"\"Check if all of the expressions in the list are valid mathematical expressions.\n    Each expression should only contain digits and allowed_operators, and should have a correct syntax.\"\"\"\n    pattern = r'^[\\d\\s' + re.escape(''.join(allowed_operators)) + ']+$'\n    for expression in expressions:\n        if not re.match(pattern, expression) and not re.match(r'^[\\d\\s]+$', expression):\n            return False\n    return True\n\ndef g(allowed_operators=['+', '-', '*', '/']):\n    return ['2 + 3', '4 * 6 - 2', '8 / 2 + 5', '2 * 3']\n\nassert f(g())\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if a matrix is an identity matrix, where all the values on the main diagonal are 1 and all other values are 0.\"\"\"\n    for i in range(n):\n        for j in range(n):\n            if i == j and matrix[i][j] != 1:\n                return False\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(n=3):\n    return [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n\nassert f(g())\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lb: List[bool], trips=[[0, 0, 1], [0, 1, 1], [0, 0, 1], [0, 1, 1]]) -> bool:\n    \"\"\"Given a list of lists of triples of integers, return True if there is at least one list with a total of exactly 3 and\n    False otherwise.\"\"\"\n    return any((b is True if sum(s) == 3 else b is False for (b, s) in zip(lb, trips)))\n\ndef g(trips=[[0, 0, 1], [0, 1, 1], [0, 0, 1], [0, 1, 1]]):\n    return [sum(s) == 3 for s in trips]\n\nassert f(g())\n",
        "idx_generation": 435,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if the target word can be formed using the letters from the list of words.\"\"\"\n    word_count = {}\n    for word in words:\n        for letter in word:\n            word_count[letter] = word_count.get(letter, 0) + 1\n    for letter in target:\n        if letter not in word_count or word_count[letter] == 0:\n            return False\n        word_count[letter] -= 1\n    return True\ndef g(target='python'):\n    return ['p', 'y', 't', 'h', 'o', 'n', 'p', 'y', 't', 'h', 'o', 'n']\nassert f(g())\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Find a pair of numbers in the array that sums up to the target_sum,\n    where the product of the pair should be a perfect square.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] + arr[j]) == target_sum and (arr[i] * arr[j]) % (arr[i] * arr[j]) == 0:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [2, 4, 6, 7, 8, 9, 11, 13, 15]\n\nassert f(g())\n",
        "idx_generation": 14,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='algorithm') -> bool:\n    \"\"\"Check if the given string contains all the characters in the target string.\nSample Input:\n`'gothmilar'`\nSample Output:\n`False`\"\"\"\n    target_chars = set(target)\n    for char in s:\n        target_chars.discard(char)\n        if not target_chars:\n            return True\n    return False\n\ndef g(target='algorithm'):\n    return ''.join(sorted(target, key=lambda x: ord(x), reverse=True))\n\nassert f(g())\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Determine if the number n can be expressed as the product of two prime numbers\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    for i in range(2, int(n**0.5) + 1):\n        if is_prime(i) and n % i == 0 and is_prime(n // i):\n            return True\n    return False\n\ndef g(m=10):\n    n = 4\n    while True:\n        if f(n):\n            return n\n        n += 1\n\nassert f(g())\n",
        "idx_generation": 143,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target_sum=10) -> bool:\n    \"\"\"Find a number such that the sum of its digits is equal to the target_sum.\"\"\"\n    return sum([int(digit) for digit in str(n)]) == target_sum\ndef g(target_sum=10):\n    n = 0\n    while True:\n        if sum([int(digit) for digit in str(n)]) == target_sum:\n            return n\n        n += 1\nassert f(g())\n",
        "idx_generation": 36,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if a given list of numbers contains any repeated elements.\"\"\"\n    return len(numbers) == len(set(numbers))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, t=100, upper=50) -> bool:\n    \"\"\"Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper\n\ndef g(t=100, upper=50):\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\n\nassert f(g())\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"Check if all words in a list contain a specific letter.\"\"\"\n    return all(letter in word for word in words)\n\ndef g(letter='a'):\n    return ['apple', 'banana', 'orange']\n\nassert f(g())\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport datetime\nfrom typing import List\n\ndef f(dates: List[datetime.date], target_date: datetime.date = datetime.date(2022, 1, 1)) -> bool:\n    \"\"\"Check if the target date appears in the list of dates.\"\"\"\n    return target_date in dates\n\ndef g(target_date: datetime.date = datetime.date(2022, 1, 1)):\n    dates = [\n        datetime.date(2021, 12, 31),\n        datetime.date(2022, 1, 1),\n        datetime.date(2022, 1, 2),\n        datetime.date(2022, 1, 3),\n        datetime.date(2022, 1, 4)\n    ]\n    return random.sample(dates, len(dates))\n\nassert f(g()) == True\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr1: List[int], arr2: List[int]) -> bool:\n    \"\"\"Check if the given two arrays are disjoint (i.e., they have no common elements).\"\"\"\n    return len(set(arr1) & set(arr2)) == 0\n\ndef g():\n    return [1, 2, 3, 4, 5], [6, 7, 8, 9, 10]\n\nassert f(*g())\n",
        "idx_generation": 285,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if all the elements in the list are divisible by 3.\"\"\"\n    for num in arr:\n        if num % 3 != 0:\n            return False\n    return True\n\ndef g(arr=[3, 6, 9, 12]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 108,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if there exists a path in the given matrix such that the sum of numbers along the path is equal to the target number.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    dp = [[False] * (target + 1) for _ in range(m + 1)]\n    dp[0][0] = True\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(target + 1):\n                if k >= matrix[i - 1][j - 1]:\n                    dp[i][k] = dp[i][k] or dp[i - 1][k - matrix[i - 1][j - 1]] or dp[i][k - matrix[i - 1][j - 1]]\n                else:\n                    dp[i][k] = dp[i][k] or dp[i - 1][k]\n\n    return dp[m][target]\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 392,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if the given matrix is a symmetric matrix.\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[i])))\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 220,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str = 'python') -> bool:\n    \"\"\"Check if the given string `s` contains all the letters of the target word `python` in any order.\"\"\"\n    target = set(target)\n    for char in s:\n        target.discard(char)\n        if not target:\n            return True\n    return False\n\ndef g():\n    return 'thnpyo'\n\nassert f(g()) == True\n\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='hello', count=2) -> bool:\n    \"\"\"Check if the given string contains a certain number of occurrences of a substring\"\"\"\n    return string.count(substring) == count\ndef g(substring='hello', count=2):\n    return substring * count + 'world'\nassert f(g())\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nimport itertools\n\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"Check if there exists a sublist in the array whose sum is a multiple of k\"\"\"\n    return any((sum(sublist) % k == 0 for sublist in itertools.combinations(arr, 2)))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), 3)\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub: str = 'abc') -> bool:\n    \"\"\"Check if the given string s contains the sub-string sub in a non-overlapping manner.\"\"\"\n    i = 0\n    while i < len(s):\n        if s[i:i+len(sub)] == sub:\n            i += len(sub)\n        else:\n            i += 1\n    return i == len(s)\n\ndef g(sub: str = 'abc'):\n    return 'xyzabcdxyzabcd'\n\nassert f(g())\n",
        "idx_generation": 433,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y=10, z=0) -> bool:\n    \"\"\"Check if the difference between two numbers is equal to 10\"\"\"\n    return abs(x - y) == 10\ndef g(y=10, z=0):\n    return y + 10\nassert f(g())\n",
        "idx_generation": 121,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric\"\"\"\n    matrix = np.array(matrix)\n    return (matrix == matrix.T).all()\n\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=987654321) -> bool:\n    \"\"\"Find the largest prime factor of a number.\"\"\"\n    if x == 1:\n        return False\n    for i in range(2, int(x**0.5) + 1):\n        if x % i == 0:\n            return False\n    return True\n\ndef g(a=987654321):\n    factors = []\n    i = 2\n    while i * i <= a:\n        if a % i:\n            i += 1\n        else:\n            a //= i\n            factors.append(i)\n    if a > 1:\n       factors.append(a)\n    return max(factors)\n\nassert f(g())\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if the target string is present in the list of words.\n    Return True if it is present, False otherwise.\"\"\"\n    return target in words\n\ndef g(target='python'):\n    return ['java', 'c++', 'python', 'javascript']\n\nassert f(g()) == True\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, target_weekday=datetime.datetime.now().weekday()) -> bool:\n    \"\"\"Check if a given date falls on the target weekday.\"\"\"\n    return date.weekday() == target_weekday\n\ndef g(target_weekday=datetime.datetime.now().weekday()):\n    return datetime.date.today()\n\nassert f(g())\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if n is a perfect square.\"\"\"\n    return int(n**0.5)**2 == n\n\ndef g():\n    return 81\n\nassert f(g())\n",
        "idx_generation": 63,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=10, c=15) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c even integers)\"\"\"\n    return n + a == sum([b * (2*i) for i in range(1, c+1)])\ndef g(a=5, b=10, c=15):\n    return -a + sum([b * (2*i) for i in range(1, c+1)])\nassert f(g())\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=2, length=10) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring='abc', count=2, length=10):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g())\n\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='programming', max_len=10) -> bool:\n    \"\"\"Check if the given string is a valid abbreviation of a word. An abbreviation is formed by keeping the first character and replacing the middle characters with an integer indicating the number of characters omitted, followed by the last character.\"\"\"\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\ndef g(word='programming', max_len=10):\n    if len(word) <= max_len:\n        return word\n    return f'{word[0]}{len(word) - 2}{word[-1]}'\nassert f(g())\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if a given string contains all the characters in a given substring.\"\"\"\n    return all(char in string for char in substring)\ndef g(substring='abc'):\n    return 'abcdefghi'\nassert f(g())\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    \"\"\"Check if the list contains any duplicate elements.\"\"\"\n    return len(li) != len(set(li))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]\n\nassert f(g())\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(target: int) -> bool:\n    \"\"\"Find the number of ways to climb stairs.\nGiven a target number of stairs, find the number of distinct ways to climb to the top. You can climb either 1 or 2 steps at a time.\n\"\"\"\n    if target <= 1:\n        return 1\n    dp = [0] * (target + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, target + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    return dp[target]\ndef g(target: int):\n    return target\nassert f(g(5)) == 8\n",
        "idx_generation": 101,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a power of two\"\"\"\n    return n != 0 and (n & (n - 1)) == 0\n\ndef g() -> int:\n    return 16\n\nassert f(g())\n",
        "idx_generation": 114,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(sequence: List[int], n=10) -> bool:\n    \"\"\"Find a list of numbers that is a subsequence of the given sequence\"\"\"\n    return all((num in sequence for num in sequence)) and len(sequence) <= n\n\ndef g(n=10):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n    \nassert f(g())\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Dict\n\ndef f(records: List[Dict[str, int]], target=100) -> bool:\n    \"\"\"Check if there exists a record in the list where the value associated with the key 'score' is less than or equal to the target.\"\"\"\n    for record in records:\n        if 'score' in record and record['score'] <= target:\n            return True\n    return False\n\ndef g(records=[{'name': 'Alice', 'score': 90}, {'name': 'Bob', 'score': 80}, {'name': 'Charlie', 'score': 110}]):\n    return records\n\nassert f(g())\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9]\nassert f(g())\n",
        "idx_generation": 14,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sums up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=10):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 11,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list where the second number is divisible by the first number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[j] % nums[i] == 0:\n                return True\n    return False\n\ndef g():\n    return [2, 5, 10, 20, 50, 100, 200]\n\nassert f(g())\n",
        "idx_generation": 71,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nimport random\nfrom typing import*\n\ndef f(points: List[Tuple[float, float]], origin=(0, 0), radius=10, num_points=5) -> bool:\n    \"\"\"Check if there exists a point in the given list that is located within the specified radius from the origin.\n    Return True if there is a point within the radius, False otherwise.\"\"\"\n    return any(math.sqrt((x - origin[0])**2 + (y - origin[1])**2) <= radius for x, y in points)\n\ndef g(origin=(0, 0), num_points=5):\n    x_coords = [random.uniform(-15, 15) for _ in range(num_points)]\n    y_coords = [random.uniform(-15, 15) for _ in range(num_points)]\n    points = list(zip(x_coords, y_coords))\n    return points\n\nassert f(g()) == True\n",
        "idx_generation": 148,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str) -> bool:\n    \"\"\"Determine if a word is a palindrome (reads the same forwards and backwards).\"\"\"\n    return word == word[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n",
        "idx_generation": 18,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"Find the diagonal elements of the given matrix.\"\"\"\n    diagonal = []\n    \n    for i in range(len(matrix)):\n        diagonal.append(matrix[i][i])\n    \n    return diagonal\n\ndef g():\n    return [[4, 0, 0], [0, 3, 0], [0, 0, 1]]\n\nassert f(g()) == [4, 3, 1]\n",
        "idx_generation": 455,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list whose sum is equal to the target value.\"\"\"\n    num_set = set()\n    for num in numbers:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> List[int]:\n    \"\"\"Find the indices of the target value in the given matrix.\"\"\"\n    indices = []\n    \n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                indices.append((i, j))\n    \n    return indices\n\ndef g(target: int):\n    return [[4, 0, 0], [2, 3, 0], [1, 2, 1]]\n\nassert f(g(2), 2) == [(1, 0), (2, 1)]\n",
        "idx_generation": 455,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Find a string that contains any of the substrings in reverse or forward order\"\"\"\n    return any((sub in s or sub[::-1] in s for sub in substrings))\n\ndef g(substrings=['apple', 'banana', 'cherry']):\n    return ''.join(substrings)\n\nassert f(g())\n",
        "idx_generation": 54,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the numbers in the list nums are all divisible by 3\"\"\"\n    return all(num % 3 == 0 for num in nums)\n\ndef g():\n    return [3, 6, 9, 12, 15]\n\nassert f(g())\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if the given number is divisible by any number in the list.\"\"\"\n    return any((n % x == 0 for x in lst))\n\ndef g(lst=[2, 4, 6, 8, 10]):\n    return 30\n\nassert f(g())\n",
        "idx_generation": 157,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(graph: Dict[str, List[str]], start='A', end='D', path_length=10) -> bool:\n    \"\"\"Find the shortest path from the start node to the end node in the given graph, with a path length less than or equal to path_length.\n    The graph is represented as a dictionary where the keys are nodes and the values are lists of adjacent nodes.\"\"\"\n    queue = [(start, [start])]\n    while queue:\n        (node, path) = queue.pop(0)\n        if node == end and len(path) <= path_length:\n            return True\n        neighbors = graph.get(node, [])\n        for neighbor in neighbors:\n            if neighbor not in path:\n                queue.append((neighbor, path + [neighbor]))\n    return False\n\ndef g(start='A', end='D', path_length=10):\n    return {\n        'A': ['B', 'C'],\n        'B': ['A', 'C', 'D'],\n        'C': ['A', 'B', 'D'],\n        'D': ['B', 'C']\n    }\n\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t='dutdE', ignore_case=True) -> bool:\n    \"\"\"Check if string s is a substring of string t\"\"\"\n    if ignore_case:\n        return s.lower() in t.lower()\n    else:\n        return s in t\ndef g(t='dutdE'):\n    return t[1:-1]\nassert f(g())\n",
        "idx_generation": 21,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(numbers: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target value\"\"\"\n    return any((a + b == target for i, a in enumerate(numbers) for j, b in enumerate(numbers[i+1:])))\n\ndef g(numbers=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    random.shuffle(numbers)\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(pairs: List[Tuple[int, int]]) -> bool:\n    \"\"\"Check if there exists a pair of elements in the list where the first element is divisible by the second element.\"\"\"\n    for pair in pairs:\n        if pair[0] % pair[1] == 0 or pair[1] % pair[0] == 0:\n            return True\n    return False\n\ndef g():\n    return [(12, 4), (7, 3), (8, 2), (9, 5)]\n\nassert f(g())\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='abc', t='xyz') -> bool:\n    \"\"\"Check if the XOR of the ASCII values of characters in s is equal to the XOR of the ASCII values of characters in t.\"\"\"\n    xor_s = ord(s[0])\n    xor_t = ord(t[0])\n    for i in range(1, len(s)):\n        xor_s ^= ord(s[i])\n    for i in range(1, len(t)):\n        xor_t ^= ord(t[i])\n    return xor_s == xor_t\n\ndef g(s='abc', t='xyz'):\n    return s, t\n\nassert f(*g())\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains both odd and even numbers.\"\"\"\n    odd = False\n    even = False\n    for num in nums:\n        if num % 2 == 0:\n            even = True\n        else:\n            odd = True\n        if odd and even:\n            return True\n    return False\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n\n",
        "idx_generation": 108,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=10) -> bool:\n    \"\"\"Check if the given number is divisible by k and the sum of its digits is also divisible by k.\"\"\"\n    return n % k == 0 and sum(map(int, str(n))) % k == 0\n\ndef g(k=10):\n    n = 1\n    while True:\n        if n % k == 0 and sum(map(int, str(n))) % k == 0:\n            return n\n        n += 1\n\nassert f(g())\n",
        "idx_generation": 93,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Check if the given date string matches the specified format.\"\"\"\n    try:\n        datetime.strptime(date, format)\n        return True\n    except ValueError:\n        return False\n\ndef g(format='%Y-%m-%d'):\n    return datetime.now().strftime(format)\n\nassert f(g())\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4]) -> bool:\n    \"\"\"Check if a given number is present in the list.\n    Return True if it is present, False otherwise.\"\"\"\n    return n in lst\n\ndef g(lst=[1, 2, 3, 4]):\n    return lst[1:3]\n\nassert f(g()) == False\n",
        "idx_generation": 146,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List, Tuple\n\ndef f(numbers: List[int], target_sum: int, num_elements: int) -> bool:\n    \"\"\"Check if there exists a combination of num_elements elements in the given list that sums up to target_sum.\"\"\"\n    from itertools import combinations\n    for combination in combinations(numbers, num_elements):\n        if sum(combination) == target_sum:\n            return True\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15, 3)\n\nassert f(*g())\n",
        "idx_generation": 371,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"Check if a string can be formed by repeating a substring n times.\"\"\"\n    return s == s[:len(s)//n] * n\ndef g(n=2):\n    return 'xyz' * n\nassert f(g())\n\n",
        "idx_generation": 44,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains only prime numbers.\"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return all(num in primes for num in nums)\n\ndef g():\n    return [2, 5, 7, 11, 13, 17, 23, 31, 37, 47, 53, 59, 67, 73, 79, 83, 89, 97]\n\nassert f(g())\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"Check if there is a word in the list that has the target length and starts with the letter 'a'.\"\"\"\n    return any(len(word) == target_length and word[0] == 'a' for word in words)\n\ndef g(target_length=5):\n    return (['apple', 'banana', 'cherry', 'date'], target_length)\n\nassert f(*g())\n",
        "idx_generation": 127,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a lower triangular matrix, where all the values above the main diagonal are zero.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [4, 5, 0], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(x: List[int], t=2183536, a=36, e=8450, s=1) -> bool:\n    \"\"\"Check if the sum of sublist values matches the target value and if all non-zero values are unique\"\"\"\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\n\ndef g(t=2183536, a=36, e=8450, s=1):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\n\nassert f(g())\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a rectangular matrix\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0]) if rows > 0 else 0\n    return all(len(row) == cols for row in matrix) and all(sum(row) == 0 for row in matrix)\n\ndef g():\n    return [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]\n\nassert f(g())\n",
        "idx_generation": 266,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], n=3) -> bool:\n    \"\"\"Check if there exists n consecutive words in the list that start with the same letter\"\"\"\n    count = 0\n    for word in words:\n        if word[0] == word[0].lower():\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(n=3):\n    return ['apple', 'banana', 'cherry', 'date', 'fig', 'grape', 'kiwi', 'lemon', 'mango', 'orange']\n\nassert f(g())\n",
        "idx_generation": 42,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        column_sum = sum(matrix[i][j] for i in range(n))\n        if column_sum != target_sum:\n            return False\n    \n    # Check diagonals\n    diagonal_sum = sum(matrix[i][i] for i in range(n))\n    anti_diagonal_sum = sum(matrix[i][n - i - 1] for i in range(n))\n    if diagonal_sum != target_sum or anti_diagonal_sum != target_sum:\n        return False\n    \n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], n=4) -> bool:\n    \"\"\"Given a list of words, check if there exists a sequence of n words where the last letter of each word is the same as the first letter of the next word\"\"\"\n    assert n > 0, 'Hint: n should be a positive integer'\n    return any((words[i][-1] == words[i+1][0] for i in range(len(words)-n+1)))\n\ndef g(n=4):\n    return ['apple', 'elephant', 'tiger', 'rabbit', 'cat', 'tree', 'eagle'][:(n+1)]\n\nassert f(g())\n",
        "idx_generation": 150,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(a: str, b: str) -> bool:\n    \"\"\"Check if string b is a substring of string a, and the length of string a is greater than 10.\"\"\"\n    return b in a and len(a) > 10\n\ndef g():\n    return \"Hello, world!\", \"world\"\n\nassert f(*g())\n",
        "idx_generation": 152,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, t: List[int]=[1,2,3,4,5,6,7,8,9,10]) -> bool:\n    \"\"\"Given a number n, check if it is divisible by any number in the list t, and also divisible by at least one prime number\"\"\"\n    primes = [2, 3, 5, 7, 11, 13]\n    for num in t:\n        if n % num == 0:\n            return True\n    for prime in primes:\n        if n % prime == 0:\n            return True\n    return False\n\ndef g(t: List[int]=[1,2,3,4,5,6,7,8,9,10]):\n    n = max(t) * 3\n    return n\n\nassert f(g())\n",
        "idx_generation": 143,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is sorted in ascending order.\"\"\"\n    return nums == sorted(nums)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], target_sum=100, n_values=10) -> bool:\n    \"\"\"Find if there exists a combination of n_values numbers that sums up to the target_sum\"\"\"\n    assert all([v > 0 for v in x])\n    combinations = set()\n    for r in range(1, len(x) + 1):\n        for subset in itertools.combinations(x, r):\n            if sum(subset) == target_sum:\n                combinations.add(subset)\n                if len(combinations) == n_values:\n                    return True\n    return False\n\ndef g(target_sum=100, n_values=10):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]\n\nassert f(g())\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 148,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target_sum=20) -> bool:\n    \"\"\"Check if there exists a row in the matrix whose sum is equal to the target_sum.\"\"\"\n    for row in matrix:\n        if sum(row) == target_sum:\n            return True\n    return False\n\ndef g(target_sum=20):\n    return [\n        [5, 2, 3, 4],\n        [1, 6, 7, 6],\n        [9, 8, 1, 2],\n        [4, 5, 6, 5]\n    ]\n\nassert f(g())\n",
        "idx_generation": 242,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is square (number of rows equals number of columns).\"\"\"\n    return len(matrix) == len(matrix[0])\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string has a specific number of consecutive vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(n=3):\n    return 'aabcdeefghiijkoou'\n\nassert f(g())\n",
        "idx_generation": 99,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=2) -> bool:\n    \"\"\"Check if n is a perfect power of k (k^n).\"\"\"\n    return (n ** (1 / k)) % 1 == 0\ndef g(k=2):\n    n = k ** 4\n    return n\nassert f(g())\n\n",
        "idx_generation": 44,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=3) -> bool:\n    \"\"\"Check if there exists a subarray of length n in the list for which the sum of its elements is equal to the maximum element in the list.\"\"\"\n    max_element = max(arr)\n    for i in range(len(arr)-n+1):\n        if sum(arr[i:i+n]) == max_element:\n            return True\n    return False\n\ndef g(n=3):\n    return [i for i in range(1, 10)]\n\nassert f(g())\n",
        "idx_generation": 74,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_length=5) -> bool:\n    \"\"\"Check if the given string's length is equal to the target_length.\"\"\"\n    return len(s) == target_length\ndef g(target_length=5):\n    return \"hello\"\nassert f(g())\n",
        "idx_generation": 210,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(parts: List[str], sep='-', string='') -> bool:\n    \"\"\"Find parts that when joined give a specific string.\"\"\"\n    return sep.join(parts) == string and all((sep not in p for p in parts))\ndef g(sep='-', string=''):\n    return string.split(sep)\nassert f(g())\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> int:\n    \"\"\"Find the product of all the even numbers in the given list\"\"\"\n    even_nums = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_nums.append(num)\n    product = 1\n    for num in even_nums:\n        product *= num\n    return product\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 3840\n\n",
        "idx_generation": 378,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Find if there exists a combination of numbers in a given list whose sum is equal to a target sum.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target_sum + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target_sum]\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if a list of integers is a permutation of consecutive numbers from 1 to N.\"\"\"\n    n = len(arr)\n    return set(arr) == set(range(1, n+1))\n\ndef g():\n    return [4, 1, 3, 2, 5]\n\nassert f(g())\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a given number is present in a list\"\"\"\n    return n in lst\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst[3]\n\nassert f(g())\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"Find the sum of each row in the given matrix and return them in a list.\"\"\"\n    sums = []\n    for row in matrix:\n        row_sum = sum(row)\n        sums.append(row_sum)\n    return sums\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == [6, 15, 24]\n",
        "idx_generation": 392,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, numbers=[4, 8, 15, 16, 23, 42]) -> bool:\n    \"\"\"Check if a number is divisible by any of the given numbers\"\"\"\n    return any(n % num == 0 for num in numbers)\n\ndef g(numbers=[4, 8, 15, 16, 23, 42]):\n    return numbers[-1]\n\nassert f(g())\n",
        "idx_generation": 25,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"Check if a target word is an anagram of any of the given words\"\"\"\n    sorted_target = ''.join(sorted(target_word))\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        if sorted_word == sorted_target:\n            return True\n    return False\ndef g():\n    return ['typhon', 'typhoon', 'python', 'nophyt']\nassert f(g())\n",
        "idx_generation": 17,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric along its main diagonal.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a diagonal matrix\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], \n            [0, 2, 0], \n            [0, 0, 3]]\n\nassert f(g())\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], col_sum=15) -> bool:\n    \"\"\"Check if there is a column in the matrix that has a sum greater than or equal to the given col_sum.\"\"\"\n    for j in range(len(matrix[0])):\n        col_sum = 0\n        for i in range(len(matrix)):\n            col_sum += matrix[i][j]\n        if col_sum >= col_sum:\n            return True\n    return False\n\ndef g(col_sum=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\n\nassert f(g())\n",
        "idx_generation": 380,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, n: int = 100, limit: int = 10) -> bool:\n    \"\"\"Find the result of applying the following operation to the number n, until it becomes zero or reaches the limit:\n    * If n is divisible by 3, subtract 3\n    * If n is divisible by 4, divide it by 4\n    * If n is divisible by 7, subtract 7\n    \"\"\"\n    while n > 0 and n != limit:\n        if n % 3 == 0:\n            n = n - 3\n        elif n % 4 == 0:\n            n = n // 4\n        elif n % 7 == 0:\n            n = n - 7\n        else:\n            break\n    return result == n\n\ndef g(n: int = 100, limit: int = 10):\n    while n > 0 and n != limit:\n        if n % 3 == 0:\n            n = n - 3\n        elif n % 4 == 0:\n            n = n // 4\n        elif n % 7 == 0:\n            n = n - 7\n        else:\n            break\n    return n\n\nassert f(g())\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=3) -> bool:\n    \"\"\"Check if there exists a subarray in the list with sum greater than or equal to a given number n\"\"\"\n    for i in range(len(arr)):\n        sum = 0\n        for j in range(i, len(arr)):\n            sum += arr[j]\n            if sum >= n:\n                return True\n    return False\n\ndef g(n=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 133,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(x: List[int], n=3, s=10) -> bool:\n    \"\"\"Find if there exists a subset of n elements in the list whose product is equal to s\"\"\"\n    def subset_product(nums, target, n):\n        if target == 1:\n            return True\n        if n == 0:\n            return False\n        if nums[n-1] > target:\n            return subset_product(nums, target, n-1)\n        return subset_product(nums, target, n-1) or subset_product(nums, target//nums[n-1], n-1)\n\n    return subset_product(x, s, n)\n\ndef g(n=3, s=10):\n    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return x\n\nassert f(g())\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 3, 5, 7, 9]) -> bool:\n    \"\"\"Check if all elements in a list are divisible by a given number, excluding 0.\"\"\"\n    return all(e % n == 0 for e in lst if e != 0)\ndef g(lst=[1, 3, 5, 7, 9]):\n    return 1\nassert f(g())\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subsequence of numbers in the array that sums up to the target value\"\"\"\n    n = len(arr)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < arr[i-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]]\n    return dp[n][target]\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 479,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=50, reverse=False) -> bool:\n    \"\"\"Either reverse a number or don't based on the reverse flag\"\"\"\n    return (n == target) == reverse\ndef g(target=50, reverse=False):\n    return int(str(target)[::-1]) if reverse else target + 1\nassert f(g())\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nimport re\nfrom typing import List\n\ndef f(expressions: List[str], allowed_operators=['+', '-', '*', '/']) -> bool:\n    \"\"\"Check if all of the expressions in the list are valid mathematical expressions.\n    Each expression should only contain digits and allowed_operators, and should have a correct syntax.\"\"\"\n    pattern = r'^[\\d\\s' + re.escape(''.join(allowed_operators)) + ']+$'\n    for expression in expressions:\n        if not re.match(pattern, expression) and not re.match(r'^[\\d\\s]+$', expression):\n            return False\n    return True\n\ndef g(allowed_operators=['+', '-', '*', '/']):\n    return ['2 + 3', '4 * 6 - 2', '8 / 2 + 5']\n\nassert f(g())\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a geometric progression.\"\"\"\n    if len(numbers) < 3:\n        return False\n    ratio = numbers[1] / numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] / numbers[i-1] != ratio:\n            return False\n    return True\n\ndef g():\n    return [2, 4, 8, 16, 32, 64]\n\nassert f(g()) == True\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if the given string contains all the vowels in order.\"\"\"\n    vowel_index = 0\n    for char in x:\n        if char == vowels[vowel_index]:\n            vowel_index += 1\n            if vowel_index == len(vowels):\n                return True\n    return False\n\ndef g(vowels=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(vowels)\n\nassert f(g())\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a sublist in the list whose elements form a palindrome with the target as the middle number.\"\"\"\n    return any(lst[i:j] == lst[i:j][::-1] and len(lst[i:j]) % 2 != 0 and lst[i:j][len(lst[i:j])//2] == target for i in range(len(lst)) for j in range(i+1, len(lst)+1))\n\ndef g():\n    return [1, 2, 3, 10, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 15,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], n=10) -> bool:\n    \"\"\"Check if the product of any two distinct elements in the list is equal to n.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] == n:\n                return True\n    return False\n\ndef g(n=10):\n    return [i for i in range(1, n+1)]\n\nassert f(g())\n",
        "idx_generation": 167,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target_sum=15) -> bool:\n    \"\"\"Find a number such that the sum of the squares of its digits is equal to the target_sum.\"\"\"\n    return sum([int(digit)**2 for digit in str(n)]) == target_sum\ndef g(target_sum=15):\n    n = 0\n    while True:\n        if sum([int(digit)**2 for digit in str(n)]) == target_sum:\n            return n\n        n += 1\nassert f(g())\n",
        "idx_generation": 215,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that are all multiples of 3\"\"\"\n    count = 0\n    for num in nums:\n        if num % 3 == 0:\n            count += 1\n            if count == k:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(k=5):\n    return [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\n\nassert f(g())\n",
        "idx_generation": 25,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, t=50, upper=30) -> bool:\n    \"\"\"Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper\n\ndef g(t=50, upper=30):\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\n\nassert f(g())\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='abc', b='def') -> bool:\n    \"\"\"Check if the given string can be formed by combining characters from both a and b, without changing the order of characters in a or b.\n    Additionally, the characters from a should appear before the characters from b in the given string s, but the order of characters within a and b can be changed.\"\"\"\n    i = 0\n    j = 0\n    for char in s:\n        if i < len(a) and char == a[i]:\n            i += 1\n        elif j < len(b) and char == b[j]:\n            j += 1\n        else:\n            return False\n    return i == len(a) and j == len(b)\n\ndef g(a='abc', b='def'):\n    return ''.join(sorted(a)) + ''.join(sorted(b))\n\nassert f(g())\n",
        "idx_generation": 142,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(colors: List[str], n: int = 3) -> bool:\n    \"\"\"Check if a list of colors contains at least n distinct colors.\"\"\"\n    return len(set(colors)) >= n\ndef g(n: int = 3):\n    return [\"red\", \"blue\", \"yellow\", \"green\", \"orange\", \"blue\"] * n\nassert f(g())\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(li: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subset of k elements in the list whose sum is divisible by k.\"\"\"\n    from itertools import combinations\n    return any(sum(subset) % k == 0 for subset in combinations(li, k))\n\ndef g(k=5):\n    return [i for i in range(1, 2 * k + 1)]\n\nassert f(g())\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exists a path in the given matrix such that the sum of the absolute differences between adjacent numbers along the path is equal to the target number.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    dp = [[False] * (target + 1) for _ in range(m + 1)]\n    dp[0][0] = True\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(target + 1):\n                if k >= abs(matrix[i - 1][j - 1]):\n                    dp[i][k] = dp[i][k] or dp[i - 1][k - abs(matrix[i - 1][j - 1])] or dp[i][k - abs(matrix[i - 1][j - 1])]\n                else:\n                    dp[i][k] = dp[i][k] or dp[i - 1][k]\n\n    return dp[m][target]\n\ndef g():\n    return [[-2, 3, 4], [5, -6, 7], [8, 9, -10]]\n\nassert f(g())\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(substring: str, string='hellothere', count=3) -> bool:\n    \"\"\"Find a substring with a certain count in a given string\"\"\"\n    return string.count(substring) == count\ndef g(string='hellothere', count=3):\n    for i in range(len(string)):\n        for j in range(i + 1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False\nassert f(g())\n",
        "idx_generation": 266,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nimport itertools\n\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"Check if there exists a sublist in the array whose sum is a multiple of k\"\"\"\n    return any((sum(sublist) % k == 0 for sublist in itertools.combinations(arr, 4)))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), 3)\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=100, b=50) -> bool:\n    \"\"\"Check if the product of two numbers is equal to the input number\"\"\"\n    return a * b == x\ndef g(a=100, b=50):\n    return a * b\nassert f(g())\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Determine if the number n can be expressed as a product of m\"\"\"\n    if m == 0:\n        return False\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    return f(n-m, m) or f(n, m-1)\n\ndef g(m=10):\n    return m\n\nassert f(g())\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a number that can be expressed as the sum of two prime numbers in more than one way.\"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_sum_of_primes(num):\n        primes = [x for x in range(2, num) if is_prime(x)]\n        for i in range(len(primes)):\n            for j in range(i, len(primes)):\n                if primes[i] + primes[j] == num:\n                    return True\n        return False\n\n    return is_sum_of_primes(n)\n\ndef g():\n    return 25\n\nassert f(g())\n",
        "idx_generation": 76,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(str_list: List[str], target_length=5) -> bool:\n    \"\"\"Check if a given list of strings contains at least one string with a length greater than or equal to the target length.\"\"\"\n    return any(len(s) >= target_length for s in str_list)\n\ndef g(target_length=5):\n    return ['apple', 'banana', 'carrot', 'date', 'egg']\n\nassert f(g())\n",
        "idx_generation": 126,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the number is a perfect square\"\"\"\n    return int(n**0.5)**2 == n\n\ndef g():\n    return 16\n\nassert f(g())\n",
        "idx_generation": 79,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='hello', count=5, length=50) -> bool:\n    \"\"\"Check if the given string has a certain number of copies of a given substring and if its length is equal to a given value\"\"\"\n    return string.count(substring) == count and len(string) == length\n\ndef g(substring='hello', count=5, length=50):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * '^'\n\nassert f(g())\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='programming', max_len=10) -> bool:\n    \"\"\"Check if the given string is a valid abbreviation of a word. An abbreviation is formed by keeping the first character and replacing the middle characters with an integer indicating the number of characters omitted, followed by the last character.\"\"\"\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\ndef g(word='programming', max_len=10):\n    if len(word) <= max_len:\n        return word\n    return f'{word[0]}{len(word) - 2}{word[-1]}'\nassert f(g())\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='hello') -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substring in s\n\ndef g(substring='hello'):\n    return 'hello world'\n\nassert f(g())\n",
        "idx_generation": 32,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers contains any duplicate values.\"\"\"\n    return len(numbers) != len(set(numbers))\ndef g():\n    return [1, 2, 3, 4, 5, 1, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"Check if there exists a subsequence in the given list that adds up to the target number.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]]\n    return dp[n][target]\n\ndef g(target: int = 0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Dict\n\ndef f(records: List[Dict[str, int]], key='score') -> bool:\n    \"\"\"Check if all the records in the list have the specified key.\"\"\"\n    return all(key in record for record in records)\n\ndef g(key='score'):\n    return [{'name': 'Alice', 'score': 90}, {'name': 'Bob', 'score': 80}, {'name': 'Charlie', 'score': 110}]\n\nassert f(g())\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find if the target value exists in the given matrix\"\"\"\n    for row in matrix:\n        for num in row:\n            if num == target:\n                return True\n    return False\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target]]\nassert f(g())\n",
        "idx_generation": 14,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a list that sum up to a given target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n",
        "idx_generation": 12,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(num: int, target_factorial=720) -> bool:\n    \"\"\"Check if the factorial of a given number is equal to the target factorial.\"\"\"\n    return math.factorial(num) == target_factorial\ndef g(target_factorial=720):\n    return 6\nassert f(g())\n",
        "idx_generation": 74,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\nfrom typing import List, Tuple\n\ndef f(points: List[Tuple[int, int]]) -> bool:\n    \"\"\"Check if all the points lie on the same line.\"\"\"\n    if len(points) <= 2:\n        return True\n    x0, y0 = points[0]\n    x1, y1 = points[1]\n    for i in range(2, len(points)):\n        x, y = points[i]\n        if (x1 - x0) * (y - y0) != (x - x0) * (y1 - y0):\n            return False\n    return True\n\ndef g():\n    return [(1, 2), (3, 4), (5, 6), (7, 8)]\n\nassert f(g())\n\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return string == string[::-1]\n\ndef g(string=\"racecar\"):\n    return string\n\nassert f(g())\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a diagonal matrix.\"\"\"\n    n = len(matrix)\n    \n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    \n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\nassert f(g())\n\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"Find the index of the target number in the list.\n    The function returns the index of the target number if it exists in the list, otherwise -1.\"\"\"\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    target = 3\n    return nums, target\n\nassert f(*g()) == 2\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is an identity matrix\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    if rows != cols:\n        return False\n\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n            elif i == j and matrix[i][j] != 1:\n                return False\n\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n\nassert f(g())\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_substring='abc') -> bool:\n    \"\"\"Check if a given string contains the target substring in reverse order.\"\"\"\n    return target_substring[::-1] in s\n\ndef g(target_substring='abc'):\n    return \"xyzcbazyx123\"\n\nassert f(g())\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], a=3, b=5) -> bool:\n    \"\"\"Check if there exists two numbers in the list such that their sum is divisible by a and their product is divisible by b\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] + nums[j]) % a == 0 and (nums[i] * nums[j]) % b == 0:\n                return True\n    return False\n\ndef g(a=3, b=5):\n    return [2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if the given number is a prime number or not.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(graph: Dict[str, List[str]], start='A', end='D', path_length=10) -> bool:\n    \"\"\"Find the shortest path from the start node to the end node in the given graph, with a path length less than or equal to path_length.\n    The graph is represented as a dictionary where the keys are nodes and the values are lists of adjacent nodes.\"\"\"\n    queue = [(start, [start])]\n    while queue:\n        (node, path) = queue.pop(0)\n        if node == end and len(path) <= path_length:\n            return True\n        neighbors = graph.get(node, [])\n        for neighbor in neighbors:\n            if neighbor not in path:\n                queue.append((neighbor, path + [neighbor]))\n    return False\n\ndef g(start='A', end='D', path_length=10):\n    return {\n        'A': ['B', 'C'],\n        'B': ['A', 'C', 'D'],\n        'C': ['A', 'B', 'D'],\n        'D': ['B', 'C']\n    }\n\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Check if a given string, when repeated, results in a string with a length equal to or greater than the target length.\"\"\"\n    return len(s * (target_length // len(s) + 1)) >= target_length\ndef g(target_length=10):\n    return 'abcde'\nassert f(g())\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target=20) -> bool:\n    \"\"\"Find a pair of numbers in the list whose sum is equal to the target\"\"\"\n    return any((x[i] + x[j] == target for i in range(len(x)) for j in range(i+1, len(x))))\n    \ndef g(target=20):\n    return [10, 5, 8, 12, 3]\n    \nassert f(g())\n",
        "idx_generation": 95,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='abc', t='xyz') -> bool:\n    \"\"\"Check if the sum of the ASCII values of characters in s is equal to the sum of the ASCII values of characters in t.\"\"\"\n    sum_s = ord(s[0])\n    sum_t = ord(t[0])\n    for i in range(1, len(s)):\n        sum_s += ord(s[i])\n    for i in range(1, len(t)):\n        sum_t += ord(t[i])\n    return sum_s == sum_t\n\ndef g(s='abc', t='xyz'):\n    return s, t\n\nassert f(*g())\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the given number n is divisible by all numbers in the list.\"\"\"\n    for num in lst:\n        if n % num != 0:\n            return False\n    return True\n\ndef g():\n    return 24, [2, 3, 4]\n\nassert f(*g())\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=10) -> bool:\n    \"\"\"Check if n is a prime number and is greater than k.\"\"\"\n    if n <= k:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(k=10):\n    n = k + 1\n    while True:\n        if f(n, k):\n            return n\n        n += 1\nassert f(g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pro') -> bool:\n    \"\"\"Check if all words in the list start with the given prefix.\"\"\"\n    return all(word.startswith(prefix) for word in words)\ndef g(prefix='pro'):\n    return ['programming', 'problem', 'process', 'product']\nassert f(g())\n",
        "idx_generation": 149,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4]) -> bool:\n    \"\"\"Check if a given number is present in the list.\n    Return True if it is present, False otherwise.\"\"\"\n    return n in lst\n\ndef g(lst=[1, 2, 3, 4]):\n    return lst[::-1]\n\nassert f(g()) == False\n",
        "idx_generation": 146,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, lst: List[List[int]]) -> bool:\n    \"\"\"Check if n can be obtained by summing up any combination of numbers from the given list of lists.\"\"\"\n    for r in range(1, len(lst)+1):\n        for combination in itertools.combinations(lst, r):\n            total = 0\n            for sublist in combination:\n                total += sum(sublist)\n            if total == n:\n                return True\n    return False\n\ndef g(lst=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    total = 0\n    for sublist in lst:\n        total += sum(sublist)\n    return total\n\nassert f(g(), lst=[[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n",
        "idx_generation": 371,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"Check if a string can be formed by repeating a substring n times.\"\"\"\n    return len(s) % n == 0 and s == s[:len(s)//n] * n\ndef g(n=2):\n    return 'abc' * n\nassert f(g())\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a list of numbers contains at least one even number.\"\"\"\n    for num in nums:\n        if num % 2 == 0:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 266,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[str], target=\"abcde\", max_length=5, options=[\"a\", \"b\", \"c\", \"d\", \"e\"]) -> bool:\n    \"\"\"Find a combination of at most max_length strings whose concatenation is equal to the target value.\"\"\"\n    for word in numbers:\n        assert word in options\n    concat = \"\".join(numbers)\n    return len(concat) <= max_length and concat == target\ndef g(target=\"abcde\", max_length=5, options=[\"a\", \"b\", \"c\", \"d\", \"e\"]):\n    from itertools import combinations\n    for n in range(max_length + 1):\n        for c in combinations(options, n):\n            concat = \"\".join(c)\n            if concat == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a lower triangular matrix\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n\n    return True\n\ndef g():\n    return [[1, 0, 0], [2, 3, 0], [4, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(x: List[int], t=2183536, a=36, e=8450, s=1) -> bool:\n    \"\"\"Check if the sum of sublist values matches the target value and if all non-zero values are unique\"\"\"\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\n\ndef g(t=2183536, a=36, e=8450, s=1):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\n\nassert f(g())\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(substrings: List[str], s='xyzyxyxyxyyzyxyzyxyyzy', count=10) -> bool:\n    \"\"\"Find a list of >= count distinct strings that are all contained in s\"\"\"\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s='xyzyxyxyxyyzyxyzyxyyzy', count=10):\n    return [''] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g())\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(squares: List[List[int]], m=10, n=5, target=50) -> bool:\n    \"\"\"Check if the given squares can form a complete checkerboard of size m x n.\"\"\"\n    covered = []\n    for (i, j) in squares:\n        assert 0 <= i < m and 0 <= j < n\n        covered.append((i, j))\n    return len(set(covered)) == target and len(covered) == m * n\n\ndef g(m=10, n=5, target=50):\n    ans = [(i, j) for i in range(m) for j in range(n)]\n    return ans\n\nassert f(g())\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(x: str, n=4, k=3) -> bool:\n    \"\"\"Check if a string has a specific number of vowels and consonants\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count_vowels = 0\n    count_consonants = 0\n    for char in x:\n        if char.lower() in vowels:\n            count_vowels += 1\n        else:\n            count_consonants += 1\n    return count_vowels == n and count_consonants == k\ndef g(n=4, k=3):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    result = \"\"\n    for _ in range(n):\n        result += random.choice(vowels)\n    for _ in range(k):\n        result += random.choice(consonants)\n    return result\nassert f(g())\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a substring can be found in the given string n times.\"\"\"\n    return s.count(\"abc\") == n\ndef g(n=3):\n    return 'abc' * n + 'def'\nassert f(g())\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if the given number is divisible by any prime number in the list and divisible by all the numbers in the list\"\"\"\n    for prime in primes:\n        if n % prime != 0:\n            return False\n    return True\n\ndef g(primes=[2, 3, 5, 7, 11, 13]):\n    n = 1\n    for prime in primes:\n        n *= prime\n    return n\n\nassert f(g())\n",
        "idx_generation": 143,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target: int = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(m: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric\"\"\"\n    for i in range(len(m)):\n        for j in range(i+1, len(m)):\n            if m[i][j] != m[j][i]:\n                return False\n    return True\ndef g():\n    return [[1, 2, 3], \n            [2, 4, 5], \n            [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 167,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a magic square\"\"\"\n    n = len(matrix)\n\n    target_sum = (n * (n**2 + 1)) // 2\n\n    row_sums = [sum(row) for row in matrix]\n    if not all(row_sum == target_sum for row_sum in row_sums):\n        return False\n\n    col_sums = [sum(col) for col in zip(*matrix)]\n    if not all(col_sum == target_sum for col_sum in col_sums):\n        return False\n\n    diag_sum1 = sum(matrix[i][i] for i in range(n))\n    diag_sum2 = sum(matrix[i][n - i - 1] for i in range(n))\n    if diag_sum1 != target_sum or diag_sum2 != target_sum:\n        return False\n\n    return True\n\ndef g():\n    return [[2, 7, 6],\n            [9, 5, 1],\n            [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 265,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(rectangles: List[List[int]]) -> bool:\n    \"\"\"Check if the given list of rectangles are all squares.\"\"\"\n    for rect in rectangles:\n        if rect[2] - rect[0] != rect[3] - rect[1]:\n            return False\n    return True\n\ndef g():\n    return [[0, 0, 2, 2], [1, 1, 3, 3], [4, 4, 6, 6], [5, 5, 7, 7]]\n\nassert f(g())\n\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=7, m=3) -> bool:\n    \"\"\"Check if the length of s is divisible by the product of n and m\"\"\"\n    return len(s) % (n * m) == 0\ndef g(n=7, m=3):\n    return \"a\" * (n * m)\nassert f(g())\n",
        "idx_generation": 121,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import isqrt\n\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return isqrt(n)**2 == n\n\ndef g(n: int):\n    return n\n\nassert f(g(16))\n",
        "idx_generation": 65,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_length=4) -> bool:\n    \"\"\"Check if there exists a subsequence in the given list whose length is equal to the target length.\n    Return True if such a subsequence exists, False otherwise.\"\"\"\n    def is_subsequence(sub, main):\n        i = 0\n        for j in range(len(main)):\n            if i < len(sub) and sub[i] == main[j]:\n                i += 1\n        return i == len(sub)\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            subsequence = arr[i:j+1]\n            if len(subsequence) == target_length and is_subsequence(subsequence, arr):\n                return True\n    return False\n\ndef g(target_length=4):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 110,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"Check if a given string contains an even number of substrings of length n.\"\"\"\n    count = 0\n    for i in range(0, len(s)-n+1, n):\n        if s[i:i+n] == s[i+n:i+2*n]:\n            count += 1\n    return count % 2 == 0\ndef g(s=\"ababab\"):\n    return s\nassert f(g())\n",
        "idx_generation": 217,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(s: str, pattern: str) -> bool:\n    \"\"\"Check if a given string matches a given regular expression pattern.\"\"\"\n    return bool(re.match(pattern, s))\n\ndef g(pattern: str):\n    s = \"Hello, World!\"\n    return s, pattern\n\nassert f(*g(\"[A-Za-z]+, [A-Za-z]+!\"))\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> int:\n    \"\"\"Find the product of all the numbers in the given list\"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 120\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find two numbers in a list that add up to a given target.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in ascending order\"\"\"\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 56,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target sum\"\"\"\n    seen = set()\n    for num in arr:\n        if target_sum - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target_sum=10):\n    return [1, target_sum-1]\n\nassert f(g())\n",
        "idx_generation": 25,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> List[int]:\n    \"\"\"Find all the prime numbers in the given list.\"\"\"\n    primes = []\n    for num in numbers:\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                primes.append(num)\n    return primes\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [2, 3, 5, 7]\n",
        "idx_generation": 428,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=9) -> bool:\n    \"\"\"Check if a number is divisible by the target number\"\"\"\n    return n % target == 0\ndef g(target=9):\n    return 27\nassert f(g())\n",
        "idx_generation": 97,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Find a word in the list that is an anagram of the target word\"\"\"\n    return any((sorted(word) == sorted(target) for word in words))\ndef g(words=['typhon', 'python', 'nothyP', 'notpyh']):\n    return words\nassert f(g())\n",
        "idx_generation": 34,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a symmetric matrix, where the values are mirror images along the main diagonal.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g()) == True\n\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a diagonal matrix\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0]) if rows > 0 else 0\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\nassert f(g())\n",
        "idx_generation": 279,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], row_sum=10) -> bool:\n    \"\"\"Check if there is a row in the matrix that has a sum less than the given row_sum.\"\"\"\n    for row in matrix:\n        if sum(row) < row_sum:\n            return True\n    return False\n\ndef g(row_sum=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\n\nassert f(g())\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(result: int, n: int = 100, limit: int = 10) -> bool:\n    \"\"\"Find the result of applying the following operation to the number n, until it becomes zero or reaches the limit:\n    * If n is a prime number, subtract the square root of n\n    * If n is divisible by 3, divide it by 3\n    * If n is divisible by 5, subtract 5\n    \"\"\"\n    import math\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    while n > 0 and n != limit:\n        if is_prime(n):\n            n = n - int(math.sqrt(n))\n        elif n % 3 == 0:\n            n = n // 3\n        elif n % 5 == 0:\n            n = n - 5\n        else:\n            break\n    return result == n\n\ndef g(n: int = 100, limit: int = 10):\n    import math\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    while n > 0 and n != limit:\n        if is_prime(n):\n            n = n - int(math.sqrt(n))\n        elif n % 3 == 0:\n            n = n // 3\n        elif n % 5 == 0:\n            n = n - 5\n        else:\n            break\n    return n\n\nassert f(g())\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find the maximum number in the list\"\"\"\n    return max(arr) == n\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return max(arr)\nassert f(g())\n",
        "idx_generation": 154,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='racecar', reverse=True) -> bool:\n    \"\"\"Check if a string is a palindrome or not\"\"\"\n    return (s == target) == reverse\ndef g(target='racecar', reverse=True):\n    return target[::-1] if reverse else target\nassert f(g())\n",
        "idx_generation": 89,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nimport re\nfrom typing import List\n\ndef f(expressions: List[str], allowed_operators=['+', '-', '*', '/']) -> bool:\n    \"\"\"Check if all of the expressions in the list are valid mathematical expressions.\n    Each expression should only contain digits and allowed_operators, and should have a correct syntax.\"\"\"\n    pattern = r'^[\\d\\s' + re.escape(''.join(allowed_operators)) + ']+$'\n    for expression in expressions:\n        if not re.match(pattern, expression) and not re.match(r'^[\\d\\s]+$', expression):\n            return False\n    return True\n\ndef g(allowed_operators=['+', '-', '*', '/']):\n    return ['2 + 3', '4 * 6 - 2', '8 / 2']\n\nassert f(g())\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_char='a') -> bool:\n    \"\"\"Given a string, check if the target_char appears as the first character of any word in the string.\"\"\"\n    words = s.split()\n    for word in words:\n        if word[0] == target_char:\n            return True\n    return False\n\ndef g(target_char='a'):\n    return \"apple banana cherry date\"\n    \nassert f(g())\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list nums whose sum is equal to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return ([2, 5, 8, 10, 4], 12)\n\nassert f(*g())\n",
        "idx_generation": 15,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=3, power=2) -> bool:\n    \"\"\"Check if a given number is a power of another number\"\"\"\n    return n == m ** power\ndef g(m=3, power=2):\n    n = 9\n    return n\nassert f(g())\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, target: int) -> bool:\n    \"\"\"Check if the given number n is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(target: int) -> int:\n    \"\"\"Find the largest prime factor of the target number.\"\"\"\n    largest_prime_factor = 0\n    for i in range(2, int(math.sqrt(target))+1):\n        if target % i == 0:\n            if f(i, target):\n                largest_prime_factor = max(largest_prime_factor, i)\n            if f(target//i, target):\n                largest_prime_factor = max(largest_prime_factor, target//i)\n    return largest_prime_factor\n\nassert f(g(target=20), target=20)\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, length=4) -> bool:\n    \"\"\"Find a combination of numbers from the given list that sum up to the target and have a specific length\"\"\"\n    combinations = itertools.combinations(nums, length)\n    return any(sum(combination) == target for combination in combinations)\ndef g(target=100, length=4):\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return nums\nassert f(g())\n",
        "idx_generation": 70,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, t=150, upper=40) -> bool:\n    \"\"\"Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper\n\ndef g(t=150, upper=40):\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\n\nassert f(g())\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if the given character is present in the string.\"\"\"\n    return char in s\ndef g(char='a'):\n    return 'abcdefg'\nassert f(g())\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a symmetric matrix, where the matrix is equal to its transpose.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=2) -> bool:\n    \"\"\"Given a list of integers and a positive integer k, determine if the list can be partitioned into k sublists,\n    where each sublist has equal sum.\n    Return True if it can be partitioned, otherwise return False.\n    Sample Input:\n    [4, 3, 2, 3, 5, 2, 1]\n    Sample Output:\n    True\n    Explanation:\n    The list can be partitioned into two sublists with equal sums: [4, 3, 2] and [3, 5, 2, 1].\"\"\"\n    total_sum = sum(arr)\n    if total_sum % k != 0:\n        return False\n    target_sum = total_sum // k\n    subset_sums = [0] * k\n    return backtrack(arr, 0, subset_sums, target_sum)\n\ndef backtrack(arr, index, subset_sums, target_sum):\n    if index == len(arr):\n        return len(set(subset_sums)) == 1\n    for i in range(len(subset_sums)):\n        if subset_sums[i] + arr[index] <= target_sum:\n            subset_sums[i] += arr[index]\n            if backtrack(arr, index + 1, subset_sums, target_sum):\n                return True\n            subset_sums[i] -= arr[index]\n    return False\n\ndef g(arr=[4, 3, 2, 3, 5, 2, 1]):\n    return arr\n\nassert f(g())",
        "idx_generation": 119,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 248,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(s: str, substring: str) -> bool:\n    \"\"\"Check if the given string contains the given substring\"\"\"\n    return substring in s\n\ndef g():\n    return \"Hello, world!\"\n\nassert f(g(), \"world\")\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], k: int = 3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the given list whose sum is equal to zero\"\"\"\n    return any(sum(lst[i:i+k]) == 0 for i in range(len(lst)-k+1))\n\ndef g(k: int = 3):\n    return [1, 2, -3, 4, -5, 6, -7, 8, -9, 10]\n\nassert f(g())\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=20, b=10) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to the difference of two other numbers\"\"\"\n    return a + b == x - 5\ndef g(a=20, b=10):\n    return a + b + 5\nassert f(g())\n",
        "idx_generation": 204,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a symmetric matrix\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 7\n\nassert f(g())\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], letter_count=5) -> bool:\n    \"\"\"Check if any of the words in the list have a length equal to the given letter_count.\"\"\"\n    return any(len(word) == letter_count for word in words)\n\ndef g(letter_count=5):\n    return ['apple', 'banana', 'cherry', 'mango', 'kiwi']\n\nassert f(g())\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return sqrt(n).is_integer()\ndef g():\n    return 25\nassert f(g())\n",
        "idx_generation": 83,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='hello', count=5, length=50) -> bool:\n    \"\"\"Check if the given string has a certain number of occurrences of a given substring and if its length is equal to a given value\"\"\"\n    return string.count(substring) == count and len(string) == length\n\ndef g(substring='hello', count=5, length=50):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * '^'\n\nassert f(g())\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substring in s\n\ndef g(substring='python'):\n    return 'I love python programming'\n\nassert f(g())\n",
        "idx_generation": 32,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate elements.\"\"\"\n    return len(nums) != len(set(nums))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g()) == False\n\n",
        "idx_generation": 142,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int], n=4) -> bool:\n    \"\"\"Given a list of integers, find if there exists a subsequence of length n such that its elements are in strictly decreasing order.\nSample Input:\nnums = [5, 4, 3, 2, 1]\nn = 4\nSample Output:\nTrue\"\"\"\n    for i in range(len(nums) - n + 1):\n        subseq = nums[i:i + n]\n        if sorted(subseq, reverse=True) == subseq:\n            return True\n    return False\ndef g(n=4):\n    return [9, 8, 7, 6, 5, 4, 3, 2, 1, n]\nassert f(g())\n",
        "idx_generation": 177,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_value=5) -> bool:\n    \"\"\"Find a cell in the matrix that contains the target_value.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == target_value:\n                return True\n    return False\ndef g(target_value=5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 11,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Dict\n\ndef f(records: List[Dict[str, int]], key='name') -> bool:\n    \"\"\"Check if any of the records in the list have the specified key.\"\"\"\n    return all(key in record for record in records)\n\ndef g(key='name'):\n    return [{'name': 'Alice', 'score': 90}, {'name': 'Bob', 'score': 80}, {'name': 'Charlie', 'score': 110}]\n\nassert f(g())\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers that multiply to the target.\nSample Input:\n`[1, 2, 3, 4, 5]`\nSample Output:\n`(1, 5)`\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target=5):\n    return (target//5, target)\n\nassert f(g())\n",
        "idx_generation": 16,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the list that sums up to the target\"\"\"\n    curr_sum = 0\n    seen = set()\n    for num in nums:\n        curr_sum += num\n        if curr_sum == target or curr_sum - target in seen:\n            return True\n        seen.add(curr_sum)\n    return False\n\ndef g(target=0):\n    return [4, 2, -3, 1, 6]\n\nassert f(g())\n",
        "idx_generation": 13,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_number=50) -> bool:\n    \"\"\"Check if there exists a number in the list that is divisible by a given target number.\"\"\"\n    return any(num % target_number == 0 for num in numbers)\n\ndef g(target_number=50):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"Given a matrix, return the spiral order of its elements.\"\"\"\n    if not matrix:\n        return []\n    m, n = len(matrix), len(matrix[0])\n    top, bottom, left, right = 0, m - 1, 0, n - 1\n    direction = 0\n    spiral = []\n    \n    while top <= bottom and left <= right:\n        if direction == 0:\n            for i in range(left, right + 1):\n                spiral.append(matrix[top][i])\n            top += 1\n        elif direction == 1:\n            for i in range(top, bottom + 1):\n                spiral.append(matrix[i][right])\n            right -= 1\n        elif direction == 2:\n            for i in range(right, left - 1, -1):\n                spiral.append(matrix[bottom][i])\n            bottom -= 1\n        else:\n            for i in range(bottom, top - 1, -1):\n                spiral.append(matrix[i][left])\n            left += 1\n        direction = (direction + 1) % 4\n    \n    return spiral\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == [1, 2, 3, 6, 9, 8, 7, 4, 5]\n",
        "idx_generation": 166,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target: str) -> bool:\n    \"\"\"Check if the target name is the longest name in the list.\"\"\"\n    return target == max(names, key=len)\n\ndef g():\n    names = [\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"]\n    return names\n\nassert f(g(), target=\"Charlie\")\n",
        "idx_generation": 34,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_substring='abc') -> bool:\n    \"\"\"Check if a given string contains the target substring in reverse order, and the length of the substring is odd.\"\"\"\n    return target_substring[::-1] in s and len(target_substring) % 2 != 0\n\ndef g(target_substring='abc'):\n    return \"xyzcbazyx123\"\n\nassert f(g())\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to 10\"\"\"\n    seen = set()\n    for num in nums:\n        if 10 - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if the given number is a prime number or not.\"\"\"\n    if n < 2:\n        return False\n    if n in nums:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 209,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(graph: Dict[str, List[str]], start='A', end='D', path_length=10) -> bool:\n    \"\"\"Find the shortest path from the start node to the end node in the given graph, with a path length less than or equal to path_length.\n    The graph is represented as a dictionary where the keys are nodes and the values are lists of adjacent nodes.\"\"\"\n    queue = [(start, [start])]\n    while queue:\n        (node, path) = queue.pop(0)\n        if node == end and len(path) <= path_length:\n            return True\n        neighbors = graph.get(node, [])\n        for neighbor in neighbors:\n            if neighbor not in path:\n                queue.append((neighbor, path + [neighbor]))\n    return False\n\ndef g(start='A', end='D', path_length=10):\n    return {\n        'A': ['B', 'C'],\n        'B': ['A', 'C', 'D'],\n        'C': ['A', 'B', 'D'],\n        'D': ['B', 'C']\n    }\n\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=5) -> bool:\n    \"\"\"Find n such that the sum of the first n positive integers is divisible by k\"\"\"\n    return sum(range(1, n+1)) % k == 0\ndef g(k=5):\n    n = 1\n    while True:\n        if sum(range(1, n+1)) % k == 0:\n            return n\n        n += 1\nassert f(g())\n",
        "idx_generation": 0,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Check if a given string has a length equal to or greater than the target length\"\"\"\n    return len(s) >= target_length\ndef g(target_length=10):\n    return \"Hello, World!\"\nassert f(g())\n",
        "idx_generation": 30,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], a=10, b=20) -> bool:\n    \"\"\"Check if all elements in x are within the given range\"\"\"\n    return all((a <= i <= b for i in x))\ndef g(a=10, b=20):\n    return [15, 18, 12, 20, 10]\nassert f(g())\n",
        "idx_generation": 116,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return li == li[::-1]\ndef g():\n    return [1, 2, 3, 2, 1]\nassert f(g())\n",
        "idx_generation": 126,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a given number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 117,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, words=[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]) -> bool:\n    \"\"\"Check if the given word exists in the list of words.\"\"\"\n    return word in words\n\ndef g(words=[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]):\n    return words[2]\n\nassert f(g())\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the given number is present in the list.\"\"\"\n    return n in lst\ndef g(lst=[1, 2, 3, 4, 5]):\n    return 3\nassert f(g())\n",
        "idx_generation": 146,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\n\ndef f(lst: List[int], subset_sum: int) -> bool:\n    \"\"\"Check if there exists a subset of numbers in the given list whose sum is equal to the subset_sum.\"\"\"\n    for r in range(1, len(lst) + 1):\n        for subset in itertools.combinations(lst, r):\n            if sum(subset) == subset_sum:\n                return True\n    return False\n\ndef g():\n    lst = [1, 2, 3, 4, 5]\n    subset_sum = 9\n    return lst, subset_sum\n\nassert f(*g())\n",
        "idx_generation": 390,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"Given a string, determine if it contains a substring and if the substring appears at least twice.\"\"\"\n    return substr in string and string.count(substr) >= 2\n\ndef g(substr='abc'):\n    return substr + 'xyz' + substr + '123'\n\nassert f(g())\n",
        "idx_generation": 155,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int]) -> bool:\n    \"\"\"Check if the given list contains both even and odd numbers.\"\"\"\n    even = False\n    odd = False\n    for num in x:\n        if num % 2 == 0:\n            even = True\n        else:\n            odd = True\n    return even and odd\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[str], target=\"abcde\", max_length=5, options=[\"a\", \"b\", \"c\", \"d\", \"e\"]) -> bool:\n    \"\"\"Find a combination of at most max_length strings whose concatenation is equal to the target value.\"\"\"\n    for word in numbers:\n        assert word in options\n    concat = \"\".join(numbers)\n    return len(concat) <= max_length and concat == target\ndef g(target=\"abcde\", max_length=5, options=[\"a\", \"b\", \"c\", \"d\", \"e\"]):\n    from itertools import combinations\n    for n in range(max_length + 1):\n        for c in combinations(options, n):\n            concat = \"\".join(c)\n            if concat == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a diagonal matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if i != j:\n                if matrix[i][j] != 0:\n                    return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\nassert f(g())\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(x: List[int], t=1234, a=3, e=7, s=1) -> bool:\n    \"\"\"Check if the sum of sublist values matches the target value and if all non-zero values are unique\"\"\"\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\n\ndef g(t=1234, a=3, e=7, s=1):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\n\nassert f(g())\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc', count=2) -> bool:\n    \"\"\"Check if a given string contains at least a specified number of occurrences of a specified substring.\"\"\"\n    return s.count(substring) >= count\n\ndef g(substring='abc', count=2):\n    return 'abcaabcbabcabc'\n\nassert f(g())\n",
        "idx_generation": 58,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import *\ndef f(x: str, n=4, k=3) -> bool:\n    \"\"\"Check if a string has a specific number of vowels and consonants\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count_vowels = 0\n    count_consonants = 0\n    for char in x:\n        if char.lower() in vowels:\n            count_vowels += 1\n        else:\n            count_consonants += 1\n    return count_vowels == n and count_consonants == k\n\ndef g(n=4, k=3):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    result = \"\"\n    for _ in range(n):\n        result += random.choice(vowels)\n    for _ in range(k):\n        result += random.choice(consonants)\n    return result\n\nassert f(g())\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5, m=2) -> bool:\n    \"\"\"Check if the length of s is divisible by the sum of n and m\"\"\"\n    return len(s) % (n + m) == 0\ndef g(n=5, m=2):\n    return \"a\" * (n + m)\nassert f(g())\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if the given number is divisible by any prime number in the list and is not divisible by all the numbers in the list\"\"\"\n    for prime in primes:\n        if n % prime == 0:\n            return False\n    return True\n\ndef g(primes=[2, 3, 5, 7, 11, 13]):\n    n = 1\n    for prime in primes:\n        n *= prime\n    return n + 1\n\nassert f(g())\n",
        "idx_generation": 171,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum: int = 10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the matrix that sums up to the target sum.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[0])):\n                    if i != k and j != l and matrix[i][j] + matrix[k][l] == target_sum:\n                        return True\n    return False\ndef g(target_sum: int = 10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 90,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a=[True, True, False, True], b=[True, False, False, True]) -> bool:\n    \"\"\"Check if a given boolean value is present in both lists a and b\"\"\"\n    return s in a and s in b\ndef g(a=[True, True, False, True], b=[True, False, False, True]):\n    return next((value for value in b if value in a))\nassert f(g())\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a magic square\"\"\"\n    n = len(matrix)\n    sum_rows = [sum(row) for row in matrix]\n    sum_cols = [sum(col) for col in zip(*matrix)]\n    sum_diagonal1 = sum(matrix[i][i] for i in range(n))\n    sum_diagonal2 = sum(matrix[i][n - i - 1] for i in range(n))\n    return all(sum_rows[i] == sum_cols[i] == sum_diagonal1 == sum_diagonal2 for i in range(n))\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nassert f(g())\n",
        "idx_generation": 271,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(nums: List[int], n=5) -> bool:\n    \"\"\"Check if the given list contains a perfect square when raised to the power of n.\"\"\"\n    for num in nums:\n        if num ** n == int(sqrt(num ** n)) ** 2:\n            return True\n    return False\n\ndef g(n=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 261,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=10, m=2) -> bool:\n    \"\"\"Check if the length of s is greater than or equal to the product of n and m\"\"\"\n    return len(s) >= (n * m)\ndef g(n=10, m=2):\n    return \"a\" * (n * m)\nassert f(g())\n",
        "idx_generation": 231,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number n is a perfect square.\"\"\"\n    root = math.isqrt(n)\n    return root * root == n\n\ndef g():\n    return (16,)\n\nassert f(*g())\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a strictly increasing sequence.\"\"\"\n    for i in range(len(nums) - 1):\n        if nums[i] >= nums[i + 1]:\n            return False\n    return True\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 116,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(s: str, target_len=5) -> bool:\n    \"\"\"Check if there exists a substring in a string with a length equal to the target length that is a palindrome.\"\"\"\n    for i in range(len(s) - target_len + 1):\n        substring = s[i:i+target_len]\n        if substring == substring[::-1]:\n            return True\n    return False\n\ndef g(target_len=5):\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, separator: str) -> bool:\n    \"\"\"Check if a given string can be split into two parts by a given separator.\"\"\"\n    return separator in s\n\ndef g(separator: str):\n    s = \"Hello,World!\"\n    return s, separator\n\nassert f(*g(\",\"))\n",
        "idx_generation": 313,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_product=24) -> bool:\n    \"\"\"Given a list of numbers, check if there exists a triplet of numbers whose product is equal to the target_product.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] * nums[j] * nums[k] == target_product:\n                    return True\n    return False\n\ndef g(target_product=24):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target_sum.\"\"\"\n    return any((numbers[i] + numbers[j] == target_sum for i in range(len(numbers)) for j in range(i+1, len(numbers))))\n    \ndef g(target_sum=100):\n    return random.sample(range(1, 101), 10)\n\nassert f(g())\n",
        "idx_generation": 210,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if n is present in the list.\"\"\"\n    return n in lst\ndef g(lst: List[int]):\n    return random.choice(lst), lst\nassert f(*g([1, 2, 3, 4, 5]))\n\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a permutation of the numbers from 1 to n\"\"\"\n    nums.sort()\n    return nums == list(range(1, len(nums) + 1))\n\ndef g():\n    return [2, 4, 1, 3]\n\nassert f(g())\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], k=2) -> List[int]:\n    \"\"\"Find all numbers in the given list that are divisible by k.\"\"\"\n    divisible_nums = []\n    for num in numbers:\n        if num % k == 0:\n            divisible_nums.append(num)\n    return divisible_nums\n\ndef g(k=2):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [2, 4, 6, 8, 10]\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, k=5) -> bool:\n    \"\"\"Check if the given number is divisible by k\"\"\"\n    return n % k == 0\n\ndef g(k=5):\n    return math.factorial(k)\n\nassert f(g())\n",
        "idx_generation": 104,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target_char=\"a\") -> bool:\n    \"\"\"Check if the target character is present in the string\"\"\"\n    return target_char in string\ndef g(target_char=\"a\"):\n    return \"algorithm\"\n\nassert f(g())\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Tuple\n\ndef f(t: Tuple[int, int, int], target_sum=100) -> bool:\n    \"\"\"Check if the sum of the three numbers in the tuple is equal to the target_sum\"\"\"\n    return sum(t) == target_sum\n\ndef g(target_sum=100):\n    return (30, 40, 30)\n\nassert f(g())\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(result: int, n: int = 100, limit: int = 10) -> bool:\n    \"\"\"Find the result of applying the following operation to the number n, until it becomes zero or reaches the limit:\n    * If n is a perfect square, subtract the square root of n\n    * If n is divisible by 4, divide it by 4\n    * If n is divisible by 9, subtract 9\n    \"\"\"\n    import math\n\n    def is_perfect_square(num):\n        if num < 0:\n            return False\n        sqrt_num = int(math.sqrt(num))\n        return sqrt_num * sqrt_num == num\n\n    while n > 0 and n != limit:\n        if is_perfect_square(n):\n            n = n - int(math.sqrt(n))\n        elif n % 4 == 0:\n            n = n // 4\n        elif n % 9 == 0:\n            n = n - 9\n        else:\n            break\n    return result == n\n\ndef g(n: int = 100, limit: int = 10):\n    import math\n\n    def is_perfect_square(num):\n        if num < 0:\n            return False\n        sqrt_num = int(math.sqrt(num))\n        return sqrt_num * sqrt_num == num\n\n    while n > 0 and n != limit:\n        if is_perfect_square(n):\n            n = n - int(math.sqrt(n))\n        elif n % 4 == 0:\n            n = n // 4\n        elif n % 9 == 0:\n            n = n - 9\n        else:\n            break\n    return n\n\nassert f(g())\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is present in the sequence.\"\"\"\n    return n in seq\n\ndef g(seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return seq[5]\n\nassert f(g())\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t='python') -> bool:\n    \"\"\"Given two strings s and t, determine if t is a substring of s in reverse order\"\"\"\n    return t[::-1] in s\n\ndef g(t='python'):\n    return \"nohtyp\"\n\nassert f(g())\n",
        "idx_generation": 107,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nimport re\nfrom typing import List\n\ndef f(expressions: List[str], allowed_operators=['+', '-', '*', '/']) -> bool:\n    \"\"\"Check if all of the expressions in the list are valid mathematical expressions.\n    Each expression should only contain digits and allowed_operators, and should have a correct syntax.\"\"\"\n    pattern = r'^[\\d\\s' + re.escape(''.join(allowed_operators)) + ']+$'\n    for expression in expressions:\n        if not re.match(pattern, expression) and not re.match(r'^[\\d\\s]+$', expression):\n            return False\n    return True\n\ndef g(allowed_operators=['+', '-', '*', '/']):\n    return ['2 + 3', '4 * 6 - 2', '8 / 2']\n\nassert f(g())\n",
        "idx_generation": 306,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_char='a') -> bool:\n    \"\"\"Given a string, check if the target_char appears as the first character of any word in the string.\"\"\"\n    words = s.split()\n    for word in words:\n        if word[0] == target_char:\n            return True\n    return False\n\ndef g(target_char='a'):\n    return \"apple banana cherry date\"\n    \nassert f(g())\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target_sum=100) -> bool:\n    \"\"\"Find a combination of numbers from num_list that adds up to the target_sum.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target_sum for comb in combinations(num_list, 2))\ndef g(target_sum=100):\n    return [50, 50]\nassert f(g())\n",
        "idx_generation": 18,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Check if the product of any two distinct elements in the list is equal to n.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] == n:\n                return True\n    return False\n\ndef g(n=5):\n    return [i for i in range(-n, n+1)]\n\nassert f(g())\n",
        "idx_generation": 216,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that have a difference of exactly k.\"\"\"\n    return any(abs(nums[i] - nums[j]) == k for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(k=3):\n    return [1, 5, 3, 8, 2]\nassert f(g())\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, t=100, upper=100) -> bool:\n    \"\"\"Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper\ndef g(t=100, upper=100):\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\nassert f(g())\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if the string length is a multiple of n.\"\"\"\n    return len(s) % n == 0\n\ndef g(n=4):\n    return \"PythonPuzzle\"\n\nassert f(g())\n",
        "idx_generation": 171,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\n\ndef f(names: List[str], target_name='Alice') -> bool:\n    \"\"\"Check if the target_name appears in the list of names.\"\"\"\n    return target_name in names\n\ndef g(target_name='Alice'):\n    names = ['Bob', 'Charlie', 'Dave', 'Eve', 'Frank', 'Grace', 'Hannah', 'Alice']\n    return random.sample(names, len(names))\n\nassert f(g()) == True\n\n",
        "idx_generation": 474,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form a Fibonacci sequence.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+2] == arr[i+j] + arr[i+j+1] for j in range(k-2)):\n            return True\n    return False\n\ndef g(k=3):\n    return [0, 1, 1, 2, 3, 5, 8]\n\nassert f(g())\n",
        "idx_generation": 134,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix. A matrix is symmetric if it is equal to its transpose.\"\"\"\n    transpose = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n    return matrix == transpose\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=3141592653589793, b=2718281828459045) -> bool:\n    \"\"\"Check if the sum of x and a is divisible by b\"\"\"\n    return (x + a) % b == 0\n\ndef g(a=3141592653589793, b=2718281828459045):\n    return b - a\n\nassert f(g())\n",
        "idx_generation": 242,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='hello') -> bool:\n    \"\"\"Check if a word appears at the beginning of a string.\"\"\"\n    return s.startswith(word)\ndef g(word='hello'):\n    return word + \" World\"\nassert f(g())\n",
        "idx_generation": 136,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, num_list=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if n is a perfect square and is present in the given list.\"\"\"\n    if n < 0:\n        return False\n    if int(sqrt(n)) ** 2 != n:\n        return False\n    return n in num_list\n\ndef g(num_list=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    for num in num_list:\n        if int(sqrt(num)) ** 2 == num:\n            return num\n    return num_list[0]\n\nassert f(g())\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='coding') -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substring in s\n\ndef g(substring='coding'):\n    return 'This is a coding challenge'\n\nassert f(g())\n",
        "idx_generation": 32,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers contains any duplicate elements\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 5]\n\nassert f(g())\n",
        "idx_generation": 155,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, seq=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) -> bool:\n    \"\"\"Check if the given number is present in the sequence.\"\"\"\n    return n in seq\n\ndef g(seq=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]):\n    return seq[2]\n\nassert f(g())\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if the target value exists in the given matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 12,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Dict\n\ndef f(records: List[Dict[str, int]], key='score') -> bool:\n    \"\"\"Check if all records in the list have a value greater than or equal to 80 for the specified key.\"\"\"\n    return all(record[key] >= 80 for record in records)\n\ndef g(key='score'):\n    return [{'name': 'Alice', 'score': 90}, {'name': 'Bob', 'score': 80}, {'name': 'Charlie', 'score': 110}]\n\nassert f(g())\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if any two numbers in the list add up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 20,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that are all even\"\"\"\n    count = 0\n    for num in nums:\n        if num % 2 == 0:\n            count += 1\n            if count == k:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(k=3):\n    return [1, 2, 4, 6, 8, 10, 12, 14, 16]\n\nassert f(g())\n",
        "idx_generation": 13,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=100, b=500) -> bool:\n    \"\"\"Check if the given number is divisible by any number between a and b (inclusive).\"\"\"\n    return any(n % i == 0 for i in range(a, b+1))\ndef g(a=100, b=500):\n    return (a + b) // 2\nassert f(g())\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(points: List[List[int]], target_area=20) -> bool:\n    \"\"\"Check if there is a rectangle in the list of points that has an area greater than or equal to the target_area.\"\"\"\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            width = abs(points[i][0] - points[j][0])\n            height = abs(points[i][1] - points[j][1])\n            area = width * height\n            if area >= target_area:\n                return True\n    return False\n\ndef g(target_area=20):\n    return [[1, 2], [3, 4], [5, 6], [7, 8]]\n\nassert f(g())\n",
        "idx_generation": 205,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], target='abc') -> bool:\n    \"\"\"Find a string in the list that is an anagram of the target string.\"\"\"\n    return any((sorted(string) == sorted(target)) for string in strings)\ndef g(target='abc'):\n    return ['cba', 'xyz', 'bac', 'def']\nassert f(g())\n",
        "idx_generation": 37,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome\"\"\"\n    return numbers == numbers[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 31,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the sum of the first half of the given list is equal to the sum of the second half\"\"\"\n    midpoint = len(numbers) // 2\n    return sum(numbers[:midpoint]) == sum(numbers[midpoint:])\n\ndef g():\n    return [1, 2, 3, 4, 5, 5, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 151,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if the given number is a prime number or not.\"\"\"\n    if n < 2:\n        return False\n    if n in nums:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 29\n\nassert f(g())\n",
        "idx_generation": 209,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form a geometric sequence.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+1] / arr[i+j] == arr[i+1] / arr[i] for j in range(k-1)):\n            return True\n    return False\n\ndef g(k=3):\n    return [1, 2, 4, 8, 16]\n\nassert f(g())\n",
        "idx_generation": 133,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target=5) -> bool:\n    \"\"\"Check if there exists a word in the list that has exactly target length\"\"\"\n    for word in words:\n        if len(word) == target:\n            return True\n    return False\n\ndef g(target=5):\n    return ['apple', 'banana', 'pear', 'kiwi', 'grape', 'melon', 'orange']\n\nassert f(g())\n",
        "idx_generation": 44,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, numbers=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers from a list that has a sum equal to a given number.\"\"\"\n    return any((num1 + num2 == target for num1 in numbers for num2 in numbers))\ndef g(numbers=[1, 2, 3, 4, 5], target=10):\n    return numbers\nassert f(g())\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order.\"\"\"\n    return all(li[i] <= li[i + 1] for i in range(len(li) - 1))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int, p: int, q: int) -> bool:\n    \"\"\"Check if the sum of digits in n is equal to m, and p is a multiple of q.\"\"\"\n    def sum_of_digits(num):\n        return sum([int(d) for d in str(num)])\n\n    return sum_of_digits(n) == m and p % q == 0\n\ndef g():\n    return (12345, 15, 6, 3)\n\nassert f(*g())\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(words: List[str], prefix='pre', suffix='fix') -> bool:\n    \"\"\"Check if any word in the given list has the given prefix and suffix.\"\"\"\n    for word in words:\n        if word.startswith(prefix) and word.endswith(suffix):\n            return True\n    return False\n\ndef g(prefix='pre', suffix='fix'):\n    return ['prefix', 'sufix', 'prefx', 'sufixx']\n\nassert f(g()) == True\n\n",
        "idx_generation": 168,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3]) -> bool:\n    \"\"\"Check if the given number is present in a list.\"\"\"\n    return n in lst\ndef g(lst=[1, 2, 3]):\n    return 2\nassert f(g())\n",
        "idx_generation": 219,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subsequence of the given list whose sum is equal to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(nums: List[int] = [10, 20, 30, 40, 50], target=100):\n    return (nums, target)\n\nassert f(*g())\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5, m=2) -> bool:\n    \"\"\"Check if the string s contains exactly n occurrences of the character 'a' and m occurrences of the character 'b'.\"\"\"\n    count_a = s.count('a')\n    count_b = s.count('b')\n    return count_a == n and count_b == m\ndef g(n=5, m=2):\n    return 'a' * n + 'b' * m\nassert f(g())\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains three consecutive numbers.\"\"\"\n    for i in range(len(nums)-2):\n        if nums[i] + 1 == nums[i+1] and nums[i+1] + 1 == nums[i+2]:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 283,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[111, 222, 333], upper_bound=1000000000000000000) -> bool:\n    \"\"\"Find a number that is divisible by any of the numbers in a list.\"\"\"\n    return any((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums=[111, 222, 333], upper_bound=1000000000000000000):\n    ans = 1\n    for i in nums:\n        ans *= i\n    return ans\nassert f(g())\n",
        "idx_generation": 18,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=1, b=100) -> bool:\n    \"\"\"Check if the given number is divisible by any of the odd numbers within the range of a to b (inclusive).\"\"\"\n    return any(n % i == 0 for i in range(a, b+1) if i % 2 != 0)\ndef g(a=1, b=100):\n    return (a + b) // 2\nassert f(g())\n",
        "idx_generation": 91,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: float, a=0.5, b=1.5) -> bool:\n    \"\"\"Check if x satisfies the given inequality\"\"\"\n    return (a < x <= b) or (b < x < a)\ndef g(a=0.5, b=1.5):\n    return b - a\nassert f(g())\n",
        "idx_generation": 6,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[str], target=\"abcde\", max_length=5, options=[\"a\", \"b\", \"c\", \"d\", \"e\"]) -> bool:\n    \"\"\"Find a combination of at most max_length strings whose concatenation is equal to the target value.\"\"\"\n    for word in numbers:\n        assert word in options\n    concat = \"\".join(numbers)\n    return len(concat) <= max_length and concat == target\ndef g(target=\"abcde\", max_length=5, options=[\"a\", \"b\", \"c\", \"d\", \"e\"]):\n    from itertools import combinations\n    for n in range(max_length + 1):\n        for c in combinations(options, n):\n            concat = \"\".join(c)\n            if concat == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], n: int = 0) -> bool:\n    \"\"\"Check if the sum of all elements in the matrix is equal to n.\"\"\"\n    return sum(sum(row) for row in matrix) == n\n\ndef g(n: int = 0):\n    return [[n]]\n\nassert f(g())\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a lower triangular matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if i < j:\n                if matrix[i][j] != 0:\n                    return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [2, 3, 0], [4, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='xyz', count=2, length=10) -> bool:\n    \"\"\"Find a string with a certain number of occurrences of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring='xyz', count=2, length=10):\n    return substring * count + 'a' * (length - len(substring) * count)\nassert f(g())\n",
        "idx_generation": 60,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, pattern='abc') -> bool:\n    \"\"\"Check if the given string contains the given pattern\"\"\"\n    return pattern in s\n\ndef g(s='abcxyzabc'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if the given number is divisible by any prime number in the list and is divisible by at least one number in the list\"\"\"\n    for prime in primes:\n        if n % prime == 0:\n            return True\n    return False\n\ndef g(primes=[2, 3, 5, 7, 11, 13]):\n    n = 1\n    for prime in primes:\n        n *= prime\n    return n\n\nassert f(g())\n",
        "idx_generation": 171,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of numbers and a target value, return True if there are two numbers in the list whose sum is equal to the target value. Return False otherwise.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 117,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(a: float, b: float, c: float, angle: float) -> bool:\n    \"\"\"Check if the given values of a, b, c, and angle form a valid triangle\"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if angle <= 0 or angle >= 180:\n        return False\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    return True\n\ndef g():\n    return (3, 4, 5, 90)\n\nassert f(*g())\n",
        "idx_generation": 260,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a sparse matrix\"\"\"\n    total_elements = len(matrix) * len(matrix[0])\n    zeros = sum(row.count(0) for row in matrix)\n    return zeros > total_elements // 2\ndef g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\nassert f(g())\n",
        "idx_generation": 271,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains two numbers whose sum is a perfect square.\"\"\"\n    squares = set([i*i for i in range(1, int(max(nums)**0.5)+1)])\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i]+nums[j] in squares:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 283,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string has exactly n consecutive vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(n=3):\n    return \"aeioou\"\n\nassert f(g())\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form an arithmetic sequence.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+1] - arr[i+j] == arr[i+1] - arr[i] for j in range(k-1)):\n            return True\n    return False\n\ndef g(k=3):\n    return [1, 3, 5, 7, 10]\n\nassert f(g())\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='pythonprogramming', length=6) -> bool:\n    \"\"\"Find a substring of the given length from the target string that starts with the letter 'p'.\"\"\"\n    return target[:length] == s and s[0] == 'p'\n\ndef g(target='pythonprogramming', length=6):\n    return target[:length]\n\nassert f(g())\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target: str) -> bool:\n    \"\"\"Check if the target word can be formed by concatenating two words from the given list.\"\"\"\n    word_set = set(words)\n    for word in words:\n        if target.startswith(word) and target[len(word):] in word_set:\n            return True\n    return False\n\ndef g():\n    return [\"apple\", \"banana\", \"cat\", \"dog\", \"elephant\"], \"applecat\"\n\nassert f(*g())\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is present as a factor in any of the numbers in the given list.\"\"\"\n    return any(num % target == 0 for num in lst)\n\ndef g(target: int) -> List[int]:\n    return [2, 4, 6, 8, 10]\n\nassert f(g(3), 3)\n",
        "idx_generation": 434,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=0) -> bool:\n    \"\"\"Given a list of numbers, find a pair of numbers whose difference is equal to the target_sum.\"\"\"\n    return any((abs(numbers[i] - numbers[j]) == target_sum for i in range(len(numbers)) for j in range(i+1, len(numbers))))\n\ndef g(target_sum=0):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g()) == False\n",
        "idx_generation": 212,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, return True if there exists a subarray whose sum is equal to zero, False otherwise.\"\"\"\n    prefix_sum = 0\n    sum_set = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum == 0 or prefix_sum in sum_set:\n            return True\n        sum_set.add(prefix_sum)\n    return False\ndef g():\n    return [4, -2, 1, -3, 2, -1, 5, -4]\nassert f(g())\n",
        "idx_generation": 125,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sums up to the target value\"\"\"\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n    \n    while left < right:\n        current_sum = nums[left] + nums[right]\n        \n        if current_sum == target:\n            return True\n        elif current_sum < target:\n            left += 1\n        else:\n            right -= 1\n    \n    return False\n\ndef g(nums=[-3, -2, -1, 0, 1, 2, 3], target=0):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 33,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the given list contains a subarray whose sum is divisible by n.\"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    \n    for num in lst:\n        prefix_sum = (prefix_sum + num) % n\n        if prefix_sum in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    \n    return False\n\ndef g():\n    return 3, [2, 4, 3, 1, 8, 6]\n\nassert f(*g())\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=5) -> bool:\n    \"\"\"Check if the given number is divisible by both a and b\"\"\"\n    return n % a == 0 and n % b == 0\n\ndef g(a=3, b=5):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 107,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_char='a') -> bool:\n    \"\"\"Check if the target character is present in the string.\"\"\"\n    return target_char in s.lower()\n\ndef g():\n    return (\"Hello, World!\", 'o')\n\nassert f(*g())\n",
        "idx_generation": 54,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square or not.\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Checking rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Checking columns\n    for j in range(n):\n        column_sum = sum(matrix[i][j] for i in range(n))\n        if column_sum != target_sum:\n            return False\n    \n    # Checking diagonals\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n    \n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g()) == True\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a diagonal matrix\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    if rows != cols:\n        return False\n\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\nassert f(g())\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(result: int, n: int = 100, limit: int = 10) -> bool:\n    \"\"\"Find the result of applying the following operation to the number n, until it becomes zero or reaches the limit:\n    * If n is a prime number, subtract the square root of n\n    * If n is divisible by 5, divide it by 5\n    * If n is divisible by 3, subtract 3\n    * If n is divisible by 2, divide it by 2\n    \"\"\"\n    import math\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    while n > 0 and n != limit:\n        if is_prime(n):\n            n = n - int(math.sqrt(n))\n        elif n % 5 == 0:\n            n = n // 5\n        elif n % 3 == 0:\n            n = n - 3\n        elif n % 2 == 0:\n            n = n // 2\n        else:\n            break\n    return result == n\n\ndef g(n: int = 100, limit: int = 10):\n    import math\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    while n > 0 and n != limit:\n        if is_prime(n):\n            n = n - int(math.sqrt(n))\n        elif n % 5 == 0:\n            n = n // 5\n        elif n % 3 == 0:\n            n = n - 3\n        elif n % 2 == 0:\n            n = n // 2\n        else:\n            break\n    return n\n\nassert f(g())\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, seq=[3, 6, 9, 12, 15, 18, 21, 24, 27, 30]) -> bool:\n    \"\"\"Check if the given number is present in the sequence.\"\"\"\n    return n in seq\n\ndef g(seq=[3, 6, 9, 12, 15, 18, 21, 24, 27, 30]):\n    return seq[3]\n\nassert f(g())\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, target='apple') -> bool:\n    \"\"\"Check if a given string `s` can be rearranged to form the target string 'apple'.\"\"\"\n    return sorted(s) == sorted(target)\n    \ndef g(target='apple'):\n    import random\n    s = list(target)\n    random.shuffle(s)\n    return ''.join(s)\n\nassert f(g())\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nimport re\nfrom typing import List\n\ndef f(expressions: List[str], allowed_operators=['+', '-', '*', '/']) -> bool:\n    \"\"\"Check if all of the expressions in the list are valid mathematical expressions.\n    Each expression should only contain digits and allowed_operators, and should have a correct syntax.\"\"\"\n    pattern = r'^[\\d\\s' + re.escape(''.join(allowed_operators)) + ']+$'\n    for expression in expressions:\n        if not re.match(pattern, expression) and not re.match(r'^[\\d\\s]+$', expression):\n            return False\n    return True\n\ndef g(allowed_operators=['+', '-', '*', '/']):\n    return ['5 / 2 + 1', '10 - 3 * 4', '5 + 7 / 2']\n\nassert f(g())\n",
        "idx_generation": 306,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='morning') -> bool:\n    \"\"\"Check if the characters of a word appear in the same order in a string.\"\"\"\n    i = 0\n    for char in s:\n        if char == word[i]:\n            i += 1\n        if i == len(word):\n            return True\n    return False\ndef g(word='morning'):\n    return \"Good \" + word\nassert f(g())\n",
        "idx_generation": 136,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a subset of the list that sums up to\n    the target number.\"\"\"\n    n = len(arr)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        dp[i][0] = True\n        for j in range(1, target + 1):\n            if arr[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j - arr[i - 1]] or dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\ndef g(arr=[2, 4, 6, 8], target=10):\n    return arr, target\nassert f(*g())\n",
        "idx_generation": 19,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if n is a power of m\"\"\"\n    if n == 0:\n        return False\n    while n != 1:\n        if n % m != 0:\n            return False\n        n = n // m\n    return True\n\ndef g():\n    return 16, 2\n\nassert f(*g())\n",
        "idx_generation": 260,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers such that their sum equals to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 89,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, t=50, upper=50) -> bool:\n    \"\"\"Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper\ndef g(t=50, upper=50):\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\nassert f(g())\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if a given character is present in the string.\"\"\"\n    return char in s\n\ndef g(char='a'):\n    return \"This is a test string\"\n\nassert f(g())\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exist k consecutive numbers in the list that are multiples of 5.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(is_multiple_of_5(arr[i+j]) for j in range(k)):\n            return True\n    return False\n\ndef g():\n    return [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\n\ndef is_multiple_of_5(num: int) -> bool:\n    return num % 5 == 0\n\nassert f(g())\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a prime sequence.\"\"\"\n    if len(numbers) < 2:\n        return False\n    for i in range(2, len(numbers)):\n        if not is_prime(numbers[i]):\n            return False\n    return True\n\ndef g():\n    return [2, 3, 5, 7, 11, 13, 17]\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nassert f(g())\n\n",
        "idx_generation": 146,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix. A matrix is symmetric if it is equal to its transpose.\"\"\"\n    n = len(matrix)\n    transpose = [[matrix[j][i] for j in range(n)] for i in range(n)]\n    return matrix == transpose\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 285,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=5) -> bool:\n    \"\"\"Check if the absolute value of x is equal to a\"\"\"\n    return abs(x) == a\ndef g(a=5):\n    return -a\nassert f(g())\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find the sum of all prime numbers less than n.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    sum_primes = 0\n    for i in range(2, n):\n        if is_prime(i):\n            sum_primes += i\n    return sum_primes\n\ndef g():\n    return 100\n\nassert f(g()) == 1060\n",
        "idx_generation": 90,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], letter='a', vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if any word in a list starts with a specific letter and contains any vowel.\"\"\"\n    return any(word.startswith(letter) and any(char in vowels for char in word) for word in words)\n\ndef g(letter='a', vowels=['a', 'e', 'i', 'o', 'u']):\n    return ['apple', 'banana', 'orange']\n\nassert f(g())\n",
        "idx_generation": 142,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\ndef f(n: int, a=1, b=20) -> bool:\n    \"\"\"Check if the given number is a perfect square within the range of a to b (inclusive).\"\"\"\n    return any(sqrt(n) == int(sqrt(n)) for n in range(a, b+1))\ndef g(a=1, b=20):\n    return a + b\nassert f(g())\n",
        "idx_generation": 91,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, pattern='') -> bool:\n    \"\"\"Check if the given pattern is a substring of the given string\"\"\"\n    return pattern in s\ndef g(pattern=''):\n    return \"Hello, World!\"  # Example input string\nassert f(g())\n",
        "idx_generation": 34,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains duplicate elements\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 1]\n\nassert f(g())\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, seq: List[int] = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Check if the given number is present in the sequence.\"\"\"\n    return n in seq\n\ndef g(seq: List[int] = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return seq[9]\n\nassert f(g())\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target value, find if there exists a pair of integers in the list whose sum is equal to the target value.\n    Return True if such a pair exists, False otherwise.\"\"\"\n    seen = set()\n    for num in li:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target=20) -> bool:\n    \"\"\"Check if there is a triplet of numbers in the list that multiply to the target number\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            for k in range(j+1, len(li)):\n                if li[i] * li[j] * li[k] == target:\n                    return True\n    return False\n\ndef g(target=20):\n    return [1, 2, 10, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Given a list of numbers, find a pair of distinct numbers that add up to the target_sum.\nSample Input:\n`[1, 2, 3, 4, 5]`\nSample Output:\n`(3, 7)`\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return (target_sum//2, target_sum - (target_sum//2))\n\nassert f(g())\n",
        "idx_generation": 16,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[5, 10, 15, 20, 25]) -> bool:\n    \"\"\"Find a number in the list that is divisible by n.\nSample Input:\n5\nSample Output:\nTrue\"\"\"\n    return any((num % n == 0 for num in nums))\ndef g(nums=[5, 10, 15, 20, 25]):\n    return next((num for num in nums if num % 5 == 0))\nassert f(g())",
        "idx_generation": 99,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\nfrom typing import List\n\ndef f(points: List[Tuple[int, int]]) -> bool:\n    \"\"\"Check if the given list of points forms a rectangle.\"\"\"\n    if len(points) != 4:\n        return False\n    lengths = []\n    for i in range(len(points)):\n        x1, y1 = points[i]\n        x2, y2 = points[(i+1) % 4]\n        length = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n        lengths.append(length)\n    return lengths[0] == lengths[2] and lengths[1] == lengths[3]\n\ndef g():\n    points = [(0, 0), (0, 2), (2, 2), (2, 0)]\n    return points\n\nassert f(g())\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if two strings are anagrams of each other.\"\"\"\n    return sorted(s1) == sorted(s2)\ndef g():\n    return (\"anagram\", \"nagaram\")\nassert f(*g())\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string contains a substring that is a palindrome of length n.\"\"\"\n    for i in range(len(s) - n + 1):\n        substring = s[i:i+n]\n        if substring == substring[::-1]:\n            return True\n    return False\ndef g(n=3):\n    return \"racecar\"\nassert f(g())\n",
        "idx_generation": 32,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a given list of numbers is a perfect square\"\"\"\n    return all(num**0.5 % 1 == 0 for num in nums)\n\ndef g():\n    return [1, 4, 9, 16, 25]\n\nassert f(g())\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"Check if the given number is a product of the factors.\"\"\"\n    for factor in factors:\n        while n % factor == 0:\n            n //= factor\n    return n == 1\n\ndef g(n=30):\n    return n\n\nassert f(g())\n",
        "idx_generation": 265,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(k: int, arr: List[int]) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form a geometric sequence.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+1] / arr[i+j] == arr[i+1] / arr[i] for j in range(k-1)):\n            return True\n    return False\n\ndef g(k=4):\n    return [1, 2, 4, 8, 16, 32, 64]\n\nassert f(k=4, arr=g())\n",
        "idx_generation": 168,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(characters: str, target_length=4) -> bool:\n    \"\"\"Check if there exists a combination of characters from the given string such that the length of the combination is equal to the target_length.\"\"\"\n    for i in range(1, len(characters) + 1):\n        for combination in itertools.combinations(characters, i):\n            if len(combination) == target_length:\n                return True\n    return False\n\ndef g(target_length=4):\n    return \"abcd\"\n\nassert f(g())\n",
        "idx_generation": 45,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a list of numbers such that the sum is equal to the target value\"\"\"\n    return sum(numbers) == target\n\ndef g(target=10):\n    return [1, 2, 3, 4]\n    \nassert f(g())\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], n=0) -> bool:\n    \"\"\"Check if the list contains exactly n even numbers.\"\"\"\n    return len([x for x in li if x % 2 == 0]) == n\n\ndef g(n=0):\n    return [2*i for i in range(1, n+1)]\n\nassert f(g(n=5), n=5)\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=100, increment=10) -> bool:\n    \"\"\"Check if the given number n is divisible by the target number and increments by a specific value.\"\"\"\n    return n % target == 0 and n % increment == 0\ndef g(target=100, increment=10):\n    return target * increment\nassert f(g())\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word='elephant') -> bool:\n    \"\"\"Check if the target word is present in the list of words.\"\"\"\n    return target_word in words\ndef g(target_word='elephant'):\n    return ['lion', 'tiger', 'bear', 'elephant']\nassert f(g())\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if the given number is present in the list.\"\"\"\n    return n in lst\n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return 5\n\nassert f(g()) == True\n\n",
        "idx_generation": 225,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='xyz', count=20, length=100) -> bool:\n    \"\"\"Find a string that contains a certain number of copies of a given substring and is of a certain length.\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring='xyz', count=20, length=100):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * '-'\nassert f(g())\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a list of numbers contains at least one even number.\"\"\"\n    for num in nums:\n        if num % 2 == 0:\n            return True\n    return False\n\ndef g():\n    return [1, 3, 5, 7, 9, 11, 13, 15, 17, 18]\n\nassert f(g())\n",
        "idx_generation": 292,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(x: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a given number x is a multiple of any number in the list nums.\"\"\"\n    return any(x % num == 0 for num in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return random.choice(nums)\nassert f(g())\n",
        "idx_generation": 19,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Check if the given number n is divisible by both a and b.\"\"\"\n    return n % a == 0 and n % b == 0\n\ndef g(a=2, b=3):\n    n = math.lcm(a, b)\n    return n\n\nassert f(g())\n",
        "idx_generation": 114,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[str], target=\"abcde\", max_length=5, options=[\"a\", \"b\", \"c\", \"d\", \"e\"]) -> bool:\n    \"\"\"Find a combination of at most max_length strings whose concatenation is equal to the target value.\"\"\"\n    for word in numbers:\n        assert word in options\n    concat = \"\".join(numbers)\n    return len(concat) <= max_length and concat == target\ndef g(target=\"abcde\", max_length=5, options=[\"a\", \"b\", \"c\", \"d\", \"e\"]):\n    from itertools import combinations\n    for n in range(max_length + 1):\n        for c in combinations(options, n):\n            concat = \"\".join(c)\n            if concat == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=10, target=100) -> bool:\n    \"\"\"Find a list of n integers that sum up to target\"\"\"\n    return len(x) == n and sum(x) == target and all([a > 0 for a in x])\ndef g(n=10, target=100):\n    return [target // n] * n\nassert f(g())\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a lower triangular matrix.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [2, 3, 0], [4, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, num=2, char='a') -> bool:\n    \"\"\"Given a string, return True if the count of a specific character in the string is greater than or equal to a certain number, False otherwise.\"\"\"\n    count = string.count(char)\n    return count >= num\n    \ndef g(num=2, char='a'):\n    return \"abracadabra\"\n\nassert f(g())\n",
        "idx_generation": 71,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string contains all unique characters and has a length that is divisible by a given number\"\"\"\n    return len(set(s)) == len(s) and len(s) % n == 0\ndef g(n=3):\n    return ''.join(chr(97 + i) for i in range(n))\nassert f(g())\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if a given number is a prime number\"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if n % prime == 0:\n            return False\n    return True\ndef g(primes=[2, 3, 5, 7, 11, 13]):\n    n = 17\n    return n\nassert f(g())\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target value\"\"\"\n    nums.sort()\n    for i in range(len(nums) - 2):\n        left = i + 1\n        right = len(nums) - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g() -> Tuple[List[int], int]:\n    return ([1, 2, 3, 4, 5], 9)\n\nassert f(*g())\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(a: float, b: float, c: float, angle: float) -> bool:\n    \"\"\"Check if the given values of a, b, c, and angle form a valid triangle\"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if angle <= 0 or angle >= 180:\n        return False\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    return True\n\ndef g():\n    return (5, 12, 13, 90)\n\nassert f(*g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a symmetric matrix, where the element at row i and column j is equal to the element at row j and column i.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if all numbers in the list are perfect squares.\"\"\"\n    for num in numbers:\n        if sqrt(num) != int(sqrt(num)):\n            return False\n    return True\n\ndef g():\n    return [4, 9, 16, 25, 36]\n\nassert f(g())\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(k: int, arr: List[int]) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form an arithmetic sequence.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+1] - arr[i+j] == arr[i+1] - arr[i] for j in range(k-1)):\n            return True\n    return False\n\ndef g(k=3):\n    return [1, 3, 5, 7, 9]\n\nassert f(k=3, arr=g())\n",
        "idx_generation": 134,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom collections import Counter\n\ndef f(string: str, k=2) -> bool:\n    \"\"\"Check if the given string contains any characters that occur exactly k times and are adjacent to each other.\"\"\"\n    char_counts = Counter(string)\n    for i in range(len(string)-1):\n        if char_counts[string[i]] == k and string[i] == string[i+1]:\n            return True\n    return False\n\ndef g():\n    return \"aabbccddeeff\"\n\nassert f(g())\n",
        "idx_generation": 407,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"Given a list of integers, return the product of all the numbers in the list.\"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 120\n\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], n=10) -> bool:\n    \"\"\"Check if the difference between any two distinct elements in the list is equal to n.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) == n:\n                return True\n    return False\n\ndef g(n=10):\n    return [i for i in range(-n, n+1)]\n\nassert f(g())\n",
        "idx_generation": 216,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list of integers contains a pair whose sum is divisible by 10.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] + arr[j]) % 10 == 0:\n                return True\n    return False\n\ndef g():\n    return [12, 34, 56, 78, 90]\n\nassert f(g())\n",
        "idx_generation": 204,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in a list that sums up to the target value\"\"\"\n    nums.sort()\n    \n    for i in range(len(nums) - 2):\n        left = i + 1\n        right = len(nums) - 1\n        \n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            \n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    \n    return False\n\ndef g(nums=[-1, 0, 1, 2, -1, -4], target=0):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 33,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3, c=5) -> bool:\n    \"\"\"Check if the given number is divisible by all three given numbers\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\n\ndef g(a=2, b=3, c=5):\n    return a * b * c\n\nassert f(g())\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    \"\"\"Check if there exists a word in the list that is a palindrome\"\"\"\n    return any(word == word[::-1] for word in words)\n\ndef g(words: List[str]):\n    return words + [word[::-1] for word in words]\n\nassert f(g([\"racecar\", \"hello\", \"level\"]))\n",
        "idx_generation": 79,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    for row in matrix:\n        if len(row) != rows:\n            return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(result: int, n: int = 100, limit: int = 10) -> bool:\n    \"\"\"Find the result of applying the following operation to the number n, until it becomes zero or reaches the limit:\n    * If n is a prime number, subtract the square root of n\n    * If n is divisible by 5, divide it by 5\n    * If n is divisible by 3, subtract 3\n    * If n is divisible by 2, divide it by 2\n    \"\"\"\n    import math\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    while n > 0 and n != limit:\n        if is_prime(n):\n            n = n - int(math.sqrt(n))\n        elif n % 5 == 0:\n            n = n // 5\n        elif n % 3 == 0:\n            n = n - 3\n        elif n % 2 == 0:\n            n = n // 2\n        else:\n            break\n    return result == n\n\ndef g(n: int = 100, limit: int = 10):\n    import math\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    while n > 0 and n != limit:\n        if is_prime(n):\n            n = n - int(math.sqrt(n))\n        elif n % 5 == 0:\n            n = n // 5\n        elif n % 3 == 0:\n            n = n - 3\n        elif n % 2 == 0:\n            n = n // 2\n        else:\n            break\n    return n\n\nassert f(g())\n",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n=10, m=2) -> bool:\n    \"\"\"Check if the sum of elements in the list is divisible by the product of n and m\"\"\"\n    return sum(lst) % (n * m) == 0\ndef g(n=10, m=2):\n    return [n] * m\nassert f(g())\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nimport re\nfrom typing import List\n\ndef f(expressions: List[str], allowed_operators=['+', '-', '*', '/']) -> bool:\n    \"\"\"Check if all of the expressions in the list are valid mathematical expressions.\n    Each expression should only contain digits and allowed_operators, and should have a correct syntax.\"\"\"\n    pattern = r'^[\\d\\s' + re.escape(''.join(allowed_operators)) + ']+$'\n    for expression in expressions:\n        if not re.match(pattern, expression) and not re.match(r'^[\\d\\s]+$', expression):\n            return False\n    return True\n\ndef g(allowed_operators=['+', '-', '*', '/']):\n    return ['9 * 2 - 3', '12 - 4 * 2', '8 + 6 / 3']\n\nassert f(g())\n",
        "idx_generation": 306,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if the given word has an even number of characters and is in the list of words.\"\"\"\n    return len(s) % 2 == 0 and s in words\n\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return words[2]\n\nassert f(g())\n",
        "idx_generation": 154,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10], target=20) -> bool:\n    \"\"\"Find if it is possible to select n numbers from the list such that their sum is equal to the target.\"\"\"\n    from itertools import combinations\n    for combination in combinations(nums, n):\n        if sum(combination) == target:\n            return True\n    return False\ndef g(nums=[2, 4, 6, 8, 10], target=20):\n    for n in range(1, len(nums) + 1):\n        if f(n, nums, target):\n            return n\n    return 0\nassert f(g())\n",
        "idx_generation": 23,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Determine if the number n can be expressed as a power of m\"\"\"\n    power = 0\n    while m**power <= n:\n        if m**power == n:\n            return True\n        power += 1\n    return False\n\ndef g(m=10):\n    return m\n\nassert f(g())\n\n",
        "idx_generation": 290,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers such that their product equals to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        if num == 0 and target == 0:\n            return True\n        if target % num == 0 and target // num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 89,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, t=150, upper=150) -> bool:\n    \"\"\"Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper\ndef g(t=150, upper=150):\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\nassert f(g())\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\nfrom typing import List\n\ndef f(emails: List[str], domain='gmail.com') -> bool:\n    \"\"\"Check if any of the email addresses in the list belong to the given domain.\"\"\"\n    pattern = r\"[a-zA-Z0-9._%+-]+@\" + re.escape(domain) + \"$\"\n    return any(re.match(pattern, email) for email in emails)\n\ndef g(domain='gmail.com'):\n    return ['john@gmail.com', 'jane@yahoo.com', 'alex@gmail.com']\nassert f(g())\n",
        "idx_generation": 177,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Find k positive integers such that each integer divides (the sum of the rest plus 1).\"\"\"\n    def sum(nums) -> bool:\n        ans = 0\n        for i in nums:\n            ans += i\n        return ans\n    return min(nums) > 1 and len(nums) == k and all(((1 + sum(nums[:i] + nums[i + 1:])) % nums[i] == 0 for i in range(k)))\ndef g(k=5):\n    n = 2\n    sum = 0\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        sum += n\n        n = sum + 1\n    return ans\nassert f(g())\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=5, b=10) -> bool:\n    \"\"\"Check if the value of x is a multiple of a and b\"\"\"\n    return x % a == 0 and x % b == 0\n\ndef g(a=5, b=10):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=1000) -> bool:\n    \"\"\"Check if n is divisible by any number between 1 and m (inclusive).\"\"\"\n    for i in range(1, m+1):\n        if n % i == 0:\n            return True\n    return False\n\ndef g(m=1000):\n    return m * 5\n\nassert f(g())\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(strings: List[str], target='python', max_length=10) -> bool:\n    \"\"\"Find a combination of at most max_length strings whose concatenation is equal to the target value.\"\"\"\n    for string in strings:\n        assert len(string) > 0\n    for i in range(len(strings)):\n        if strings[i] == target:\n            return True\n    for n in range(1, max_length + 1):\n        for combination in itertools.combinations(strings, n):\n            if ''.join(combination) == target:\n                return True\n    return False\n\ndef g(strings=['py', 'th', 'on'], target='python', max_length=10):\n    return strings\n\nassert f(g())\n",
        "idx_generation": 147,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=5) -> bool:\n    \"\"\"Check if the given number n is a perfect square and divisible by k.\"\"\"\n    return n ** 0.5 % 1 == 0 and n % k == 0\n\ndef g(k=5):\n    n = k ** 2\n    return n\n\nassert f(g())\n",
        "idx_generation": 115,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr=\"abc\") -> bool:\n    \"\"\"Given a string and a substring, return True if the substring exists in the string, and False otherwise.\"\"\"\n    return substr in s\ndef g(s=\"abcdefg\"):\n    return s\nassert f(g())\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers contains a duplicate.\"\"\"\n    return len(set(nums)) != len(nums)\n\ndef g():\n    return [1, 2, 3, 2, 4]\n\nassert f(g())\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers contains a subsequence that has a maximum sum\"\"\"\n    max_sum = 15\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if sum(numbers[i:j]) > max_sum:\n                return True\n    return False\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7]\nassert f(g())\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target value exists in the given matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g():\n    return ([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5)\n\nassert f(*g())\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10], target=30) -> bool:\n    \"\"\"Find n such that the product of n and all numbers in the list nums is equal to the target value\"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return n * product == target\ndef g(nums=[2, 4, 6, 8, 10], target=30):\n    product = 1\n    for num in nums:\n        product *= num\n    return target / product\nassert f(g())\n",
        "idx_generation": 23,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=4) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that are all odd\"\"\"\n    count = 0\n    for num in nums:\n        if num % 2 != 0:\n            count += 1\n            if count == k:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(k=4):\n    return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n\nassert f(g())\n",
        "idx_generation": 16,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[10, 15, 20, 25, 30], k=3) -> bool:\n    \"\"\"Given a list of integers and an integer k, determine if the kth element is divisible by n.\"\"\"\n    assert len(nums) >= k, 'Hint: k is within the range of the list length'\n    return nums[k-1] % n == 0\n\ndef g(nums=[10, 15, 20, 25, 30], k=3):\n    return nums[k-1]\n\nassert f(g())\n",
        "idx_generation": 114,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]]) -> bool:\n    \"\"\"Check if the given list of points forms a rectangle.\"\"\"\n    if len(points) == 4:\n        x_values = [point[0] for point in points]\n        y_values = [point[1] for point in points]\n        if len(set(x_values)) == 2 and len(set(y_values)) == 2:\n            return True\n    return False\n\ndef g():\n    return [(0, 0), (0, 1), (1, 0), (1, 1)]\n\nassert f(g())\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if a given word is present in a list of words.\"\"\"\n    return s in words\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return words[0]\nassert f(g())\n",
        "idx_generation": 95,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    return 'racecar'\nassert f(g())\n",
        "idx_generation": 37,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(a: List[int], b: List[int]) -> bool:\n    \"\"\"Check if any element in list a is divisible by all elements in list b.\"\"\"\n    return any(all(i % j == 0 for j in b) for i in a)\n\ndef g():\n    return [15, 30, 45, 60], [3, 5, 15]\n\nassert f(*g())\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[10, 20, 30, 40, 50]) -> bool:\n    \"\"\"Check if the given number is present in the list of integers.\"\"\"\n    return n in nums\n\ndef g(nums=[10, 20, 30, 40, 50]):\n    return 30\n\nassert f(g())\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=4) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form a geometric sequence.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+1] / arr[i+j] == arr[i+1] / arr[i] for j in range(k-1)):\n            return True\n    return False\n\ndef g():\n    return [2, 4, 8, 16, 32, 64]\n\nassert f(g())\n\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a=['apple', 'banana', 'cherry'], b=['cherry', 'durian', 'elderberry']) -> bool:\n    \"\"\"Check if a given string is present in both lists a and b\"\"\"\n    return s in a and s in b\ndef g(a=['apple', 'banana', 'cherry'], b=['cherry', 'durian', 'elderberry']):\n    return next((s for s in b if s in a))\nassert f(g())\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum: int = 100) -> List[List[int]]:\n    \"\"\"Find all pairs of numbers in the list that add up to the target_sum\"\"\"\n    pairs = []\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                pairs.append([numbers[i], numbers[j]])\n    return pairs\n\ndef g(target_sum: int = 100):\n    numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return numbers\n\nassert f(g()) == [[10, 90], [20, 80], [30, 70], [40, 60]]\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in non-decreasing order.\"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g()) == True\n\n",
        "idx_generation": 142,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 13\n\nassert f(g())\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"Check if a target word can be formed by concatenating a subsequence of words from a given list.\n    Return True if the target word can be formed, False otherwise.\"\"\"\n    target_len = len(target_word)\n    word_len = len(words)\n    dp = [[False] * (target_len + 1) for _ in range(word_len + 1)]\n    for i in range(word_len + 1):\n        dp[i][0] = True\n    for i in range(1, word_len + 1):\n        for j in range(1, target_len + 1):\n            if words[i - 1] == target_word[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] or dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[word_len][target_len]\n\ndef g(target_word='python'):\n    return ['p', 'y', 't', 'h', 'o', 'n']\n\nassert f(g()) == True\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if there exists an element in the array such that its value is equal to its index.\"\"\"\n    return any(arr[i] == i for i in range(len(arr)))\ndef g():\n    return [0, 2, 1, 4, 3]\nassert f(g())\n",
        "idx_generation": 268,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=3, length=12) -> bool:\n    \"\"\"Find a string that contains a certain number of copies of a given substring and is of a certain length.\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring='abc', count=3, length=12):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * '-'\nassert f(g())\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a list of numbers contains two consecutive numbers that are prime.\"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    for i in range(len(nums) - 1):\n        if is_prime(nums[i]) and is_prime(nums[i+1]):\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 292,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if the sum of the digits of x is divisible by any number in the list.\"\"\"\n    digit_sum = sum(int(digit) for digit in str(x))\n    return any(digit_sum % num == 0 for num in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return next((num for num in nums if num % 2 == 0))\nassert f(g())\n",
        "idx_generation": 25,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=2, lower_bound=1) -> bool:\n    \"\"\"Find a common multiple of two integers that is greater than or equal to the lower_bound.\"\"\"\n    return n % a == 0 and n % b == 0 and n >= lower_bound\ndef g(a=3, b=2, lower_bound=1):\n    num = max(a, b)\n    while num < lower_bound or num % a != 0 or num % b != 0:\n        num += max(a, b)\n    return num\nassert f(g())\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target_length=5) -> bool:\n    \"\"\"Check if there is a name in the list that has a length equal to the target length.\"\"\"\n    return any((len(name) == target_length for name in names))\ndef g():\n    return [\"John\", \"Alice\", \"Bob\", \"Jane\", \"Mark\"]\nassert f(g())\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=3) -> bool:\n    \"\"\"Check if the sum of any two distinct elements in the list is equal to n.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == n:\n                return True\n    return False\n\ndef g(n=3):\n    return [i for i in range(-n, n+1)]\n\nassert f(g())\n",
        "idx_generation": 154,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a diagonal matrix.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 4, 0], [0, 0, 6]]\n\nassert f(g())\n",
        "idx_generation": 419,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc') -> int:\n    \"\"\"Count the number of times the given substring appears in s\"\"\"\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+len(substr)] == substr:\n            count += 1\n            i += len(substr)\n        else:\n            i += 1\n    return count\ndef g(substr='abc'):\n    return 'abcabcabcabcabc'\nassert f(g()) == 5\n",
        "idx_generation": 72,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=10, m=5) -> bool:\n    \"\"\"Check if the length of s is divisible by the sum of n and m\"\"\"\n    return len(s) % (n + m) == 0\ndef g(n=10, m=5):\n    return \"a\" * (n + m)\nassert f(g())\n",
        "idx_generation": 221,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if a given number is a prime number\"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if n % prime == 0:\n            return False\n    return True\n\ndef g(primes=[2, 3, 5, 7, 11, 13]):\n    n = 29\n    return n\n\nassert f(g())\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=20) -> bool:\n    \"\"\"Check if a given matrix contains at least one row with a sum of elements greater than or equal to the target sum.\"\"\"\n    return any(sum(row) >= target_sum for row in matrix)\n\ndef g(target_sum=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\n\nassert f(g())\n",
        "idx_generation": 126,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(a: float, b: float, c: float, angle: float) -> bool:\n    \"\"\"Check if the given values of a, b, c, and angle form a valid triangle\"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if angle <= 0 or angle >= 180:\n        return False\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    return True\n\ndef g():\n    return (7, 24, 25, 90)\n\nassert f(*g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square\"\"\"\n    n = len(arr)\n    target_sum = n * (n ** 2 + 1) // 2\n\n    # Check rows and columns\n    for i in range(n):\n        row_sum = 0\n        col_sum = 0\n        for j in range(n):\n            row_sum += arr[i][j]\n            col_sum += arr[j][i]\n        if row_sum != target_sum or col_sum != target_sum:\n            return False\n\n    # Check diagonals\n    diag_sum = 0\n    anti_diag_sum = 0\n    for i in range(n):\n        diag_sum += arr[i][i]\n        anti_diag_sum += arr[i][n - i - 1]\n    if diag_sum != target_sum or anti_diag_sum != target_sum:\n        return False\n\n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n\n",
        "idx_generation": 332,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list is a perfect square sequence.\"\"\"\n    return all(lst[i] == i**2 for i in range(len(lst)))\n\ndef g():\n    return [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\nassert f(g())\n",
        "idx_generation": 332,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], m: int = 3) -> bool:\n    \"\"\"Check if there exists a subarray in the list with the sum equal to m.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == m:\n                return True\n    return False\n\ndef g(m: int = 3):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 194,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if the target string is a subsequence of the given string.\nSample Input:\n`'abasdc'`, `'abc'`\nSample Output:\n`True`\"\"\"\n    i = 0\n    for c in s:\n        if i < len(target) and c == target[i]:\n            i += 1\n    return i == len(target)\n\ndef g(target: str):\n    return target[::-1]\n\nassert f(g(target='subsequence'), target='ecneuqesbus')\n\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"Find the maximum product of any two numbers in the given list\"\"\"\n    sorted_nums = sorted(nums, reverse=True)\n    return sorted_nums[0] * sorted_nums[1]\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 90\n\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(lst: List[int], n=3) -> bool:\n    \"\"\"Check if the given list contains exactly n consecutive occurrences of a number,\n    where the number is the sum of the previous n numbers in the list.\"\"\"\n    for i in range(len(lst) - n):\n        if sum(lst[i:i+n]) == lst[i+n]:\n            return True\n    return False\n\ndef g(n=3):\n    return [1, 2, 3, 6, 9, 15, 24]\nassert f(g())\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers contains a subsequence that is a palindrome\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            subsequence = numbers[i:j]\n            if subsequence == subsequence[::-1]:\n                return True\n    return False\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], threshold=10) -> bool:\n    \"\"\"Check if the sum of all numbers in the list is greater than or equal to the threshold value\"\"\"\n    return sum(nums) >= threshold\ndef g(threshold=10):\n    return [5, 6, 7, 8, 9]  # Example input list\nassert f(g())\n",
        "idx_generation": 34,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3, c=5, d=7) -> bool:\n    \"\"\"Check if the given number is divisible by any of the four given numbers\"\"\"\n    return n % a == 0 or n % b == 0 or n % c == 0 or n % d == 0\n\ndef g(a=2, b=3, c=5, d=7):\n    return a * b * c * d\n\nassert f(g())\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(text: str, word='python') -> bool:\n    \"\"\"Check if the word exists in the given text.\"\"\"\n    return word in text.lower()\ndef g(text='Python is a powerful programming language.'):\n    return text.lower()\nassert f(g())\n",
        "idx_generation": 94,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0]) if rows > 0 else 0\n    return rows == cols\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 279,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(result: int, n: int = 100, limit: int = 10) -> bool:\n    \"\"\"Find the result of applying the following operation to the number n, until it becomes zero or reaches the limit:\n    * If n is a prime number, subtract the square root of n\n    * If n is divisible by 5, divide it by 5\n    * If n is divisible by 3, subtract 3\n    * If n is divisible by 2, divide it by 2\n    \"\"\"\n    import math\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    while n > 0 and n != limit:\n        if is_prime(n):\n            n = n - int(math.sqrt(n))\n        elif n % 5 == 0:\n            n = n // 5\n        elif n % 3 == 0:\n            n = n - 3\n        elif n % 2 == 0:\n            n = n // 2\n        else:\n            break\n    return result == n\n\ndef g(n: int = 100, limit: int = 10):\n    import math\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    while n > 0 and n != limit:\n        if is_prime(n):\n            n = n - int(math.sqrt(n))\n        elif n % 5 == 0:\n            n = n // 5\n        elif n % 3 == 0:\n            n = n - 3\n        elif n % 2 == 0:\n            n = n // 2\n        else:\n            break\n    return n\n\nassert f(g())\n",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n=5, m=3) -> bool:\n    \"\"\"Check if the sum of elements in the list is divisible by the difference between n and m\"\"\"\n    return sum(lst) % abs(n - m) == 0\ndef g(n=5, m=3):\n    return [n, m]\nassert f(g())\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target_char='a') -> bool:\n    \"\"\"Given a string, check if the target_char appears as the last character of any word in the string.\"\"\"\n    words = string.split()\n    for word in words:\n        if word[-1] == target_char:\n            return True\n    return False\n\ndef g(target_char='a'):\n    return \"banana apple orange kiwi\"\n\nassert f(g())\n",
        "idx_generation": 156,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find if it is possible to rearrange the numbers in the list to form an arithmetic progression with the target as the common difference.\"\"\"\n    nums.sort()\n    diff = nums[1] - nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] - nums[i-1] != diff:\n            return False\n    return nums[0] + (len(nums) - 1) * diff == target\ndef g(target=100):\n    return list(range(1, target+1))\nassert f(g())\n",
        "idx_generation": 23,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if n is a power of m.\"\"\"\n    if n <= 0 or m <= 0:\n        return False\n    if n == 1:\n        return True\n    while n > 1:\n        if n % m != 0:\n            return False\n        n = n / m\n    return True\n\ndef g():\n    return 16, 2\n\nassert f(*g()) == True\n",
        "idx_generation": 294,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], x: int = 10, y: int = 20, z: int = 30) -> bool:\n    \"\"\"Check if there are at least x numbers between y and z in the given list.\"\"\"\n    count = 0\n    for num in nums:\n        if y <= num <= z:\n            count += 1\n    return count >= x\ndef g(x: int = 10, y: int = 20, z: int = 30):\n    return [n for n in range(1, 101)]\nassert f(g())\n",
        "idx_generation": 90,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, t=100, upper=1000) -> bool:\n    \"\"\"Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper\n\ndef g(t=100, upper=1000):\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\n\nassert f(g())\n",
        "idx_generation": 327,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(string: str, target_length=10) -> bool:\n    \"\"\"Check if the given string is of the target_length and contains only uppercase alphabets.\"\"\"\n    return len(string) == target_length and string.isupper()\ndef g(target_length=10):\n    import random\n    import string\n    return ''.join(random.choices(string.ascii_uppercase, k=target_length))\n\nassert f(g())\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(k: int, arr: List[int]) -> bool:\n    \"\"\"Check if there exists a subarray in the list with a sum divisible by k.\"\"\"\n    if len(arr) < k:\n        return False\n    prefix_sums = [0]\n    for num in arr:\n        prefix_sums.append((prefix_sums[-1] + num) % k)\n    prefix_sums_set = set()\n    for i in range(2, len(prefix_sums)):\n        if prefix_sums[i] in prefix_sums_set:\n            return True\n        prefix_sums_set.add(prefix_sums[i-2])\n    return False\n\ndef g(k=5):\n    return [4, 2, 5, 7, 4, 1, 3, 8, 6, 9]\n\nassert f(k=5, arr=g())\n",
        "idx_generation": 168,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix[0])):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int = 10) -> bool:\n    \"\"\"Determine if the number n can be expressed as a multiple of m\"\"\"\n    return n % m == 0\n\ndef g(n=20, m=5):\n    return n, m\n\nassert f(*g())\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=2) -> bool:\n    \"\"\"Check if the given number n is a power of k.\"\"\"\n    while n % k == 0:\n        n //= k\n    return n == 1\n\ndef g(k=2):\n    n = k ** 4\n    return n\n\nassert f(g())\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, words=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if a given string can be formed by concatenating the words list in any order.\"\"\"\n    def backtrack(substring):\n        if not substring:\n            return True\n        for word in words:\n            if substring.startswith(word):\n                if backtrack(substring[len(word):]):\n                    return True\n        return False\n    \n    return backtrack(string)\n\ndef g(words=['apple', 'banana', 'cherry']):\n    return ''.join(words)\n\nassert f(g())\n\n",
        "idx_generation": 185,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a number that is a perfect square and has exactly 5 distinct prime factors.\"\"\"\n    factors = []\n    for i in range(2, int(n**0.5) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    prime_factors = set(factors)\n    return len(prime_factors) == 5 and int(n**0.5) == n**0.5\ndef g():\n    return 2**2 * 3**2 * 5**2 * 7**2 * 11**2\nassert f(g())\n",
        "idx_generation": 125,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring=\"Hello\") -> bool:\n    \"\"\"Find if the given substring is present in the given string.\"\"\"\n    return substring in string\ndef g(string=\"Hello, World!\"):\n    return string\nassert f(g())\n",
        "idx_generation": 52,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate numbers.\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20]\n\nassert f(g())\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a subsequence in the given list such that the sum of its elements is divisible by 10\"\"\"\n    n = len(nums)\n    dp = [False] * (n+1)\n    dp[0] = True\n    for i in range(1, n+1):\n        dp[i] = dp[i-1]\n        if nums[i-1] % 10 == 0:\n            dp[i] = True\n        for j in range(i-1, 0, -1):\n            if nums[j-1] % 10 == 0:\n                dp[i] = True\n            if dp[j-1] and (nums[i-1] + nums[j-1]) % 10 == 0:\n                dp[i] = True\n                break\n    return dp[n]\n\ndef g():\n    return [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n\n",
        "idx_generation": 231,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target value is present in the matrix.\n    Return True if it is present, False otherwise.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == False\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(l: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    seen = set()\n    for num in l:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g():\n    return [2, 5, 8, 11, 14], 16\nassert f(*g())\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that are all even\"\"\"\n    count = 0\n    for num in nums:\n        if num % 2 == 0:\n            count += 1\n            if count == k:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(k=3):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert f(g())\n",
        "idx_generation": 25,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if a number is divisible by 10.\"\"\"\n    return n % m == 0\ndef g(m=10):\n    return m * 5\nassert f(g())\n",
        "idx_generation": 117,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(sides: List[float], area: float) -> bool:\n    \"\"\"Check if the given side lengths of a triangle results in the specified area.\"\"\"\n    a, b, c = sides\n    s = (a + b + c) / 2\n    calculated_area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return abs(calculated_area - area) < 1e-06\n\ndef g():\n    return ([3, 4, 5], 6.0)\n\nassert f(*g())\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom collections import Counter\ndef f(words: List[str], k=2) -> bool:\n    \"\"\"Check if there are k or more anagrams in the given list of words.\"\"\"\n    counts = Counter([''.join(sorted(word.lower())) for word in words])\n    return any(count >= k for count in counts.values())\ndef g(k=2):\n    return [\"cat\", \"tac\", \"dog\", \"god\", \"act\", \"bird\"]\nassert f(g())\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Given a string, check if it can be rearranged into a palindrome with at most k characters shuffled.\n    Return True if it is possible, False otherwise.\"\"\"\n    counter = Counter(s)\n    odd_count = 0\n    for count in counter.values():\n        if count % 2 != 0:\n            odd_count += 1\n        if odd_count > k:\n            return False\n    return True\n\ndef g(k=3):\n    return \"aabbc\"\n\nassert f(g()) == True\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], n=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to n.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == n:\n                return True\n    return False\n\ndef g(n=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 162,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums: List[int], even=True) -> bool:\n    \"\"\"Check if the given number is divisible by any of the numbers in the list.\n    If even is True, check for divisibility by even numbers only. If even is False, check for divisibility by odd numbers only.\"\"\"\n    if even:\n        divisors = [num for num in nums if num % 2 == 0]\n    else:\n        divisors = [num for num in nums if num % 2 != 0]\n    for num in divisors:\n        if n % num == 0:\n            return True\n    return False\n\ndef g(even=True):\n    if even:\n        return [2, 4, 6, 8, 10]\n    else:\n        return [3, 5, 7, 9, 11]\n\nassert f(20, g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form a strictly increasing sequence.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+1] > arr[i+j] for j in range(k-1)):\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 5, 8, 13]\n\nassert f(g())\n\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], length=5) -> bool:\n    \"\"\"Check if there is a word in the list that has a length greater than the specified length\"\"\"\n    for word in words:\n        if len(word) > length:\n            return True\n    return False\ndef g(length=5):\n    return [\"apple\", \"banana\", \"cat\", \"dog\", \"elephant\"]\nassert f(g())\n",
        "idx_generation": 59,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum: int = 100) -> List[Tuple[int, int]]:\n    \"\"\"Find all pairs of distinct numbers in the list that add up to the target_sum\"\"\"\n    pairs = []\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                pairs.append((numbers[i], numbers[j]))\n    return pairs\n\ndef g(target_sum: int = 100):\n    numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return numbers\n\nassert f(g()) == [(10, 90), (20, 80), (30, 70), (40, 60)]\n",
        "idx_generation": 150,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list is palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    nums = [1, 2, 3, 4, 3, 2, 1]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 146,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=1, b=20) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n == 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(a=1, b=20):\n    return 17\n\nassert f(g())\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word: str = 'python') -> bool:\n    \"\"\"Check if the target_word exists in the list of words.\"\"\"\n    return target_word in words\n\ndef g(target_word: str = 'python'):\n    return ['java', 'c++', 'python', 'javascript']\n\nassert f(g())\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_number=5) -> bool:\n    \"\"\"Check if the target number is present in the list.\"\"\"\n    return target_number in numbers\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 309,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int=5, m: int=10) -> bool:\n    \"\"\"Check if the substring 'abc' occurs at least n times and at most m times in the given string.\"\"\"\n    count = s.count('abc')\n    return n <= count <= m\n\ndef g(n: int=5, m: int=10):\n    return 'abc' * m\n\nassert f(g())\n",
        "idx_generation": 368,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a diagonal matrix, where all the elements outside the main diagonal are zero.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\nassert f(g())\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, num_list=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if n is divisible by all the numbers present in the given list.\"\"\"\n    for num in num_list:\n        if n % num != 0:\n            return False\n    return True\n\ndef g(num_list=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    product = 1\n    for num in num_list:\n        product *= num\n    return product\n\nassert f(g())\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=1056, b=1920, c=288, lower_bound=5) -> bool:\n    \"\"\"Find a common divisor of three integers.\"\"\"\n    return a % n == 0 and b % n == 0 and c % n == 0 and (n >= lower_bound)\ndef g(a=1056, b=1920, c=288, lower_bound=5):\n    (m, n) = (min(min(a, b), c), max(max(a, b), c))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"Check if there is at least one word in the list that has a length greater than the target length.\"\"\"\n    for word in words:\n        if len(word) > target_length:\n            return True\n    return False\ndef g():\n    words = [\"apple\", \"banana\", \"cat\", \"dog\"]\n    return words\nassert f(g())\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=0) -> bool:\n    \"\"\"Check if the sum of any three distinct elements in the list is equal to target_sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target_sum:\n                    return True\n    return False\n\ndef g(target_sum=0):\n    return [i for i in range(-10, 11)]\n\nassert f(g())\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a lower triangular matrix. A matrix is lower triangular if all elements above the main diagonal are zero.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix[0])):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [3, 4, 0], [5, 6, 7]]\n\nassert f(g())\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=3, length=9) -> bool:\n    \"\"\"Check if a given string can be formed by repeating a substring a certain number of times, resulting in a string of a certain length\"\"\"\n    return string == substring * count and len(string) == length\n\ndef g(substring='abc', count=3, length=9):\n    return substring * count\n\nassert f(g())\n",
        "idx_generation": 91,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=6, m=2) -> bool:\n    \"\"\"Check if the length of s is divisible by the difference between n and m\"\"\"\n    return len(s) % abs(n - m) == 0\ndef g(n=6, m=2):\n    return \"a\" * abs(n - m)\nassert f(g())\n",
        "idx_generation": 221,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if a given number is a prime number\"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if n % prime == 0:\n            return False\n    return True\n\ndef g(primes=[2, 3, 5, 7, 11, 13]):\n    n = 23\n    return n\n\nassert f(g())\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Tuple\n\ndef f(matrix: List[List[int]], target_sum=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the matrix that add up to the target sum.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(i, rows):\n                for y in range(j, cols):\n                    if matrix[i][j] + matrix[x][y] == target_sum:\n                        return True\n    return False\n\ndef g(target_sum=50):\n    matrix = [[10, 20, 30],\n              [40, 50, 60],\n              [70, 80, 90]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(a: float, b: float, c: float, angle: float) -> bool:\n    \"\"\"Check if the given values of a, b, c, and angle form a valid triangle\"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if angle <= 0 or angle >= 180:\n        return False\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    return True\n\ndef g():\n    return (8, 15, 17, 90)\n\nassert f(*g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square\"\"\"\n    n = len(arr)\n    target_sum = n * (n ** 2 + 1) // 2\n\n    # Check rows\n    for row in arr:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for i in range(n):\n        col_sum = 0\n        for j in range(n):\n            col_sum += arr[j][i]\n        if col_sum != target_sum:\n            return False\n\n    # Check diagonals\n    diag_sum = 0\n    anti_diag_sum = 0\n    for i in range(n):\n        diag_sum += arr[i][i]\n        anti_diag_sum += arr[i][n - i - 1]\n    if diag_sum != target_sum or anti_diag_sum != target_sum:\n        return False\n\n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n\n",
        "idx_generation": 332,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a strictly increasing sequence.\"\"\"\n    return all(nums[i] < nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    return [1, 3, 5, 7, 9]\n\nassert f(g())\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers from the list whose sum is equal to the target_sum.\"\"\"\n    return any((numbers[i] + numbers[j] == target_sum for i in range(len(numbers)) for j in range(i+1, len(numbers))))\n\ndef g(target_sum=10):\n    return [2, 3, 5, 7]\n\nassert f(g())\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers contains a subsequence that is a palindrome\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            subsequence = numbers[i:j]\n            if subsequence == subsequence[::-1]:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 212,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target value\"\"\"\n    return any((x + y + z == target for x in numbers for y in numbers for z in numbers))\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return numbers\nassert f(g())\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3, c=5, d=7) -> bool:\n    \"\"\"Check if the given number is divisible by all four given numbers\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0 and n % d == 0\n\ndef g(a=2, b=3, c=5, d=7):\n    return a * b * c * d\n\nassert f(g())\n",
        "idx_generation": 151,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str) -> bool:\n    \"\"\"Check if the given sentence is a pangram\"\"\"\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    sentence = sentence.lower()\n    for char in sentence:\n        if char.isalpha():\n            alphabet.discard(char)\n        if len(alphabet) == 0:\n            return True\n    return False\n\ndef g(sentence=\"The quick brown fox jumps over the lazy dog\"):\n    return sentence\n\nassert f(g())\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is square (number of rows equals number of columns)\"\"\"\n    return len(matrix) == len(matrix[0])\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(result: int, n: int = 100, limit: int = 10) -> bool:\n    \"\"\"Find the result of applying the following operation to the number n, until it becomes zero or reaches the limit:\n    * If n is a prime number, subtract the square root of n\n    * If n is divisible by 5, divide it by 5\n    * If n is divisible by 3, subtract 3\n    * If n is divisible by 2, divide it by 2\n    \"\"\"\n    import math\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    while n > 0 and n != limit:\n        if is_prime(n):\n            n = n - int(math.sqrt(n))\n        elif n % 5 == 0:\n            n = n // 5\n        elif n % 3 == 0:\n            n = n - 3\n        elif n % 2 == 0:\n            n = n // 2\n        else:\n            break\n    return result == n\n\ndef g(n: int = 100, limit: int = 10):\n    import math\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    while n > 0 and n != limit:\n        if is_prime(n):\n            n = n - int(math.sqrt(n))\n        elif n % 5 == 0:\n            n = n // 5\n        elif n % 3 == 0:\n            n = n - 3\n        elif n % 2 == 0:\n            n = n // 2\n        else:\n            break\n    return n\n\nassert f(g())",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int]) -> bool:\n    \"\"\"Check if the given list is a Fibonacci sequence\"\"\"\n    if len(num_list) < 3:\n        return False\n    for i in range(2, len(num_list)):\n        if num_list[i] != num_list[i-1] + num_list[i-2]:\n            return False\n    return True\n\ndef g():\n    return [0, 1, 1, 2, 3, 5, 8, 13, 21]\n\nassert f(g())\n",
        "idx_generation": 306,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target_char='a') -> bool:\n    \"\"\"Given a string, check if the target_char appears as the last character of any word in the string.\"\"\"\n    words = n.split()\n    for word in words:\n        if word[-1] == target_char:\n            return True\n    return False\ndef g(target_char='a'):\n    return \"apple banana cherry date\"\nassert f(g())\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Given a list of integers and a target sum, check if there exist three numbers in the list whose sum is equal to the target.\"\"\"\n    n = len(nums)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g():\n    return ([4, 9, 2, 1, 8, 7, 5, 3, 6], 15)\n\nassert f(*g())\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Check if n is a power of both a and b\"\"\"\n    return n > 0 and all(n % i == 0 for i in [a, b]) and any(n % i == 0 for i in [a, b])\n\ndef g(a=2, b=3):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 384,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a prime sequence.\"\"\"\n    if len(nums) < 3:\n        return False\n    for num in nums:\n        if num < 2:\n            return False\n        for i in range(2, int(num/2)+1):\n            if num % i == 0:\n                return False\n    return True\n\ndef g():\n    return [2, 3, 5, 7, 11, 13, 17]\n\nassert f(g())\n",
        "idx_generation": 105,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, t=50, upper=500) -> bool:\n    \"\"\"Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper\n\ndef g(t=50, upper=500):\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\n\nassert f(g())\n",
        "idx_generation": 327,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='coding') -> bool:\n    \"\"\"Check if the given string contains all the characters in the target string in the same order.\"\"\"\n    target_index = 0\n    for char in s:\n        if char == target[target_index]:\n            target_index += 1\n        if target_index == len(target):\n            return True\n    return False\n\ndef g(target='coding'):\n    return 'python coding'\n\nassert f(g())\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list nums is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 213,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int) -> bool:\n    \"\"\"Check if x is a prime number\"\"\"\n    if x < 2:\n        return False\n    for i in range(2, int(x ** 0.5) + 1):\n        if x % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 180,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word_list: List[str], target_word='python') -> bool:\n    \"\"\"Check if any word in the list starts with the target word.\"\"\"\n    return any(word.startswith(target_word) for word in word_list)\n\ndef g(target_word='python'):\n    return ['python', 'java', 'ruby', 'javascript']\n\nassert f(g())\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(num: int, a=5, b=3) -> bool:\n    \"\"\"Check if the given number is a perfect square and a multiple of a and b.\"\"\"\n    return num % a == 0 and num % b == 0 and math.isqrt(num) ** 2 == num\ndef g(a=5, b=3):\n    num = a * b\n    while not (math.isqrt(num) ** 2 == num):\n        num += a * b\n    return num\nassert f(g())\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t='missing') -> bool:\n    \"\"\"Check if the string t is a substring of string s.\n    Return True if t is a substring of s, False otherwise.\"\"\"\n    return t in s\n\ndef g(t='missing'):\n    return 'This is a test string and ' + t + ' is missing.'\n\nassert f(g())\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate elements.\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 8]\n\nassert f(g())\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subsequence in the given list such that the sum of its elements is equal to the target\"\"\"\n    n = len(nums)\n    dp = [False] * (n+1)\n    dp[0] = True\n    for i in range(1, n+1):\n        dp[i] = dp[i-1]\n        if nums[i-1] == target:\n            dp[i] = True\n        for j in range(i-1, 0, -1):\n            if nums[j-1] == target:\n                dp[i] = True\n            if dp[j-1] and (nums[i-1] + nums[j-1]) == target:\n                dp[i] = True\n                break\n    return dp[n]\n\ndef g():\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\nassert f(g())\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=7) -> bool:\n    \"\"\"Find if the target number is present in the matrix.\"\"\"\n    m = len(matrix)\n    if m == 0:\n        return False\n    n = len(matrix[0])\n    if n == 0:\n        return False\n    row, col = 0, n - 1\n    while row < m and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False\n\ndef g():\n    return [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n\nassert f(g())\n",
        "idx_generation": 127,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], n=3, target=10) -> bool:\n    \"\"\"Find a combination of n numbers in the list that sum up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(combo) == target for combo in combinations(nums, n))\ndef g(n=3, target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 28,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=2) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that are all prime\"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    count = 0\n    for num in nums:\n        if num in primes:\n            count += 1\n            if count == k:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(k=2):\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\nassert f(g())\n",
        "idx_generation": 25,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if the given number is divisible by m.\"\"\"\n    return n % m == 0\ndef g(m=5):\n    return 25\nassert f(g())\n",
        "idx_generation": 149,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(points: List[Tuple[int, int]]) -> bool:\n    \"\"\"Check if all the given points lie on the same line\"\"\"\n    if len(points) < 3:\n        return True\n    x0, y0 = points[0]\n    x1, y1 = points[1]\n    for i in range(2, len(points)):\n        x, y = points[i]\n        if (x1 - x0) * (y - y0) != (x - x0) * (y1 - y0):\n            return False\n    return True\n\ndef g():\n    return [(1, 1), (2, 2), (3, 3), (4, 4)]\n\nassert f(g())\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"Check if all the words in the list start with the same letter.\"\"\"\n    first_letter = words[0][0]\n    \n    # Check if all words start with the same letter\n    for word in words:\n        if word[0] != first_letter:\n            return False\n    \n    return True\n\ndef g(words=[\"apple\", \"ant\", \"arrow\"]):\n    return words\n\nassert f(g())\n",
        "idx_generation": 107,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return s == s[::-1]\ndef g():\n    return 'racecar'\nassert f(g())\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target_num=5) -> bool:\n    \"\"\"Check if the target_num appears in the given list of numbers\"\"\"\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return target_num in numbers\ndef g(target_num=5):\n    return target_num\nassert f(g())\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1,2,3,4,5,6,7,8]) -> bool:\n    \"\"\"Check if the given number is present in the list of numbers.\"\"\"\n    return n in nums\n\ndef g(nums=[1,2,3,4,5,6,7,8]):\n    return nums[3]\n\nassert f(g())\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], k=3) -> bool:\n    \"\"\"Find the largest k numbers from a given list\"\"\"\n    assert len(numbers) >= k\n    return sorted(numbers, reverse=True)[:k] == [10, 9, 8]\ndef g(k=3):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return numbers\nassert f(g())\n",
        "idx_generation": 327,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if the characters in target appear in s in the same order\"\"\"\n    target_index = 0\n    for char in s:\n        if char == target[target_index]:\n            target_index += 1\n            if target_index == len(target):\n                return True\n    return False\n\ndef g(target='hello'):\n    s = 'heexxxlllooo'\n    return s\n\nassert f(g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum: int = 100, target_count: int = 2) -> List[List[int]]:\n    \"\"\"Find all combinations of distinct numbers in the list that add up to the target_sum and have a length of target_count\"\"\"\n    combinations = []\n    def backtrack(curr_comb, start):\n        if sum(curr_comb) == target_sum and len(curr_comb) == target_count:\n            combinations.append(curr_comb[:])\n        if sum(curr_comb) > target_sum or len(curr_comb) >= target_count:\n            return\n        for i in range(start, len(numbers)):\n            curr_comb.append(numbers[i])\n            backtrack(curr_comb, i + 1)\n            curr_comb.pop()\n    backtrack([], 0)\n    return combinations\n\ndef g(target_sum: int = 100, target_count: int = 2):\n    numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return numbers\n\nassert f(g()) == [[10, 90], [20, 80], [30, 70], [40, 60]]\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3]) -> bool:\n    \"\"\"Check if the product of the first n elements in a list is equal to a given number.\"\"\"\n    product = 1\n    for i in lst[:n]:\n        product *= i\n    return product == 6\ndef g(lst=[1, 2, 3]):\n    return 3\nassert f(g())\n",
        "idx_generation": 153,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=1, b=1) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(a=1, b=1):\n    return a + b + 1\nassert f(g())\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if all words in the given list have the same prefix.\"\"\"\n    return all(word.startswith(prefix) for word in words)\n\ndef g(prefix='pre'):\n    return [prefix+'fix', prefix+'text', prefix+'dict']\n\nassert f(g())\n",
        "idx_generation": 309,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is present in the list of numbers.\"\"\"\n    return target in nums\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    target = 3\n    return nums, target\n\nassert f(*g())\n\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a=10, b=3) -> bool:\n    \"\"\"Find a string with a given number of 'a's and 'b's\"\"\"\n    return s.count('a') == a and s.count('b') == b and (len(s) == a + b)\ndef g(a=10, b=3):\n    return 'a' * a + 'b' * b\nassert f(g())\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains three consecutive numbers.\"\"\"\n    for i in range(len(nums)-2):\n        if nums[i+1] - nums[i] == 1 and nums[i+2] - nums[i+1] == 1:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a geometric sequence.\"\"\"\n    if len(nums) < 3:\n        return False\n    ratio = nums[1] / nums[0]\n    for i in range(2, len(nums)):\n        if nums[i] != nums[i-1] * ratio:\n            return False\n    return True\n\ndef g():\n    return [2, 4, 8, 16, 32, 64]\n\nassert f(g())\n",
        "idx_generation": 105,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=7, upper_bound=1000) -> bool:\n    \"\"\"Find a number that is divisible by either a or b, but not both, and less than or equal to the upper_bound.\"\"\"\n    return (n % a == 0 or n % b == 0) and not (n % a == 0 and n % b == 0) and (0 < n <= upper_bound)\n\ndef g(a=5, b=7, upper_bound=1000):\n    lcm = a * b\n    while True:\n        if (lcm % a == 0 or lcm % b == 0) and not (lcm % a == 0 and lcm % b == 0):\n            break\n        lcm += 1\n    return lcm\n\nassert f(g())\n",
        "idx_generation": 169,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"Check if there exists a pair of words in the list that have the same length as the target_length.\"\"\"\n    return any((len(words[i]) == len(words[j]) == target_length for i in range(len(words)) for j in range(i+1, len(words))))\n\ndef g(target_length=5):\n    return ['apple', 'orange', 'banana', 'grape', 'kiwi', 'plum', 'pear', 'peach', 'melon', 'berry', 'mango']\n\nassert f(g())\n",
        "idx_generation": 331,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"Find the sum of all the elements in the given matrix.\"\"\"\n    total_sum = 0\n    for row in matrix:\n        for element in row:\n            total_sum += element\n    return total_sum\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == 45\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a lower triangular matrix.\"\"\"\n    n = len(matrix)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != 0:\n                return False\n    \n    return True\n\ndef g():\n    return [[4, 0, 0], [2, 3, 0], [1, 2, 1]]\n\nassert f(g())\n",
        "idx_generation": 455,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(string: str, pattern=r'\\d+') -> bool:\n    \"\"\"Check if the given string contains any numbers\"\"\"\n    return bool(re.search(pattern, string))\n\ndef g(pattern=r'\\d+'):\n    return \"Hello, 123 World!\"\n\nassert f(g())\n",
        "idx_generation": 104,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=12, m=4) -> bool:\n    \"\"\"Check if the length of s is divisible by the square of n plus m\"\"\"\n    return len(s) % ((n * n) + m) == 0\ndef g(n=12, m=4):\n    return \"a\" * ((n * n) + m)\nassert f(g())\n",
        "idx_generation": 221,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if a given number is a prime number\"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if n % prime == 0:\n            return False\n    return True\n\ndef g(primes=[2, 3, 5, 7, 11, 13]):\n    n = 31\n    return n\n\nassert f(g())\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Tuple\n\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the matrix that add up to the target sum.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(i, rows):\n                for y in range(j, cols):\n                    if matrix[i][j] + matrix[x][y] == target_sum:\n                        return True\n    return False\n\ndef g(target_sum=100):\n    matrix = [[10, 20, 30],\n              [40, 50, 60],\n              [70, 80, 90]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 147,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if the sum of any two distinct elements in the given list is equal to the target\"\"\"\n    return any((arr[i] + arr[j] == target) for i in range(len(arr)) for j in range(i+1, len(arr)))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square\"\"\"\n    n = len(arr)\n    target_sum = n * (n ** 2 + 1) // 2\n\n    # Check rows and columns\n    row_sums = [sum(row) for row in arr]\n    col_sums = [sum(col) for col in zip(*arr)]\n    if not all(row_sum == target_sum for row_sum in row_sums) or not all(col_sum == target_sum for col_sum in col_sums):\n        return False\n\n    # Check diagonals\n    diag_sum = 0\n    anti_diag_sum = 0\n    for i in range(n):\n        diag_sum += arr[i][i]\n        anti_diag_sum += arr[i][n - i - 1]\n    if diag_sum != target_sum or anti_diag_sum != target_sum:\n        return False\n\n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n\n",
        "idx_generation": 332,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix. A matrix is symmetric if it is equal to its transpose.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 358,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subarray whose sum is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        subarray_sum = 0\n        for j in range(i, len(arr)):\n            subarray_sum += arr[j]\n            if subarray_sum == target:\n                return True\n    return False\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "idx_generation": 210,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_number=7) -> bool:\n    \"\"\"Check if there exists a subsequence of numbers in the list that sums up to the target number.\n    Return True if such a subsequence exists, False otherwise.\"\"\"\n    n = len(numbers)\n    dp = [[False] * (target_number + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_number + 1):\n            if numbers[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - numbers[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target_number]\n\ndef g(target_number=7):\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if all the numbers in the list are even\"\"\"\n    return all(num % 2 == 0 for num in lst)\n\ndef g() -> List[int]:\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert f(g())\n",
        "idx_generation": 216,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sums up to the target value.\"\"\"\n    return any(target - num in numbers for num in numbers)\n\ndef g(target: int = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 - target]\n\nassert f(g())\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find the sum of all elements in the list\"\"\"\n    return sum(arr) == n\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return sum(arr)\nassert f(g())\n",
        "idx_generation": 154,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a pangram\"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    return all(char in s.lower() for char in alphabet)\n\ndef g() -> str:\n    return \"The quick brown fox jumps over the lazy dog\"\n\nassert f(g())\n",
        "idx_generation": 114,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix (number of rows equals number of columns).\"\"\"\n    rows = len(matrix)\n    for row in matrix:\n        if len(row) != rows:\n            return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(result: int, n: int = 100, limit: int = 10) -> bool:\n    \"\"\"Find the result of applying the following operation to the number n, until it becomes zero or reaches the limit:\n    * If n is a prime number, subtract the square root of n\n    * If n is divisible by 5, divide it by 5\n    * If n is divisible by 3, subtract 3\n    * If n is divisible by 2, divide it by 2\n    \"\"\"\n    import math\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    while n > 0 and n != limit:\n        if is_prime(n):\n            n = n - int(math.sqrt(n))\n        elif n % 5 == 0:\n            n = n // 5\n        elif n % 3 == 0:\n            n = n - 3\n        elif n % 2 == 0:\n            n = n // 2\n        else:\n            break\n    return result == n\n\ndef g(n: int = 100, limit: int = 10):\n    import math\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    while n > 0 and n != limit:\n        if is_prime(n):\n            n = n - int(math.sqrt(n))\n        elif n % 5 == 0:\n            n = n // 5\n        elif n % 3 == 0:\n            n = n - 3\n        elif n % 2 == 0:\n            n = n // 2\n        else:\n            break\n    return n\n\nassert f(g())\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n: int = 3) -> bool:\n    \"\"\"Check if there exists a subsequence of length n in the list that is strictly increasing\"\"\"\n    if len(nums) < n:\n        return False\n    dp = [1] * len(nums)\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return n in dp\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if the given list of words contains a certain target word\"\"\"\n    return target in words\ndef g(target='python'):\n    return ['java', 'c++', 'python', 'javascript']\nassert f(g())\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Given a list of integers and a target sum, check if there exist four numbers in the list whose sum is equal to the target.\"\"\"\n    n = len(nums)\n    for i in range(n - 3):\n        for j in range(i + 1, n - 2):\n            for k in range(j + 1, n - 1):\n                for l in range(k + 1, n):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return True\n    return False\n\ndef g():\n    return ([4, 9, 2, 1, 8, 7, 5, 3, 6], 20)\n\nassert f(*g())\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if the product of two positive integers n and m is equal to the product of all the integers from 1 to n+m.\"\"\"\n    product = 1\n    for i in range(1, n + m + 1):\n        product *= i\n    return n * m == product\n\ndef g():\n    return (2, 3)\n\nassert f(*g()) == False\n\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers, find three numbers that add up to the target number.\n    Return True if such a combination exists, False otherwise.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\nassert f(g())\n",
        "idx_generation": 115,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, t=150, upper=2000) -> bool:\n    \"\"\"Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper\n\ndef g(t=150, upper=2000):\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\n\nassert f(g())\n",
        "idx_generation": 327,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t='abc') -> bool:\n    \"\"\"Check if the string s is a subsequence of string t.\"\"\"\n    i = 0\n    for char in s:\n        if char != t[i]:\n            i += 1\n        if i == len(t):\n            return False\n    return True\n\ndef g(t='abc'):\n    return t[::-1]\n\nassert f(g())\n",
        "idx_generation": 249,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains only prime numbers.\"\"\"\n    for num in nums:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n    return True\n\ndef g():\n    return [2, 3, 5, 7, 11, 13, 17]\n\nassert f(g())\n",
        "idx_generation": 221,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"Check if the given numbers form the sides of a right-angled triangle\"\"\"\n    sides = sorted([a, b, c])\n    return math.isclose(sides[0]**2 + sides[1]**2, sides[2]**2)\n\ndef g(a=3, b=4, c=5):\n    return a, b, c\n\nassert f(*g())\n",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=1, b=1) -> bool:\n    \"\"\"Check if the given number is a power of two.\"\"\"\n    return n > 0 and (n & (n - 1)) == 0\ndef g(a=1, b=1):\n    return a * b\nassert f(g())\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, word_count=3) -> bool:\n    \"\"\"Check if the given sentence contains at least the specified number of words.\"\"\"\n    words = sentence.split()\n    return len(words) >= word_count\n\ndef g(word_count=3):\n    return \"This is a sample sentence.\"\n\nassert f(g())\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"Check if a is a power of b, and c is a prime number.\"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_power_of(n, m):\n        if n <= 0:\n            return False\n        while n % m == 0:\n            n //= m\n        return n == 1\n\n    return is_power_of(a, b) and is_prime(c)\n\ndef g():\n    return (16, 2, 7)\n\nassert f(*g())\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if the word is a substring of the given string\"\"\"\n    return word in s\n\ndef g(word='python'):\n    return word\n\nassert f(g())\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int]) -> bool:\n    \"\"\"Check if all elements in the list are unique.\"\"\"\n    return len(x) == len(set(x))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, seq: List[int]) -> bool:\n    \"\"\"Find the two numbers in the given sequence that sum up to n\"\"\"\n    for i in range(len(seq)):\n        for j in range(i+1, len(seq)):\n            if seq[i] + seq[j] == n:\n                return True\n    return False\n\ndef g(seq: List[int]):\n    return seq\n\nassert f(n=10, seq=g([2, 4, 6, 8]))\n\n",
        "idx_generation": 274,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if the target value is present in any row or column of the given matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    for col in zip(*matrix):\n        if target in col:\n            return True\n    return False\n\ndef g(target=5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers, find a subset of the list that sums up to the target value.\n    Return True if such a subset exists, False otherwise.\"\"\"\n    def subset_sum(li, target, n):\n        if target == 0:\n            return True\n        if n == 0 and target != 0:\n            return False\n        if li[n-1] > target:\n            return subset_sum(li, target, n-1)\n        return subset_sum(li, target-li[n-1], n-1) or subset_sum(li, target, n-1)\n    return subset_sum(li, target, len(li))\n\ndef g(target=100):\n    return [1, 2, 4, 10, 25, 58]\n\nassert f(g()) == True\n",
        "idx_generation": 28,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list where the second number is the double of the first number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * 2 == nums[j]:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 26,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there are three numbers in the given list that multiply to the target.\"\"\"\n    return any(target / (num1 * num2) in nums for num1 in nums for num2 in nums if num1 != num2)\n\ndef g(target=5):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 162,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(points: List[Tuple[float, float]], threshold=10) -> bool:\n    \"\"\"Check if there exists a pair of points in a list such that the Euclidean distance between them is less than a threshold.\"\"\"\n    return any(math.sqrt((points[i][0] - points[j][0])**2 + (points[i][1] - points[j][1])**2) < threshold for i in range(len(points)) for j in range(i+1, len(points)))\n\ndef g():\n    return [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\nassert f(g())\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, names=['Alice', 'Bob', 'Charlie', 'David', 'Eve']) -> bool:\n    \"\"\"Check if the given name s is present in the list of names.\"\"\"\n    return s in names\n\ndef g(names=['Alice', 'Bob', 'Charlie', 'David', 'Eve']):\n    return names[2]\n\nassert f(g())\n",
        "idx_generation": 114,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"Check if the given list of words has any palindromic words.\"\"\"\n    return any(word == word[::-1] for word in words)\ndef g():\n    return [\"level\", \"python\", \"racecar\", \"programming\"]\nassert f(g())\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=100) -> bool:\n    \"\"\"Check if there exists three distinct elements in the list whose sum is equal to n.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == n:\n                    return True\n    return False\n\ndef g(n=100):\n    return [i for i in range(1, n+1)]\n\nassert f(g())\n",
        "idx_generation": 167,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form a geometric sequence.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+1] / arr[i+j] == arr[i+1] / arr[i] for j in range(k-1)):\n            return True\n    return False\n\ndef g(k=3):\n    return [1, 2, 4, 8, 16, 32]\n\nassert f(g())\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target: str) -> bool:\n    \"\"\"Check if a target word can be formed by concatenating the words in the list\"\"\"\n    if not words or not target:\n        return False\n    words = set(words)\n    if target in words:\n        return True\n    for i in range(1, len(target)):\n        prefix = target[:i]\n        suffix = target[i:]\n        if prefix in words and f(words, suffix):\n            return True\n    return False\n\ndef g() -> Tuple[List[str], str]:\n    return ([\"apple\", \"ban\", \"ana\", \"na\", \"a\"], \"banana\")\n\nassert f(*g())\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(numbers: List[int], target_sum=50) -> bool:\n    \"\"\"Given a list of numbers, find a pair of numbers whose sum is equal to the target_sum.\"\"\"\n    return any((numbers[i] + numbers[j] == target_sum for i in range(len(numbers)) for j in range(i+1, len(numbers))))\ndef g(target_sum=50):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "idx_generation": 177,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list is a palindrome, i.e., the same forwards and backwards.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target_sum=15) -> bool:\n    \"\"\"Find a number such that the sum of its digits is equal to the target_sum, and the number is a palindrome.\"\"\"\n    return sum([int(digit) for digit in str(n)]) == target_sum and str(n) == str(n)[::-1]\ndef g(target_sum=15):\n    n = 0\n    while True:\n        if sum([int(digit) for digit in str(n)]) == target_sum and str(n) == str(n)[::-1]:\n            return n\n        n += 1\nassert f(g())\n",
        "idx_generation": 193,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target: str) -> bool:\n    \"\"\"Check if all the characters in the target string can be formed by combining characters from the list of words.\"\"\"\n    char_count = {}\n    for word in words:\n        for char in word:\n            char_count[char] = char_count.get(char, 0) + 1\n    \n    for char in target:\n        if char not in char_count or char_count[char] == 0:\n            return False\n        char_count[char] -= 1\n    \n    return True\n\ndef g(words=[\"apple\", \"banana\", \"cherry\"], target=\"aceh\"):\n    return words\n\nassert f(g(), target=\"aceh\")\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is in the list.\"\"\"\n    return n in lst\n\ndef g():\n    return 7\n\nassert f(g())\n",
        "idx_generation": 370,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"Check if the given string contains the given substring at least twice.\"\"\"\n    return string.count(substr) >= 2\ndef g(substr='abc'):\n    return \"xyz\" + substr*3 + \"123\"\nassert f(g())\n",
        "idx_generation": 429,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list contains three consecutive even numbers.\"\"\"\n    for i in range(len(arr)-2):\n        if arr[i] % 2 == 0 and arr[i+1] % 2 == 0 and arr[i+2] % 2 == 0:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 4, 6, 8, 10]\nassert f(g())\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Given an integer `n`, find the smallest integer `m` such that the product of all numbers from 1 to `m` is divisible by `n`.\n    Return True if such a number exists, False otherwise.\"\"\"\n    def product_of_numbers(num):\n        result = 1\n        for i in range(1, num + 1):\n            result *= i\n        return result\n    \n    while product_of_numbers(m) % n != 0:\n        m += 1\n    \n    return True\n\ndef g(m=10):\n    return m\n\nassert f(g())\n",
        "idx_generation": 115,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=3, b=5, upper_bound=1000) -> bool:\n    \"\"\"Find a number that is divisible by both a and b, and is a perfect square, and less than or equal to the upper_bound.\"\"\"\n    return n % a == 0 and n % b == 0 and math.isqrt(n) ** 2 == n and (0 < n <= upper_bound)\n\ndef g(a=3, b=5, upper_bound=1000):\n    lcm = a * b\n    while True:\n        if lcm % a == 0 and lcm % b == 0 and math.isqrt(lcm) ** 2 == lcm:\n            break\n        lcm += 1\n    return lcm\n\nassert f(g())\n",
        "idx_generation": 169,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(lst: List[str], target_length=5) -> bool:\n    \"\"\"Check if there is a string in the list that has a length equal to the target length.\"\"\"\n    for string in lst:\n        if len(string) == target_length:\n            return True\n    return False\n\ndef g(target_length=5):\n    return [\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\"]\n\nassert f(g())\n",
        "idx_generation": 356,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"Find and return the sum of all elements in the given matrix.\"\"\"\n    total_sum = 0\n    for row in matrix:\n        for element in row:\n            total_sum += element\n    return total_sum\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == 45\n\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a lower triangular matrix, where all elements above the main diagonal are zero.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [2, 4, 0], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(names: List[str], target_length=5) -> bool:\n    \"\"\"Check if the length of any name in the list is greater than or equal to target_length\"\"\"\n    return any(len(name) >= target_length for name in names)\n\ndef g(target_length=5):\n    return [\"John\", \"Alice\", \"Bob\", \"Mike\"]\n\nassert f(g())\n",
        "idx_generation": 119,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='hello world', t='world') -> bool:\n    \"\"\"Check if the string t is a substring of string s.\"\"\"\n    return t in s\n\ndef g(s='hello world', t='world'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers contains a subsequence that sums up to a certain target\"\"\"\n    target = 10\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if sum(numbers[i:j]) == target:\n                return True\n    return False\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Tuple\n\ndef f(matrix: List[List[int]], target_sum=80) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the matrix that add up to the target sum.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(i, rows):\n                for y in range(j, cols):\n                    if matrix[i][j] + matrix[x][y] == target_sum:\n                        return True\n    return False\n\ndef g(target_sum=80):\n    matrix = [[5, 10, 15],\n              [20, 25, 30],\n              [35, 40, 45]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 147,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 406,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a magic square\"\"\"\n    n = len(matrix)\n    target_sum = n * (n**2 + 1) // 2\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n\n    # Check diagonals\n    diag_sum1 = sum(matrix[i][i] for i in range(n))\n    diag_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    if diag_sum1 != target_sum or diag_sum2 != target_sum:\n        return False\n\n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a symmetric matrix.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(n):\n            if arr[i][j] != arr[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a strictly increasing sequence.\"\"\"\n    for i in range(1, len(nums)):\n        if nums[i] <= nums[i-1]:\n            return False\n    return True\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7]\n\nassert f(g())\n",
        "idx_generation": 221,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_count=3) -> bool:\n    \"\"\"Check if there are exactly 'target_count' numbers in the list that are even.\"\"\"\n    even_count = sum(1 for num in numbers if num % 2 == 0)\n    return even_count == target_count\n\ndef g(target_count=3):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if all elements in lst are prime numbers in increasing order.\"\"\"\n    primes = []\n    for num in lst:\n        if all(num % prime != 0 for prime in primes):\n            primes.append(num)\n        else:\n            return False\n    return True\ndef g():\n    return [2, 3, 5, 7, 11, 13, 17]\nassert f(g())\n",
        "idx_generation": 217,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target sum\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target_sum:\n                    return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, target_sum-3]\n\nassert f(g())\n",
        "idx_generation": 36,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find the product of all elements in the list\"\"\"\n    return math.prod(arr) == n\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    result = 1\n    for num in arr:\n        result *= num\n    return result\nassert f(g())\n",
        "idx_generation": 154,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(text: str, target_word=\"puzzle\") -> bool:\n    \"\"\"Check if the target_word appears in the text string\"\"\"\n    return target_word in text.lower()\n\ndef g(target_word=\"puzzle\"):\n    return \"This is a puzzle to solve.\"\n\nassert f(g())\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric along its main diagonal.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 313,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(result: int, n: int = 100, limit: int = 10) -> bool:\n    \"\"\"Find the result of applying the following operation to the number n, until it becomes zero or reaches the limit:\n    * If n is a prime number, subtract the square root of n\n    * If n is divisible by 5, divide it by 5\n    * If n is divisible by 3, subtract 3\n    * If n is divisible by 2, divide it by 2\n    \"\"\"\n    import math\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    while n > 0 and n != limit:\n        if is_prime(n):\n            n = n - int(math.sqrt(n))\n        elif n % 5 == 0:\n            n = n // 5\n        elif n % 3 == 0:\n            n = n - 3\n        elif n % 2 == 0:\n            n = n // 2\n        else:\n            break\n    return result == n\n\ndef g(n: int = 100, limit: int = 10):\n    import math\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    while n > 0 and n != limit:\n        if is_prime(n):\n            n = n - int(math.sqrt(n))\n        elif n % 5 == 0:\n            n = n // 5\n        elif n % 3 == 0:\n            n = n - 3\n        elif n % 2 == 0:\n            n = n // 2\n        else:\n            break\n    return n\n\nassert f(g())\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if there exists a subsequence in lst that multiplies up to n.\"\"\"\n    if n == 1:\n        return True\n    if not lst:\n        return False\n    return f(n, lst[1:]) or f(n / lst[0], lst[1:])\n\ndef g():\n    return 24, [2, 3, 4, 6]\n\nassert f(*g())\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"Check if there is a word in the list that has a length greater than or equal to the target_length.\"\"\"\n    for word in words:\n        if len(word) >= target_length:\n            return True\n    return False\n\ndef g(target_length=5):\n    return [\"apple\", \"banana\", \"kiwi\", \"mango\"]\n\nassert f(g())\n",
        "idx_generation": 205,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=30) -> bool:\n    \"\"\"Check if there exists a subarray in the given list with a sum equal to or greater than the target sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if sum(arr[i:j]) >= target_sum:\n                return True\n    return False\ndef g(target_sum=30):\n    return [10, 20, 30, 40, 50]\nassert f(g())\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=987654321, b=123456789) -> bool:\n    \"\"\"Check if a number is equal to the product of two given numbers\"\"\"\n    return x == a * b\ndef g(a=987654321, b=123456789):\n    return a * b\nassert f(g())\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of numbers, find if there exists a subset whose sum is equal to the target value.\"\"\"\n    def dfs(i, curr_sum):\n        if curr_sum == target:\n            return True\n        if i >= len(nums) or curr_sum > target:\n            return False\n        return dfs(i+1, curr_sum + nums[i]) or dfs(i+1, curr_sum)\n    return dfs(0, 0)\ndef g(target=100):\n    return [20, 30, 40, 10, 50]\nassert f(g())\n",
        "idx_generation": 141,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, t=100, upper=1000) -> bool:\n    \"\"\"Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper\ndef g(t=100, upper=1000):\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\nassert f(g())\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(moves: List[str], target_moves=[\"U\", \"D\", \"L\", \"R\"]) -> bool:\n    \"\"\"Check if the given sequence of moves is equivalent to the target sequence of moves\"\"\"\n    return moves == target_moves\n\ndef g(target_moves=[\"U\", \"D\", \"L\", \"R\"]):\n    return target_moves\n\nassert f(g())\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that are in decreasing order.\"\"\"\n    for i in range(len(arr)-k+1):\n        is_decreasing = True\n        for j in range(i, i+k-1):\n            if arr[j] <= arr[j+1]:\n                is_decreasing = False\n                break\n        if is_decreasing:\n            return True\n    return False\n\ndef g(k=3):\n    return [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: float, a=10, b=25) -> bool:\n    \"\"\"Check if the square root of the sum of a and x is equal to b\"\"\"\n    return sqrt(a + x) == b\n\ndef g(a=10, b=25):\n    return b**2 - a\n\nassert f(g())\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import factorial\n\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a factorial of any number.\"\"\"\n    i = 1\n    while factorial(i) <= n:\n        if factorial(i) == n:\n            return True\n        i += 1\n    return False\n\ndef g():\n    return 120\n\nassert f(g())\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if there exists a substring in the given string that consists of k consecutive characters in alphabetical order.\"\"\"\n    for i in range(len(s)-k+1):\n        if s[i:i+k] == ''.join(sorted(s[i:i+k])):\n            return True\n    return False\n\ndef g(k=3):\n    return \"abcdefghi\"\n\nassert f(g())\n",
        "idx_generation": 260,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a given number is a perfect square.\"\"\"\n    return n in [num ** 2 for num in numbers]\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return numbers[0]\nassert f(g())\n",
        "idx_generation": 149,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='python') -> bool:\n    \"\"\"Check if the given string contains the specified substring.\"\"\"\n    return substring in string\n\ndef g(substring='python'):\n    return \"I love python programming.\"\n\nassert f(g())\n",
        "idx_generation": 67,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate numbers.\n    Return True if duplicates exist, False otherwise.\"\"\"\n    seen = set()\n    for num in numbers:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 212,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a given list of numbers is a Fibonacci sequence\"\"\"\n    if len(nums) < 3:\n        return False\n    for i in range(2, len(nums)):\n        if nums[i] != nums[i-1] + nums[i-2]:\n            return False\n    return True\n\ndef g():\n    return [0, 1, 1, 2, 3, 5, 8, 13]\n\nassert f(g())\n\n",
        "idx_generation": 275,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, li: List[int] = [2, 4, 6, 8, 10], target=12) -> bool:\n    \"\"\"Check if there exists a pair of numbers from the list whose sum is equal to the target number.\"\"\"\n    return any((num1 + num2 == target for num1 in li for num2 in li))\ndef g(li: List[int] = [2, 4, 6, 8, 10], target=12):\n    return li[0], target - li[0]\nassert f(g())\n",
        "idx_generation": 177,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target_count=3) -> bool:\n    \"\"\"Check if a given list has a count of elements equal to or greater than the target count\"\"\"\n    return len(lst) >= target_count\ndef g(target_count=3):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g())\n",
        "idx_generation": 30,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], k=3, target_sum=10) -> bool:\n    \"\"\"Check if there exists a combination of k numbers from the list that sums up to the target_sum\"\"\"\n    from itertools import combinations\n    for subset in combinations(nums, k):\n        if sum(subset) == target_sum:\n            return True\n    return False\n\ndef g(k=3, target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if a number is divisible by another number.\"\"\"\n    return n % m == 0\n\ndef g(m=5):\n    return m * 10\n\nassert f(g())\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\nfrom typing import Tuple\n\ndef f(sides: Tuple[int, int, int]) -> bool:\n    \"\"\"Check if the given tuple of sides forms a right-angled triangle.\"\"\"\n    a, b, c = sorted(sides)\n    return math.isclose(a**2 + b**2, c**2)\n\ndef g():\n    return (3, 4, 5)\n\nassert f(g())\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Check if the given word is an anagram of any word in the list words.\"\"\"\n    sorted_word = sorted(word)\n    return any(sorted_word == sorted(w) for w in words)\ndef g(words=['apple', 'banana', 'cherry', 'date']):\n    return words[0]\nassert f(g())\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='apple') -> bool:\n    \"\"\"Check if the given string is a palindrome and contains the target word\"\"\"\n    return s == s[::-1] and target in s\ndef g(target='apple'):\n    return target + target[::-1]\nassert f(g())\n",
        "idx_generation": 56,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(a: List[int], b: List[int]) -> bool:\n    \"\"\"Check if all elements in list a are divisible by any element in list b, but not vice versa.\"\"\"\n    return all(any(i % j == 0 for j in b) and all(j % i != 0 for j in b) for i in a)\n\ndef g():\n    return [10, 20, 30, 40], [1, 2, 3, 4]\n\nassert f(*g())\n",
        "idx_generation": 169,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int], k=2) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form a strictly increasing sequence.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+1] > arr[i+j] for j in range(k-1)):\n            return True\n    return False\n\ndef g():\n    return [1, 3, 5, 7, 9, 11]\n\nassert f(g())\n",
        "idx_generation": 412,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='abc', b='def') -> bool:\n    \"\"\"Check if the given string can be formed by combining characters from both a and b, without changing the order of characters in a or b\"\"\"\n    i = 0\n    j = 0\n    for char in s:\n        if i < len(a) and char == a[i]:\n            i += 1\n        elif j < len(b) and char == b[j]:\n            j += 1\n        else:\n            return False\n    return True\n\ndef g(a='abc', b='def'):\n    return a + b\n\nassert f(g())\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=42) -> bool:\n    \"\"\"Given a list of numbers, find a pair of numbers whose product is equal to the target_sum.\"\"\"\n    return any((numbers[i] * numbers[j] == target_sum for i in range(len(numbers)) for j in range(i+1, len(numbers))))\n    \ndef g(target_sum=42):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 183,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order.\"\"\"\n    return lst == sorted(lst)\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 170,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target_sum=20) -> bool:\n    \"\"\"Find a number such that the sum of its digits is equal to the target_sum, and the number is a prime number.\"\"\"\n    return sum([int(digit) for digit in str(n)]) == target_sum and is_prime(n)\ndef g(target_sum=20):\n    n = 2\n    while True:\n        if sum([int(digit) for digit in str(n)]) == target_sum and is_prime(n):\n            return n\n        n += 1\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nassert f(g())\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word_list: List[str], prefix='pre') -> bool:\n    \"\"\"Check if all words in the list start with a given prefix.\"\"\"\n    for word in word_list:\n        if not word.startswith(prefix):\n            return False\n    return True\n\ndef g():\n    return ['prefix', 'preparation', 'pretext']\n\nassert f(g())\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is present in the list.\"\"\"\n    return target in nums\n\ndef g(nums=[1, 2, 3, 4, 5], target=3):\n    return nums\n\nassert f(g(), 3)\n",
        "idx_generation": 409,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, sub='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string and appears exactly twice.\"\"\"\n    return string.count(sub) == 2\n\ndef g(sub='abc'):\n    return sub + 'xyz' + sub\n\nassert f(g())\n",
        "idx_generation": 434,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains only prime numbers.\"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for num in nums:\n        if num not in primes:\n            return False\n    return True\n\ndef g():\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\nassert f(g())\n\n",
        "idx_generation": 356,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\n\ndef f(n: int, a=2, b=3, c=4, upper_bound=1000) -> bool:\n    \"\"\"Find a number that is divisible by a, is a multiple of b, and is a square number, and is less than or equal to the upper_bound.\"\"\"\n    return n % a == 0 and n % b == 0 and math.isqrt(n) ** 2 == n and 0 < n <= upper_bound\n\ndef g(a=2, b=3, c=4, upper_bound=1000):\n    lcm = max(a, b)\n    while True:\n        if lcm % a == 0 and lcm % b == 0 and math.isqrt(lcm) ** 2 == lcm:\n            break\n        lcm += 1\n    return lcm\n\nassert f(g())\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(n: int, a=2, b=3, c=4, upper_bound=1000) -> bool:\n    \"\"\"Find a number that is divisible by both a and b, and is a multiple of c, and is less than or equal to the upper_bound.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0 and 0 < n <= upper_bound\n\ndef g(a=2, b=3, c=4, upper_bound=1000):\n    lcm = max(a, b, c)\n    while True:\n        if lcm % a == 0 and lcm % b == 0 and lcm % c == 0:\n            break\n        lcm += 1\n    return lcm\n\nassert f(g())\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(a: List[int], b: List[int]) -> bool:\n    \"\"\"Check if the given lists have any common elements.\"\"\"\n    return any(item in b for item in a)\n\ndef g():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return list1, list2\n\nassert f(*g())\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"Find and return the sum of all elements in the given matrix.\"\"\"\n    total_sum = 0\n    for row in matrix:\n        for element in row:\n            total_sum += element\n    return total_sum\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == 45\n",
        "idx_generation": 392,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a lower triangular matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0, 0], [3, 4, 0, 0], [5, 6, 7, 0], [9, 10, 11, 12]]\n\nassert f(g())\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc', count=3) -> bool:\n    \"\"\"Find a string that contains the substring a certain number of times in consecutive positions\"\"\"\n    return substring * count in s\ndef g(substring='abc', count=3):\n    return substring * count\nassert f(g())\n",
        "idx_generation": 134,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=4, m=4) -> bool:\n    \"\"\"Check if the length of s is divisible by the sum of n and m\"\"\"\n    return len(s) % (n + m) == 0\ndef g(n=4, m=4):\n    return \"a\" * (n + m)\nassert f(g())\n",
        "idx_generation": 231,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there exists a subset of numbers that adds up to the target value.\"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in numbers:\n        for i in range(target, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]\n\ndef g(numbers: List[int]):\n    return numbers\n\nassert f(g([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the array that sums up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 148,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a symmetric matrix\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    if rows != cols:\n        return False\n\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], rows=2, cols=2) -> bool:\n    \"\"\"Check if the given matrix has dimensions rows x cols\"\"\"\n    return len(matrix) == rows and all(len(row) == cols for row in matrix)\n\ndef g(rows=2, cols=2):\n    return [[1, 2], [3, 4]]\n\nassert f(g())\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square.\n    \"\"\"\n    n = len(arr)\n    magic_sum = sum(arr[0])\n\n    # Check rows\n    for row in arr:\n        if sum(row) != magic_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += arr[i][j]\n        if col_sum != magic_sum:\n            return False\n\n    # Check diagonals\n    diag_sum1 = 0\n    diag_sum2 = 0\n    for i in range(n):\n        diag_sum1 += arr[i][i]\n        diag_sum2 += arr[i][n-1-i]\n    if diag_sum1 != magic_sum or diag_sum2 != magic_sum:\n        return False\n\n    return True\n\ndef g():\n    return [[2, 7, 6],\n            [9, 5, 1],\n            [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=0, b=1, c=2) -> bool:\n    \"\"\"Check if a number is a Fibonacci number.\"\"\"\n    fib_nums = [a, b]\n    while fib_nums[-1] < n:\n        fib_nums.append(fib_nums[-1] + fib_nums[-2])\n    return fib_nums[-1] == n\n\ndef g(a=0, b=1, c=2):\n    return 8\n\nassert f(g())\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target_sum.\"\"\"\n    return any(num_list[i] + num_list[j] == target_sum for i in range(len(num_list)) for j in range(i+1, len(num_list)))\n    \ndef g(target_sum=100):\n    return [20, 30, 40, 50, 60]\n\nassert f(g())\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    \"\"\"Check if the sum of the elements in a list is divisible by 3\"\"\"\n    return sum(li) % 3 == 0\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 220,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that adds up to the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 3, 5, 7, 9]\n\nassert f(g())\n",
        "idx_generation": 47,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x=5, y=10) -> bool:\n    \"\"\"Check if the given number is divisible by both x and y\"\"\"\n    return n % x == 0 and n % y == 0\n\ndef g(x=5, y=10):\n    return x * y\n\nassert f(g())\n\n",
        "idx_generation": 177,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if the characters of a word appear in the same order in a string, but with any number of characters between them.\"\"\"\n    i = 0\n    for char in s:\n        if char == word[i]:\n            i += 1\n        if i == len(word):\n            return True\n    return False\ndef g(word='python'):\n    return word\nassert f(g())\n",
        "idx_generation": 153,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    sum_diag1 = 0\n    sum_diag2 = 0\n    sum_rows = [0] * n\n    sum_cols = [0] * n\n\n    for i in range(n):\n        for j in range(n):\n            sum_rows[i] += matrix[i][j]\n            sum_cols[j] += matrix[i][j]\n            if i == j:\n                sum_diag1 += matrix[i][j]\n            if i + j == n - 1:\n                sum_diag2 += matrix[i][j]\n\n    target_sum = sum_rows[0]\n    if sum_rows == sum_cols == [target_sum] * n and sum_diag1 == sum_diag2 == target_sum:\n        return True\n    else:\n        return False\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g()) == True\n\n",
        "idx_generation": 319,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(result: int, n: int = 100, limit: int = 10) -> bool:\n    \"\"\"Find the result of applying the following operation to the number n, until it becomes zero or reaches the limit:\n    * If n is a prime number, subtract the square root of n\n    * If n is divisible by 5, divide it by 5\n    * If n is divisible by 3, subtract 3\n    * If n is divisible by 2, divide it by 2\n    \"\"\"\n    import math\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    while n > 0 and n != limit:\n        if is_prime(n):\n            n = n - int(math.sqrt(n))\n        elif n % 5 == 0:\n            n = n // 5\n        elif n % 3 == 0:\n            n = n - 3\n        elif n % 2 == 0:\n            n = n // 2\n        else:\n            break\n    return result == n\n\ndef g(n: int = 100, limit: int = 10):\n    import math\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    while n > 0 and n != limit:\n        if is_prime(n):\n            n = n - int(math.sqrt(n))\n        elif n % 5 == 0:\n            n = n // 5\n        elif n % 3 == 0:\n            n = n - 3\n        elif n % 2 == 0:\n            n = n // 2\n        else:\n            break\n    return n\n\nassert f(g())\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if there exists a subsequence in lst that XORs up to n.\"\"\"\n    if n == 0:\n        return True\n    if not lst:\n        return False\n    return f(n, lst[1:]) or f(n ^ lst[0], lst[1:])\n\ndef g():\n    return 10, [2, 4, 6, 8]\n\nassert f(*g())\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='programming') -> bool:\n    \"\"\"Check if the given string contains all the characters in the target string in the same order.\"\"\"\n    target_index = 0\n    for char in s:\n        if char == target[target_index]:\n            target_index += 1\n        if target_index == len(target):\n            return True\n    return False\n\ndef g(target='programming'):\n    return 'python programming'\n\nassert f(g())\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Check if there exists a row in the given matrix with a sum equal to or greater than the target sum.\"\"\"\n    for row in matrix:\n        if sum(row) >= target_sum:\n            return True\n    return False\ndef g(target_sum=100):\n    return [[10, 20, 30], [40, 50, 60], [70, 80, 90]]\nassert f(g())\n",
        "idx_generation": 30,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[3, 5, 7, 9, 11, 13, 15]) -> bool:\n    \"\"\"Given a list of integers nums and an integer n, determine if n is a prime number and also present in the list.\"\"\"\n    return n in nums and all(n % i != 0 for i in range(2, int(n**0.5) + 1))\ndef g(nums=[3, 5, 7, 9, 11, 13, 15]):\n    return next((n for n in nums if all(n % i != 0 for i in range(2, int(n**0.5) + 1))), None)\nassert f(g())\n",
        "idx_generation": 141,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, t=150, upper=50) -> bool:\n    \"\"\"Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper\ndef g(t=150, upper=50):\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\nassert f(g())\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(password: str, length=8, uppercase=1, lowercase=1, digits=1, special_chars=1) -> bool:\n    \"\"\"Check if the given password meets the required criteria.\"\"\"\n    if len(password) < length:\n        return False\n    if sum(1 for c in password if c.isupper()) < uppercase:\n        return False\n    if sum(1 for c in password if c.islower()) < lowercase:\n        return False\n    if sum(1 for c in password if c.isdigit()) < digits:\n        return False\n    if sum(1 for c in password if not c.isalnum()) < special_chars:\n        return False\n    return True\n\ndef g(length=8, uppercase=1, lowercase=1, digits=1, special_chars=1):\n    return \"Passw0rd!\"\n\nassert f(g())\n",
        "idx_generation": 261,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose length is equal to k and all its elements are distinct.\"\"\"\n    for i in range(len(arr)-k+1):\n        subarr = arr[i:i+k]\n        if len(set(subarr)) == k:\n            return True\n    return False\n\ndef g(k=3):\n    return [i for i in range(1, 2*k+1, 2)]\n\nassert f(g())\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a power of two.\"\"\"\n    return n != 0 and (n & (n - 1)) == 0\n\ndef g():\n    return 16\n\nassert f(g())\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], word_len=5) -> bool:\n    \"\"\"Check if there exists a word in the list that has the specified length.\"\"\"\n    for word in words:\n        if len(word) == word_len:\n            return True\n    return False\n\ndef g(word_len=5):\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n\nassert f(g())\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int) -> bool:\n    \"\"\"Check if a given number is a perfect square.\"\"\"\n    return x ** 0.5 % 1 == 0\n\ndef g():\n    return 16\n\nassert f(g())\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if the given substring is present in the original string\"\"\"\n    return substr in s\n\ndef g(substr='python'):\n    return \"I love programming in python!\"\n\nassert f(g()) == True\n",
        "idx_generation": 68,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(dictionary: Dict[str, int]) -> bool:\n    \"\"\"Check if the given dictionary has any duplicate values\"\"\"\n    values = list(dictionary.values())\n    return len(values) != len(set(values))\n\ndef g():\n    return {'apple': 3, 'banana': 2, 'cherry': 3, 'date': 4}\n\nassert f(g())\n",
        "idx_generation": 213,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, seq: List[int]) -> bool:\n    \"\"\"Check if the sum of the sequence is a perfect square\"\"\"\n    total = sum(seq)\n    return total != 0 and int(total**0.5)**2 == total\n\ndef g(seq: List[int]):\n    return seq\n\nassert f(n=25, seq=g([5, 12, 8]))\n\n\n",
        "idx_generation": 290,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target_value=5) -> bool:\n    \"\"\"Check if the target_value is present in the matrix.\"\"\"\n    for row in matrix:\n        if target_value in row:\n            return True\n    return False\n\ndef g(target_value=5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 180,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 32,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target sum, check if there exist two distinct numbers in the list whose sum is equal to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen and num != complement:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return ([4, 9, 2, 1, 8, 7, 5, 3, 6], 10)\n\nassert f(*g())\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x=100, y=10) -> bool:\n    \"\"\"Check if the number n is divisible by both x and y.\"\"\"\n    return n % x == 0 and n % y == 0\ndef g(x=100, y=10):\n    n = 1\n    while True:\n        if n % x == 0 and n % y == 0:\n            return n\n        n += 1\nassert f(g())\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\nfrom typing import Tuple\n\ndef f(coordinates: Tuple[float, float], radius: float = 5.0) -> bool:\n    \"\"\"Check if the given point lies within the circle with the given radius centered at the origin.\"\"\"\n    x, y = coordinates\n    distance = math.sqrt(x ** 2 + y ** 2)\n    return distance <= radius\n\ndef g(radius: float = 5.0):\n    coordinates = (3.0, 4.0)\n    return coordinates\n\nassert f(g()) == True\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(tuples: List[Tuple[str, int]], target_key='name', target_value='John') -> bool:\n    \"\"\"Check if a given list of tuples contains at least one tuple with a key-value pair matching the target key and value.\"\"\"\n    return any(key == target_key and value == target_value for key, value in tuples)\n\ndef g(target_key='name', target_value='John'):\n    return [('name', 'Alice'), ('age', 25), ('name', 'John'), ('gender', 'Male')]\n\nassert f(g())\n",
        "idx_generation": 126,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"Check if the given number is a palindrome\"\"\"\n    return str(num) == str(num)[::-1]\n\ndef g():\n    return 12321\n\nassert f(g())\n",
        "idx_generation": 58,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers contains a subsequence that is increasing by exactly 2 each time\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            subsequence = numbers[i:j]\n            is_increasing_by_2 = all(subsequence[k+1] - subsequence[k] == 2 for k in range(len(subsequence)-1))\n            if is_increasing_by_2:\n                return True\n    return False\n\ndef g():\n    return [1, 3, 5, 7, 9, 11, 13, 15, 17]\n\nassert f(g())\n",
        "idx_generation": 212,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form a strictly increasing sequence.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+1] > arr[i+j] for j in range(k-1)):\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str], target_length: int = 10) -> List[str]:\n    \"\"\"Find all strings in the list that have a length equal to the target_length\"\"\"\n    valid_strings = []\n    for s in strings:\n        if len(s) == target_length:\n            valid_strings.append(s)\n    return valid_strings\n\ndef g(target_length: int = 10):\n    strings = [\"apple\", \"banana\", \"orange\", \"grapefruit\", \"watermelon\"]\n    return strings\n\nassert f(g()) == [\"grapefruit\", \"watermelon\"]\n",
        "idx_generation": 148,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(points: List[Tuple[int, int]], target_distance=5) -> bool:\n    \"\"\"Find a pair of points from the list whose Euclidean distance is greater than or equal to the target distance\"\"\"\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n            if distance >= target_distance:\n                return True\n    return False\n\ndef g(target_distance=5):\n    return [(1, 2), (3, 4), (5, 6), (7, 8)]\n\nassert f(g())\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find the product of the first n elements in the list and check if it is divisible by n.\"\"\"\n    return math.prod(lst[:n]) % n == 0\ndef g(lst=[1, 2, 3, 4, 5]):\n    return len(lst), lst\nassert f(*g())\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target_sum=20) -> bool:\n    \"\"\"Check if there exists a number such that the sum of its digits is equal to the target_sum, and the number is a palindrome.\"\"\"\n    return sum([int(digit) for digit in str(n)]) == target_sum and str(n) == str(n)[::-1]\ndef g(target_sum=20):\n    n = 2\n    while True:\n        if sum([int(digit) for digit in str(n)]) == target_sum and str(n) == str(n)[::-1]:\n            return n\n        n += 1\n\nassert f(g())\n",
        "idx_generation": 210,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if all words in the list start with the given prefix.\"\"\"\n    return all(word.startswith(prefix) for word in words)\n\ndef g(prefix='pre'):\n    return [prefix + word for word in ['fix', 'text', 'dict', 'load']]\n\nassert f(g())\n",
        "idx_generation": 370,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import *\ndef f(n: int, lst=[1, 2, 3, 4]) -> bool:\n    \"\"\"Check if a given number is present in the list.\n    Return True if it is present, False otherwise.\"\"\"\n    return n in lst\n\ndef g(lst=[1, 2, 3, 4]):\n    return lst[1:3]\n\nassert f(g()) == False\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if all numbers in the list are prime numbers.\"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    return all(num in primes for num in numbers)\n\ndef g():\n    return [2, 7, 13, 19, 31]\n\nassert f(g())\n\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if a given number is a multiple of any number in the list.\"\"\"\n    return any(n % num == 0 for num in nums)\ndef g(nums=[2, 4, 6, 8, 10]):\n    return nums[0] * 3\nassert f(g())\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=7, c=9, upper_bound=1000) -> bool:\n    \"\"\"Find a number that is divisible by both a and b, and is a multiple of c, and is less than or equal to the upper_bound.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0 and 0 < n <= upper_bound\n\ndef g(a=5, b=7, c=9, upper_bound=1000):\n    lcm = max(a, b, c)\n    while True:\n        if lcm % a == 0 and lcm % b == 0 and lcm % c == 0:\n            break\n        lcm += 1\n    return lcm\n\nassert f(g())\n",
        "idx_generation": 219,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"Check if there exists a word in the list that has the target length.\"\"\"\n    for word in words:\n        if len(word) == target_length:\n            return True\n    return False\n\ndef g(target_length=5):\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n\nassert f(g())\n\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"Find and return the sum of all elements in the given matrix.\"\"\"\n    total_sum = 0\n    for row in matrix:\n        for element in row:\n            total_sum += element\n    return total_sum\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == 45\n\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[List[int]]) -> bool:\n    \"\"\"Check if the given list of lists is a magic square, where the sums of the rows, columns, and diagonals are the same.\"\"\"\n    n = len(lst)\n    target_sum = sum(lst[0])\n    \n    for row in lst:\n        if sum(row) != target_sum:\n            return False\n    \n    for col in zip(*lst):\n        if sum(col) != target_sum:\n            return False\n    \n    diag_sum1 = sum(lst[i][i] for i in range(n))\n    diag_sum2 = sum(lst[i][n-i-1] for i in range(n))\n    \n    if diag_sum1 != target_sum or diag_sum2 != target_sum:\n        return False\n    \n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Find if there exists a substring of length k that appears more than once in the string\"\"\"\n    substrings = []\n    for i in range(len(s)-k+1):\n        substrings.append(s[i:i+k])\n    return len(substrings) != len(set(substrings))\n\ndef g(k=3):\n    return \"abcdefgabcd\"\n\nassert f(g())\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string\"\"\"\n    return substring in s\n\ndef g(substring='abc'):\n    return 'xyzabc123'\n\nassert f(g())\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"Check if there exists a subset of numbers that adds up to the target value.\"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([2, 4, 6, 8, 10]), target=20)\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find any two numbers whose sum is equal to the target value.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return lst\n\nassert f(g())\n",
        "idx_generation": 149,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a symmetric matrix\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    if rows != cols:\n        return False\n\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(num_list: List[int]) -> bool:\n    \"\"\"Check if any number in the list is a perfect square.\"\"\"\n    return any(num == int(num**0.5)**2 for num in num_list)\n\ndef g():\n    return [4, 9, 16, 25, 36]\n\nassert f(g())\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=4) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form an arithmetic progression.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+1] == arr[i+j] + 3 for j in range(k-1)):\n            return True\n    return False\n\ndef g():\n    return [1, 4, 7, 10, 13, 16, 19, 22, 25]\n\nassert f(g())\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=9) -> bool:\n    \"\"\"Check if there exists two numbers in the list whose sum is equal to the target.\"\"\"\n    return any(target - num in numbers for num in numbers)\n\ndef g(target=9):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 332,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=4) -> bool:\n    \"\"\"Check if there exists a subarray of length n in the list for which the product of its elements is greater than 100.\"\"\"\n    for i in range(len(arr)-n+1):\n        product = 1\n        for j in range(i, i+n):\n            product *= arr[j]\n        if product > 100:\n            return True\n    return False\n\ndef g(n=4):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18]\n\nassert f(g())\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the given target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=11) -> bool:\n    \"\"\"Check if the given number is divisible by both a and b\"\"\"\n    return n % a == 0 and n % b == 0\n\ndef g(a=3, b=11):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str) -> bool:\n    \"\"\"Check if a word is a palindrome\"\"\"\n    return word == word[::-1]\ndef g():\n    return \"radar\"\nassert f(g())\n",
        "idx_generation": 167,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0]) if rows > 0 else 0\n    return all(len(row) == cols for row in matrix)\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in lst that adds up to n\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst\n\nassert f(9, g())\n\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='programming') -> bool:\n    \"\"\"Check if the given string contains all the characters in the target string in the same order.\"\"\"\n    target_index = 0\n    for char in s:\n        if char == target[target_index]:\n            target_index += 1\n        if target_index == len(target):\n            return True\n    return False\n\ndef g(target='programming'):\n    return 'programming python'\n\nassert f(g())\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Find a subset of numbers from the given list that adds up to the target sum.\"\"\"\n    for i in range(1, len(nums) + 1):\n        combinations = itertools.combinations(nums, i)\n        for combo in combinations:\n            if sum(combo) == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 32,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=50, max_numbers=5) -> bool:\n    \"\"\"Find a combination of at most max_numbers numbers whose sum is equal to the target value.\"\"\"\n    for num in numbers:\n        assert num >= 0\n    for i in range(len(numbers)):\n        if numbers[i] == target:\n            return True\n    for n in range(2, max_numbers + 1):\n        for combination in itertools.combinations(numbers, n):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(numbers=[10, 20, 30, 40, 50], target=50, max_numbers=5):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 147,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, t=200, upper=30) -> bool:\n    \"\"\"Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper\ndef g(t=200, upper=30):\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\nassert f(g())\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the string has a length greater than n and contains only lowercase alphabets.\"\"\"\n    return len(s) > n and s.islower()\n\ndef g(n=5):\n    return \"abcdef\"\n    \nassert f(g())\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose length is equal to k and its elements are in increasing order.\"\"\"\n    for i in range(len(arr)-k+1):\n        subarr = arr[i:i+k]\n        if all(subarr[j] < subarr[j+1] for j in range(k-1)):\n            return True\n    return False\n\ndef g(k=3):\n    return [i for i in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"Check if the target_word is present in the list of words.\"\"\"\n    for word in words:\n        if target_word in word:\n            return True\n    return False\n\ndef g(target_word='python'):\n    return ['hello', 'world', 'python', 'programming']\n\nassert f(g())\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if there exists two consecutive numbers in the list that form a perfect square.\"\"\"\n    for i in range(len(arr)-1):\n        if (arr[i+1] ** 0.5) - (arr[i] ** 0.5) == 1:\n            return True\n    return False\n\ndef g():\n    return [1, 4, 5, 9, 16, 18, 25, 36]\n\nassert f(g())\n",
        "idx_generation": 168,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Given a list of words, check if any word in the list contains the target word as a substring.\n    Return True if such a word exists, False otherwise.\"\"\"\n    for word in words:\n        if target in word:\n            return True\n    return False\n\ndef g():\n    return ['hello', 'world', 'pythonista', 'programming']\n\nassert f(g()) == True\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a list of numbers contains any duplicate elements.\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\n\nassert f(g())\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(lst: List[int], n: int = 3) -> bool:\n    \"\"\"Check if there are exactly n consecutive numbers in the list\"\"\"\n    lst.sort()\n    for i in range(len(lst)-n+1):\n        if lst[i] + n - 1 == lst[i+n-1]:\n            return True\n    return False\n\ndef g(n: int = 3):\n    return [1, 2, 3, 4, 5, 6, 7]\n\nassert f(g())\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_value=0) -> bool:\n    \"\"\"Check if the target value is present in any row or column of the matrix.\"\"\"\n    for row in matrix:\n        if target_value in row:\n            return True\n    num_cols = len(matrix[0])\n    for col in range(num_cols):\n        column = [matrix[row][col] for row in range(len(matrix))]\n        if target_value in column:\n            return True\n    return False\n\ndef g(target_value=0):\n    return [[1, 2, 0], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Find a subarray in the given list where the sum of its elements is equal to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr) + 1):\n            if sum(arr[i:j]) == target:\n                return True\n    return False\ndef g(target=0):\n    return [1, 2, -3, 4, -1, 5]  # Example input list\nassert f(g())\n",
        "idx_generation": 34,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, n=3) -> bool:\n    \"\"\"Check if there exists a combination of n numbers from the given list that sum up to the target.\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(nums, n))\ndef g(target=10, n=3):\n    nums = [1, 2, 3, 4, 5]\n    from itertools import combinations\n    for c in combinations(nums, n):\n        if sum(c) == target:\n            return list(c)\nassert f(g())\n",
        "idx_generation": 29,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a number that is divisible by 3 and 5, but not divisible by 2.\"\"\"\n    return n % 3 == 0 and n % 5 == 0 and n % 2 != 0\ndef g():\n    return 15\nassert f(g())\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\nfrom typing import Tuple\n\ndef f(coordinates: Tuple[float, float], radius: float = 5.0) -> bool:\n    \"\"\"Check if the given point lies within the circle with the given radius centered at the origin.\"\"\"\n    x, y = coordinates\n    distance = math.sqrt(x ** 2 + y ** 2)\n    return distance < radius\n\ndef g(radius: float = 5.0):\n    coordinates = (0.0, 3.0)\n    return coordinates\n\nassert f(g()) == True\n\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"Check if any word in a list starts with a specific letter.\"\"\"\n    return any(word.startswith(letter) for word in words)\n\ndef g(letter='a'):\n    return ['apple', 'banana', 'orange']\n\nassert f(g())\n",
        "idx_generation": 136,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string that is a palindrome and contains at least two different letters.\"\"\"\n    return s == s[::-1] and len(set(s)) >= 2\ndef g():\n    return 'racecar'\nassert f(g())\n",
        "idx_generation": 59,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a subarray in the given list such that the sum of its elements is zero\"\"\"\n    prefix_sum = set()\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        if curr_sum in prefix_sum or curr_sum == 0:\n            return True\n        prefix_sum.add(curr_sum)\n    return False\n\ndef g():\n    return [4, 2, -3, 1, 6]\n\nassert f(g())\n\n",
        "idx_generation": 231,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form a strictly increasing sequence.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+1] > arr[i+j] for j in range(k-1)):\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='Python', index=0) -> bool:\n    \"\"\"Check if a word appears at the end of a string\"\"\"\n    return s.endswith(word)\n\ndef g(word='Python', index=0):\n    return 'Hello ' + word\n\nassert f(g())\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(p: Tuple[int, int], points: List[Tuple[int, int]] = [(1, 2), (3, 4), (5, 6)]) -> bool:\n    \"\"\"Check if the given point is in the list of points\"\"\"\n    return p in points\n\ndef g(points: List[Tuple[int, int]] = [(1, 2), (3, 4), (5, 6)]):\n    return points[0]\n\nassert f(g())\n",
        "idx_generation": 262,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if n is present in the list and is the only element that appears more than once.\"\"\"\n    return lst.count(n) > 1 and all(lst.count(x) <= 1 for x in lst if x != n)\n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]):\n    return lst\n\nassert f(1, g())\n",
        "idx_generation": 178,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(words: List[str], num_players: int, max_words: int) -> bool:\n    \"\"\"Check if each player has a unique set of words from the given list.\"\"\"\n    hands = [words[i:i+max_words] for i in range(0, num_players*max_words, max_words)]\n    return len(set(tuple(hand) for hand in hands)) == num_players\n\ndef g():\n    return (['apple', 'banana', 'cherry', 'durian', 'elderberry', 'fig', 'grape', 'honeydew', 'indigo', 'jackfruit'], 3, 4)\n\nassert f(*g())\n",
        "idx_generation": 371,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import *\ndef f(n: int, lst=[1, 2, 3, 4]) -> bool:\n    \"\"\"Check if a given number is present in the list.\n    Return True if it is present, False otherwise.\"\"\"\n    return n in lst\n\ndef g(lst=[1, 2, 3, 4]):\n    return lst[1:3]\n\nassert f(g()) == False\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list contains all consecutive numbers\"\"\"\n    sorted_lst = sorted(lst)\n    for i in range(len(sorted_lst)-1):\n        if sorted_lst[i+1] - sorted_lst[i] != 1:\n            return False\n    return True\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 422,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, m=20, numbers=[3, 5, 7, 9, 11]) -> bool:\n    \"\"\"Find a combination of at most m numbers from the given list that sums up to n.\"\"\"\n    from itertools import combinations\n    for i in range(1, m+1):\n        for c in combinations(numbers, i):\n            if sum(c) == n:\n                return True\n    return False\n\ndef g(m=20, numbers=[3, 5, 7, 9, 11]):\n    return 25\n\nassert f(g())\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=6, c=9, upper_bound=100) -> bool:\n    \"\"\"Find a number that is divisible by both a and b, and is a multiple of c, and is less than or equal to the upper_bound.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0 and 0 < n <= upper_bound\n\ndef g(a=3, b=6, c=9, upper_bound=100):\n    lcm = max(a, b, c)\n    while True:\n        if lcm % a == 0 and lcm % b == 0 and lcm % c == 0:\n            break\n        lcm += 1\n    return lcm\n\nassert f(g())\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Dict\n\ndef f(records: List[Dict[str, Union[str, int]]], key='age') -> bool:\n    \"\"\"Check if any record in the list has a value less than 18 for the specified key.\"\"\"\n    return any(record[key] < 18 for record in records)\n\ndef g(key='age'):\n    return [{'name': 'Alice', 'age': 20}, {'name': 'Bob', 'age': 15}, {'name': 'Charlie', 'age': 25}]\n\nassert f(g())\n",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], a=3, b=4) -> bool:\n    \"\"\"Check if the given list contains both elements a and b\"\"\"\n    return a in x and b in x\n\ndef g(a=3, b=4):\n    return [a, b, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 420,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a', n=3) -> bool:\n    \"\"\"Check if a string contains a certain character repeated a certain number of times\"\"\"\n    return s.count(char) == n\ndef g(char='a', n=3):\n    return char * n + 'bcd'\nassert f(g())\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='Python is fun!', t='Python') -> bool:\n    \"\"\"Check if the string t is a substring of string s\"\"\"\n    return s[:len(t)] == t\n\ndef g(s='Python is fun!', t='Python'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 242,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 50) -> bool:\n    \"\"\"Check if there exists a subset of numbers that adds up to the target value.\"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([10, 20, 30, 40, 50]), target=80)\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(d: Dict[str, int], target=10) -> bool:\n    \"\"\"Check if the sum of all values in the dictionary is equal to the target number.\"\"\"\n    return sum(d.values()) == target\n\ndef g(target=10):\n    return {'a': 3, 'b': 4, 'c': 3}\n\nassert f(g())\n",
        "idx_generation": 171,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a valid sudoku solution.\"\"\"\n    def is_valid(arr):\n        arr = [x for x in arr if x != '.']\n        return len(set(arr)) == len(arr)\n\n    def validate_rows(board):\n        for row in board:\n            if not is_valid(row):\n                return False\n        return True\n\n    def validate_columns(board):\n        for j in range(9):\n            column = [board[i][j] for i in range(9)]\n            if not is_valid(column):\n                return False\n        return True\n\n    def validate_boxes(board):\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                box = [board[x][y] for x in range(i, i + 3) for y in range(j, j + 3)]\n                if not is_valid(box):\n                    return False\n        return True\n\n    return validate_rows(nums) and validate_columns(nums) and validate_boxes(nums)\n\ndef g():\n    return [\n        [\"5\", \"3\", \".\", \".\", \"7\", \".\", \".\", \".\", \".\"],\n        [\"6\", \".\", \".\", \"1\", \"9\", \"5\", \".\", \".\", \".\"],\n        [\".\", \"9\", \"8\", \".\", \".\", \".\", \".\", \"6\", \".\"],\n        [\"8\", \".\", \".\", \".\", \"6\", \".\", \".\", \".\", \"3\"],\n        [\"4\", \".\", \".\", \"8\", \".\", \"3\", \".\", \".\", \"1\"],\n        [\"7\", \".\", \".\", \".\", \"2\", \".\", \".\", \".\", \"6\"],\n        [\".\", \"6\", \".\", \".\", \".\", \".\", \"2\", \"8\", \".\"],\n        [\".\", \".\", \".\", \"4\", \"1\", \"9\", \".\", \".\", \"5\"],\n        [\".\", \".\", \".\", \".\", \"8\", \".\", \".\", \"7\", \"9\"]\n    ]\n\nassert f(g())\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], a=-5, s=2, e=10) -> bool:\n    \"\"\"Create a list that is a subrange of an arithmetic sequence.\"\"\"\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a=-5, s=2, e=10):\n    return list(range(a, e + 1, s))\nassert f(g())\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists three numbers in the list whose sum is equal to the target number.\"\"\"\n    return any((num1 + num2 + num3 == target for num1 in nums for num2 in nums for num3 in nums))\n\ndef g(target=100):\n    return [25, 50, 75, 100]\n\nassert f(g())\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the list is a palindrome\"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(arr=g())\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Check if there exists three numbers in the given list that add up to the target value.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g(numbers=[2, 4, 6, 8, 10, 12, 14, 16]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 60,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, n=3, m=4) -> bool:\n    \"\"\"Check if a number is divisible by both n and m\"\"\"\n    return num % n == 0 and num % m == 0\n\ndef g(n=3, m=4):\n    return n * m\n\nassert f(g())\n",
        "idx_generation": 202,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='programming', index=0) -> bool:\n    \"\"\"Check if a word appears in a string, regardless of the case\"\"\"\n    return word.lower() in s.lower()\n\ndef g(word='programming', index=0):\n    return 'I love programming with Python'\n\nassert f(g())\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square. A magic square is a square matrix in which the sums of each row, each column, and both diagonals are the same.\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n    \n    # Check main diagonal\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n    if diagonal_sum != target_sum:\n        return False\n    \n    # Check secondary diagonal\n    secondary_diagonal_sum = 0\n    for i in range(n):\n        secondary_diagonal_sum += matrix[i][n-i-1]\n    if secondary_diagonal_sum != target_sum:\n        return False\n    \n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 358,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if there exists a subsequence in lst where all elements are multiples of n.\"\"\"\n    return all(num % n == 0 for num in lst)\n\ndef g():\n    return 4, [8, 12, 16, 20, 24]\n\nassert f(*g())\n\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target_word='programming') -> bool:\n    \"\"\"Check if a target word can be formed by concatenating a subsequence of words from a given list.\n    Return True if the target word can be formed, False otherwise.\"\"\"\n    target_len = len(target_word)\n    word_len = len(words)\n    dp = [[False] * (target_len + 1) for _ in range(word_len + 1)]\n    for i in range(word_len + 1):\n        dp[i][0] = True\n    for i in range(1, word_len + 1):\n        for j in range(1, target_len + 1):\n            if words[i - 1] == target_word[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] or dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[word_len][target_len]\n\ndef g(target_word='programming'):\n    return ['p', 'r', 'o', 'g', 'r', 'a', 'm','m', 'i', 'n', 'g']\n\nassert f(g()) == True\n\n",
        "idx_generation": 233,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_number=7) -> bool:\n    \"\"\"Find a pair of numbers in the matrix which sum up to the target number.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[0])):\n                    if i == k and j == l:\n                        continue\n                    if matrix[i][j] + matrix[k][l] == target_number:\n                        return True\n    return False\n\ndef g(target_number=7):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 32,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_count=3) -> bool:\n    \"\"\"Check if there exists a contiguous subarray in the list with a length of target_count\"\"\"\n    if target_count > len(nums):\n        return False\n    for i in range(len(nums) - target_count + 1):\n        if len(set(nums[i:i+target_count])) == target_count:\n            return True\n    return False\n\ndef g(target_count=3):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form a geometric sequence.\"\"\"\n    if len(nums) < k:\n        return False\n    for i in range(len(nums)-k+1):\n        if all(nums[i+j+1] == nums[i+j] * 2 for j in range(k-1)):\n            return True\n    return False\n\ndef g():\n    return [2, 4, 8, 16, 32]\n\nassert f(g())\n",
        "idx_generation": 449,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[str], char='a') -> bool:\n    \"\"\"Check if the given character is present in any of the strings in the list.\"\"\"\n    for s in arr:\n        if char in s:\n            return True\n    return False\n\ndef g(char='a'):\n    return [\"programming\", \"puzzles\", \"python\"]\n\nassert f(g())\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there are at least k even numbers in the list.\"\"\"\n    even_nums = [num for num in nums if num % 2 == 0]\n    return len(even_nums) >= k\n\ndef g(k=5):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert f(g())\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Return a list where each element is squared.\"\"\"\n    return [num ** 2 for num in nums]\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == [1, 4, 9, 16, 25]\n",
        "idx_generation": 213,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi']) -> bool:\n    \"\"\"Check if each substring in the list exists in the given string.\"\"\"\n    for substr in substrings:\n        if substr not in s:\n            return False\n    return True\n\ndef g(substrings=['abc', 'def', 'ghi']):\n    return ' '.join(substrings)\n\nassert f(g())\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if n is a perfect square and exists in the array arr.\"\"\"\n    return n in arr and n ** 0.5 % 1 == 0\ndef g(arr=[1, 2, 3, 4, 5]):\n    for num in arr:\n        if num ** 0.5 % 1 == 0:\n            return num\n    return 0\nassert f(g())\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(phrase: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if the phrase contains all the words in the given list\"\"\"\n    phrase = phrase.lower()\n    for word in words:\n        if word not in phrase:\n            return False\n    return True\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return ' '.join(words)\nassert f(g())\n",
        "idx_generation": 80,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Remove duplicates from the given list of numbers and return the unique values.\"\"\"\n    return list(set(nums))\n\ndef g():\n    return [1, 2, 3, 1, 2, 3, 4, 5, 4, 5]\n\nassert f(g()) == [1, 2, 3, 4, 5]\n\n",
        "idx_generation": 242,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sequence: List[int], target_sum=50) -> bool:\n    \"\"\"Check if there is a subsequence in the sequence that adds up to the target_sum.\"\"\"\n    n = len(sequence)\n    for i in range(n):\n        curr_sum = sequence[i]\n        if curr_sum == target_sum:\n            return True\n        for j in range(i+1, n):\n            curr_sum += sequence[j]\n            if curr_sum == target_sum:\n                return True\n            elif curr_sum > target_sum:\n                break\n    return False\n\ndef g(target_sum=50):\n    return [10, 20, 30, 40, 50, 60]\n\nassert f(g())\n",
        "idx_generation": 295,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"Check if the target number exists in the given matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    left = 0\n    right = rows * cols - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        num = matrix[mid // cols][mid % cols]\n        if num == target:\n            return True\n        elif num < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return False\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g())\n",
        "idx_generation": 234,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n\n",
        "idx_generation": 38,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List, Tuple\n\ndef f(nums: List[int], target=10, n=3) -> bool:\n    \"\"\"Check if there exists a combination of n numbers from the given list that sum up to the target.\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(nums, n))\n\ndef g(target=10, n=3):\n    nums = [1, 2, 3, 4, 5]\n    from itertools import combinations\n    for c in combinations(nums, n):\n        if sum(c) == target:\n            return list(c)\n\nassert f(g())\n",
        "idx_generation": 32,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[7, 13, 21, 35, 42], lower_bound=10) -> bool:\n    \"\"\"Find a number that is divisible by all the integers in the list.\"\"\"\n    return all((n % i == 0 for i in nums)) and n >= lower_bound\ndef g(nums=[7, 13, 21, 35, 42], lower_bound=10):\n    n = 1\n    for i in nums:\n        n *= i\n    return n\nassert f(g())\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\nfrom typing import Tuple\n\ndef f(coordinates: Tuple[float, float], radius: float = 5.0) -> bool:\n    \"\"\"Check if the given point lies within the circle with the given radius centered at the origin.\"\"\"\n    x, y = coordinates\n    distance = math.sqrt(x ** 2 + y ** 2)\n    return distance != radius\n\ndef g(radius: float = 5.0):\n    coordinates = (2.0, 2.0)\n    return coordinates\n\nassert f(g()) == True\n\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if a given word starts with the same character as any word in a list.\"\"\"\n    return any(word[0] == s[0] for word in words)\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return words[0]\nassert f(g())\n",
        "idx_generation": 149,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g(s=\"racecar\"):\n    return s\n\nassert f(g())\n",
        "idx_generation": 63,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a subarray in the given list such that the sum of its elements is a perfect square\"\"\"\n    n = len(nums)\n    prefix_sum = [0] * (n+1)\n    for i in range(1, n+1):\n        prefix_sum[i] = prefix_sum[i-1] + nums[i-1]\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if int((prefix_sum[j] - prefix_sum[i])**0.5) == (prefix_sum[j] - prefix_sum[i])**0.5:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n\n",
        "idx_generation": 231,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_char='e') -> bool:\n    \"\"\"Find if the given character exists in the string\"\"\"\n    return target_char in s\n\ndef g(target_char='e'):\n    return \"Hello, World!\"\n\nassert f(g())\n",
        "idx_generation": 193,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=50) -> bool:\n    \"\"\"Find a pair of numbers from the list whose sum is equal to the target_sum.\"\"\"\n    return any((numbers[i] + numbers[j] == target_sum for i in range(len(numbers)) for j in range(i+1, len(numbers))))\ndef g(target_sum=50):\n    return [10, 20, 30, 40, 50]\nassert f(g())\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n: int) -> bool:\n    \"\"\"Check if n is present in the list and is the only number that appears more than once.\"\"\"\n    return lst.count(n) > 1 and all(lst.count(x) <= 1 for x in lst if x != n)\n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]):\n    return lst\n\nassert f(g(), 1)\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if the sum of two integers is equal to a given target number.\"\"\"\n    return n + m == 100\n\ndef g(n=70, m=30):\n    return n, m\n\nassert f(*g())\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(words: List[str], prefix: str) -> bool:\n    \"\"\"Check if all words in the list 'words' have the given prefix.\"\"\"\n    for word in words:\n        if not word.startswith(prefix):\n            return False\n    return True\n\ndef g(prefix: str):\n    return [\"python\", \"program\", \"puzzle\", \"prefix\"]\n\nassert f(g(\"p\"), \"p\")\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the given number n is present in the list.\"\"\"\n    return n in lst\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst[0]\n\nassert f(g())\n",
        "idx_generation": 422,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Given a list of integers, return a new list with all the prime numbers removed.\"\"\"\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [num for num in nums if not is_prime(num)]\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [1, 4, 6, 8, 9, 10]\n\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6], upper_bound=100) -> bool:\n    \"\"\"Find a small common multiple of a list of integers.\"\"\"\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums=[2, 4, 6], upper_bound=100):\n    ans = 1\n    for i in nums:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans *= i // n\n    return ans\nassert f(g())\n",
        "idx_generation": 226,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=4, c=6) -> bool:\n    \"\"\"Check if a number is divisible by a, b, and c.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\n\ndef g(a=2, b=4, c=6):\n    lcm = max(a, b, c)\n    while True:\n        if lcm % a == 0 and lcm % b == 0 and lcm % c == 0:\n            break\n        lcm += 1\n    return lcm\n\nassert f(g())\n",
        "idx_generation": 248,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[str], target_length=5) -> bool:\n    \"\"\"Check if there exists a string in the given list that has a length equal to the target_length.\"\"\"\n    for string in arr:\n        if len(string) == target_length:\n            return True\n    return False\n\ndef g(target_length=5):\n    return [\"apple\", \"banana\", \"cherry\", \"date\"]\n\nassert f(g())\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"Find the sum of all elements in the given matrix.\"\"\"\n    total_sum = 0\n    for row in matrix:\n        for num in row:\n            total_sum += num\n    return total_sum\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == 45\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[str], a='puzzle', b='Python') -> bool:\n    \"\"\"Check if a certain string is a substring of any element in a list\"\"\"\n    return any((a in s for s in x)) or b in x\ndef g(a='puzzle', b='Python'):\n    return [a, b]\nassert f(g())\n",
        "idx_generation": 144,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string contains at least n consecutive digits\"\"\"\n    for i in range(len(s) - n + 1):\n        if s[i:i+n].isdigit():\n            return True\n    return False\n\ndef g(n=3):\n    return 'abc123def'\n\nassert f(g())\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if prime > sqrt(n):\n            break\n        if n % prime == 0:\n            return False\n    return True\n\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return 31\n\nassert f(g())\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Determine if there are two numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    arr = [2, 5, 10, 8, 12, 15]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        if sum(row[j] for row in matrix) != target_sum:\n            return False\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum or sum(matrix[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 419,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if there exists three consecutive numbers in the list that form an arithmetic sequence.\"\"\"\n    if len(arr) < 3:\n        return False\n    for i in range(len(arr)-2):\n        if arr[i+1] - arr[i] == arr[i+2] - arr[i+1]:\n            return True\n    return False\n\ndef g():\n    return [1, 3, 5, 7, 9, 11, 13]\n\nassert f(g())\n",
        "idx_generation": 264,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find if there exists a combination of numbers in a given list whose sum is equal to a target sum.\n    The length of the list should be less than or equal to 5.\"\"\"\n    n = len(nums)\n    if n > 5:\n        return False\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target_sum + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target_sum]\n\ndef g(target_sum=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 369,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n=5, m=3) -> bool:\n    \"\"\"Check if the product of elements in the list is divisible by the sum of n and m\"\"\"\n    product = 1\n    for num in lst:\n        product *= num\n    return product % (n + m) == 0\ndef g(n=5, m=3):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 3, 5, 7, 9]\n\nassert f(g())\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=9, c=12) -> bool:\n    \"\"\"Check if the given number is divisible by either a or b, but not by c\"\"\"\n    return (n % a == 0 or n % b == 0) and n % c != 0\n\ndef g(a=3, b=9, c=12):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(phrase: str, target: str = 'python') -> bool:\n    \"\"\"Check if the target word is present in the given phrase.\"\"\"\n    words = phrase.lower().split()\n    return target in words\n\ndef g(target: str = 'python'):\n    return \"Python is a widely used programming language.\"\n\nassert f(g())\n",
        "idx_generation": 190,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix with all elements equal to 1.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != 1:\n                return False\n    return True\n\ndef g():\n    return [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n\nassert f(g())\n",
        "idx_generation": 358,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if there exists a subsequence in lst where all elements are powers of n.\"\"\"\n    return all(num % n == 0 or num == 1 for num in lst)\n\ndef g():\n    return 2, [1, 2, 4, 8, 16, 32]\n\nassert f(*g())\n\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    \"\"\"Check if all words in a list start with the same letter\"\"\"\n    first_letter = words[0][0]\n    for word in words:\n        if word[0] != first_letter:\n            return False\n    return True\n\ndef g():\n    return ['apple', 'ant', 'arrow']\n\nassert f(g())\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum to the target value\"\"\"\n    return any((a + b == target for i, a in enumerate(numbers) for b in numbers[i+1:]))\ndef g(numbers=[2, 4, 6, 8]):\n    return numbers\nassert f(g())\n",
        "idx_generation": 34,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of numbers, check if there exists three numbers that sum to the target number.\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, t=197, upper=20) -> bool:\n    \"\"\"Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper\ndef g(t=197, upper=20):\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\nassert f(g())\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(chars: List[str], target='abc') -> bool:\n    \"\"\"Check if the given list of characters contains the target string as a subsequence.\"\"\"\n    target_index = 0\n    for char in chars:\n        if char == target[target_index]:\n            target_index += 1\n        if target_index == len(target):\n            return True\n    return False\n\ndef g():\n    return ['a', 'b', 'x', 'y', 'c']\n\nassert f(g())\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=0) -> bool:\n    \"\"\"Check if there are at least k prime numbers in the list.\"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    prime_nums = [num for num in nums if is_prime(num)]\n    return len(prime_nums) >= k\n\ndef g(k=5):\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\nassert f(g())\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a sparse matrix, where the majority of the values are zero.\"\"\"\n    total_elements = len(matrix) * len(matrix[0])\n    zero_count = 0\n    for row in matrix:\n        for element in row:\n            if element == 0:\n                zero_count += 1\n    return zero_count / total_elements > 0.5\n\ndef g():\n    return [[1, 0, 0], [0, 4, 0], [0, 0, 6]]\n\nassert f(g())\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(phrase: str, target='world', case_sensitive=False) -> bool:\n    \"\"\"Check if the target phrase exists in the input string.\"\"\"\n    if not case_sensitive:\n        phrase = phrase.lower()\n        target = target.lower()\n    return target in phrase\n\ndef g(target='world', case_sensitive=False):\n    return \"Hello, World!\"\n\nassert f(g())\n",
        "idx_generation": 325,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a perfect square.\"\"\"\n    return math.isqrt(n) ** 2 == n\n\ndef g():\n    return 16\n\nassert f(g())\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['cat', 'dog', 'rabbit', 'mouse']) -> bool:\n    \"\"\"Check if the string contains each substring in the given list in any order\"\"\"\n    return all((sub in s for sub in substrings))\ndef g(substrings=['cat', 'dog', 'rabbit', 'mouse']):\n    return ' '.join(substrings)\nassert f(g())\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if there is a duplicate number in the given list.\n    Return True if there is a duplicate, False otherwise.\"\"\"\n    num_set = set()\n    for num in arr:\n        if num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 3]\n\nassert f(g()) == True\n",
        "idx_generation": 249,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seqs: List[List[int]], n=5) -> bool:\n    \"\"\"Check if any sequence in the list contains exactly n elements.\"\"\"\n    for seq in seqs:\n        if len(seq) == n:\n            return True\n    return False\n\ndef g(n=5):\n    return [[1, 2, 3, 4, 5], [10, 20, 30], [100, 200, 300, 400, 500]]\n\nassert f(g())\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=5) -> bool:\n    \"\"\"Given a list of integers, check if the target number is present in the list.\"\"\"\n    return target in lst\n\ndef g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 234,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9]\n\nassert f(g())\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that sums up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 37,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, target: int) -> bool:\n    \"\"\"Check if the given number n is divisible by all the numbers in the range from 1 to target (inclusive).\"\"\"\n    for i in range(1, target+1):\n        if n % i != 0:\n            return False\n    return True\n\ndef g(target: int) -> int:\n    \"\"\"Find the smallest positive integer that is divisible by all the numbers in the range from 1 to target (inclusive).\"\"\"\n    n = 1\n    while not f(n, target):\n        n += 1\n    return n\n\nassert f(g(target=10), target=10)\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], letter='a') -> bool:\n    \"\"\"Check if all the names in the list start with the given letter.\n    Return True if all names start with the letter, False otherwise.\"\"\"\n    for name in names:\n        if name[0].lower() != letter.lower():\n            return False\n    return True\n\ndef g(letter='a'):\n    return ['Alice', 'Amy', 'Adam']\n\nassert f(g()) == True\n\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int) -> bool:\n    \"\"\"Check if x is a palindrome number.\"\"\"\n    return str(x) == str(x)[::-1]\n\ndef g():\n    return 12321\n\nassert f(g())\n",
        "idx_generation": 63,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, numbers=[1, 2, 3, 1, 2, 3, 1, 2, 3]) -> bool:\n    \"\"\"Check if there is a sublist in numbers that has a sum equal to n.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)+1):\n            sublist = numbers[i:j]\n            if sum(sublist) == n:\n                return True\n    return False\n\ndef g(numbers=[1, 2, 3, 1, 2, 3, 1, 2, 3]):\n    return sum(numbers)//2\n\nassert f(g())\n",
        "idx_generation": 240,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char_count=3, total_length=12) -> bool:\n    \"\"\"Check if a string contains a certain number of occurrences of a character and has a total length equal to a given value\"\"\"\n    return s.count('a') == char_count and len(s) == total_length\ndef g(char_count=3, total_length=12):\n    char = 'a'\n    return char * char_count + (total_length - char_count) * 'b'\nassert f(g())\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_number=100) -> bool:\n    \"\"\"Check if there exists a subsequence of numbers in the list whose sum is equal to the target number.\n    Return True if such a subsequence exists, False otherwise.\"\"\"\n    n = len(numbers)\n    dp = [[False] * (target_number + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_number + 1):\n            if numbers[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - numbers[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target_number]\n\ndef g(target_number=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g()) == True\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(x: List[int]) -> bool:\n    \"\"\"Find a list of integers whose sum is equal to the product of the list elements.\"\"\"\n    return len(x) > 0 and sum(x) == math.prod(x)\ndef g():\n    return [1, 2, 3]\nassert f(g())\n",
        "idx_generation": 204,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=5) -> bool:\n    \"\"\"Check if a given number is a palindrome and if the sum of its digits is greater than or equal to the target.\nReturn True if both conditions are satisfied, False otherwise.\"\"\"\n    is_palindrome = str(n) == str(n)[::-1]\n    digit_sum = sum(int(digit) for digit in str(n))\n    return is_palindrome and digit_sum >= target\n\ndef g(n: int, target=5):\n    is_palindrome = str(n) == str(n)[::-1]\n    digit_sum = sum(int(digit) for digit in str(n))\n    return is_palindrome and digit_sum\n\nassert f(g(12321))\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if any word in the list starts with the given prefix.\"\"\"\n    for word in words:\n        if word.startswith(prefix):\n            return True\n    return False\ndef g(prefix='pre'):\n    return [\"prefix\", \"word\", \"preposition\", \"apple\"]\nassert f(g())\n",
        "idx_generation": 388,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, words=['cat', 'dog', 'bird', 'elephant', 'lion', 'tiger', 'monkey', 'giraffe']) -> bool:\n    \"\"\"Check if the given number n is a valid index to access a word in the list. The index must be positive and within the range of the list.\"\"\"\n    if n < 0 or n >= len(words):\n        return False\n    return True\n\ndef g(words=['cat', 'dog', 'bird', 'elephant', 'lion', 'tiger', 'monkey', 'giraffe']):\n    return len(words) - 1\n\nassert f(g())\n",
        "idx_generation": 428,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive elements in the list that form an arithmetic progression with a common difference of 2.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+1] - arr[i+j] == 2 for j in range(k-1)):\n            return True\n    return False\n\ndef g():\n    return [1, 3, 5, 7, 9, 11]\n\nassert f(g())\n",
        "idx_generation": 468,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains three numbers in geometric progression.\"\"\"\n    for i in range(len(nums)-2):\n        if nums[i] * nums[i+2] == nums[i+1]**2:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 4, 8, 16, 32]\n\nassert f(g())\n",
        "idx_generation": 283,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=5, c=7) -> bool:\n    \"\"\"Check if a number is divisible by a, b, and c.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\n\ndef g(a=3, b=5, c=7):\n    lcm = max(a, b, c)\n    while True:\n        if lcm % a == 0 and lcm % b == 0 and lcm % c == 0:\n            break\n        lcm += 1\n    return lcm\n\nassert f(g())\n\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], target_length=5) -> bool:\n    \"\"\"Check if there is a string in the list that has a length equal to the target length.\"\"\"\n    for s in strings:\n        if len(s) == target_length:\n            return True\n    return False\n\ndef g(target_length=5):\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n\nassert f(g())\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='hello', count=2) -> bool:\n    \"\"\"Check if a string contains a certain number of copies of a given substring.\"\"\"\n    return s.count(substring) == count\ndef g(substring='hello', count=2):\n    return substring * count\nassert f(g())\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string can be divided into n equal parts\"\"\"\n    if len(s) % n != 0:\n        return False\n    part_length = len(s) // n\n    for i in range(0, len(s), part_length):\n        if s[i:i+part_length] != s[:part_length]:\n            return False\n    return True\n\ndef g(n=3):\n    return \"abc\" * n\n\nassert f(g())\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g() -> int:\n    return 13\n\nassert f(g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=10) -> bool:\n    \"\"\"Check if the target number is present in the matrix.\"\"\"\n    return np.isin(target, matrix)\ndef g(target=10):\n    return np.array([[1, 2, 3], [4, 5, 6], [7, 8, target]])\nassert f(g())\n",
        "idx_generation": 187,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Return a list containing the squares of all odd numbers in the given list.\"\"\"\n    return [num**2 for num in nums if num % 2 != 0]\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [1, 9, 25, 49, 81]\n\n",
        "idx_generation": 422,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains a consecutive sequence of numbers.\"\"\"\n    nums.sort()\n    for i in range(1, len(nums)):\n        if nums[i] - nums[i-1] != 1:\n            return False\n    return True\n\ndef g():\n    return [3, 1, 4, 2, 5]\n\nassert f(g())\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Check if there exists a subset of numbers in the list that can be added together to obtain the target number.\"\"\"\n    def backtrack(curr_sum, index):\n        if curr_sum == target:\n            return True\n        if index >= len(nums):\n            return False\n        \n        if backtrack(curr_sum + nums[index], index + 1) or backtrack(curr_sum, index + 1):\n            return True\n        \n        return False\n    \n    return backtrack(0, 0)\n\ndef g(target=7):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if all elements in a given list are even numbers\"\"\"\n    return all(num % 2 == 0 for num in lst)\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a sublist in the list that sums up to the target.\"\"\"\n    return any(sum(lst[i:j]) == target for i in range(len(lst)) for j in range(i+1, len(lst)+1))\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 68,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=10, c=15) -> bool:\n    \"\"\"Check if the given number is divisible by both a and b, but not by c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c != 0\n\ndef g(a=5, b=10, c=15):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, target='python') -> bool:\n    \"\"\"Check if the target word is present in the sentence.\"\"\"\n    return target in sentence.lower()\n\ndef g(target='python'):\n    return \"Python is a widely used programming language.\"\n\nassert f(g())\n",
        "idx_generation": 202,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a Magic Square.\"\"\"\n    n = len(matrix)\n    total_sum = n * (n**2 + 1) // 2\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != total_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != total_sum:\n            return False\n\n    # Check diagonals\n    diagonal_sum = sum(matrix[i][i] for i in range(n))\n    anti_diagonal_sum = sum(matrix[i][n-i-1] for i in range(n))\n    if diagonal_sum != total_sum or anti_diagonal_sum != total_sum:\n        return False\n\n    return True\n\ndef g():\n    return [[2, 7, 6],\n            [9, 5, 1],\n            [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if a given string has the same number of vowels as the length of the word.\"\"\"\n    vowels = 'aeiou'\n    s_vowels = sum([1 for c in s if c.lower() in vowels])\n    return s_vowels == len(word)\ndef g(word='python'):\n    return \"a\" * len(word)\nassert f(g())\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int = 20) -> bool:\n    \"\"\"Check if the list contains three numbers whose sum is equal to the target value.\"\"\"\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g(target: int = 20):\n    return [1, 2, 3, 4, 5, 6, target - 3 - 2]\n\nassert f(g())\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a list of numbers contains at least one negative number.\"\"\"\n    for num in nums:\n        if num < 0:\n            return True\n    return False\n\ndef g():\n    return [1, 2, -3, 4, 5, 6, -7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a valid email address.\"\"\"\n    return bool(re.fullmatch(r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b', s))\n\ndef g():\n    return 'example@example.com'\n\nassert f(g()) == True\n",
        "idx_generation": 367,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form a geometric progression.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+1] == arr[i+j] * 2 for j in range(k-1)):\n            return True\n    return False\n\ndef g():\n    return [1, 2, 4, 8, 16, 32, 64, 128, 256]\n\nassert f(g())\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix. A matrix is symmetric if it is equal to its transpose.\"\"\"\n    transpose = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n    return matrix == transpose\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray) -> bool:\n    \"\"\"Check if the matrix is a diagonal matrix.\"\"\"\n    n = matrix.shape[0]\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return np.array([[1, 0, 0], [0, 2, 0], [0, 0, 3]])\n\nassert f(g())\n",
        "idx_generation": 218,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if any word in the list starts with the given prefix.\"\"\"\n    for word in words:\n        if word.startswith(prefix):\n            return True\n    return False\n\ndef g():\n    return ['prefix', 'preference', 'post', 'presentation']\n\nassert f(g())\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, target=10) -> bool:\n    \"\"\"Check if the given number is a perfect square and its square root is less than the target\"\"\"\n    sqrt_n = math.sqrt(n)\n    return int(sqrt_n) ** 2 == n and sqrt_n < target\n\ndef g(target=10):\n    return 16\n\nassert f(g())\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, substring='app') -> bool:\n    \"\"\"Check if the given substring is present in the word\"\"\"\n    return substring in word\n\ndef g(substring='app'):\n    return (\"apple\", substring)\n\nassert f(*g())\n",
        "idx_generation": 92,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a given list of numbers contains any duplicate elements\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 5]\n\nassert f(g())\n\n",
        "idx_generation": 275,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(seq: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is in the given sequence\"\"\"\n    return target in seq\n\ndef g(length=10, target=5):\n    return random.sample(range(10), length), target\n\nassert f(*g())\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import string\nfrom typing import*\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a combination of numbers from the given list that equals the target number.\"\"\"\n    def subset_sum(numbers, target, partial=[]):\n        s = sum(partial)\n\n        if s == target:\n            return True\n        if s > target:\n            return False\n\n        for i in range(len(numbers)):\n            n = numbers[i]\n            remaining = numbers[i + 1:]\n            if subset_sum(remaining, target, partial + [n]):\n                return True\n\n        return False\n\n    return subset_sum(numbers, target)\n\ndef g():\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=1000) -> bool:\n    \"\"\"Find a pair of numbers in a list that adds up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=1000):\n    return [target // 2, target // 2]\nassert f(g())\n",
        "idx_generation": 42,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target: int = 20):\n    return [10, 5, 8, 12, 3, 15]\nassert f(g())\n",
        "idx_generation": 38,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Check if the given integer n is the smallest number in the array.\"\"\"\n    return n == min(arr)\n\ndef g(arr: List[int]):\n    return min(arr)\n\nassert f(g([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5])\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if a string is present in a list and its length is even.\"\"\"\n    return s in strings and len(s) % 2 == 0\n\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return 'date'\n\nassert f(g())\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a pangram.\"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    return all(letter in s.lower() for letter in alphabet)\n\ndef g():\n    return \"The quick brown fox jumps over the lazy dog\"\n\nassert f(g())\n",
        "idx_generation": 63,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], x=5) -> bool:\n    \"\"\"Check if there exists a pair of integers in the array arr whose sum is equal to x\"\"\"\n    seen = set()\n    for num in arr:\n        if x - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(x=5):\n    return [1, 2, 3, 4, x - 4]\nassert f(g())\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring1='abc', substring2='def') -> bool:\n    \"\"\"Check if the given string contains both substring1 and substring2\"\"\"\n    return substring1 in string and substring2 in string\n\ndef g(substring1='abc', substring2='def'):\n    return 'xyz' + substring1 + 'uvw' + substring2\n\nassert f(g())\n",
        "idx_generation": 249,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    return any((x + y) == target for x in numbers for y in numbers)\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a list of integers is sorted in non-decreasing order.\"\"\"\n    return nums == sorted(nums)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7]\n\nassert f(g())\n",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 37\n\nassert f(g())\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(d: Dict[str, int], key='name', value=10) -> bool:\n    \"\"\"Check if the given key-value pair exists in the dictionary.\"\"\"\n    return key in d and d[key] == value\ndef g(key='name', value=10):\n    return {\"name\": 10, \"age\": 25}, key, value\nassert f(*g()) == True\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Check if the given number n is present in the list.\"\"\"\n    return n in arr\n\ndef g():\n    return (5, [1, 2, 3, 4, 5])\n\nassert f(*g())\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a diagonal matrix\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    if rows != cols:\n        return False\n\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\nassert f(g())\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int, nums=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if the given number is a power of any number in the list.\"\"\"\n    for n in nums:\n        if math.log(num, n).is_integer():\n            return True\n    return False\n\ndef g(nums=[2, 3, 5, 7, 11, 13]):\n    return nums[2]\n\nassert f(g())\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=5, length=20) -> bool:\n    \"\"\"Check if the string contains a certain number of copies of a given substring and has a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\n\ndef g(substring='abc', count=5, length=20):\n    return substring * count + (length - len(substring) * count) * 'x'\n\nassert f(g())\n",
        "idx_generation": 166,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if the given string can be divided into n equal parts\"\"\"\n    if len(s) % n != 0:\n        return False\n    part_length = len(s) // n\n    for i in range(0, len(s), part_length):\n        if s[i:i+part_length] != s[:part_length]:\n            return False\n    return True\n\ndef g(n=4):\n    return \"xyz\" * n\n\nassert f(g())\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> int:\n    \"\"\"Find the sum of all the prime numbers in the given list\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for num in numbers:\n        if is_prime(num):\n            primes.append(num)\n    return sum(primes)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 17\n\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a row in the given matrix that sums up to the target value.\n    Return True if such a row exists, False otherwise.\"\"\"\n    return any(sum(row) == target for row in matrix)\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g()) == False\n",
        "idx_generation": 190,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square or not. A magic square is a square matrix in which the \n    sum of every row, column, and diagonal is the same.\"\"\"\n    def is_magic_square(matrix):\n        n = len(matrix)\n        target_sum = sum(matrix[0])\n        \n        # Check rows\n        for row in matrix:\n            if sum(row) != target_sum:\n                return False\n        \n        # Check columns\n        for col in range(n):\n            col_sum = 0\n            for row in range(n):\n                col_sum += matrix[row][col]\n            if col_sum != target_sum:\n                return False\n        \n        # Check diagonal 1\n        diag1_sum = 0\n        for i in range(n):\n            diag1_sum += matrix[i][i]\n        if diag1_sum != target_sum:\n            return False\n        \n        # Check diagonal 2\n        diag2_sum = 0\n        for i in range(n):\n            diag2_sum += matrix[i][n-i-1]\n        if diag2_sum != target_sum:\n            return False\n        \n        return True\n    \n    return is_magic_square(matrix)\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\nassert f(g([[2, 7, 6], [9, 5, 1], [4, 3, 8]]))\n",
        "idx_generation": 425,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_number=5) -> bool:\n    \"\"\"Check if there exists a subarray with consecutive elements in the list whose sum is equal to the target number.\n    Return True if such a subarray exists, False otherwise.\"\"\"\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if prefix_sum[j] - prefix_sum[i] == target_number:\n                return True\n    return False\n\ndef g(target_number=5):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g()) == True\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> int:\n    \"\"\"Find the maximum difference between any two numbers in the given list.\"\"\"\n    max_diff = 0\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = abs(numbers[i] - numbers[j])\n            max_diff = max(max_diff, diff)\n    return max_diff\n\ndef g():\n    return [1, 5, 3, 9, 7]\n\nassert f(g()) == 8\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome\"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 264,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that adds up to the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [2, 3, 5, 7]\n\nassert f(g())\n",
        "idx_generation": 68,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=7, c=14) -> bool:\n    \"\"\"Check if the given number is divisible by either a or b, and also divisible by c\"\"\"\n    return (n % a == 0 or n % b == 0) and n % c == 0\n\ndef g(a=2, b=7, c=14):\n    return a * b * c\n\nassert f(g())\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, target='programming') -> bool:\n    \"\"\"Check if the target word is present in the sentence.\"\"\"\n    return target in sentence.lower()\n\ndef g(target='programming'):\n    return \"Python is a widely used programming language.\"\n\nassert f(g())\n\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square\"\"\"\n    n = len(matrix)\n    magic_sum = n * (n**2 + 1) // 2\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag_sum1 = sum(matrix[i][i] for i in range(n))\n    diag_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(s == magic_sum for s in row_sums + col_sums + [diag_sum1, diag_sum2])\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, char_map={'a': 'b', 'b': 'c', 'c': 'a'}) -> bool:\n    \"\"\"Check if the given word contains only the characters specified in the char_map\"\"\"\n    return all(c in char_map.values() for c in word)\n\ndef g(char_map={'a': 'b', 'b': 'c', 'c': 'a'}):\n    return ''.join(char_map.keys())\n\nassert f(g())\n",
        "idx_generation": 260,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list such that their sum equals the target\"\"\"\n    nums.sort()\n    left, right = 0, len(nums) - 1\n    while left < right:\n        curr_sum = nums[left] + nums[right]\n        if curr_sum == target:\n            return True\n        elif curr_sum < target:\n            left += 1\n        else:\n            right -= 1\n    return False\n\ndef g(target=0):\n    return [-2, -1, 0, 3, 5, 9] * 2\n\nassert f(g())\n",
        "idx_generation": 36,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int = 3) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list.\"\"\"\n    for i in range(len(nums)-(k-1)):\n        if nums[i:i+k] == list(range(nums[i], nums[i]+k)):\n            return True\n    return False\n\ndef g(k: int = 3):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 194,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(email: str, regex: str) -> bool:\n    \"\"\"Check if the given email matches the given regular expression.\"\"\"\n    pattern = re.compile(regex)\n    return bool(pattern.match(email))\n\ndef g(email='example@gmail.com', regex=r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'):\n    return email, regex\n\nassert f(*g())\n",
        "idx_generation": 368,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=2) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that are prime numbers.\"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(is_prime(arr[i+j]) for j in range(k)):\n            return True\n    return False\n\ndef g():\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\nassert f(g())\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    if rows != cols:\n        return False\n    \n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    \n    return True\n\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 233,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub1='abc', sub2='ghi') -> bool:\n    \"\"\"Check if the given string contains both sub1 and sub2 substrings.\"\"\"\n    return sub1 in s and sub2 in s\n\ndef g(sub1='abc', sub2='ghi'):\n    return 'xyz' + sub1 + 'def' + sub2 + 'jkl'\n\nassert f(g())\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=7) -> bool:\n    \"\"\"Check if the given number is a multiple of m and a perfect square.\"\"\"\n    return n % m == 0 and n ** 0.5 % 1 == 0\n\ndef g(m=7):\n    return m ** 2\n\nassert f(g())\n",
        "idx_generation": 283,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is present in the given string.\"\"\"\n    return substring.lower() in string.lower()\n\ndef g(substring='abc'):\n    return 'I am ABC and I am awesome.'\n\nassert f(g())\n",
        "idx_generation": 97,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of integers contains any duplicate elements.\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == False\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, seq=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find the product of the first n elements in the sequence\"\"\"\n    return n > 0 and seq[:n] == [1, 2, 3, 4, 5]\ndef g(seq=[1, 2, 3, 4, 5]):\n    product = 1\n    for num in seq:\n        product *= num\n    return product\nassert f(g())\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_num=7) -> bool:\n    \"\"\"Check if the target_num is present in the matrix.\"\"\"\n    for row in matrix:\n        if target_num in row:\n            return True\n    return False\n\ndef g(target_num=7):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 266,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list that sum to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 44,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=10, max_numbers=4, options=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find a combination of at most max_numbers numbers whose sum is the target value, and all numbers are even.\"\"\"\n    for num in numbers:\n        assert num in options\n    return len(numbers) <= max_numbers and sum(numbers) == target and all(num % 2 == 0 for num in numbers)\ndef g(target=10, max_numbers=4, options=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    from itertools import combinations\n    for n in range(max_numbers + 1):\n        for c in combinations(options, n):\n            if sum(c) == target and all(num % 2 == 0 for num in c):\n                return list(c)\nassert f(g())\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of integers is sorted in non-decreasing order.\"\"\"\n    return nums == sorted(nums)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 277,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target_name=\"Alice\") -> bool:\n    \"\"\"Check if the target name is present in the list of names.\"\"\"\n    return target_name in names\n\ndef g(target_name=\"Alice\"):\n    return [\"Alice\", \"Bob\", \"Charlie\", \"David\"]\n\nassert f(g())\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if a given list is a palindrome.\"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 64,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n    \ndef g(target=100):\n    return [20, 30, 40, 50, 60, 70, 80, 90]\n    \nassert f(g())\n",
        "idx_generation": 266,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Check if a given string can be transformed into a target string of a specific length\"\"\"\n    return len(s) == target_length\ndef g(target_length=10):\n    return \"a\" * target_length\nassert f(g())\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subset of numbers in the list that sum up to the target value.\"\"\"\n    n = len(x)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if x[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - x[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g(target=100):\n    x = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    return x\n\nassert f(g())\n",
        "idx_generation": 354,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3]) -> bool:\n    \"\"\"Check if the sum of the first n elements in a list is equal to a given number.\"\"\"\n    total = 0\n    for i in lst[:n]:\n        total += i\n    return total == 6\ndef g(lst=[1, 2, 3]):\n    return 3\nassert f(g())\n",
        "idx_generation": 219,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=1, b=1) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(a=1, b=1):\n    return a * b + 1\nassert f(g())\n\n",
        "idx_generation": 283,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\n\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if there exists a combination of words in the list that can be concatenated to form the target string.\"\"\"\n    for r in range(1, len(words) + 1):\n        for combination in itertools.combinations(words, r):\n            if ''.join(combination) == target:\n                return True\n    return False\n\ndef g(target='python'):\n    return ['pro', 'gram', 'with', 'python']\n\nassert f(g())\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Check if the given number is present in the list.\"\"\"\n    return n in arr\n\ndef g():\n    return (7, [1, 3, 5, 7, 9])\n\nassert f(*g())\n\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Given a list of integers, return a new list with all the even numbers removed.\"\"\"\n    return [num for num in nums if num % 2 != 0]\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [1, 3, 5, 7, 9]\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, numbers: List[int]) -> bool:\n    \"\"\"Check if n can be obtained by multiplying any combination of numbers from the given list.\"\"\"\n    for r in range(1, len(numbers)+1):\n        for combination in itertools.combinations(numbers, r):\n            product = 1\n            for num in combination:\n                product *= num\n            if product == n:\n                return True\n    return False\n\ndef g(numbers=[1, 2, 3, 4, 5]):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product\n\nassert f(g(), numbers=[1, 2, 3, 4, 5])\n",
        "idx_generation": 371,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='hello', count=3) -> bool:\n    \"\"\"Find a string with a certain number of occurrences of a given substring.\"\"\"\n    return string.count(substring) == count\n\ndef g(substring='hello', count=3):\n    return substring * count\n\nassert f(g())\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=7) -> bool:\n    \"\"\"Check if the string has exactly n characters and is all uppercase\"\"\"\n    return len(s) == n and s.isupper()\n\ndef g(n=7):\n    return \"HELLOOO\"\n\nassert f(g())\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\nfrom typing import List\n\ndef f(numbers: List[int], threshold=100) -> List[int]:\n    \"\"\"Find all the prime numbers in the given list that are below the threshold.\"\"\"\n    primes = []\n    for num in numbers:\n        if num < threshold and all(num % i != 0 for i in range(2, int(math.sqrt(num)) + 1)):\n            primes.append(num)\n    return primes\n\ndef g():\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]\n\nassert f(g(), threshold=20) == [2, 3, 5, 7, 11, 13, 17, 19]\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(dictionary: Dict[str, int], target: int) -> bool:\n    \"\"\"Check if the sum of all values in the dictionary is equal to the target.\"\"\"\n    return sum(dictionary.values()) == target\n\ndef g():\n    return ({\"a\": 1, \"b\": 2, \"c\": 3}, 6)\n\nassert f(*g())\n",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\nfrom typing import List\n\ndef f(numbers: List[int]) -> List[int]:\n    \"\"\"Find all the perfect square numbers in the given list.\"\"\"\n    squares = []\n    for num in numbers:\n        if math.isqrt(num) ** 2 == num:\n            squares.append(num)\n    return squares\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [1, 4, 9]\n\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains three consecutive numbers in arithmetic progression.\"\"\"\n    for i in range(len(nums)-2):\n        if nums[i] + nums[i+2] == 2*nums[i+1]:\n            return True\n    return False\n\ndef g():\n    return [1, 3, 5, 7, 9, 11]\n\nassert f(g())\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of integers is sorted in non-decreasing order.\"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    return [1, 3, 5, 7, 9]\n\nassert f(g())\n",
        "idx_generation": 425,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in non-decreasing order\"\"\"\n    return arr == sorted(arr)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 264,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list that sum up to the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=4, b=2) -> bool:\n    \"\"\"Check if a given number is divisible by both a and b\"\"\"\n    return n % a == 0 and n % b == 0\ndef g(a=4, b=2):\n    n = a * b\n    return n\nassert f(g())\n",
        "idx_generation": 213,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict, List\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if all words in the list start with the given prefix\"\"\"\n    return all(word.startswith(prefix) for word in words)\n\ndef g(prefix='pre'):\n    return ['prefix', 'preparation', 'present', 'pretext']\n\nassert f(g())\n",
        "idx_generation": 279,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = n * (n**2 + 1) // 2\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum_1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum_2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum == target_sum for sum in row_sums + col_sums + [diagonal_sum_1, diagonal_sum_2])\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='apple') -> bool:\n    \"\"\"Check if the target word is present in the list of words\"\"\"\n    return target in words\ndef g(target='apple'):\n    return ['orange', 'banana', 'mango', 'apple']\nassert f(g())\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find if there exists a triplet of numbers in the list such that their sum equals the target\"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(target=0):\n    return [-1, 0, 1, 2, -1, -4]\n\nassert f(g())\n",
        "idx_generation": 37,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list such that their sum equals 10\"\"\"\n    return any(nums[i] + nums[j] == 10 for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import re\nfrom typing import*\n\ndef f(passwords: List[str], length=8, num_digits=2) -> bool:\n    \"\"\"Check if any of the passwords in the list meet the specified criteria.\"\"\"\n    for password in passwords:\n        if len(password) >= length and sum(c.isdigit() for c in password) >= num_digits:\n            return True\n    return False\n\ndef g(length=8, num_digits=2):\n    return ['password123', 'secure', 'pass1234']\nassert f(g())\n",
        "idx_generation": 368,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form a geometric progression.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+1] / arr[i+j] == arr[i+1] / arr[i] for j in range(k-1)):\n            return True\n    return False\n\ndef g():\n    return [1, 2, 4, 8, 16, 32, 64, 128, 256]\n\nassert f(g())\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    n = len(matrix)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    \n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a power of two.\"\"\"\n    return n > 0 and (n & (n - 1)) == 0\n\ndef g():\n    return 16\n\nassert f(g())\n",
        "idx_generation": 233,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(s: str, words: List[str]) -> bool:\n    \"\"\"Check if the given string can be formed by concatenating any combination of words from the given list.\"\"\"\n    for r in range(1, len(words)+1):\n        for combination in itertools.combinations(words, r):\n            if ''.join(combination) == s:\n                return True\n    return False\n\ndef g(words=[\"hello\", \"world\"]):\n    return ''.join(words)\n\nassert f(g(), words=[\"hello\", \"world\"])\n",
        "idx_generation": 371,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a list of numbers contains at least one number that is a perfect square.\"\"\"\n    for num in nums:\n        if num >= 0 and int(num ** 0.5) ** 2 == num:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 292,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word='python', max_len=10) -> bool:\n    \"\"\"Check if the given list of words contains the target word and the length of the target word is less than or equal to max_len.\"\"\"\n    return target_word in words and len(target_word) <= max_len\n\ndef g(target_word='python', max_len=10):\n    words = ['hello', 'world', 'python', 'programming']\n    return words\n\nassert f(g())\n",
        "idx_generation": 99,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list contains duplicate elements.\"\"\"\n    return len(lst) != len(set(lst))\n\ndef g():\n    return [1, 2, 3, 4, 5, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 283,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\n\ndef f(sequence: List[int], n=3) -> bool:\n    \"\"\"Check if there exists a subsequence in the given sequence where the product of any n consecutive numbers is divisible by n\"\"\"\n    for i in range(len(sequence)):\n        for j in range(i+1, len(sequence)+1):\n            subsequence = sequence[i:j]\n            if len(subsequence) >= n and all(math.prod(subsequence[h:h+n]) % n == 0 for h in range(len(subsequence)-n+1)):\n                return True\n    return False\n\ndef g(n=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: List[int], target=5) -> bool:\n    \"\"\"Check if the given list contains the target number.\"\"\"\n    return target in s\n\ndef g(target=5):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_product=24) -> bool:\n    \"\"\"Check if there is a triplet of numbers in the list that multiplies to the target product.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] * numbers[j] * numbers[k] == target_product:\n                    return True\n    return False\n\ndef g(target_product=24):\n    return [2, 3, 4, 6]\n\nassert f(g())\n",
        "idx_generation": 47,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=100, max_numbers=5, options=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) -> bool:\n    \"\"\"Find a combination of at most max_numbers numbers whose sum is the target value, and all numbers are divisible by 10.\"\"\"\n    for num in numbers:\n        assert num in options\n    return len(numbers) <= max_numbers and sum(numbers) == target and all(num % 10 == 0 for num in numbers)\ndef g(target=100, max_numbers=5, options=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    from itertools import combinations\n    for n in range(max_numbers + 1):\n        for c in combinations(options, n):\n            if sum(c) == target and all(num % 10 == 0 for num in c):\n                return list(c)\nassert f(g())\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of integers is sorted in non-increasing order.\"\"\"\n    return nums == sorted(nums, reverse=True)\n\ndef g():\n    return [5, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target_name='Alice') -> bool:\n    \"\"\"Check if the target name is present in the list of names.\"\"\"\n    return target_name in names\n\ndef g(target_name='Alice'):\n    return ['Alice', 'Bob', 'Charlie', 'David']\n\nassert f(g()) == True\n\n",
        "idx_generation": 225,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g(s: str):\n    return s\n\nassert f(g(\"racecar\"))\n",
        "idx_generation": 65,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n: int = 5) -> bool:\n    \"\"\"Check if the given list contains a number divisible by n\"\"\"\n    return any(num % n == 0 for num in lst)\n\ndef g(n: int = 5):\n    return [n, n*2, n*3, n*4]\n\nassert f(g())\n\n",
        "idx_generation": 268,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str = 'python') -> bool:\n    \"\"\"Check if the target string is a substring of the given string\"\"\"\n    return target in s\n\ndef g(s='I love python programming'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> int:\n    \"\"\"Find the sum of all the prime numbers in the given list\"\"\"\n    primes = []\n    for num in numbers:\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                primes.append(num)\n    return sum(primes)\n\ndef g():\n    return [2, 3, 5, 7, 9, 11, 13]\n\nassert f(g()) == 41\n",
        "idx_generation": 356,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the given number n is divisible by all the elements in the list.\"\"\"\n    return all(n % num == 0 for num in lst)\n\ndef g():\n    return 24, [2, 3, 4, 6, 8]\nassert f(*g())\n",
        "idx_generation": 219,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, days=5) -> bool:\n    \"\"\"Check if the given date is within the specified number of days from today.\"\"\"\n    today = datetime.date.today()\n    given_date = datetime.datetime.strptime(date, '%Y-%m-%d').date()\n    diff = (given_date - today).days\n    return abs(diff) <= days\n\ndef g(days=5):\n    today = datetime.date.today()\n    target_date = today + datetime.timedelta(days=days)\n    return target_date.strftime('%Y-%m-%d')\n\nassert f(g())\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], prefix: str) -> bool:\n    \"\"\"Check if any word in the list starts with the given prefix.\"\"\"\n    for word in words:\n        if word.startswith(prefix):\n            return True\n    return False\n\ndef g():\n    return [\"apple\", \"banana\", \"cherry\", \"date\"]\n\nassert f(g(), prefix=\"ba\")\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(numbers: List[int], target: int = 7) -> bool:\n    \"\"\"Check if the target number appears in the list of numbers.\"\"\"\n    return target in numbers\n\ndef g(target: int = 7):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return random.sample(numbers, len(numbers))\n\nassert f(g()) == True\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list such that their sum is divisible by their absolute difference.\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] + arr[j]) % abs(arr[i] - arr[j]) == 0:\n                return True\n    return False\n\ndef g():\n    return [4, 2, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subarray in the given list whose product is equal to the target.\"\"\"\n    return any(nums[i:j] and target % product(nums[i:j]) == 0 for i in range(len(nums)) for j in range(i+1, len(nums)+1))\n\ndef g(target: int) -> List[int]:\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\ndef product(nums: List[int]) -> int:\n    \"\"\"Compute the product of the numbers in the given list.\"\"\"\n    result = 1\n    for num in nums:\n        result *= num\n    return result\n\nassert f(g(24), 24)\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=3) -> bool:\n    \"\"\"Check if the given string contains a certain number of occurrences of a substring\"\"\"\n    return string.count(substring) == count\ndef g(substring='abc', count=3):\n    return substring * count + 'def'\nassert f(g())\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if the given number n is divisible by the length of the given string s, and return True if it is.\"\"\"\n    return n % len(s) == 0\n\ndef g(s='python', n=42):\n    return s\n\nassert f(g(), n=6)\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, check if there are two numbers that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), 15)\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target: int) -> bool:\n    \"\"\"Check if the target value is present in the numpy array.\"\"\"\n    return np.isin(target, arr)\n\ndef g():\n    arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    target = np.random.choice(arr.flatten())\n    return arr, target\n\nassert f(*g())\n\n",
        "idx_generation": 220,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if every number in the list is a perfect square.\"\"\"\n    return all(math.isqrt(num) ** 2 == num for num in nums)\n\ndef g():\n    return [4, 9, 16, 25, 36]\n\nassert f(g())\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form an arithmetic sequence.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+1] - arr[i+j] == arr[i+1] - arr[i] for j in range(k-1)):\n            return True\n    return False\n\ndef g():\n    return [1, 4, 7, 10, 13, 16]\n\nassert f(g())\n\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    return any(x + y == target for x in nums for y in nums)\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 437,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if a given list is a permutation of the numbers from 1 to n\"\"\"\n    n = len(arr)\n    return sorted(arr) == list(range(1, n + 1))\ndef g():\n    return [4, 1, 3, 2]\nassert f(g())\n",
        "idx_generation": 271,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists four numbers in the list that sum up to the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                for l in range(k+1, len(numbers)):\n                    if numbers[i] + numbers[j] + numbers[k] + numbers[l] == target_sum:\n                        return True\n    return False\n\ndef g(target_sum=100):\n    return [10, 20, 30, 40, 50, 60]\n\nassert f(g())\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Check if the given number is divisible by either a or b\"\"\"\n    return n % a == 0 or n % b == 0\n\ndef g(a=2, b=3):\n    return a * b\n\nassert f(g())\n\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word=\"listen\") -> bool:\n    \"\"\"Find if there exists a word in the list that can be formed by rearranging the letters of the target_word\"\"\"\n    target_freq = [0] * 26\n    for char in target_word:\n        target_freq[ord(char) - ord('a')] += 1\n    \n    for word in words:\n        word_freq = [0] * 26\n        for char in word:\n            word_freq[ord(char) - ord('a')] += 1\n        if word_freq == target_freq:\n            return True\n    return False\n\ndef g(words=[\"silent\", \"tinsel\", \"listen\", \"inlets\"]):\n    return words\n\nassert f(g())\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square\"\"\"\n    n = len(matrix)\n    if n == 0:\n        return False\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag_sum = sum(matrix[i][i] for i in range(n))\n    anti_diag_sum = sum(matrix[i][n-i-1] for i in range(n))\n    return all(s == diag_sum for s in row_sums + col_sums + [diag_sum, anti_diag_sum])\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word=\"example\") -> bool:\n    \"\"\"Find if there exists a word in the list that can be formed by rearranging the letters of the target_word\"\"\"\n    target_freq = [0] * 26\n    for char in target_word:\n        target_freq[ord(char) - ord('a')] += 1\n    \n    for word in words:\n        word_freq = [0] * 26\n        for char in word:\n            word_freq[ord(char) - ord('a')] += 1\n        if word_freq == target_freq:\n            return True\n    return False\n\ndef g(words=[\"palm\", \"maple\", \"example\", \"ample\"]):\n    return words\n\nassert f(g())\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the given list that add up to the target number.\"\"\"\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7]\nassert f(g())\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers contains a subsequence that sums up to a certain target\"\"\"\n    target = 20\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if sum(numbers[i:j]) == target:\n                return True\n    return False\ndef g():\n    return [10, 5, 3, 2, 1, 4, 6, 8, 9, 7]\nassert f(g())\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], n: int = 4) -> bool:\n    \"\"\"Check if a list of words contains at least n distinct words.\"\"\"\n    return len(set(words)) >= n\n\ndef g(n: int = 4):\n    return [\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\", \"banana\"] * n\n\nassert f(g())\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=4) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form a Fibonacci sequence.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+2] == arr[i+j] + arr[i+j+1] for j in range(k-2)):\n            return True\n    return False\n\ndef g():\n    return [1, 1, 2, 3, 5, 8, 13, 21, 34]\n\nassert f(g())\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return all((matrix[i][j] == matrix[j][i] for i in range(rows) for j in range(cols)))\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(n: int, x: int = 2) -> bool:\n    \"\"\"Check if a number is a perfect square and divisible by x.\"\"\"\n    return math.isqrt(n) ** 2 == n and n % x == 0\ndef g(x: int = 2):\n    return x ** 2\nassert f(g())\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[str], k=2) -> bool:\n    \"\"\"Check if there exists k consecutive strings in the list that are anagrams of each other.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(sorted(arr[i+j+1]) == sorted(arr[i+j]) for j in range(k-1)):\n            return True\n    return False\n\ndef g(k=2):\n    return ['listen', 'silent', 'hello', 'goodbye', 'elvis']\n\nassert f(g())\n",
        "idx_generation": 378,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=2, y=3) -> bool:\n    \"\"\"Check if the given number n is a perfect power of x raised to y.\"\"\"\n    return math.isqrt(n) ** y == n\n\ndef g(x=2, y=3):\n    n = x ** y\n    return n\n\nassert f(g())\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_substring='abc') -> bool:\n    \"\"\"Check if the target_substring exists in the given string\"\"\"\n    return target_substring in s\n\ndef g(target_substring='abc'):\n    return 'xyz' + target_substring + 'def'\nassert f(g())\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"Given a list of integers, remove all the duplicate elements and return the modified list.\"\"\"\n    return list(set(arr))\n\ndef g(arr=[1, 2, 3, 3, 4, 5, 5]):\n    return arr\n\nassert f(g()) == [1, 2, 3, 4, 5]\n",
        "idx_generation": 295,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> int:\n    \"\"\"Find the maximum difference between any two numbers in the given list\"\"\"\n    max_diff = 0\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\ndef g():\n    return [1, 5, 3, 8, 2, 9]\n\nassert f(g()) == 8\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers from the list whose sum is equal to the target number.\"\"\"\n    return any((num1 + num2 == target for num1 in li for num2 in li))\ndef g(target=50):\n    return [10, 20, 30, 40]\nassert f(g())\n",
        "idx_generation": 286,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find a subset of numbers in the list whose sum is equal to the target_sum\"\"\"\n    def subset_sum(index, current_sum):\n        if current_sum == target_sum:\n            return True\n        if index >= len(nums) or current_sum > target_sum:\n            return False\n        return subset_sum(index+1, current_sum) or subset_sum(index+1, current_sum+nums[index])\n    \n    return subset_sum(0, 0)\n\ndef g(target_sum=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Check if there exists n consecutive numbers in the list that are all prime\"\"\"\n    count = 0\n    for num in nums:\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(n=3):\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53]\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nassert f(g())\n",
        "idx_generation": 42,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int, nums=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if the given number is divisible by any number in the list.\"\"\"\n    for n in nums:\n        if num % n == 0:\n            return True\n    return False\n\ndef g(nums=[2, 3, 5, 7, 11, 13]):\n    return nums[0]\n\nassert f(g())\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    \"\"\"Check if all the words in the list start with the same letter.\"\"\"\n    return all(word[0] == words[0][0] for word in words)\n\ndef g():\n    return [\"apple\", \"ant\", \"arrow\", \"aeroplane\"]\n\nassert f(g())\n",
        "idx_generation": 234,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Determine if a string is a palindrome and its length is odd.\"\"\"\n    return s == s[::-1] and len(s) % 2 != 0\ndef g():\n    return 'racecar'\nassert f(g())\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(arr: List[int], n: int) -> bool:\n    \"\"\"Check if there exists a subset of numbers in the given array such that their sum is divisible by n.\"\"\"\n    for r in range(1, len(arr) + 1):\n        for subset in itertools.combinations(arr, r):\n            if sum(subset) % n == 0:\n                return True\n    return False\n\ndef g(arr: List[int], n: int):\n    return arr, n\n\nassert f(*g([10, 20, 30, 40, 50], 3))\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str, target='world') -> bool:\n    \"\"\"Check if both strings contain the target string as a substring\"\"\"\n    return target in s1 and target in s2\n\ndef g(target='world'):\n    s1 = 'Hello, world!'\n    s2 = 'Welcome to the world of programming!'\n    return s1, s2\n\nassert f(*g())\n",
        "idx_generation": 282,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> int:\n    \"\"\"Find the sum of all the negative numbers in the given list\"\"\"\n    negatives = []\n    for num in numbers:\n        if num < 0:\n            negatives.append(num)\n    return sum(negatives)\n\ndef g():\n    return [1, -2, 3, -4, 5, -6, 7, -8, 9, -10]\n\nassert f(g()) == -30\n",
        "idx_generation": 369,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list is in ascending order.\"\"\"\n    return all(numbers[i] <= numbers[i+1] for i in range(len(numbers)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 234,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, lst=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if the given number is present in the list.\"\"\"\n    return num in lst\ndef g(lst=[2, 4, 6, 8, 10]):\n    return 6\nassert f(g())\n",
        "idx_generation": 497,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[14, 28, 42, 56], lower_bound=2) -> bool:\n    \"\"\"Check if the sum of all numbers in the list is divisible by a given number n, and n is greater than or equal to the lower bound.\"\"\"\n    return sum(nums) % n == 0 and n >= lower_bound\n\ndef g(nums=[14, 28, 42, 56], lower_bound=2):\n    n = 0\n    for i in nums:\n        (m, n) = (min(i, n), max(i, n))\n        while m > 0:\n            (m, n) = (n % m, m)\n    return n\n\nassert f(g())\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], letter='a') -> bool:\n    \"\"\"Find if any of the strings in the list starts with the given letter\"\"\"\n    for string in strings:\n        if string[0] == letter:\n            return True\n    return False\n\ndef g(strings=['apple', 'banana', 'cherry']):\n    return strings\n\nassert f(g())\n",
        "idx_generation": 210,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all numbers in the list are prime numbers\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return all(is_prime(num) for num in nums)\n\ndef g():\n    return [2, 3, 5, 7, 11]\n\nassert f(g())\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import numpy as np\nfrom typing import*\ndef f(matrix: List[List[int]], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of elements in a matrix that sum up to the target sum.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[k])):\n                    if matrix[i][j] + matrix[k][l] == target_sum:\n                        return True\n    return False\n\ndef g(target_sum=10):\n    return np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\nassert f(g())\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    n = len(arr)\n\n    # Check if the matrix is square\n    if n != len(arr[0]):\n        return False\n\n    # Check if the matrix is symmetric\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i][j] != arr[j][i]:\n                return False\n\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if there exists a subarray in the given list such that the sum of its elements is equal to 0.\"\"\"\n    prefix_sum = 0\n    seen = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum == 0 or prefix_sum in seen:\n            return True\n        seen.add(prefix_sum)\n    return False\n\ndef g():\n    return [4, -2, 3, -1, 2, -3, 1]\n\nassert f(g())\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is in ascending order\"\"\"\n    return arr == sorted(arr)\n\ndef g():\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if any three numbers in the list add up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=20):\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 76,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=2) -> bool:\n    \"\"\"Check if the given array can be divided into n equal parts\"\"\"\n    if len(arr) % n != 0:\n        return False\n    part_length = len(arr) // n\n    for i in range(0, len(arr), part_length):\n        if arr[i:i+part_length] != arr[:part_length]:\n            return False\n    return True\n\ndef g(n=2):\n    return [1, 2, 3] * n\n\nassert f(g())\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if a given string is an anagram of the word \"listen\" \"\"\"\n    return sorted(string.lower().replace(\" \", \"\")) == sorted(\"listen\")\n\ndef g():\n    return \"silent\"\n\nassert f(g())\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square\"\"\"\n    n = len(matrix)\n    target_sum = n * (n**2 + 1) // 2\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum == target_sum for sum in row_sums + col_sums + [diagonal_sum1, diagonal_sum2])\n\ndef g():\n    matrix = [[2, 7, 6],\n              [9, 5, 1],\n              [4, 3, 8]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 406,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word=\"keyboard\") -> bool:\n    \"\"\"Find if there exists a word in the list that can be formed by rearranging the letters of the target_word\"\"\"\n    target_freq = [0] * 26\n    for char in target_word:\n        target_freq[ord(char) - ord('a')] += 1\n    \n    for word in words:\n        word_freq = [0] * 26\n        for char in word:\n            word_freq[ord(char) - ord('a')] += 1\n        if word_freq == target_freq:\n            return True\n    return False\n\ndef g(words=[\"board\", \"bored\", \"keyboard\", \"baker\"]):\n    return words\n\nassert f(g())\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers that sum up to the target value.\n    Return True if such a pair exists, False otherwise.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 42,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(numbers: List[int], target_count=3) -> bool:\n    \"\"\"Check if there exists a sublist of consecutive numbers in the list that contains exactly target_count numbers.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)+1):\n            if len(numbers[i:j]) == target_count:\n                return True\n    return False\n\ndef g():\n    return random.sample(range(1, 101), 10)\n\nassert f(g())\n",
        "idx_generation": 248,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(lst: List[str], char: str) -> bool:\n    \"\"\"Check if the given character is present at the beginning of any of the strings in the given list.\"\"\"\n    return any(s.startswith(char) for s in lst)\n\ndef g(lst=['apple', 'banana', 'cherry'], char='a'):\n    return lst\n\nassert f(g(), 'a')\n",
        "idx_generation": 409,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists k consecutive even numbers in the list.\"\"\"\n    count = 0\n    for num in nums:\n        if num % 2 == 0:\n            count += 1\n            if count == k:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(k=5):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert f(g())\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exist k consecutive numbers in the list that are perfect squares.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(is_perfect_square(arr[i+j]) for j in range(k)):\n            return True\n    return False\n\ndef g():\n    return [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121]\n\ndef is_perfect_square(num: int) -> bool:\n    return num ** 0.5 == int(num ** 0.5)\n\nassert f(g())\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(s: str, words: List[str]) -> List[str]:\n    \"\"\"Find and return all the words from the given list that are present in the given string.\"\"\"\n    found_words = []\n    for word in words:\n        if word in s:\n            found_words.append(word)\n    return found_words\n\ndef g(words: List[str]):\n    return \"This is a sample string containing some words.\", words\n\nassert f(*g([\"sample\", \"words\", \"not_present\"])) == [\"sample\", \"words\"]\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if n is a perfect square\"\"\"\n    if n < 0:\n        return False\n    root = int(n ** 0.5)\n    return root * root == n\n\ndef g():\n    return 16\n\nassert f(g())\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if a given string s contains a specific substring.\"\"\"\n    return substr in s\ndef g(substr='abc'):\n    return substr+'def'\nassert f(g())\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of integers contains duplicates.\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 2, 4]\n\nassert f(g())\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(num_list: List[int], n: int = 5) -> bool:\n    \"\"\"Check if there exists a subsequence in the list with adjacent numbers summing up to n.\"\"\"\n    for i in range(len(num_list) - 1):\n        if num_list[i] + num_list[i+1] == n:\n            return True\n    return False\n\ndef g(n: int = 5):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 407,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"Check if the target value exists in the given list.\"\"\"\n    return target in arr\n\ndef g(target=5):\n    arr = [1, 2, 3, 4, 5]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in a list that add up to a given target number.\"\"\"\n    return any(target - num in arr for num in arr)\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 52,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target value, return True if there exists a pair of numbers in the list whose sum is equal to the target value.\"\"\"\n    return any((target - num) in nums for num in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if n is divisible by m.\"\"\"\n    return n % m == 0\n\ndef g():\n    return 15, 3\n\nassert f(*g()) == True\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, strings=['apple', 'banana', 'cherry', 'date', 'eggplant', 'fig'], prefix='b') -> bool:\n    \"\"\"Find a string from the given list that starts with the specified prefix.\"\"\"\n    return any((s.startswith(prefix) for s in strings))\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'eggplant', 'fig'], prefix='b'):\n    for s in strings:\n        if s.startswith(prefix):\n            return s\n    return ''\nassert f(g())\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return string == string[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 72,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Check if there exists a subarray of length n in the given list such that the sum of its elements is divisible by n.\"\"\"\n    if len(arr) < n:\n        return False\n    for i in range(len(arr)-n+1):\n        if sum(arr[i:i+n]) % n == 0:\n            return True\n    return False\n\ndef g(n=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(n=3, arr=g())\n",
        "idx_generation": 285,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Check if s and t are anagrams of each other\"\"\"\n    return sorted(s) == sorted(t)\n\ndef g() -> Tuple[str, str]:\n    return (\"listen\", \"silent\")\n\nassert f(*g())\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> List[int]:\n    \"\"\"Find all the positive numbers in the given list and return them in ascending order.\"\"\"\n    positives = []\n    for num in numbers:\n        if num > 0:\n            positives.append(num)\n    return sorted(positives)\n\ndef g():\n    return [1, -2, 3, -4, 5, -6, 7, -8, 9, -10]\n\nassert f(g()) == [1, 3, 5, 7, 9]\n",
        "idx_generation": 392,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the list contains only even numbers.\"\"\"\n    return all(num % 2 == 0 for num in lst)\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 240,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=20) -> bool:\n    \"\"\"Check if the sum of two positive integers n and m is equal to 20.\"\"\"\n    return n + m == 20\n\ndef g(m=20):\n    return 20 - m\n\nassert f(g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is present in the list.\"\"\"\n    return target in nums\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    target = 3\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100, max_numbers=3) -> bool:\n    \"\"\"Find a combination of at most max_numbers numbers whose sum is equal to the target value.\"\"\"\n    from itertools import combinations\n    for n in range(1, max_numbers + 1):\n        for c in combinations(numbers, n):\n            if sum(c) == target:\n                return True\n    return False\n\ndef g(target=100, max_numbers=3):\n    return [10, 20, 30, 40, 50, 60]\n\nassert f(g())\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, substring='abc', count=2) -> bool:\n    \"\"\"Check if a word contains a certain number of copies of a given substring.\"\"\"\n    return word.count(substring) == count\n    \ndef g(substring='abc', count=2):\n    return substring * count\n\nassert f(g())\n",
        "idx_generation": 210,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(numbers: List[int], target: int = 7) -> bool:\n    \"\"\"Check if the target number is a prime number and appears in the list of numbers.\"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return target in numbers and is_prime(target)\n\ndef g(target: int = 7):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return random.sample(numbers, len(numbers))\n\nassert f(g()) == True\n\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Check if the product of any two distinct elements in the list is equal to target_sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [i for i in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"Find the squares of all numbers in the given list.\"\"\"\n    squares = []\n    \n    for num in arr:\n        squares.append(num**2)\n    \n    return squares\n\ndef g():\n    numbers = [1, 2, 3, 4, 5]\n    return numbers\n\nassert f(g()) == [1, 4, 9, 16, 25]\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form an increasing arithmetic sequence.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+1] - arr[i+j] == arr[i+1] - arr[i] for j in range(k-1)):\n            return True\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by 3\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)+1):\n            if sum(li[i:j]) % 3 == 0:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there exists three numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 80,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Check if the given number is divisible by both a and b\"\"\"\n    return n % a == 0 and n % b == 0\n\ndef g(a=2, b=3):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 311,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, word: str = 'python') -> bool:\n    \"\"\"Check if the word is present in the sentence.\"\"\"\n    return word.lower() in sentence.lower().split()\n\ndef g(word: str = 'python'):\n    return \"I love Python programming\"\n\nassert f(g())\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n    \n    # Check diagonals\n    diagonal_sum = 0\n    reverse_diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n        reverse_diagonal_sum += matrix[i][n-i-1]\n    if diagonal_sum != target_sum or reverse_diagonal_sum != target_sum:\n        return False\n    \n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target_char='a') -> bool:\n    \"\"\"Given a string, check if the target_char appears as the last character of any word in the string.\"\"\"\n    words = string.split()\n    for word in words:\n        if word[-1] == target_char:\n            return True\n    return False\ndef g(target_char='a'):\n    return \"banana apple orange avocado\"\nassert f(g())\n",
        "idx_generation": 286,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Given an array of integers, find if there exists a pair of numbers in the array whose sum is equal to the target sum.\"\"\"\n    return any(target_sum - num in arr for num in arr)\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, find if there exist 3 numbers in the list such that their sum is equal to the target.\n    Sample Input:\n    n = 6\n    nums = [1, 2, 4, 5, 6, 8]\n    target = 9\n    Sample Output:\n    True\"\"\"\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 4, 5, 6, 8], target=10):\n    return (6, nums, target)\n\nassert f(*g())\n",
        "idx_generation": 265,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import re\nfrom typing import*\n\ndef f(password: str, length=8, uppercase=1, lowercase=1, digits=1, special=1) -> bool:\n    \"\"\"Check if the given password satisfies the specified criteria.\"\"\"\n    if len(password) < length:\n        return False\n    if not re.search(r'[A-Z]', password) and uppercase > 0:\n        return False\n    if not re.search(r'[a-z]', password) and lowercase > 0:\n        return False\n    if not re.search(r'\\d', password) and digits > 0:\n        return False\n    if not re.search(r'[!@#$%^&*()\\-_=+{};:,<.>]', password) and special > 0:\n        return False\n    return True\n\ndef g(length=8, uppercase=1, lowercase=1, digits=1, special=1):\n    return \"Abcdefg123!\"\n\nassert f(g())",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the list.\"\"\"\n    nums = sorted(nums)\n    for i in range(len(nums)-k+1):\n        if nums[i+k-1] - nums[i] == k-1:\n            return True\n    return False\n\ndef g(k=3):\n    return [1, 2, 3, 5, 6, 7, 9]\n\nassert f(g())\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(x: int, a=-10, b=10) -> bool:\n    \"\"\"Check if the absolute difference between x and a is greater than b.\"\"\"\n    return abs(x - a) > b\n\ndef g(a=-10, b=10):\n    return a + b + 1\n\nassert f(g())\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, names=['Alice', 'Bob', 'Charlie', 'David'], length=4) -> bool:\n    \"\"\"Check if there is a name in the list that has a length greater than a given number.\"\"\"\n    return any((len(name) > length for name in names)) and s == \"True\"\ndef g(names=['Alice', 'Bob', 'Charlie', 'David'], length=4):\n    return \"True\"\nassert f(g())\n",
        "idx_generation": 403,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"Check if a given number is a perfect square.\"\"\"\n    if num < 0:\n        return False\n    i = 1\n    while i * i <= num:\n        if i * i == num:\n            return True\n        i += 1\n    return False\n\ndef g():\n    return 25\n\nassert f(g())\n",
        "idx_generation": 371,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if the given string contains the specified substring\"\"\"\n    return substring in s\n\ndef g(substring='python'):\n    return 'I love programming in python!'\n\nassert f(g())\n",
        "idx_generation": 157,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Remove all duplicate elements from the list 'nums' and return the modified list.\"\"\"\n    return list(set(nums))\n\ndef g():\n    nums = [1, 2, 2, 3, 3, 4, 5, 5]\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5]\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if there exists a subsequence in lst that sums up to n.\"\"\"\n    if n == 0:\n        return True\n    if not lst:\n        return False\n    return f(n, lst[1:]) or f(n - lst[0], lst[1:])\n\ndef g():\n    return 10, [2, 4, 6, 8]\n\nassert f(*g())\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if the target value exists in the given list.\"\"\"\n    return target in arr\n\ndef g(target=10):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers, check if there exists a pair of numbers that multiply to give the target value.\n    Return True if such a pair exists, False otherwise.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == False\n",
        "idx_generation": 54,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Find a pair of numbers in the given list that sum up to the target.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums=[10, 20, 30, 40]):\n    return nums\nassert f(g())\n",
        "idx_generation": 52,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int]) -> int:\n    \"\"\"Given a list of integers, find the maximum sum of any contiguous subarray.\"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef g():\n    return [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\nassert f(g()) == 6\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], letter='a') -> bool:\n    \"\"\"Check if any of the names in the list start with the given letter.\"\"\"\n    for name in names:\n        if name[0].lower() == letter.lower():\n            return True\n    return False\n\ndef g(letter='a'):\n    return ['Alice', 'Bob', 'Charlie', 'Dave']\n\nassert f(g())\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(inds: List[int], s='pneumonoultramicroscopicsilicovolcanoconiosis') -> bool:\n    \"\"\"Check if the substring formed by the given indices in the string s is a palindrome\"\"\"\n    (i, j) = inds\n    substring = s[i:j+1]\n    return substring == substring[::-1]\ndef g(s='pneumonoultramicroscopicsilicovolcanoconiosis'):\n    n = len(s)\n    mid = n // 2\n    return [mid-1, mid] if n % 2 == 0 else [mid, mid]\nassert f(g())\n",
        "idx_generation": 74,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n: int = 10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiplies up to n.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == n:\n                return True\n    return False\n\ndef g(n: int = 10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if two strings are anagrams of each other\"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g():\n    return \"listen\"\n\nassert f(g(), \"silent\")\n",
        "idx_generation": 321,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to n.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == n:\n                return True\n    return False\n\ndef g(n=5):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order.\"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 240,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 13\n\nassert f(g())\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lower_bound=100, upper_bound=1000) -> bool:\n    \"\"\"Find a number that is a multiple of n, greater than or equal to the lower_bound, and less than or equal to the upper_bound.\"\"\"\n    return lower_bound <= n <= upper_bound and n % n == 0\n\ndef g(lower_bound=100, upper_bound=1000):\n    return lower_bound + (lower_bound % 5)\n\nassert f(g())\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, strings=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Find a string in the list that contains the given character n times\"\"\"\n    return any(string.count(n) > 0 for string in strings)\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return strings[0]\nassert f(g())\n",
        "idx_generation": 234,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(numbers: List[int], target: int = 7) -> bool:\n    \"\"\"Check if the target number is a prime number and appears in the list of numbers.\"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return target in numbers and is_prime(target)\n\ndef g():\n    numbers = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n    return random.sample(numbers, len(numbers))\n\nassert f(g()) == False\n\n\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    nums = [random.randint(1, 10) for _ in range(10)]\n    return nums\n\nassert f(g(), target=10)\n",
        "idx_generation": 258,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Check if the given 2D list is a symmetric matrix.\"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if arr[i][j] != arr[j][i]:\n                return False\n    return True\n\ndef g():\n    arr = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], a=10, b=20) -> bool:\n    \"\"\"Check if all elements in the list are between a and b (inclusive)\"\"\"\n    return all(a <= x <= b for x in arr)\ndef g(a=10, b=20):\n    return list(range(a, b+1))\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a lower triangular matrix\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0]) if rows > 0 else 0\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i < j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [2, 3, 0], [4, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert f(g())\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, factors=[2, 3]) -> bool:\n    \"\"\"Check if a number is divisible by all the factors\"\"\"\n    for factor in factors:\n        if n % factor != 0:\n            return False\n    return True\n\ndef g(factors=[2, 3]):\n    n = 1\n    for factor in factors:\n        n *= factor\n    return n\n\nassert f(g())\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, char='a') -> bool:\n    \"\"\"Check if the given character is present in the word\"\"\"\n    return char in word\n\ndef g(char='a'):\n    return \"programming\"\n\nassert f(g())\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target_sum: int) -> bool:\n    \"\"\"Check if there exists a square submatrix in the given matrix whose sum is equal to the target_sum.\"\"\"\n    n = len(matrix)\n    \n    for i in range(n):\n        for j in range(n):\n            for size in range(1, n-i+1):\n                if submatrix_sum(matrix, i, j, size) == target_sum:\n                    return True\n    \n    return False\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\ndef submatrix_sum(matrix: List[List[int]], start_row: int, start_col: int, size: int) -> int:\n    \"\"\"Compute the sum of the elements in the submatrix.\"\"\"\n    total = 0\n    for i in range(start_row, start_row+size):\n        for j in range(start_col, start_col+size):\n            total += matrix[i][j]\n    return total\n\nassert f(g(), 12)\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python', max_len=7) -> bool:\n    \"\"\"Check if a word contains all the characters in the given string and is shorter than or equal to the maximum length.\"\"\"\n    if len(word) <= max_len:\n        for char in s:\n            if char not in word:\n                return False\n        return True\n    return False\n\ndef g(word='python', max_len=7):\n    if len(word) <= max_len:\n        return word\n    return word[:max_len]\n\nassert f(g())\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_product=24) -> bool:\n    \"\"\"Check if any three numbers in the list have the target product.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                if numbers[i] * numbers[j] * numbers[k] == target_product:\n                    return True\n    return False\n\ndef g(target_product=24):\n    return [2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 45,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"Given an array of integers, find if the array contains any duplicates.\n    Sample Input:\n    n = 6\n    nums = [1, 2, 3, 1, 5, 6]\n    Sample Output:\n    True\"\"\"\n    if len(set(nums)) < n:\n        return True\n    return False\n\ndef g(nums=[1, 2, 3, 1, 5, 6]):\n    return (6, nums)\n\nassert f(*g())\n",
        "idx_generation": 265,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, c='a') -> bool:\n    \"\"\"Check if the given character c is present in the string s.\"\"\"\n    return c in s\n\ndef g(c='a'):\n    return 'banana'\n\nassert f(g())\n",
        "idx_generation": 422,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(k: int, arr: List[int]) -> bool:\n    \"\"\"Check if there exists a subarray in the list such that the sum of its elements is divisible by k.\"\"\"\n    if len(arr) < 1:\n        return False\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            subarray_sum = sum(arr[i:j+1])\n            if subarray_sum % k == 0:\n                return True\n    return False\n\ndef g(k=5):\n    return [2, 4, 6, 8, 10, 12, 14]\n\nassert f(k=5, arr=g())\n",
        "idx_generation": 264,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exist k consecutive numbers in the list that are perfect squares.\"\"\"\n    if len(nums) < k:\n        return False\n    for i in range(len(nums)-k+1):\n        if all(is_perfect_square(nums[i+j]) for j in range(k)):\n            return True\n    return False\n\ndef g():\n    return [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\ndef is_perfect_square(num: int) -> bool:\n    return int(num ** 0.5) ** 2 == num\n\nassert f(g())\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, r=5) -> bool:\n    \"\"\"Check if the given point lies within the circle with radius r centered at the origin.\"\"\"\n    return math.sqrt(x ** 2 + y ** 2) <= r\n\ndef g(r=5):\n    return 3, 4\n\nassert f(*g())\n",
        "idx_generation": 323,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], target_length=5) -> bool:\n    \"\"\"Check if there exists a string in the given list that has a length greater than the target_length.\"\"\"\n    for string in strings:\n        if len(string) > target_length:\n            return True\n    return False\ndef g(target_length=5):\n    return [\"cat\", \"dog\", \"elephant\", \"lion\"]\nassert f(g())\n",
        "idx_generation": 415,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    if n < 0:\n        return False\n    root = int(n ** 0.5)\n    return root * root == n\n\ndef g():\n    return 25\n\nassert f(g())\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='python', num_occurrences=2) -> bool:\n    \"\"\"Check if the substring 'python' occurs exactly twice in the given string.\"\"\"\n    return s.count(substr) == num_occurrences\n\ndef g(substr='python', num_occurrences=2):\n    s = substr * num_occurrences\n    return s\n\nassert f(g())\n",
        "idx_generation": 178,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate elements.\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\nassert f(g()) == False\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if there exists a subsequence in lst where all elements are divisible by n.\"\"\"\n    return any(num % n == 0 for num in lst)\n\ndef g():\n    return 3, [1, 3, 5, 7, 9, 11, 13]\n\nassert f(*g())\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if the target value exists in the given list.\"\"\"\n    return target in arr\n\ndef g(target=20):\n    arr = [10, 20, 30, 40, 50]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    return any(target - num in numbers for num in numbers)\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 58,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], n=3) -> bool:\n    \"\"\"Check if there exists n consecutive numbers in the list that are all prime\"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    count = 0\n    for num in arr:\n        if num in primes:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(n=3):\n    return [2, 3, 5, 8, 11, 13, 17, 19, 23, 29]\n\nassert f(g())\n",
        "idx_generation": 58,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"Check if the given number is divisible by any of the numbers in the list.\"\"\"\n    for num in nums:\n        if n % num == 0:\n            return True\n    return False\n\ndef g():\n    return [2, 3, 5, 7, 11]\n\nassert f(20, g())\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(names: List[str], target_name='Alice') -> bool:\n    \"\"\"Check if the target_name is present in the list of names.\"\"\"\n    return target_name in names\n\ndef g(target_name='Alice'):\n    return ['John', 'Emma', 'Alice', 'Michael', 'Sophia']\n\nassert f(g())\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return 'racecar'\n\nassert f(g())\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, num_list=[3, 5, 6, 9, 10]) -> bool:\n    \"\"\"Check if the given number, n, is a perfect square and divisible by all the numbers in the given list\"\"\"\n    if math.isqrt(n)**2 != n:\n        return False\n    for num in num_list:\n        if n % num != 0:\n            return False\n    return True\ndef g(num_list=[3, 5, 6, 9, 10]):\n    n = 900\n    while True:\n        if math.isqrt(n)**2 == n:\n            return n\n        n += 1\nassert f(g()) == True\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(rectangles: List[List[int]], area=100) -> bool:\n    \"\"\"Find a pair of rectangles with combined area equal to the given area\"\"\"\n    assert len(rectangles) >= 2\n    for i in range(len(rectangles)):\n        for j in range(i+1, len(rectangles)):\n            if rectangles[i][0] * rectangles[i][1] + rectangles[j][0] * rectangles[j][1] == area:\n                return True\n    return False\ndef g(area=100):\n    rectangles = [[5, 10], [6, 8], [7, 7], [8, 6], [10, 5]]\n    return rectangles\nassert f(g())\n",
        "idx_generation": 327,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"Given a list of integers, find the sum of the squares of all the positive numbers.\"\"\"\n    return sum([num**2 for num in nums if num > 0])\n\ndef g():\n    return [-2, -1, 0, 1, 2, 3, 4, 5]\n\nassert f(g()) == 55\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains only even numbers.\"\"\"\n    return all(num % 2 == 0 for num in nums)\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, m=100) -> bool:\n    \"\"\"Check if the given number n is a prime number.\"\"\"\n    if n > m:\n        return False\n    elif n <= 1:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\ndef g(m=100):\n    return 13\n\nassert f(g())\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, string='abcabcabcabcdabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc') -> bool:\n    \"\"\"Find a substring of the given string that repeats exactly n times consecutively.\"\"\"\n    substring = string[:len(string)//n]\n    return n > 0 and substring * n == string\n\ndef g(string='abcabcabcabcdabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc'):\n    return string.count(string[:len(string)//2])\n\nassert f(g())\n",
        "idx_generation": 240,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"Check if there exists a group of k numbers in the list that sum up to the target\"\"\"\n    def dfs(start, target, k):\n        if k == 0:\n            return target == 0\n        for i in range(start, len(nums)):\n            if target - nums[i] < 0:\n                break\n            if dfs(i + 1, target - nums[i], k - 1):\n                return True\n        return False\n    \n    nums.sort()\n    return dfs(0, target, k)\n\ndef g(target=15, k=3):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\n\nassert f(g(), target=15, k=3)\n",
        "idx_generation": 262,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exist k consecutive numbers in the list that are perfect squares.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(is_perfect_square(arr[i+j]) for j in range(k)):\n            return True\n    return False\n\ndef g():\n    return [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\ndef is_perfect_square(num: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return int(num**0.5)**2 == num\n\nassert f(g())\n",
        "idx_generation": 497,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=8) -> bool:\n    \"\"\"Check if n is a Fibonacci number.\"\"\"\n    fib = [0, 1]\n    while fib[-1] < n:\n        fib.append(fib[-1] + fib[-2])\n    return n in fib\n\ndef g(a=5, b=8):\n    return a + b\n\nassert f(g())\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(ls: List[int]) -> bool:\n    \"\"\"Check if a list of integers contains at least one negative number and one positive number\"\"\"\n    return any(num < 0 for num in ls) and any(num > 0 for num in ls)\ndef g():\n    return [-1, 2, 3, -4, 5]\nassert f(g())\n",
        "idx_generation": 295,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists four numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                for l in range(k+1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\nassert f(g())\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=7, b=11) -> bool:\n    \"\"\"Check if the given number is divisible by either a or b\"\"\"\n    return n % a == 0 or n % b == 0\n\ndef g(a=7, b=11):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a pangram\"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return all(char in s.lower() for char in alphabet)\n\ndef g() -> str:\n    return 'The quick brown fox jumps over the lazy dog'\n\nassert f(g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square. A matrix is a magic square if the sum of each row, each column, and both diagonals are the same.\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n\n    # Check diagonals\n    diagonal_sum1 = 0\n    diagonal_sum2 = 0\n    for i in range(n):\n        diagonal_sum1 += matrix[i][i]\n        diagonal_sum2 += matrix[i][n-i-1]\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n\n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char_list=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if all the characters in the string are vowels.\"\"\"\n    for char in s:\n        if char.lower() not in char_list:\n            return False\n    return True\n\ndef g(char_list=['a', 'e', 'i', 'o', 'u']):\n    s = 'aeiou'\n    return s\n\nassert f(g())\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], target=45) -> bool:\n    \"\"\"Check if a combination of elements from the list sums up to the target.\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for r in range(1, len(x) + 1) for c in combinations(x, r))\ndef g(target=45):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a list of numbers contains at least one negative number.\"\"\"\n    for num in nums:\n        if num < 0:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, -6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 275,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, char='a') -> bool:\n    \"\"\"Check if the given character is present at the start of the string.\"\"\"\n    return string.startswith(char)\n\ndef g(char='a'):\n    return \"apple\"\n\nassert f(g())\n",
        "idx_generation": 437,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray in the given list of numbers, where the sum of elements in the subarray is divisible by k.\n    Return True if such a subarray exists, False otherwise.\"\"\"\n    prefix_sum = 0\n    remainder_mod_k = {0: -1}\n    for i, num in enumerate(numbers):\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainder_mod_k:\n            if i - remainder_mod_k[prefix_sum] > 1:\n                return True\n        else:\n            remainder_mod_k[prefix_sum] = i\n    return False\n\ndef g():\n    return [4, 5, 3, 1, 2, 7, 8, 9, 6]\n\nassert f(g()) == True\n",
        "idx_generation": 266,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 11\n\nassert f(g())\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], target_length=5) -> bool:\n    \"\"\"Check if there exists a string in the given list that has a length less than the target_length.\"\"\"\n    for string in strings:\n        if len(string) < target_length:\n            return True\n    return False\ndef g(target_length=5):\n    return [\"cat\", \"dog\", \"elephant\", \"lion\"]\nassert f(g())\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: int) -> bool:\n    \"\"\"Check if the given number is a perfect square\"\"\"\n    return sqrt(x) % 1 == 0\n\ndef g():\n    return 49\n\nassert f(g())\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['ab', 'cd', 'ef']) -> bool:\n    \"\"\"Find a string that contains each string in substrings consecutively, e.g., 'abcdef' for 'ab', 'cd', and 'ef'\"\"\"\n    return all((sub in s for sub in substrings))\n\ndef g(substrings=['ab', 'cd', 'ef']):\n    return ''.join(substrings)\n\nassert f(g())\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate elements\"\"\"\n    return len(num_list) != len(set(num_list))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\n\nassert f(g())\n",
        "idx_generation": 306,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if there exists a subsequence in lst where all elements are greater than n.\"\"\"\n    return all(num > n for num in lst)\n\ndef g():\n    return 7, [9, 10, 11, 12, 13]\n\nassert f(*g())\n\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target_value=0) -> bool:\n    \"\"\"Check if the target_value exists in the given matrix.\"\"\"\n    return any((target_value in row for row in matrix))\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5\n\nassert f(*g())\n\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there is a row in the matrix that contains all elements equal to the target value\"\"\"\n    for row in matrix:\n        if all(element == target for element in row):\n            return True\n    return False\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 10, 10]]\nassert f(g())\n",
        "idx_generation": 59,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Find if there exist two numbers in the given list whose sum equals the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=5):\n    return [1, 2, 3, 4]\n\nassert f(g())\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=0) -> int:\n    \"\"\"Find the maximum subarray sum in the given list that is less than or equal to the target.\"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in arr:\n        current_sum += num\n        if current_sum <= target and current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum <= 0:\n            current_sum = 0\n    return max_sum\n\ndef g(target=0):\n    return [2, -3, 5, -2, 7]\n\nassert f(g()) == -1\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word_list: List[str], target_word='apple') -> bool:\n    \"\"\"Check if any word in the list starts with the target word.\"\"\"\n    return any(word.startswith(target_word) for word in word_list)\n\ndef g(target_word='apple'):\n    return ['apple', 'banana', 'orange', 'kiwi']\n\nassert f(g())\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return len(s) > 1 and s == s[::-1]\n\ndef g():\n    return 'level'\n\nassert f(g())\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find if there exist four numbers in the given list whose product equals the target\"\"\"\n    seen = set()\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                for l in range(k+1, len(nums)):\n                    if nums[i] * nums[j] * nums[k] * nums[l] == target:\n                        return True\n    return False\n\ndef g(target=100):\n    return [1, 2, 4, 5, 10, 20, 25]\n\nassert f(g())\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"Check if there exists a word in the list with a length equal to the target_length\"\"\"\n    return any(len(word) == target_length for word in words)\n\ndef g(target_length=5):\n    return [\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\", \"melon\"]\n\nassert f(g())\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there is a pair of numbers in the list whose sum is equal to the given number n.\n    Sample Input:\n    n = 10\n    arr = [1, 2, 3, 4, 5, 6]\n    Sample Output:\n    True\"\"\"\n    seen = set()\n    for num in arr:\n        target = n - num\n        if target in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5, 6]):\n    return (10, arr)\n\nassert f(*g())\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains both positive and negative numbers.\"\"\"\n    positive = False\n    negative = False\n    for num in nums:\n        if num > 0:\n            positive = True\n        elif num < 0:\n            negative = True\n        if positive and negative:\n            return True\n    return False\ndef g():\n    return [1, 2, -3, 4, -5, 6, 7, -8, 9]\nassert f(g())\n",
        "idx_generation": 250,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import datetime\nfrom typing import*\nfrom datetime import datetime\n\ndef f(date: str, days=30) -> bool:\n    \"\"\"Check if the given date is within a certain number of days from the current date.\"\"\"\n    current_date = datetime.now().date()\n    input_date = datetime.strptime(date, '%Y-%m-%d').date()\n    if (input_date - current_date).days <= days:\n        return True\n    return False\n\ndef g(days=30):\n    current_date = datetime.now().date()\n    return str(current_date)\n\nassert f(g())\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], k=2) -> bool:\n    \"\"\"Given a list of words, find if there exists a word that contains exactly k consecutive repeating characters.\n    Return True if such a word is found, False otherwise.\n    \"\"\"\n    for word in words:\n        count = 1\n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                count += 1\n            else:\n                count = 1\n            if count == k:\n                return True\n    return False\n\ndef g():\n    return [\"hello\", \"good\", \"book\", \"success\", \"pool\"]\n\nassert f(g())\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array that sum up to the target number.\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target: int):\n    return [1, 2, 3, 4, 5]\n\nassert f(g(8), 8)\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers contains a subsequence in increasing order.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[j] > nums[i]:\n                for k in range(j+1, len(nums)):\n                    if nums[k] > nums[j]:\n                        return True\n    return False\n\ndef g():\n    return [5, 1, 3, 2, 4]\n\nassert f(g())\n\n",
        "idx_generation": 323,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a permutation of the numbers from 0 to n-1\"\"\"\n    nums.sort()\n    return nums == list(range(len(nums)))\n\ndef g():\n    return [3, 1, 2, 0]\n\nassert f(g())\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a subset of the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, target_sum):\n        if target_sum == 0:\n            return True\n        if not nums or target_sum < 0:\n            return False\n        return subset_sum(nums[1:], target_sum - nums[0]) or subset_sum(nums[1:], target_sum)\n    return subset_sum(nums, target_sum)\ndef g(target_sum=100):\n    return list(range(1, target_sum//2+1))\nassert f(g())\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=4) -> bool:\n    \"\"\"Check if a number is divisible by both a and b\"\"\"\n    return n % a == 0 and n % b == 0\ndef g(a=3, b=4):\n    return a * b\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, vowels=('a', 'e', 'i', 'o', 'u')) -> bool:\n    \"\"\"Check if all the vowels in the word are in uppercase\"\"\"\n    for vowel in vowels:\n        if vowel in word and vowel.lower() != vowel:\n            return False\n    return True\n\ndef g(vowels=('a', 'e', 'i', 'o', 'u')):\n    return ''.join(vowels).upper()\n\nassert f(g())\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    for row in matrix:\n        if len(row) != rows:\n            return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target: str) -> bool:\n    \"\"\"Given a list of words and a target word, return True if the target word can be formed by concatenating two words from the list, and False otherwise.\"\"\"\n    return any(target == word1 + word2 for word1 in words for word2 in words if word1 != word2)\n\ndef g():\n    return ['apple', 'banana', 'grape', 'pineapple']\n\nassert f(g(), 'applebanana')\n",
        "idx_generation": 323,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the given list whose sum equals the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n    \ndef g(target=10):\n    nums = [2, 5, 3, 8, 10]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 47,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Find if there exists a combination of numbers that sum up to the target_sum\"\"\"\n    return any(sum(combo) == target_sum for r in range(1, len(numbers) + 1) for combo in itertools.combinations(numbers, r))\n\ndef g(target_sum=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='abc', t='xyz') -> bool:\n    \"\"\"Check if the number of unique characters in s is equal to the number of unique characters in t.\"\"\"\n    count_s = len(set(s))\n    count_t = len(set(t))\n    return count_s == count_t\n\ndef g(s='abc', t='xyz'):\n    return s, t\n\nassert f(*g())\n",
        "idx_generation": 443,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if all elements in the array are divisible by their indices.\"\"\"\n    return all(arr[i] % i == 0 for i in range(1, len(arr)))\ndef g():\n    return [0, 2, 4, 6]\nassert f(g())\n",
        "idx_generation": 268,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(n: int, matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a diagonal matrix.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 5, 0], [0, 0, 3]]\n\nassert f(3, g()) == True\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"Check if there exists a word in the list that starts with a specific letter.\"\"\"\n    for word in words:\n        if word.startswith(letter):\n            return True\n    return False\n\ndef g(letter='a'):\n    return ['apple', 'banana', 'cherry', 'mango']\n\nassert f(g())\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, k=2) -> bool:\n    \"\"\"Find if the given number is a perfect square when raised to the power of 'k'\"\"\"\n    return n == int(sqrt(n)) ** k\n\ndef g(k=2):\n    return 16\n\nassert f(g())\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring=\"abc\") -> bool:\n    \"\"\"Check if the given substring is present in the given string.\"\"\"\n    return substring in string\n\ndef g(substring=\"abc\"):\n    return \"xyzabc123\"\n\nassert f(g())\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Union\n\ndef f(nums: List[Union[int, str]]) -> bool:\n    \"\"\"Check if there are any duplicate elements in the list\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 'a', 'b', 3, 4, 'a', 5]\n\nassert f(g())\n",
        "idx_generation": 315,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if the target value is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = random.choice(matrix[0])\n    return matrix, target\n\nassert f(*g())\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any((x + y == target for x in lst for y in lst if x != y))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g(), 15)\n",
        "idx_generation": 59,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, k=3, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Given a list of integers and a target number, return True if there are k elements in the list that sum up to the target, False otherwise.\"\"\"\n    from itertools import combinations\n    \n    for combo in combinations(nums, k):\n        if sum(combo) == n:\n            return True\n    return False\n    \ndef g(k=3, nums=[1, 2, 3, 4, 5]):\n    return 10\n\nassert f(g())\n",
        "idx_generation": 71,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums: List[int], ascending=True) -> bool:\n    \"\"\"Check if the given number is divisible by any of the numbers in the list.\n    If ascending is True, check for divisibility by numbers in ascending order. If ascending is False, check for divisibility by numbers in descending order.\"\"\"\n    if ascending:\n        divisors = sorted(nums)\n    else:\n        divisors = sorted(nums, reverse=True)\n    for num in divisors:\n        if n % num == 0:\n            return True\n    return False\n\ndef g(ascending=True):\n    if ascending:\n        return [2, 4, 6, 8, 10]\n    else:\n        return [10, 8, 6, 4, 2]\n\nassert f(20, g())\n",
        "idx_generation": 375,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target_word='hello') -> bool:\n    \"\"\"Check if the target_word is present in the list 'words' in a case-insensitive manner.\"\"\"\n    for word in words:\n        if word.lower() == target_word.lower():\n            return True\n    return False\n\ndef g(target_word='hello'):\n    words = ['Hi', 'Hey', 'Hola', 'Hello', 'Bonjour']\n    return words\n\nassert f(g())\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g(n=5):\n    return \"level\"\n\nassert f(g())\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose product is divisible by k\"\"\"\n    prefix_product = 1\n    product_set = {1}\n    \n    for num in nums:\n        prefix_product *= num\n        \n        for divisor in product_set.copy():\n            if prefix_product % divisor == 0:\n                product_set.add(prefix_product // divisor)\n        \n        product_set.add(prefix_product)\n    \n    return any(product % k == 0 for product in product_set)\n\ndef g(nums=[2, 3, 4, 5], k=6):\n    return nums, k\n\nassert f(*g())\n\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str, ignore_case=True) -> bool:\n    \"\"\"Check if two strings are anagrams of each other\"\"\"\n    if ignore_case:\n        s1 = s1.lower()\n        s2 = s2.lower()\n    return sorted(s1) == sorted(s2)\n\ndef g(ignore_case=True):\n    s1 = \"Listen\"\n    s2 = \"Silent\"\n    return s1, s2\n\nassert f(*g())\n",
        "idx_generation": 357,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    \"\"\"Check if the given list of integers contains exactly four distinct values and the sum of the first three numbers is equal to the fourth number.\"\"\"\n    return len(set(li)) == 4 and sum(li[:3]) == li[3]\n\ndef g():\n    return [1, 2, 3, 6]\n\nassert f(g())\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=7) -> bool:\n    \"\"\"Check if the difference of two positive integers n and m is equal to 7.\"\"\"\n    return abs(n - m) == 7\n\ndef g(m=7):\n    return m + 7\n\nassert f(g())\n",
        "idx_generation": 412,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string_list: List[str], substring: str) -> bool:\n    \"\"\"Check if any string in the list contains the specified substring.\"\"\"\n    return any(substring in s for s in string_list)\n\ndef g():\n    return (['apple', 'banana', 'carrot', 'date', 'egg'], 'na')\n\nassert f(*g())\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 9)\n\nassert f(g()[0], g()[1])\n",
        "idx_generation": 290,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the sum of elements in a list is equal to a given number.\"\"\"\n    total = sum(lst)\n    return total == 15\ndef g(lst=[1, 2, 3, 4, 5]):\n    return 15\nassert f(g())\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if there exists an element in the array such that its value is greater than the sum of all previous elements.\"\"\"\n    for i in range(1, len(arr)):\n        if arr[i] > sum(arr[:i]):\n            return True\n    return False\ndef g():\n    return [2, 4, 6, 8, 10]\nassert f(g())\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to obtain the target number by summing up a subset of the given numbers\"\"\"\n    n = len(numbers)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < numbers[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - numbers[i - 1]]\n    return dp[n][target]\n\ndef g(numbers=[10, 20, 30, 40, 50]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 85,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=1, b=3, c=5) -> bool:\n    \"\"\"Find n such that n + a == b^c\"\"\"\n    return n + a == b**c\n\ndef g(a=1, b=3, c=5):\n    return -a + b**c\nassert f(g())\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if all words in the list start with the given prefix\"\"\"\n    return all(word.startswith(prefix) for word in words)\ndef g(prefix='pre'):\n    return ['prefix', 'prehistoric', 'present', 'prepare']\nassert f(g())\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a magic square\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    sum_diag1 = sum(matrix[i][i] for i in range(rows))\n    sum_diag2 = sum(matrix[i][rows-i-1] for i in range(rows))\n    if sum_diag1 != sum_diag2:\n        return False\n    for i in range(rows):\n        if sum(matrix[i]) != sum_diag1:\n            return False\n        if sum(matrix[j][i] for j in range(rows)) != sum_diag1:\n            return False\n    return True\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nassert f(g())\n\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    \"\"\"Check if all words in the list start with the same letter.\"\"\"\n    if len(words) == 0:\n        return False\n    first_letter = words[0][0]\n    for word in words:\n        if word[0] != first_letter:\n            return False\n    return True\n\ndef g():\n    return [\"apple\", \"ant\", \"arrow\", \"acorn\"]\n\nassert f(g())\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in a list that adds up to a given target.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [2, 8, 4, 5, 1]\nassert f(g())\n",
        "idx_generation": 47,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=10, k=3) -> bool:\n    \"\"\"Find if there exists a combination of k numbers in the list that sum up to the target_sum\"\"\"\n    return any(sum(combo) == target_sum for combo in itertools.combinations(numbers, k))\n\ndef g(target_sum=10, k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"Check if there exists a subarray in the given list such that the sum of its elements is divisible by k.\"\"\"\n    prefix_sum = 0\n    seen = set()\n    for num in arr:\n        prefix_sum += num\n        prefix_sum %= k\n        if prefix_sum == 0 or prefix_sum in seen:\n            return True\n        seen.add(prefix_sum)\n    return False\n\ndef g(k: int):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9][:k]\n\nassert f(g(10), 10)\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray) -> bool:\n    \"\"\"Check if the given matrix is a diagonal matrix.\"\"\"\n    return np.count_nonzero(matrix - np.diag(np.diagonal(matrix))) == 0\n\ndef g():\n    return np.array([[1, 0, 0], [0, 4, 0], [0, 0, 6]])\n\nassert f(g())\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], target_length=6) -> bool:\n    \"\"\"Check if any of the strings in the list has a length equal to the target_length.\"\"\"\n    for string in strings:\n        if len(string) == target_length:\n            return True\n    return False\n\ndef g(target_length=6):\n    strings = [\"hello\", \"world\", \"python\", \"programming\"]\n    return strings\n\nassert f(g())\n",
        "idx_generation": 429,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a given number is a perfect square\"\"\"\n    return n >= 0 and int(n ** 0.5) ** 2 == n\n\ndef g():\n    return 25\n\nassert f(g())\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['python', 'programming', 'puzzles']) -> bool:\n    \"\"\"Check if any of the substrings are present in the given string.\"\"\"\n    return any((sub in s for sub in substrings))\n\ndef g(substrings=['python', 'programming', 'puzzles']):\n    return 'Python programming puzzles are fun!'\n\nassert f(g())\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicates.\"\"\"\n    return len(lst) != len(set(lst))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\n\nassert f(g())\n",
        "idx_generation": 332,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of distinct indices (i, j) in the list such that arr[i] + arr[j] equals the target value.\"\"\"\n    return any(target - num in arr for num in arr)\n    \ndef g():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    target = random.choice(arr) + random.choice(arr)\n    return arr, target\n    \nassert f(*g())\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=12) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g(target=12):\n    return [2, 10, 6, -4, 8, 3]\n\nassert f(g())\n",
        "idx_generation": 60,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, return True if there exists a pair of numbers in the list that add up to the target, False otherwise.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n    \ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 71,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums: List[int], count=2) -> bool:\n    \"\"\"Check if the given number is divisible by any of the numbers in the list.\n    If count is specified, check for divisibility by at least count numbers.\"\"\"\n    divisors = nums[:count]\n    for num in divisors:\n        if n % num == 0:\n            return True\n    return False\n\ndef g(count=2):\n    return [2, 4, 6, 8, 10]\n\nassert f(20, g())\n",
        "idx_generation": 375,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import string\nfrom typing import*\n\ndef f(sentence: str) -> bool:\n    \"\"\"Check if a sentence contains all the letters of the alphabet.\"\"\"\n    return all(letter in sentence.lower() for letter in string.ascii_lowercase)\n\ndef g():\n    sentence = \"The quick brown fox jumps over the lazy dog.\"\n    return sentence\n\nassert f(g())\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Determine if a string is a palindrome.\"\"\"\n    return s == s[::-1]\n    \ndef g():\n    return 'racecar'\n\nassert f(g())\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exist three numbers in the given list whose sum equals the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if s1 and s2 are anagrams of each other\"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g():\n    return \"listen\", \"silent\"\n\nassert f(*g())\n",
        "idx_generation": 358,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Find the product of the first n elements in the list.\"\"\"\n    product = 1\n    for i in range(n):\n        product *= lst[i]\n    return product == 120\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(5, g())\n",
        "idx_generation": 254,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if the product of two positive integers n and m is equal to the sum of all the integers from 1 to n*m.\"\"\"\n    return n * m == sum(range(1, n * m + 1))\n\ndef g():\n    return (2, 3)\n\nassert f(*g()) == False\n\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='xyz', count=5, length=20) -> bool:\n    \"\"\"Check if a string contains a certain number of copies of a given substring and has a length equal to the product of the count and the length of the substring\"\"\"\n    return string.count(substring) == count and len(string) == count * len(substring)\ndef g(substring='xyz', count=5, length=20):\n    return substring * count\nassert f(g())\n",
        "idx_generation": 295,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target value.\"\"\"\n    seen = set()\n\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n\n    return False\n\ndef g(target=0):\n    return [-1, 0, 1, 2]\n\nassert f(g())\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list is a strictly increasing sequence.\"\"\"\n    for i in range(len(numbers) - 1):\n        if numbers[i] >= numbers[i+1]:\n            return False\n    return True\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a lower triangular matrix. A matrix is lower triangular if all elements above the main diagonal are zero.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix[0])):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [2, 3, 0], [4, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 315,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10, even_only=True) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sums up to the target\"\"\"\n    if even_only:\n        nums = [num for num in nums if num % 2 == 0]\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10, even_only=True):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20] if even_only else [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\nassert f(g())\n",
        "idx_generation": 89,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import factorial\n\ndef f(n: int, target_fact=120) -> bool:\n    \"\"\"Check if the factorial of the number is equal to the target_fact\"\"\"\n    return factorial(n) == target_fact\n\ndef g(target_fact=120):\n    return 5\n\nassert f(g())\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a pangram\"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in alphabet:\n        if char not in s.lower():\n            return False\n    return True\n\ndef g():\n    return \"The quick brown fox jumps over the lazy dog\"\n\nassert f(g())\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    return all(len(row) == len(matrix) for row in matrix)\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, letters=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if the given word contains all the vowels in the list\"\"\"\n    return all((letter in word for letter in letters))\ndef g(letters=['a', 'e', 'i', 'o', 'u']):\n    word = 'aeiou'\n    return word\n\nassert f(g())\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Given a list of numbers, find if there exists a pair of numbers in the list that adds up to the target number.\n    Return True if a pair of numbers is found, False otherwise.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    return [10, 5, 15, 8]\n\nassert f(g()) == True\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10, num_occurrences=2) -> bool:\n    \"\"\"Check if the target value occurs exactly twice in the given list.\"\"\"\n    return nums.count(target) == num_occurrences\n\ndef g(target=10, num_occurrences=2):\n    nums = [target] * num_occurrences\n    return nums\n\nassert f(g())\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], k=5) -> bool:\n    \"\"\"Find k positive integers such that each integer is a factor of (the sum of the rest plus 1).\"\"\"\n    def sum_nums(nums) -> bool:\n        ans = 0\n        for i in nums:\n            ans += i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((sum_nums(li[:i] + li[i + 1:]) + 1) % li[i] == 0 for i in range(k)))\n\ndef g(k=5):\n    n = 2\n    sum_nums = 0\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        sum_nums += n\n        n = sum_nums + 1\n    return ans\n\nassert f(g())\n",
        "idx_generation": 319,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, height=5) -> bool:\n    \"\"\"Given the radius and height of a cone, check if the volume of the cone is greater than the given constant.\"\"\"\n    volume = (1 / 3) * math.pi * radius**2 * height\n    return volume > 100\n\ndef g(radius: float = 5, height: float = 10):\n    return (radius, height)\n\nassert f(*g())\n",
        "idx_generation": 443,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, strings: List[str]) -> bool:\n    \"\"\"Check if the given number is equal to the length of any string in the list.\"\"\"\n    for string in strings:\n        if len(string) == n:\n            return True\n    return False\n\ndef g(strings: List[str]) -> int:\n    return len(strings[0])\n\nassert f(g(['apple', 'banana', 'cherry']), ['apple', 'banana', 'cherry'])\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, n=3) -> bool:\n    \"\"\"Check if x is a perfect square.\"\"\"\n    return math.isqrt(x) ** 2 == x\n\ndef g(n=3):\n    return n ** 2\n\nassert f(g())\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(phrase: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a given phrase contains all the vowels at least once.\"\"\"\n    return all((vowel in phrase.lower() for vowel in vowels))\n\ndef g(phrase=\"The quick brown fox jumps over the lazy dog\"):\n    return phrase\n\nassert f(g())\n",
        "idx_generation": 231,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate elements.\"\"\"\n    return len(arr) != len(set(arr))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 6]\n\nassert f(g())\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(a: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is present in the list of integers.\"\"\"\n    return target in a\n\ndef g():\n    numbers = [1, 2, 3, 4, 5]\n    return numbers\n\nassert f(g(), target=3)\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=10):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 63,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100, target_length=5) -> bool:\n    \"\"\"Check if a list of integers has a length equal to or greater than the target length\n    and if the sum of the integers is equal to the target sum.\"\"\"\n    return len(nums) >= target_length and sum(nums) == target_sum\ndef g(target_sum=100, target_length=5):\n    return [10, 20, 30, 15, 25]\nassert f(g())\n",
        "idx_generation": 74,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, lst=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if the given number is divisible by any number in the list.\"\"\"\n    return any(num % i == 0 for i in lst)\ndef g(lst=[2, 4, 6, 8, 10]):\n    return 20\nassert f(g())\n",
        "idx_generation": 375,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(lst: List[str], target='apple') -> bool:\n    \"\"\"Check if the target string is present in any of the strings in the list.\"\"\"\n    for s in lst:\n        if target in s:\n            return True\n    return False\n\ndef g(target='apple'):\n    return ['banana', 'orange', 'apple pie', 'grape']\n\nassert f(g())\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if a given string is a palindrome.\"\"\"\n    return string == string[::-1]\ndef g():\n    return \"radar\"\nassert f(g())\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find if there exist four numbers in the given list whose sum equals the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                for l in range(k+1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return True\n    return False\n\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, base: int) -> bool:\n    \"\"\"Check if the given number is a palindrome in the specified base\"\"\"\n    num_str = str(num)\n    return num_str == num_str[::-1]\n\ndef g(base):\n    return 12321, base\n\nassert f(*g(10))\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in ascending order.\"\"\"\n    return arr == sorted(arr)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(year: int, month: int, day: int) -> bool:\n    \"\"\"Check if the given date is a weekend.\n    Sample Input:\n    `2022, 12, 25`\n    Sample Output:\n    `True`\"\"\"\n    date = datetime(year, month, day)\n    return date.weekday() in [5, 6]\n\ndef g():\n    return 2022, 12, 25\n\nassert f(*g())\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target: str) -> int:\n    \"\"\"Given a list of words and a target word, count the number of words that can be formed by rearranging the letters of the target word.\"\"\"\n    target = sorted(target)\n    count = 0\n    for word in words:\n        if sorted(word) == target:\n            count += 1\n    return count\n\ndef g():\n    return [\"cat\", \"act\", \"dog\", \"god\", \"tree\"]\n\nassert f(g(), \"act\") == 2\n",
        "idx_generation": 295,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(d: Dict[str, int], target=50) -> bool:\n    \"\"\"Check if the sum of the dictionary values is equal to the target value.\"\"\"\n    return sum(d.values()) == target\n\ndef g(target=50):\n    return {'a': 10, 'b': 20, 'c': 15, 'd': 5}\n\nassert f(g())\n",
        "idx_generation": 319,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=2) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form an arithmetic sequence.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+1] - arr[i+j] == arr[i+1] - arr[i] for j in range(k-1)):\n            return True\n    return False\n\ndef g(k=2):\n    return [1, 3, 5, 7, 9, 11]\n\nassert f(g())\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order\"\"\"\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 315,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if the sum of all numbers in the list is greater than the target.\"\"\"\n    return sum(nums) > target\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 104,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=1000000000000000, b=999999999999999) -> bool:\n    \"\"\"Check if a number is divisible by the difference of two given numbers\"\"\"\n    return x % (a - b) == 0\ndef g(a=1000000000000000, b=999999999999999):\n    return a - b\nassert f(g())\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if the target word appears as a substring in any of the words in the string, regardless of case\"\"\"\n    words = s.lower().split()\n    for word in words:\n        if target.lower() in word:\n            return True\n    return False\n\ndef g(target='hello'):\n    return \"Hello, how are you?\"\n\nassert f(g())\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n    \n    # Check diagonals\n    diag_sum = sum(matrix[i][i] for i in range(n))\n    if diag_sum != target_sum:\n        return False\n    \n    reverse_diag_sum = sum(matrix[i][n-i-1] for i in range(n))\n    if reverse_diag_sum != target_sum:\n        return False\n    \n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    \"\"\"Check if the given list of words all start with the same letter.\"\"\"\n    if len(words) < 2:\n        return True\n    first_letter = words[0][0]\n    for word in words[1:]:\n        if word[0] != first_letter:\n            return False\n    return True\n\ndef g():\n    return ['apple', 'ant', 'art', 'arrow']\n\nassert f(g())\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list whose sum is equal to the target\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\n    \ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    \nassert f(g())\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Determine if there exists a subarray of the given array with a sum of 0.\"\"\"\n    prefix_sum = {0}\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        if curr_sum in prefix_sum:\n            return True\n        prefix_sum.add(curr_sum)\n    return False\n\ndef g():\n    return [4, 2, -3, 1, 6]\n\nassert f(g())\n",
        "idx_generation": 313,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains only prime numbers.\"\"\"\n    for num in nums:\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n    return True\n\ndef g():\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23]\n\nassert f(g())\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str], target_length=5) -> bool:\n    \"\"\"Check if there exists a string in the list that has a length equal to the target_length.\"\"\"\n    return any(len(string) == target_length for string in strings)\n\ndef g(target_length=5):\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n\nassert f(g())\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"Check if the given number is a perfect square.\"\"\"\n    if num < 0:\n        return False\n    root = int(num ** 0.5)\n    return root * root == num\n\ndef g():\n    return 16\n\nassert f(g())\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, char: str = 'a') -> bool:\n    \"\"\"Check if a given character is present in the sentence\"\"\"\n    return char in sentence\n\ndef g(char: str = 'a'):\n    return \"This is a sentence.\"\n\nassert f(g())\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> List[int]:\n    \"\"\"Given a list of integers, sort the list in ascending order\"\"\"\n    sorted_lst = sorted(lst)\n    return sorted_lst\n\ndef g():\n    return [4, 2, 7, 1, 3]\n\nassert f(g()) == [1, 2, 3, 4, 7]\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(items: List[str], target_item='apple', index=2) -> bool:\n    \"\"\"Check if the target_item is present in the list of items at the given index.\"\"\"\n    if index < len(items):\n        return items[index] == target_item\n    else:\n        return False\n\ndef g(target_item='apple', index=2):\n    return ['banana', 'orange', 'apple', 'grape']\n\nassert f(g())\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(l: List[int], target=7) -> bool:\n    \"\"\"Check if there exists a subarray in the list that sums up to the target value.\"\"\"\n    prefix_sum = 0\n    seen = set()\n    for num in l:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in seen:\n            return True\n        seen.add(prefix_sum)\n    return False\n\ndef g(target=7):\n    return [4, 2, -1, 6, -3, 9, 5]\n\nassert f(g())\n\n",
        "idx_generation": 64,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the elements in a list are in decreasing order.\"\"\"\n    return all(nums[i] >= nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    return [9, 7, 5, 3, 1]\n\nassert f(g())\n",
        "idx_generation": 79,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_num=15) -> bool:\n    \"\"\"Check if the target_num is divisible by any number in the list of numbers.\"\"\"\n    return any(target_num % num == 0 for num in nums)\n\ndef g(target_num=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str], target_string='abc') -> bool:\n    \"\"\"Check if the target_string exists as a substring in any of the strings in the list.\"\"\"\n    return any((target_string in string for string in strings))\n\ndef g():\n    return ['abcdef', 'ghijkl', 'mnopqr', 'stuvwx', 'yzabc']\n\nassert f(g())\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a given number is a palindrome.\"\"\"\n    def reverse_number(num):\n        reverse = 0\n        while num > 0:\n            remainder = num % 10\n            reverse = (reverse * 10) + remainder\n            num = num // 10\n        return reverse\n\n    return n == reverse_number(n)\n\ndef g():\n    return 12321\n\nassert f(g()) == True\n",
        "idx_generation": 90,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int], n: int) -> bool:\n    \"\"\"Check if there exists a sublist in the array whose sum is equal to n\"\"\"\n    return any((sum(sublist) == n for sublist in powerset(arr)))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\ndef powerset(arr):\n    result = [[]]\n    for num in arr:\n        result += [subset + [num] for subset in result]\n    return result\n\nassert f(g(), 10)\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, y: str) -> bool:\n    \"\"\"Check if the given strings are anagrams of each other\"\"\"\n    return sorted(x) == sorted(y)\n\ndef g():\n    return (\"listen\", \"silent\")\n\nassert f(*g())\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the first n elements in the list are in ascending order.\"\"\"\n    return lst[:n] == sorted(lst[:n])\n\ndef g():\n    return [1, 2, 4, 3, 5, 6]\n\nassert f(4, g()) == False\n\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=50) -> bool:\n    \"\"\"Check if the sum of all numbers from 1 to n is equal to the target value.\"\"\"\n    return sum(range(1, n + 1)) == target\n\ndef g(target=50):\n    return 10\n\nassert f(g()) == False\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(strings: List[str], length=5) -> bool:\n    \"\"\"Check if any string in the list has a length greater than or equal to the specified length\"\"\"\n    return any(len(string) >= length for string in strings)\n\ndef g(length=5):\n    strings = ['apple', 'banana', 'cherry', 'date']\n    return strings\n\nassert f(g())\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the given list contains two numbers whose sum is equal to the target number.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), 9)\n",
        "idx_generation": 331,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the given list that sums up to the target.\"\"\"\n    n = len(arr)\n    prefix_sum = 0\n    prefix_sums = set()\n    for i in range(n):\n        prefix_sum += arr[i]\n        if prefix_sum == target or prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\n\ndef g(target=0):\n    return [2, -3, 5, -2, 7]\n\nassert f(g()) == True\n",
        "idx_generation": 357,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in ascending order\"\"\"\n    return arr == sorted(arr)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 321,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10, threshold=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value, and if their absolute difference is below the threshold\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) < threshold and nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10, threshold=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 120,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=7) -> bool:\n    \"\"\"Check if the given number is divisible by both a and b\"\"\"\n    return n % a == 0 and n % b == 0\n\ndef g(a=5, b=7):\n    return a * b\n\nassert f(g())\n\n",
        "idx_generation": 435,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a magic square\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    if rows != cols:\n        return False\n\n    target_sum = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(cols):\n        column_sum = 0\n        for i in range(rows):\n            column_sum += matrix[i][j]\n        if column_sum != target_sum:\n            return False\n\n    # Check diagonals\n    diagonal_sum1 = 0\n    diagonal_sum2 = 0\n    for i in range(rows):\n        diagonal_sum1 += matrix[i][i]\n        diagonal_sum2 += matrix[i][cols - i - 1]\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n\n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python', max_len=6) -> bool:\n    \"\"\"Check if the given word can be formed by using all the letters of the given string without repetition\"\"\"\n    if len(set(word)) != len(s):\n        return False\n    return all((s.count(letter) >= word.count(letter) for letter in set(word)))\n\ndef g(word='python', max_len=6):\n    if len(word) <= max_len:\n        return word\n    return ''.join(sorted(word))\n\nassert f(g())\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(arr: List[int], target_sum=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array whose sum is equal to the target sum.\"\"\"\n    return any(num + arr[i] == target_sum for i, num in enumerate(arr))\ndef g(target_sum=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(numbers: List[int], n=3) -> bool:\n    \"\"\"Find if there exists a combination of n numbers from the given list that adds up to 10.\"\"\"\n    combinations = itertools.combinations(numbers, n)\n    for combination in combinations:\n        if sum(combination) == 10:\n            return True\n    return False\n\ndef g(n=3):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 327,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all the elements in the list are prime numbers.\"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return all(is_prime(num) for num in nums)\n\ndef g():\n    return [2, 3, 5, 7, 11, 13]\n\nassert f(g())\n",
        "idx_generation": 355,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"Check if the given number is a power of 2.\"\"\"\n    return num & (num - 1) == 0 and num != 0\n\ndef g():\n    return 16\n\nassert f(g())\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a given number is a perfect square\"\"\"\n    if n < 0:\n        return False\n    sqrt = int(n ** 0.5)\n    return sqrt * sqrt == n\n\ndef g():\n    return 16\n\nassert f(g())\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='python') -> bool:\n    \"\"\"Check if the given string contains a specific substring, and return True if it does.\"\"\"\n    return substring in string\n\ndef g(substring='python'):\n    return \"I love python programming.\"\n\nassert f(g()) == True\n",
        "idx_generation": 266,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicates.\"\"\"\n    return len(arr) != len(set(arr))\n    \ndef g():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr + [random.choice(arr)]\n    \nassert f(g())\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=9) -> bool:\n    \"\"\"Check if the target number is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=9):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of all numbers in the list is equal to the target value\"\"\"\n    return sum(li) == target\n\ndef g(target=100):\n    return [10, 20, 30, 40]\n\nassert f(g()) == True\n",
        "idx_generation": 68,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is sorted in strictly decreasing order.\"\"\"\n    return all(nums[i] > nums[i + 1] for i in range(len(nums) - 1))\n\ndef g():\n    return [10, 8, 6, 4, 2]\n\nassert f(g())\n",
        "idx_generation": 81,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums: List[int], ascending=True) -> bool:\n    \"\"\"Check if the given number is divisible by any of the numbers in the list.\n    If ascending is True, check for divisibility by numbers in ascending order. \n    If ascending is False, check for divisibility by numbers in descending order.\"\"\"\n    if ascending:\n        divisors = sorted(nums)\n    else:\n        divisors = sorted(nums, reverse=True)\n    for num in divisors:\n        if n % num == 0:\n            return True\n    return False\n\ndef g(ascending=True):\n    if ascending:\n        return [2, 4, 6, 8, 10]\n    else:\n        return [10, 8, 6, 4, 2]\n\nassert f(20, g())\n",
        "idx_generation": 384,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target_name='John') -> bool:\n    \"\"\"Check if the target_name is present in the list of names and if it is the first name in the list.\"\"\"\n    return names.index(target_name) == 0\n\ndef g(target_name='John'):\n    return ['John', 'Mike', 'Sarah', 'Emily']\n\nassert f(g())\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int = 3) -> bool:\n    \"\"\"Check if the given string contains a substring of length n that is a palindrome\"\"\"\n    for i in range(len(s) - n + 1):\n        substring = s[i:i+n]\n        if substring == substring[::-1]:\n            return True\n    return False\n\ndef g(n: int = 3):\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 97,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int], n: int) -> bool:\n    \"\"\"Check if there exists a sublist in the array whose sum is greater than or equal to n\"\"\"\n    return any((sum(sublist) >= n for sublist in powerset(arr)))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\ndef powerset(arr):\n    result = [[]]\n    for num in arr:\n        result += [subset + [num] for subset in result]\n    return result\n\nassert f(g(), 20)\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if the target string is present in the given string and it is surrounded by asterisks (*).\"\"\"\n    return f\"*{target}*\" in s\n\ndef g():\n    s = \"Hello, *world*!\"\n    return s\n\nassert f(g(), target=\"world\")\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in ascending order.\"\"\"\n    return nums == sorted(nums)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 13\n\nassert f(g())\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Find if the given substring is a consecutive substring of s\"\"\"\n    return substr in s\n\ndef g(substr='abc'):\n    return 'thisisareallylongstringabc'\n\nassert f(g())\n\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the matrix that sum up to the target.\"\"\"\n    nums = set()\n    for row in matrix:\n        for num in row:\n            if target - num in nums:\n                return True\n            nums.add(num)\n    return False\n\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=4) -> bool:\n    \"\"\"Check if there exist k consecutive numbers in the list that are in an arithmetic progression.\"\"\"\n    if len(nums) < k:\n        return False\n    for i in range(len(nums)-k+1):\n        diff = nums[i+1] - nums[i]\n        if all(nums[i+j+1] - nums[i+j] == diff for j in range(k-1)):\n            return True\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10, 12, 14]\n\nassert f(g())\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is an identity matrix\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i == j and matrix[i][j] != 1:\n                return False\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n\nassert f(g())\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the given list that sum up to the target value.\"\"\"\n    n = len(nums)\n    if n < 3:\n        return False\n    \n    nums.sort()\n    \n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        \n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            \n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    \n    return False\n\ndef g():\n    return [1, 4, 2, 5, 3, 6], 12\n\nassert f(*g())\n",
        "idx_generation": 125,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=5) -> bool:\n    \"\"\"Check if the given number is divisible by both a and b\"\"\"\n    return n % a == 0 and n % b == 0\n\ndef g(a=2, b=5):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a magic square\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    if rows != cols:\n        return False\n\n    target_sum = sum(matrix[0])\n\n    # Check row sums\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check column sums\n    for col in range(cols):\n        column_sum = 0\n        for row in matrix:\n            column_sum += row[col]\n        if column_sum != target_sum:\n            return False\n\n    # Check diagonal sums\n    diagonal_sum1 = 0\n    diagonal_sum2 = 0\n    for i in range(rows):\n        diagonal_sum1 += matrix[i][i]\n        diagonal_sum2 += matrix[i][cols-1-i]\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n\n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if the target word can be formed using the given list of words by concatenating them in any order\"\"\"\n    return ''.join(words) == target\n\ndef g():\n    return ['py', 'th', 'on']\n\nassert f(g())\n\n",
        "idx_generation": 391,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the matrix that adds up to the target sum.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[k])):\n                    if matrix[i][j] + matrix[k][l] == target_sum:\n                        return True\n    return False\n\ndef g():\n    return ([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 15)\n\nassert f(*g())\n",
        "idx_generation": 54,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], a=50, b=500, count=250) -> bool:\n    \"\"\"Find a list of count or more different numbers each between a and b that each have no repeated digits\"\"\"\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\n\ndef g(a=50, b=500, count=250):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\n\nassert f(g())\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list of numbers is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Find a number `n` that is a multiple of `m`, and the sum of its digits is divisible by `m`.\"\"\"\n    return n % m == 0 and sum(int(digit) for digit in str(n)) % m == 0\ndef g(m=10):\n    import random\n    while True:\n        n = random.randint(1, 1000)\n        if n % m == 0 and sum(int(digit) for digit in str(n)) % m == 0:\n            return n\nassert f(g())\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a perfect square.\"\"\"\n    return n >= 0 and (int(n ** 0.5)) ** 2 == n\n\ndef g():\n    return 81\n\nassert f(g())\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='pyth', count=2) -> bool:\n    \"\"\"Check if a given string s contains at least count occurrences of the substring substr.\"\"\"\n    return s.count(substr) >= count\ndef g(substr='pyth', count=2):\n    return substr * count\nassert f(g())\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> List[int]:\n    \"\"\"Remove all duplicates from the given list and return the modified list\"\"\"\n    return list(set(numbers))\n\ndef g():\n    return [2, 5, 3, 2, 8, 5, 9, 3]\n\nassert f(g()) == [2, 3, 5, 8, 9]\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the given list whose sum is equal to the target number.\"\"\"\n    def helper(nums, target, index, path):\n        if target == 0:\n            return True\n        if target < 0 or index >= len(nums):\n            return False\n        \n        for i in range(index, len(nums)):\n            if i > index and nums[i] == nums[i-1]:\n                continue\n            if helper(nums, target-nums[i], i+1, path+[nums[i]]):\n                return True\n        \n        return False\n    \n    numbers.sort()\n    return helper(numbers, target, 0, [])\n\ndef g(target=100):\n    return [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\nassert f(g())\n",
        "idx_generation": 392,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=50) -> bool:\n    \"\"\"Given a list of numbers, check if there exists a pair of numbers in the list that adds up to the target number.\n    Return True if such a pair exists, False otherwise.\"\"\"\n    num_set = set()\n    for num in numbers:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return [10, 20, 30, 40, 50]\n\nassert f(g()) == True\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the given list that sum up to the target number\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(nums: List[int]=[2, 4, 6, 8, 10], target: int=14):\n    return (nums, target)\nassert f(*g())\n",
        "idx_generation": 90,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int]) -> int:\n    \"\"\"Find the maximum number in the given list.\"\"\"\n    return max(nums)\n\ndef g():\n    return [1, 5, 3, 9, 2, 7]\n\nassert f(g()) == 9\n\n",
        "idx_generation": 390,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(s: str, strings=['hello', 'world', 'python', 'programming', 'puzzle']) -> bool:\n    \"\"\"Check if the reversed version of the input string is present in the given list of strings.\"\"\"\n    return s[::-1] in strings\n\ndef g(strings=['hello', 'world', 'python', 'programming', 'puzzle']):\n    return strings[0][::-1]\n\nassert f(g())\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a given string is a palindrome or not.\nSample Input:\n\"racecar\"\nSample Output:\nTrue\"\"\"\n    return s == s[::-1]\ndef g(s=\"racecar\"):\n    return s\nassert f(g())\n",
        "idx_generation": 99,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int], n: int) -> bool:\n    \"\"\"Check if there exists a sublist in the array whose sum is less than or equal to n\"\"\"\n    return any((sum(sublist) <= n for sublist in powerset(arr)))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\ndef powerset(arr):\n    result = [[]]\n    for num in arr:\n        result += [subset + [num] for subset in result]\n    return result\n\nassert f(g(), 15)\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, s='hello') -> bool:\n    \"\"\"Check if a given string is a substring of another string\"\"\"\n    return x in s\n\ndef g(s='hello'):\n    return s[1:-1]\n\nassert f(g())\n",
        "idx_generation": 420,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in non-decreasing order.\"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\ndef g():\n    return [5, 10, 15, 20, 25]\n\nassert f(g())\n",
        "idx_generation": 283,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='programming', t='coding') -> bool:\n    \"\"\"Check if the given number n is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(s='programming', t='coding'):\n    return len(s)\n\nassert f(g())\n",
        "idx_generation": 473,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[str], target: str) -> bool:\n    \"\"\"Check if the target string is present as a substring in any of the strings in the list.\"\"\"\n    for s in nums:\n        if target in s:\n            return True\n    return False\n\ndef g():\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n\nassert f(g(), \"berry\")\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, year=2022) -> bool:\n    \"\"\"Check if the year of the given date is equal to the target year\"\"\"\n    return date.year == year\n\ndef g(year=2022):\n    return datetime.date(year, 8, 31)\n\nassert f(g())\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=2) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form an arithmetic sequence.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+1] - arr[i+j] == arr[i+1] - arr[i] for j in range(k-1)):\n            return True\n    return False\n\ndef g(k=2):\n    return [1, 3, 5, 7, 9]\n\nassert f(g())\n",
        "idx_generation": 378,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a lower triangular matrix\"\"\"\n    rows = len(matrix)\n    if rows == 0:\n        return True\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [2, 3, 0], [4, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(grades: List[int], passing_grade=60) -> bool:\n    \"\"\"Check if all grades are above or equal to the passing_grade\"\"\"\n    return all(grade >= passing_grade for grade in grades)\n\ndef g(passing_grade=60):\n    return [passing_grade + i for i in range(5)]\n\nassert f(g())\n",
        "idx_generation": 127,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Check if the given number is divisible by both a and b\"\"\"\n    return n % a == 0 and n % b == 0\n\ndef g(a=2, b=3):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    for row in matrix:\n        if len(row) != rows:\n            return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_char='a') -> bool:\n    \"\"\"Given a list of words, check if the target_char appears as the last character of any word in the list.\"\"\"\n    for word in words:\n        if word[-1] == target_char:\n            return True\n    return False\ndef g(target_char='a'):\n    return [\"banana\", \"apple\", \"orange\", \"kiwi\"]\nassert f(g())\n",
        "idx_generation": 415,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers such that their sum is equal to a target value.\nSample Input:\nnums = [1, 2, 3, 4, 5]\ntarget = 7\nSample Output:\nTrue\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(target=5):\n    return [1, 2, 3, 4, target - 4]\nassert f(g())\n",
        "idx_generation": 55,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, digits=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a number can be formed using the given digits, where each digit can be used only once.\"\"\"\n    num_digits = set(str(num))\n    return num_digits.issubset(set(map(str, digits)))\ndef g(digits=[1, 2, 3, 4, 5]):\n    num = int(''.join(map(str, sorted(digits, reverse=True))))\n    return num\nassert f(g())\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int = 3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list that has the sum of its elements equal to 0.\"\"\"\n    for i in range(len(nums) - k + 1):\n        subarray = nums[i:i+k]\n        if sum(subarray) == 0:\n            return True\n    return False\n\ndef g(k: int = 3):\n    return [2, -1, 3, 5, -4, 6, -2, 1]\n\nassert f(g())\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if x <= 1:\n        return False\n    for i in range(2, int(x**0.5) + 1):\n        if x % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a perfect square sequence.\"\"\"\n    return all(int(numbers[i] ** 0.5) ** 2 == numbers[i] for i in range(len(numbers)))\n\ndef g():\n    return [1, 4, 9, 16, 25, 36]\n\nassert f(g()) == True\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Find a string that contains all the substrings in any order\"\"\"\n    return all((sub in s for sub in substrings))\ndef g(substrings=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(substrings)\n\nassert f(g())\n",
        "idx_generation": 274,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of integers contains any duplicates\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 4, 5, 6, 7]\n\nassert f(g())\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if the target number is present in the matrix.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    left = 0\n    right = m * n - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        num = matrix[mid // n][mid % n]\n        \n        if num == target:\n            return True\n        elif num < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return False\n\ndef g():\n    matrix = [\n        [1, 3, 5, 7],\n        [10, 11, 16, 20],\n        [23, 30, 34, 60]\n    ]\n    target = 16\n    return matrix, target\n\nassert f(*g())\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Given a list of numbers, find if there exists a pair of numbers whose sum is equal to the target_sum\"\"\"\n    return any((nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 92,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, n: int = 10) -> bool:\n    \"\"\"Check if the given number is divisible by n without leaving a remainder.\"\"\"\n    return num % n == 0\n\ndef g(n: int = 10):\n    return 100\n\nassert f(g())\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    \"\"\"Check if at least one word in the list starts with the letter 'A'.\"\"\"\n    return any(word[0] == 'A' for word in words)\n\ndef g():\n    return ['Apple', 'Banana', 'Cherry', 'Durian']\n\nassert f(g())\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome sequence.\"\"\"\n    if len(nums) < 3:\n        return False\n    for i in range(len(nums)):\n        if nums[i] != nums[-i-1]:\n            return False\n    return True\n\ndef g():\n    return [1, 2, 3, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 105,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is divisible by 5\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if (numbers[i] + numbers[j]) % 5 == 0:\n                return True\n    return False\n\ndef g():\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target_char='a') -> bool:\n    \"\"\"Given a string, check if the target_char appears as the last character of any word in the string.\"\"\"\n    words = string.split()\n    for word in words:\n        if word[-1] == target_char:\n            return True\n    return False\ndef g(target_char='a'):\n    return \"banana apple avocado\"\nassert f(g())\n",
        "idx_generation": 432,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list is a Fibonacci sequence.\"\"\"\n    if len(lst) < 3:\n        return False\n    for i in range(2, len(lst)):\n        if lst[i] != lst[i-1] + lst[i-2]:\n            return False\n    return True\n\ndef g():\n    return [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n\nassert f(g())\n",
        "idx_generation": 283,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(numbers: List[int], target: int = 7) -> bool:\n    \"\"\"Check if the target number is a prime number.\"\"\"\n    if target < 2:\n        return False\n    for i in range(2, target):\n        if target % i == 0:\n            return False\n    return True\n\ndef g(target: int = 7):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return random.sample(numbers, len(numbers))\n\nassert f(g()) == True\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[str], target: str) -> bool:\n    \"\"\"Check if the target string is present as a substring in any of the strings in the list\"\"\"\n    return any(target in string for string in arr)\n\ndef g(target: str):\n    return (['apple', 'banana', 'cherry', 'date'], target)\n\nassert f(*g(\"an\"))\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the array that sums up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form an increasing sequence.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+1] > arr[i+j] for j in range(k-1)):\n            return True\n    return False\n\ndef g(k=3):\n    return [1, 3, 5, 2, 4, 6]\n\nassert f(g())\n",
        "idx_generation": 378,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is in strictly increasing order.\"\"\"\n    return all(arr[i] < arr[i+1] for i in range(len(arr)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target_sum\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Check if the given number is divisible by either a or b\"\"\"\n    return n % a == 0 or n % b == 0\n\ndef g(a=2, b=3):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix\"\"\"\n    rows = len(matrix)\n    for row in matrix:\n        if len(row) != rows:\n            return False\n    return True\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], n: int = 2) -> bool:\n    \"\"\"Check if a list of words contains at least n words that start with the same letter.\"\"\"\n    first_letters = [word[0] for word in words]\n    for letter in set(first_letters):\n        if first_letters.count(letter) >= n:\n            return True\n    return False\n\ndef g(n: int = 2):\n    return [\"apple\", \"banana\", \"avocado\", \"blueberry\", \"cherry\", \"coconut\"] * n\n\nassert f(g())\n",
        "idx_generation": 432,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\n    Return True if such a pair exists, False otherwise.\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80]\n\nassert f(g()) == True\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Find three numbers in a list that sum up to a given target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 357,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=2) -> bool:\n    \"\"\"Check if there is any pair of numbers in the given list whose sum is divisible by k.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if (nums[i] + nums[j]) % k == 0:\n                return True\n    return False\n\ndef g(k=2):\n    return [7, 9, 4, 6, 3, 8]\n\nassert f(g())\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> float:\n    \"\"\"Calculate the average of the given list of numbers.\"\"\"\n    if len(numbers) == 0:\n        return 0\n    return sum(numbers) / len(numbers)\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g()) == 6.0\n\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(num: int, n: int = 10) -> bool:\n    \"\"\"Check if the given number is a perfect square and its square root is less than or equal to n\"\"\"\n    return num > 0 and sqrt(num) % 1 == 0 and sqrt(num) <= n\n\ndef g(n: int = 10):\n    return 25\n\nassert f(g())\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['eg', 'hi', 'kl']) -> bool:\n    \"\"\"Find a string that contains each string in substrings concatenated, e.g., 'eghikl'\"\"\"\n    return ''.join(substrings) in s\n\ndef g(substrings=['eg', 'hi', 'kl']):\n    return ''.join(substrings)\n\nassert f(g())\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate elements.\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 364,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr: List[int]=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Given a number 'n' and a list of integers 'arr', check if the number 'n' exists in the list.\"\"\"\n    return n in arr\n\ndef g(arr: List[int]=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: int=3):\n    return (n, arr)\n\nassert f(*g())\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10, k=2) -> bool:\n    \"\"\"Find k numbers in the list whose product is equal to target\"\"\"\n    return len(nums) >= k and any(nums[i]*nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10, k=2):\n    return [i for i in range(1, target+1)]\nassert f(g())\n",
        "idx_generation": 70,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import gcd\ndef f(nums: List[int], target_gcd=5) -> bool:\n    \"\"\"Given a list of numbers, find if there exists a pair of numbers whose greatest common divisor is equal to the target_gcd\"\"\"\n    return any((gcd(nums[i], nums[j]) == target_gcd for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g():\n    return [10, 15, 20, 25, 30]\nassert f(g())\n",
        "idx_generation": 92,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"Find the sum of all even numbers in the given list.\"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 30\n\n",
        "idx_generation": 422,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target_name=\"Alice\") -> bool:\n    \"\"\"Check if the target_name is present in the list of names.\"\"\"\n    return target_name in names\n\ndef g(target_name=\"Alice\"):\n    return [\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"]\n\nassert f(g())\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome sequence.\"\"\"\n    return all(nums[i] == nums[-i-1] for i in range(len(nums) // 2))\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 110,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if there exists a sublist in the list whose sum is divisible by 3\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)+1):\n            if sum(numbers[i:j]) % 3 == 0:\n                return True\n    return False\n\ndef g():\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[str], target_length=5) -> bool:\n    \"\"\"Check if there exists a string in the list that has a length greater than or equal to target_length\"\"\"\n    return any(len(s) >= target_length for s in arr)\n\ndef g(target_length=5):\n    return ['apple', 'banana', 'pear', 'grape']\n\nassert f(g())\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list contains only even numbers.\"\"\"\n    return all(num % 2 == 0 for num in lst)\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, k=3) -> bool:\n    \"\"\"Check if there are k consecutive vowels in the given string\"\"\"\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(string)):\n        if string[i] in vowels:\n            count += 1\n            if count == k:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g():\n    return \"hello world\"\n\nassert f(g()) == False\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    seen = set()\n    for num in x:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    x = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return x\n\nassert f(g())\n",
        "idx_generation": 354,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: List[int]) -> bool:\n    \"\"\"Check if a list contains a subsequence of length 3, where the sum of the first two elements is equal to the third element.\"\"\"\n    n = len(s)\n    for i in range(n - 2):\n        if s[i] + s[i + 1] == s[i + 2]:\n            return True\n    return False\ndef g():\n    return [1, 2, 3, 5, 7, 12]\nassert f(g())\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in ascending order\"\"\"\n    return arr == sorted(arr)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is in strictly increasing order\"\"\"\n    return all(numbers[i] < numbers[i+1] for i in range(len(numbers)-1))\n\ndef g():\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=4, b=6) -> bool:\n    \"\"\"Check if the given number is divisible by both a and b\"\"\"\n    return n % a == 0 and n % b == 0\n\ndef g(a=4, b=6):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a sparse matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    threshold = 0.5\n    count = 0\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != 0:\n                count += 1\n    density = count / (rows * cols)\n    if density <= threshold:\n        return True\n    return False\n\ndef g():\n    return [[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]\n\nassert f(g())\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='programming') -> bool:\n    \"\"\"Check if the given string contains all the characters in the target string.\nSample Input:\n`'rnmmgrgping'`\nSample Output:\n`True`\"\"\"\n    target_chars = set(target)\n    for char in s:\n        target_chars.discard(char)\n        if not target_chars:\n            return True\n    return False\n\ndef g(target='programming'):\n    return ''.join(sorted(target, reverse=True))\n\nassert f(g())\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, find two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> int:\n    \"\"\"Find the difference between the maximum and minimum numbers in the given list\"\"\"\n    max_num = float('-inf')\n    min_num = float('inf')\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return max_num - min_num\n\ndef g():\n    return [10, 5, 8, 2, 7, 3, 6, 1, 9, 4]\n\nassert f(g()) == 9\n\n",
        "idx_generation": 378,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, lst=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g())\n",
        "idx_generation": 375,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=1, b=1) -> bool:\n    \"\"\"Check if the given number is a power of 2.\"\"\"\n    if n == 0:\n        return False\n    while n % 2 == 0:\n        n /= 2\n    return n == 1\n\ndef g(a=2, b=4):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"Check if the substring is present in the string\"\"\"\n    return substr in string\n\ndef g(substr='abc'):\n    return \"abcdefg\"\n\nassert f(g())\n",
        "idx_generation": 281,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Given an array of integers, find if the array contains any duplicates.\n    Sample Input:\n    n = 6\n    arr = [1, 2, 3, 1, 5, 6]\n    Sample Output:\n    True\"\"\"\n    return len(arr) != len(set(arr))\n\ndef g(arr=[1, 2, 3, 1, 5, 6]):\n    return (6, arr)\n\nassert f(*g())\n",
        "idx_generation": 367,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(lst: List[List[int]], target: int) -> bool:\n    \"\"\"Check if the given target number is present in any of the sublists in the given list.\"\"\"\n    return any(target in sublist for sublist in lst)\n\ndef g(lst=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5):\n    return lst\n\nassert f(g(), 5)\n",
        "idx_generation": 409,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the given list whose sum is equal to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 72,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target_sum=100) -> bool:\n    \"\"\"Check if any combination of numbers in num_list sums up to the target_sum\"\"\"\n    for r in range(1, len(num_list) + 1):\n        combinations = itertools.combinations(num_list, r)\n        for combination in combinations:\n            if sum(combination) == target_sum:\n                return True\n    return False\n\ndef g(target_sum=100):\n    num_list = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    return num_list\n\nassert f(g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[11, 22, 33, 44, 55], lower_bound=10) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by a given number n, and n is greater than or equal to the lower bound.\"\"\"\n    return all((i % n == 0 for i in nums)) and n >= lower_bound\n\ndef g(nums=[11, 22, 33, 44, 55], lower_bound=10):\n    n = 0\n    for i in nums:\n        (m, n) = (min(i, n), max(i, n))\n        while m > 0:\n            (m, n) = (n % m, m)\n    return n\n\nassert f(g())\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, words: List[str]) -> bool:\n    \"\"\"Check if all words in the given list are present in the sentence, regardless of the order.\"\"\"\n    sentence = sentence.lower()\n    words = [word.lower() for word in words]\n    return all(word in sentence for word in words)\n\ndef g():\n    return \"The quick brown fox jumps over the lazy dog\", [\"quick\", \"fox\", \"dog\"]\n\nassert f(*g())\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string s contains a substring of length n that is a palindrome.\"\"\"\n    for i in range(len(s)-n+1):\n        sub_str = s[i:i+n]\n        if sub_str == sub_str[::-1]:\n            return True\n    return False\n\ndef g(n=3):\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, numbers=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the given number is divisible by any number in the list and is divisible by at least one number in the list\"\"\"\n    for num in numbers:\n        if n % num == 0:\n            return True\n    return False\n\ndef g(numbers=[1, 2, 3, 4, 5]):\n    n = 1\n    for num in numbers:\n        n *= num\n    return n\n\nassert f(g())\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], target_length=5) -> bool:\n    \"\"\"Check if any string in the list has a length greater than or equal to the target_length\"\"\"\n    for string in strings:\n        if len(string) >= target_length:\n            return True\n    return False\n\ndef g(target_length=5):\n    strings = ['apple', 'banana', 'cat', 'dog', 'elephant']\n    return strings\n\nassert f(g())\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list contains at least one negative number.\"\"\"\n    return any(num < 0 for num in lst)\n\ndef g():\n    return [1, 2, -3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='python', count=2) -> bool:\n    \"\"\"Check if the substring appears count number of times in the string\"\"\"\n    return string.count(substr) == count\n\ndef g(substr='python', count=2):\n    return substr * count\n\nassert f(g())\n",
        "idx_generation": 364,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the array that sums up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: List[int]) -> bool:\n    \"\"\"Check if a list contains a subsequence of length 4, where the sum of the first three elements is equal to the fourth element.\"\"\"\n    n = len(s)\n    for i in range(n - 3):\n        if s[i] + s[i + 1] + s[i + 2] == s[i + 3]:\n            return True\n    return False\ndef g():\n    return [1, 2, 3, 6, 10, 16]\nassert f(g())\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in descending order\"\"\"\n    return arr == sorted(arr, reverse=True)\n\ndef g():\n    return [5, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target_sum\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=100):\n    numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix (number of rows = number of columns).\"\"\"\n    rows = len(matrix)\n    columns = len(matrix[0])\n    return rows == columns\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if the given string contains k consecutive vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n            if count == k:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(k=3):\n    return 'aei' * k\n\nassert f(g())\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(target=50):\n    return [10, 20, 30, 40]\n\nassert f(g())\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> int:\n    \"\"\"Find the index of the first occurrence of the maximum number in the given list\"\"\"\n    max_num = max(numbers)\n    return numbers.index(max_num)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 9\n\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(primes: List[int], n=10) -> bool:\n    \"\"\"Check if the given list of numbers contains at least `n` prime numbers.\"\"\"\n    count = 0\n    for num in primes:\n        if num > 1:\n            is_prime = True\n            for i in range(2, num):\n                if (num % i) == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                count += 1\n    return count >= n\n\ndef g(n=10):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n    return primes[:n]\n\nassert f(g())\n",
        "idx_generation": 391,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='python') -> bool:\n    \"\"\"Check if a given string contains a specific substring.\n    Return True if the string contains the substring, False otherwise.\"\"\"\n    return substring in string\n\ndef g(substring='python'):\n    return \"I love python programming\"\n\nassert f(g()) == True\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Given an array of integers, find if the array contains any duplicates.\n    Sample Input:\n    n = 6\n    arr = [1, 2, 3, 4, 5, 6]\n    Sample Output:\n    False\"\"\"\n    return len(arr) == len(set(arr))\n\ndef g(arr=[1, 2, 3, 4, 5, 6]):\n    return (6, arr)\n\nassert f(*g())\n",
        "idx_generation": 367,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two distinct elements in a list that sum up to a target value.\"\"\"\n    return any((li[i] + li[j] == target) for i in range(len(li)) for j in range(i + 1, len(li)))\ndef g(target=10):\n    return [target // 2, target // 2]\nassert f(g())\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nimport math\n\ndef f(x: List[int], target_product=100000, n_values=5) -> bool:\n    \"\"\"Find if there exists a combination of n_values numbers that multiplies to the target_product\"\"\"\n    assert all([v > 0 for v in x])\n    combinations = set()\n    for r in range(1, len(x) + 1):\n        for subset in itertools.combinations(x, r):\n            if math.prod(subset) == target_product:\n                combinations.add(subset)\n                if len(combinations) == n_values:\n                    return True\n    return False\n\ndef g(target_product=100000, n_values=5):\n    return [2, 5, 10, 20, 25, 50, 100, 200, 400, 500, 1000]\n\nassert f(g())\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Given a list of integers, find two numbers such that they add up to a specific target number.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(target=12):\n    return [2, 4, 6, 8]\nassert f(g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[4, 8, 12, 16], lower_bound=2) -> bool:\n    \"\"\"Check if there exists a number in the list that is divisible by a given number n, and n is greater than or equal to the lower bound.\"\"\"\n    return any((i % n == 0 for i in nums)) and n >= lower_bound\n\ndef g(nums=[4, 8, 12, 16], lower_bound=2):\n    n = 0\n    for i in nums:\n        (m, n) = (min(i, n), max(i, n))\n        while m > 0:\n            (m, n) = (n % m, m)\n    return n\n\nassert f(g())\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], letter='a') -> bool:\n    \"\"\"Check if any name in the list contains the given letter.\"\"\"\n    for name in names:\n        if letter.lower() in name.lower():\n            return True\n    return False\n\ndef g(letter='a'):\n    return [\"Alice\", \"Bob\", \"Charlie\", \"David\"]\n\nassert f(g())\n",
        "idx_generation": 390,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int]) -> bool:\n    \"\"\"Check if a list is a palindrome\"\"\"\n    return x == x[::-1]\n\ndef g() -> List[int]:\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 114,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of integers in the given list that sums up to n.\"\"\"\n    seen = set()\n    for num in arr:\n        if n - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g():\n    return 5, [1, 2, 3, 4, 5]\nassert f(*g())\n",
        "idx_generation": 449,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='bafywihequyjicivicharyquynikixuhinyqu', b='syrapetagecvicharyquynirorazecheth', length=12) -> bool:\n    \"\"\"Find a string of length length that is in both strings a and b\"\"\"\n    return len(s) == length and s in a and (s in b)\ndef g(a='bafywihequyjicivicharyquynikixuhinyqu', b='syrapetagecvicharyquynirorazecheth', length=12):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g())\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if there exists an element in the array such that its value is more than its index.\"\"\"\n    return any(arr[i] > i for i in range(len(arr)))\ndef g():\n    return [1, 2, 3, 5, 4]\nassert f(g())\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str]) -> bool:\n    \"\"\"Check if any string in the list has more than 5 characters\"\"\"\n    for string in strings:\n        if len(string) > 5:\n            return True\n    return False\n\ndef g():\n    return [\"apple\", \"banana\", \"car\", \"dog\", \"elephant\"]\n\nassert f(g()) == True\n",
        "idx_generation": 388,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=10) -> bool:\n    \"\"\"Check if there exists a row in the matrix that has the target sum.\"\"\"\n    for row in matrix:\n        if sum(row) == target_sum:\n            return True\n    return False\n\ndef g(target_sum=10):\n    return [[1, 2, 3], [4, 5, 1], [7, 2, 0]]\n\nassert f(g()) == True\n\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"Return the transposed matrix.\"\"\"\n    transposed_matrix = []\n    for i in range(len(matrix[0])):\n        transposed_row = []\n        for row in matrix:\n            transposed_row.append(row[i])\n        transposed_matrix.append(transposed_row)\n    return transposed_matrix\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a lower triangular matrix\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [2, 3, 0], [4, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum: int = 100) -> bool:\n    \"\"\"Check if the sum of any three numbers in the list is equal to the target_sum\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target_sum:\n                    return True\n    return False\n\ndef g(target_sum: int = 100):\n    numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target number\"\"\"\n    return any((x + y == target for x in arr for y in arr))\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\nassert f(g())\n",
        "idx_generation": 63,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exist three numbers in the given list whose sum equals the target\"\"\"\n    seen = set()\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"Check if there exists a subarray in the given list whose length is divisible by k.\"\"\"\n    return any(len(nums[i:j]) % k == 0 for i in range(len(nums)) for j in range(i+1, len(nums)+1))\n\ndef g(k: int) -> List[int]:\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(3), 3)\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, words=['hello', 'world', 'python', 'programming']) -> bool:\n    \"\"\"Check if x is a substring of any word in the list.\"\"\"\n    return any((x in word for word in words))\ndef g(words=['hello', 'world', 'python', 'programming']):\n    return 'py'\nassert f(g())\n",
        "idx_generation": 286,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate elements.\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g(nums=[1, 2, 3, 4, 2]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 370,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Dict\n\ndef f(items: List[Dict[str, int]], key='price') -> bool:\n    \"\"\"Check if there exists an item in the list with a value less than or equal to 50 for the specified key.\"\"\"\n    return any(item[key] <= 50 for item in items)\n\ndef g(key='price'):\n    return [{'item': 'apple', 'price': 60}, {'item': 'banana', 'price': 30}, {'item': 'orange', 'price': 70}]\n\nassert f(g())\n",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_product=24) -> bool:\n    \"\"\"Check if there exists three numbers in the list that multiply to give the target product.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] * numbers[j] * numbers[k] == target_product:\n                    return True\n    return False\n\ndef g(target_product=24):\n    return [1, 2, 3, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=8) -> bool:\n    \"\"\"Given a list of integers, find three numbers such that they add up to a specific target number.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums))))\ndef g(target=8):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> int:\n    \"\"\"Find the sum of all the even numbers in the given list.\"\"\"\n    return sum(num for num in numbers if num % 2 == 0)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 30\n\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str]) -> List[str]:\n    \"\"\"Find all the strings in the given list that have a length greater than 5 and return them in reverse order.\"\"\"\n    long_strings = []\n    for string in strings:\n        if len(string) > 5:\n            long_strings.append(string)\n    return long_strings[::-1]\n\ndef g():\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\"]\n\nassert f(g()) == [\"elderberry\", \"cherry\", \"banana\"]\n",
        "idx_generation": 392,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return string == string[::-1]\n\ndef g(string=\"level\"):\n    return string\n\nassert f(g())\n",
        "idx_generation": 116,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if there exists a number in the list that is a perfect square\"\"\"\n    for num in numbers:\n        if num >= 0 and num**0.5 == int(num**0.5):\n            return True\n    return False\n\ndef g():\n    return [16, 25, 36, 49, 64]\n\nassert f(g())\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in non-decreasing order.\"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], pattern: str) -> List[str]:\n    \"\"\"Find all words in the list that match the given pattern\"\"\"\n    result = []\n    for word in words:\n        if len(word) == len(pattern):\n            match = True\n            for i in range(len(word)):\n                if pattern[i] != '*' and pattern[i] != word[i]:\n                    match = False\n                    break\n            if match:\n                result.append(word)\n    return result\n\ndef g() -> Tuple[List[str], str]:\n    return (['cat', 'bat', 'mat', 'rat', 'hat'], 'c*t')\n\nassert f(*g()) == ['cat']\n",
        "idx_generation": 391,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100, count=3) -> bool:\n    \"\"\"Check if there are count or more numbers in the list that sum up to the target value.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            count -= 1\n            if count <= 0:\n                return True\n        num_set.add(num)\n    return False\n\ndef g(target=100, count=3):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "idx_generation": 403,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subarray in the given list whose sum is equal to the target.\"\"\"\n    return any(nums[i:j] and sum(nums[i:j]) == target for i in range(len(nums)) for j in range(i+1, len(nums)+1))\n\ndef g(target: int) -> List[int]:\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(15), 15)\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(numbers: List[int], limit=100) -> bool:\n    \"\"\"Check if all the numbers in the given list are less than the limit.\n    Return True if all numbers are less than the limit, False otherwise.\"\"\"\n    return all(num < limit for num in numbers)\n\ndef g(limit=100):\n    numbers = [random.randint(1, 200) for _ in range(10)]\n    return numbers\n\nassert f(g()) == False\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"Given an array of integers, find a pair of numbers that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(arr=[10, 20, 30, 40, 50, 60]):\n    return arr\nassert f(g())\n",
        "idx_generation": 64,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], n: int = 3) -> bool:\n    \"\"\"Check if a list of numbers contains at least n distinct numbers.\"\"\"\n    return len(set(numbers)) >= n\n\ndef g(n: int = 3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] * n\n\nassert f(g())\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if all numbers in the list are prime numbers.\"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return all(is_prime(num) for num in numbers)\n\ndef g():\n    return [2, 3, 5, 7, 11, 13, 17, 19]\n\nassert f(g())\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_word='python') -> bool:\n    \"\"\"Given a string, check if the target_word appears as a substring in any word in the string.\"\"\"\n    words = s.split()\n    for word in words:\n        if target_word in word:\n            return True\n    return False\n\ndef g(target_word='python'):\n    return \"I love python programming\"\n    \nassert f(g())\n",
        "idx_generation": 294,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate elements\"\"\"\n    return len(arr) != len(set(arr))\n\ndef g():\n    return [1, 2, 3, 4, 5, 5]\n\nassert f(g())\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if the target number is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=5):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 429,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a subset of numbers in the list that sums up to the target value\"\"\"\n    n = len(nums)\n    mask = [0] * n\n\n    while True:\n        subset_sum = sum([nums[i] for i in range(n) if mask[i] == 1])\n        if subset_sum == target:\n            return True\n\n        # Generate the next binary mask\n        i = 0\n        while i < n and mask[i] == 1:\n            mask[i] = 0\n            i += 1\n        if i == n:\n            break\n        mask[i] = 1\n\n    return False\n\ndef g():\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=30) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers that sums up to a target value.\nSample Input:\n[10, 20, 15, 5, 7]\nSample Output:\n(10, 20)\"\"\"\n    return any((x + y == target for x in nums for y in nums if x != y))\ndef g(nums=[10, 20, 15, 5, 7], target=30):\n    return next(((x, y) for x in nums for y in nums if x != y and x + y == target))\nassert f(g())\n",
        "idx_generation": 99,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of integers is sorted in non-increasing order.\"\"\"\n    return all(nums[i] >= nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    return [9, 7, 5, 3, 1]\n\nassert f(g())\n\n",
        "idx_generation": 433,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target='Alice') -> bool:\n    \"\"\"Check if a given name is present in the list of names.\n    Return True if the target name is present, False otherwise.\"\"\"\n    return target in names\n\ndef g(target='Alice'):\n    return ['John', 'Mary', 'Bob', 'Alice']\n\nassert f(g()) == True\n\n\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome sequence.\"\"\"\n    if len(nums) < 3:\n        return False\n    for i in range(len(nums)):\n        if nums[i] != nums[-i-1]:\n            return False\n    return True\n\ndef g():\n    return [1, 2, 3, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 116,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n: int = 5) -> bool:\n    \"\"\"Check if the given list contains a number divisible by n\"\"\"\n    return any(num % n == 0 for num in lst)\n\ndef g(n: int = 5):\n    return [n, n*2, n*3, n*4]\n\nassert f(g())\n\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome and contains only odd numbers.\"\"\"\n    return nums == nums[::-1] and all(num % 2 != 0 for num in nums)\n\ndef g():\n    return [1, 3, 5, 7, 5, 3, 1]\n\nassert f(g())\n",
        "idx_generation": 309,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, k=3) -> bool:\n    \"\"\"Check if there exists a substring of length k in the given string that contains all unique characters.\"\"\"\n    n = len(string)\n    if k > n:\n        return False\n\n    char_count = {}\n    for i in range(k):\n        char_count[string[i]] = char_count.get(string[i], 0) + 1\n\n    if len(char_count) == k:\n        return True\n\n    for i in range(k, n):\n        if char_count[string[i - k]] == 1:\n            del char_count[string[i - k]]\n        else:\n            char_count[string[i - k]] -= 1\n\n        char_count[string[i]] = char_count.get(string[i], 0) + 1\n\n        if len(char_count) == k:\n            return True\n\n    return False\n\ndef g(string: str = \"abcde\", k=3):\n    return (string, k)\n\nassert f(*g())\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if there is a row or column in the matrix that sums up to the target value.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    row_sums = [0] * rows\n    col_sums = [0] * cols\n    \n    for i in range(rows):\n        for j in range(cols):\n            row_sums[i] += matrix[i][j]\n            col_sums[j] += matrix[i][j]\n    \n    if target in row_sums or target in col_sums:\n        return True\n    return False\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 403,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subarray in the given list whose sum is equal to the target, considering only even integers.\"\"\"\n    return any(sum(lst[i:j]) == target for i in range(len(lst)) for j in range(i+1, len(lst)+1) if all(num % 2 == 0 for num in lst[i:j]))\n\ndef g(target: int) -> List[int]:\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert f(g(30), 30)\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is an identity matrix\"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n\n    if rows != cols:\n        return False\n\n    for i in range(rows):\n        for j in range(cols):\n            if i == j:\n                if arr[i][j] != 1:\n                    return False\n            else:\n                if arr[i][j] != 0:\n                    return False\n\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n\nassert f(g())\n",
        "idx_generation": 420,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subset of numbers in the list that adds up to the target number.\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n\n    return subset_sum(nums, target)\n\ndef g(target=100):\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find if there is any combination of two numbers that sum up to the target value.\n    Return True if such a combination exists, False otherwise.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 5, 3, 7]\n\nassert f(g()) == True\n\n",
        "idx_generation": 64,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: str, target='abc') -> bool:\n    \"\"\"Check if a given string can be rearranged to form the target string, using all characters in nums exactly once.\"\"\"\n    if len(nums) != len(target):\n        return False\n    for char in target:\n        if char not in nums:\n            return False\n        nums = nums.replace(char, '', 1)\n    return True\n\ndef g(target='abc'):\n    return 'cab'\n\nassert f(g())\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exist two numbers in arr whose difference is exactly k.\"\"\"\n    return any(abs(arr[i] - arr[j]) == k for i in range(len(arr)) for j in range(i+1, len(arr)))\n\ndef g(k=3):\n    return [1, 5, 8, 10, 12]\n\nassert f(g())\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='puzzle', case_sensitive=True) -> bool:\n    \"\"\"Check if the given substring is present in the string 's'.\"\"\"\n    if not case_sensitive:\n        s = s.lower()\n        substr = substr.lower()\n    return substr in s\n\ndef g(substr='puzzle', case_sensitive=True):\n    if not case_sensitive:\n        return \"This is a PUZZLE\"\n    else:\n        return \"This is a puzzle\"\n\nassert f(g())\n",
        "idx_generation": 309,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers contains duplicate elements.\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is present as a sum of any two numbers in the given list.\"\"\"\n    return any(target - num in lst for num in lst)\n\ndef g(target: int) -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g(7), 7)\n",
        "idx_generation": 434,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to give the target value.\n    Return True if such a pair exists, False otherwise.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    return [2, 4, 5, 8, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 76,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a sublist of nums whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 100,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisor=5) -> bool:\n    \"\"\"Check if the number is divisible by the divisor.\"\"\"\n    return n % divisor == 0\n\ndef g(divisor=5):\n    return divisor * 2\n\nassert f(g())\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nimport random\nfrom typing import*\ndef f(s: str, words=['python', 'programming', 'puzzle', 'solution']) -> bool:\n    \"\"\"Check if s is a concatenation of all words in the list, in any order.\"\"\"\n    from itertools import permutations\n    for perm in permutations(words):\n        if ''.join(perm) == s:\n            return True\n    return False\ndef g(words=['python', 'programming', 'puzzle', 'solution']):\n    from random import shuffle\n    shuffled_words = words.copy()\n    shuffle(shuffled_words)\n    return ''.join(shuffled_words)\nassert f(g())\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome sequence.\"\"\"\n    return numbers == numbers[::-1]\ndef g():\n    return [1, 2, 3, 2, 1]\nassert f(g())\n",
        "idx_generation": 120,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], n=5) -> bool:\n    \"\"\"Check if there exists two numbers in the given list whose sum is equal to n\"\"\"\n    num_set = set()\n    for num in numbers:\n        if n - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(n=5):\n    return [1, 2, 3, 4, n-1]\n\nassert f(g())\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the given number n is divisible by any two elements in the list.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if n % (lst[i] * lst[j]) == 0:\n                return True\n    return False\n\ndef g():\n    return 24, [2, 3, 4, 6, 8]\n\nassert f(*g())\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char_count=3, char='a') -> bool:\n    \"\"\"Find a string that contains exactly 'char_count' occurrences of a specific character 'char'\"\"\"\n    return s.count(char) == char_count\n\ndef g(char_count=3, char='a'):\n    return char * char_count\n\nassert f(g())\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=15) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers: List[int]):\n    return numbers\n\nassert f(g([3, 5, 8, 10, 4, 2]))\n",
        "idx_generation": 412,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subarray in the given list whose sum is equal to the target.\"\"\"\n    return any(nums[i:j] and sum(nums[i:j]) == target for i in range(len(nums)) for j in range(i+1, len(nums)+1))\n\ndef g(target: int) -> List[int]:\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(15), 15)\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a diagonal matrix\"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n\n    if rows != cols:\n        return False\n\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and arr[i][j] != 0:\n                return False\n\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 4, 0], [0, 0, 9]]\n\nassert f(g())\n",
        "idx_generation": 420,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]], threshold=5) -> bool:\n    \"\"\"Check if there exists a pair of points in a list such that the Euclidean distance between them is less than the threshold\"\"\"\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            distance = ((points[i][0] - points[j][0])**2 + (points[i][1] - points[j][1])**2)**0.5\n            if distance < threshold:\n                return True\n    return False\n\ndef g(points=[(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], threshold=5):\n    return points\n\nassert f(g())\n",
        "idx_generation": 142,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 65,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a subarray in the given list whose sum is equal to zero.\"\"\"\n    prefix_sum = 0\n    seen = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == 0 or prefix_sum in seen:\n            return True\n        seen.add(prefix_sum)\n    return False\n\ndef g():\n    return [4, -2, 3, 1, -7, 5]\n\nassert f(g())\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive even numbers in the list.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j] % 2 == 0 for j in range(k)):\n            return True\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert f(g())\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring appears in the word exactly twice.\"\"\"\n    return word.count(substring) == 2\n\ndef g(substring='abc'):\n    return substring + substring\n\nassert f(g())\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list contains duplicate elements\"\"\"\n    return len(numbers) != len(set(numbers))\n\ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g()) == True\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> int:\n    \"\"\"Find the index of the target number in the given list. If the number is not present, return -1.\"\"\"\n    for i in range(len(numbers)):\n        if numbers[i] == target:\n            return i\n    return -1\n\ndef g():\n    return ([1, 3, 5, 7, 9], 5)\n\nassert f(*g()) == 2\n",
        "idx_generation": 435,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sums up to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 81,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 101,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, divisor: int = 2) -> bool:\n    \"\"\"Check if the number is divisible by the given divisor.\"\"\"\n    return num % divisor == 0\n\ndef g(divisor: int = 2):\n    return 10\n\nassert f(g())\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str]) -> str:\n    \"\"\"Find the longest string in the given list.\"\"\"\n    return max(strings, key=len)\n\ndef g():\n    return ['cat', 'dog', 'bird', 'elephant', 'moose']\n\nassert f(g()) == 'elephant'\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return string == string[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g())\n",
        "idx_generation": 121,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n=10) -> bool:\n    \"\"\"Check if there are exactly n even numbers in the list.\"\"\"\n    even_nums = [num for num in lst if num % 2 == 0]\n    return len(even_nums) == n\ndef g(n=10):\n    return list(range(1, n*2+1))\nassert f(g())\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(strings: List[str], n=3) -> bool:\n    \"\"\"Check if all the strings in the list have length greater than or equal to n\"\"\"\n    for string in strings:\n        if len(string) < n:\n            return False\n    return True\n\ndef g(n=3):\n    return ['apple', 'banana', 'cherry', 'date']\n\nassert f(g()) == True\n",
        "idx_generation": 407,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g(numbers: List[int]):\n    return numbers\n\nassert f(g([3, 5, 8, 10, 4, 2, -3]), target=12)\n",
        "idx_generation": 437,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subarray in the given list whose sum is greater than or equal to the target.\"\"\"\n    return any(nums[i:j] and sum(nums[i:j]) >= target for i in range(len(nums)) for j in range(i+1, len(nums)+1))\n\ndef g(target: int) -> List[int]:\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(30), 30)\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the given number n is present in the list.\"\"\"\n    return n in lst\n\ndef g(lst: List[int]):\n    return random.choice(lst)\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g(numbers), numbers)\n",
        "idx_generation": 428,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in a list that sums up to the target value\"\"\"\n    nums.sort()\n    \n    for i in range(len(nums) - 2):\n        left = i + 1\n        right = len(nums) - 1\n        \n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            \n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    \n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7], target=10):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if any two numbers in the given list sum up to the target.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int], x=3, y=5) -> bool:\n    \"\"\"Check if there exists a number in the list that is divisible by both x and y.\"\"\"\n    return any(num % x == 0 and num % y == 0 for num in nums)\n\ndef g():\n    return [15, 20, 25, 30, 35]\n\nassert f(g())\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a combination of k numbers in the list that sums up to zero.\"\"\"\n    for comb in combinations(nums, k):\n        if sum(comb) == 0:\n            return True\n    return False\n\ndef g(k=4):\n    return [-1, 2, 3, -4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 439,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='python', b='programming') -> bool:\n    \"\"\"Check if both strings are present in the given string\"\"\"\n    return a in s and b in s\ndef g(a='python', b='programming'):\n    return a + ' ' + b\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\n\ndef f(lst: List[int], num: int) -> bool:\n    \"\"\"Check if a number is present in the list and its index is a multiple of num\"\"\"\n    if num <= 0 or num >= len(lst):\n        return False\n    return num in lst and lst.index(num) % num == 0\n\ndef g():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    num = random.choice(lst)\n    return lst, num\n\nassert f(*g())\n",
        "idx_generation": 390,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if the target number is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g():\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix\n\nassert f(g(), target=5)\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list such that their product equals the target\"\"\"\n    nums.sort()\n    left, right = 0, len(nums) - 1\n    while left < right:\n        curr_product = nums[left] * nums[right]\n        if curr_product == target:\n            return True\n        elif curr_product < target:\n            left += 1\n        else:\n            right -= 1\n    return False\n\ndef g(target=0):\n    return [-2, -1, 0, 3, 5, 9] * 2\n\nassert f(g())\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers, find three numbers that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nassert f(g())\n",
        "idx_generation": 101,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5, a=2, b=4) -> bool:\n    \"\"\"Check if there exists a sublist of length b such that all its elements are divisible by the target value.\"\"\"\n    n = len(nums)\n    if b > n:\n        return False\n    for i in range(n - b + 1):\n        sublist = nums[i:i+b]\n        if all(num % target == 0 for num in sublist):\n            return True\n    return False\n\ndef g(target=5, a=2, b=4):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    for i in range(a, a+b):\n        nums[i] = target * (i+1)\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"Check if all words in the list start with the given letter.\"\"\"\n    for word in words:\n        if word[0].lower() != letter.lower():\n            return False\n    return True\n\ndef g(letter='a'):\n    return ['apple', 'ant', 'avocado']\n\nassert f(g())\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return string == string[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 125,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in ascending order.\"\"\"\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str], n=3) -> bool:\n    \"\"\"Check if at least one string in the list has length greater than or equal to n\"\"\"\n    for string in strings:\n        if len(string) >= n:\n            return True\n    return False\n\ndef g(n=3):\n    return ['apple', 'banana', 'cherry', 'date']\n\nassert f(g()) == True\n\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target_sum=100) -> bool:\n    \"\"\"Find if there exists a combination of numbers in the given list that sums up to the target_sum\"\"\"\n    assert all([v > 0 for v in x])\n    \n    def subset_sum(index, curr_sum):\n        if curr_sum == target_sum:\n            return True\n        if index >= len(x) or curr_sum > target_sum:\n            return False\n        \n        return subset_sum(index+1, curr_sum) or subset_sum(index+1, curr_sum + x[index])\n    \n    return subset_sum(0, 0)\n\ndef g(target_sum=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n\n",
        "idx_generation": 439,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subarray in the given list whose sum is less than or equal to the target.\"\"\"\n    return any(nums[i:j] and sum(nums[i:j]) <= target for i in range(len(nums)) for j in range(i+1, len(nums)+1))\n\ndef g(target: int) -> List[int]:\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(50), 50)\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if there exists a permutation of lst that sums up to n.\"\"\"\n    def backtrack(target, curr_sum, curr_idx, visited):\n        if curr_sum == target:\n            return True\n        if curr_sum > target:\n            return False\n        for i in range(len(lst)):\n            if not visited[i]:\n                visited[i] = True\n                if backtrack(target, curr_sum + lst[i], curr_idx + 1, visited):\n                    return True\n                visited[i] = False\n        return False\n\n    visited = [False] * len(lst)\n    return backtrack(n, 0, 0, visited)\n\ndef g():\n    return 10, [2, 4, 6, 8]\n\nassert f(*g())\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that sums up to the given target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n",
        "idx_generation": 150,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [50, 50]\n\nassert f(g())\n",
        "idx_generation": 67,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], x=2, y=3) -> bool:\n    \"\"\"Check if there exists a number in the list that is divisible by x but not divisible by y.\"\"\"\n    return any(num % x == 0 and num % y != 0 for num in nums)\n\ndef g():\n    return [10, 12, 15, 18, 20, 25]\n\nassert f(g())\n",
        "idx_generation": 403,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that are prime numbers.\"\"\"\n    if len(arr) < k:\n        return False\n    primes = [num for num in arr if all(num % i != 0 for i in range(2, int(num**0.5) + 1))]\n    return any(all(arr[i+j+1] in primes for j in range(k-1)) for i in range(len(arr)-k+1))\n\ndef g(k=3):\n    return [2, 3, 5, 7, 9, 11, 13]\n\nassert f(g())\n",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if the given substring is a prefix of s\"\"\"\n    return s.startswith(substr)\ndef g(substr='python'):\n    return 'python programming'\nassert f(g())\n\n",
        "idx_generation": 323,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains a duplicate number.\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g(nums=[1, 2, 3, 4, 5, 5]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 409,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the given target number exists in any of the rows in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix: List[List[int]] = [[1, 2, 3],\n                                [4, 5, 6],\n                                [7, 8, 9]], target: int = 5):\n    return (matrix, target)\n\nassert f(*g())\n",
        "idx_generation": 443,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst\n\nassert f(g())\n\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sums up to the target value.\"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        complements.add(target - num)\n    return False\ndef g(target=10):\n    return [1, 3, 5, 7]\nassert f(g())\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str) -> str:\n    \"\"\"Given a sentence, reverse the order of words in the sentence.\n    Return the reversed sentence.\"\"\"\n    words = sentence.split()\n    reversed_sentence = ' '.join(reversed(words))\n    return reversed_sentence\n\ndef g():\n    return \"Hello, World! How are you?\"\n\nassert f(g()) == \"you? are How World! Hello,\"\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome.\"\"\"\n    return numbers == numbers[::-1]\ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\nassert f(g())\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in non-decreasing order.\"\"\"\n    return arr == sorted(arr)\n    \ndef g():\n    arr = [5, 1, 3, 8, 2, 7, 4, 6, 9, 10]\n    return sorted(arr)\n    \nassert f(g())\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='python', n=3) -> bool:\n    \"\"\"Check if a substring appears n times in a given string.\"\"\"\n    return s.count(substring) == n\ndef g(substring='python', n=3):\n    return substring * n\nassert f(g())\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    seen = set()\n    for num in numbers:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> List[int]:\n    \"\"\"Find all the even numbers in the given list.\"\"\"\n    evens = []\n    for num in numbers:\n        if num % 2 == 0:\n            evens.append(num)\n    return evens\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [2, 4, 6, 8, 10]\n",
        "idx_generation": 435,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a given list is a palindrome\"\"\"\n    return nums == nums[::-1]\ndef g():\n    return [1, 2, 3, 2, 1]\nassert f(g())\n\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum: int = 100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target_sum\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum: int = 100):\n    numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 150,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Find a combination of numbers from the list that adds up to the target sum.\"\"\"\n    from itertools import combinations\n    for r in range(1, len(numbers) + 1):\n        for combination in combinations(numbers, r):\n            if sum(combination) == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 67,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], x=4, y=7) -> bool:\n    \"\"\"Check if there exists a number in the list that is divisible by either x or y, but not divisible by both.\"\"\"\n    return any((num % x == 0 or num % y == 0) and not (num % x == 0 and num % y == 0) for num in nums)\n\ndef g():\n    return [14, 18, 21, 25, 28, 35]\n\nassert f(g())\n",
        "idx_generation": 403,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=4) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form a fibonacci sequence.\"\"\"\n    if len(nums) < k:\n        return False\n    for i in range(len(nums)-k+1):\n        if all(nums[i+j+2] == nums[i+j] + nums[i+j+1] for j in range(k-2)):\n            return True\n    return False\n\ndef g():\n    return [1, 1, 2, 3, 5, 8, 13]\n\nassert f(g())\n",
        "idx_generation": 449,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, substring=\"python\") -> bool:\n    \"\"\"Check if the given word contains the given substring\"\"\"\n    return substring in word\n\ndef g(substring=\"python\"):\n    return \"I love python programming\"\n\nassert f(g())\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(lst1: List[int], lst2: List[int]) -> bool:\n    \"\"\"Check if the given two lists have the same elements, regardless of their order.\"\"\"\n    return set(lst1) == set(lst2)\n\ndef g(lst1=[1, 2, 3, 4, 5], lst2=[5, 4, 3, 2, 1]):\n    return lst1\n\nassert f(g(), [5, 4, 3, 2, 1])\n",
        "idx_generation": 409,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if a given target number is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return (matrix, 5)\n\nassert f(*g())\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that multiply to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    nums = [2, 5, 3, 4, 1]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 85,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums)))\n\ndef g(target=10):\n    return [1, 5, 3, 8, 2]\n\nassert f(g())\n",
        "idx_generation": 105,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(names: List[str], letter='a') -> List[str]:\n    \"\"\"Find all names in the given list that start with the specified letter.\"\"\"\n    start_with_letter = []\n    for name in names:\n        if name[0].lower() == letter.lower():\n            start_with_letter.append(name)\n    return start_with_letter\n\ndef g(letter='a'):\n    return ['Alice', 'Bob', 'Charlie', 'Dave', 'Eve']\n\nassert f(g()) == ['Alice']\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a given number n is a palindrome\"\"\"\n    return str(n) == str(n)[::-1]\n\ndef g():\n    return 12321\n\nassert f(g())\n",
        "idx_generation": 141,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is in strictly increasing order.\"\"\"\n    for i in range(1, len(nums)):\n        if nums[i] <= nums[i-1]:\n            return False\n    return True\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='ab', count=3) -> bool:\n    \"\"\"Check if the given substring appears multiple times in the string.\"\"\"\n    return s.count(substring) >= count\n\ndef g(substring='ab', count=3):\n    return substring * count\n\nassert f(g())\n",
        "idx_generation": 412,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a combination of numbers that sums up to the target\"\"\"\n    def combination_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n\n        return combination_sum(nums[1:], target - nums[0]) or combination_sum(nums[1:], target)\n    \n    return combination_sum(nums, target)\n\n\ndef g(target=20):\n    nums = [2, 4, 6, 8, 10, 12]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 455,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], n=3) -> bool:\n    \"\"\"Check if there exists n consecutive numbers in the list that form a strictly increasing sequence.\"\"\"\n    if len(arr) < n:\n        return False\n    for i in range(len(arr)-n+1):\n        if all(arr[i+j+1] > arr[i+j] for j in range(n-1)):\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a lower triangular matrix.\"\"\"\n    n = len(arr)\n\n    # Check if the matrix is square\n    if n != len(arr[0]):\n        return False\n\n    # Check if the matrix is lower triangular\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i][j] != 0:\n                return False\n\n    return True\n\ndef g():\n    return [[1, 0, 0], [2, 3, 0], [4, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum: int = 100, num_pairs=2) -> bool:\n    \"\"\"Check if there exists a specified number of pairs in the list that add up to the target_sum\"\"\"\n    count = 0\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                count += 1\n                if count == num_pairs:\n                    return True\n    return False\n\ndef g(target_sum: int = 100, num_pairs=2):\n    numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 152,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers, check if there exists a pair of numbers that add up to the target value.\n    Return True if such a pair exists, False otherwise.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == False\n",
        "idx_generation": 68,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], x=2, y=4, z=6) -> bool:\n    \"\"\"Check if there exists a number in the list that is divisible by x, y, and z simultaneously.\"\"\"\n    return any(num % x == 0 and num % y == 0 and num % z == 0 for num in nums)\n\ndef g():\n    return [12, 16, 24, 30, 36, 40]\n\nassert f(g())\n",
        "idx_generation": 403,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exist k consecutive numbers in the list that are prime numbers.\"\"\"\n    if len(nums) < k:\n        return False\n    for i in range(len(nums)-k+1):\n        if all(is_prime(nums[i+j]) for j in range(k)):\n            return True\n    return False\n\ndef g():\n    return [2, 3, 5, 7, 11, 13, 17, 19]\n\ndef is_prime(num: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nassert f(g())\n\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='python') -> bool:\n    \"\"\"Check if the substring is present in the given string.\"\"\"\n    return substring in string\n\ndef g(string='Hello, I love python!', substring='python'):\n    return string\n\nassert f(g())\n",
        "idx_generation": 332,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list contains duplicate elements\"\"\"\n    return len(numbers) != len(set(numbers))\ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\nassert f(g())\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"Find the indices of the target value in the given list.\"\"\"\n    indices = []\n    \n    for i in range(len(arr)):\n        if arr[i] == target:\n            indices.append(i)\n    \n    return indices\n\ndef g():\n    numbers = [1, 2, 3, 4, 5, 2, 6, 2]\n    return numbers\n\nassert f(g(), target=2) == [1, 5, 7]\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target value.\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 109,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"level\"\nassert f(g()) == True\n\n",
        "idx_generation": 142,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if all elements in the list are positive integers.\"\"\"\n    return all(isinstance(num, int) and num > 0 for num in arr)\ndef g(arr: List[int]):\n    return arr\nassert f(g([1, 2, 3, 4, 5]))\n",
        "idx_generation": 358,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[str], target: str) -> bool:\n    \"\"\"Check if the target string is present as a substring in any of the strings in the given list.\"\"\"\n    return any(target in s for s in lst)\n\ndef g(target: str) -> List[str]:\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n\nassert f(g(\"an\"), \"an\")\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that have a difference of the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) == target:\n                return True\n    return False\n\ndef g():\n    return ([2, 4, 6, 8, 10], 2)\n\nassert f(*g())\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a subsequence in the given list whose sum is equal to the target value.\"\"\"\n    n = len(lst)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j >= lst[i - 1]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - lst[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    \n    return dp[n][target]\n\ndef g(target=50):\n    lst = [10, 20, 30, 40, 50, 60]\n    return lst\n\nassert f(g())",
        "idx_generation": 437,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a lower triangular matrix\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    if rows != cols:\n        return False\n\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n\n    return True\n\ndef g():\n    return [[1, 0, 0], [2, 3, 0], [4, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[3, 7, 12, 15, 21, 24, 28, 33]) -> bool:\n    \"\"\"Check if a number is present in the given list\"\"\"\n    return n in nums\n\ndef g(nums=[3, 7, 12, 15, 21, 24, 28, 33]):\n    return nums[3]\n\nassert f(g())\n",
        "idx_generation": 156,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nimport numpy as np\nfrom typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists two numbers in the given array whose sum is equal to the target value.\"\"\"\n    return any(target - x in arr for x in arr)\ndef g(arr: List[int]):\n    target = np.random.choice(arr)\n    return arr, target\nassert f(*g([2, 4, 6, 8, 10, 12, 14, 16]))\n\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\nfrom typing import *\n\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Check if any of the numbers in the list is a perfect square and divisible by n.\"\"\"\n    return any((math.isqrt(num) ** 2 == num and num % n == 0) for num in nums)\n\ndef g(n=3):\n    return [9, 16, 25, 36, 49]\n\nassert f(g())\n",
        "idx_generation": 403,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"Check if there exists a subarray in the given list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\n\ndef g():\n    nums = [4, 2, 7, 6, 9]\n    k = 3\n    return nums, k\n\nassert f(*g())\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word_list: List[str], target_word='python') -> bool:\n    \"\"\"Check if the target_word exists in the given word_list\"\"\"\n    return target_word in word_list\ndef g(target_word='python'):\n    return ['java', 'c++', 'python', 'ruby']\nassert f(g()) == True\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains duplicate elements.\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 2, 4]\n\nassert f(g())\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if the target number is present in the given matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5):\n    return matrix\n\nassert f(g(), target=5)\n",
        "idx_generation": 468,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target value.\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)+1):\n            if sum(li[i:j]) == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of integers is sorted in non-decreasing order\"\"\"\n    return nums == sorted(nums)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 109,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return string == string[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n",
        "idx_generation": 144,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Check if the list is a palindrome.\"\"\"\n    return li == li[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, k=3) -> bool:\n    \"\"\"Check if the given string has a substring of length k that appears exactly k times.\"\"\"\n    substrings = [string[i:i+k] for i in range(len(string)-k+1)]\n    substring_counts = Counter(substrings)\n    for count in substring_counts.values():\n        if count == k:\n            return True\n    return False\n\ndef g():\n    return \"abcdeabcdeabcde\"\n\nassert f(g())\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target_sum=15) -> bool:\n    \"\"\"Check if there are two numbers in the matrix whose sum is equal to the target sum.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[k])):\n                    if matrix[i][j] + matrix[k][l] == target_sum:\n                        return True\n    return False\n\ndef g(target_sum=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a list contains consecutive numbers from 1 to n.\"\"\"\n    return set(nums) == set(range(1, len(nums) + 1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if there exists a subsequence in lst where all elements are prime numbers.\"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return any(is_prime(num) for num in lst)\n\ndef g():\n    return [1, 3, 5, 7, 9, 11, 13]\n\nassert f(g())\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that adds up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target: int = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [2, 4, 6, 8]\nassert f(g())\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100, max_numbers=5) -> bool:\n    \"\"\"Find a combination of at most max_numbers numbers whose sum is equal to the target value.\"\"\"\n    return sum(numbers) == target and len(numbers) <= max_numbers\n\ndef g(target=100, max_numbers=5):\n    return [10, 30, 25, 15, 20]\n\nassert f(g())\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=4) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form a geometric progression.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+1] / arr[i+j] == arr[i+1] / arr[i] for j in range(k-1)):\n            return True\n    return False\n\ndef g():\n    return [1, 2, 4, 8, 16, 32]\n\nassert f(g())\n\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(s: str, sub_str=\"programming\") -> bool:\n    \"\"\"Check if the given substring exists in the string.\"\"\"\n    return sub_str in s.lower()\n\ndef g(s: str):\n    return s, \"programming\"\n\nassert f(*g(\"I love Python programming!\"))\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of integers contains any duplicate elements\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\n\nassert f(g())\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_value=0) -> bool:\n    \"\"\"Check if the target value is present in the diagonal elements of the matrix.\"\"\"\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n    if num_rows != num_cols:\n        return False\n    for i in range(num_rows):\n        if matrix[i][i] == target_value:\n            return True\n    return False\n\ndef g(target_value=0):\n    return [[1, 2, 3], [4, 0, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 479,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose sum is equal to the target value.\"\"\"\n    n = len(li)\n    dp = [[False] * (target + 1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = True\n    for i in range(1, n+1):\n        for j in range(1, target+1):\n            if j < li[i-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-li[i-1]]\n    return dp[n][target]\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(n: int, target_sum=15) -> bool:\n    \"\"\"Check if the sum of the digits of a number is greater than the target_sum\"\"\"\n    return sum([int(digit) for digit in str(n)]) > target_sum\n\ndef g(target_sum=15):\n    n = 0\n    while True:\n        if sum([int(digit) for digit in str(n)]) > target_sum:\n            return n\n        n += 1\n\nassert f(g())\n",
        "idx_generation": 110,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome.\"\"\"\n    return numbers == numbers[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g())\n\n",
        "idx_generation": 146,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the sum of the numbers in the list is divisible by the length of the list.\"\"\"\n    return sum(nums) % len(nums) == 0\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_char='a', target_count=3) -> bool:\n    \"\"\"Check if the target character appears in the string for the specified number of times\"\"\"\n    return s.count(target_char) == target_count\ndef g(target_char='a', target_count=3):\n    return target_char * target_count\nassert f(g())\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(dictionary: Dict[str, int], target: int = 100) -> bool:\n    \"\"\"Return True if the sum of all values in the dictionary is equal to the target\"\"\"\n    return sum(dictionary.values()) == target\n\ndef g(target: int = 100):\n    return {\"a\": 20, \"b\": 30, \"c\": 50}\n\nassert f(g()) == True\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=2) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form an arithmetic progression.\"\"\"\n    if len(nums) < k:\n        return False\n    for i in range(len(nums)-k+1):\n        if all(nums[i+j+1] - nums[i+j] == nums[i+1] - nums[i] for j in range(k-1)):\n            return True\n    return False\n\ndef g():\n    return [3, 5, 7, 9, 11]\n\nassert f(g())\n",
        "idx_generation": 449,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if there exists a subsequence in lst where all elements are perfect squares.\"\"\"\n    return any(num ** 0.5 == int(num ** 0.5) for num in lst)\n\ndef g():\n    return 2, [1, 3, 4, 7, 9, 11, 16]\n\nassert f(*g())\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a given list of numbers is strictly increasing\"\"\"\n    return all(nums[i] < nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a subarray in the list with a sum equal to the target.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        curr_sum = nums[i]\n        j = i + 1\n        while j <= n:\n            if curr_sum == target:\n                return True\n            if curr_sum > target or j == n:\n                break\n            curr_sum += nums[j]\n            j += 1\n    return False\ndef g(target=20):\n    return [4, 3, 5, 7, 8]\nassert f(g())\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers contains at least three consecutive numbers in ascending order\"\"\"\n    for i in range(len(numbers) - 2):\n        if numbers[i] + 1 == numbers[i + 1] and numbers[i + 1] + 1 == numbers[i + 2]:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7]\n\nassert f(g())\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form a Fibonacci sequence.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+2] == arr[i+j] + arr[i+j+1] for j in range(k-2)):\n            return True\n    return False\n\ndef g():\n    return [0, 1, 1, 2, 3, 5, 8, 13, 21]\n\nassert f(g())\n\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], target_string=\"python\") -> bool:\n    \"\"\"Check if any string in the list contains the target_string as a substring.\"\"\"\n    return any((target_string in s for s in strings))\n\ndef g(target_string=\"python\"):\n    return [\"hello\", \"world\", \"python\", \"programming\", \"puzzles\"]\n\nassert f(g())\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a duplicate number in the list.\"\"\"\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 5]\n\nassert f(g())\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(target: int, nums=[3, 4, 2, 1, 5, 6, 7, 8, 9]) -> int:\n    \"\"\"Find the index of the target value in the given list.\"\"\"\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1\n\ndef g(nums=[3, 4, 2, 1, 5, 6, 7, 8, 9]):\n    return 5\n\nassert f(g()) == 4\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=5, n=2) -> bool:\n    \"\"\"Find n numbers in the array that multiply to the target\"\"\"\n    from itertools import combinations\n    comb = [c for c in combinations(arr, n) if c[0] * c[1] == target]\n    return len(comb) > 0\ndef g(target=5, n=2):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 92,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(n: int, target_sum=20) -> bool:\n    \"\"\"Check if the sum of the digits of a number is less than the target_sum\"\"\"\n    return sum([int(digit) for digit in str(n)]) < target_sum\n\ndef g(target_sum=20):\n    n = 0\n    while True:\n        if sum([int(digit) for digit in str(n)]) < target_sum:\n            return n\n        n += 1\n\nassert f(g())\n",
        "idx_generation": 110,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return string == string[::-1]\ndef g():\n    return \"madam\"\nassert f(g())\n",
        "idx_generation": 149,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, lst: List[int]=[1, 2, 3]) -> bool:\n    \"\"\"Check if the minimum element in a list is equal to a given number.\"\"\"\n    minimum = min(lst)\n    return minimum == n\n\ndef g(lst: List[int]=[1, 2, 3]):\n    return min(lst)\n\nassert f(g())\n",
        "idx_generation": 368,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target: str, count=2) -> bool:\n    \"\"\"Check if there exist 'count' words in the list that have the same starting letter as the 'target' word.\"\"\"\n    return sum([1 for word in words if word[0] == target[0]]) >= count\n\ndef g():\n    return (['apple', 'orange', 'banana', 'grape', 'kiwi', 'plum', 'pear', 'peach', 'melon', 'berry', 'mango'], 'p', 3)\n\nassert f(*g())\n\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subsequence in the list that adds up to the target value.\"\"\"\n    n = len(lst)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if lst[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - lst[i - 1]]\n    return dp[n][target]\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target - 9]\n\nassert f(g())\n",
        "idx_generation": 457,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if there are two consecutive numbers in the list that form an arithmetic progression\"\"\"\n    for i in range(len(arr)-1):\n        if arr[i+1] - arr[i] == arr[i]:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 4, 7, 11, 16, 22, 29, 37, 46]\n\nassert f(g())\n\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(x: int, y=42, z=0, w=0) -> bool:\n    \"\"\"Check if the sum of four numbers is equal to 100\"\"\"\n    return x + y + z + w == 100\ndef g(y=42, z=0, w=0):\n    if y == 0 or z == 0 or w == 0:\n        return 100 - y - z - w\n    return 100 - y - z - w\nassert f(g())\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Given a list of integers, find a subset of the list that sums up to the target_sum.\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        for j in range(target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]\ndef g(target_sum=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nassert f(g())\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list where the sum of their digits is divisible by 3.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if (numbers[i] + numbers[j]) % 3 == 0:\n                return True\n    return False\n\ndef g():\n    return [12, 36, 47, 58, 69]\n\nassert f(g())\n",
        "idx_generation": 434,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"Check if there exists a subarray with length k whose sum is divisible by k.\"\"\"\n    if len(nums) < k:\n        return False\n    for i in range(len(nums)-k+1):\n        subarray = nums[i:i+k]\n        if sum(subarray) % k == 0:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(), 3)\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, char_count=3) -> bool:\n    \"\"\"Check if the given string has at least 'char_count' number of characters\"\"\"\n    return len(string) >= char_count\ndef g(char_count=3):\n    return \"Hello, World!\"\nassert f(g())\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Given a list of integers, return a new list with all the duplicates removed.\"\"\"\n    return list(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 10]\n\nassert f(g()) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Find if there exists a pair of distinct numbers in the list whose product is equal to the target value.\"\"\"\n    seen = set()\n    for num in arr:\n        if target % num == 0 and target // num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), target=20)\n",
        "idx_generation": 94,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]], target=10) -> bool:\n    \"\"\"Find a path in the 'nums' list that sums up to the target value.\"\"\"\n    def dfs(index, curr_sum):\n        if index == len(nums):\n            return False\n        curr_sum += nums[index]\n        if curr_sum == target:\n            return True\n        return dfs(index+1, curr_sum) or dfs(index+1, curr_sum-nums[index])\n\n    return dfs(0, 0)\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome\"\"\"\n    return lst == lst[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 154,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the sum of any n consecutive numbers in the list is divisible by n.\"\"\"\n    for i in range(len(lst) - n + 1):\n        if sum(lst[i:i+n]) % n == 0:\n            return True\n    return False\n\ndef g(n=3, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return n, lst\n\nassert f(*g())\n",
        "idx_generation": 368,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> int:\n    \"\"\"Count the number of occurrences of a specific character in a given string.\"\"\"\n    return s.count(char)\n\ndef g():\n    return ('Hello World!', 'l')\n\nassert f(*g()) == 3\n\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that form an arithmetic progression.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+1] - arr[i+j] == arr[i+1] - arr[i] for j in range(k-1)):\n            return True\n    return False\n\ndef g():\n    return [1, 4, 7, 10, 13, 16]\n\nassert f(g())\n\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list such that their sum is divisible by the product of their absolute difference and their average.\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] + arr[j]) % (abs(arr[i] - arr[j]) * ((arr[i] + arr[j]) / 2)) == 0:\n                return True\n    return False\n\ndef g():\n    return [6, 2, 4, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the given list that add up to the target.\"\"\"\n    return any(target - num in nums for num in nums)\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 162,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a subset of the given list of numbers whose sum is zero.\"\"\"\n    for r in range(1, len(nums)+1):\n        for subset in itertools.combinations(nums, r):\n            if sum(subset) == 0:\n                return True\n    return False\n\ndef g():\n    return [1, -2, 3, -4, 5]\n\nassert f(g())\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive elements in the list that are all divisible by the first element in the list.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+1] % arr[i] == 0 for j in range(k-1)):\n            return True\n    return False\n\ndef g():\n    return [2, 4, 8, 16, 32, 64]\n\nassert f(g())\n",
        "idx_generation": 468,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word=\"apple\") -> bool:\n    \"\"\"Check if the target_word is present as a substring in any of the words in the list.\n    Return True if the target_word is found, False otherwise.\"\"\"\n    for word in words:\n        if target_word in word:\n            return True\n    return False\n\ndef g(target_word=\"apple\"):\n    return [\"banana\", \"orange\", \"pineapple\"]\n\nassert f(g()) == True\n\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(numbers: List[int]) -> List[int]:\n    \"\"\"Find the top three distinct numbers in the given list\"\"\"\n    sorted_nums = sorted(set(numbers), reverse=True)\n    return sorted_nums[:3]\n\ndef g():\n    return [5, 2, 8, 3, 9, 1, 7, 4, 6]\n\nassert f(g()) == [9, 8, 7]\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a list whose product is equal to a given target number.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 95,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Given a list of integers 'nums', find a subarray that sums up to the target value.\"\"\"\n    n = len(nums)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + nums[i - 1]\n    for i in range(n + 1):\n        for j in range(i + 1, n + 1):\n            if prefix_sum[j] - prefix_sum[i] == target:\n                return True\n    return False\n\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return string == string[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], k=3) -> List[int]:\n    \"\"\"Return the k largest elements from the given list in descending order.\"\"\"\n    nums.sort(reverse=True)\n    return nums[:k]\n\ndef g():\n    return [4, 8, 2, 5, 1, 9, 3]\n\nassert f(g()) == [9, 8, 5]\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if there exists a subsequence in lst that forms an arithmetic progression with a common difference of n.\"\"\"\n    if len(lst) < 2:\n        return False\n    if n == 0:\n        return True\n    return any(lst[i+1] - lst[i] == n for i in range(len(lst)-1))\n\ndef g():\n    return 2, [1, 3, 5, 7, 9]\n\nassert f(*g())\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if there exists a subarray in the list with average equal to its maximum element.\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            subarray = arr[i:j]\n            if sum(subarray) / len(subarray) == max(subarray):\n                return True\n    return False\n\ndef g():\n    return [3, 6, 1, 8, 2]\n\nassert f(g())\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subset of numbers in the given list that sums up to the target.\"\"\"\n    def is_subset_sum(arr, n, target):\n        if target == 0:\n            return True\n        if n == 0 and target != 0:\n            return False\n        if arr[n - 1] > target:\n            return is_subset_sum(arr, n - 1, target)\n        return is_subset_sum(arr, n - 1, target) or is_subset_sum(arr, n - 1, target - arr[n - 1])\n    \n    return is_subset_sum(nums, len(nums), target)\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 162,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the list that adds up to the target value.\"\"\"\n    def find_sum(start, curr_sum):\n        if curr_sum == target:\n            return True\n        if start >= len(nums):\n            return False\n        return find_sum(start + 1, curr_sum + nums[start]) or find_sum(start + 1, curr_sum)\n\n    return find_sum(0, 0)\n\ndef g(target=0):\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 79,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"Given a list of integers and a target value k, find if there are k consecutive numbers in the list.\"\"\"\n    nums.sort()\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1] + 1:\n            count += 1\n        else:\n            count = 1\n        if count == k:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), 3)\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[4, 8, 12]) -> bool:\n    \"\"\"Check if any element in a list is divisible by a given number.\"\"\"\n    return any(e % n == 0 for e in lst)\ndef g(lst=[4, 8, 12]):\n    return 2\nassert f(g())\n",
        "idx_generation": 474,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='hello') -> bool:\n    \"\"\"Check if the given substring is present in the string, ignoring case.\"\"\"\n    return substring.lower() in s.lower()\n\ndef g(substring='hello'):\n    return \"Hello World!\"\n\nassert f(g())\n",
        "idx_generation": 355,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate elements.\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == False\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target=50) -> bool:\n    \"\"\"Find a combination of numbers in the list whose sum is equal to the target\"\"\"\n    def helper(arr, curr_sum, index):\n        if curr_sum == target:\n            return True\n        if index >= len(arr):\n            return False\n        return helper(arr, curr_sum + arr[index], index + 1) or helper(arr, curr_sum, index + 1)\n    \n    return helper(x, 0, 0)\n\ndef g(target=50):\n    return [10, 20, 30, 5, 15]\n\nassert f(g())\n",
        "idx_generation": 95,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=3) -> bool:\n    \"\"\"Given a list of integers 'nums', find a subsequence that sums up to the target value.\"\"\"\n    def dfs(index, curr_sum):\n        if index == len(nums):\n            return False\n        if curr_sum + nums[index] == target:\n            return True\n        return dfs(index + 1, curr_sum) or dfs(index + 1, curr_sum + nums[index])\n\n    return dfs(0, 0)\n\ndef g(target=3):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"madam\"\n\nassert f(g())\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the sum of the elements in a list is divisible by the length of the list.\"\"\"\n    return sum(nums) % len(nums) == 0\n\ndef g():\n    return [10, 20, 30, 40]\n\nassert f(g())\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is an arithmetic progression.\"\"\"\n    if len(numbers) < 3:\n        return False\n    diff = numbers[1] - numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i-1] != diff:\n            return False\n    return True\n\ndef g():\n    return [1, 5, 9, 13, 17, 21]\n\nassert f(g()) == True\n\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list such that their product is equal to the sum of their digits.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            digit_sum = sum([int(digit) for digit in str(product)])\n            if digit_sum == arr[i] + arr[j]:\n                return True\n    return False\n\ndef g():\n    return [2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists three numbers in the list that sum up to the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target_sum:\n                    return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import numpy as np\nfrom typing import*\n\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the sum of any row in the matrix is equal to the target value.\n    Return True if such a row exists, False otherwise.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False\n\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == False\n\n",
        "idx_generation": 81,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exist k consecutive numbers in the list that are in a geometric progression.\"\"\"\n    if len(nums) < k:\n        return False\n    for i in range(len(nums)-k+1):\n        ratio = nums[i+1] / nums[i]\n        if all(nums[i+j+1] / nums[i+j] == ratio for j in range(k-1)):\n            return True\n    return False\n\ndef g():\n    return [2, 4, 8, 16, 32, 64, 128]\n\nassert f(g())\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exist k consecutive numbers in the list that are prime numbers.\"\"\"\n    if len(nums) < k:\n        return False\n    for i in range(len(nums)-k+1):\n        if all(is_prime(nums[i+j]) for j in range(k)):\n            return True\n    return False\n\ndef g():\n    return [2, 3, 5, 7, 11, 13, 17]\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nassert f(g())\n",
        "idx_generation": 474,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is a repeating pattern in the given string.\"\"\"\n    if substring * (len(string) // len(substring)) + substring[:len(string) % len(substring)] == string:\n        return True\n    return False\n\ndef g(substring='abc'):\n    return 'abcabcabcabcabc'\n\nassert f(g()) == True\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Given a list of numbers, find all the duplicate elements.\n    Return a list of duplicate numbers.\"\"\"\n    result = []\n    for i in range(len(nums)):\n        if nums[i] in nums[i+1:] and nums[i] not in result:\n            result.append(nums[i])\n    return result\n\ndef g():\n    return [1, 2, 3, 4, 2, 5, 6, 7, 8, 9, 4]\n\nassert f(g()) == [2, 4]\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target_product=1000) -> bool:\n    \"\"\"Check if any combination of numbers in num_list multiply up to the target_product\"\"\"\n    for r in range(1, len(num_list) + 1):\n        combinations = itertools.combinations(num_list, r)\n        for combination in combinations:\n            product = 1\n            for num in combination:\n                product *= num\n            if product == target_product:\n                return True\n    return False\n\ndef g(target_product=1000):\n    num_list = [2, 3, 5, 10, 20, 50, 100]\n    return num_list\n\nassert f(g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    return any(target - num in nums for num in nums)\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 170,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome and contains only odd numbers.\"\"\"\n    return nums == nums[::-1] and all(num % 2 != 0 for num in nums)\n\ndef g():\n    return [1, 3, 5, 7, 9, 7, 5, 3, 1]\n\nassert f(g())\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> List[int]:\n    \"\"\"Generate a list of the first n even numbers.\"\"\"\n    return [2*i for i in range(1, n+1)]\n\ndef g():\n    return 5\n\nassert f(g()) == [2, 4, 6, 8, 10]\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list whose sum is equal to 10.\"\"\"\n    return any(10 - num in lst for num in lst)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g()) == True\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a triplet of numbers in the list such that their sum equals the target\"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exist k consecutive numbers in the list that are prime numbers.\"\"\"\n    if len(nums) < k:\n        return False\n    for i in range(len(nums)-k+1):\n        if all(is_prime(nums[i+j]) for j in range(k)):\n            return True\n    return False\n\ndef g():\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nassert f(g())\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub='abc') -> bool:\n    \"\"\"Check if the given string contains the given substring\"\"\"\n    return sub in s\n\ndef g(sub='abc'):\n    s = \"xyzabc123\"\n    return s\n\nassert f(g())\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list contains duplicate elements\"\"\"\n    return len(arr) != len(set(arr))\n\ndef g():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 98,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a subset of nums that adds up to the target number.\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\n\ndef g(target=10):\n    return [1, 2, 3, 4]\n\nassert f(g())\n",
        "idx_generation": 127,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in descending order.\"\"\"\n    return arr == sorted(arr, reverse=True)\n\ndef g():\n    return [5, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list that add up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target sum.\"\"\"\n    seen = set()\n    for num in numbers:\n        complement = target_sum - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return ([10, 20, 30, 40, 50], 70)\n\nassert f(*g())\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exist k consecutive numbers in the list that are positive even numbers.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(is_positive_even(arr[i+j]) for j in range(k)):\n            return True\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\ndef is_positive_even(num: int) -> bool:\n    return num % 2 == 0 and num > 0\n\nassert f(g())\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, pattern: str = 'abc') -> bool:\n    \"\"\"Check if a given pattern is a substring of a given word.\"\"\"\n    return pattern in word\n\ndef g(pattern: str = 'abc'):\n    return \"xyabcz123\"\n\nassert f(g())\n",
        "idx_generation": 371,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list of integers contains duplicate values.\"\"\"\n    return len(lst) != len(set(lst))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == False\n\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=7) -> bool:\n    \"\"\"Check if a matrix contains the target number\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=7):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 100,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10, diff=2) -> bool:\n    \"\"\"Given a list of numbers, find two numbers such that their difference is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) == target:\n                return True\n    return False\ndef g(target=10, diff=2):\n    return [2, 8, 5, 12, 10, 15]\nassert f(g())\n",
        "idx_generation": 141,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=2) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that are equal.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(arr[i+j+1] == arr[i+j] for j in range(k-1)):\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=10, threshold=0.5) -> bool:\n    \"\"\"Check if at least one element in the given numpy array is greater than the target value and the mean of the array is above the threshold.\"\"\"\n    return np.any(arr > target) and np.mean(arr) > threshold\n\ndef g(shape=(5, 5), target=10, threshold=0.5):\n    arr = np.random.random(shape) * 20\n    return arr\n\nassert f(g())\n\n",
        "idx_generation": 178,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(array: List[int], target: int) -> bool:\n    \"\"\"Check if there is a subarray in the given array that sums up to the target number\"\"\"\n    n = len(array)\n    prefix_sum = 0\n    sum_set = set()\n    for i in range(n):\n        prefix_sum += array[i]\n        if prefix_sum == target or prefix_sum - target in sum_set:\n            return True\n        sum_set.add(prefix_sum)\n    return False\ndef g(array: List[int]=[1, -2, 3, 4, -5], target: int=0):\n    return (array, target)\nassert f(*g())\n",
        "idx_generation": 90,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exist k consecutive numbers in the list that are prime numbers.\"\"\"\n    if len(nums) < k:\n        return False\n    for i in range(len(nums)-k+1):\n        if all(is_prime(nums[i+j]) for j in range(k)):\n            return True\n    return False\n\ndef g():\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nassert f(g())\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string.\"\"\"\n    return substring in string\n\ndef g(string='abcdefghi', substring='abc'):\n    return string\n\nassert f(g())\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target_product=24) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target_product\"\"\"\n    return any((li[i] * li[j] == target_product for i in range(len(li)) for j in range(i+1, len(li))))\ndef g():\n    return [2, 3, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 103,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray in a list whose sum is divisible by k\"\"\"\n    prefix_sum = 0\n    remainders = {0: -1}\n    \n    for i in range(len(nums)):\n        prefix_sum = (prefix_sum + nums[i]) % k\n        \n        if prefix_sum in remainders:\n            if i - remainders[prefix_sum] >= 2:\n                return True\n        else:\n            remainders[prefix_sum] = i\n    \n    return False\n\ndef g(nums=[4, 5, 6, 7, 8, 9, 10], k=3):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n",
        "idx_generation": 180,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the given number n is the maximum value in the list.\"\"\"\n    return n == max(lst)\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst[-1]\n\nassert f(g())\n",
        "idx_generation": 422,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is in strictly increasing order.\"\"\"\n    for i in range(len(nums) - 1):\n        if nums[i] >= nums[i+1]:\n            return False\n    return True\n\ndef g():\n    return [1, 3, 5, 7, 9]\n\nassert f(g())\n",
        "idx_generation": 180,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Find the maximum product of any two integers from a given list of positive integers.\"\"\"\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g()) == 72\n",
        "idx_generation": 90,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[5, 10, 15]) -> bool:\n    \"\"\"Check if any element in a list is divisible by a given number.\"\"\"\n    return any(e % n == 0 for e in lst)\ndef g(lst=[5, 10, 15]):\n    return 5\nassert f(g())\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(strings: List[str], target='apple') -> bool:\n    \"\"\"Check if any of the strings in the list contain the target word\"\"\"\n    for string in strings:\n        if target in string.lower():\n            return True\n    return False\n\ndef g(target='apple'):\n    return ['I love apples', 'The apple is red', 'Banana is my favorite fruit']\n\nassert f(g())\n\n",
        "idx_generation": 384,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there is a subarray in the given list that has a sum greater than or equal to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if sum(arr[i:j]) >= target:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, 3, 5, 7, 9, 2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 106,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 146,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"madam\"\n\nassert f(g())\n",
        "idx_generation": 180,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome and contains only odd numbers.\"\"\"\n    return nums == nums[::-1] and all(num % 2 != 0 for num in nums)\n\ndef g():\n    return [1, 3, 5, 7, 9, 7, 5, 3, 1]\n\nassert f(g())\n",
        "idx_generation": 432,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target_sum\"\"\"\n    return any(target_sum - num in num_list for num in num_list)\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], target=100, n=2) -> bool:\n    \"\"\"Find n numbers in the matrix that add up to the target\"\"\"\n    from itertools import combinations\n    m, n = len(matrix), len(matrix[0])\n    comb = [c for c in combinations([matrix[i][j] for i in range(m) for j in range(n)], n) if sum(c) == target]\n    return len(comb) > 0\ndef g(target=100, n=2):\n    return [[10, 20, 30], [40, 50, 60], [70, 80, 90]]\nassert f(g())\n",
        "idx_generation": 92,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8]) -> bool:\n    \"\"\"Check if the sum of all elements in a list is divisible by a given number.\"\"\"\n    return sum(lst) % n == 0\ndef g(lst=[2, 4, 6, 8]):\n    return 2\nassert f(g())\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if a substring is present in the given string\"\"\"\n    return substr in s\n\ndef g(substr='abc'):\n    return substr\n\nassert f(g())\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, find if there exists a pair of numbers in the list that multiply to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 5, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n\n",
        "idx_generation": 109,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5, a=2, b=4) -> bool:\n    \"\"\"Check if there exists a sublist of length b such that all its elements are divisible by the target value.\"\"\"\n    n = len(nums)\n    if b > n:\n        return False\n    for i in range(n - b + 1):\n        sublist = nums[i:i+b]\n        if all(num % target == 0 for num in sublist):\n            return True\n    return False\n\ndef g(target=5, a=2, b=4):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    for i in range(a, a+b):\n        nums[i] = target * (i+1)\n    return nums\n\nassert f(g())\n",
        "idx_generation": 147,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return string == string[::-1]\n\ndef g():\n    return \"racecar\"\n    \nassert f(g())\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in non-decreasing order.\"\"\"\n    return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 449,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists four numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                for l in range(k+1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose sum is equal to the target value.\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), target=15)\n",
        "idx_generation": 94,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exist k consecutive numbers in the list that are prime numbers.\"\"\"\n    if len(arr) < k:\n        return False\n    for i in range(len(arr)-k+1):\n        if all(is_prime(arr[i+j]) for j in range(k)):\n            return True\n    return False\n\ndef g():\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\ndef is_prime(num: int) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\nassert f(g())\n",
        "idx_generation": 497,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, substring='is') -> bool:\n    \"\"\"Check if the given substring is present in the word.\"\"\"\n    return substring in word\n\ndef g(substring='is'):\n    return \"This is a puzzle\"\n\nassert f(g())\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9]\n\nassert f(g())\n",
        "idx_generation": 111,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=12, k=3) -> bool:\n    \"\"\"Find if there are k numbers in the given list that add up to the target.\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, k):\n        if sum(combo) == target:\n            return True\n    return False\ndef g(target=12, k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 149,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome.\"\"\"\n    return numbers == numbers[::-1]\n\ndef g(numbers=[1, 2, 3, 2, 1]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 187,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome and contains only odd numbers.\"\"\"\n    return nums == nums[::-1] and all(num % 2 != 0 for num in nums)\n\ndef g():\n    return [1, 3, 5, 7, 9, 7, 5, 3, 1]\n\nassert f(g())\n\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == False\n",
        "idx_generation": 98,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a sublist in the list whose elements are all divisible by k.\"\"\"\n    return any(all(num % k == 0 for num in lst[i:j]) for i in range(len(lst)) for j in range(i+1, len(lst)+1))\n\ndef g(k=2):\n    return [4, 8, 12, 16]\n\nassert f(g())\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string.\"\"\"\n    return substring in s\n\ndef g(s='Hello, World!', substring='World'):\n    return s\n\nassert f(g(), 'World')\n",
        "idx_generation": 409,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to combine the numbers in the list using only addition, subtraction, multiplication, and division to reach the target number.\"\"\"\n    def possible_combinations(numbers, target):\n        if len(numbers) == 1:\n            return numbers[0] == target\n        for i in range(len(numbers)):\n            for j in range(i+1, len(numbers)):\n                a, b = numbers[i], numbers[j]\n                remaining = numbers[:i] + numbers[i+1:j] + numbers[j+1:]\n                if possible_combinations([a+b] + remaining, target) or possible_combinations([a-b] + remaining, target) or possible_combinations([a*b] + remaining, target) or (b != 0 and a % b == 0 and possible_combinations([a//b] + remaining, target)):\n                    return True\n        return False\n    return possible_combinations(nums, target)\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\nassert f(g())\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum: int = 100) -> int:\n    \"\"\"Find the number of pairs of numbers in the list that add up to the target_sum\"\"\"\n    count = 0\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                count += 1\n    return count\n\ndef g(target_sum: int = 100):\n    numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return numbers\n\nassert f(g()) == 4\n",
        "idx_generation": 150,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 192,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in non-decreasing order.\"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there are two numbers in the given list that sum up to the target.\"\"\"\n    return any(target - num in nums for num in nums)\n\ndef g(target=20):\n    return [5, 10, 15]\n\nassert f(g())\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> int:\n    \"\"\"Find the number of pairs in the list that add up to the target value.\"\"\"\n    count = 0\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                count += 1\n    return count\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 0\n",
        "idx_generation": 98,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string and is at the start of the string.\"\"\"\n    return s.startswith(substring)\n\ndef g(s='Hello, World!', substring='Hello'):\n    return s\n\nassert f(g(), 'Hello')\n",
        "idx_generation": 415,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if it is possible to find a combination of numbers that multiply to the target value.\"\"\"\n    if target == 1:\n        return True\n    if len(numbers) == 0:\n        return False\n    if numbers[0] > target:\n        return f(numbers[1:], target)\n    return f(numbers[1:], target // numbers[0]) or f(numbers[1:], target)\n\ndef g(target=10):\n    return [1, 2, 5, 10]\nassert f(g())\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list nums whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        curr_sum = nums[i]\n        if curr_sum == target:\n            return True\n        for j in range(i+1, len(nums)):\n            curr_sum += nums[j]\n            if curr_sum == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 3, 5, 7, 8]\n\nassert f(g())\n",
        "idx_generation": 155,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome\"\"\"\n    return numbers == numbers[::-1]\ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\nassert f(g())\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome and contains at least one odd number.\"\"\"\n    return nums == nums[::-1] and any(num % 2 != 0 for num in nums)\n\ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g())\n\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n: int = 5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to n.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == n:\n                return True\n    return False\n\ndef g(n: int = 5):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 194,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in a list whose sum is equal to the target.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 6)\n\nassert f(*g())\n",
        "idx_generation": 98,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string and is at the end of the string.\"\"\"\n    return s.endswith(substring)\n\ndef g(s='Hello, World!', substring='World!'):\n    return s\n\nassert f(g(), 'World!')\n",
        "idx_generation": 415,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the given list that adds up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[10, 20, 30, 40, 50, 60, 70, 80]) -> bool:\n    \"\"\"Check if a number's index is even in the given list\"\"\"\n    return lst.index(n) % 2 == 0\n\ndef g(lst=[10, 20, 30, 40, 50, 60, 70, 80]):\n    return lst[4]\n\nassert f(g())\n",
        "idx_generation": 156,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(l: List[int], n: int) -> bool:\n    \"\"\"Check if the given list l contains the given number n, and return True if it does.\"\"\"\n    return n in l\n\ndef g(n=5):\n    l = [1, 2, 3, 4, 5]\n    return l, n\n\nassert f(*g())\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target sum\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target_sum:\n                return True\n    return False\n    \ndef g(target_sum=10):\n    num_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return num_list\n\nassert f(g())\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers and a target sum, check if there exist three numbers in the list whose product is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] * nums[j] * nums[k] == target:\n                    return True\n    return False\n\ndef g():\n    return ([2, 4, 5, 10, 20], 40)\n\nassert f(*g())\n",
        "idx_generation": 98,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string and is surrounded by parentheses.\"\"\"\n    return '('+substring+')' in s\n\ndef g(s='Hello, (abc) World!', substring='abc'):\n    return s\n\nassert f(g(), 'abc')\n",
        "idx_generation": 415,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that multiplies up to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] * lst[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [-2, 4, 5, -1, 0, 2]\n\nassert f(g())\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    for i, num1 in enumerate(nums):\n        for j, num2 in enumerate(nums[i+1:]):\n            if num1 + num2 == target:\n                return True\n    return False\n\ndef g(nums=[5, 10, 15, 25, 30]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 198,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"Find the sum of all numbers in the given list.\"\"\"\n    return sum(arr)\n\ndef g():\n    numbers = [1, 2, 3, 4, 5]\n    return numbers\n\nassert f(g()) == 15\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target sum.\"\"\"\n    return any(num1 + num2 == target_sum for i, num1 in enumerate(num_list) for num2 in num_list[i+1:])\n\ndef g(target_sum=100):\n    return [10, 20, 30, 40, 50, 60]\n\nassert f(g())\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the array that sum up to the target value\"\"\"\n    return any(arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr)))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target - 9]\nassert f(g())\n",
        "idx_generation": 103,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, strings=['hello', 'world', 'python', 'programming']) -> bool:\n    \"\"\"Check if the given number is divisible by the sum of the ASCII values of any string in the list and is divisible by at least one sum in the list\"\"\"\n    for string in strings:\n        ascii_sum = sum(ord(char) for char in string)\n        if n % ascii_sum == 0:\n            return True\n    return False\n\ndef g(strings=['hello', 'world', 'python', 'programming']):\n    n = 1\n    for string in strings:\n        ascii_sum = sum(ord(char) for char in string)\n        n *= ascii_sum\n    return n\n\nassert f(g())\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the given list that add up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g():\n    return [3, 1, 4, 6, 9, 2, 5, 7]\n\nassert f(g(), target=11)\n",
        "idx_generation": 125,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all elements in the given list of numbers are prime\"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return all(is_prime(num) for num in nums)\n\ndef g():\n    return [2, 3, 5, 7, 11]\n\nassert f(g())\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome, where a palindrome is a list that reads the same forwards and backwards.\"\"\"\n    reversed_nums = nums[::-1]\n    return nums == reversed_nums\n\ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g())\n\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Sort the list in non-decreasing order without using the built-in sort function.\"\"\"\n    for i in range(len(nums)):\n        for j in range(len(nums)-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n\ndef g():\n    return [5, 3, 8, 2, 1, 9, 4, 7]\n\nassert f(g()) == [1, 2, 3, 4, 5, 7, 8, 9]\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if a given list is sorted in non-decreasing order\"\"\"\n    return numbers == sorted(numbers)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 205,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\nassert f(g())\n",
        "idx_generation": 106,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if the given substring is at the beginning of the string s\"\"\"\n    return s[:len(substring)] == substring\ndef g(substring='python'):\n    return substring + ' is a great programming language'\nassert f(g())\n",
        "idx_generation": 425,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[str], target='Python') -> bool:\n    \"\"\"Check if the target string is present in the list.\n    Return True if it is present, False otherwise.\"\"\"\n    return target in lst\n\ndef g(lst=['Java', 'Python', 'C++']):\n    return lst\n\nassert f(g()) == True\n",
        "idx_generation": 126,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists two numbers in the given list whose sum is equal to the target number\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(nums: List[int]=[2, 4, 6, 8, 10], target: int=14):\n    return (nums, target)\nassert f(*g())\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    reversed_nums = nums[::-1]\n    return nums == reversed_nums\n\ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[7, 14, 21]) -> bool:\n    \"\"\"Check if the maximum element in a list is equal to a given number.\"\"\"\n    maximum = max(lst)\n    return maximum == 21\ndef g(lst=[7, 14, 21]):\n    return 21\nassert f(g())\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there is a subset of numbers that sums up to the target_sum.\"\"\"\n    n = len(numbers)\n    for i in range(1, 2**n):\n        subset = []\n        for j in range(n):\n            if (i >> j) & 1:\n                subset.append(numbers[j])\n        if sum(subset) == target_sum:\n            return True\n    return False\n\ndef g(target_sum=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 205,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of integers is a palindrome\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 109,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring: str) -> bool:\n    \"\"\"Check if a given substring exists in the given string.\"\"\"\n    return substring in s\n\ndef g():\n    return (\"Hello, world!\", \"world\")\n\nassert f(*g())\n",
        "idx_generation": 428,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that add up to the target number.\"\"\"\n    def helper(nums, target, i, memo):\n        if target == 0:\n            return True\n        if i == len(nums):\n            return False\n        if (i, target) in memo:\n            return memo[(i, target)]\n        if nums[i] <= target:\n            if helper(nums, target - nums[i], i + 1, memo):\n                memo[(i, target)] = True\n                return True\n        memo[(i, target)] = helper(nums, target, i + 1, memo)\n        return memo[(i, target)]\n    \n    memo = {}\n    return helper(nums, target, 0, memo)\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a given list of numbers is sorted in non-decreasing order\"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    return [1, 2, 4, 4, 7]\n\nassert f(g())\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g(s=\"racecar\"):\n    return s\n\nassert f(g())\n",
        "idx_generation": 202,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in ascending order.\"\"\"\n    return numbers == sorted(numbers)\n\ndef g():\n    return [3, 6, 2, 1, 9, 5]\n\nassert f(g()) == False\n\n",
        "idx_generation": 479,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target_sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Given a list of integers and a target number, find three numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nassert f(g())\n\n",
        "idx_generation": 109,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"Check if the given string starts with the given substring.\"\"\"\n    return string.startswith(substr)\ndef g(substr='abc'):\n    return substr + \"defg\"\nassert f(g())\n",
        "idx_generation": 429,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list where their product is equal to the target number.\"\"\"\n    num_set = set()\n    for num in nums:\n        if num == 0:\n            if target == 0:\n                return True\n        elif target % num == 0:\n            if target // num in num_set:\n                return True\n            num_set.add(num)\n    return False\n\ndef g():\n    return [2, 4, 5, 10, 20]\n\nassert f(g())\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100, length=10) -> bool:\n    \"\"\"Check if there exists a sublist of a given length whose sum equals the target number\"\"\"\n    return any(sum(nums[i:i+length]) == target for i in range(len(nums)-length+1))\n\ndef g(target=100, length=10):\n    return [1]*(length-1) + [target - (length-1)]\n\nassert f(g())\n",
        "idx_generation": 170,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string that is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"madam\"\nassert f(g())\n",
        "idx_generation": 204,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list of integers contains only odd numbers.\"\"\"\n    return all(num % 2 != 0 for num in lst)\n\ndef g():\n    return [1, 3, 5, 7, 9]\n\nassert f(g()) == True\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sums up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int = 10) -> bool:\n    \"\"\"Determine if there are three distinct elements in the list that sum up to the target number.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target: int = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8]\n\nassert f(g())\n",
        "idx_generation": 111,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring=\"abc\") -> bool:\n    \"\"\"Check if the given string contains the given substring\"\"\"\n    return substring in string\n\ndef g(substring=\"abc\"):\n    return \"defabcghi\"\n\nassert f(g())\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target_sum=0) -> bool:\n    \"\"\"Check if there exists a subset of the list whose elements sum up to the target_sum.\"\"\"\n    def is_subset_sum(li, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if li[n-1] > target_sum:\n            return is_subset_sum(li, n-1, target_sum)\n        return is_subset_sum(li, n-1, target_sum) or is_subset_sum(li, n-1, target_sum-li[n-1])\n    return is_subset_sum(li, len(li), target_sum)\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(target_sum=10), target_sum=10)\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, count=3) -> bool:\n    \"\"\"Check if there are at least a specified number of occurrences of numbers in a list that sum up to a given target.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, count))\n\ndef g(target=10, count=3):\n    return ([1, 2, 3, 4, 5, 6], target, count)\n\nassert f(*g())\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if a given list is a palindrome\"\"\"\n    return numbers == numbers[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 205,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list of integers is sorted in non-decreasing order.\"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\ndef g():\n    return [1, 3, 5, 4, 6, 8, 10]\n\nassert f(g()) == False\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], threshold=10) -> bool:\n    \"\"\"Check if all the numbers in the given list are greater than the threshold.\"\"\"\n    return all(num > threshold for num in nums)\n\ndef g(threshold=10):\n    return [15, 20, 25, 30]\n\nassert f(g())\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int = 10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the matrix that sum up to the target number.\"\"\"\n    seen = set()\n    for row in matrix:\n        for num in row:\n            if target - num in seen:\n                return True\n            seen.add(num)\n    return False\n\ndef g(target: int = 10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 111,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"Check if the target word is present in the list of words\"\"\"\n    return target_word in words\n\ndef g(target_word='python'):\n    return ['java', 'c++', 'python', 'javascript']\n\nassert f(g())\n",
        "idx_generation": 455,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target\"\"\"\n    for i in range(len(lst)-2):\n        for j in range(i+1, len(lst)-1):\n            for k in range(j+1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == target:\n                    return True\n    return False\ndef g():\n    return [2, 4, 6, 8, 10, 12, 14, 16], 30\nassert f(*g())\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value.\"\"\"\n    n = len(nums)\n    seen = set()\n    for i in range(n):\n        complement = target - nums[i]\n        if complement in seen:\n            return True\n        seen.add(nums[i])\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return string == string[::-1]\n\ndef g():\n    return \"madam\"\n\nassert f(g())\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exist two numbers in the list that add up to the target_sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=100):\n    return random.sample(range(1, 101), 10)\n\nassert f(g())\n",
        "idx_generation": 209,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target value.\n    Return True if such a pair exists, False otherwise.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 4, 5, 8, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char: str) -> bool:\n    \"\"\"Check if the given character is the first non-repeating character in the string.\"\"\"\n    char_count = {}\n    for c in s:\n        char_count[c] = char_count.get(c, 0) + 1\n    return char_count.get(char, 0) == 1\n\ndef g():\n    s = \"hello\"\n    char = \"h\"\n    return s, char\n\nassert f(*g())\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of all elements in the list is equal to the target value\"\"\"\n    return sum(lst) == target\ndef g(target=100):\n    return [25, 10, 35, 30]\nassert f(g())\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a list of numbers contains any negative numbers\"\"\"\n    return any(num < 0 for num in nums)\ndef g():\n    return [1, 2, -3, 4, 5]\nassert f(g())\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a subset of numbers in the list that sums up to the target number.\"\"\"\n    def backtrack(curr_sum, index):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or index >= len(nums):\n            return False\n        \n        if backtrack(curr_sum + nums[index], index + 1) or backtrack(curr_sum, index + 1):\n            return True\n        \n        return False\n    \n    return backtrack(0, 0)\n\ndef g(target=20):\n    return [3, 7, 5, 2, 1, 8, 4, 6]\n\nassert f(g())\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring: str = 'abc') -> bool:\n    \"\"\"Check if the given string contains the given substring\"\"\"\n    return s.find(substring) != -1\n\ndef g(substring: str = 'abc'):\n    return 'defabcdef'\n\nassert f(g())\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], k: int, target: int) -> bool:\n    \"\"\"Check if there exists a subarray of length k in lst whose sum is equal to the target.\"\"\"\n    for i in range(len(lst) - k + 1):\n        if sum(lst[i:i+k]) == target:\n            return True\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 3, 9)\n\nassert f(*g())\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    return [5, 10, 15, 25, 30]\nassert f(g())\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(words: List[str], n=4) -> bool:\n    \"\"\"Check if there exists a combination of n words from the list that form a palindrome.\"\"\"\n    for combination in itertools.combinations(words, n):\n        if any(word == word[::-1] for word in combination):\n            return True\n    return False\n\ndef g(n=4):\n    return ['racecar', 'python', 'madam', 'level', 'hello']\n\nassert f(g())\n",
        "idx_generation": 209,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subset of numbers in the list that can be combined using addition and subtraction to obtain the target number.\"\"\"\n    def backtrack(curr_sum, index):\n        if curr_sum == target:\n            return True\n        if index >= len(nums):\n            return False\n        \n        if backtrack(curr_sum + nums[index], index + 1) or backtrack(curr_sum - nums[index], index + 1):\n            return True\n        \n        return False\n    \n    return backtrack(0, 0)\n\ndef g(target=100):\n    return [20, 5, 10, 50, 30, 15]\n\nassert f(g())\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the sum of any two numbers in a list is equal to the product of the remaining numbers.\"\"\"\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if i != j:\n                product = 1\n                for k in range(len(nums)):\n                    if k != i and k != j:\n                        product *= nums[k]\n                if nums[i] + nums[j] == product:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring=\"python\") -> bool:\n    \"\"\"Check if the substring is present in the given string.\"\"\"\n    return substring in string\n\ndef g(substring=\"python\"):\n    return \"I love programming in python!\"\n\nassert f(g())\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, lst: List[int]=[1,2,3,4,5,6,7,8,9,10]) -> bool:\n    \"\"\"Given a number n, check if it is divisible by all the numbers in the list lst, and also divisible by at least one prime number\"\"\"\n    primes = [2, 3, 5, 7, 11, 13]\n    for num in lst:\n        if n % num != 0:\n            return False\n    for prime in primes:\n        if n % prime == 0:\n            return True\n    return False\n\ndef g(lst: List[int]=[1,2,3,4,5,6,7,8,9,10]):\n    n = 1\n    for num in lst:\n        n *= num\n    return n\n\nassert f(g())\n",
        "idx_generation": 143,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list whose sum is equal to the target sum\"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target_sum - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, target_sum-4]\n\nassert f(g())\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given array is a palindrome\"\"\"\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] != arr[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\ndef g():\n    return [1, 2, 3, 2, 1]\nassert f(g())\n",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is sorted in ascending order with no duplicates.\"\"\"\n    return nums == sorted(list(set(nums)))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 218,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_value=5) -> bool:\n    \"\"\"Check if there exists a subarray in the given list whose maximum value is equal to the target value.\n    Return True if such a subarray exists, False otherwise.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            subarray = arr[i:j+1]\n            if max(subarray) == target_value:\n                return True\n    return False\n\ndef g(target_value=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(string: str, substring: str) -> bool:\n    \"\"\"Check if the given substring is present in the given string.\"\"\"\n    return substring in string\n\ndef g(string=\"Hello, World!\", substring=\"World\"):\n    return string\n\nassert f(g(), \"World\") == True\n\n",
        "idx_generation": 479,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int = 20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to the target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] * numbers[j] == target:\n                return True\n    return False\n\ndef g(target: int = 20):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return numbers\n\nassert f(g()) == True\n",
        "idx_generation": 148,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Given a list of numbers, find a pair of numbers whose sum is equal to the target_sum.\"\"\"\n    return any((numbers[i] + numbers[j] == target_sum for i in range(len(numbers)) for j in range(i+1, len(numbers))))\n    \ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 192,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return string == string[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Find if there exists a combination of numbers that adds up to the target_sum\"\"\"\n    return any(sum(subset) == target_sum for r in range(1, len(numbers) + 1) for subset in itertools.combinations(numbers, r))\n\ndef g(target_sum=100):\n    return [10, 20, 30, 40]\n\nassert f(g())\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers that sum up to the target value.\n    Return True if such a pair exists, otherwise return False.\n    Sample Input:\n    [1, 5, 10, 15]\n    Sample Output:\n    True\n    Explanation:\n    The pair (5, 15) sums up to the target value 20.\"\"\"\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr=[1, 5, 10, 15]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 119,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"Check if the given substring is present in the string\"\"\"\n    return substr in string\ndef g(substr='python'):\n    return \"I love python programming\"\nassert f(g()) == True\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum: int = 100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to the target_sum\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] * numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum: int = 100):\n    numbers = [1, 2, 4, 5, 10, 20, 25, 50, 100]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 152,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=24) -> bool:\n    \"\"\"Given a list of numbers, find a pair of numbers whose product is greater than the target_sum.\"\"\"\n    return any((numbers[i] * numbers[j] > target_sum for i in range(len(numbers)) for j in range(i+1, len(numbers))))\n    \ndef g(target_sum=24):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 192,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given array is a palindrome.\"\"\"\n    return arr == arr[::-1]\ndef g():\n    return [1, 2, 3, 4, 3, 2, 1]\nassert f(g())\n",
        "idx_generation": 217,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the given target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g()) == True\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=24) -> bool:\n    \"\"\"Check if it is possible to find a combination of numbers that can be used with basic arithmetic operations (+, -, *, /) to obtain the target value.\"\"\"\n    if len(numbers) == 1:\n        return numbers[0] == target\n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if i != j:\n                new_numbers = [numbers[k] for k in range(len(numbers)) if k != i and k != j]\n                if f(new_numbers + [numbers[i] + numbers[j]], target):\n                    return True\n                if f(new_numbers + [numbers[i] - numbers[j]], target):\n                    return True\n                if f(new_numbers + [numbers[i] * numbers[j]], target):\n                    return True\n                if numbers[j] != 0 and f(new_numbers + [numbers[i] / numbers[j]], target):\n                    return True\n    return False\n\ndef g(target=24):\n    return [1, 2, 3, 4]\nassert f(g())\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='Python') -> bool:\n    \"\"\"Check if the substring is present in the given string\"\"\"\n    return substr in s\ndef g(s='Python is fun!', substr='Python'):\n    return s\nassert f(g())\n",
        "idx_generation": 495,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=[-69358, -69358, -69358, -69358, -69358, -69358, -69358], n=7) -> bool:\n    \"\"\"Find a list that when multiplied n times gives the target list\"\"\"\n    return li * n == target\ndef g(target=[-69358, -69358, -69358, -69358, -69358, -69358, -69358], n=7):\n    if n == 0:\n        return []\n    return target[:len(target) // n]\nassert f(g())\n",
        "idx_generation": 155,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=5) -> bool:\n    \"\"\"Check if the given list contains n consecutive numbers\"\"\"\n    for i in range(len(nums) - n + 1):\n        if nums[i:i+n] == list(range(nums[i], nums[i]+n)):\n            return True\n    return False\n\ndef g(n=5):\n    return list(range(1, n+1))\n\nassert f(g())\n",
        "idx_generation": 192,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 221,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target_sum\"\"\"\n    return any(numbers[i] + numbers[j] == target_sum for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n\ndef g(target_sum=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\nassert f(g())\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a subsequence of the list that sums up to the target number.\n    A subsequence is a sequence that can be derived from the original list by deleting some or no elements without changing the order of the remaining elements.\"\"\"\n    n = len(arr)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        dp[i][0] = True\n        for j in range(1, target + 1):\n            if arr[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j - arr[i - 1]] or dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g(arr=[2, 4, 6, 8], target=10):\n    return arr, target\n\nassert f(*g())\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=15):\n    return [10, 5, 3, 8, 2]  # Example input list\n\nassert f(g())\n",
        "idx_generation": 157,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target_sum=25) -> bool:\n    \"\"\"Find if there exists a combination of numbers that sums up to the target_sum\"\"\"\n    return any(sum(subset) == target_sum for r in range(1, len(numbers) + 1) for subset in itertools.combinations(numbers, r))\n    \ndef g(target_sum=25):\n    return [5, 10, 15, 20, 25]\n\nassert f(g())\n",
        "idx_generation": 193,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=20) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that adds up to the target sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=20):\n    return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target value.\n    Return True if such a pair exists, False otherwise.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target: int = 10):\n    return [2, 4, 5, 8, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(x: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists two distinct indices i and j in the list nums, such that nums[i] + nums[j] equals k.\"\"\"\n    seen = set()\n    for num in nums:\n        if k - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(k=5):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a given string is a palindrome of length n.\"\"\"\n    return s[:n//2] == s[-(n//2):][::-1]\ndef g(n=3):\n    return \"abcba\"\nassert f(g())\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], k: int = 3) -> List[int]:\n    \"\"\"Return the k largest numbers from the list\"\"\"\n    return sorted(numbers)[-k:]\n\ndef g(k: int = 3):\n    return [1, 5, 2, 8, 3, 9, 4, 7, 6]\n\nassert f(g(), k=4) == [6, 7, 8, 9]\n\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of integers is a palindrome\"\"\"\n    return nums == nums[::-1]\n\ndef g() -> List[int]:\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 125,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, lst=[9, 7, 5, 3, 1]) -> bool:\n    \"\"\"Check if the given number is in the list\"\"\"\n    return num in lst\ndef g(lst=[9, 7, 5, 3, 1]):\n    return 5\nassert f(g())\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a triple of distinct indices (i, j, k) such that nums[i] + nums[j] + nums[k] equals target.\"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        j = i + 1\n        k = n - 1\n        while j < k:\n            if nums[i] + nums[j] + nums[k] == target:\n                return True\n            elif nums[i] + nums[j] + nums[k] < target:\n                j += 1\n            else:\n                k -= 1\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int]):\n    return nums[::-1]\n\nassert f(g([1, 2, 3, 2, 1]))\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a list is strictly increasing\"\"\"\n    for i in range(len(nums)-1):\n        if nums[i] >= nums[i+1]:\n            return False\n    return True\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=15) -> bool:\n    \"\"\"Given a list of numbers, find a combination of numbers that sums up to the target value\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(len(numbers) + 1) for comb in combinations(numbers, r))\ndef g(target=15):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 127,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_num=7) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target_num in row:\n            return True\n    return False\ndef g(target_num=7):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set:\n            return True\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"Check if the given list of words forms a palindrome when concatenated.\"\"\"\n    concatenated = ''.join(words)\n    return concatenated == concatenated[::-1]\n\ndef g():\n    return ['race', 'car']\n    \nassert f(g())\n\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if the sum of all numbers in the list is divisible by k\"\"\"\n    return sum(nums) % k == 0\n\ndef g(k=5):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target number.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=2) -> bool:\n    \"\"\"Check if the sum of any k consecutive elements in the list is zero\"\"\"\n    for i in range(len(nums) - k + 1):\n        if sum(nums[i:i+k]) == 0:\n            return True\n    return False\n\ndef g(k=2):\n    return [1, -1, 2, -2, 3, -3, 4, -4]\n\nassert f(g())\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome\"\"\"\n    return lst == lst[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=100, num_elements=3) -> bool:\n    \"\"\"Check if there exists a combination of num_elements numbers from the given list that sum up to target_sum\"\"\"\n    num_combinations = 0\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target_sum:\n                    num_combinations += 1\n    return num_combinations > 0\n\ndef g(target_sum=100, num_elements=3):\n    return [10, 20, 30, 40, 50, 60]\n\nassert f(g())\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers and a target number, find if there exists a pair of numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target number.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            for k in range(j+1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == target:\n                    return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the sum of the first half of the list is equal to the sum of the second half\"\"\"\n    if len(nums) % 2 != 0:\n        return False\n    \n    mid = len(nums) // 2\n    first_half = sum(nums[:mid])\n    second_half = sum(nums[mid:])\n    \n    return first_half == second_half\n\ndef g():\n    return [1, 2, 3, 4, 5, 5, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a palindrome.\"\"\"\n    return str(n) == str(n)[::-1]\n\ndef g():\n    return 12321\n\nassert f(g())\n",
        "idx_generation": 233,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that adds up to the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g():\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "idx_generation": 248,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in a list that add up to the target\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\ndef g():\n    return ([4, 2, 7, 1, 5], 10)\nassert f(*g())\n",
        "idx_generation": 167,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there are three numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 210,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return numbers == numbers[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 234,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=25) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that adds up to the target_sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g(nums=[10, 15, 5, 7, 12]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_number=2) -> bool:\n    \"\"\"Check if the target_number is present in any of the rows or columns in the matrix\"\"\"\n    for row in matrix:\n        if target_number in row:\n            return True\n    for col in zip(*matrix):\n        if target_number in col:\n            return True\n    return False\n\ndef g(target_number=2):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9]\n\nassert f(g())\n",
        "idx_generation": 167,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find the sum of all even numbers in the given list\"\"\"\n    total = 0\n    for num in nums:\n        if num % 2 == 0:\n            total += num\n    return total\ndef g():\n    return [1, 2, 3, 4, 5, 6]\nassert f(g()) == 12\n",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a sublist of numbers that sums up to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)+1):\n            if sum(numbers[i:j]) == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\nassert f(g())\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Find if there exists a triplet of integers in the array whose sum is equal to 0\"\"\"\n    for i in range(len(arr)-2):\n        for j in range(i+1, len(arr)-1):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == 0:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, -3, 4, -1]\n\nassert f(g())\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that adds up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g()) == True\n\n",
        "idx_generation": 168,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains only even numbers\"\"\"\n    return all(num % 2 == 0 for num in nums)\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if a given string is a palindrome\"\"\"\n    return string == string[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target_sum value.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=100):\n    return [1, 2, 3, 4, 5, 95]\n\nassert f(g())\n",
        "idx_generation": 258,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_number=7) -> bool:\n    \"\"\"Check if the target_number is present in the matrix.\"\"\"\n    for row in matrix:\n        if target_number in row:\n            return True\n    return False\n\ndef g(target_number=7):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to obtain the target number by combining the numbers using addition or subtraction.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target or numbers[i] - numbers[j] == target:\n                return True\n    return False\n\ndef g():\n    return ([10, 20, 30, 40, 50], 70)\n\nassert f(*g())\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order\"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a Palindrome.\"\"\"\n    return numbers == numbers[::-1]\ndef g():\n    return [1, 2, 3, 2, 1]\nassert f(g())\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10, count=3) -> bool:\n    \"\"\"Check if there are 'count' numbers in the list 'nums' that add up to the 'target'\"\"\"\n    def helper(nums, target, count):\n        if target == 0 and count == 0:\n            return True\n        if target < 0 or count == 0 or len(nums) == 0:\n            return False\n        return helper(nums[1:], target-nums[0], count-1) or helper(nums[1:], target, count)\n    \n    return helper(nums, target, count)\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find if there exists a submatrix in the given matrix that adds up to the target value.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            for k in range(i, m):\n                for l in range(j, n):\n                    submatrix_sum = sum(matrix[x][y] for x in range(i, k+1) for y in range(j, l+1))\n                    if submatrix_sum == target:\n                        return True\n    return False\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == False\n",
        "idx_generation": 143,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subsequence in the list with a product equal to the target number.\"\"\"\n    def backtrack(index, curr_prod):\n        if curr_prod == target:\n            return True\n        if curr_prod > target or index >= len(nums):\n            return False\n        \n        for i in range(index, len(nums)):\n            if backtrack(i + 1, curr_prod * nums[i]):\n                return True\n        \n        return False\n    \n    return backtrack(0, 1)\n\ndef g(target=10):\n    return [2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the sum of all numbers in the list is divisible by 3 and contains at least one even number\"\"\"\n    return sum(nums) % 3 == 0 and any(num % 2 == 0 for num in nums)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n\n",
        "idx_generation": 215,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome\"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 249,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, nums=[1, 2, 3, 4]) -> bool:\n    \"\"\"Check if the number x is present in the given list nums\"\"\"\n    return x in nums\n\ndef g(nums=[1, 2, 3, 4]):\n    return nums[0]\n\nassert f(g())\n",
        "idx_generation": 260,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subarray in the list with a sum equal to the target number.\"\"\"\n    for i in range(len(nums)):\n        sum = 0\n        for j in range(i, len(nums)):\n            sum += nums[j]\n            if sum == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    \nassert f(g())\n",
        "idx_generation": 151,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers from the list whose product is equal to the target number.\"\"\"\n    return any((num1 * num2 == target for num1 in li for num2 in li))\ndef g(target=100):\n    return [10, 5, 20, 4, 25, 2]\nassert f(g())\n",
        "idx_generation": 177,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target=5):\n    return [1, 2, 3, 4]\n    \nassert f(g())\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string is a palindrome after removing n characters from it.\n    Return True if it is a palindrome, False otherwise.\"\"\"\n    def is_palindrome(s):\n        return s == s[::-1]\n    if is_palindrome(s):\n        return True\n    for i in range(len(s)):\n        new_s = s[:i] + s[i+1:]\n        if is_palindrome(new_s):\n            return True\n    return False\n\ndef g():\n    return \"racecar\"\n\nassert f(g()) == True\n",
        "idx_generation": 249,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence of the list that sums up to the target\"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    \n    return dp[target]\n\ndef g(target=9):\n    nums = [2, 4, 3, 5, 1, 6]\n    return nums\n\nassert f(g(), target=9)\n",
        "idx_generation": 262,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 157,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to the target value.\n    Return True if such a pair exists, False otherwise.\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] * arr[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [-2, 4, 6, -3, 0, 2, -1, 8]\n\nassert f(g()) == True\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a strictly decreasing sequence.\"\"\"\n    for i in range(1, len(nums)):\n        if nums[i] >= nums[i-1]:\n            return False\n    return True\n\ndef g():\n    return [7, 6, 5, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 250,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, numbers=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the given number is in the list of numbers\"\"\"\n    return n in numbers\n\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return numbers[0]\n\nassert f(g())\n",
        "idx_generation": 262,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [2, 4, 5, 10, 20, 25]\nassert f(g())\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order\"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 226,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_word='python') -> bool:\n    \"\"\"Check if the given string is a palindrome and contains the target_word.\"\"\"\n    return s == s[::-1] and target_word in s\ndef g(target_word='python'):\n    return target_word + target_word[::-1]\nassert f(g())\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, numbers: List[int] = [1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the given number is the sum of any two numbers in the list\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == n:\n                return True\n    return False\n\ndef g(numbers: List[int] = [1, 2, 3, 4, 5]):\n    return numbers[0] + numbers[1]\n\nassert f(g())\n",
        "idx_generation": 262,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=100, max_numbers=10) -> bool:\n    \"\"\"Find a combination of at most max_numbers numbers whose sum is equal to the target value.\"\"\"\n    for num in numbers:\n        assert num >= 0\n    for i in range(len(numbers)):\n        if numbers[i] == target:\n            return True\n    for n in range(2, max_numbers + 1):\n        for combination in itertools.combinations(numbers, n):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(numbers=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target=100, max_numbers=10):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose difference is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) == target:\n                return True\n    return False\n\ndef g(target=50):\n    return [10, 20, 30, 40, 60, 70]\nassert f(g())\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order\"\"\"\n    return nums == sorted(nums)\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 226,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return string == string[::-1]\n\ndef g():\n    for perm in permutations(\"racecar\"):\n        palindrome = \"\".join(perm)\n        if f(palindrome):\n            return palindrome\n\nassert f(g())\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the given target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Check if the given list of integers contains a pair of numbers that sum up to the target value.\"\"\"\n    nums = set()\n    for num in lst:\n        complement = target - num\n        if complement in nums:\n            return True\n        nums.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), 12)\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list such that their product equals the target\"\"\"\n    n = len(nums)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=50) -> bool:\n    \"\"\"Check if the sum of any four distinct elements in the list is equal to target_sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                for l in range(k+1, len(arr)):\n                    if arr[i] + arr[j] + arr[k] + arr[l] == target_sum:\n                        return True\n    return False\n\ndef g(target_sum=50):\n    return [i for i in range(-25, 26)]\n\nassert f(g())\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Given a list of numbers, find if there exists a subset of numbers in the list that adds up to the target number.\n    Return True if a subset is found, False otherwise.\"\"\"\n    def subset_sum(numbers, target, partial=[]):\n        s = sum(partial)\n        if s == target:\n            return True\n        if s > target:\n            return False\n        for i in range(len(numbers)):\n            n = numbers[i]\n            remaining = numbers[i + 1:]\n            if subset_sum(remaining, target, partial + [n]):\n                return True\n        return False\n    \n    return subset_sum(numbers, target)\n\ndef g(target=100):\n    return [10, 5, 15, 20, 30, 25]\n\nassert f(g()) == True\n",
        "idx_generation": 271,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers from the list that adds up to the target number.\"\"\"\n    assert len(numbers) >= 2, 'Not enough numbers in the list.'\n    assert all(isinstance(num, int) for num in numbers), 'List must contain only integers.'\n    seen = set()\n    for num in numbers:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 166,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_product=24) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to the target_product\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target_product:\n                return True\n    return False\n\ndef g(target_product=24):\n    return [1, 2, 3, 4, 6]\n\nassert f(g())\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10, k=2) -> bool:\n    \"\"\"Find k numbers in the list whose sum is equal to target\"\"\"\n    return len(nums) >= k and any(sum(nums[i:j+1]) == target for i in range(len(nums)) for j in range(i+k-1, len(nums)))\ndef g(target=10, k=2):\n    return [i for i in range(1, target+1)]\nassert f(g())\n\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int = 2) -> bool:\n    \"\"\"Check if a string is a palindrome and repeats n times consecutively.\"\"\"\n    return s == s[::-1] and s * n == s + s\ndef g(n: int = 2):\n    return \"level\" * n\nassert f(g())\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target_sum\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=100):\n    return [25, 75, 10, 90, 40, 60]\n\nassert f(g())\n",
        "idx_generation": 271,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers, return True if there exists a subarray whose sum is equal to the target number, False otherwise.\"\"\"\n    prefix_sum = 0\n    sum_set = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in sum_set:\n            return True\n        sum_set.add(prefix_sum)\n    return False\n\ndef g(target=0):\n    return [1, -2, 3, 4, -5, 6, -7]\n\nassert f(g()) == True\n",
        "idx_generation": 166,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if the given target number exists in the matrix\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    i = 0\n    j = cols - 1\n    while i < rows and j >= 0:\n        if matrix[i][j] == target:\n            return True\n        elif matrix[i][j] > target:\n            j -= 1\n        else:\n            i += 1\n    return False\n\ndef g(matrix: List[List[int]] = [[1, 4, 7, 11, 15],\n                                [2, 5, 8, 12, 19],\n                                [3, 6, 9, 16, 22],\n                                [10, 13, 14, 17, 24],\n                                [18, 21, 23, 26, 30]], target: int = 9):\n    return (matrix, target)\n\nassert f(*g())\n",
        "idx_generation": 183,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers that sums up to a target value.\nSample Input:\n[10, 20, 30, 40, 50]\nSample Output:\n(50, 50)\"\"\"\n    return any((x + y == target for x in nums for y in nums))\ndef g(nums=[10, 20, 30, 40, 50], target=100):\n    return next(((x, y) for x in nums for y in nums if x + y == target))\nassert f(g())\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return string == string[::-1]\n\ndef g(string: str):\n    return string\n\nassert f(g(\"racecar\"))\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a subset of numbers in the list that add up to the target sum.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target_sum]\n\ndef g(target_sum=10):\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target\"\"\"\n    n = len(nums)\n    prefix_sum = 0\n    prefix_sum_set = set()\n\n    for i in range(n):\n        prefix_sum += nums[i]\n        \n        if prefix_sum == target:\n            return True\n        \n        if prefix_sum - target in prefix_sum_set:\n            return True\n        \n        prefix_sum_set.add(prefix_sum)\n        \n    return False\n\ndef g(target=0):\n    return [-1, 2, 3, -4, 2, -1, 7]\n\nassert f(g())\n",
        "idx_generation": 167,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10, n=3) -> bool:\n    \"\"\"Check if there exists a combination of n elements in the list that sums up to the target number.\"\"\"\n    def backtrack(start, count, curr_sum):\n        if count == n and curr_sum == target:\n            return True\n        if count > n or curr_sum > target or start >= len(arr):\n            return False\n        \n        for i in range(start, len(arr)):\n            if backtrack(i + 1, count + 1, curr_sum + arr[i]):\n                return True\n        \n        return False\n    \n    return backtrack(0, 0, 0)\n\ndef g(target=10, n=3):\n    return [2, 3, 4, 5, 6, 7, 8]\n\nassert f(g())\n\n",
        "idx_generation": 185,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15, k=3) -> bool:\n    \"\"\"Find k numbers in the list whose sum is equal to target\"\"\"\n    return len(nums) >= k and any(sum(nums[i:j+1]) == target for i in range(len(nums)) for j in range(i+k-1, len(nums)))\ndef g(target=15, k=3):\n    return [i for i in range(1, target+1)]\nassert f(g())\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return 'racecar'\n\nassert f(g()) == True\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a given list of numbers is sorted in non-decreasing order\"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n\n",
        "idx_generation": 275,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a given list of numbers is a palindrome\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 170,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(lst: List[int], target_count=3) -> bool:\n    \"\"\"Check if a randomly shuffled list has a count of elements equal to the target count\"\"\"\n    random.shuffle(lst)\n    return lst.count(target_count) > 0\n\ndef g(target_count=3):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of distinct numbers in the list whose sum is equal to the target_sum.\"\"\"\n    num_set = set(arr)\n    for num in arr:\n        complement = target_sum - num\n        if complement in num_set and num != complement:\n            return True\n    return False\n\ndef g(target_sum=100):\n    return [i for i in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the given number is a palindrome in base m\"\"\"\n    num = str(n)\n    return num == num[::-1]\n\ndef g(m=10):\n    return int(\"12321\", m)\n\nassert f(g())\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(arr: List[int], target_sum: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that adds up to the target sum\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), 15)\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrices: List[np.ndarray], target: np.ndarray) -> bool:\n    \"\"\"Check if the sum of any two matrices in the list equals the target matrix.\"\"\"\n    for i in range(len(matrices)):\n        for j in range(i+1, len(matrices)):\n            if np.array_equal(matrices[i] + matrices[j], target):\n                return True\n    return False\n\ndef g():\n    matrix1 = np.array([[1, 2], [3, 4]])\n    matrix2 = np.array([[5, 6], [7, 8]])\n    matrix3 = np.array([[9, 10], [11, 12]])\n    target_matrix = np.array([[6, 8], [10, 12]])\n    return ([matrix1, matrix2, matrix3], target_matrix)\n\nassert f(*g())\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to the target number.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] * lst[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_length=4) -> bool:\n    \"\"\"Find if there exists a contiguous subarray of length target_length whose sum is equal to 0\"\"\"\n    prefix_sum = 0\n    prefix_sum_set = set()\n    \n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == 0 or prefix_sum in prefix_sum_set:\n            return True\n        prefix_sum_set.add(prefix_sum)\n        \n    return False\n\ndef g(nums=[4, 2, -3, 1, 6]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a subsequence of numbers that sums up to the target value\"\"\"\n    n = len(numbers)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j < numbers[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - numbers[i - 1]]\n    return dp[n][target]\n\ndef g(target=20):\n    return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n\nassert f(g())\n",
        "idx_generation": 279,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(), target=10)\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=10, num_elements=3) -> bool:\n    \"\"\"Check if there exists a subset of the given list that sums up to the target value.\n    Return True if such a subset exists, False otherwise.\"\"\"\n    return any(sum(subset) == target for subset in itertools.combinations(lst, num_elements))\n\ndef g(num_elements=3):\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return lst\n\nassert f(g()) == True\n",
        "idx_generation": 190,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int], target_sum=50, target_length=3) -> bool:\n    \"\"\"Check if a list of integers has a length equal to or greater than the target length\n    and if the sum of the integers is less than or equal to the target sum.\"\"\"\n    return len(nums) >= target_length and sum(nums) <= target_sum\n\ndef g(target_sum=50, target_length=3):\n    return [10, 20, 15]\n\nassert f(g())\n",
        "idx_generation": 233,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g()) == True\n\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum: int = 10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum: int = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, find two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> List[int]:\n    \"\"\"Find all numbers in the given list that are greater than the target value.\"\"\"\n    return [num for num in nums if num > target]\n\ndef g(target=50):\n    return [30, 20, 40, 60, 10]\n\nassert f(g()) == [60]\n",
        "idx_generation": 192,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\ndef f(d: Dict[str, int], key='apple') -> bool:\n    \"\"\"Check if the given key is present in the dictionary and its corresponding value is even\"\"\"\n    return key in d and d[key] % 2 == 0\n\ndef g(key='apple'):\n    return {'apple': 4, 'banana': 3, 'cherry': 6, 'durian': 9}\n\nassert f(g())\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome.\"\"\"\n    n = len(nums)\n    for i in range(n // 2):\n        if nums[i] != nums[n - i - 1]:\n            return False\n    return True\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n\n",
        "idx_generation": 274,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], a=5, b=3) -> bool:\n    \"\"\"Check if any two numbers in the list add up to a specific sum.\"\"\"\n    target_sum = a + b\n    for i in range(len(x)):\n        for j in range(i + 1, len(x)):\n            if x[i] + x[j] == target_sum:\n                return True\n    return False\n\ndef g(a=5, b=3):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 281,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the given list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(li: List[int], target: int = 10) -> bool:\n    \"\"\"Check if the sum of any three numbers in the list is equal to the target\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            for k in range(j+1, len(li)):\n                if li[i] + li[j] + li[k] == target:\n                    return True\n    return False\n\ndef g(li: List[int], target: int = 10):\n    return li\n\nassert f(g([-2, 5, 3, 8, 4, 1, -1, 7]))\n",
        "idx_generation": 194,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all the elements in the list are positive integers\"\"\"\n    return all(num > 0 for num in nums)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of integers is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 277,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that add up to the target sum.\"\"\"\n    for r in range(1, len(numbers) + 1):\n        for combination in itertools.combinations(numbers, r):\n            if sum(combination) == target_sum:\n                return True\n    return False\n\ndef g(target_sum=100):\n    return [25, 10, 30, 5, 15, 20]\n\nassert f(g())\n",
        "idx_generation": 286,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Check if it is possible to split the given array into two parts such that the sum of elements in each part is equal\"\"\"\n    total_sum = sum(arr)\n    if total_sum % 2 != 0:\n        return False\n    target_sum = total_sum // 2\n    dp = [False] * (target_sum + 1)\n    dp[0] = True\n    for num in arr:\n        for i in range(target_sum, num-1, -1):\n            if dp[i-num]:\n                dp[i] = True\n    return dp[target_sum]\n\ndef g(n: int = 5, arr: List[int] = [1, 5, 11, 5]):\n    return (n, arr)\n\nassert f(*g())\n",
        "idx_generation": 183,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"Check if the target value exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=8):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target_sum=15) -> bool:\n    \"\"\"Find if the sum of the digits of a number is equal to the target_sum\"\"\"\n    return sum([int(digit) for digit in str(n)]) == target_sum\n\ndef g(target_sum=15):\n    n = 0\n    while True:\n        if sum([int(digit) for digit in str(n)]) == target_sum:\n            return n\n        n += 1\n\nassert f(g())\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome sequence.\"\"\"\n    return all(nums[i] == nums[-i-1] for i in range(len(nums) // 2))\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 277,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target sum.\"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        complements.add(target_sum - num)\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=17) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[4, 2, 9, 6, 13]):\n    return nums\nassert f(g())\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if the given list of numbers contains a subsequence that multiplies up to a certain target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i]*numbers[j] == target:\n                return True\n    return False\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[10, 20, 30, 40, 50, 60], target=100) -> bool:\n    \"\"\"Find a pair of numbers from the given list that adds up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(nums=[10, 20, 30, 40, 50, 60], target=100):\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return (nums[i], nums[j])\n    return ()\nassert f(g())\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return x == x[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list 'numbers' that adds up to the 'target_sum'.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that sum up to the target value.\n    Return True if such a triplet exists, False otherwise.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [25, 10, 15, 30, 50, 40]\n\nassert f(g()) == True\n\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if the given list of numbers contains a subsequence that has a product greater than the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            product = 1\n            for k in range(i, j):\n                product *= numbers[k]\n            if product > target:\n                return True\n    return False\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose sum is equal to the target\"\"\"\n    n = len(nums)\n\n    def subsetSum(curr_sum, i):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or i >= n:\n            return False\n        \n        if subsetSum(curr_sum + nums[i], i + 1) or subsetSum(curr_sum, i + 1):\n            return True\n        \n        return False\n    \n    return subsetSum(0, 0)\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 262,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome, which is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\"\"\"\n    return string == string[::-1]\n\ndef g():\n    return \"level\"\n\nassert f(g())\n",
        "idx_generation": 285,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], threshold=10) -> bool:\n    \"\"\"Check if the sum of all elements in the array is greater than a threshold value.\"\"\"\n    return sum(arr) > threshold\n\ndef g(arr=[1, 3, 5, 7, 9]):\n    return arr\n\nassert f(g(), threshold=20)\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(arr=g(), target=16)\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the given list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 6)\n\nassert f(*g())\n",
        "idx_generation": 198,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers, find three numbers that sum up to a target value.\n    Return True if a triplet is found, False otherwise.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(nums=[-1, 0, 1, 2, -1, -4], target=0):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return string == string[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 100) -> bool:\n    \"\"\"Check if there exists a subset of numbers that adds up to the target value.\"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([25, 50, 75, 100]))\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g(), target=10)\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a palindrome.\"\"\"\n    num_str = str(n)\n    return num_str == num_str[::-1]\n\ndef g():\n    return 12321\n\nassert f(g())\n\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], k: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to k\"\"\"\n    for i in range(len(lst)-1):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == k:\n                return True\n    return False\ndef g():\n    return [2, 4, 6, 8, 10, 12, 14, 16], 20\nassert f(*g())\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(numbers: List[int], target=12) -> bool:\n    \"\"\"Check if any combination of the given numbers adds up to the target value.\"\"\"\n    for r in range(1, len(numbers) + 1):\n        for combination in combinations(numbers, r):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(target=12):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if all numbers in the list are greater than the target\"\"\"\n    return all(num > target for num in nums)\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=20):\n    return [10, 5, 8, 12, 3, 7]\n\nassert f(g())\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k: int) -> bool:\n    \"\"\"Check if a given string can be rearranged into a palindrome by changing at most k characters.\"\"\"\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    odd_count = 0\n    for count in char_count.values():\n        if count % 2 != 0:\n            odd_count += 1\n    \n    return odd_count <= k\n\ndef g():\n    return \"aabbbcc\", 2\n\nassert f(*g()) == True\n",
        "idx_generation": 294,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subset of nums that sums up to the target.\"\"\"\n    def subsetSum(nums, target):\n        dp = [False] * (target + 1)\n        dp[0] = True\n        for num in nums:\n            for i in range(target, num - 1, -1):\n                dp[i] = dp[i] or dp[i - num]\n        return dp[target]\n    return subsetSum(nums, target)\n\ndef g():\n    return [2, 4, 6, 8, 10, 12, 14, 16], 30\n\nassert f(*g())\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target value exists in the given matrix as a sum of any two numbers in the same row.\"\"\"\n    for row in matrix:\n        for i in range(len(row)):\n            for j in range(i + 1, len(row)):\n                if row[i] + row[j] == target:\n                    return True\n    return False\n\ndef g():\n    return ([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10)\n\nassert f(*g())\n",
        "idx_generation": 198,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target value\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g(lst=[10, 20, 30, 40, 50]):\n    return lst\n\nassert f(g())\n",
        "idx_generation": 202,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(lst: List[int], target_sum=100, n=2) -> bool:\n    \"\"\"Find n numbers in the list that add up to the target_sum\"\"\"\n    from itertools import combinations\n    comb = [c for c in combinations(lst, n) if sum(c) == target_sum]\n    return len(comb) > 0\n\ndef g(target_sum=100, n=2):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of integers is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum: int = 10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target_sum.\"\"\"\n    seen = set()\n    for num in nums:\n        if target_sum - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target_sum: int = 10):\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    return any(target - arr[i] in arr[i+1:] for i in range(len(arr)-1))\ndef g():\n    return [1, 3, 5, 7, 9]\nassert f(arr=g(), target=12)\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\n\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiplies to the target value\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] * lst[j] == target:\n                return True\n    return False\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst\n\nassert f(g())\n",
        "idx_generation": 202,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_num=0) -> bool:\n    \"\"\"Check if there are three numbers in the list 'nums' that add up to the 'target_num'.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target_num:\n                    return True\n    return False\n\ndef g(target_num=0):\n    nums = [-1, 2, 3, -4, -5, 6, 7, -8, 9]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of integers is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 309,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list is a palindrome\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there exists three numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            for k in range(j + 1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == target:\n                    return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9-3]\n\nassert f(g())\n",
        "idx_generation": 202,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_num=0) -> bool:\n    \"\"\"Check if there are four numbers in the list 'nums' that add up to the 'target_num'.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                for l in range(k+1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target_num:\n                        return True\n    return False\n\ndef g(target_num=0):\n    nums = [-1, 2, 3, -4, -5, 6, 7, -8, 9]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return string == string[::-1]\n\ndef g():\n    string = \"radar\"\n    return string\n\nassert f(g())\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target_sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g():\n    return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n\nassert f(g())\n",
        "idx_generation": 311,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=1000) -> bool:\n    \"\"\"Find two numbers in the list that sum up to a target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=1000):\n    arr = [200, 500, 300, 400, 800]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=5, num_occurrences=3) -> bool:\n    \"\"\"Check if the target value occurs at least a specified number of times in the given list\"\"\"\n    return arr.count(target) >= num_occurrences\n\ndef g(target=5, num_occurrences=3):\n    arr = [target] * num_occurrences\n    return arr\n\nassert f(g())\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_num=0) -> bool:\n    \"\"\"Check if there is a subarray in the list 'nums' such that all elements in the subarray add up to the 'target_num'.\"\"\"\n    for i in range(len(nums)):\n        sum = 0\n        for j in range(i, len(nums)):\n            sum += nums[j]\n            if sum == target_num:\n                return True\n    return False\n\ndef g(target_num=0):\n    nums = [-1, 2, 3, -4, -5, 6, 7, -8, 9]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Find if there exists two numbers in the list that add up to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0, num_occurrences=0) -> bool:\n    \"\"\"Check if the target value occurs exactly a specified number of times in the given list\"\"\"\n    return arr.count(target) == num_occurrences\n\ndef g(target=0, num_occurrences=0):\n    arr = [target] * num_occurrences\n    return arr\n\nassert f(g())\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target_sum\"\"\"\n    return any((nums[i] + nums[j] == target_sum) for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    reversed_string = string[::-1]\n    return string == reversed_string\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 306,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums to the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [2, 3, 4, 6]\n\nassert f(g())\n",
        "idx_generation": 315,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find if there are two numbers in the array that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 209,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=7, num_occurrences=1) -> bool:\n    \"\"\"Check if the target value occurs at most a specified number of times in the given list\"\"\"\n    return arr.count(target) <= num_occurrences\n\ndef g(target=7, num_occurrences=1):\n    arr = [target] * num_occurrences\n    return arr\n\nassert f(g())\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers that sums up to a target value.\n    Sample Input:\n    [10, 20, 30, 40, 50]\n    Sample Output:\n    True\"\"\"\n    return any((x + y == target for x in nums for y in nums))\n    \ndef g(nums=[10, 20, 30, 40, 50], target=50):\n    return next(((x, y) for x in nums for y in nums if x + y == target))\n\nassert f(g())\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a combination of numbers from the list that sum up to the target value.\"\"\"\n    for i in range(1, len(numbers) + 1):\n        for combination in itertools.combinations(numbers, i):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that add up to the target.\"\"\"\n    for i, num1 in enumerate(lst):\n        for num2 in lst[i+1:]:\n            if num1 + num2 == target:\n                return True\n    return False\ndef g(target=20):\n    return [5, 10, 15, 25, 30]\nassert f(g())\n",
        "idx_generation": 205,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target: int):\n    return [1, 2, 3, 4, 5]\n\nassert f(g(8), 8)\n",
        "idx_generation": 321,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a palindrome\"\"\"\n    return str(n) == str(n)[::-1]\n\ndef g() -> int:\n    return 12321\n\nassert f(g())\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int], target_sum: int = 10) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sums up to the target_sum.\"\"\"\n    for r in range(len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            if sum(subset) == target_sum:\n                return True\n    return False\n\ndef g(target_sum: int = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there is a subarray in the list that sums up to the target value.\"\"\"\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if prefix_sum[j] - prefix_sum[i] == target:\n                return True\n    return False\n\ndef g(target: int = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 215,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target / num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=24):\n    return [2, 3, 4, 6, 8]\n\nassert f(g(), target=24)\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, max_nums=5, options=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is the target value, and all numbers are divisible by 10.\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) == target and all(num % 10 == 0 for num in nums)\n\ndef g(target=100, max_nums=5, options=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    from itertools import combinations\n    for n in range(max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target and all(num % 10 == 0 for num in c):\n                return list(c)\n\nassert f(g())\n",
        "idx_generation": 325,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int = 3) -> bool:\n    \"\"\"Check if the given string s is a palindrome after removing n characters.\"\"\"\n    for i in range(len(s)):\n        new_s = s[:i] + s[i+1:]\n        if new_s == new_s[::-1]:\n            return True\n    return False\n\ndef g(n: int = 3):\n    return \"level\"\n\nassert f(g())\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to obtain the target sum by adding or subtracting numbers from the given list.\"\"\"\n    def can_reach_target(num, curr_sum, remaining):\n        if curr_sum == target:\n            return True\n        if not remaining:\n            return False\n        return can_reach_target(num + 1, curr_sum + remaining[0], remaining[1:]) or can_reach_target(num + 1, curr_sum - remaining[0], remaining[1:])\n    return can_reach_target(0, 0, numbers)\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 325,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[1, 5, 8, 12, 15]):\n    return nums\nassert f(g())\n",
        "idx_generation": 217,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target number\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 5, 8, 3, 2, 6, 4]\n\nassert f(g())\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains consecutive numbers in increasing order\"\"\"\n    for i in range(len(nums)-1):\n        if nums[i+1] - nums[i] != 1:\n            return False\n    return True\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target_sum.\"\"\"\n    return any((numbers[i] + numbers[j] == target_sum for i in range(len(numbers)) for j in range(i+1, len(numbers))))\n\ndef g(target_sum=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, target_sum-90]\n\nassert f(g())\n",
        "idx_generation": 331,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list that sums up to the target value.\"\"\"\n    start = 0\n    curr_sum = 0\n    \n    for i in range(len(nums)):\n        curr_sum += nums[i]\n        \n        while curr_sum > target:\n            curr_sum -= nums[start]\n            start += 1\n        \n        if curr_sum == target:\n            return True\n        \n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 218,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list whose sum is equal to a given target\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in non-decreasing order\"\"\"\n    return nums == sorted(nums)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the array is a palindrome.\"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=17) -> bool:\n    \"\"\"Check if there exists two numbers in the list whose sum equals the target_sum\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=17):\n    return [5, 7, 2, 10, 3]\nassert f(g()) == True\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target value.\"\"\"\n    seen = set()\n    \n    for num in nums:\n        if num != 0 and target % num == 0 and target // num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 218,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int = 10) -> bool:\n    \"\"\"Find a pair of numbers in a list that adds up to the target value.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers: List[int]):\n    return numbers\n\nassert f(g([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target.\"\"\"\n    for i, num1 in enumerate(nums):\n        for j, num2 in enumerate(nums[i+1:]):\n            for k, num3 in enumerate(nums[i+j+2:]):\n                if num1 + num2 + num3 == target:\n                    return True\n    return False\n\ndef g(nums=[10, 20, 30, 40, 50, 60]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 327,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the string is a pangram.\"\"\"\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    return set(s.lower()) >= alphabet\n\ndef g():\n    return \"The quick brown fox jumps over the lazy dog\"\n\nassert f(g())\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is strictly increasing.\"\"\"\n    return all(nums[i] < nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, find two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the given list that add up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g():\n    return ([1, 2, 3, 4, 5], 7)\nassert f(*g())",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list such that their sum is equal to the target_sum.\"\"\"\n    return any((nums[i] + nums[j] == target_sum) for i in range(len(nums)) for j in range(i+1, len(nums)))\n    \ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 330,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return string == string[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=20) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that adds up to the target sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=20):\n    return [2, 4, 6, 8, 10, 12]\n\nassert f(g())\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Given a list of numbers, find if there exists a pair of numbers that adds up to the target.\n    Return True if a pair exists, False otherwise.\"\"\"\n    seen = set()\n    for num in numbers:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g()) == True\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nimport math\nfrom typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a combination of numbers from the list that multiply to the target value.\"\"\"\n    for i in range(1, len(numbers) + 1):\n        for combination in itertools.combinations(numbers, i):\n            if math.prod(combination) == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums: List[int]):\n    return nums, 15\nassert f(*g([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return 'racecar'\n\nassert f(g())\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], threshold=5) -> bool:\n    \"\"\"Check if the average of the list is above a given threshold.\"\"\"\n    avg = sum(lst) / len(lst)\n    return avg > threshold\ndef g(threshold=5):\n    return [6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Check if there exists a submatrix in the given matrix where the sum of all its elements is equal to the target_sum\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(j, cols):\n                    submatrix_sum = sum(matrix[x][y] for x in range(i, k+1) for y in range(j, l+1))\n                    if submatrix_sum == target_sum:\n                        return True\n    \n    return False\n\ndef g(target_sum=100):\n    return [[10, 20, 30, 40],\n            [50, 60, 70, 80],\n            [90, 100, 110, 120],\n            [130, 140, 150, 160]]\n\nassert f(g())\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the given list that adds up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 213,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find a subset of numbers from the list that adds up to the target sum\"\"\"\n    return any((sum(subset) == target_sum for subset in itertools.combinations(nums, 3)))\ndef g(nums=[10, 20, 30, 40, 50]):\n    return nums\nassert f(g())\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there exists two numbers in the given list that sum up to the target number.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g():\n    return [2, 5, 8, 4, 9], 12\n\nassert f(*g()) == True\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if there exist two numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, -1, -2, -3, -4]\n\nassert f(g()) == True\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=4) -> bool:\n    \"\"\"Check if there exists a subset of numbers in the list that can be multiplied together to obtain the target number.\"\"\"\n    def backtrack(curr_product, index):\n        if curr_product == target:\n            return True\n        if index >= len(nums):\n            return False\n        \n        if backtrack(curr_product * nums[index], index + 1) or backtrack(curr_product, index + 1):\n            return True\n        \n        return False\n    \n    return backtrack(1, 0)\n\ndef g(target=4):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target_sum.\"\"\"\n    return any((nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums))))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return lst == lst[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 332,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is in ascending order.\"\"\"\n    return all(numbers[i] <= numbers[i+1] for i in range(len(numbers)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target number.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 9)\n\nassert f(*g())\n",
        "idx_generation": 231,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target: int = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 215,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find three numbers in the list that sums up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a palindrome\"\"\"\n    return str(n) == str(n)[::-1]\n\ndef g() -> int:\n    return 12321\n\nassert f(g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a combination of two numbers in the list that sums up to the target_sum\"\"\"\n    return any(a + b == target_sum for a in numbers for b in numbers if a != b)\n\ndef g(target_sum=100):\n    random.seed(0)\n    return random.sample(range(1, 101), 10)\n\nassert f(g())\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is a perfect square.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if sqrt(numbers[i] + numbers[j]).is_integer():\n                return True\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 7)\n\nassert f(*g())\n",
        "idx_generation": 231,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a sublist in the list whose elements sum up to the target.\"\"\"\n    return any(sum(lst[i:j]) == target for i in range(len(lst)) for j in range(i+1, len(lst)+1))\n\ndef g():\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 226,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the sum of all elements in the list nums is divisible by 10.\"\"\"\n    return sum(nums) % 10 == 0\n\ndef g():\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return string == string[::-1]\n\ndef g(string=\"racecar\"):\n    return string\n\nassert f(g())\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target_sum.\"\"\"\n    return any((numbers[i] + numbers[j] == target_sum for i in range(len(numbers)) for j in range(i+1, len(numbers))))\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of elements in the given list such that their sum is equal to the target\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\nassert f(g())\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is present in the list\"\"\"\n    return target in lst\n\ndef g():\n    return [2, 4, 6, 8, 10, 12, 14, 16], 10\nassert f(*g())\n\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums to the target.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target=10):\n    return [2, 3, 5, 7, 11, 13]\n\nassert f(g())\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return 'racecar'\n\nassert f(g())\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target_sum: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target sum.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target_sum:\n                return True\n    return False\n\ndef g(num_list=[1, 2, 3, 4, 5], target_sum=9):\n    return num_list, target_sum\n\nassert f(*g())\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target.\"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(target=100):\n    return [20, 40, 60, 80, 100]\n\nassert f(g())\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(target: int, arr: List[int]) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr) + 1):\n            if sum(arr[i:j]) == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(target=10, arr=g())\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum=20, min_length=2) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sums up to the target_sum and has a minimum length of min_length\"\"\"\n    for r in range(min_length, len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            if sum(subset) == target_sum:\n                return True\n    return False\ndef g(target_sum=20, min_length=2):\n    return [1, 5, 7, 9, 15, 12, 4, 6, 10]\nassert f(g())\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that sums to the target.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target) for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\n\ndef g(target=20):\n    return [2, 3, 5, 8, 10, 15, 20]\n\nassert f(g())\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list where the sum of the first two numbers is equal to the third number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] == nums[k]:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the array that multiply to the target value\"\"\"\n    return any(arr[i] * arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr)))\n\ndef g(target=20):\n    return [2, 4, 5, 10]\n\nassert f(g())\n",
        "idx_generation": 233,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target_sum.\n    Return True if such a pair exists, False otherwise.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=50):\n    return [10, 20, 30, 40]\n\nassert f(g()) == True\n\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=50):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int = 0) -> bool:\n    \"\"\"Check if the list contains two numbers whose sum is equal to the target value.\"\"\"\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target: int = 0):\n    return [1, 2, 3, 4, 5, 6, target - 3 + 2]\n\nassert f(g())\n\n",
        "idx_generation": 233,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if the target number is present in the list\"\"\"\n    return target in nums\n\ndef g(target=10):\n    return [1, 5, 3, 10, 7, 2, 8]\n\nassert f(g())\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> int:\n    \"\"\"Find the product of all the odd numbers in the given list\"\"\"\n    product = 1\n    for num in numbers:\n        if num % 2 != 0:\n            product *= num\n    return product\n\ndef g():\n    return [3, 7, 2, 9, 4, 6]\n\nassert f(g()) == 189\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    \"\"\"Check if the given list of words is a palindrome list.\"\"\"\n    reversed_words = [word[::-1] for word in words]\n    return reversed_words == words\n\ndef g():\n    return ['level', 'deed', 'radar']\n\nassert f(g()) == True\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 354,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Given a list of integers, find if there exists a subset of the list whose sum is equal to the target_sum.\n    Return True if such a subset exists, False otherwise.\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]\n\ndef g(target_sum=10):\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 233,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False\n\ndef g(li: List[int], target: int):\n    return li, target\n\nassert f(*g([1, 2, 3, 4, 5], 8))\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a list is sorted in non-decreasing order\"\"\"\n    return nums == sorted(nums)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 362,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the list is a palindrome.\"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that adds up to the target\"\"\"\n    n = len(nums)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[-1, 2, 4, -3, 5, 0]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 356,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    visited = set()\n    for num in arr:\n        complement = target - num\n        if complement in visited:\n            return True\n        visited.add(num)\n    return False\n\ndef g():\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 234,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g(), target=12)\n",
        "idx_generation": 240,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"Check if there exists a sublist in the array whose sum is equal to k\"\"\"\n    prefix_sum = set()\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        if curr_sum == k or curr_sum - k in prefix_sum:\n            return True\n        prefix_sum.add(curr_sum)\n    return False\n\ndef g():\n    return [1, 4, -2, 3, -5, 2]\n\nassert f(g(), 3)\n\n",
        "idx_generation": 364,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find if there exists a triplet of numbers in the list that adds up to the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "idx_generation": 362,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Find a pair of numbers in the list whose sum is equal to the target sum\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_product: int = 24) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list whose product is equal to the target product\"\"\"\n    num_set = set()\n    for num in numbers:\n        if target_product % num == 0 and target_product // num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(target_product: int = 24):\n    return [2, 4, 6, 8, 10, 12]\n\nassert f(g(), target_product=16)\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 369,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome\"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a list of numbers is strictly increasing.\"\"\"\n    for i in range(1, len(nums)):\n        if nums[i] <= nums[i-1]:\n            return False\n    return True\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 367,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9], 10\n\nassert f(*g())\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the given list that multiply to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 6)\n\nassert f(*g())\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> int:\n    \"\"\"Find the sum of all the even numbers in the given list\"\"\"\n    evens = []\n    for num in numbers:\n        if num % 2 == 0:\n            evens.append(num)\n    return sum(evens)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 30\n",
        "idx_generation": 369,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return string == string[::-1]\n\ndef g(string: str):\n    return string\n\nassert f(g(\"radar\"))\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subsequence in the list that sums up to the target value.\"\"\"\n    def subset_sum(nums, target, curr_sum, index):\n        if curr_sum == target:\n            return True\n        if index >= len(nums):\n            return False\n        include = subset_sum(nums, target, curr_sum + nums[index], index + 1)\n        exclude = subset_sum(nums, target, curr_sum, index + 1)\n        return include or exclude\n    \n    return subset_sum(nums, target, 0, 0)\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60]\n\nassert f(g())\n",
        "idx_generation": 369,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exist three numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9], 18\n\nassert f(*g())\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g() -> Tuple[List[int], int]:\n    return ([1, 2, 3, 4, 5], 7)\n\nassert f(*g())\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list such that their sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [i for i in range(target+1)]\n\nassert f(g())\n",
        "idx_generation": 370,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a given string is a palindrome and has a length greater than or equal to n\"\"\"\n    return s == s[::-1] and len(s) >= n\n\ndef g(n=5):\n    return 'radar' + 'o'*(n-5)\n\nassert f(g())\n",
        "idx_generation": 362,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is in ascending order\"\"\"\n    return numbers == sorted(numbers)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exist four numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                for l in range(k+1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9], 20\n\nassert f(*g())\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array that add up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9]\n\nassert f(g())\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=20) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list whose sum is equal to the target_sum\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\n\ndef g(target_sum=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub='abc') -> bool:\n    \"\"\"Check if the given string is a palindrome and contains the sub string\"\"\"\n    return s == s[::-1] and sub in s\n\ndef g(sub='abc'):\n    return 'abcdeedcba'\n\nassert f(g())\n\n",
        "idx_generation": 364,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> int:\n    \"\"\"Find the maximum sum of any two numbers in the given list\"\"\"\n    sorted_nums = sorted(numbers, reverse=True)\n    return sorted_nums[0] + sorted_nums[1]\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 19\n\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 0) -> int:\n    \"\"\"Count the number of pairs of numbers in the list that sum up to the target.\n    Return the count of pairs.\"\"\"\n    count = 0\n    num_dict = {}\n    for num in nums:\n        complement = target - num\n        if complement in num_dict:\n            count += 1\n        num_dict[num] = True\n    return count\n\ndef g():\n    return [2, 4, 6, 8]\n\nassert f(g(), target=10) == 2\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_row=1, target_col=1, target_value=5) -> bool:\n    \"\"\"Check if the given matrix contains the target value at the target row and target column\"\"\"\n    return matrix[target_row][target_col] == target_value\n\ndef g(target_row=1, target_col=1, target_value=5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 249,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, n=3) -> bool:\n    \"\"\"Find if there exists a combination of 'n' numbers from the list that adds up to 'target'.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, n))\n\ndef g(target=10, n=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, palindrome: bool) -> bool:\n    \"\"\"Check if the given word is a palindrome (if palindrome is True) or not (if palindrome is False).\"\"\"\n    if palindrome:\n        return word == word[::-1]\n    else:\n        return word != word[::-1]\n\ndef g(palindrome=True):\n    return \"level\"\n\nassert f(g(), palindrome=True)\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in ascending order\"\"\"\n    sorted_numbers = sorted(numbers)\n    return numbers == sorted_numbers\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g()) == True\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> List[int]:\n    \"\"\"Find all pairs of numbers in the list that sum up to the target number.\"\"\"\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                pairs.append((nums[i], nums[j]))\n    return pairs\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g()) == [(1, 9), (2, 8), (3, 7), (4, 6)]\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 250,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int = 5) -> bool:\n    \"\"\"Check if a string is a palindrome and its length is divisible by n.\"\"\"\n    return s == s[::-1] and len(s) % n == 0\ndef g(n: int = 5):\n    return \"level\" * n\nassert f(g())\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(sizes: List[int], min_size: int = 10) -> bool:\n    \"\"\"Check if a list of sizes contains at least one size greater than or equal to min_size.\"\"\"\n    return any(size >= min_size for size in sizes)\n\ndef g(min_size: int = 10):\n    return [5, 8, 12, 15, 20, 25]\n\nassert f(g())\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\ndef g():\n    return [10, 20, 30, 40, 50]\nassert f(g())\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_num=10) -> bool:\n    \"\"\"Find if there exists a number in the list that is greater than the target_num\"\"\"\n    for num in nums:\n        if num > target_num:\n            return True\n    return False\n\ndef g(nums=[7, 5, 12, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target_sum: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list 'nums' that adds up to the target sum.\"\"\"\n    complements = set()\n    for num in nums:\n        complement = target_sum - num\n        if complement in complements:\n            return True\n        complements.add(num)\n    return False\n\ndef g(target_sum: int):\n    return [1, 2, 3, 4, 5]\n\nassert f(g(9), 9)\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if n is a palindrome number\"\"\"\n    return str(n) == str(n)[::-1]\n\ndef g():\n    return 121\n\nassert f(g())\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to achieve the target number by combining the numbers in the list using addition and subtraction.\"\"\"\n    total_sum = sum(numbers)\n    return target == total_sum or target - total_sum in numbers\n\ndef g():\n    return [20, 30, 50]\n\nassert f(g())\n\n\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 250,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to the target value.\"\"\"\n    return any(nums[i] * nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=100):\n    return [2, 5, 10, 20, 25, 50]\nassert f(g())\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g()) == True\n\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g(nums=[1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 370,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if any combination of numbers in a list can sum up to the target\"\"\"\n    n = len(numbers)\n    for i in range(1, 2 ** n):\n        combination = [numbers[j] for j in range(n) if (i >> j) & 1]\n        if sum(combination) == target:\n            return True\n    return False\ndef g(target=100):\n    numbers = [10, 20, 30, 40, 50]\n    return numbers\nassert f(g())\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Given a list of numbers, find if it is possible to form the target number by adding or subtracting the numbers in the list.\n    Return True if it is possible, False otherwise.\"\"\"\n    def helper(numbers, target, index):\n        if index == len(numbers):\n            return target == 0\n        return helper(numbers, target + numbers[index], index + 1) or helper(numbers, target - numbers[index], index + 1)\n    \n    return helper(numbers, target, 0)\n\ndef g():\n    return [10, 20, 30, 40]\n\nassert f(g()) == True\n\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target number.\"\"\"\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        curr_sum = nums[left] + nums[right]\n        if curr_sum == target:\n            return True\n        elif curr_sum < target:\n            left += 1\n        else:\n            right -= 1\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g()) == True\n\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome\"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Check if the given number n is present in the given list of lists lst\"\"\"\n    return any(n in sublist for sublist in lst)\n\ndef g(lst=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return lst[0][0]\n\nassert f(g())\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a combination of integers in the list that sums up to the target number.\"\"\"\n    return any(sum(combination) == target for combination in x)\n\ndef g(target=100):\n    return [[1, 2, 3, 4, 5], [10, 20, 30, 40, 50], [25, 50, 75], [100]]\n\nassert f(g())\n",
        "idx_generation": 254,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    nums = [2, 4, 5, 10, 8, 3]\n    return nums\n\nassert f(g(), target=20)\n",
        "idx_generation": 262,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target\"\"\"\n    complements = set()\n    \n    for num in nums:\n        complement = target - num\n        if complement in complements:\n            return True\n        complements.add(num)\n    \n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=7):\n    return nums, target\n\nassert f(*g())\n\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return x == x[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list 'nums' that adds up to the target sum.\"\"\"\n    nums.sort()\n    left, right = 0, len(nums)-1\n    while left < right:\n        current_sum = nums[left] + nums[right]\n        if current_sum == target:\n            return True\n        elif current_sum < target:\n            left += 1\n        else:\n            right -= 1\n    return False\n\ndef g(target=10):\n    return [4, 2, 6, 1, 8]\n\nassert f(g(), 10)\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=0) -> bool:\n    \"\"\"Check if the sum of any two distinct elements in the list is equal to target_sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=0):\n    return [i for i in range(-10, 11)]\n\nassert f(g())\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from 'arr' that multiply to 'target'\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    arr = [2, 3, 4, 5, 6, 7, 8, 9]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 264,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the sum of all even numbers in the list is greater than the sum of all odd numbers\"\"\"\n    even_sum = sum(num for num in numbers if num % 2 == 0)\n    odd_sum = sum(num for num in numbers if num % 2 != 0)\n    return even_sum > odd_sum\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that sums up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target: int = 10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 407,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=0) -> bool:\n    \"\"\"Check if the product of any two distinct elements in the list is equal to target_sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=0):\n    return [i for i in range(-10, 11)]\n\nassert f(g())\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the given target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[2, 4, 5, 8, 10, 12, 15, 16]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 265,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> List[int]:\n    \"\"\"Return a list of all the even numbers in the given list\"\"\"\n    evens = [num for num in numbers if num % 2 == 0]\n    return evens\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [2, 4, 6, 8, 10]\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome\"\"\"\n    return numbers == numbers[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g()) == True\n\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum: int = 20) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target_sum:\n                    return True\n    return False\n\ndef g(target_sum: int = 20):\n    return [4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport itertools\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that sum up to the target\"\"\"\n    for r in range(1, len(nums) + 1):\n        for combination in itertools.combinations(nums, r):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(target=10):\n    nums = [random.randint(1, 10) for _ in range(5)]\n    return nums\n\nassert f(g(), target=10)\n",
        "idx_generation": 258,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of elements in the list that add up to the target value\"\"\"\n    for i, num1 in enumerate(arr):\n        for j, num2 in enumerate(arr[i+1:]):\n            if num1 + num2 == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if any three integers in the given list nums can be summed up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return [nums[0], nums[1], target - (nums[0] + nums[1])]\n\ntarget = 100\nassert f(g(), target=target)\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the given list that sum up to the target number.\n    Return True if such numbers exist, False otherwise.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target: int):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(15), target=15) == True\n\n",
        "idx_generation": 422,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers from the given list that adds up to the target value.\"\"\"\n    from itertools import combinations\n    for i in range(1, len(numbers) + 1):\n        for c in combinations(numbers, i):\n            if sum(c) == target:\n                return True\n    return False\n\ndef g():\n    return [10, 20, 30, 40, 50]\n    \nassert f(g())\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list whose product is equal to the target\"\"\"\n    return any((numbers[i] * numbers[j] == target for i in range(len(numbers)) for j in range(i+1, len(numbers))))\ndef g(target=10):\n    return [2, 5, 3, 4]\nassert f(g())\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in non-decreasing order\"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the list is a palindrome.\"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the given number is present in the list\"\"\"\n    return n in arr\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return 3\n\nassert f(g())\n",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=50) -> bool:\n    \"\"\"Find a pair of numbers from the given list that adds up to the target value.\"\"\"\n    from itertools import combinations\n    for c in combinations(numbers, 2):\n        if sum(c) == target:\n            return True\n    return False\n\ndef g():\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_product=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target_product\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] * numbers[j] == target_product:\n                return True\n    return False\n\ndef g(target_product=50):\n    return [5, 10, 7, 3, 4]\n\nassert f(g())\n",
        "idx_generation": 271,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains both positive and negative numbers\"\"\"\n    return any(x < 0 for x in nums) and any(x > 0 for x in nums)\n\ndef g():\n    return [-1, -2, -3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list 'nums' is a palindrome.\"\"\"\n    reversed_nums = nums[::-1]\n    return nums == reversed_nums\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10) -> List[int]:\n    \"\"\"Find a list of numbers that adds up to the target\"\"\"\n    return [target//2, target//2]\n\nassert f(g())\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target: int) -> List[int]:\n    \"\"\"Find two numbers whose sum is the target value.\"\"\"\n    return [1, target-1]\n\nassert f(g(target=10), target=10)\n",
        "idx_generation": 260,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix, target=15, n=3) -> bool:\n    \"\"\"Find n numbers in the matrix that multiply to the target\"\"\"\n    from itertools import combinations\n    m, n = len(matrix), len(matrix[0])\n    comb = [c for c in combinations([matrix[i][j] for i in range(m) for j in range(n)], n) if\n            (lambda x: x[0] * x[1] * x[2])(c) == target]\n    return len(comb) > 0\n\ndef g(target=15, n=3):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, nums: List[int], target_sum: int) -> bool:\n    \"\"\"Given a list of integers and a target sum, find if there exist n numbers in the list such that their sum is equal to the target sum.\n    Sample Input:\n    n = 3\n    nums = [1, 2, 4, 5, 6, 8]\n    target_sum = 10\n    Sample Output:\n    True\"\"\"\n    def backtrack(curr_sum, index, count):\n        if curr_sum == target_sum and count == n:\n            return True\n        if curr_sum > target_sum or count > n or index >= len(nums):\n            return False\n        return backtrack(curr_sum + nums[index], index + 1, count + 1) or backtrack(curr_sum, index + 1, count)\n\n    return backtrack(0, 0, 0)\n\ndef g(nums=[1, 2, 4, 5, 6, 8], target_sum=10):\n    return (3, nums, target_sum)\n\nassert f(*g())\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return numbers == numbers[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that sums up to the target\"\"\"\n    n = len(nums)\n    dp = [[False] * (target+1) for _ in range(n+1)]\n    dp[0][0] = True\n\n    for i in range(1, n+1):\n        for j in range(target+1):\n            dp[i][j] = dp[i-1][j]\n            if j - nums[i-1] >= 0:\n                dp[i][j] = dp[i][j] or dp[i-1][j-nums[i-1]]\n\n    return dp[n][target]\n\ndef g(target=100) -> List[int]:\n    \"\"\"Find a list of numbers that adds up to the target\"\"\"\n    return list(range(1, target+1))\n\nassert f(g())\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is present in the list of numbers.\"\"\"\n    return target in nums\n\ndef g():\n    nums = [random.randint(1, 10) for _ in range(5)]\n    target = random.randint(1, 10)\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 261,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a combination of numbers that multiplies to the target value\"\"\"\n    n = len(numbers)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][1] = True\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j < numbers[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - numbers[i - 1]]\n    return dp[n][target]\n\ndef g(target=100):\n    return [2, 4, 5, 10, 20, 25, 50]\n\nassert f(g())\n",
        "idx_generation": 279,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum: int, n=4) -> bool:\n    \"\"\"Given a list of integers and a target sum, find if there exist n numbers in the list such that their sum is equal to the target sum.\n    Sample Input:\n    nums = [1, 2, 4, 5, 6, 8]\n    target_sum = 18\n    n = 4\n    Sample Output:\n    True\"\"\"\n    def backtrack(curr_sum, index, count):\n        if curr_sum == target_sum and count == n:\n            return True\n        if curr_sum > target_sum or count > n or index >= len(nums):\n            return False\n        return backtrack(curr_sum + nums[index], index + 1, count + 1) or backtrack(curr_sum, index + 1, count)\n\n    return backtrack(0, 0, 0)\n\ndef g(nums=[1, 2, 4, 5, 6, 8], target_sum=18):\n    return (nums, target_sum)\n\nassert f(*g())\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return lst == lst[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum: int = 10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum: int = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there are two numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=43) -> bool:\n    \"\"\"Check if two numbers in the list add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=43):\n    return [1, 9, 16, 25, 34]\n\nassert f(g())\n",
        "idx_generation": 281,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g():\n    return [1, 4, 7, 3, 9, 2]\n\nassert f(g())\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the list of numbers is a palindrome.\"\"\"\n    return numbers == numbers[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum: int = 10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target sum.\"\"\"\n    numbers.sort()\n    left = 0\n    right = len(numbers) - 1\n    while left < right:\n        current_sum = numbers[left] + numbers[right]\n        if current_sum == target_sum:\n            return True\n        elif current_sum < target_sum:\n            left += 1\n        else:\n            right -= 1\n    return False\n\ndef g(target_sum: int = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of the list elements is equal to the target number\"\"\"\n    return sum(li) == target\n\ndef g(target=100):\n    return [10, 20, 30, 40]\n\nassert f(g())\n",
        "idx_generation": 282,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Given a list of numbers, check if there exists a pair of numbers whose sum is equal to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    string = string.lower().replace(\" \", \"\")\n    return string == string[::-1]\n\ndef g():\n    return \"Able was I saw Elba\"\n\nassert f(g())\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a subset of the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, target_sum):\n        if target_sum == 0:\n            return True\n        if not nums or target_sum < 0:\n            return False\n        return subset_sum(nums[1:], target_sum - nums[0]) or subset_sum(nums[1:], target_sum)\n    return subset_sum(nums, target_sum)\n\ndef g(target_sum=100):\n    nums = [random.randint(1, 50) for _ in range(10)]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 455,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target.\"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nimport random\n\ndef f(s: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list that sum up to the target\"\"\"\n    return any((x + y == target for x in s for y in s if x != y))\n    \ndef g():\n    return random.sample(range(1, 10), 5)\n\nassert f(g(), 10)\n",
        "idx_generation": 282,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of integers contains both even and odd numbers.\"\"\"\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)\n\ndef g():\n    return random.sample(range(1, 10), 5)\n\nassert f(g())\n",
        "idx_generation": 425,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a given string is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum: int = 10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target sum.\"\"\"\n    seen = set()\n    for num in nums:\n        if target_sum - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target_sum: int = 10):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 457,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a Toeplitz matrix\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    for i in range(rows - 1):\n        for j in range(cols - 1):\n            if matrix[i][j] != matrix[i + 1][j + 1]:\n                return False\n\n    return True\n\ndef g():\n    return [[1, 2, 3],\n            [4, 1, 2],\n            [7, 4, 1]]\n\nassert f(g())\n",
        "idx_generation": 265,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\nassert f(g())\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Given a list of integers, find two numbers that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=50):\n    return [10, 20, 30, 40]\nassert f(g())\n",
        "idx_generation": 425,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if the target string is present in the given string and it is a palindrome.\"\"\"\n    return target == target[::-1] and target in s\n\ndef g():\n    s = \"racecar\"\n    return s\n\nassert f(g(), target=\"racecar\")\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target sum\"\"\"\n    seen = set()\n    for num in nums:\n        if target_sum - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there is a row in the matrix that contains all zeros.\"\"\"\n    for row in matrix:\n        if all(num == target for num in row):\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [0, 0, 0]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 265,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return ([2, 4, 6, 8], 16)\n\nassert f(*g())\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a subset of size k in the given list such that the sum of its elements is divisible by k\"\"\"\n    subsets = []\n    for i in range(1, len(nums)+1):\n        temp = [[]]\n        for j in range(i, len(nums)+1):\n            temp += [x + [j] for x in temp]\n        subsets += temp\n\n    for subset in subsets:\n        if len(subset) == k and sum(nums[i-1] for i in subset) % k == 0:\n            return True\n    return False\n\ndef g(k=4):\n    return [1, 2, 3, 4, 5, 6, 7, 8]\n\nassert f(g())\n",
        "idx_generation": 429,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, lst: List[str], n: int) -> bool:\n    \"\"\"Check if the given string is a palindrome and if the number 'n' is present in the list.\"\"\"\n    return s == s[::-1] and n in lst\ndef g(lst: List[str], n: int):\n    return \"madam\", lst, n\nassert f(*g([\"hello\", \"world\"], 5)) == False\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum: int = 10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum: int = 10):\n    return [2, 4, 6, 8]\n\nassert f(g()) == True\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target sum.\"\"\"\n    seen = set()\n    for num in arr:\n        if target_sum - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(prices: List[float], target_price: float = 100.0) -> bool:\n    \"\"\"Check if there are two prices in the list that add up to the target price\"\"\"\n    price_set = set()\n    for price in prices:\n        if target_price - price in price_set:\n            return True\n        price_set.add(price)\n    return False\n\ndef g(target_price: float = 100.0):\n    return [20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0]\n\nassert f(g(), target_price=120.0)\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sums up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[2, 4, 6, 8, 10]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 434,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g() -> str:\n    return \"racecar\"\n\nassert f(g()) == True\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there are three numbers in the list whose sum is equal to the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target_sum:\n                    return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the given list whose sum is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            subarray = arr[i:j]\n            if sum(subarray) == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, 3, -5, 7, 9, -11, 13, 15]\n\nassert f(g()) == True\n\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers that multiply to the target\"\"\"\n    return any((nums[i] * nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\n\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 290,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=2) -> bool:\n    \"\"\"Check if the kth largest number in the list is divisible by 3\"\"\"\n    nums.sort(reverse=True)\n    return nums[k-1] % 3 == 0\n\ndef g(k=2):\n    return [1, 5, 2, 8, 3, 9, 4, 7, 6, 10]\n\nassert f(g())\n\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a list of numbers is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum: int = 20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target_sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum: int = 20):\n    nums = [5, 10, 15, 20, 25, 30, 35, 40, 45]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(lst: List[int], target_sum: int = 10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target_sum\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if sum(lst[i:j]) == target_sum:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists two numbers in the list such that their sum is equal to the target.\"\"\"\n    return any(target - x in nums for x in nums)\n\ndef g(target=20):\n    return [4, 5, 7, 10, 12, 14, 16]\n\nassert f(g()) == True\n\n",
        "idx_generation": 449,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_len=0) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == s[::-1]\ndef g(target_len=0):\n    return 'racecar'\nassert f(g())\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 30) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target: int = 30):\n    nums = [3, 5, 10, 15, 20, 25, 30, 35, 40]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"Find the sum of the elements in the matrix that are divisible by 3.\"\"\"\n    total_sum = 0\n    for row in matrix:\n        for element in row:\n            if element % 3 == 0:\n                total_sum += element\n    return total_sum\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == 18\n\n",
        "idx_generation": 274,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target_sum: int = 10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is greater than the target_sum\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if sum(lst[i:j]) > target_sum:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 294,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"Given a list of integers, return the sum of all the even numbers in the list.\"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 30\n\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Tuple\n\ndef f(text: str, word: str) -> bool:\n    \"\"\"Check if the word appears in the text in a palindrome form.\"\"\"\n    return word in text and word == word[::-1]\n\ndef g(text: str, word: str):\n    return text, word\n\nassert f(*g(\"racecar is a palindrome\", \"racecar\"))\n",
        "idx_generation": 412,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Find three numbers from the list that add up to the target sum\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target_sum:\n                    return True\n    return False\n\ndef g():\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if any row or column in the matrix adds up to the target\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return target in row_sums or target in col_sums\n\ndef g(target=15):\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g())\n",
        "idx_generation": 281,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target_sum: int = 10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is less than the target_sum\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if sum(lst[i:j]) < target_sum:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 294,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target sum.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=20):\n    return [10, 5, 8, 12, 3, 7]\n\nassert f(g())\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Given a list of numbers, find a pair that sums up to the target number.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    return [10, 5, 8, 12, 15, 3, 7, 9]\n\nassert f(g())\n",
        "idx_generation": 282,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target_sum: int = 10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to or greater than the target_sum\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if sum(lst[i:j]) >= target_sum:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 294,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=2, target=10) -> bool:\n    \"\"\"Find k distinct numbers in the list whose sum is equal to the target value.\"\"\"\n    def backtrack(curr_sum, start, count):\n        if curr_sum == target and count == k:\n            return True\n        if curr_sum > target or count > k:\n            return False\n        for i in range(start, len(nums)):\n            if backtrack(curr_sum + nums[i], i + 1, count + 1):\n                return True\n        return False\n    \n    return backtrack(0, 0, 0)\n\ndef g(k=2, target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a subset of numbers in the list that adds up to the target sum.\"\"\"\n    for r in range(1, len(arr)+1):\n        for subset in itertools.combinations(arr, r):\n            if sum(subset) == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 3, 5, 7, 10]\n\nassert f(g())\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target_sum: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target sum.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i + 1, len(num_list)):\n            if num_list[i] + num_list[j] == target_sum:\n                return True\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 9)\n\nassert f(*g())\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if there exists a sublist in the matrix whose sum is equal to the target\"\"\"\n    for row in matrix:\n        for i in range(len(row)):\n            for j in range(i+1, len(row)+1):\n                if sum(row[i:j]) == target:\n                    return True\n    return False\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g(), 15)\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(s: str, target='puzzle') -> bool:\n    \"\"\"Check if the given string is an anagram of the target string.\nSample Input:\n`'lpeuz'`\nSample Output:\n`False`\"\"\"\n    return sorted(s) == sorted(target)\n\ndef g(target='puzzle'):\n    return target[::-1]\n\nassert f(g())\n\n",
        "idx_generation": 419,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(numbers: List[int]) -> int:\n    \"\"\"Find the maximum sum of any two numbers in the given list\"\"\"\n    sorted_nums = sorted(numbers, reverse=True)\n    return sorted_nums[0] + sorted_nums[1]\n\ndef g():\n    return [4, 8, 2, 1, 5, 9, 3, 7, 6]\n\nassert f(g()) == 17\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers from the list whose sum is equal to the target number.\"\"\"\n    return any((num1 + num2 + num3 == target for num1 in nums for num2 in nums for num3 in nums))\ndef g(target=100):\n    return [25, 50, 75, 100]\nassert f(g())\n",
        "idx_generation": 294,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a sublist in the array whose sum is greater than or equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) >= target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), 10)\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains only positive even numbers\"\"\"\n    return all(num % 2 == 0 and num > 0 for num in nums)\ndef g():\n    return [2, 4, 6, 8, 10]\nassert f(g()) == True\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if there exists a substring of length k in the given string that is a palindrome.\"\"\"\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    for i in range(len(s) - k + 1):\n        if is_palindrome(s[i:i+k]):\n            return True\n    return False\n\ndef g(k=3):\n    return \"abcdedcba\"\n\nassert f(g())\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exist three numbers in the list whose sum is equal to the target sum\"\"\"\n    if len(nums) < 3:\n        return False\n    nums.sort()\n    for i in range(len(nums)-2):\n        left = i + 1\n        right = len(nums) - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target_sum:\n                return True\n            elif current_sum < target_sum:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list equals the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), target=15)\n",
        "idx_generation": 294,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g(), 14)\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Check if the given list contains n consecutive numbers\"\"\"\n    for i in range(len(nums) - n + 1):\n        if nums[i:i+n] == list(range(nums[i], nums[i]+n)):\n            return True\n    return False\ndef g(n=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g()) == True\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Given a string s, check if it is a palindrome and if removing exactly one character from s will \n    result in a palindrome.\"\"\"\n    def is_palindrome(string):\n        return string == string[::-1]\n    \n    if is_palindrome(s):\n        return True\n    \n    for i in range(len(s)):\n        modified_s = s[:i] + s[i+1:]\n        if is_palindrome(modified_s):\n            return True\n    \n    return False\n\ndef g(s: str):\n    return s\n\nassert f(g(\"racecar\"))\n",
        "idx_generation": 425,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum: int, count=2) -> bool:\n    \"\"\"Check if there exist 'count' numbers in the list that sum up to the 'target_sum'.\"\"\"\n    def helper(numbers, target_sum, count):\n        if target_sum == 0 and count == 0:\n            return True\n        if target_sum != 0 and count == 0:\n            return False\n        if count < 0 or len(numbers) == 0:\n            return False\n        return helper(numbers[1:], target_sum - numbers[0], count - 1) or helper(numbers[1:], target_sum, count)\n\n    return helper(numbers, target_sum, count)\n\ndef g():\n    return ([2, 3, 5, 7, 11, 13, 17, 19], 30, 3)\n\nassert f(*g())\n\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Find if there exists a pair of distinct elements in the list that sum up to the target sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 295,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target sum\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(), target_sum=10)\n",
        "idx_generation": 309,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"Find the sum of all prime numbers in the given list\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return sum(num for num in nums if is_prime(num))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 17\n\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(n: int, lst: List[str]) -> bool:\n    \"\"\"Check if the given list of strings contains a string that is a palindrome.\"\"\"\n    for word in lst:\n        if word == word[::-1]:\n            return True\n    return False\n\ndef g():\n    return (3, [\"hello\", \"world\", \"racecar\", \"python\"])\n\nassert f(*g())\n",
        "idx_generation": 425,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the sum of all numbers in the list lst is equal to n\"\"\"\n    return sum(lst) == n\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst\n\nassert f(15, g())\n\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nimport random\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subset of numbers from the given list whose sum is equal to the target value.\"\"\"\n    for n in range(1, len(numbers) + 1):\n        for combination in itertools.combinations(numbers, n):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g():\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 9\n\nassert f(*g())\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"Find the minimum positive difference between any two numbers in the given list\"\"\"\n    sorted_nums = sorted(nums)\n    min_diff = float('inf')\n    for i in range(len(sorted_nums) - 1):\n        diff = sorted_nums[i + 1] - sorted_nums[i]\n        if diff < min_diff and diff > 0:\n            min_diff = diff\n    return min_diff\n\ndef g():\n    return [1, 5, 3, 8, 2, 7, 9, 6, 4, 10]\n\nassert f(g()) == 1\n\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string is a palindrome of length greater than or equal to n.\"\"\"\n    return s == s[::-1] and len(s) >= n\n\ndef g(n=3):\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the given list that sums up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 12)\n\nassert f(*g())\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a sublist in the array whose sum is equal to the target\"\"\"\n    return any(sum(sublist) == target for sublist in nums)\n\ndef g():\n    return [[1, 2, 3, 4], [5, 6, 7], [8, 9]]\n\nassert f(g(), 10)\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if sum(arr[i:j]) == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 311,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two distinct numbers in the list that add up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(), target=10)\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Check if a given string is a palindrome after concatenating it n times.\"\"\"\n    return s == s[::-1] and s * n == (s * n)[::-1]\n\ndef g(n=10):\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 433,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target sum.\"\"\"\n    seen = set()\n    for num in numbers:\n        complement = target_sum - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target_sum=10):\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> int:\n    \"\"\"Given a list of numbers and a target number, find the number of distinct pairs of numbers from the list that add up to the target.\"\"\"\n    count = 0\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                count += 1\n    return count\n\ndef g(target: int) -> List[int]:\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(9), 10) == 4\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_product=24) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiplies to the target product.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] * numbers[j] == target_product:\n                return True\n    return False\n\ndef g(target_product=24):\n    return [2, 3, 4, 6]\n\nassert f(g())\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[str], target: str) -> bool:\n    \"\"\"Check if the target string is a palindrome and it is present in any of the strings in the given list.\"\"\"\n    return any(target == target[::-1] and target in s for s in lst)\n\ndef g(target: str) -> List[str]:\n    return [\"level\", \"racecar\", \"python\", \"madam\"]\n\nassert f(g(\"madam\"), \"madam\")\n",
        "idx_generation": 434,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> List[int]:\n    \"\"\"Given a list of numbers and a target number, find the two numbers from the list that add up to the target.\"\"\"\n    num_set = set(numbers)\n    for num in numbers:\n        complement = target - num\n        if complement in num_set:\n            return [num, complement]\n    return []\n\ndef g(target: int) -> List[int]:\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(9), 10) == [1, 9]\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of numbers and a target value, return True if there is a pair of numbers in the list whose product is equal to the target value. Return False otherwise.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Given a string, check if it is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g()) == True\n\n\n",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Given a list of integers and a target number, find three numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(lst: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a number in the list that is divisible by the target.\"\"\"\n    for num in lst:\n        if num % target == 0:\n            return True\n    return False\n\ndef g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]], target_row_sum=10) -> bool:\n    \"\"\"Check if there exists a row in the matrix whose sum is equal to the target row sum.\n    Return True if such a row exists, False otherwise.\"\"\"\n    for row in matrix:\n        if sum(row) == target_row_sum:\n            return True\n    return False\n\ndef g(target_row_sum=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == False\n\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 321,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int = 3) -> bool:\n    \"\"\"Check if the given string contains a substring of length n that is a palindrome\"\"\"\n    for i in range(len(s)-n+1):\n        substring = s[i:i+n]\n        if substring == substring[::-1]:\n            return True\n    return False\n\ndef g(n: int = 3):\n    s = \"racecar\"\n    return s\n\nassert f(g()) == True\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exist two elements in the list whose sum is equal to the target.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15\n\nassert f(*g())\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that add up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, 5, 8, 3, 2, 6, 4, -1]\n\nassert f(g())\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return 'racecar'\n\nassert f(g())\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Given a matrix of integers, find a pair of numbers from different rows that sum up to the target.\nSample Input:\n`[[1, 2, 3], [4, 5, 6], [7, 8, 9]]`\nSample Output:\n`(4, 6)`\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(rows):\n                for y in range(cols):\n                    if (matrix[i][j] + matrix[x][y]) == target and i != x:\n                        return True\n    return False\n\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [target - 6, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there are two distinct elements in the list that sum up to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return lst\nassert f(g()) == True\n\n",
        "idx_generation": 323,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"Check if a number is a palindrome. A palindrome is a number that reads the same backward as forward.\"\"\"\n    return str(num) == str(num)[::-1]\n\ndef g():\n    return 12321\n\nassert f(g())\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target.\"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target\"\"\"\n    return any(target / num in numbers for num in numbers)\n\ndef g(target=10):\n    return [2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, length=5) -> bool:\n    \"\"\"Check if the given string contains at least one substring of length 5, which is a palindrome.\"\"\"\n    for i in range(len(string)-length+1):\n        sub_string = string[i:i+length]\n        if sub_string == sub_string[::-1]:\n            return True\n    return False\n\ndef g(length=5):\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the matrix that adds up to the target sum.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            for k in range(i, m):\n                for l in range(n):\n                    if i == k and j == l:\n                        continue\n                    if matrix[i][j] + matrix[k][l] == target_sum:\n                        return True\n    return False\n\ndef g():\n    return [[10, 20, 30], [40, 50, 60], [70, 80, 90]]\n\nassert f(g())\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list such that their product equals the target\"\"\"\n    nums.sort()\n    left, right = 0, len(nums) - 1\n    while left < right:\n        curr_product = nums[left] * nums[right]\n        if curr_product == target:\n            return True\n        elif curr_product < target:\n            left += 1\n        else:\n            right -= 1\n    return False\n\ndef g(target=0):\n    return [-2, -1, 0, 3, 5, 9] * 2\n\nassert f(g())\n",
        "idx_generation": 325,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return arr == arr[::-1]\ndef g():\n    return [1, 2, 3, 2, 1]\nassert f(g())\n",
        "idx_generation": 449,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the matrix that adds up to the target.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[0])):\n                    if i != k or j != l:\n                        if matrix[i][j] + matrix[k][l] == target:\n                            return True\n    return False\n\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_product=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiplies to the target_product.\"\"\"\n    return any((numbers[i] * numbers[j] == target_product for i in range(len(numbers)) for j in range(i+1, len(numbers))))\n\ndef g(target_product=100):\n    return [1, 2, 5, 10, 20, 25, 50, 75, target_product//75, target_product//50]\n\nassert f(g())\n",
        "idx_generation": 331,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome.\"\"\"\n    return numbers == numbers[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target number.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers=[1, 2, 3, 4, 5], target=9):\n    return numbers\n\nassert f(g(), target=9)\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to the target.\"\"\"\n    return any((lst[i] * lst[j] == target for i in range(len(lst)) for j in range(i+1, len(lst))))\ndef g(lst: List[int]):\n    return lst, 5\nassert f(*g([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the given string is a palindrome and has a length greater than or equal to n.\"\"\"\n    return s == s[::-1] and len(s) >= n\n\ndef g(s: str = 'racecar', n=5):\n    return s, n\n\nassert f(*g()) == True\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the matrix whose sum is equal to the target\"\"\"\n    for row in matrix:\n        if any(target - num in row for num in row):\n            return True\n    return False\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g(), 10)\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the given list that add up to the target.\"\"\"\n    for i, num1 in enumerate(lst):\n        for j, num2 in enumerate(lst[i+1:]):\n            for num3 in lst[i+j+2:]:\n                if num1 + num2 + num3 == target:\n                    return True\n    return False\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\nassert f(g())\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=0) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g(s=\"racecar\"):\n    return s\n\nassert f(g())\n",
        "idx_generation": 457,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(points: List[Tuple[int, int]], target_distance: int) -> bool:\n    \"\"\"Check if there exists a pair of points in the list whose Euclidean distance is equal to the target_distance\"\"\"\n    return any((distance(p1, p2) == target_distance for p1, p2 in itertools.combinations(points, 2)))\n\ndef g():\n    return [(0, 0), (3, 4), (5, 12), (9, 12), (8, 15)]\n\ndef distance(p1, p2):\n    return ((p2[0] - p1[0]) ** 2 + (p2[1] - p1[1]) ** 2) ** 0.5\n\nassert f(g(), 13)\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target=15) -> bool:\n    \"\"\"Find a pair of numbers in the list whose product is equal to the target\"\"\"\n    return any((x[i] * x[j] == target for i in range(len(x)) for j in range(i+1, len(x))))\n\ndef g(target=15):\n    return [5, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list of integers is a palindrome.\"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), 15)\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target number\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60]\n\nassert f(g())\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the list is a palindrome.\"\"\"\n    return lst == lst[::-1]\ndef g():\n    return [1, 2, 3, 2, 1]\nassert f(g())\n",
        "idx_generation": 474,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Find a pair of numbers in the list that sums up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=9):\n    return [1, 2, 3, 4, 5, 6, 7, 8]\n\nassert f(g())\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if the list is a palindrome.\n    Sample Input:\n    numbers = [1, 2, 3, 2, 1]\n    Sample Output:\n    True\"\"\"\n    return numbers == numbers[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Find if the target number is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g(), target=12)\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"madam\"\n\nassert f(g())\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target_sum=50) -> bool:\n    \"\"\"Find a subset of numbers from the given list that adds up to the target_sum\"\"\"\n    n = len(x)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        for j in range(target_sum + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j >= x[i - 1]:\n                dp[i][j] |= dp[i - 1][j - x[i - 1]]\n    return dp[n][target_sum]\n\ndef g(target_sum=50):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 315,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    return any((target - num) in numbers for num in numbers)\n\ndef g(target: int):\n    return [1, 2, 3, 4, target - 7]\n\nassert f(g(10), 7)\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a subsequence of numbers in the given matrix whose sum is equal to the target number.\"\"\"\n    rows = len(matrix)\n    columns = len(matrix[0])\n\n    dp = [[False] * (target + 1) for _ in range(rows + 1)]\n    for i in range(rows + 1):\n        dp[i][0] = True\n\n    for i in range(1, rows + 1):\n        for j in range(1, target + 1):\n            if matrix[i - 1][j - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - matrix[i - 1][j - 1]]\n\n    return dp[rows][target]\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 319,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a number in the list that is a multiple of the target\"\"\"\n    return any((num % target == 0) for num in numbers)\n\ndef g(target: int):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target * 3]\n\nassert f(g(4), 4)\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g()) == True\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target number.\"\"\"\n    complement_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in complement_set:\n            return True\n        complement_set.add(num)\n    return False\n\ndef g(target: int):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(10), 10)\n",
        "idx_generation": 319,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr=[-1, 0, 1, 2, -1, -4]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome\"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    arr = [1, 2, 3, 4, 3, 2, 1]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray of numbers in the given list whose sum is equal to the target number.\"\"\"\n    n = len(arr)\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in arr:\n        for i in range(target, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]\n\ndef g():\n    return [1, 3, 5, 7, 9]\n\nassert f(g(), 15)\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g() -> Tuple[List[int], int]:\n    return ([1, 2, 3, 4, 5, 6], 10)\n\nassert f(*g())\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome sequence.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g())\n\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there is a subarray in the list that adds up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False\n\ndef g(nums=[10, 20, 30, 40, 50, 60]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 327,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Return True if there exists a pair of numbers in the list that add up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\n    \ndef g(target=10):\n    return [1, 3, 5, 7, 9]\n\nassert f(g())\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if the given string is a palindrome of the target string.\"\"\"\n    return s == target[::-1]\n\ndef g(target='hello'):\n    return 'olleh'\n\nassert f(g())\n",
        "idx_generation": 497,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the given list whose sum is equal to the target.\"\"\"\n    n = len(nums)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + nums[i - 1]\n    for i in range(n + 1):\n        for j in range(i + 1, n + 1):\n            if prefix_sum[j] - prefix_sum[i] == target:\n                return True\n    return False\n\ndef g():\n    return [-2, 1, 3, -4, 2]\n\nassert f(g())\n",
        "idx_generation": 330,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g()) == True\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exists a submatrix in the matrix whose sum is equal to the target.\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    prefix_sum = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            prefix_sum[i][j] = (\n                prefix_sum[i - 1][j]\n                + prefix_sum[i][j - 1]\n                - prefix_sum[i - 1][j - 1]\n                + matrix[i - 1][j - 1]\n            )\n\n    for r1 in range(1, m + 1):\n        for r2 in range(r1, m + 1):\n            for c1 in range(1, n + 1):\n                for c2 in range(c1, n + 1):\n                    if (\n                        prefix_sum[r2][c2]\n                        - prefix_sum[r1 - 1][c2]\n                        - prefix_sum[r2][c1 - 1]\n                        + prefix_sum[r1 - 1][c1 - 1]\n                        == target\n                    ):\n                        return True\n\n    return False\n\ndef g(target=20):\n    return [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [9, 10, 11, 12],\n        [13, 14, 15, 16],\n    ]\n\nassert f(g())\n",
        "idx_generation": 330,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to the target value.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == False\n",
        "idx_generation": 355,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the given list contains a sequence of numbers whose sum equals the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), 9)\n",
        "idx_generation": 331,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to the target value.\"\"\"\n    seen = set()\n    for num in x:\n        if num != 0 and target % num == 0 and target // num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    x = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return x\n\nassert f(g())\n",
        "idx_generation": 355,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g(), 12)\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(numbers: List[int], target_product=100) -> bool:\n    \"\"\"Check if there are two numbers in the list whose product is equal to the target product.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] * numbers[j] == target_product:\n                return True\n    return False\n\ndef g(target_product=100):\n    return [1, 2, 4, 5, 10, 20]\n\nassert f(g())\n",
        "idx_generation": 356,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(array: List[int], target=100) -> bool:\n    \"\"\"Check if there exist three numbers in the given list that sum up to the target.\"\"\"\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            for k in range(j+1, len(array)):\n                if array[i] + array[j] + array[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=7) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target\"\"\"\n    num_set = set()\n    for num in arr:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(arr=[1, 2, 4, 6, 8]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 356,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list nums whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> List[int]:\n    \"\"\"Find two numbers in the given list that add up to the target number\"\"\"\n    num_set = set()\n    for num in numbers:\n        complement = target - num\n        if complement in num_set:\n            return [complement, num]\n        num_set.add(num)\n    return []\n\ndef g():\n    return [2, 7, 11, 15]\n\nassert f(g(), 9) == [2, 7]\n",
        "idx_generation": 356,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [2, 4, 6, 8]\nassert f(g())\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 358,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target number.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Check if there exists two numbers in the list that sum up to the target\"\"\"\n    seen = set()\n    for num in lst:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g() -> (List[int], int):\n    return ([1, 2, 3, 4, 5], 7)\n\nassert f(*g())\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are any two numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there are two numbers in the list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 362,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there is a triplet of numbers in the list that adds up to the target sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=10):\n    return [2, 3, 5, 7, 1]\n\nassert f(g())\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=15, n=2) -> bool:\n    \"\"\"Find a combination of n numbers in the list that sum up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(combo) == target for combo in combinations(nums, n))\ndef g(target=15, n=2):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that adds up to the target sum.\"\"\"\n    complement_set = set()\n    for num in arr:\n        complement = target - num\n        if complement in complement_set:\n            return True\n        complement_set.add(num)\n    return False\n\ndef g(target=0):\n    return [2, 3, 5, -2, 7]\n\nassert f(g())\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to find a combination of numbers that add up to the target\"\"\"\n    n = len(numbers)\n    dp = [[False for _ in range(target+1)] for _ in range(n+1)]\n    dp[0][0] = True\n\n    for i in range(1, n+1):\n        for j in range(target+1):\n            if j < numbers[i-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-numbers[i-1]]\n    \n    return dp[n][target]\n\ndef g(target=100):\n    return [random.randint(1, 20) for _ in range(10)]\n\nassert f(g())\n",
        "idx_generation": 364,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there are three integers in the list that sum up to the target number.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    return any(x + y == target for i, x in enumerate(arr) for y in arr[i+1:])\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), 10)\n\n",
        "idx_generation": 364,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target_sum: int) -> List[int]:\n    \"\"\"Given a list of integers and a target sum, find all pairs of numbers in the list that add up to the target sum.\n    Return a list of tuples containing the pairs.\"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                result.append((lst[i], lst[j]))\n    return result\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), 7) == [(1, 6), (2, 5), (3, 4)]\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g():\n    return [2, 4, 6, 8, 10]\nassert f(g())\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"Given a matrix, find the sum of all the elements in the matrix\"\"\"\n    total_sum = 0\n    for row in matrix:\n        for num in row:\n            total_sum += num\n    return total_sum\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == 45\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List, Tuple\n\ndef f(numbers: List[int], target_product: int, num_elements: int) -> bool:\n    \"\"\"Check if there exists a combination of num_elements elements in the given list that multiplies to target_product.\"\"\"\n    from itertools import combinations\n    for combination in combinations(numbers, num_elements):\n        product = 1\n        for num in combination:\n            product *= num\n        if product == target_product:\n            return True\n    return False\n\ndef g():\n    return ([2, 3, 4, 5, 6, 7, 8, 9, 10], 1440, 4)\n\nassert f(*g())\n",
        "idx_generation": 371,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a sublist in the array whose sum is less than the target\"\"\"\n    return any((sum(sublist) < target for sublist in powerset(numbers)))\n\ndef powerset(lst):\n    return [[]] + [list(subset) for subset in itertools.chain.from_iterable(itertools.combinations(lst, r) for r in range(1, len(lst) + 1))]\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), 20)\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a sublist in the list whose sum is equal to the target number.\"\"\"\n    return any(sum(lst[i:j]) == target for i in range(len(lst)) for j in range(i+1, len(lst)+1))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if any combination of numbers in the list sums up to the target.\"\"\"\n    for i in range(1, len(numbers) + 1):\n        for combination in itertools.combinations(numbers, i):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 10)\n\nassert f(*g())\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    seen = set()\n    for num in lst:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 9)\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers from the list whose difference is equal to the target number.\"\"\"\n    return any((num1 - num2 == target for num1 in nums for num2 in nums))\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return lst\nassert f(g())\n",
        "idx_generation": 375,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there are two integers in the list that sum up to the target value.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return [5, 10, 15, 7, 3]\n\nassert f(g())\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if it is possible to find two numbers in the list that sum up to the target number.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g(), 14) \n\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there are three integers in the list that sum up to the target value.\"\"\"\n    n = len(nums)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_number=5) -> bool:\n    \"\"\"Check if the target_number is present in the list more than once\"\"\"\n    return numbers.count(target_number) > 1\n\ndef g(target_number=5):\n    return [1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    seen = set()\n    for num in numbers:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), 13)\n\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=25) -> bool:\n    \"\"\"Check if there exists a subsequence of numbers in the given list whose product is equal to the target number.\"\"\"\n    n = len(numbers)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][1] = True\n    for i in range(1, n + 1):\n        for j in range(2, target + 1):\n            if numbers[i - 1] > j or not dp[i - 1][j // numbers[i - 1]]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j // numbers[i - 1]]\n    return dp[n][target]\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 392,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target.\"\"\"\n    return any((x * y) == target for x in numbers for y in numbers)\n\ndef g(target=100):\n    return [10, 20, 10, 5, 50]\n\nassert f(g())\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    complement_set = set()\n    for num in numbers:\n        complement = target - num\n        if complement in complement_set:\n            return True\n        complement_set.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 9\n\nassert f(*g())\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose difference is equal to the target.\"\"\"\n    return any((x - y) == target for x in numbers for y in numbers)\n\ndef g(target=0):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the given list whose product is equal to the target value.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] * numbers[j] * numbers[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list whose sum is equal to the target.\"\"\"\n    n = len(nums)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 355,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: list, target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target number.\"\"\"\n    seen = set()\n    for num in numbers:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g(), 14)\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=0) -> int:\n    \"\"\"Find the maximum subarray sum in the given list that is less than or equal to the target, \n    and the subarray must contain at least one negative number.\"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    has_negative = False\n    for num in arr:\n        current_sum += num\n        if num < 0:\n            has_negative = True\n        if current_sum <= target and current_sum > max_sum and has_negative:\n            max_sum = current_sum\n        if current_sum <= 0:\n            current_sum = 0\n            has_negative = False\n    return max_sum\n\ndef g(target=0):\n    return [2, -3, 5, -2, 7]\n\nassert f(g()) == -1\n",
        "idx_generation": 357,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: List[int], target=10) -> bool:\n    \"\"\"Find a sublist of integers in the given list that sums up to a target value\"\"\"\n    for i in range(len(n)):\n        for j in range(i+1, len(n)+1):\n            if sum(n[i:j]) == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list whose sum is equal to the target number.\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(arr: List[int], target: int):\n    return arr, target\nassert f(*g([1, 2, 3, 4, 5], 9))\n",
        "idx_generation": 358,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target value.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9], target\nassert f(*g()) == True\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target.\"\"\"\n    return any((x * y) == target for x in nums for y in nums)\n\ndef g(target=15):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 362,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\nimport random\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target number\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target: int):\n    numbers = [1, 3, 5, 7, 9]\n    return numbers, target\n\nassert f(*g(10))\n",
        "idx_generation": 406,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list whose sum is equal to the target.\"\"\"\n    return any((x + y + z) == target for x in nums for y in nums for z in nums)\n\ndef g(target=20):\n    return [5, 10, 15]\n\nassert f(g())\n",
        "idx_generation": 362,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return ([2, 4, 6, 8, 10], 12)\n\nassert f(*g())\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiplies to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 5]\nassert f(g())\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target value.\"\"\"\n    prefix_sum = 0\n    seen = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in seen:\n            return True\n        seen.add(prefix_sum)\n    return False\n\ndef g():\n    return ([3, 4, 7, 2, -3, 1, 4, 2], 5)\n\nassert f(*g())\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if the target number is present in the given matrix\"\"\"\n    return any(target in row for row in matrix)\n\ndef g(target=5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 364,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_product=24) -> bool:\n    \"\"\"Find three distinct integers in the list that multiply up to the target product.\"\"\"\n    n = len(arr)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if arr[i] * arr[j] * arr[k] == target_product:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g(), target=10)\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list that multiply to give the target product\"\"\"\n    seen = set()\n    for num in arr:\n        if target % num == 0 and target // num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=5):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n\n",
        "idx_generation": 419,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there is a subset of the list that adds up to the target value.\"\"\"\n    for r in range(len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            if sum(subset) == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g(), target=10)\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 5, target//5]\n\nassert f(g())\n",
        "idx_generation": 419,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=7) -> bool:\n    \"\"\"Check if there exists three numbers in the list that sum up to the target number.\"\"\"\n    for i in range(len(arr)-2):\n        for j in range(i+1, len(arr)-1):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=7):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 368,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> List[int]:\n    \"\"\"Find all numbers in the list that are divisible by the given target.\"\"\"\n    divisible_numbers = [num for num in numbers if num % target == 0]\n    return divisible_numbers\n\ndef g(target=10):\n    numbers = [2, 5, 10, 15, 20, 25, 30]\n    return numbers\n\nassert f(g()) == [10, 20, 30]\n",
        "idx_generation": 420,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is any combination of numbers in the given list that adds up to the target value.\"\"\"\n    from itertools import combinations\n    for r in range(len(nums) + 1):\n        for combo in combinations(nums, r):\n            if sum(combo) == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [50, 25, 10, 15]\n\nassert f(g())\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target: int):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return numbers, target\n\nassert f(*g(15))\n",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list `arr` that sum up to `target`.\"\"\"\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target number.\"\"\"\n    return any(target - num in lst for num in lst)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15\n\nassert f(*g())\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are exactly two numbers in the list whose sum is equal to the target number.\"\"\"\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    for num in count:\n        complement = target - num\n        if complement != num and complement in count:\n            return True\n    return False\n\ndef g(target: int = 10):\n    return [2, 4, 6, 8]\n\nassert f(g(), 10)\n",
        "idx_generation": 380,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sum up to the target number.\"\"\"\n    seen = set()\n    for num in lst:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(lst: List[int], target: int):\n    return lst, target\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(*g(numbers, 11))\n",
        "idx_generation": 428,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum: int) -> bool:\n    \"\"\"Given a list of integers and a target sum, find if there are three numbers in the list that sum up to the target sum.\"\"\"\n    for i in range(len(arr)-2):\n        for j in range(i+1, len(arr)-1):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target_sum:\n                    return True\n    return False\n\ndef g() -> Tuple[List[int], int]:\n    return ([1, 4, 2, 7, 5, 3], 10)\n\nassert f(*g())\n",
        "idx_generation": 384,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [-2, 4, 5, -1, 0, 2]\n\nassert f(g())\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(ans: List[int], target=100) -> bool:\n    \"\"\"Find a list of integers where the sum of all elements in the list is equal to the target number\"\"\"\n    return sum(ans) == target\n\ndef g(target=100):\n    return [10, 20, 30, 40]\n\nassert f(g())\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that multiply to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target - 9]\n\nassert f(g())\n",
        "idx_generation": 434,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there are four integers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                for l in range(k+1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return True\n    return False\n\ndef g():\n    return [10, 20, 15, 5, 25]\n\nassert f(g())\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there is a number in the list that is equal to the target\"\"\"\n    return target in nums\n\ndef g(nums=[1, 3, 5, 7, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 434,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target number.\n    Return True if such a subarray exists, False otherwise.\"\"\"\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if prefix_sum[j] - prefix_sum[i] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [-1, 2, 3, -4, 5]\n\nassert f(g()) == True\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=25) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g():\n    return [10, 15, 5, 7, 8, 12, 20]\n\nassert f(g())\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if it is possible to find three numbers in the list that sum up to the target number.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7]\n\nassert f(g(), 12)\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there exists two numbers in the list that add up to the target number.\"\"\"\n    complement = set()\n    for num in numbers:\n        if num in complement:\n            return True\n        complement.add(target - num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), target=7)\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> int:\n    \"\"\"Find the product of all the even numbers in the given list\"\"\"\n    product = 1\n    for num in numbers:\n        if num % 2 == 0:\n            product *= num\n    return product\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g()) == 3840\n",
        "idx_generation": 388,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=5) -> List[int]:\n    \"\"\"Find all elements in the list that are greater than the target value.\"\"\"\n    greater_than_target = [num for num in li if num > target]\n    return greater_than_target\n\ndef g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [6, 7, 8, 9, 10]\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subarray in lst whose sum is equal to the target, considering only positive integers.\"\"\"\n    for i in range(len(lst)):\n        if lst[i] == target:\n            return True\n        elif lst[i] < target:\n            for j in range(i+1, len(lst)):\n                if sum(lst[i:j+1]) == target:\n                    return True\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 9)\n\nassert f(*g())\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target: int = 10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return numbers\n\nassert f(g()) == True\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subarray in lst whose sum is equal to the target, considering only negative integers.\"\"\"\n    for i in range(len(lst)):\n        if lst[i] == target:\n            return True\n        elif lst[i] > target:\n            for j in range(i+1, len(lst)):\n                if sum(lst[i:j+1]) == target:\n                    return True\n    return False\n\ndef g():\n    return ([-1, -2, -3, -4, -5], -6)\n\nassert f(*g())\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target value\"\"\"\n    for i in range(len(nums)):\n        curr_sum = nums[i]\n        j = i + 1\n        while j <= len(nums):\n            if curr_sum == target:\n                return True\n            if curr_sum > target or j == len(nums):\n                break\n            curr_sum += nums[j]\n            j += 1\n    return False\n\ndef g(target: int = 10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"Find the indices of two numbers in the list that add up to the target.\"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n    return []\n\ndef g():\n    nums = [2, 7, 11, 15]\n    target = 9\n    return nums, target\n\nassert f(*g()) == [0, 1]\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list whose product is equal to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\ndef g(target=20):\n    return [2, 5, 4, 10, 3, 8, 6]\nassert f(g())\n",
        "idx_generation": 442,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value.\n    Return True if such a pair exists, False otherwise.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    return [1, 5, 7, 10, 12]\n\nassert f(g()) == False\n\n\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the given target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target value.\"\"\"\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), target=10)\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if there are three distinct elements in the list that add up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=20):\n    return [2, 4, 6, 8, 10, 12]\n\nassert f(g())\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subarray in the given list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False\n\ndef g(target: int) -> List[int]:\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(9), 10)\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that multiply to the target number.\"\"\"\n    def helper(nums, target, i, memo):\n        if target == 1:\n            return True\n        if i == len(nums):\n            return False\n        if (i, target) in memo:\n            return memo[(i, target)]\n        if target % nums[i] == 0:\n            if helper(nums, target // nums[i], i + 1, memo):\n                memo[(i, target)] = True\n                return True\n        memo[(i, target)] = helper(nums, target, i + 1, memo)\n        return memo[(i, target)]\n    \n    memo = {}\n    return helper(nums, target, 0, memo)\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=5):\n    return ([1, 2, 3, 4, 5], target)\n\nassert f(*g())\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int], target: int = 50) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that can be used to reach the target number using basic arithmetic operations (+, -, *, /).\"\"\"\n    def helper(nums, target, i, memo):\n        if target == 0:\n            return True\n        if i == len(nums):\n            return False\n        if (i, target) in memo:\n            return memo[(i, target)]\n        if helper(nums, target + nums[i], i + 1, memo):\n            memo[(i, target)] = True\n            return True\n        if helper(nums, target - nums[i], i + 1, memo):\n            memo[(i, target)] = True\n            return True\n        if helper(nums, target * nums[i], i + 1, memo):\n            memo[(i, target)] = True\n            return True\n        if nums[i] != 0 and target % nums[i] == 0 and helper(nums, target // nums[i], i + 1, memo):\n            memo[(i, target)] = True\n            return True\n        memo[(i, target)] = helper(nums, target, i + 1, memo)\n        return memo[(i, target)]\n    \n    memo = {}\n    return helper(nums, target, 0, memo)\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in any row of the matrix whose product is equal to the target.\"\"\"\n    for row in matrix:\n        for i in range(len(row)):\n            for j in range(i+1, len(row)):\n                if row[i] * row[j] == target:\n                    return True\n    return False\n\ndef g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\n\nassert f(g())\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(numbers: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that can be used to reach the target number using each number only once.\"\"\"\n    def helper(numbers, target, path, memo):\n        if target == 0:\n            return True\n        if (target, tuple(path)) in memo:\n            return memo[(target, tuple(path))]\n        for i in range(len(numbers)):\n            if numbers[i] <= target:\n                if helper(numbers[:i] + numbers[i+1:], target - numbers[i], path + [numbers[i]], memo):\n                    memo[(target, tuple(path))] = True\n                    return True\n        memo[(target, tuple(path))] = False\n        return False\n\n    memo = {}\n    return helper(numbers, target, [], memo)\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are three elements in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(n: int, lst: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that adds up to the target value n times.\"\"\"\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                count += 1\n    return count == n\n\ndef g(lst: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9], target=10):\n    return len(lst), lst, target\n\nassert f(*g()) == False\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list whose sum is equal to the target number.\"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\ndef g():\n    return [1, 5, 3, 7, 2, 9, 4]\nassert f(g())\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(lst: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target value, and if the sum is divisible by 7.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target and (lst[i] + lst[j]) % 7 == 0:\n                return True\n    return False\n\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9], target\n\nassert f(*g()) == False\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a subarray in the given list whose sum is equal to the target value.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)+1):\n            if sum(numbers[i:j]) == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that can be used to reach the target number using each number only once.\"\"\"\n    def helper(nums, target, path, memo):\n        if target == 0:\n            return True\n        if (target, tuple(path)) in memo:\n            return memo[(target, tuple(path))]\n        for i in range(len(nums)):\n            if nums[i] <= target:\n                if helper(nums[:i] + nums[i+1:], target - nums[i], path + [nums[i]], memo):\n                    memo[(target, tuple(path))] = True\n                    return True\n        memo[(target, tuple(path))] = False\n        return False\n\n    memo = {}\n    return helper(nums, target, [], memo)\n\ndef g():\n    return [1, 3, 5, 7, 9]\n\nassert f(g())\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Check if a 2D list is a square matrix\"\"\"\n    return len(arr) > 0 and all(len(row) == len(arr) for row in arr)\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subset of the list that multiplies to the target\"\"\"\n    def subset_product(nums, target):\n        if target == 1:\n            return True\n        if not nums:\n            return False\n        \n        if nums[0] == target:\n            return True\n        \n        if target % nums[0] == 0:\n            if subset_product(nums[1:], target // nums[0]):\n                return True\n        \n        return subset_product(nums[1:], target)\n    \n    return subset_product(nums, target)\n\ndef g(target=10):\n    nums = [2, 3, 4, 5, 6, 7]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 455,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == False\n",
        "idx_generation": 407,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return ([2, 4, 6, 8, 10], 48)\n\nassert f(*g())\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains a subarray where the sum of all elements is equal to zero.\"\"\"\n    n = len(nums)\n    sum_set = set()\n    curr_sum = 0\n\n    for i in range(n):\n        curr_sum += nums[i]\n\n        if curr_sum == 0 or curr_sum in sum_set:\n            return True\n\n        sum_set.add(curr_sum)\n\n    return False\n\ndef g() -> List[int]:\n    return [4, -2, 3, -1, 1]\n\nassert f(g()) == True\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that divide evenly into the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if target % nums[i] == 0 and target % nums[j] == 0:\n                return True\n    return False\n\ndef g():\n    return ([2, 4, 6, 8, 10], 20)\n\nassert f(*g())\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target value.\"\"\"\n    num_set = set()\n\n    for num in nums:\n        complement = target - num\n\n        if complement in num_set:\n            return True\n\n        num_set.add(num)\n\n    return False\n\ndef g() -> Tuple[List[int], int]:\n    return ([2, 4, 6, 8], 10)\n\nassert f(*g()) == True\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list that adds up to the target value.\"\"\"\n    n = len(lst)\n    prefix_sum = 0\n    prefix_sums = set()\n    for i in range(n):\n        prefix_sum += lst[i]\n        if prefix_sum == target or prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target - 9]\n\nassert f(g())\n",
        "idx_generation": 457,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list whose sum is equal to the target value.\"\"\"\n    for pair in combinations(nums, 2):\n        if sum(pair) == target:\n            return True\n    return False\n\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that adds up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target: int = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there are exactly two elements in the list that add up to the target number\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 4, 3, 6, 7]\n\nassert f(g())\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if the sum of any two elements in the array is equal to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9]\n\nassert f(g())\n",
        "idx_generation": 415,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, check if there is a pair of numbers that multiply to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), 20)\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that sum up to the target number.\"\"\"\n    def helper(numbers, target, current_sum, index):\n        if current_sum == target:\n            return True\n        if current_sum > target or index >= len(numbers):\n            return False\n        \n        return helper(numbers, target, current_sum + numbers[index], index + 1) or helper(numbers, target, current_sum, index + 1)\n    \n    return helper(numbers, target, 0, 0)\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, check if there is a number that is a multiple of the target value.\"\"\"\n    for num in nums:\n        if num != 0 and target % num == 0:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), 5)\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Find a pair of distinct integers in the list that sum up to the target sum.\"\"\"\n    seen = set()\n    for num in arr:\n        complement = target_sum - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int = 50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g():\n    return [10, 20, 30, 40, 50]\n\nassert f(g(), 60)\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exist three integers in the given list whose sum is equal to the target number.\"\"\"\n    n = len(nums)\n    nums.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 9)\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find the two numbers in the list that multiply to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[2, 3, 4, 5, 6], target=12):\n    return nums\n\nassert f(g(), target=12)\n",
        "idx_generation": 468,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int], target=3) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose elements sum up to the target number.\"\"\"\n    for length in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, length):\n            if sum(subset) == target:\n                return True\n    return False\n\ndef g(target=3):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(ages: List[int], target_age=18) -> bool:\n    \"\"\"Check if there is at least one person in the list whose age is equal to the target age\"\"\"\n    if target_age in ages:\n        return True\n    else:\n        return False\n\ndef g():\n    return [12, 15, 18, 20, 22, 25]\n\nassert f(g())\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a subsequence of numbers in the given list whose sum is equal to the target number.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]\n\ndef g():\n    return [3, 6, 9, 12, 15, 18]\n\nassert f(g())\n",
        "idx_generation": 419,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target_name='Alice') -> bool:\n    \"\"\"Check if the target name is present in the list of names\"\"\"\n    if target_name in names:\n        return True\n    else:\n        return False\n\ndef g():\n    return ['John', 'Alice', 'Mike', 'Emma']\n\nassert f(g())\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int], target: int) -> List[List[int]]:\n    \"\"\"Find all combinations of numbers in the list nums that add up to the target value.\"\"\"\n    combinations = []\n    for r in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            if sum(subset) == target:\n                combinations.append(list(subset))\n    return combinations\n\ndef g():\n    return ([2, 4, 6, 8], 10)\n\nassert f(*g()) == [[2, 8], [4, 6]]\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array that add up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9]\n\nassert f(g())\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list whose sum is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10, 12]\n\nassert f(g())\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import datetime\nfrom typing import*\n\ndef f(dates: List[datetime.date], target_month=12) -> bool:\n    \"\"\"Check if any date in the list has the target_month as its month.\"\"\"\n    return any(date.month == target_month for date in dates)\n\ndef g(target_month=12):\n    dates = [datetime.date(2022, 1, 15), datetime.date(2022, 3, 4), datetime.date(2022, 12, 10), datetime.date(2023, 5, 22)]\n    return dates\n\nassert f(g()) == True\n\n",
        "idx_generation": 474,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there exist three numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), 15)\n",
        "idx_generation": 428,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=9) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target number.\"\"\"\n    return any((x + y == target for i, x in enumerate(lst) for y in lst[i+1:]))\ndef g():\n    return [3, 5, 2, 6, 1, 4]\nassert f(g())\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, find two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Given a list of numbers and a target number, check if there exists a pair of numbers in the list that multiplies to the target number.\n    Return True if such a pair exists, False otherwise.\"\"\"\n    num_set = set()\n    for num in numbers:\n        if target / num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), target=12)\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int = 20) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target number.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target: int = 20):\n    return [10, 5, 8, 15, 3, 7]\n\nassert f(g())\n",
        "idx_generation": 432,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that multiply to the target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] * numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists two numbers in the list whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=50):\n    return [10, 20, 30, 40]\n\nassert f(g())\n",
        "idx_generation": 433,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(items: List[str], target='apple') -> bool:\n    \"\"\"Check if the target item is present in the list, ignoring case\"\"\"\n    for item in items:\n        if item.lower() == target.lower():\n            return True\n    return False\n\ndef g(target='apple'):\n    return ['apple', 'orange', 'banana']\n\nassert f(g())\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the given list that add up to the target.\"\"\"\n    complements = set()\n    for num in numbers:\n        complement = target - num\n        if complement in complements:\n            return True\n        complements.add(num)\n    return False\n\ndef g():\n    return ([2, 4, 6, 8, 10], 12)\n\nassert f(*g())\n",
        "idx_generation": 435,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(numbers: List[int], target: int) -> List[int]:\n    \"\"\"Find a pair of numbers in the given list that add up to the target number\"\"\"\n    for pair in combinations(numbers, 2):\n        if sum(pair) == target:\n            return list(pair)\n    return []\n\ndef g():\n    return [3, 1, 4, 7, 5, 9, 2, 6]\n\nassert f(g(), 10) == [3, 7]\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum: int) -> List[List[int]]:\n    \"\"\"Given a list of numbers and a target sum, find all unique combinations of numbers in the list that add up to the target sum.\n    Return a list of lists containing the combinations.\"\"\"\n    result = []\n    \n    def backtrack(remain, current_combination, start):\n        if remain == 0:\n            result.append(current_combination)\n            return\n        elif remain < 0:\n            return\n        \n        for i in range(start, len(numbers)):\n            backtrack(remain - numbers[i], current_combination + [numbers[i]], i)\n    \n    backtrack(target_sum, [], 0)\n    return result\n\ndef g():\n    return [2, 3, 6, 7]\n\nassert f(g(), 7) == [[2, 2, 3], [7]]\n\n\n",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"Return True if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target: int = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    num_set = set(nums)\n    \n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    \n    return False\n\ndef g():\n    return [3, 5, 2, 8, 4, 11]\n\nassert f(g(), 9)\n",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"Check if there exist k numbers in the given list that add up to the target number.\"\"\"\n    if k == 0:\n        return target == 0\n    if k < 0 or target < 0 or len(nums) == 0:\n        return False\n    return f(nums[1:], target-nums[0], k-1) or f(nums[1:], target, k)\n\ndef g():\n    return ([2, 4, 6, 8], 14, 3)\n\nassert f(*g())\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists two numbers in the list that sum up to the target number.\"\"\"\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return ([2, 4, 6, 8, 10], 12)\n\nassert f(*g())\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is divisible by any number in the list.\n    The function returns True if the target number is divisible by any number in the list, otherwise False.\"\"\"\n    for num in nums:\n        if target % num == 0:\n            return True\n    return False\n\ndef g():\n    nums = [2, 4, 6, 8, 10]\n    target = 20\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Given an array of integers, check if there exists a pair of numbers in the array that adds up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 14):\n    return (arr, target)\n\nassert f(*g())\n",
        "idx_generation": 443,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set and complement != num:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(), 15)\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(), target=10)\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subset of numbers in the array that sum up to the target value.\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if target < 0 or len(nums) == 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    \n    return subset_sum(arr, target)\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"Check if there are k numbers in the list that add up to the target.\"\"\"\n    if k == 1:\n        return target in nums\n    for i in range(len(nums)):\n        if f(nums[i+1:], target-nums[i], k-1):\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(), target=10, k=2)\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\n    Return True if such a pair exists, False otherwise.\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g()) == True\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"Check if there are exactly k numbers in the list that add up to the target.\"\"\"\n    if k == 1:\n        return target in nums\n    if k == 2:\n        return target in [num*2 for num in nums]\n    for i in range(len(nums)):\n        if f(nums[i+1:], target-nums[i], k-1):\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(), target=10, k=3)\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\n    Return True if such a pair exists, False otherwise.\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g()) == False\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\n    Return True if such a pair exists, False otherwise.\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=15):\n    return [5, 10, 20, 30, 40, 50, 60, 70, 80]\n\nassert f(g()) == True\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 495,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(nums=g(), target=18)\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that add up to the target value.\"\"\"\n    for r in range(1, len(lst) + 1):\n        for combination in itertools.combinations(lst, r):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9]\n\nassert f(g())\n",
        "idx_generation": 497,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"Check if the target number is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(books: List[Dict[str, Union[str, int]]], target_price=50) -> bool:\n    \"\"\"Check if there is a book in the list that has a price equal to or lower than the target price.\"\"\"\n    return any(book['price'] <= target_price for book in books)\n\ndef g(target_price=50):\n    return [{'title': 'Book 1', 'price': 30}, {'title': 'Book 2', 'price': 40}, {'title': 'Book 3', 'price': 60}]\n\nassert f(g())\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is an upper triangular matrix.\"\"\"\n    n = len(arr)\n\n    # Check if the matrix is square\n    if n != len(arr[0]):\n        return False\n\n    # Check if the matrix is upper triangular\n    for i in range(n):\n        for j in range(i):\n            if arr[i][j] != 0:\n                return False\n\n    return True\n\ndef g():\n    return [[1, 2, 3], [0, 4, 5], [0, 0, 6]]\n\nassert f(g())\n",
        "idx_generation": 457,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list for which the sum of its elements is equal to the target number.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if sum(arr[i:j]) == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum equals the target value.\"\"\"\n    for i in range(len(nums)):\n        curr_sum = nums[i]\n        if curr_sum == target:\n            return True\n        for j in range(i + 1, len(nums)):\n            curr_sum += nums[j]\n            if curr_sum == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=3) -> bool:\n    \"\"\"Check if there exists a path in the given matrix such that the sum of numbers along the path is equal to the target number, and the path does not contain any repeated numbers.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    dp = [[False] * (target + 1) for _ in range(m + 1)]\n    dp[0][0] = True\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(target + 1):\n                if k >= matrix[i - 1][j - 1]:\n                    dp[i][k] = dp[i][k] or dp[i - 1][k - matrix[i - 1][j - 1]] or dp[i][k - matrix[i - 1][j - 1]]\n                else:\n                    dp[i][k] = dp[i][k] or dp[i - 1][k]\n\n    return dp[m][target]\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the sum of any three numbers in a list equals the target.\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g(), 15)\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\nassert f(g())\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, check if there is a number that is a power of the target value.\"\"\"\n    for num in nums:\n        if num != 0 and num != 1 and target % num == 0 and target / num != 1:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), 16)\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target number.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums\n\nassert f(g(), target=9)\n",
        "idx_generation": 468,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list whose sum is equal to the target.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g(), 12)\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=10, max_elements=3) -> bool:\n    \"\"\"Find a combination of at most max_elements elements from the list arr whose sum is equal to the target value.\"\"\"\n    assert max_elements <= len(arr)\n    from itertools import combinations\n    for combination in combinations(arr, max_elements):\n        if sum(combination) == target:\n            return True\n    return False\n\ndef g(target=10, max_elements=3):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 474,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"Given a list of integers, find all pairs that add up to the target value and return them as a list of tuples.\"\"\"\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                pairs.append((nums[i], nums[j]))\n    return pairs\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), 11) == [(1, 10), (2, 9), (3, 8), (4, 7), (5, 6)]\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int = 100) -> bool:\n    \"\"\"Check if there exists a triplet in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [10, 20, 30, 40, 50, 60]\n\nassert f(g(), 120)\n",
        "idx_generation": 479,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_row_sum=30) -> bool:\n    \"\"\"Check if any row in the matrix has the sum equal to the target_row_sum\"\"\"\n    for row in matrix:\n        if sum(row) == target_row_sum:\n            return True\n    return False\ndef g(target_row_sum=30):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target_row_sum - 15]]\nassert f(g())\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of elements in the list whose sum is equal to the product of their indices.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == i * j:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of elements in the list whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target number.\n    The function returns True if such pair exists, otherwise False.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"Given a list of numbers and a target number, find all pairs of numbers that sum up to the target.\n    Return a list of pairs.\"\"\"\n    result = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                result.append((nums[i], nums[j]))\n    return result\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(), 10) == [(1, 9), (2, 8), (3, 7), (4, 6)]\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Check if the given 2D list is a square matrix and has only positive integers.\"\"\"\n    rows = len(arr)\n    for row in arr:\n        if len(row) != rows:\n            return False\n        for num in row:\n            if num <= 0:\n                return False\n    return True\n\ndef g():\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target value.\"\"\"\n    def subset_sum(nums, target, n):\n        if target == 0:\n            return True\n        if n == 0 and target != 0:\n            return False\n        if nums[n-1] > target:\n            return subset_sum(nums, target, n-1)\n        return subset_sum(nums, target, n-1) or subset_sum(nums, target-nums[n-1], n-1)\n    \n    return subset_sum(nums, target, len(nums))\n\ndef g():\n    return [3, 1, 4, 2, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 495,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target value using dynamic programming.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target+1) for _ in range(n+1)]\n    dp[0][0] = True\n\n    for i in range(1, n+1):\n        dp[i][0] = True\n\n    for i in range(1, n+1):\n        for j in range(1, target+1):\n            if j < nums[i-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]]\n\n    return dp[n][target]\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 495,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find the pair of numbers whose sum equals the target number\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr=[2, 4, 6, 8], target=10):\n    return arr\nassert f(g())\n",
        "idx_generation": 495,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target number.\"\"\"\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target: int = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int = 0) -> bool:\n    \"\"\"Check if there exists a subarray in the list that sums up to the target number.\"\"\"\n    prefix_sum = 0\n    seen = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in seen:\n            return True\n        seen.add(prefix_sum)\n    return False\n\ndef g(target: int = 0):\n    return [-2, -1, 2, 4, -3, 5]\n\nassert f(g())\n\n",
        "idx_generation": 499,
        "target_skills": null
    }
]