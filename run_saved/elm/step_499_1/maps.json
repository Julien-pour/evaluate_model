[
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"\n    Given a string and a number k, find if there exists a substring of length k that contains all the unique characters in the string.\n    \"\"\"\n    for i in range(len(s)-k+1):\n        substring = s[i:i+k]\n        if len(set(substring)) == k:\n            return True\n    return False\n\ndef g(s=\"abccbaabbaacc\", k=3):\n    for i in range(len(s)-k+1):\n        substring = s[i:i+k]\n        if len(set(substring)) == k:\n            return substring\n    return \"\"\nassert f(g())\n",
        "idx_generation": 5,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are three numbers in a list whose sum equals a target number.\n    \"\"\"\n    complements = set()\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if target - nums[i] - nums[j] in complements:\n                return True\n            complements.add(nums[i] + nums[j])\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(), target=15)\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=123456789) -> bool:\n    \"\"\"Check if the given number is a palindrome.\"\"\"\n    return str(x) == str(x)[::-1]\n\ndef g(a = 123456789):\n    return int(str(a) + str(a)[::-1])\nassert f(g())\n",
        "idx_generation": 439,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, t=100, upper=15) -> bool:\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n    \"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper\ndef g(t = 100, upper = 15):\n    # Faster solution for simultaneously solving multiple problems is of course possible\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\nassert f(g())\n",
        "idx_generation": 39,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers contains any duplicate elements.\n    \"\"\"\n    return len(numbers) != len(set(numbers))\n\ndef g(numbers=[1, 2, 3, 2, 4]):\n    return numbers\n\nassert f(g())\n\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    Return True if it is a palindrome, False otherwise.\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g(arr=[1, 2, 3, 2, 1]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Determine if the given number n is a prime number.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(n=17):\n    return n\n\nassert f(g())\n",
        "idx_generation": 23,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, s1='hello', s2='world', count1=3, count2=4) -> bool:\n    \"\"\"Check if s contains count1 occurrences of s1 and count2 occurrences of s2\"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2\ndef g(s1='hello', s2='world', count1=3, count2=4):\n    return s1*count1 + s2*count2\nassert f(g())\n",
        "idx_generation": 30,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=2019) -> bool:\n    \"\"\"Find a string that contains a palindrome of length n\"\"\"\n    return any(s[i:i+n] == s[i:i+n][::-1] for i in range(len(s)-n+1))\ndef g(n = 2019):\n    return 'a' * (n//2) + 'b' + 'a' * (n//2)\nassert f(g())\n",
        "idx_generation": 3,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, li=[1, 1]) -> bool:\n    \"\"\"Check if the given number is a Fibonacci number\"\"\"\n    a, b = 1, 1\n    while b < n:\n        a, b = b, a + b\n    return b == n\n\ndef g():\n    return 8\n\nassert f(g())\n",
        "idx_generation": 116,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, target='python') -> bool:\n    \"\"\"Check if a given word is a substring of the target word\"\"\"\n    return word in target\n\ndef g(target='python'):\n    return target\n\nassert f(g())\n",
        "idx_generation": 156,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"\n    Check if the given number is a product of two prime numbers from the provided list.\n    \"\"\"\n    for prime in primes:\n        if n % prime == 0 and n // prime in primes:\n            return True\n    return False\n\ndef g(primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return primes[0] * primes[-1]\n\nassert f(g())\n",
        "idx_generation": 34,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a given string is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g(s='radar'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 95,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, n=3) -> bool:\n    \"\"\"Check if a given number is a power of another number.\"\"\"\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x\n\ndef g(n=3):\n    return n**3\n\nassert f(g())\n",
        "idx_generation": 52,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n=10) -> bool:\n    \"\"\"\n    Check if the product of all elements in a list is divisible by a given number.\n    \"\"\"\n    product = 1\n    for num in lst:\n        product *= num\n    return product % n == 0\n\ndef g(n=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 94,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 240,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a: List[int]) -> bool:\n    \"\"\"Check if a given number is present in the array.\"\"\"\n    return n in a\n\ndef g(n=5, a=[1, 2, 3, 4, 5]):\n    return n, a\n\nassert f(*g())\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int, k: int) -> bool:\n    \"\"\"\n    Given three integers n, m, and k, check if the sum of the first two integers is equal to the third integer.\n    \"\"\"\n    return n + m == k\ndef g(n = 5, m = 3, k = 8):\n    return n, m, k\nassert f(*g())\n",
        "idx_generation": 5,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of numbers, return a new list containing only the prime numbers.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return [num for num in numbers if is_prime(num)]\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [2, 3, 5, 7]\n\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], length=5) -> bool:\n    \"\"\"Check if all strings in the list have a length greater than or equal to a specific length\"\"\"\n    return all(len(s) >= length for s in strings)\ndef g(length=5):\n    return [\"apple\", \"banana\", \"cherry\", \"dates\", \"elephant\"]\nassert f(g())\n",
        "idx_generation": 9,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int, target: int) -> bool:\n    \"\"\"\n    Check if the product of three numbers is equal to a certain value.\n    \"\"\"\n    return x * y * z == target\ndef g(x: int, y: int, target: int):\n    z = target // (x * y)\n    return z\nassert f(g(2, 5, 100), 2, 5, 100)\n",
        "idx_generation": 170,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=24, b=18773099, c=100) -> bool:\n    \"\"\"Modify the if statement with multiple conditions\"\"\"\n    if x > 0 and a > 50 and c < 200:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 24, b = 18773099, c = 100):\n    if a > 50 and b > a and c < 200:\n        return b + a\n    else:\n        return b - a\nassert f(g())\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> List[int]:\n    \"\"\"\n    Find the indices of the target number in the given matrix.\n\n    Sample Input:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    target = 5\n\n    Sample Output:\n    [1, 1]\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                return [i, j]\n    return []\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5):\n    return matrix, target\n\nassert f(*g()) == [1, 1]\n",
        "idx_generation": 121,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a perfect square\"\"\"\n    return all(num**0.5 % 1 == 0 for num in arr)\n\ndef g():\n    return [1, 4, 9, 16, 25]\n\nassert f(g())\n",
        "idx_generation": 388,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Count the number of unique elements in a given list.\n\n    Sample Input:\n    nums = [1, 2, 3, 3, 4, 4, 5]\n\n    Sample Output:\n    5\n    \"\"\"\n    unique_nums = set(nums)\n    return len(unique_nums)\n\ndef g(nums=[1, 2, 3, 3, 4, 4, 5]):\n    return nums\n\nassert f(g()) == 5\n",
        "idx_generation": 217,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x=2, y=0) -> bool:\n    \"\"\"Check if a number is a perfect power of another number raised to a specific exponent.\"\"\"\n    return n == x ** y\ndef g(x = 2, y = 0):\n    return x ** y\nassert f(g())\n",
        "idx_generation": 7,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subsequence with a sum divisible by k\"\"\"\n    n = len(arr)\n    dp = [[False] * (k+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = True\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if arr[i-1] <= j:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][k]\ndef g(arr=[1, 2, 3, 4, 5]):\n    k = 10\n    return arr, k\nassert f(*g())\n",
        "idx_generation": 19,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome\"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 126,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=100, max_nums=2, options=[10, 25, 50, 75, 100]) -> bool:\n    \"\"\"Check if it is possible to obtain the target value by using at most max_nums numbers from the options list.\"\"\"\n    for num in arr:\n        assert num in options\n    return len(arr) <= max_nums and sum(arr) == target\ndef g(target = 100, max_nums = 2, options = [10, 25, 50, 75, 100]):\n    from itertools import combinations\n    for n in range(max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 13,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"\n    Check if the given list of words contains the target word.\n    \"\"\"\n    for word in words:\n        if word == target_word:\n            return True\n    return False\n\ndef g(target_word = 'python'):\n    return ['java', 'c++', 'python', 'javascript']\n\nassert f(g())\n",
        "idx_generation": 6,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list of integers is a palindrome.\"\"\"\n    return arr == arr[::-1]\n\ndef g(arr=[1, 2, 3, 2, 1]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 31,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"\n    Check if all the words in the list have the same length.\n    Return True if they do, False otherwise.\n    \"\"\"\n    word_length = len(words[0])\n    for word in words:\n        if len(word) != word_length:\n            return False\n    return True\n\ndef g():\n    \"\"\"\n    Generate a list of 5 random words of length 4.\n    \"\"\"\n    import random\n    import string\n    return [''.join(random.choices(string.ascii_lowercase, k=4)) for _ in range(5)]\n\nassert f(g())\n\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a prime number.\n    Return True if the number is prime, and False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 13\n\nassert f(g())\n",
        "idx_generation": 180,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"\n    Given a positive integer n, return True if the sum of the digits of n is equal to the target, otherwise return False.\n    \"\"\"\n    digit_sum = sum([int(digit) for digit in str(n)])\n    return digit_sum == target\n\ndef g(target=100):\n    return int(\"9\" * (target // 9) + str(target % 9))\n\nassert f(g())\n\n",
        "idx_generation": 44,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(d: Dict[str, int], key: str) -> bool:\n    \"\"\"\n    Given a dictionary and a key, determine if the key exists in the dictionary and its corresponding\n    value is divisible by 2.\n    \"\"\"\n    if key in d and d[key] % 2 == 0:\n        return True\n    return False\n\ndef g():\n    return {\"apple\": 5, \"banana\": 8, \"cherry\": 0}, \"banana\"\n\nassert f(*g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it contains a Pythagorean triple.\n    A Pythagorean triple is a set of three positive integers a, b, and c, such that a^2 + b^2 = c^2.\n    \"\"\"\n    squares = set()\n    for num in nums:\n        squares.add(num * num)\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[i] + nums[j] * nums[j] in squares:\n                return True\n    return False\n\ndef g():\n    return [3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 1,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a palindrome\"\"\"\n    return str(n) == str(n)[::-1]\n\ndef g():\n    return 12321\n\nassert f(g())\n",
        "idx_generation": 242,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Check if there exists a subarray of length n whose sum is divisible by n\"\"\"\n    subarrays = [arr[i:i+n] for i in range(len(arr)-n+1)]\n    for subarray in subarrays:\n        if sum(subarray) % n == 0:\n            return True\n    return False\n\ndef g(arr: List[int]):\n    n = len(arr) // 2\n    return arr[:n]\n\nassert f(n=len(g([1, 2, 3, 4, 5, 6])), arr=g([1, 2, 3, 4, 5, 6]))\n",
        "idx_generation": 103,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 72,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=16, max_nums=3, options=[2, 4, 6, 8, 10, 12, 14, 16]) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose sum is the target value.\"\"\"\n    for n in nums:\n        assert n in options\n    return len(nums) <= max_nums and sum(nums) == target\ndef g(target = 16, max_nums = 3, options = [2, 4, 6, 8, 10, 12, 14, 16]):\n    from itertools import combinations\n    for n in range(max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(d: Dict[str, int], key: str) -> bool:\n    \"\"\"\n    Given a dictionary and a key, determine if the key exists in the dictionary and its corresponding\n    value is divisible by 3.\n    \"\"\"\n    if key in d and d[key] % 3 == 0:\n        return True\n    return False\n\ndef g():\n    return {\"apple\": 6, \"banana\": 9, \"cherry\": 12}, \"cherry\"\n\nassert f(*g())\n",
        "idx_generation": 281,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], target=25, k=2) -> bool:\n    \"\"\"Find a sequence of k consecutive numbers whose sum is equal to the target\"\"\"\n    return any((sum(seq[i:i+k]) == target for i in range(len(seq)-k+1)))\ndef g(target=25, k=2):\n    seq = [i for i in range(target+1)]\n    return seq\nassert f(g())\n",
        "idx_generation": 54,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains duplicate elements.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(arr) != len(set(arr))\n\ndef g():\n    arr = [1, 2, 3, 4, 5, 1]\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if the target string is a suffix of the given string\"\"\"\n    return s.endswith(target)\n\ndef g(s=\"Hello, World!\", target=\"World!\"):\n    return s, target\n\nassert f(*g())\n\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, keyword='python', count=3) -> bool:\n    \"\"\"Find a string that contains the given keyword exactly count number of times.\"\"\"\n    return s.count(keyword) == count\ndef g(keyword='python', count=3):\n    return keyword * count\nassert f(g())\n",
        "idx_generation": 6,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(x: int, a: int = 24, b: int = 18773099) -> bool:\n    \"\"\"\n    Check if the given integer satisfies a condition based on the values of a and b.\n\n    If x is divisible by the sum of a and b, return True.\n    Otherwise, return False.\n    \"\"\"\n    if (a + b) == 0:\n        return False\n    return x % (a + b) == 0\n\ndef g(a: int = 24, b: int = 18773099):\n    \"\"\"\n    Return the sum of a and b.\n    \"\"\"\n    return a + b\n\nassert f(g())\n\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(string: str, substring: str) -> bool:\n    \"\"\"\n    Check if a given string contains a specific substring.\n    \"\"\"\n    return substring in string\n\ndef g(string = \"Hello, world!\", substring = \"world\"):\n    return string\n\nassert f(g(), \"world\")\n\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string s, determine if it is a palindrome. A string is considered a palindrome if it reads the same\n    forwards and backwards (ignoring spaces and capitalization).\n    Return True if the string is a palindrome, otherwise return False.\n    \"\"\"\n    s = s.lower().replace(\" \", \"\")\n\n    return s == s[::-1]\n\ndef g(s: str):\n    return s\n\n# Test case\ntest_string = \"A man a plan a canal Panama\"\nassert f(g(test_string))\n",
        "idx_generation": 106,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str]) -> List[str]:\n    \"\"\"\n    Given a list of strings, return a new list with the strings sorted in ascending order of their lengths.\n\n    Example:\n    strings = [\"apple\", \"banana\", \"orange\", \"kiwi\"]\n\n    The sorted list of strings is: [\"kiwi\", \"apple\", \"banana\", \"orange\"]\n    \"\"\"\n    return sorted(strings, key=len)\n\ndef g(strings=[\"apple\", \"banana\", \"orange\", \"kiwi\"]):\n    return strings\n\nassert f(g()) == [\"kiwi\", \"apple\", \"banana\", \"orange\"]\n\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if the last digit of the product of n and 7 is equal to the given string.\"\"\"\n    return str(n * 7)[-1] == s\ndef g(n=4):\n    return str(n * 7)[-1]\nassert f(g())\n",
        "idx_generation": 21,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str = 'python') -> bool:\n    \"\"\"\n    Check if a given string contains a specific target string in a case-insensitive manner.\n    Returns True if it does, False otherwise.\n    \"\"\"\n    return target.lower() in s.lower()\n\ndef g(target: str = 'python'):\n    return 'I am a fan of ' + target\n\nassert f(g())\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(radius: float, circumference: float, pi=3.14159) -> bool:\n    \"\"\"\n    Check if the given radius and circumference values match.\n    \"\"\"\n    return abs(2 * pi * radius - circumference) < 0.0001\ndef g(circumference: float, pi=3.14159):\n    radius = circumference / (2 * pi)\n    return radius\nassert f(g(10), 10)\n",
        "idx_generation": 45,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=25) -> bool:\n    \"\"\"Check if the square of a number is a perfect square.\"\"\"\n    return x ** 2 == a\ndef g(a = 25):\n    return int(a ** 0.5)\nassert f(g())\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int, a=3, b=4, c=5) -> bool:\n    \"\"\"\n    Check if three numbers form a Pythagorean triplet.\n    \"\"\"\n    return x**2 + y**2 == z**2 and (x, y, z) == (a, b, c)\ndef g(a = 3, b = 4, c = 5):\n    return (a, b, c)\nassert f(*g())\n",
        "idx_generation": 10,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is a palindrome.\n    Return True if the string is a palindrome, False otherwise.\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"\n    Given a grid of numbers, check if there exists a path from the top-left cell to the bottom-right cell\n    where the sum of the numbers along the path is greater than a given threshold.\n    Return True if a path exists, False otherwise.\n    \"\"\"\n    def find_path(grid, i, j, threshold):\n        if i == len(grid) - 1 and j == len(grid[0]) - 1:\n            return grid[i][j] > threshold\n        if i < len(grid) - 1:\n            if find_path(grid, i + 1, j, threshold - grid[i][j]):\n                return True\n        if j < len(grid[0]) - 1:\n            if find_path(grid, i, j + 1, threshold - grid[i][j]):\n                return True\n        return False\n\n    return find_path(grid, 0, 0, 0)\n\ndef g(grid=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return grid\n\nassert f(g())\n",
        "idx_generation": 0,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, max_nums=4, options=[10, 20, 30, 40, 50]) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose sum is the target value.\"\"\"\n    for n in nums:\n        assert n in options\n    return len(nums) <= max_nums and sum(nums) == target\ndef g(target=100, max_nums=4, options=[10, 20, 30, 40, 50]):\n    from itertools import combinations_with_replacement\n    for n in range(max_nums + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 59,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if the target string is a substring of the given string\"\"\"\n    return target in s\n\ndef g(s=\"Hello, World!\", target=\"World\"):\n    return s, target\n\nassert f(*g())\n\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, find the index of the first occurrence of the target in the list.\n    Return True if the target is found, False otherwise.\n    \"\"\"\n    for i, num in enumerate(lst):\n        if num == target:\n            return True, i\n    return False, -1\n\ndef g(lst=[1, 2, 3, 4, 5], target=3):\n    return lst, target\n\nassert f(*g())[0]\n",
        "idx_generation": 136,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str) -> bool:\n    \"\"\"\n    Check if the given date is in the past.\n\n    Sample Input:\n    date = \"2022-06-01\"\n\n    Sample Output:\n    True\n    \"\"\"\n    current_date = datetime.now().strftime(\"%Y-%m-%d\")\n    return date < current_date\n\ndef g(date=\"2022-06-01\"):\n    return date\n\nassert f(g()) == True\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=3) -> bool:\n    \"\"\"Check if the list contains exactly n number of elements.\"\"\"\n    return len(arr) == n\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr[:3]\n\nassert f(g())\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target_sum=100) -> bool:\n    \"\"\"Check if a given number is a perfect square and equal to the target sum.\"\"\"\n    return n ** 0.5 == int(n ** 0.5) and n == target_sum\n\ndef g(target_sum=100):\n    return int(target_sum ** 0.5) ** 2\n\nassert f(g())\n",
        "idx_generation": 38,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, k: int) -> bool:\n    \"\"\"\n    Check if a string contains exactly k occurrences of the letter 'a'.\n    \"\"\"\n    count = string.count('a')\n    return count == k\n\ndef g(k=2):\n    return \"banana\"\n\nassert f(g(), k=3)\n",
        "idx_generation": 60,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Check if the target string is a substring of the given string.\n    \"\"\"\n    return target in s\n\ndef g(s = \"racecar\", target = \"race\"):\n    return s, target\n\nassert f(*g())\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], t=0, a=0, e=0, s=1) -> bool:\n    \"\"\"Check if the sublist of values is a palindrome\"\"\"\n    sublist = [x[i] for i in range(a, e, s)]\n    return sublist == sublist[::-1]\ndef g(t=0, a=0, e=0, s=1):\n    x = [i for i in range(10)]\n    return x\nassert f(g())\n",
        "idx_generation": 36,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exist three numbers in the list that add up to the target integer. The numbers can be repeated.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            for k in range(len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g(numbers=[-1, 0, 1, 2]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the given list that contains exactly k different numbers.\n    \"\"\"\n    from itertools import combinations\n    for i in range(1, len(nums) + 1):\n        for comb in combinations(nums, i):\n            if len(set(comb)) == k:\n                return True\n    return False\n\ndef g(k=3):\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 180,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> int:\n    \"\"\"\n    Count the number of even numbers in the given list and return the count.\n\n    Example:\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    There are 5 even numbers in the list, so the function should return 5.\n    \"\"\"\n    return sum(1 for num in numbers if num % 2 == 0)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 5\n\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(email: str, pattern=r'^[a-zA-Z0-9]+@[a-zA-Z]+\\.[a-zA-Z]{2,}$') -> bool:\n    \"\"\"Check if the email matches the given pattern\"\"\"\n    return re.match(pattern, email) is not None\n\ndef g(email='example@example.com', pattern=r'^[a-zA-Z0-9]+@[a-zA-Z]+\\.[a-zA-Z]{2,}$'):\n    return email\n\nassert f(g())\n",
        "idx_generation": 100,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(sentence: str, word: str, pattern=r'\\b\\w+\\b') -> bool:\n    \"\"\"Check if the given word is present in the sentence\"\"\"\n    return re.search(pattern, sentence) is not None\n\ndef g(sentence='This is a sample sentence', word='sample', pattern=r'\\b\\w+\\b'):\n    return sentence, word\n\nassert f(*g())\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 80,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, char: str, index: int) -> bool:\n    \"\"\"\n    Check if the given character is present in the string at the specified index.\n    Return True if it is, False otherwise.\n    \"\"\"\n    return string[index] == char\n\ndef g(string=\"Hello\", char=\"H\", index=0):\n    return string, char, index\n\nassert f(*g())\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Sort the list in non-decreasing order using bubble sort algorithm.\"\"\"\n    n = len(nums)\n    for i in range(n - 1):\n        for j in range(n - i - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    return nums\n\ndef g(nums=[5, 3, 8, 2, 1]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 5, 8]\n",
        "idx_generation": 264,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char: str) -> int:\n    \"\"\"Find the count of occurrences of a given character in the string.\"\"\"\n    count = 0\n    for c in s:\n        if c == char:\n            count += 1\n    return count\n\ndef g(s=\"Hello World!\", char=\"o\"):\n    return s, char\n\nassert f(*g()) == 2\n",
        "idx_generation": 171,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if a string contains all the given words\"\"\"\n    return all(word in string for word in words)\n\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return \"This string contains all the given words: \" + \" \".join(words)\n\nassert f(g())\n",
        "idx_generation": 151,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is symmetric along its main diagonal.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    \"\"\"\n    This solution checks if each element in the matrix is equal to its corresponding element along the main diagonal.\n    \"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 147,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"\n    Check if there exists a substring in the given string that contains exactly k different characters.\n    \"\"\"\n    n = len(s)\n    for i in range(n):\n        for j in range(i+k, n+1):\n            if len(set(s[i:j])) == k:\n                return True\n    return False\n\ndef g(s = 'abcde'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 34,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Check if the sum of any two numbers in a list is equal to a specific target number.\"\"\"\n    return any(i + j == n for i in arr for j in arr)\ndef g(n = 5):\n    return [1, 2, 3, 4, n-10]\nassert f(g())\n",
        "idx_generation": 7,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=999999, b=888888) -> bool:\n    \"\"\"Find the largest number between two given numbers\"\"\"\n    return x == max(a, b)\n\ndef g(a = 999999, b = 888888):\n    return max(a, b)\n\nassert f(g())\n",
        "idx_generation": 103,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, char: str) -> bool:\n    \"\"\"\n    Check if the given character is present in the string in reverse order.\n    Return True if it is, False otherwise.\n    \"\"\"\n    return char[::-1] in string\n\ndef g(string=\"Hello\", char=\"H\"):\n    return string, char\n\nassert f(*g())\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='aeiou') -> bool:\n    \"\"\"Check if all the characters in the string s are vowels.\"\"\"\n    return all(char in target for char in s)\n\ndef g(target='aeiou'):\n    return target\n\nassert f(g())\n",
        "idx_generation": 54,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Given an integer n, return True if n is a prime number, otherwise return False.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(n: int):\n    return n\nassert f(g(17))\n",
        "idx_generation": 33,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sides: List[int], a=3, b=4, c=5) -> bool:\n    \"\"\"\n    Check if the given side lengths form a right-angled triangle.\n    \"\"\"\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\ndef g(a=3, b=4, c=5):\n    return [a, b, c]\nassert f(g())\n",
        "idx_generation": 45,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, vowels='aeiou', target='yvywuvy') -> bool:\n    \"\"\"\n    Find a string that, when all vowels are replaced with the next vowel in the sequence, has the given result.\n    \"\"\"\n    next_vowels = ''.join((vowels[(vowels.index(c) + 1) % len(vowels)] if c in vowels else c for c in s))\n    return next_vowels == target\ndef g(vowels = 'aeiou', target = 'yvywuvy'):\n    return ''.join((vowels[(vowels.index(c) - 1) % len(vowels)] if c in vowels else c) for c in target)\nassert f(g())\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> int:\n    \"\"\"Find the nth Fibonacci number\"\"\"\n    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib_list = [0, 1]\n        for i in range(2, n):\n            fib_list.append(fib_list[i-1] + fib_list[i-2])\n        return fib_list[-1]\n\ndef g():\n    return 6\n\nassert f(g()) == 5\n\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, find the two numbers that appear only once and return them in a list.\n\n    Sample Input:\n    nums = [1, 2, 1, 3, 2, 5]\n\n    Sample Output:\n    [3, 5]\n    \"\"\"\n    xor = 0\n    for num in nums:\n        xor ^= num\n\n    # Find the rightmost set bit in xor\n    rightmost_set_bit = xor & -xor\n\n    num1 = num2 = 0\n\n    for num in nums:\n        if num & rightmost_set_bit:\n            num1 ^= num\n        else:\n            num2 ^= num\n\n    return [num1, num2]\n\ndef g():\n    return [1, 2, 1, 3, 2, 5]\n\nassert f(g()) == [3, 5]\n",
        "idx_generation": 429,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], pattern: str) -> bool:\n    \"\"\"\n    Check if any of the strings in the list match the given pattern.\n    \"\"\"\n    for string in strings:\n        if pattern in string:\n            return True\n    return False\n\ndef g(strings = [\"apple\", \"banana\", \"cherry\"], pattern = \"na\"):\n    return strings\n\nassert f(g(), \"na\")\n\n",
        "idx_generation": 60,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=10) -> bool:\n    \"\"\"\n    Check if the given matrix has exactly n rows and columns.\n    \"\"\"\n    return len(matrix) == n and all(len(row) == n for row in matrix)\ndef g(n=10):\n    return [[i] * n for i in range(n)]\nassert f(g())\n",
        "idx_generation": 17,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='pythonprogramming', target='') -> bool:\n    \"\"\"Find the longest common subsequence between s and target using the slice indices\"\"\"\n    (i, j, k) = inds\n    return len(set(s[i:j:k]) & set(target)) == len(set(target))\ndef g(s = 'pythonprogramming', target = ''):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if len(set(s[i:j:k]) & set(target)) == len(set(target)):\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n",
        "idx_generation": 233,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"\n    Check if there exists a substring in the given string that contains exactly k consecutive characters.\n    \"\"\"\n    n = len(s)\n    for i in range(n-k+1):\n        if len(set(s[i:i+k])) == k:\n            return True\n    return False\n\ndef g(s='abcdefghi'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(points: List[Tuple[float, float]]) -> bool:\n    \"\"\"\n    Calculate the distance between each pair of points and return True if the sum of distances is a prime number.\n    \"\"\"\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    distances = []\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n            distances.append(distance)\n    \n    sum_of_distances = sum(distances)\n    return is_prime(sum_of_distances)\n\ndef g(points=[(1, 1), (2, 3), (4, 5), (6, 7)]):\n    return points\n\nassert f(g())\n",
        "idx_generation": 240,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains any duplicate elements.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(arr) != len(set(arr))\n\ndef g():\n    return [1, 2, 3, 4, 5, 5]\n\nassert f(g())\n",
        "idx_generation": 319,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    \"\"\"\n    Given a list of words, determine if there exists a word that is an anagram of another word in the list.\n    Return True if such a word exists, False otherwise.\n    \"\"\"\n    seen = set()\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        if sorted_word in seen:\n            return True\n        seen.add(sorted_word)\n    return False\n\ndef g(words=[\"listen\", \"silent\", \"hello\", \"world\"]):\n    return words\n\nassert f(g())\n",
        "idx_generation": 121,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, parts=['Python', 'is', 'awesome'], string='Pythonisawesome') -> bool:\n    \"\"\"\n    Find a separator that when used to join a given string gives a certain result.\n    \"\"\"\n    return x.join(parts) == string\ndef g(parts = ['Python', 'is', 'awesome'], string = 'Pythonisawesome'):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g())\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an identity matrix.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                if matrix[i][j] != 1:\n                    return False\n            else:\n                if matrix[i][j] != 0:\n                    return False\n    return True\n\ndef g(matrix=[[1, 0, 0], [0, 1, 0], [0, 0, 1]]):\n    \"\"\"\n    This solution checks if each element in the matrix matches the criteria for an identity matrix.\n    \"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 368,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given an integer matrix, determine if it is a Toeplitz matrix.\n    A Toeplitz matrix is one in which every diagonal from top-left to bottom-right has the same element.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    for i in range(rows-1):\n        for j in range(cols-1):\n            if matrix[i][j] != matrix[i+1][j+1]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [4, 1, 2], [7, 4, 1]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 25,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return string == string[::-1]\n\ndef g(string = 'racecar'):\n    return string\n\nassert f(g())\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are any duplicate elements in a list\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\n\nassert f(g())\n",
        "idx_generation": 55,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is an Armstrong number\"\"\"\n    num = str(n)\n    power = len(num)\n    sum = 0\n    for digit in num:\n        sum += int(digit) ** power\n    return sum == n\n\ndef g():\n    return 153\n\nassert f(g())\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(res: int, n=1234567890) -> bool:\n    \"\"\"\n    Check if a given number n is a palindrome.\n    \"\"\"\n    return res == int(str(n)[::-1])\n\ndef g(n = 1234567890):\n    return int(str(n)[::-1])\n\nassert f(g())\n",
        "idx_generation": 156,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in non-increasing order.\"\"\"\n    return all(lst[i] >= lst[i+1] for i in range(len(lst)-1))\n\ndef g(lst=[5, 4, 3, 2, 1]):\n    return lst\n\nassert f(g())\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"Find the largest and smallest numbers in the given list and return them as a list.\"\"\"\n    min_num = float('inf')\n    max_num = float('-inf')\n    for num in arr:\n        if num < min_num:\n            min_num = num\n        if num > max_num:\n            max_num = num\n    return [min_num, max_num]\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g()) == [1, 9]\n\n",
        "idx_generation": 79,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 55,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Given two strings s1 and s2, determine if s2 is a rotation of s1 using only one call to isSubstring function.\n    \"\"\"\n    if len(s1) != len(s2):\n        return False\n    s1s1 = s1 + s1\n    return s2 in s1s1\n\ndef g(s1=\"waterbottle\", s2=\"bottlewater\"):\n    return s1, s2\n\nassert f(*g())\n",
        "idx_generation": 7,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is an Armstrong number\"\"\"\n    temp = n\n    num_digits = len(str(n))\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** num_digits\n        temp //= 10\n    return n == sum\n\ndef g(n=153):\n    return n\n\nassert f(g())\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, char='a') -> bool:\n    \"\"\"Check if a character appears at the beginning of a string\"\"\"\n    return string[0] == char\ndef g(char='a'):\n    string = 'abcdefg'\n    return string\nassert f(g())\n",
        "idx_generation": 8,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a lower triangular matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i + 1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(matrix=[[1, 0, 0], [2, 3, 0], [4, 5, 6]]):\n    \"\"\"Return the matrix.\"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if a given string is a palindrome.\"\"\"\n    return string == string[::-1]\n\ndef g(string = \"radar\"):\n    return string\n\nassert f(g())\n",
        "idx_generation": 76,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transpose the given matrix.\n\n    Sample Input:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\n    Sample Output:\n    [\n        [1, 4, 7],\n        [2, 5, 8],\n        [3, 6, 9]\n    ]\n    \"\"\"\n    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n",
        "idx_generation": 121,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if there exists a row or column that contains all zeros.\n    Return True if such a row or column exists, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    row_zeros = [0] * rows\n    col_zeros = [0] * cols\n\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] == 0:\n                row_zeros[i] = 1\n                col_zeros[j] = 1\n\n    return any(row_zeros) or any(col_zeros)\n\ndef g(matrix=[[1, 2, 3], [0, 5, 6], [7, 8, 0]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[str], target_length=5) -> bool:\n    \"\"\"Check if there exists a string in the list whose length is equal to the target length.\"\"\"\n    for string in lst:\n        if len(string) == target_length:\n            return True\n    return False\n\ndef g(target_length=5):\n    return ['apple', 'banana', 'kiwi', 'pear', 'orange']\n\nassert f(g())\n",
        "idx_generation": 11,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose sum is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 90,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    return 'madam'\nassert f(g())\n",
        "idx_generation": 18,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given list of lists represents a valid sudoku solution.\n    A valid sudoku solution must satisfy the following conditions:\n    1) Each row must contain all digits from 1 to 9 without repetition.\n    2) Each column must contain all digits from 1 to 9 without repetition.\n    3) Each of the nine 3x3 sub-grids must contain all digits from 1 to 9 without repetition.\n    \"\"\"\n    def is_valid_row(row: List[int]) -> bool:\n        return sorted(row) == list(range(1, 10))\n\n    def is_valid_column(col: List[int]) -> bool:\n        return sorted(col) == list(range(1, 10))\n\n    def is_valid_subgrid(subgrid: List[List[int]]) -> bool:\n        flat_subgrid = [num for row in subgrid for num in row]\n        return sorted(flat_subgrid) == list(range(1, 10))\n\n    # Check rows\n    for row in arr:\n        if not is_valid_row(row):\n            return False\n\n    # Check columns\n    for col in zip(*arr):\n        if not is_valid_column(list(col)):\n            return False\n\n    # Check subgrids\n    for i in range(0, 9, 3):\n        for j in range(0, 9, 3):\n            subgrid = [row[j:j+3] for row in arr[i:i+3]]\n            if not is_valid_subgrid(subgrid):\n                return False\n\n    return True\n\ndef g():\n    arr = [[5, 3, 4, 6, 7, 8, 9, 1, 2],\n           [6, 7, 2, 1, 9, 5, 3, 4, 8],\n           [1, 9, 8, 3, 4, 2, 5, 6, 7],\n           [8, 5, 9, 7, 6, 1, 4, 2, 3],\n           [4, 2, 6, 8, 5, 3, 7, 9, 1],\n           [7, 1, 3, 9, 2, 4, 8, 5, 6],\n           [9, 6, 1, 5, 3, 7, 2, 8, 4],\n           [2, 8, 7, 4, 1, 9, 6, 3, 5],\n           [3, 4, 5, 2, 8, 6, 1, 7, 9]]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray) -> bool:\n    \"\"\"\n    Check if a 2D array has a saddle point.\n    A saddle point is an element of the matrix such that it is the minimum element in its row and the maximum element in its column.\n    \"\"\"\n    min_row = np.min(arr, axis=1)\n    max_col = np.max(arr, axis=0)\n\n    for i in range(arr.shape[0]):\n        for j in range(arr.shape[1]):\n            if arr[i][j] == min_row[i] and arr[i][j] == max_col[j]:\n                return True\n    return False\n\ndef g():\n    arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    return arr\n\nassert f(g())\n",
        "idx_generation": 55,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if the sum of n and m is even.\"\"\"\n    return (n + m) % 2 == 0\n\ndef g():\n    return 7, 3\n\nassert f(*g())\n",
        "idx_generation": 109,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='abc', b='abcdef') -> bool:\n    \"\"\"Check if a string is a subsequence of another string.\"\"\"\n    i = 0\n    for char in b:\n        if i == len(s):\n            break\n        if char == s[i]:\n            i += 1\n    return i == len(s)\n\ndef g(a='abc', b='abcdef'):\n    return a\n\nassert f(g())\n",
        "idx_generation": 127,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=5, m=5) -> bool:\n    \"\"\"\n    Check if the given matrix has exactly n rows and m columns.\n\n    Sample Input:\n    matrix = [\n        [1, 2, 3, 4, 5],\n        [6, 7, 8, 9, 10],\n        [11, 12, 13, 14, 15],\n        [16, 17, 18, 19, 20],\n        [21, 22, 23, 24, 25]\n    ]\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(matrix) == n and all(len(row) == m for row in matrix)\ndef g(n=5, m=5):\n    return [[i * m + j + 1 for j in range(m)] for i in range(n)]\nassert f(g())",
        "idx_generation": 6,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n = 3) -> bool:\n    \"\"\"Check if there exists a sublist of a specified length, such that the sum of its elements is divisible by n.\"\"\"\n    for i in range(len(arr) - n + 1):\n        if sum(arr[i:i+n]) % n == 0:\n            return True\n    return False\ndef g(n = 3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 80,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: float, n=5) -> bool:\n    \"\"\"Check if the square root of x is an integer\"\"\"\n    return int(sqrt(x)) ** 2 == x and n == 5\ndef g(n = 5):\n    return n ** 2\nassert f(g())\n",
        "idx_generation": 95,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a power of two.\n    Return True if the number is a power of two, False otherwise.\n    \"\"\"\n    return n != 0 and (n & (n - 1)) == 0\n\ndef g():\n    return 16\n\nassert f(g())\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome list.\n\n    Sample Input:\n    nums = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int]):\n    return nums + nums[::-1]\n\nassert f(g([1, 2, 3, 2, 1])) == True\n\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='world', num_repeats=3) -> bool:\n    \"\"\"Check if a given string is equal to the target string repeated multiple times\"\"\"\n    return s == target * num_repeats\ndef g(target='world', num_repeats=3):\n    return target * num_repeats\nassert f(g())\n",
        "idx_generation": 12,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"Find two numbers in a list that add up to the target value\"\"\"\n    n = len(nums)\n    nums.sort()\n    left, right = 0, n - 1\n    while left < right:\n        curr_sum = nums[left] + nums[right]\n        if curr_sum == target:\n            return True\n        elif curr_sum < target:\n            left += 1\n        else:\n            right -= 1\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    \"\"\"Return the list of numbers and the target value\"\"\"\n    return nums, target\n\nassert f(g()[0], g()[1])\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if the absolute difference between two numbers is equal to the third number\"\"\"\n    return abs(x - y) == z or abs(x - z) == y or abs(y - z) == x\ndef g(x: int, y: int):\n    z = abs(x - y)\n    return z\nassert f(g(10, 5), 10, 5)\n",
        "idx_generation": 231,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_word='hello') -> bool:\n    \"\"\"\n    Given a string, determine if it contains a specific word.\n    The goal is to find a string s that contains the target word.\n    \"\"\"\n    return target_word in s.split()\n\ndef g(target_word='hello'):\n    return 'Hello, how are you? I hope you are doing well. This is just a sample sentence containing the target word: ' + target_word\n\nassert f(g())\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Remove all duplicate numbers from the given list and return a new list with unique numbers.\n\n    Sample Input:\n    numbers = [1, 2, 2, 3, 4, 4, 5, 5, 6, 7]\n\n    Sample Output:\n    [1, 2, 3, 4, 5, 6, 7]\n    \"\"\"\n    unique_numbers = list(set(numbers))\n    return unique_numbers\n\ndef g():\n    return [1, 2, 2, 3, 4, 4, 5, 5, 6, 7]\n\nassert f(g()) == [1, 2, 3, 4, 5, 6, 7]\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if the matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = n * (n ** 2 + 1) // 2\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for col in range(n):\n        if sum(matrix[i][col] for i in range(n)) != target_sum:\n            return False\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(matrix[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n    return True\n\ndef g(matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 47,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    A magic square is a square matrix where the sum of each row, column, and diagonal is the same.\n    Return True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    \n    return all(sum == target_sum for sum in row_sums + col_sums + [diagonal_sum1, diagonal_sum2])\n\ndef g(n=3):\n    \"\"\"\n    Generate a magic square of size n x n.\n    \"\"\"\n    square = [[0] * n for _ in range(n)]\n    i, j = 0, n // 2\n    \n    for num in range(1, n**2 + 1):\n        square[i][j] = num\n        new_i = (i - 1) % n\n        new_j = (j + 1) % n\n        if square[new_i][new_j] != 0:\n            i += 1\n        else:\n            i, j = new_i, new_j\n    \n    return square\n\nassert f(g())\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray with a sum divisible by k\"\"\"\n    prefix_sum = [0]\n    for num in nums:\n        prefix_sum.append((prefix_sum[-1] + num) % k)\n    freq = {}\n    for num in prefix_sum:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            freq[num] += 1\n    for key, value in freq.items():\n        if value > 1:\n            return True\n    return False\ndef g(k=3):\n    nums = [4, 5, 6, 7, 8]\n    return nums\nassert f(g())\n",
        "idx_generation": 4,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome and contains at least two different vowels.\n    \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s = s.lower()\n    palindrome = s == s[::-1]\n    count = len(set([c for c in s if c in vowels]))\n    return palindrome and count >= 2\n\ndef g():\n    return \"Able was I ere I saw Elba\"\n\nassert f(g())\n",
        "idx_generation": 1,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list that sums up to k.\n    Return True if such a subarray exists, False otherwise.\n    \"\"\"\n    prefix_sum = {0: -1}\n    curr_sum = 0\n    for i, num in enumerate(arr):\n        curr_sum += num\n        if curr_sum - k in prefix_sum:\n            return True\n        prefix_sum[curr_sum] = i\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 10)\n\nassert f(*g())\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string has exactly n vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return sum(1 for char in s if char.lower() in vowels) == n\ndef g(n = 3):\n    return 'aeiou'[:n]\nassert f(g())\n",
        "idx_generation": 3,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, li=[2, 4, 6, 8, 10], target=16) -> bool:\n    \"\"\"\n    Check if the given number n can be expressed as the sum of any two numbers in the list.\n\n    Sample Input:\n    n = 12\n\n    Sample Output:\n    True\n    \"\"\"\n    return any((n - x) in li for x in li)\ndef g(li=[2, 4, 6, 8, 10], target=16):\n    return li[0] + li[1]\nassert f(g())\n",
        "idx_generation": 6,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target_char='a') -> bool:\n    \"\"\"\n    Check if the target_char is present at least twice in the string.\n    \"\"\"\n    count = string.count(target_char)\n    return count >= 2\n\ndef g(string='banana', target_char='a'):\n    return string\n\nassert f(g())\n",
        "idx_generation": 20,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='moz', count=70, length=210) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '_'\nassert f(g())\n",
        "idx_generation": 58,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=987654321) -> bool:\n    \"\"\"Check if the given number x is a factor of the number a.\"\"\"\n    return a % x == 0\ndef g(a = 987654321):\n    return 3\nassert f(g())\n",
        "idx_generation": 12,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(s1: str, s2: str, s3: str) -> bool:\n    \"\"\"Check if s3 can be formed by interleaving s1 and s2.\"\"\"\n    if len(s1) + len(s2) != len(s3):\n        return False\n    dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n    dp[0][0] = True\n    for i in range(len(s1) + 1):\n        for j in range(len(s2) + 1):\n            if i > 0 and s1[i-1] == s3[i+j-1]:\n                dp[i][j] |= dp[i-1][j]\n            if j > 0 and s2[j-1] == s3[i+j-1]:\n                dp[i][j] |= dp[i][j-1]\n    return dp[-1][-1]\n\ndef g(s1=\"aab\", s2=\"axy\", s3=\"aaxaby\"):\n    return s1, s2, s3\n\nassert f(*g())\n",
        "idx_generation": 169,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target_word=\"python\") -> bool:\n    \"\"\"\n    Given a list of words, find if there is a word in the list that is an anagram of the target_word.\n    \"\"\"\n    def is_anagram(word, target_word):\n        if len(word) != len(target_word):\n            return False\n        return sorted(word) == sorted(target_word)\n\n    for word in words:\n        if is_anagram(word, target_word):\n            return True\n    return False\n\ndef g(words=[\"python\", \"java\", \"ruby\", \"haskell\"]):\n    return words\n\nassert f(g())\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"\n    Check if there exists a pair of words in the list that have a combined length greater than or equal to a specific value.\n    \"\"\"\n    for i in range(len(words)):\n        for j in range(i+1, len(words)):\n            if len(words[i]) + len(words[j]) >= target_length:\n                return True\n    return False\n\ndef g(target_length=5):\n    return [\"hello\", \"world\", \"python\", \"programming\", \"puzzles\"]\nassert f(g())\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=3) -> bool:\n    \"\"\"\n    Given a string, determine if it is a palindrome with a length greater than or equal to the target length.\n\n    Sample Input:\n    `\"racecar\"`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return len(s) >= target and s == s[::-1]\ndef g(target = 3):\n    return \"racecar\"\nassert f(g())\n",
        "idx_generation": 9,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, determine if it is a perfect sequence.\n    A perfect sequence is a sequence where each element is equal to the sum of all the previous elements.\n\n    Example:\n    Input: [1, 2, 3, 6]\n    Output: True\n    Explanation: The given list is a perfect sequence since 1 + 2 + 3 = 6.\n    \"\"\"\n    for i in range(2, len(arr)):\n        if arr[i] != sum(arr[:i]):\n            return False\n    return True\n\ndef g(arr = [1, 2, 3, 6]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target=\"hello\") -> bool:\n    \"\"\"\n    Given a string, check if it can be transformed into the target string by rearranging the characters.\n    Return True if it is possible, False otherwise.\n    \"\"\"\n    def rearrange_string(string, target):\n        if len(string) != len(target):\n            return False\n        return sorted(string) == sorted(target)\n\n    return rearrange_string(string, target)\n\ndef g(string=\"heoll\"):\n    return string\n\nassert f(g())\n",
        "idx_generation": 0,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr = 'Python') -> bool:\n    \"\"\"Check if a given substring is present in a given string.\"\"\"\n    return substr in string\n\ndef g(string = 'Hello, Python!'):\n    return string\n\nassert f(g())\n\n",
        "idx_generation": 72,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a cyclic permutation of another list.\n\n    A cyclic permutation is a permutation of a sequence in which the last element becomes the first, and the rest of the elements are shifted one position to the right.\n\n    Example:\n    nums1 = [1, 2, 3, 4, 5]\n    nums2 = [5, 1, 2, 3, 4]\n    Output: True\n\n    nums1 = [1, 2, 3, 4, 5]\n    nums2 = [5, 4, 3, 2, 1]\n    Output: False\n    \"\"\"\n    return any(nums == nums[i+1:] + nums[:i+1] for i in range(len(nums)))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "idx_generation": 283,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target_sum=499500) -> bool:\n    \"\"\"Find a permutation of [1, 2, ..., 1000] such that the sum of any two adjacent elements is not equal to the target_sum.\"\"\"\n    return sorted(li) == list(range(1, 1001)) and all((li[i] + li[i+1] != target_sum) for i in range(len(li)-1))\ndef g(target_sum=499500):\n    return [i+1 for i in range(1000) if i+1 != target_sum-(i+1)]\nassert f(g())\n",
        "idx_generation": 1,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"\n    Find a string that contains at least n consecutive vowels.\n    \"\"\"\n    vowels = \"aeiou\"\n\n    consecutive_count = 0\n    for char in s:\n        if char.lower() in vowels:\n            consecutive_count += 1\n            if consecutive_count >= n:\n                return True\n        else:\n            consecutive_count = 0\n\n    return False\n\ndef g(n=3):\n    return \"a\" * (n-1) + \"b\" + \"e\" * n + \"c\"\n\nassert f(g())\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are four numbers in a list whose sum equals a target number.\n    \"\"\"\n    complements = set()\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if target - nums[i] - nums[j] - nums[k] in complements:\n                    return True\n                complements.add(nums[i] + nums[j] + nums[k])\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(), target=20)\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, t=150, upper=30) -> bool:\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n    \"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper\ndef g(t = 150, upper = 30):\n    # Faster solution for simultaneously solving multiple problems is of course possible\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\nassert f(g())\n",
        "idx_generation": 39,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subsequence of the list that contains both positive and negative numbers.\n    Return True if a subsequence exists, False otherwise.\n    \"\"\"\n    def is_positive(n):\n        return n > 0\n\n    def is_negative(n):\n        return n < 0\n\n    def dfs(nums, path):\n        if any(is_positive(num) for num in path) and any(is_negative(num) for num in path):\n            return True\n        if not nums:\n            return False\n        return dfs(nums[1:], path + [nums[0]]) or dfs(nums[1:], path)\n\n    return dfs(nums, [])\n\ndef g(nums=[-1, 2, -3, 4, -5, 6, -7, 8]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list contains only even numbers\"\"\"\n    return all(num % 2 == 0 for num in arr)\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 406,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"\n    Given a string s, determine if the target string is a substring of s when both are sorted in alphabetical order.\n    The goal is to check if the sorted version of the target string is present as a substring in the sorted version of s.\n    \"\"\"\n    sorted_s = ''.join(sorted(s))\n    sorted_target = ''.join(sorted(target))\n    return sorted_target in sorted_s\n\ndef g(s='python'):\n    return ''.join(sorted(s))\n\nassert f(g())\n",
        "idx_generation": 2,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if n is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=4, length=12) -> bool:\n    \"\"\"Check if a string contains a given substring a certain number of times and has a specific length.\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring='abc', count=4, length=12):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * 'X'\nassert f(g())\n",
        "idx_generation": 58,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"\n    Check if a string is a palindrome after removing n characters.\n\n    Example:\n    s = \"racecar\"\n    n = 2\n    Output: True (Removing 2 characters, we get \"rceca\", which is a palindrome)\n    \"\"\"\n    if s == s[::-1]:\n        return True\n    for i in range(len(s)):\n        new_s = s[:i] + s[i+1:]\n        if new_s == new_s[::-1]:\n            return True\n    return False\n\ndef g(s=\"racecar\", n=3):\n    return s\n\nassert f(g())\n",
        "idx_generation": 12,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int]) -> bool:\n    \"\"\"\n    Check if a given list of integers is a Fibonacci sequence.\n    Return True if the list is a Fibonacci sequence, and False otherwise.\n    \"\"\"\n    a, b = 0, 1\n    for num in x:\n        if num != a:\n            return False\n        a, b = b, a + b\n    return True\n\ndef g():\n    return [0, 1, 1, 2, 3, 5, 8, 13]\n\nassert f(g())\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(sentence: str, word: str, pattern=r'\\b\\w+\\b') -> bool:\n    \"\"\"Check if the given word is present in the sentence and it consists of only digits\"\"\"\n    return re.search(pattern, sentence) is not None and word.isdigit()\n\ndef g(sentence='This is a sample sentence', word='12345', pattern=r'\\b\\w+\\b'):\n    return sentence, word\n\nassert f(*g())\n",
        "idx_generation": 390,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisor=2) -> bool:\n    \"\"\"Check if n is divisible by the given divisor.\"\"\"\n    return n % divisor == 0\n\ndef g(divisor=2):\n    return 10\n\nassert f(g())\n",
        "idx_generation": 107,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, dictionary: List[str]) -> bool:\n    \"\"\"\n    Given a string word and a dictionary of strings, determine if word can be segmented into a space-separated sequence\n    of one or more dictionary words.\n    \"\"\"\n    n = len(word)\n    dp = [False] * (n + 1)\n    dp[0] = True\n\n    for i in range(1, n + 1):\n        for j in range(i):\n            if dp[j] and word[j:i] in dictionary:\n                dp[i] = True\n                break\n\n    return dp[n]\n\ndef g():\n    word = \"applepenapple\"\n    dictionary = [\"apple\", \"pen\"]\n    return word, dictionary\n\nassert f(*g()) == True\n",
        "idx_generation": 260,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a given number is a power of two\"\"\"\n    if n == 0:\n        return False\n    while n != 1:\n        if n % 2 != 0:\n            return False\n        n = n // 2\n    return True\ndef g():\n    return 16\nassert f(g())\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the product of all the numbers in the given list.\n\n    Example:\n    nums = [1, 2, 3, 4]\n    The product of all the numbers is 1 * 2 * 3 * 4 = 24.\n    \"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product\n\ndef g():\n    return [1, 2, 3, 4]\n\nassert f(g()) == 24\n\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"level\"\n\nassert f(g())\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    A magic square is a square matrix where the sums of each row, each column, and both diagonals are the same.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) != target_sum:\n            return False\n        if sum(matrix[j][i] for j in range(n)) != target_sum:\n            return False\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(matrix[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 1,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], length: int) -> bool:\n    \"\"\"\n    Check if there exists a word in the list that has the given length.\n    \"\"\"\n    for word in words:\n        if len(word) == length:\n            return True\n    return False\n\ndef g():\n    return [\"apple\", \"banana\", \"cherry\"], 6\n\nassert f(*g())\n\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=24, b=18773099, c=100) -> bool:\n    \"\"\"Modify the if statement with multiple conditions\"\"\"\n    if x > 0 and a > 50 and c < 200:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 24, b = 18773099, c = 100):\n    if a > 50 and b > a and c < 200:\n        return b + a\n    else:\n        return b - a\nassert f(g())\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the index of the first occurrence of the target element in a list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 3\n\n    Sample Output:\n    2\n    \"\"\"\n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    return -1\n\ndef g(target=3):\n    nums = [1, 2, 3, 4, 5]\n    return nums, target\n\nassert f(*g()) == 2\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers nums, return the sum of all the unique numbers in the list.\n    \"\"\"\n    unique_nums = set(nums)\n    return sum(unique_nums)\n\ndef g():\n    nums = [1, 2, 2, 3, 3, 4, 5]\n    return nums\n\nassert f(g()) == 15\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, limit=100) -> bool:\n    \"\"\"Check if a number is a perfect square within a certain limit\"\"\"\n    return math.isqrt(n) ** 2 == n and n <= limit\ndef g(limit = 100):\n    for i in range(1, limit+1):\n        if math.isqrt(i) ** 2 == i:\n            return i\nassert f(g())\n",
        "idx_generation": 10,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=0) -> bool:\n    \"\"\"Check if there exists a subsequence with a sum divisible by k\"\"\"\n    n = len(arr)\n    dp = [[False] * (k+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = True\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if arr[i-1] <= j:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][k]\ndef g(arr=[1, 2, 3, 4, 5]):\n    k = 1\n    return arr, k\nassert f(*g())\n",
        "idx_generation": 21,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nimport itertools\n\ndef f(l: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose sum is a perfect square.\n    \"\"\"\n\n    return any(math.isqrt(a+b)**2 == a+b for a, b in itertools.combinations(l, 2))\n\ndef g(l = [1, 4, 5, 9, 16]):\n    return l\n\nassert f(g())\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, k=3) -> bool:\n    \"\"\"Find k numbers in the list that add up to the target number\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))\ndef g(target = 100, k = 3):\n    return [i for i in range(target + 1)]\nassert f(g())\n",
        "idx_generation": 25,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Check if the given string contains exactly n vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return len([c for c in s if c.lower() in vowels]) == n\ndef g(n = 10):\n    return 'aeiou' * (n // 5) + 'aeiou'[:n % 5]\nassert f(g())\n",
        "idx_generation": 16,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of elements in the given list such that their sum is equal to k.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if k - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 7)\n\nassert f(*g())\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(x: List[int]) -> int:\n    \"\"\"\n    Count the number of even elements in the given list and return the count.\n\n    Example:\n    x = [1, 2, 3, 4, 5]\n\n    The count of even elements is 2.\n    \"\"\"\n    count = 0\n    for num in x:\n        if num % 2 == 0:\n            count += 1\n    return count\n\ndef g(x: List[int]):\n    return x\n\n# Test case\ntest_list = [1, 2, 3, 4, 5]\nassert f(g(test_list)) == 2\n\n",
        "idx_generation": 412,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a palindrome number.\n\n    Sample Input:\n    n = 121\n\n    Sample Output:\n    True\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef g():\n    return 121\n\nassert f(g())\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a given number is a prime number\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g())\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]], threshold=15) -> bool:\n    \"\"\"\n    Given a grid of numbers, check if there exists a path from the top-left cell to the bottom-right cell\n    where the sum of the numbers along the path is greater than a given threshold.\n    Return True if a path exists, False otherwise.\n    \"\"\"\n    def find_path(grid, i, j, threshold):\n        if i == len(grid) - 1 and j == len(grid[0]) - 1:\n            return grid[i][j] > threshold\n        if i < len(grid) - 1:\n            if find_path(grid, i + 1, j, threshold - grid[i][j]):\n                return True\n        if j < len(grid[0]) - 1:\n            if find_path(grid, i, j + 1, threshold - grid[i][j]):\n                return True\n        return False\n\n    return find_path(grid, 0, 0, threshold)\n\ndef g(grid=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], threshold=15):\n    return grid\n\nassert f(g())\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Check if there exists a subarray of length n whose sum is divisible by the maximum element in the subarray\"\"\"\n    subarrays = [arr[i:i+n] for i in range(len(arr)-n+1)]\n    for subarray in subarrays:\n        if sum(subarray) % max(subarray) == 0:\n            return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5, 6]):\n    n = len(arr) // 2\n    return arr[:n]\n\nassert f(n=len(g()), arr=g())\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    return all(len(row) == len(matrix) for row in matrix)\n\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, max_nums=4, options=[10, 20, 30, 40, 50]) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose sum is the target value.\"\"\"\n    for n in nums:\n        assert n in options\n    return len(nums) <= max_nums and sum(nums) == target\ndef g(target = 100, max_nums = 4, options = [10, 20, 30, 40, 50]):\n    from itertools import combinations\n    for n in range(max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, lst=['apple', 'banana', 'cherry', 'durian']) -> bool:\n    \"\"\"Check if a given string is in the list\"\"\"\n    return s in lst\n\ndef g(lst=['apple', 'banana', 'cherry', 'durian']):\n    return 'cherry'\n\nassert f(g())\n",
        "idx_generation": 15,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], target=50, k=5) -> bool:\n    \"\"\"Find a sequence of k consecutive numbers whose sum is equal to the target\"\"\"\n    return any((sum(seq[i:i+k]) == target for i in range(len(seq)-k+1)))\ndef g(target=50, k=5):\n    seq = [i for i in range(target+1)]\n    return seq\nassert f(g())\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains duplicate elements.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(set(arr)) != len(arr)\n\ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='Hello, World!') -> bool:\n    \"\"\"Check if the given string is equal to the target string\"\"\"\n    return s == target\ndef g(target='Hello, World!'):\n    return target\nassert f(g())\n",
        "idx_generation": 262,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, pattern='abacaba') -> bool:\n    \"\"\"Check if the given string contains the pattern 'abacaba' exactly once.\"\"\"\n    count = s.count(pattern)\n    return count == 1\ndef g(pattern='abacaba'):\n    return pattern\nassert f(g())\n",
        "idx_generation": 16,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Check if a given number n is a Fibonacci number or not.\n    A number is a Fibonacci number if and only if one or both of (5*n^2 + 4) or (5*n^2 - 4) is a perfect square.\n    \"\"\"\n    def is_perfect_square(num):\n        return math.isqrt(num) ** 2 == num\n    \n    return is_perfect_square(5 * n**2 + 4) or is_perfect_square(5 * n**2 - 4)\n\ndef g():\n    return (8, 3)\n\nassert f(*g())\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(x: int, a: int = 24, b: int = 18773099) -> bool:\n    \"\"\"\n    Check if the given integer satisfies a condition based on the values of a and b.\n\n    If x is divisible by the product of a and b, return True.\n    Otherwise, return False.\n    \"\"\"\n    if (a * b) == 0:\n        return False\n    return x % (a * b) == 0\n\ndef g(a: int = 24, b: int = 18773099):\n    \"\"\"\n    Return the product of a and b.\n    \"\"\"\n    return a * b\n\nassert f(g())\n\n",
        "idx_generation": 384,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(t: str, s='TjQy') -> bool:\n    \"\"\"\n    Given an alphabetic string s, remove all consonants, insert a \".\" before each remaining letter (vowel),\n    and make everything lowercase.\n\n    Sample Input:\n    s = \"Internet\"\n\n    Sample Output:\n    .i.e.e\n    \"\"\"\n    i = 0\n    for c in s.lower():\n        if c in 'bcdfghjklmnpqrstvwxyz':\n            continue\n        assert t[i] == '.', f'expecting `.` at position {i}'\n        i += 1\n        assert t[i] == c, f'expecting `{c}`'\n        i += 1\n    return i == len(t)\ndef g(s = 'TjQy'):\n    return \"\".join(\".\" + c for c in s.lower() if c in \"aeiou\")\nassert f(g())\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, strings=['hello', 'world', 'python', 'programming', 'puzzle']) -> bool:\n    \"\"\"Check if the reversed version of the longest string is a subsequence of s.\"\"\"\n    longest_string = max(strings, key=len)\n    return longest_string[::-1] in string and len(set(longest_string)) == len(set(string))\ndef g(strings=['hello', 'world', 'python', 'programming', 'puzzle']):\n    return max(strings, key=len)[::-1]\nassert f(g())\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if the last digit of the product of n and 5 is equal to the given string.\"\"\"\n    return str(n * 5)[-1] == s\n\ndef g(n=4):\n    return str(n * 5)[-1]\n\nassert f(g())\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"\n    Check if the given number n is a power of a.\n\n    Sample Input:\n    `8`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return n != 0 and (n & (n - 1)) == 0 and n % a == 0\n\ndef g(a=2):\n    return 2 ** 3\n\nassert f(g())\n",
        "idx_generation": 168,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(num: int, n=10) -> bool:\n    \"\"\"\n    Given an integer, check if it is a perfect square.\n    Return True if it is a perfect square, False otherwise.\n\n    Sample Input:\n    16\n\n    Sample Output:\n    True\n    \"\"\"\n    return num > 0 and sqrt(num).is_integer()\n\ndef g(n=10):\n    return n * n\n\nassert f(g())\n",
        "idx_generation": 80,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int, a=3, b=4, c=5) -> bool:\n    \"\"\"\n    Check if three numbers form a Pythagorean triplet.\n    \"\"\"\n    return x**2 + y**2 == z**2 and (x, y, z) == (a, b, c)\ndef g(a = 3, b = 4, c = 5):\n    return (a, b, c)\nassert f(*g())\n",
        "idx_generation": 72,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    s = \"madam\"\n    return s\n\nassert f(g())\n",
        "idx_generation": 90,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"\n    Given a grid of numbers, check if there exists a path from the top-left cell to the bottom-right cell\n    where the sum of the numbers along the path is greater than a given threshold.\n    Return True if a path exists, False otherwise.\n    \"\"\"\n    def find_path(grid, i, j):\n        if i == len(grid) - 1 and j == len(grid[0]) - 1:\n            return True\n        if i < len(grid) - 1:\n            if find_path(grid, i + 1, j):\n                return True\n        if j < len(grid[0]) - 1:\n            if find_path(grid, i, j + 1):\n                return True\n        return False\n\n    return find_path(grid, 0, 0)\n\ndef g(grid=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return grid\n\nassert f(g())\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=50, max_nums=3, options=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose product is the target value.\"\"\"\n    for n in nums:\n        assert n in options\n    product = 1\n    for num in nums:\n        product *= num\n    return len(nums) <= max_nums and product == target\ndef g(target=50, max_nums=3, options=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    from itertools import combinations_with_replacement\n    for n in range(max_nums + 1):\n        for c in combinations_with_replacement(options, n):\n            product = 1\n            for num in c:\n                product *= num\n            if product == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 105,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"\n    Check if the given number is present in the list.\n    Return True if it is, False otherwise.\n    \"\"\"\n    return n in lst\n\ndef g(lst: List[int]):\n    return 5, lst\n\nassert f(*g([1, 2, 3, 4, 5]))\n",
        "idx_generation": 209,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if n is a perfect square.\"\"\"\n    return n ** 0.5 == int(n ** 0.5)\n\ndef g():\n    return 144\n\nassert f(g())\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='Python') -> bool:\n    \"\"\"\n    Check if the given string s is a palindrome and contains the target string.\n\n    Sample Input:\n    s = \"racecarPython\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1] and target in s\ndef g(target='Python'):\n    return target[::-1] + target\nassert f(g())\n",
        "idx_generation": 6,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"\n    Given a string s and a number n, determine if the string can be divided into n equal parts.\n    \"\"\"\n    if len(s) % n != 0:\n        return False\n\n    part_len = len(s) // n\n    for i in range(0, len(s), part_len):\n        if s[i:i+part_len] != s[0:part_len]:\n            return False\n\n    return True\n\ndef g(n=3):\n    return \"abcabcabc\", n\n\nassert f(*g())\n\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str = 'python') -> bool:\n    \"\"\"\n    Check if a given string contains a specific target string.\n    Returns True if it does, False otherwise.\n    \"\"\"\n    return target in s\n\ndef g(target: str = 'python'):\n    return 'I love ' + target\n\nassert f(g())\n",
        "idx_generation": 154,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"Check if a number is prime\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    return 101\nassert f(g())\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it contains two numbers that sum up to a given target.\n    \"\"\"\n    target = 10\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 205,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is symmetric (mirror image along the main diagonal).\n\n    Example:\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    output: False\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 13,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(n=19):\n    return n\n\nassert f(g())\n\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subarray within the given array such that the sum of the elements is equal to the product of the elements.\n    Returns True if such a subarray exists, False otherwise.\n    \"\"\"\n    for i in range(len(nums)):\n        subarray_sum = sum(nums[:i+1])\n        subarray_product = 1\n        for j in range(i+1):\n            subarray_product *= nums[j]\n        if subarray_sum == subarray_product:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a 2D list is a valid sudoku solution.\n    A valid sudoku solution is a grid of numbers where each row, column, and 3x3 subgrid contains all digits from 1 to 9 without repetition.\n    \"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n\n    # Check rows\n    for i in range(rows):\n        if len(set(arr[i])) != cols:\n            return False\n\n    # Check columns\n    for j in range(cols):\n        column = [arr[i][j] for i in range(rows)]\n        if len(set(column)) != rows:\n            return False\n\n    # Check 3x3 subgrids\n    for i in range(0, rows, 3):\n        for j in range(0, cols, 3):\n            subgrid = []\n            for x in range(i, i+3):\n                for y in range(j, j+3):\n                    subgrid.append(arr[x][y])\n            if len(set(subgrid)) != 9:\n                return False\n\n    return True\n\ndef g():\n    arr = [[5, 3, 4, 6, 7, 8, 9, 1, 2],\n           [6, 7, 2, 1, 9, 5, 3, 4, 8],\n           [1, 9, 8, 3, 4, 2, 5, 6, 7],\n           [8, 5, 9, 7, 6, 1, 4, 2, 3],\n           [4, 2, 6, 8, 5, 3, 7, 9, 1],\n           [7, 1, 3, 9, 2, 4, 8, 5, 6],\n           [9, 6, 1, 5, 3, 7, 2, 8, 4],\n           [2, 8, 7, 4, 1, 9, 6, 3, 5],\n           [3, 4, 5, 2, 8, 6, 1, 7, 9]]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 193,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, char: str) -> int:\n    \"\"\"\n    Find the number of occurrences of the given character in the string.\n    Return the count of occurrences.\n    \"\"\"\n    count = 0\n    for c in string:\n        if c == char:\n            count += 1\n    return count\n\ndef g(string=\"Hello\", char=\"l\"):\n    return string, char\n\nassert f(*g()) == 2\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a square matrix, calculate the sum of the elements in the diagonal.\n\n    Sample Input:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Sample Output:\n    15\n    \"\"\"\n    n = len(matrix)\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n    return diagonal_sum\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 15\n",
        "idx_generation": 425,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"\n    Check if there exists a substring in the given string that contains at least k different characters.\n    \"\"\"\n    n = len(s)\n    for i in range(n):\n        for j in range(i+k, n+1):\n            if len(set(s[i:j])) >= k:\n                return True\n    return False\n\ndef g(s='hello'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find two numbers in the list that add up to the target number.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums\n\nassert f(g(), 9)\n",
        "idx_generation": 25,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect number\"\"\"\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum == n\n\ndef g(n=28):\n    return n\n\nassert f(g())\n",
        "idx_generation": 443,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='aeiou') -> bool:\n    \"\"\"Check if the string s contains all the vowels in the target string.\"\"\"\n    return all(char in s for char in target)\n\ndef g(target='aeiou'):\n    return target\n\nassert f(g())\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"\n    Given a positive integer n, return True if n can be expressed as the sum of two prime numbers, otherwise return False.\n    \"\"\"\n    primes = set()\n    for num in range(2, n):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.add(num)\n    \n    for prime in primes:\n        if n - prime in primes:\n            return True\n    return False\n\ndef g(n=100):\n    return n\n\nassert f(g())\n",
        "idx_generation": 44,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a symmetric matrix.\n    A symmetric matrix is a square matrix that is equal to its transpose.\n    Return True if the matrix is symmetric, and False otherwise.\n    \"\"\"\n    n = len(x)\n    \n    for i in range(n):\n        for j in range(n):\n            if x[i][j] != x[j][i]:\n                return False\n    \n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Check if the target string is a subsequence of the given string.\n    Return True if target is a subsequence, False otherwise.\n    \"\"\"\n    i, j = 0, 0\n    while i < len(s) and j < len(target):\n        if s[i] == target[j]:\n            j += 1\n        i += 1\n    return j == len(target)\n\ndef g(target='abc'):\n    s = 'abracadabra'\n    return s, target\n\nassert f(*g())\n",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[str], target_length=5) -> bool:\n    \"\"\"Check if there exists a word in the list that has the target length.\"\"\"\n    for word in lst:\n        if len(word) == target_length:\n            return True\n    return False\n\ndef g(target_length=5):\n    return ['apple', 'banana', 'kiwi', 'pear', 'orange']\n\nassert f(g())\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the largest number in a given list.\n\n    Example:\n    nums = [4, 2, 7, 1, 9, 5]\n\n    The largest number in the list is 9, so the function should return 9.\n    \"\"\"\n    largest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n    return largest\n\ndef g():\n    return [4, 2, 7, 1, 9, 5]\n\nassert f(g()) == 9\n\n\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if the given string is contained in the list and if its length is greater than the average length of all strings in the list.\"\"\"\n    return s in strings and len(s) > sum(len(t) for t in strings) / len(strings)\n\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return max(strings, key=len)\n\nassert f(g())\n",
        "idx_generation": 81,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"Find the maximum element in a given matrix.\"\"\"\n    max_element = float('-inf')\n    for row in matrix:\n        for num in row:\n            if num > max_element:\n                max_element = num\n    return max_element\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == 9\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, k: int, char: str='a') -> bool:\n    \"\"\"\n    Check if a string contains exactly k occurrences of a given character.\n    \"\"\"\n    count = string.count(char)\n    return count == k\n\ndef g(k=3, char='b'):\n    return \"babababa\"\n\nassert f(g(), k=4)\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float) -> bool:\n    \"\"\"Check if the given radius of a circle can fit inside a square with side length 1.\"\"\"\n    diagonal_length = math.sqrt(2)\n    circle_diameter = radius * 2\n    return circle_diameter <= diagonal_length\n\ndef g():\n    return 0.5\n\nassert f(g())\n",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Find the number of coconuts to solve the following riddle:\n        There is a pile of coconuts, owned by five men. One man divides the pile into five equal piles, giving the\n        one left over coconut to a passing monkey, and takes away his own share. The second man then repeats the\n        procedure, dividing the remaining pile into five and taking away his share, as do the third, fourth, and\n        fifth, each of them finding one coconut left over when dividing the pile by five, and giving it to a monkey.\n        Finally, the group divide the remaining coconuts into five equal piles: this time no coconuts are left over.\n        How many coconuts were there in the original pile?\n                                          Quoted from https://en.wikipedia.org/wiki/The_monkey_and_the_coconuts\n    \"\"\"\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\n\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\n\nassert f(g())\n",
        "idx_generation": 70,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if a string is a palindrome.\n    \"\"\"\n    string = string.lower()\n    string = string.replace(\" \", \"\")\n    return string == string[::-1]\n\ndef g(string = \"A man a plan a canal Panama\"):\n    return string\n\nassert f(g())\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[str], parts=['Hello', 'World'], string='HelloWorld') -> bool:\n    \"\"\"\n    Find a separator that when used to join a given list of strings gives a certain result.\n    \"\"\"\n    return x.join(parts) == string\ndef g(parts = ['Hello', 'World'], string = 'HelloWorld'):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g())\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return string == string[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 198,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Remove all duplicates from the list and return a new list.\"\"\"\n    return list(set(nums))\n\ndef g(nums=[1, 2, 2, 3, 4, 4, 5]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5]\n",
        "idx_generation": 171,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the array is sorted in non-decreasing order.\"\"\"\n    return arr == sorted(arr)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 198,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the even numbers from the original list.\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [2, 4, 6, 8, 10]\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, word: str) -> bool:\n    \"\"\"\n    Given a sentence and a word, determine if the word is a substring of the sentence.\n    \"\"\"\n    return word in sentence\n\ndef g(sentence = \"The quick brown fox jumps over the lazy dog.\", word = \"fox\"):\n    return sentence, word\n\nassert f(*g())\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a=['cat', 'dot', 'bird'], b=['tree', 'fly', 'dot']) -> bool:\n    \"\"\"Check if the given string s is present in both lists a and b\"\"\"\n    return s in a and s in b\n\ndef g(a=['cat', 'dot', 'bird'], b=['tree', 'fly', 'dot'], s='dot'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=100) -> bool:\n    \"\"\"Check if a string contains a valid email address\"\"\"\n    import re\n    pattern = \"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n    return bool(re.match(pattern, s))\ndef g(n = 100):\n    return 'example@example.com'\nassert f(g())\n",
        "idx_generation": 30,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is an upper triangular matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [0, 4, 5], [0, 0, 6]]):\n    \"\"\"Return the matrix.\"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g(s=\"radar\"):\n    return s\n\nassert f(g())\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Find the maximum sum of any contiguous subarray in the given array.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in arr:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef g():\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n    return (arr,)\n\nassert f(*g()) == 6\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[str], target_length=5) -> bool:\n    \"\"\"Check if there exists a string in the list whose length is greater than or equal to the target length.\"\"\"\n    for string in lst:\n        if len(string) >= target_length:\n            return True\n    return False\n\ndef g(target_length=5):\n    return ['apple', 'banana', 'kiwi', 'pear', 'orange']\n\nassert f(g())\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value n, determine if there exists a subarray of the list whose sum is equal to n.\n    Return True if such a subarray exists, False otherwise.\n    \"\"\"\n    prefix_sum = 0\n    seen = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == n or prefix_sum - n in seen:\n            return True\n        seen.add(prefix_sum)\n    return False\n\ndef g(nums=[1, 4, 20, 3, 10, 5], n=33):\n    return nums, n\n\nassert f(*g())\n",
        "idx_generation": 121,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n\n    Example:\n    s = \"racecar\"\n    The string is the same when read forward and backward.\n    Therefore, the function should return True.\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s=\"racecar\"):\n    return s\n\nassert f(g()) == True\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str]) -> List[str]:\n    \"\"\"\n    Given a list of strings, return a new list with all strings reversed.\n\n    Example:\n    strings = [\"hello\", \"world\", \"python\"]\n\n    The reversed list is: [\"olleh\", \"dlrow\", \"nohtyp\"]\n    \"\"\"\n    reversed_strings = []\n    for string in strings:\n        reversed_strings.append(string[::-1])\n    return reversed_strings\n\ndef g(strings=[\"hello\", \"world\", \"python\"]):\n    return strings\n\nassert f(g()) == [\"olleh\", \"dlrow\", \"nohtyp\"]\n\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k: int) -> List[int]:\n    \"\"\"\n    Given two integers n and k, find the k smallest elements in the\n    range from 1 to n (inclusive) and return them in ascending order.\n\n    Sample Input:\n    n = 10\n    k = 3\n\n    Sample Output:\n    [1, 2, 3]\n    \"\"\"\n    return sorted(range(1, n+1))[:k]\n\ndef g(n=10, k=3):\n    return n, k\n\nassert f(*g()) == [1, 2, 3]\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x: int = 2) -> bool:\n    \"\"\"Check if n is divisible by x.\"\"\"\n    return n % x == 0\ndef g():\n    return (27, 3)\nassert f(*g())\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the list contains duplicate elements.\"\"\"\n    unique_numbers = set(numbers)\n    return len(numbers) != len(unique_numbers)\n\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 9]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 94,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Find a way to rearrange the letters in the word \"puzzle\" to get the word \"lezzup\". The answer should be represented as a list of index mappings.\n    \"\"\"\n    return ['puzzle'[i] for i in li] == list('lezzup')\ndef g():\n    return ['puzzle'.index(t) for t in 'lezzup']\nassert f(g())\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, rearrange the list such that the odd numbers appear before the even numbers.\n    Return the rearranged list.\n    \"\"\"\n    odd_nums = [num for num in nums if num % 2 != 0]\n    even_nums = [num for num in nums if num % 2 == 0]\n    return odd_nums + even_nums\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n\n",
        "idx_generation": 148,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n = 3) -> bool:\n    \"\"\"Check if there exists a sublist of a specified length, such that the sum of its elements is divisible by n.\"\"\"\n    for i in range(len(arr) - n + 1):\n        if sum(arr[i:i+n]) % n == 0:\n            return True\n    return False\ndef g(n = 4):\n    return [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\nassert f(g())\n",
        "idx_generation": 85,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if the sum of the squares of x and y is equal to the square of z\"\"\"\n    return x**2 + y**2 == z**2\n\ndef g():\n    z = 5\n    x = int(sqrt(z**2 / 2))\n    y = int(sqrt(z**2 - x**2))\n    return x, y, z\n\nassert f(*g())\n",
        "idx_generation": 110,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"\n    Check if the sum of the first n natural numbers is greater than or equal to m.\n    Return True if the sum is greater than or equal to m, False otherwise.\n    \"\"\"\n    def sum_of_natural_numbers(n):\n        return n * (n + 1) // 2\n\n    return sum_of_natural_numbers(n) >= m\n\ndef g(m=10):\n    return m\n\nassert f(g())\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers is a palindrome.\n\n    Sample Input:\n    nums = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 403,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(s: str, pattern=r'\\d{3}-\\d{3}-\\d{4}') -> bool:\n    \"\"\"Check if the string matches the given pattern\"\"\"\n    return re.match(pattern, s) is not None\n\ndef g(pattern=r'\\d{3}-\\d{3}-\\d{4}'):\n    s = '123-456-7890'\n    return s, pattern\n\nassert f(*g())\n",
        "idx_generation": 52,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"Find two numbers in a list that add up to the target value\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    \"\"\"Return the list of numbers and the target value\"\"\"\n    return nums, target\n\nassert f(g()[0], g()[1])\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char: str) -> bool:\n    \"\"\"\n    Check if the given character is present in the given string.\n    \"\"\"\n    return char in s\n\ndef g(s = \"Hello, World!\", char = \"o\"):\n    return s, char\n\nassert f(*g())\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    \"\"\"\n    n = len(matrix)\n    target_sum = n * (n**2 + 1) // 2\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n\n    # Check diagonals\n    diagonal_sum = sum(matrix[i][i] for i in range(n))\n    anti_diagonal_sum = sum(matrix[i][n-1-i] for i in range(n))\n    if diagonal_sum != target_sum or anti_diagonal_sum != target_sum:\n        return False\n\n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n\n",
        "idx_generation": 375,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square.\n    A magic square is a square matrix where the sums of each row, each column, and both diagonals are the same.\n    Return True if the matrix is a magic square, and False otherwise.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        column_sum = 0\n        for i in range(n):\n            column_sum += matrix[i][j]\n        if column_sum != target_sum:\n            return False\n    \n    # Check diagonals\n    diagonal_sum1 = 0\n    diagonal_sum2 = 0\n    for i in range(n):\n        diagonal_sum1 += matrix[i][i]\n        diagonal_sum2 += matrix[i][n-i-1]\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n    \n    return True\n\ndef g(matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list that adds up to the target sum.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target_sum - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target_sum = 10):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 6,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 47,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list that sums up to k.\n    Return True if such a subarray exists, False otherwise.\n    \"\"\"\n    prefix_sum = {0: -1}\n    curr_sum = 0\n    for i, num in enumerate(arr):\n        curr_sum += num\n        if curr_sum - k in prefix_sum:\n            return True\n        prefix_sum[curr_sum] = i\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 12)\n\nassert f(*g())\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"\n    Check if the given string has exactly n vowels.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = sum([1 for char in s if char.lower() in vowels])\n    return count == n\ndef g(n=5):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(vowels * (n//len(vowels))) + ''.join(vowels[:n%len(vowels)])\nassert f(g())\n",
        "idx_generation": 17,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer k, determine if there are two distinct indices i and j in the list\n    such that arr[i] + arr[j] = k.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if k - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 7\n\nassert f(*g())\n\n",
        "idx_generation": 105,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[str]], target='X') -> bool:\n    \"\"\"\n    Check if the given target character is present in the matrix.\n    Return True if the target character is found, otherwise return False.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target='X'):\n    matrix = [['O', 'O', 'O'], ['O', 'X', 'O'], ['O', 'O', 'O']]\n    return matrix\n\n# Test case\ntest_matrix = [['O', 'O', 'O'], ['O', 'X', 'O'], ['O', 'O', 'O']]\nassert f(g(), target='X')\n\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='moz', count=70, length=210) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '$'\nassert f(g())\n",
        "idx_generation": 58,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number n is a palindrome.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef g():\n    return 12321\n\nassert f(g())\n",
        "idx_generation": 79,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n\n    Sample Input:\n    `string = \"racecar\"`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return string == string[::-1]\n\ndef g(string: str):\n    return string\n\nassert f(g(\"racecar\"))\n",
        "idx_generation": 213,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[str], target_word=\"apple\") -> bool:\n    \"\"\"Check if there exists a word in the list that starts with the target word.\"\"\"\n    for word in lst:\n        if word.startswith(target_word):\n            return True\n    return False\n\ndef g(target_word=\"apple\"):\n    return ['apple', 'banana', 'kiwi', 'pear', 'orange']\n\nassert f(g())\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=0) -> bool:\n    \"\"\"\n    Check if there exists a pair of words in the list that have a combined length greater than or equal to a specific value.\n    Return True if the target_length is 0 and there are at least two words in the list.\n    \"\"\"\n    if target_length == 0 and len(words) >= 2:\n        return True\n    \n    for i in range(len(words)):\n        for j in range(i+1, len(words)):\n            if len(words[i]) + len(words[j]) >= target_length:\n                return True\n    return False\n\ndef g(target_length=0):\n    return [\"hello\", \"world\", \"python\", \"programming\", \"puzzles\"]\nassert f(g())\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"\n    Given a string s, check if there exists a substring of length n that is a palindrome.\n\n    Sample Input:\n    s = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(s[i:i+n] == s[i:i+n][::-1] for i in range(len(s)-n+1))\ndef g(n = 5):\n    return 'madam'\nassert f(g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target=\"hello\") -> bool:\n    \"\"\"\n    Given a string, check if it can be transformed into the target string by rearranging the characters.\n    Return True if it is possible, False otherwise.\n    \"\"\"\n    def rearrange_string(string, target):\n        if len(string) != len(target):\n            return False\n        return sorted(string) == sorted(target)\n\n    return rearrange_string(string, target)\n\ndef g(string=\"hleol\"):\n    return string\n\nassert f(g())\n\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, pattern: str) -> bool:\n    \"\"\"\n    Given a string and a pattern, check if the pattern can be found in the string.\n    The pattern can contain wildcards represented by \"*\", which matches any number of characters.\n    Return True if the pattern is found in the string, False otherwise.\n    \"\"\"\n    m, n = len(string), len(pattern)\n    dp = [[False] * (n + 1) for _ in range(m + 1)]\n\n    dp[0][0] = True\n\n    for j in range(1, n + 1):\n        if pattern[j - 1] == \"*\":\n            dp[0][j] = dp[0][j - 1]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if pattern[j - 1] == \"*\":\n                dp[i][j] = dp[i][j - 1] or dp[i - 1][j]\n            elif pattern[j - 1] == \"?\" or string[i - 1] == pattern[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n\n    return dp[m][n]\n\ndef g(string=\"programming\", pattern=\"pro*g\"):\n    return string, pattern\n\nassert f(*g())\n",
        "idx_generation": 114,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a permutation of the numbers from 1 to n.\n\n    Sample Input:\n    arr = [5, 4, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return sorted(arr) == list(range(1, len(arr)+1))\n\ndef g():\n    return [5, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"\n    Check if there exists a substring in the given string that contains at most k different characters.\n    \"\"\"\n    n = len(s)\n    for i in range(n):\n        for j in range(i+k, n+1):\n            if len(set(s[i:j])) <= k:\n                return True\n    return False\n\ndef g(s='python'):\n    return ''.join(sorted(s))\n\nassert f(g())\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subarray in the given list that sums up to the target.\"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\n\ndef g():\n    return [3, 4, -2, 1, 2, -3, 5, 6]\n\nassert f(g(), 5)\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[str]) -> bool:\n    \"\"\"Check if the list contains two strings that are anagrams of each other.\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if sorted(x[i]) == sorted(x[j]):\n                return True\n    return False\ndef g():\n    return [\"listen\", \"silent\", \"hello\", \"world\"]\nassert f(g())\n",
        "idx_generation": 114,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, t=120, upper=25) -> bool:\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n    \"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper\ndef g(t = 120, upper = 25):\n    # Faster solution for simultaneously solving multiple problems is of course possible\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\nassert f(g())\n",
        "idx_generation": 39,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subsequence of the list that is a palindrome.\n    Return True if a subsequence exists, False otherwise.\n    \"\"\"\n    def is_palindrome(sub):\n        return sub == sub[::-1]\n\n    def dfs(nums, path):\n        if is_palindrome(path):\n            return True\n        if not nums:\n            return False\n        return dfs(nums[1:], path + [nums[0]]) or dfs(nums[1:], path)\n\n    return dfs(nums, [])\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix.\n    Return True if the matrix is lower triangular, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return all(matrix[i][j] == 0 for i in range(rows) for j in range(i + 1, cols))\n\ndef g():\n    \"\"\"\n    Generate a lower triangular matrix.\n    \"\"\"\n    return [[1, 0, 0],\n            [2, 3, 0],\n            [4, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 407,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='Python') -> bool:\n    \"\"\"Check if the given string s is a palindrome and contains the target string\"\"\"\n    return s == s[::-1] and target in s\ndef g(target='Python'):\n    return target + target[::-1]\nassert f(g())\n",
        "idx_generation": 11,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if n is a prime number.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 7\n\nassert f(g())\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc', count=2) -> bool:\n    \"\"\"\n    Find a string that contains count occurrences of the given substring.\n    \"\"\"\n    return s.count(substr) == count\ndef g(substr = 'abc', count = 2):\n    return substr * count\nassert f(g())\n\n",
        "idx_generation": 83,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if any word in the list starts with the given prefix.\"\"\"\n    for word in words:\n        if word.startswith(prefix):\n            return True\n    return False\n\ndef g(words=['prefix', 'preference', 'preview']):\n    return words\n\nassert f(g())\n",
        "idx_generation": 57,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Check if a given number n is a palindrome or not.\n    A number is a palindrome if it remains the same when its digits are reversed.\n    \"\"\"\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    return is_palindrome(n)\n\ndef g():\n    return 12321, 3\n\nassert f(*g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string contains exactly n consonants.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return len([c for c in s if c.lower() not in vowels]) == n\ndef g(n = 3):\n    return 'bcdfghjklmnpqrstvwxyz' * (n // 21) + 'bcdfghjklmnpqrstvwxyz'[:n % 21]\nassert f(g())\n",
        "idx_generation": 20,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str) -> bool:\n    \"\"\"\n    Given a sentence, check if it is a palindrome.\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n    \"\"\"\n    sentence = sentence.lower().replace(\" \", \"\")\n    return sentence == sentence[::-1]\n\ndef g():\n    return \"A man a plan a canal Panama\"\n\nassert f(g())\n",
        "idx_generation": 30,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n: int = 3) -> bool:\n    \"\"\"\n    Check if the list contains a subsequence of length n that is sorted in non-decreasing order.\n    Return True if such subsequence exists, and False otherwise.\n    \"\"\"\n    for i in range(len(x) - n + 1):\n        if sorted(x[i:i+n]) == x[i:i+n]:\n            return True\n    return False\n\ndef g(n: int = 3):\n    return [5, 1, 2, 4, 3]\n\nassert f(g())\n",
        "idx_generation": 154,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisor=2) -> bool:\n    \"\"\"Check if n is divisible by the given divisor.\"\"\"\n    return n % divisor == 0\n\ndef g(divisor=2):\n    return 10\n\nassert f(g())\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(d: Dict[str, int], key: str) -> bool:\n    \"\"\"\n    Given a dictionary and a key, determine if the key exists in the dictionary and its corresponding\n    value is a multiple of the length of the key.\n    \"\"\"\n    if key in d and d[key] % len(key) == 0:\n        return True\n    return False\n\ndef g():\n    return {\"apple\": 5, \"banana\": 6, \"cherry\": 18}, \"banana\"\n\nassert f(*g())\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a number is a power of two.\n    \"\"\"\n    if n <= 0:\n        return False\n    while n % 2 == 0:\n        n /= 2\n    return n == 1\n\ndef g(n = 16):\n    return n\n\nassert f(g())\n\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Find the product of all positive numbers in the given list.\n\n    Sample Input:\n    arr = [-3, 4, 2, -5, 7]\n\n    Sample Output:\n    56\n    \"\"\"\n    product = 1\n    for num in arr:\n        if num > 0:\n            product *= num\n    return product\n\ndef g():\n    return [-3, 4, 2, -5, 7]\n\nassert f(g()) == 56\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square or not.\n    A magic square is a square matrix of distinct positive integers, where the sums of each row,\n    each column, and both diagonals are all equal.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check row sums\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check column sums\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n    \n    # Check diagonal sums\n    diag_sum1 = 0\n    diag_sum2 = 0\n    for i in range(n):\n        diag_sum1 += matrix[i][i]\n        diag_sum2 += matrix[i][n-i-1]\n    if diag_sum1 != target_sum or diag_sum2 != target_sum:\n        return False\n    \n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_length: int) -> bool:\n    \"\"\"\n    Check if there is a word in the list that has a length greater than or equal to the target length.\n    \"\"\"\n    for word in words:\n        if len(word) >= target_length:\n            return True\n    return False\n\ndef g():\n    return ['apple', 'banana', 'cat', 'dog']\n\nassert f(g(), 4)\n",
        "idx_generation": 370,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=24, b=18773099, c=100) -> bool:\n    \"\"\"Modify the if statement with multiple conditions\"\"\"\n    if x > 0 and a > 50 and c < 200:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 24, b = 18773099, c = 100):\n    if a > 50 and b > a and c < 200:\n        return b + a\n    else:\n        return b - a\nassert f(g())\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target integer, find all indices i in the list\n    such that arr[i] is equal to the target and return them as a list.\n    \n    Sample Input:\n    arr = [2, 4, 6, 8, 10, 4]\n    target = 4\n    \n    Sample Output:\n    [1, 5]\n    \"\"\"\n    indices = []\n    for i in range(len(arr)):\n        if arr[i] == target:\n            indices.append(i)\n    return indices\n\ndef g():\n    return [2, 4, 6, 8, 10, 4], 4\n\nassert f(*g()) == [1, 5]\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers contains any duplicate elements.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    Output: False\n\n    nums = [1, 2, 3, 3, 4, 5]\n    Output: True\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g(nums=[1, 2, 3, 3, 4, 5]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(expression: str) -> bool:\n    \"\"\"\n    Check if the given expression has balanced parentheses.\n    \"\"\"\n    stack = []\n    for char in expression:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\ndef g(expression = \"(a + b) * (c - d)\"):\n    return expression\n\nassert f(g())\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[3, 5, 7, 9, 11], target=16) -> bool:\n    \"\"\"\n    Check if the given number n can be expressed as the product of any two numbers in the list.\n\n    Sample Input:\n    n = 33\n\n    Sample Output:\n    True\n    \"\"\"\n    return any((n / x) in nums for x in nums)\ndef g(nums=[3, 5, 7, 9, 11], target=16):\n    return nums[0] * nums[1]\nassert f(g())\n",
        "idx_generation": 42,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subsequence with a sum divisible by k\"\"\"\n    n = len(arr)\n    dp = [[False] * (k+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = True\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if arr[i-1] <= j:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][k]\ndef g(arr=[1, 2, 3, 4, 5]):\n    k = 15\n    return arr, k\nassert f(*g())\n",
        "idx_generation": 21,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum=100, k=3) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, find k elements in the list that sum up to the target.\n    \"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target_sum for comb in combinations(nums, k))\ndef g(target_sum = 100, k = 3):\n    return [10, 20, 30, 40, 50] * k\nassert f(g())\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Tuple\n\ndef f(t: Tuple[int, int], n: int) -> bool:\n    \"\"\"\n    Given a tuple and a number, check if the number is greater than both elements in the tuple.\n    \"\"\"\n    if n > t[0] and n > t[1]:\n        return True\n    return False\n\ndef g():\n    return (5, 8), 10\n\nassert f(*g()) == True\n\n",
        "idx_generation": 281,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the given string contains at least n vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return len([c for c in s if c.lower() in vowels]) >= n\ndef g(n = 5):\n    return 'aeiou' * (n // 5) + 'aeiou'[:n % 5]\nassert f(g())\n",
        "idx_generation": 20,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers is a palindrome.\n\n    Example:\n    nums = [1, 2, 3, 2, 1]\n    The list is a palindrome because it reads the same forwards and backwards.\n    Therefore, the puzzle is solved.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 76,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=0) -> bool:\n    \"\"\"\n    Check if there exists a pair of words in the list that have a combined length greater than or equal to a specific value.\n    Return True if the target_length is 0 and there are at least two words in the list.\n    Return False if the target_length is a negative value.\n    \"\"\"\n    if target_length == 0 and len(words) >= 2:\n        return True\n    \n    if target_length < 0:\n        return False\n    \n    for i in range(len(words)):\n        for j in range(i+1, len(words)):\n            if len(words[i]) + len(words[j]) >= target_length:\n                return True\n    return False\n\ndef g(target_length=0):\n    return [\"hello\", \"world\", \"python\", \"programming\", \"puzzles\"]\nassert f(g())\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a prime number.\n\n    Example:\n    n = 17\n\n    The output should be:\n    True\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g()) == True\n\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"Check if a given number is divisible by k\"\"\"\n    return n % k == 0\n\ndef g(n=20, k=5):\n    return n, k\n\nassert f(*g())\n",
        "idx_generation": 95,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]], threshold=20) -> bool:\n    \"\"\"\n    Given a grid of numbers, check if there exists a path from the top-left cell to the bottom-right cell\n    where the product of the numbers along the path is greater than a given threshold.\n    Return True if a path exists, False otherwise.\n    \"\"\"\n    def find_path(grid, i, j, threshold):\n        if i == len(grid) - 1 and j == len(grid[0]) - 1:\n            return grid[i][j] > threshold\n        if i < len(grid) - 1:\n            if find_path(grid, i + 1, j, threshold / grid[i][j]):\n                return True\n        if j < len(grid[0]) - 1:\n            if find_path(grid, i, j + 1, threshold / grid[i][j]):\n                return True\n        return False\n\n    return find_path(grid, 0, 0, threshold)\n\ndef g(grid=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], threshold=20):\n    return grid\n\nassert f(g())\n",
        "idx_generation": 25,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Check if there exists a subarray of length n whose sum is divisible by the minimum element in the subarray\"\"\"\n    subarrays = [arr[i:i+n] for i in range(len(arr)-n+1)]\n    for subarray in subarrays:\n        if sum(subarray) % min(subarray) == 0:\n            return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5, 6]):\n    n = len(arr) // 2\n    return arr[:n]\n\nassert f(n=len(g()), arr=g())\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, pairs=[[459604, 0], [364611, 68505], [562652, 512251], [668655, 471975], [464486, 626280], [138684, 177065], [163296, 68630], [188271, 104677], [367839, 338137], [73022, 362103], [464143, 484458], [214935, 189299], [643725, 283515], [908210, 541732], [710201, 234839], [854230, 34479], [3288, 675724], [846637, 396244], [0, 2526576]]) -> bool:\n    \"\"\"\n    Given a sequence of integer pairs, p_i, m_i, where \\\\sum p_i-m_i = 0, find the maximum value, over t, of\n    p_{t+1} + \\\\sum_{i=1}^t (p_i - m_i)\n    \"\"\"\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot += p - m\n        if tot <= n:\n            if tot == n:\n                success = True\n        else:\n            break\n    return success\ndef g(pairs = [[459604, 0], [364611, 68505], [562652, 512251], [668655, 471975], [464486, 626280], [138684, 177065], [163296, 68630], [188271, 104677], [367839, 338137], [73022, 362103], [464143, 484458], [214935, 189299], [643725, 283515], [908210, 541732], [710201, 234839], [854230, 34479], [3288, 675724], [846637, 396244], [0, 2526576]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g())\n",
        "idx_generation": 64,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, max_nums=5, options=[10, 20, 30, 40, 50]) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose total is the target value.\"\"\"\n    for n in nums:\n        assert n in options\n    return len(nums) <= max_nums and sum(nums) == target\ndef g(target = 100, max_nums = 5, options = [10, 20, 30, 40, 50]):\n    from itertools import combinations\n    for n in range(max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 47,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a=['apple', 'banana', 'cherry'], b=['banana', 'durian', 'grape']) -> bool:\n    \"\"\"Check if the given string is present in either list a or list b\"\"\"\n    return s in a or s in b\ndef g(a=['apple', 'banana', 'cherry'], b=['banana', 'durian', 'grape']):\n    return b[1]\nassert f(g())\n",
        "idx_generation": 157,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Remove all duplicates from the given list and return a new list with unique elements.\n\n    Example:\n    nums = [1, 2, 2, 3, 4, 4, 5]\n    output: [1, 2, 3, 4, 5]\n    \"\"\"\n    return list(set(nums))\n\ndef g():\n    nums = [1, 2, 2, 3, 4, 4, 5]\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5]\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: List[str]) -> bool:\n    \"\"\"Find a list of 1000 distinct strings which each have more 'a's than 'b's and no 'c's.\"\"\"\n    return len(set(s)) == 1000 and all((x.count('a') > x.count('b') and 'c' not in x for x in s))\ndef g():\n    return [\"a\" * (i + 2) + \"b\" for i in range(1000)]\nassert f(g())\n",
        "idx_generation": 38,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Check if a given number n is a perfect square or not.\n    A number is a perfect square if the square root of the number is an integer.\n    \"\"\"\n    def is_perfect_square(num):\n        return math.isqrt(num) ** 2 == num\n    \n    return is_perfect_square(n)\n\ndef g():\n    return 49, 3\n\nassert f(*g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(path: List[int], edges=[[3, 5], [2, 1], [4, 5], [3, 6], [6, 7], [5, 3], [4, 3], [6, 2], [5, 2], [7, 0], [3, 4], [0, 5], [0, 0], [1, 0], [0, 2], [3, 1]]) -> bool:\n    \"\"\" Find any path from node 0 to node n in a given digraph on vertices 0, 1,..., n.\"\"\"\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max((max(edge) for edge in edges))\n    return len(path) > 2\n\ndef g(edges = [[3, 5], [2, 1], [4, 5], [3, 6], [6, 7], [5, 3], [4, 3], [6, 2], [5, 2], [7, 0], [3, 4], [0, 5], [0, 0], [1, 0], [0, 2], [3, 1]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)\nassert f(g())\n",
        "idx_generation": 409,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[str]) -> bool:\n    \"\"\"\n    Check if the given list of strings contains any anagram pairs.\n\n    An anagram pair is a pair of strings that can be rearranged to form the same string.\n\n    Example:\n    arr = [\"listen\", \"silent\", \"python\", \"typhon\"]\n    Output: True\n\n    arr = [\"hello\", \"world\", \"puzzle\", \"python\"]\n    Output: False\n    \"\"\"\n    return any(sorted(word1) == sorted(word2) for i, word1 in enumerate(arr) for word2 in arr[i+1:])\n\ndef g():\n    return [\"listen\", \"silent\", \"python\", \"typhon\"]\n\nassert f(g()) == True\n",
        "idx_generation": 497,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=6) -> bool:\n    \"\"\"Check if the last digit of the product of n and 9 is equal to the given string.\"\"\"\n    return str(n * 9)[-1] == s\n\ndef g(n=6):\n    return str(n * 9)[-1]\n\nassert f(g())\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n\n    Sample Input:\n    string = \"radar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return string == string[::-1]\n\ndef g(string=\"radar\"):\n    return string\n\nassert f(g())\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(number: int) -> bool:\n    \"\"\"\n    Check if the given number is a power of two.\n    Return True if it is a power of two, False otherwise.\n    \"\"\"\n    if number <= 0:\n        return False\n    while number > 1:\n        if number % 2 != 0:\n            return False\n        number = number // 2\n    return True\n\ndef g(number=16):\n    return number\n\nassert f(g())\n\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if the product of three numbers is equal to a certain value.\n    \"\"\"\n    return x * y * z == 100\ndef g(x: int, y: int):\n    z = 100 // (x * y)\n    return z\nassert f(g(2, 5), 2, 5)\n",
        "idx_generation": 79,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string has a palindrome substring of length greater than or equal to 3.\n    \"\"\"\n    def is_palindrome(s):\n        return s == s[::-1]\n    n = len(s)\n    for i in range(n-2):\n        for j in range(i+2, n):\n            if is_palindrome(s[i:j+1]):\n                return True\n    return False\ndef g():\n    return \"racecar\"\nassert f(g())\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=25) -> bool:\n    \"\"\"\n    Given a positive integer n, return True if n can be expressed as the sum of two perfect squares, otherwise return False.\n    \"\"\"\n    squares = set()\n    for num in range(1, int(n**0.5) + 1):\n        squares.add(num**2)\n    \n    for square in squares:\n        if n - square in squares:\n            return True\n    return False\n\ndef g(n=25):\n    return n\n\nassert f(g())\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine if there exists a path from the top-left cell to the bottom-right cell\n    where the sum of the numbers along the path is greater than a given threshold.\n    Return True if a path exists, False otherwise.\n    \"\"\"\n    def dfs(matrix, i, j, threshold):\n        if i == len(matrix) - 1 and j == len(matrix[0]) - 1:\n            return matrix[i][j] > threshold\n        if i < len(matrix) - 1 and dfs(matrix, i + 1, j, threshold - matrix[i][j]):\n            return True\n        if j < len(matrix[0]) - 1 and dfs(matrix, i, j + 1, threshold - matrix[i][j]):\n            return True\n        return False\n\n    return dfs(matrix, 0, 0, 0)\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"\n    Determine if a number is divisible by m.\n    \"\"\"\n    return n % m == 0\ndef g(m = 10):\n    return m * 2\nassert f(g())\n",
        "idx_generation": 36,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(st: str, a='s', b='tos') -> bool:\n    \"\"\"Check if the string contains both 'a' and 'b' characters.\"\"\"\n    return 'a' in st and 'b' in st\n\ndef g(st='abracadabra', a='s', b='tos'):\n    return st\n\nassert f(g())\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(res: int, m=22262059435814874058, n=6) -> bool:\n    \"\"\"\n    Find the result of applying the following operation to integer m, n times: if the last digit is zero, remove\n    the zero, otherwise subtract 1.\n    \"\"\"\n    for i in range(n):\n        m = m - 1 if m % 10 else m // 10\n    return res == m\n\ndef g(m = 22262059435814874058, n = 6):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m\n\nassert f(g())\n",
        "idx_generation": 16,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, max_nums=4, options=[10, 20, 30, 40, 50]) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose sum is the target value, including duplicates.\"\"\"\n    for n in nums:\n        assert n in options\n    return sum(nums) <= target and len(nums) <= max_nums\ndef g(target=100, max_nums=4, options=[10, 20, 30, 40, 50]):\n    from itertools import combinations_with_replacement\n    for n in range(max_nums + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if there exists a path from the top-left corner of the matrix to the bottom-right corner such that the sum of the numbers along the path is equal to the target.\n    Return True if such a path exists, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    dp = [[False] * cols for _ in range(rows)]\n    dp[0][0] = True\n    \n    for i in range(1, rows):\n        dp[i][0] = dp[i-1][0] or (matrix[i][0] == target)\n    \n    for j in range(1, cols):\n        dp[0][j] = dp[0][j-1] or (matrix[0][j] == target)\n    \n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = dp[i-1][j] or dp[i][j-1] or (matrix[i][j] == target)\n    \n    return dp[rows-1][cols-1]\n\ndef g():\n    return ([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 15)\n\nassert f(*g())\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(names: List[str], target_name: str) -> bool:\n    \"\"\"\n    Check if a given name is present in the list of names.\n\n    Sample Input:\n    names = [\"John\", \"Alice\", \"Bob\", \"Sarah\"]\n    target_name = \"Alice\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return target_name in names\n\ndef g(names=[\"John\", \"Alice\", \"Bob\", \"Sarah\"], target_name=\"Bob\"):\n    return names, target_name\n\nassert f(*g())\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, m = 100) -> bool:\n    \"\"\"Check if n is a perfect square and less than m.\"\"\"\n    return n >= 0 and sqrt(n) == int(sqrt(n)) and n < m\n\ndef g(m = 100):\n    return 49\n\nassert f(g())\n",
        "idx_generation": 52,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == s[::-1]\ndef g(s='racecar'):\n    return s\nassert f(g())\n",
        "idx_generation": 63,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"\n    Check if a given string contains exactly n occurrences of the letter 'a'.\n    \"\"\"\n    return s.count('a') == n\n\ndef g(n=3):\n    return \"banana\"\n\nassert f(g(), 3)\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str = 'python') -> bool:\n    \"\"\"\n    Check if a given string ends with a specific target string.\n    Returns True if it does, False otherwise.\n    \"\"\"\n    return s.endswith(target)\n\ndef g(target: str = 'python'):\n    return 'I am learning ' + target\n\nassert f(g())\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a given number is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g())\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there exist three numbers in the list that add up to the target.\n    Return True if there exist three numbers in the list that add up to the target, False otherwise.\n    \n    Sample Input:\n    nums = [1, 2, 3, 4, 5, 6]\n    target = 9\n    \n    Sample Output:\n    True\n    \"\"\"\n    num_set = set(nums)\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            complement = target - nums[i] - nums[j]\n            if complement in num_set:\n                return True\n    return False\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 6]\n    target = 9\n    return nums, target\n\nassert f(*g())\n\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nimport math\nfrom typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence whose sum is equal to the product of the numbers in the subsequence.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, i):\n            if sum(subset) == math.prod(subset):\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nfrom typing import List, Tuple\n\ndef f(points: List[Tuple[int, int]]) -> bool:\n    \"\"\"Check if the given points form a rectangle\"\"\"\n    if len(points) != 4:\n        return False\n    x_coords = [p[0] for p in points]\n    y_coords = [p[1] for p in points]\n    return len(set(x_coords)) == 2 and len(set(y_coords)) == 2\n\ndef g():\n    return [(0, 0), (0, 1), (1, 0), (1, 1)]\n\nassert f(g())\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, char: str) -> int:\n    \"\"\"\n    Find the number of occurrences of the given character in the string.\n    Return the count of occurrences.\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if string[i] == char:\n            count += 1\n    return count\n\ndef g(string=\"Hello\", char=\"l\"):\n    return string, char\n\nassert f(*g()) == 2\n",
        "idx_generation": 290,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"Find a list of 1000 distinct words where each word starts with a vowel and ends with a consonant.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    return len(set(words)) == 1000 and all((w[0].lower() in vowels and w[-1].lower() in consonants for w in words))\ndef g():\n    import random\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    return [\"\".join(random.choice(vowels) + random.choice(consonants) for _ in range(5)) for _ in range(1000)]\nassert f(g())\n",
        "idx_generation": 119,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the sum of the elements in the diagonal of a square matrix.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    15\n    \"\"\"\n    n = len(matrix)\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n    return diagonal_sum\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == 15\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"\n    Check if there exists a substring in the given string that contains exactly k different characters.\n    \"\"\"\n    n = len(s)\n    for i in range(n):\n        for j in range(i+k, n+1):\n            if len(set(s[i:j])) == k:\n                return True\n    return False\n\ndef g(s='hello'):\n    return s\n\nassert f(g())\n\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exist three numbers in the list that add up to the target integer.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(arr=[-1, 0, 1, 2, -1, -4]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 31,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='aeiou') -> bool:\n    \"\"\"Check if the string s contains any of the vowels in the target string.\"\"\"\n    return any(char in s for char in target)\n\ndef g(target='aeiou'):\n    return target\n\nassert f(g())\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5], k=2) -> bool:\n    \"\"\"\n    Given a list of integers and given an integer k, determine if the kth element is a prime number.\n    \"\"\"\n    return is_prime(lst[k])\ndef g(lst=[1, 2, 3, 4, 5], k=2):\n    return lst\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\nassert f(g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is symmetric along the diagonal.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 92,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_len=10, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if the given string can be rearranged to have a length equal to target_len and contain at least one vowel.\"\"\"\n    return len(s) == target_len and any(c in vowels for c in s)\ndef g(target_len = 10, vowels = ['a', 'e', 'i', 'o', 'u']):\n    s = ''.join(vowels)\n    while len(s) < target_len:\n        s += s\n    return s[:target_len]\nassert f(g())\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int]) -> bool:\n    \"\"\"\n    Check if a given list of integers is a palindrome.\n    A palindrome is a sequence of characters that reads the same forwards and backwards.\n    Return True if the list is a palindrome, and False otherwise.\n    \"\"\"\n    return x == x[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str]) -> bool:\n    \"\"\"\n    Check if all strings in the given list are anagrams of each other.\n    \"\"\"\n    return len(set(\"\".join(sorted(s)) for s in strings)) == 1\n\ndef g(strings = ['listen', 'silent', 'enlist']):\n    return strings\n\nassert f(g())\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"Find the minimum element in a given matrix.\"\"\"\n    min_element = float('inf')\n    for row in matrix:\n        for num in row:\n            if num < min_element:\n                min_element = num\n    return min_element\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == 1\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"\n    Check if there exists a substring in the given string that contains exactly k different characters.\n    \"\"\"\n    n = len(s)\n    for i in range(n):\n        for j in range(i+k, n+1):\n            if len(set(s[i:j])) == k:\n                return True\n    return False\n\ndef g(s='world'):\n    return s[::-1]\n\nassert f(g())\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Find the number of coconuts to solve the following riddle:\n        There is a pile of coconuts, owned by five men. One man divides the pile into five equal piles, giving the\n        one left over coconut to a passing monkey, and takes away his own share. The second man then repeats the\n        procedure, dividing the remaining pile into five and taking away his share, as do the third, fourth, and\n        fifth, each of them finding one coconut left over when dividing the pile by five, and giving it to a monkey.\n        Finally, the group divide the remaining coconuts into five equal piles: this time no coconuts are left over.\n        How many coconuts were there in the original pile?\n                                          Quoted from https://en.wikipedia.org/wiki/The_monkey_and_the_coconuts\n    \"\"\"\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\n\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 6\n\nassert f(g())\n",
        "idx_generation": 70,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if a string is a palindrome ignoring punctuation and spaces.\n    \"\"\"\n    string = ''.join(filter(str.isalnum, string.lower()))\n    return string == string[::-1]\n\ndef g(string = \"A man, a plan, a canal, Panama!\"):\n    return string\n\nassert f(g())\n",
        "idx_generation": 147,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, parts=['Python', 'is', 'cool'], string='Pythoniscool') -> bool:\n    \"\"\"\n    Find a separator that when used to join a given string gives a certain result.\n    \"\"\"\n    return x.join(parts) == string\ndef g(parts = ['Python', 'is', 'cool'], string = 'Pythoniscool'):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g())\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return string == string[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if there are any duplicate elements in the list.\n    \"\"\"\n    return len(numbers) != len(set(numbers))\n\ndef g(numbers=[1, 2, 3, 4, 5, 5]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the array is sorted in non-increasing order.\"\"\"\n    return arr == sorted(arr, reverse=True)\n\ndef g():\n    return [5, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Check if a given list is sorted in ascending order\"\"\"\n    return li == sorted(li)\n\ndef g(li=[1, 2, 3, 4, 5]):\n    return li\n\nassert f(g())\n",
        "idx_generation": 95,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(word: str, strings=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"\n    Given a list of strings, check if the given word is an anagram of any of the strings in the list.\n    \"\"\"\n\n    def is_anagram(word1, word2):\n        word1 = sorted(word1.lower())\n        word2 = sorted(word2.lower())\n        return word1 == word2\n\n    return any(is_anagram(word, s) for s in strings)\n\ndef g(strings=['apple', 'banana', 'cherry', 'date']):\n    return random.choice(strings)\n\nassert f(g())\n",
        "idx_generation": 146,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(s: str, pattern: str) -> int:\n    \"\"\"\n    Count the number of occurrences of a pattern in a string.\n\n    Sample Input:\n    s = 'abababab'\n    pattern = 'ab'\n\n    Sample Output:\n    4\n    \"\"\"\n    count = 0\n    for match in re.finditer(pattern, s):\n        count += 1\n    return count\n\ndef g():\n    s = 'abababab'\n    pattern = 'ab'\n    return s, pattern\n\nassert f(*g()) == 4\n\n",
        "idx_generation": 362,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub='abc') -> bool:\n    \"\"\"Check if the given string contains the given substring\"\"\"\n    return sub in s\ndef g(sub='abc'):\n    return 'ab' + sub + 'xyz'\nassert f(g())\n",
        "idx_generation": 40,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a lower triangular matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(matrix=[[1, 0, 0], [2, 4, 0], [3, 5, 6]]):\n    \"\"\"Return the matrix.\"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 292,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g())\n",
        "idx_generation": 422,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> int:\n    \"\"\"\n    Find the maximum difference between any two numbers in the list.\n    \"\"\"\n    n = len(numbers)\n    if n < 2:\n        return 0\n    max_diff = numbers[1] - numbers[0]\n    min_num = numbers[0]\n    for i in range(1, n):\n        if (numbers[i] - min_num) > max_diff:\n            max_diff = numbers[i] - min_num\n        if numbers[i] < min_num:\n            min_num = numbers[i]\n    return max_diff\n\ndef g():\n    return [1, 5, 3, 7, 2, 8, 4]\n\nassert f(g()) == 7\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[str], target: str = 'python') -> bool:\n    \"\"\"\n    Check if a list of strings contains a specific target string as a substring.\n    Returns True if it does, False otherwise.\n    \"\"\"\n    return any((target in s for s in lst))\n\ndef g(target: str = 'python'):\n    return ['I am a fan of ' + target, 'I love ' + target, 'My favorite language is ' + target]\n\nassert f(g())\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Check if there exists a triplet of numbers in a list whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60]\n\nassert f(g())\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, determine if it is a palindrome or not.\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n\n    Example:\n    Input: \"madam\"\n    Output: True\n    Explanation: The string \"madam\" is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s=\"racecar\"):\n    return s\n\nassert f(g()) == True\n",
        "idx_generation": 415,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str]) -> List[str]:\n    \"\"\"\n    Given a list of strings, return a new list with the strings sorted in alphabetical order, ignoring case.\n\n    Example:\n    strings = [\"Apple\", \"banana\", \"orange\", \"kiwi\"]\n\n    The sorted list of strings is: [\"Apple\", \"banana\", \"kiwi\", \"orange\"]\n    \"\"\"\n    return sorted(strings, key=str.lower)\n\ndef g(strings=[\"Apple\", \"banana\", \"orange\", \"kiwi\"]):\n    return strings\n\nassert f(g()) == [\"Apple\", \"banana\", \"kiwi\", \"orange\"]\n\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(items: List[str], target_length: int = 5) -> bool:\n    \"\"\"\n    Check if there exists a pair of items in the list whose combined length is equal to the target_length.\n    \"\"\"\n    for i in range(len(items)):\n        for j in range(i + 1, len(items)):\n            if len(items[i]) + len(items[j]) == target_length:\n                return True\n    return False\n\ndef g():\n    return ['cat', 'dog', 'bird', 'fish', 'rat']\n\nassert f(g(), 7)\n",
        "idx_generation": 321,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> int:\n    \"\"\"Calculate the factorial of a given number.\"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * f(n-1)\n\ndef g(n = 5):\n    return n\n\nassert f(g()) == 120\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int]) -> bool:\n    \"\"\"Check if the list contains a prime number.\"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return any(is_prime(num) for num in x)\ndef g():\n    return [4, 6, 8, 9, 10, 11, 12, 13]\nassert f(g())\n",
        "idx_generation": 109,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Find a way to rearrange the letters in the word \"python\" to get the word \"nohtyp\". The answer should be represented as a list of index mappings.\n    \"\"\"\n    return ['python'[i] for i in li] == list('nohtyp')\ndef g():\n    return ['python'.index(t) for t in 'nohtyp']\nassert f(g())\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transpose a matrix.\n    \"\"\"\n    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n",
        "idx_generation": 198,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, ops=['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], target=61813) -> bool:\n    \"\"\"\n    Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\n    final value is the target value.\n\n    Sample Input:\n    ops = [\"x++\", \"--x\", \"--x\"]\n    target = 12\n\n    Sample Output:\n    13\n    \"\"\"\n    for op in ops:\n        if op in ['++x', 'x++']:\n            n += 1\n        else:\n            assert op in ['--x', 'x--']\n            n -= 1\n    return n == target\n\n\ndef g(ops = ['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], target = 61813):\n    return target - ops.count(\"++x\") - ops.count(\"x++\") + ops.count(\"--x\") + ops.count(\"x--\")\n\n\nassert f(g())\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> int:\n    \"\"\"Find the nth prime number\"\"\"\n    if n <= 0:\n        return \"Invalid input\"\n    else:\n        primes = []\n        num = 2\n        while len(primes) < n:\n            is_prime = True\n            for i in range(2, int(num ** 0.5) + 1):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(num)\n            num += 1\n        return primes[-1]\n\ndef g():\n    return 6\n\nassert f(g()) == 13\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: float, y: float, z: float) -> bool:\n    \"\"\"Check if the sum of the squares of x, y, and z is equal to 1\"\"\"\n    return x**2 + y**2 + z**2 == 1\n\ndef g():\n    return sqrt(1/3), sqrt(1/3), sqrt(1/3)\n\nassert f(*g())\n",
        "idx_generation": 146,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(n=17):\n    return n\n\nassert f(g())\n",
        "idx_generation": 67,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, s=1234) -> bool:\n    \"\"\"Check if a number can be formed by concatenating the digits of x\"\"\"\n    return s == int(''.join(x))\ndef g(s = 1234):\n    return list(str(s))\nassert f(g())\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if a pair of distinct numbers in the list sums up to a certain value.\n    \"\"\"\n    return any(num1 + num2 == target for i, num1 in enumerate(nums) for num2 in nums[i+1:])\n\ndef g(nums: List[int], target: int):\n    return nums\n\nassert f(g([1, 2, 3, 4, 5], 5), 5)\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Check if a target string is present in a given string.\n    \"\"\"\n    return target in s\n\ndef g(s = \"Hello, World!\", target = \"World\"):\n    return s, target\n\nassert f(*g())\n",
        "idx_generation": 104,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n    \n    # Check diagonals\n    diag_sum = sum(matrix[i][i] for i in range(n))\n    anti_diag_sum = sum(matrix[i][n-i-1] for i in range(n))\n    if diag_sum != target_sum or anti_diag_sum != target_sum:\n        return False\n    \n    return True\n\ndef g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    \"\"\"\n    This solution checks if the matrix is a magic square by comparing the sum of each row, column, and diagonal.\n    \"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 390,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if the given matrix is a magic square.\n\n    A magic square is a square matrix in which the sum of each row, column, and diagonal is the same.\n\n    Return True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    \n    # Calculate the sum of the first row\n    sum_row = sum(matrix[0])\n    \n    # Check if the sum of each row is equal to the sum of the first row\n    for i in range(1, n):\n        if sum(matrix[i]) != sum_row:\n            return False\n    \n    # Check if the sum of each column is equal to the sum of the first row\n    for j in range(n):\n        sum_col = sum(matrix[i][j] for i in range(n))\n        if sum_col != sum_row:\n            return False\n    \n    # Check if the sum of the main diagonal is equal to the sum of the first row\n    if sum(matrix[i][i] for i in range(n)) != sum_row:\n        return False\n    \n    # Check if the sum of the secondary diagonal is equal to the sum of the first row\n    if sum(matrix[i][n-i-1] for i in range(n)) != sum_row:\n        return False\n    \n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], threshold=50) -> bool:\n    \"\"\"Check if the sum of all numbers in the given list is greater than or equal to a threshold\"\"\"\n    return sum(nums) >= threshold\ndef g(threshold=50):\n    return list(range(1, threshold+1))\nassert f(g())\n",
        "idx_generation": 9,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is a palindrome.\n    \"\"\"\n\n    s = re.sub(r'\\W+', '', s.lower())\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list that sums up to k.\n    Return True if such a subarray exists, False otherwise.\n    \"\"\"\n    prefix_sum = {0: -1}\n    curr_sum = 0\n    for i, num in enumerate(arr):\n        curr_sum += num\n        if curr_sum - k in prefix_sum:\n            return True\n        prefix_sum[curr_sum] = i\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 7)\n\nassert f(*g())\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the string has exactly n vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count == n\ndef g(n = 5):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants = ['b', 'c', 'd', 'f', 'g']\n    s = ''.join([vowels[i % 5] if i % 2 == 0 else consonants[i % 5] for i in range(10)])\n    return s\nassert f(g())\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer k, determine if there are two indices i and j in the list\n    such that arr[i] - arr[j] = k.\n    \n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    k = 2\n    \n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 2\n\nassert f(*g())\n",
        "idx_generation": 162,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Given two strings s and t, determine if they are isomorphic.\n\n    Two strings are isomorphic if the characters in s can be replaced to get t.\n\n    Example:\n    s = \"egg\"\n    t = \"add\"\n    output: True\n    \"\"\"\n    if len(s) != len(t):\n        return False\n\n    s_to_t = {}\n    t_to_s = {}\n\n    for i in range(len(s)):\n        if s[i] in s_to_t and s_to_t[s[i]] != t[i]:\n            return False\n        if t[i] in t_to_s and t_to_s[t[i]] != s[i]:\n            return False\n        s_to_t[s[i]] = t[i]\n        t_to_s[t[i]] = s[i]\n\n    return True\n\ndef g(s = \"egg\", t = \"add\"):\n    return s, t\n\nassert f(*g())\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport string\n\ndef f(string: str, substring='abc', count=5, length=20, exclude_punctuation=False) -> bool:\n    \"\"\"Check if a given string has a certain number of copies of a given substring and of a given length\"\"\"\n    if exclude_punctuation:\n        string = string.translate(str.maketrans('', '', string.punctuation))\n    return string.count(substring) == count and len(string) == length\n\ndef g(substring='abc', count=5, length=20, exclude_punctuation=False):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '$'\n\nassert f(g())\n",
        "idx_generation": 437,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    \"\"\"\n    return string == string[::-1]\n\ndef g():\n    return \"madam\"\n\nassert f(g())\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if a given string is a palindrome.\n\n    Sample Input:\n    string = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return string == string[::-1]\ndef g(string: str):\n    return string\nassert f(g(\"racecar\"))\n",
        "idx_generation": 283,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[str], target_word=\"apple\") -> bool:\n    \"\"\"Check if there exists a word in the list that ends with the target word.\"\"\"\n    for word in lst:\n        if word.endswith(target_word):\n            return True\n    return False\n\ndef g(target_word=\"apple\"):\n    return ['pineapple', 'banana', 'kiwi', 'pear', 'orange']\n\nassert f(g())\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is a palindrome.\n\n    Sample Input:\n    s = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    s = \"racecar\"\n    return s\n\nassert f(g()) == True\n\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target=\"hello\") -> bool:\n    \"\"\"\n    Given a string, check if it can be transformed into the target string by rearranging the characters.\n    Return True if it is possible, False otherwise.\n    \"\"\"\n    def rearrange_string(string, target):\n        if len(string) != len(target):\n            return False\n        return sorted(string) == sorted(target)\n\n    return rearrange_string(string, target)\n\ndef g(string=\"hlelo\"):\n    return string\n\nassert f(g())\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if a given string contains a specific substring.\"\"\"\n    return substr in s\n\ndef g(substr='abc'):\n    return substr + \"def\"\n\nassert f(g())\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a permutation of the numbers from 1 to n, where n is the length of the list.\n    Return True if it is, False otherwise.\n    \"\"\"\n    return set(lst) == set(range(1, len(lst)+1))\n\ndef g(lst=[1, 3, 2, 4]):\n    return lst\n\nassert f(g())\n",
        "idx_generation": 355,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_char='a') -> bool:\n    \"\"\"\n    Check if a given character exists in a string.\n\n    Sample Input:\n    s = \"banana\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return target_char in s\n\ndef g(target_char='a'):\n    return 'banana'\n\nassert f(g())\n",
        "idx_generation": 99,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(arr: List[int], n: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum n, find if there are three numbers in the list that add up to n.\n\n    Sample input:\n    [1, 2, 3, 4, 5], 9\n\n    Sample output:\n    True\n\n    Explanation: The numbers 2, 3, and 4 add up to 9.\n    \"\"\"\n    for i in range(len(arr)-2):\n        for j in range(i+1, len(arr)-1):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == n:\n                    return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], n=9):\n    return arr, n\n\nassert f(*g())\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[str]) -> bool:\n    \"\"\"Check if the list contains two strings that are anagrams of each other.\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if sorted(x[i]) == sorted(x[j]):\n                return True\n    return False\ndef g():\n    return [\"listen\", \"silent\", \"hello\", \"world\", \"python\"]\nassert f(g())\n",
        "idx_generation": 185,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, t=100, upper=30) -> bool:\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n    \"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper\n\ndef g(t = 100, upper = 30):\n    # Faster solution for simultaneously solving multiple problems is of course possible\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\n\nassert f(g())\n",
        "idx_generation": 157,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subsequence of the list that has consecutive elements in increasing order.\n    Return True if a subsequence exists, False otherwise.\n    \"\"\"\n    def is_consecutive(nums):\n        return all(nums[i] + 1 == nums[i + 1] for i in range(len(nums) - 1))\n\n    def dfs(nums, path):\n        if is_consecutive(path):\n            return True\n        if not nums:\n            return False\n        return dfs(nums[1:], path + [nums[0]]) or dfs(nums[1:], path)\n\n    return dfs(nums, [])\n\ndef g(nums=[1, 2, 5, 4, 3, 6, 8, 7, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is sorted in non-decreasing order.\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, target='abc123') -> bool:\n    \"\"\"Check if a string can be transformed into a target string by rearranging the characters.\"\"\"\n    return sorted(s) == sorted(target)\ndef g(target='abc123'):\n    from random import shuffle\n    s = list(target)\n    shuffle(s)\n    return \"\".join(s)\nassert f(g())\n",
        "idx_generation": 38,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a prime number.\n\n    Sample Input:\n    n = 17\n\n    Sample Output:\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    n = 17\n    return n\n\nassert f(g()) == True\n",
        "idx_generation": 152,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, words: List[str]) -> bool:\n    \"\"\"\n    Check if all the words in the given list are present in the given sentence.\n    Return True if all words are found, False otherwise.\n    \"\"\"\n    return all(word in sentence for word in words)\n\ndef g(sentence=\"The quick brown fox jumps over the lazy dog.\", words=[\"quick\", \"fox\", \"dog\"]):\n    return sentence, words\n\nassert f(*g())\n",
        "idx_generation": 125,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(parts: List[str], sep: str = 'abc', string: str = 'abcxyzabcabc') -> bool:\n    \"\"\"\n    Find parts that when joined give a specific string, ignoring case sensitivity.\n    \"\"\"\n    return sep.join(parts).lower() == string.lower() and all((sep.lower() not in p.lower() for p in parts))\n\ndef g(sep: str = 'abc', string: str = 'abcxyzabcabc'):\n    return string.split(sep)\n\nassert f(g())\n",
        "idx_generation": 70,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(pairs: List[Tuple[int, int]]) -> bool:\n    \"\"\"\n    Check if all the pairs in the list have the same sum.\n    \"\"\"\n    return all(sum(pair) == sum(pairs[0]) for pair in pairs)\n\ndef g(n=5, sum_value=10):\n    return [(i, sum_value-i) for i in range(n)]\n\nassert f(g())\n",
        "idx_generation": 225,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given number is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g(n=121):\n    return str(n)\n\nassert f(g())\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it contains a Pythagorean triple.\n    A Pythagorean triple is a set of three positive integers a, b, and c, such that a^2 + b^2 = c^2.\n    \"\"\"\n    squares = set()\n    for num in nums:\n        squares.add(num * num)\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] * nums[i] + nums[j] * nums[j] == nums[k] * nums[k] or nums[j] * nums[j] + nums[k] * nums[k] == nums[i] * nums[i] or nums[k] * nums[k] + nums[i] * nums[i] == nums[j] * nums[j]:\n                    return True\n    return False\n\ndef g():\n    return [3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 15,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str) -> bool:\n    \"\"\"\n    Given a string, determine if it is a palindrome. A string is considered a palindrome if it reads the same\n    forwards and backwards, ignoring spaces and punctuation marks.\n    Return True if the string is a palindrome, otherwise return False.\n    \"\"\"\n    word = ''.join(ch.lower() for ch in word if ch.isalnum())\n    return word == word[::-1]\n\ndef g(word: str):\n    return word\n\n# Test case\ntest_word = \"A man, a plan, a canal: Panama\"\nassert f(g(test_word))\n",
        "idx_generation": 31,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int]) -> bool:\n    \"\"\"Check if the given sequence contains duplicate elements.\"\"\"\n    return len(seq) != len(set(seq))\n\ndef g(seq=[1, 2, 3, 4, 1, 2, 3]):\n    \"\"\"Return the sequence.\"\"\"\n    return seq\n\nassert f(g())\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=4) -> bool:\n    \"\"\"\n    Determine if the given number n is a power of k.\n    \"\"\"\n    return n > 0 and k > 0 and (n & (n - 1)) == 0 and (n % k) == 0\n\ndef g(n = 16, k = 4):\n    return n\n\nassert f(g())\n\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g(s=\"radar\"):\n    return s\n\nassert f(g())\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=8) -> bool:\n    \"\"\"Check if the sum of the digits of n is equal to the given string.\"\"\"\n    return sum(int(digit) for digit in str(n)) == int(s)\n\ndef g(n=8):\n    return str(n)\n\nassert f(g())\n",
        "idx_generation": 127,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub_str='abcde', index=3) -> bool:\n    \"\"\"Find the index of the first occurrence of sub_str in s\"\"\"\n    return s.index(sub_str) == index\ndef g(sub_str='abcde', index=3):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g())\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]], threshold=15) -> bool:\n    \"\"\"\n    Given a grid of numbers, check if there exists a path from the top-left cell to the bottom-right cell\n    where the sum of the numbers along the path is greater than a given threshold.\n    Return True if a path exists, False otherwise.\n    \"\"\"\n    def find_path(grid, i, j, threshold):\n        if i == len(grid) - 1 and j == len(grid[0]) - 1:\n            return grid[i][j] > threshold\n        if i < len(grid) - 1:\n            if find_path(grid, i + 1, j, threshold - grid[i][j]):\n                return True\n        if j < len(grid[0]) - 1:\n            if find_path(grid, i, j + 1, threshold - grid[i][j]):\n                return True\n        return False\n\n    return find_path(grid, 0, 0, threshold)\n\ndef g(grid=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], threshold=10):\n    return grid\n\nassert f(g())\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='') -> bool:\n    \"\"\"Check if all words in the given list start with the given prefix\"\"\"\n    return all(word.startswith(prefix) for word in words)\n\ndef g(prefix=''):\n    return ['apple', 'banana', 'cherry', 'date']\n\nassert f(g())\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=24, b=18773099, c=100) -> bool:\n    \"\"\"Modify the if statement with multiple conditions\"\"\"\n    if x > 0 and a > 50 and c < 200:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 24, b = 18773099, c = 100):\n    if a > 50 and b > a and c < 200:\n        return b + a\n    else:\n        return b - a\nassert f(g())\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int], target: int) -> int:\n    \"\"\"\n    Given a sorted array of integers and a target value, return the index of the target value in the array.\n    If the target value is not found, return -1.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\ndef g(arr=[1, 2, 3, 4, 5], target=3):\n    return arr, target\n\nassert f(*g()) == 2\n",
        "idx_generation": 330,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains any duplicate elements.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5, 2]\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([1, 2, 3, 4, 5, 2]))\n\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is a valid parentheses sequence.\n    \"\"\"\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append('(')\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\ndef g():\n    return \"((()))\"\n\nassert f(g())\n",
        "idx_generation": 177,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return math.isqrt(num) ** 2 == num\n\ndef g(num=16):\n    return num\n\nassert f(g())\n",
        "idx_generation": 100,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subsequence with a sum divisible by k\"\"\"\n    n = len(arr)\n    dp = [[False] * (k+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = True\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if arr[i-1] <= j:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][k]\ndef g(arr=[1, 2, 3, 4, 5]):\n    k = 2\n    return arr, k\nassert f(*g())\n",
        "idx_generation": 21,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there exists two distinct indices i and j in the given list nums, such that nums[i] + nums[j] == k.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = k - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], k=6):\n    return nums\n\nassert f(g(), 6)\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a given number is a Fibonacci number.\n    \"\"\"\n\n    def is_perfect_square(k):\n        return int(k**0.5)**2 == k\n\n    return is_perfect_square(5 * n**2 + 4) or is_perfect_square(5 * n**2 - 4)\n\ndef g():\n    return 13\n\nassert f(g())\n\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=7) -> bool:\n    \"\"\"Check if the given string contains at most n vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return len([c for c in s if c.lower() in vowels]) <= n\ndef g(n = 7):\n    return 'aeiou' * (n // 5) + 'aeiou'[:n % 5]\nassert f(g())\n",
        "idx_generation": 20,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the array is a palindrome.\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 99,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a palindrome.\n    Return True if it is, False otherwise.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef g():\n    return 12321\n\nassert f(g())\n",
        "idx_generation": 356,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Check if a given number n is a prime number or not.\n    A number is a prime number if it is only divisible by 1 and itself.\n    \"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return is_prime(n)\n\ndef g():\n    return 17, 3\n\nassert f(*g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it contains a perfect square.\n    A perfect square is an integer that can be expressed as the square of another integer.\n    \"\"\"\n    for num in nums:\n        if num ** 0.5 == int(num ** 0.5):\n            return True\n    return False\n\ndef g():\n    return [3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 28,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Check if there exists a subarray of length n whose sum is divisible by n\"\"\"\n    subarrays = [arr[i:i+n] for i in range(len(arr)-n+1)]\n    for subarray in subarrays:\n        if sum(subarray) % n == 0:\n            return True\n    return False\n\ndef g(arr: List[int]):\n    n = len(arr) // 2\n    return arr[n:]\n\nassert f(n=len(g([1, 2, 3, 4, 5, 6])), arr=g([1, 2, 3, 4, 5, 6]))\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, pairs=[[459604, 0], [364611, 68505], [562652, 512251], [668655, 471975], [464486, 626280], [138684, 177065], [163296, 68630], [188271, 104677], [367839, 338137], [73022, 362103], [464143, 484458], [214935, 189299], [643725, 283515], [908210, 541732], [710201, 234839], [854230, 34479], [3288, 675724], [846637, 396244], [0, 2526576]]) -> bool:\n    \"\"\"\n    Given a sequence of integer pairs, p_i, m_i, where \\\\sum p_i-m_i = 0, find the maximum value, over t, of\n    p_{t+1} + \\\\sum_{i=1}^t (p_i - m_i)\n    \"\"\"\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot += p - m\n        if tot <= n:\n            if tot == n:\n                success = True\n        else:\n            break\n    return success\ndef g(pairs = [[459604, 0], [364611, 68505], [562652, 512251], [668655, 471975], [464486, 626280], [138684, 177065], [163296, 68630], [188271, 104677], [367839, 338137], [73022, 362103], [464143, 484458], [214935, 189299], [643725, 283515], [908210, 541732], [710201, 234839], [854230, 34479], [3288, 675724], [846637, 396244], [0, 2526576]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g())\n",
        "idx_generation": 64,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0, max_nums=3, options=[-1, 0, 1, 2, 3]) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose total is the target value.\"\"\"\n    for n in nums:\n        assert n in options\n    return len(nums) <= max_nums and sum(nums) == target\n\ndef g(target = 0, max_nums = 3, options = [-1, 0, 1, 2, 3]):\n    from itertools import combinations\n    for n in range(max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\n\nassert f(g())\n",
        "idx_generation": 91,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a=['apple', 'banana', 'cherry'], b=['banana', 'durian', 'grape']) -> bool:\n    \"\"\"Check if the given string is present in either list a or list b\"\"\"\n    return s in a and s not in b\n\ndef g(a=['apple', 'banana', 'cherry'], b=['banana', 'durian', 'grape']):\n    return a[2]\n\nassert f(g())\n",
        "idx_generation": 194,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Remove all duplicate elements from the given array and return the modified array.\n    \"\"\"\n    return list(set(arr))\n\ndef g():\n    return [1, 2, 3, 2, 4, 5, 2, 6]\n\nassert f(g()) == [1, 2, 3, 4, 5, 6]\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Check if two strings are anagrams of each other.\n    \"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g():\n    return \"listen\", \"silent\"\n\nassert f(*g())\n",
        "idx_generation": 55,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Check if a given number n is a perfect square and its square root is divisible by k.\n    \"\"\"\n    def is_perfect_square(num):\n        return int(math.sqrt(num))**2 == num\n    \n    return is_perfect_square(n) and math.sqrt(n) % k == 0\n\ndef g():\n    return 16, 2\n\nassert f(*g())\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(path: List[int], edges=[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12]]) -> bool:\n    \"\"\" Find any path from node 1 to node n in a given digraph on vertices 1, 2,..., n.\"\"\"\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 1\n    assert path[-1] == max((max(edge) for edge in edges))\n    return len(path) > 2\n\ndef g(edges = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12]]):\n    n = max(max(edge) for edge in edges)\n    paths = {1: [1]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)\nassert f(g())\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=8) -> bool:\n    \"\"\"Check if the last digit of the product of n and 3 is equal to the given string.\"\"\"\n    return str(n * 3)[-1] == s\n\ndef g(n=8):\n    return str(n * 3)[-1]\n\nassert f(g())\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str) -> bool:\n    \"\"\"\n    Given a word, check if it is a palindrome.\n    \n    Sample Input:\n    word = 'radar'\n    \n    Sample Output:\n    True\n    \"\"\"\n    return word == word[::-1]\n\ndef g(word = 'radar'):\n    return word\n\nassert f(g()) == True\n",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: float) -> bool:\n    \"\"\"\n    Check if the given number is a perfect square.\n    Return True if the number is a perfect square, False otherwise.\n    \"\"\"\n    return math.isqrt(num)**2 == num\n\ndef g(num=16):\n    return num\n\nassert f(g())\n",
        "idx_generation": 125,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if the product of three numbers is equal to a certain value.\n    \"\"\"\n    return x * y * z == 24\ndef g(x: int, y: int):\n    z = 24 // (x * y)\n    return z\nassert f(g(2, 3), 2, 3)\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 157,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if there exists a row or column that contains only even numbers.\n    Return True if such a row or column exists, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    row_even = [0] * rows\n    col_even = [0] * cols\n\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] % 2 == 0:\n                row_even[i] = 1\n                col_even[j] = 1\n\n    return any(row_even) or any(col_even)\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 64,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=-50) -> bool:\n    \"\"\"Check if the given number is divisible by both a and b.\"\"\"\n    return n % a == 0 and n % b == 0\n\ndef g(a = 10, b = -50):\n    if a == 0 or b == 0:\n        return 0\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 54,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(st: str, a='zine', b='cerofilimybazine') -> bool:\n    \"\"\"Check if the given string can be formed by concatenating a with b.\"\"\"\n    return a + b == st\n\ndef g(a = 'zine', b = 'cerofilimybazine'):\n    return a + b\n\nassert f(g())\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(res: int, m=27368816582234104063, n=4) -> bool:\n    \"\"\"\n    Find the result of applying the following operation to integer m, n times: if the last digit is zero, remove\n    the zero, otherwise subtract 1.\n    \"\"\"\n    for i in range(n):\n        m = m - 1 if m % 10 else m // 10\n    return res == m\n\ndef g(m = 27368816582234104063, n = 4):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m\n\nassert f(g())\n",
        "idx_generation": 16,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, max_nums=5, options=[10, 20, 30, 40, 50, 60, 70, 80, 90]) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose sum is the target value, and each number can be used at most twice.\"\"\"\n    for n in nums:\n        assert n in options\n    nums_dict = {}\n    for num in nums:\n        if num not in nums_dict:\n            nums_dict[num] = 1\n        else:\n            nums_dict[num] += 1\n    return sum(nums) == target and all(count <= 2 for count in nums_dict.values()) and len(nums_dict) <= max_nums\ndef g(target=100, max_nums=5, options=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    from itertools import combinations_with_replacement\n    for n in range(max_nums + 1):\n        for p in combinations_with_replacement(options, n):\n            if sum(p) == target:\n                return list(p)\nassert f(g())\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(path: List[int], edges=[[1, 2], [2, 3], [3, 4]]) -> bool:\n    \"\"\" Check if the given path is a valid path in the given directed graph.\"\"\"\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    return True\n\ndef g(edges=[[1, 2], [2, 3], [3, 4]]):\n    paths = {1: [1]}\n    for _ in range(4):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(4)\n\nassert f(g())\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target: str = 'Alice') -> bool:\n    \"\"\"\n    Check if a given name exists in the list of names in a case-insensitive manner.\n    Returns True if it does, False otherwise.\n    \"\"\"\n    for name in names:\n        if name.lower() == target.lower():\n            return True\n    return False\n\ndef g(names: List[str] = ['Alice', 'Bob', 'Charlie']):\n    return names\n\nassert f(g()) == True\n",
        "idx_generation": 311,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a perfect square.\"\"\"\n    return n >= 0 and int(n**0.5)**2 == n\n\ndef g(n=16):\n    return n\n\nassert f(g())\n",
        "idx_generation": 94,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string s is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 79,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=3) -> bool:\n    \"\"\"\n    Check if a given string has a length greater than a target number.\n    \"\"\"\n    return len(s) > target\n\ndef g(target=3):\n    return \"Hello World\"\n\nassert f(g())\n",
        "idx_generation": 254,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\ndef f(x: List[int], t=0, a=0, e=0, s=1) -> bool:\n    \"\"\"Check if the sublist of values is a palindrome\"\"\"\n    sublist = [x[i] for i in range(a, e, s)]\n    return sublist == sublist[::-1]\n\ndef g(t=0, a=0, e=0, s=1):\n    x = [random.randint(1, 100) for _ in range(10)]\n    return x\n\nassert f(g())\n",
        "idx_generation": 94,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers nums, determine if there exist two numbers in the list such that their difference is equal to target.\n    Return True if such numbers exist, otherwise return False.\n    \"\"\"\n    num_set = set()\n\n    for num in nums:\n        complement = num - target\n        if complement in num_set:\n            return True\n        num_set.add(num)\n\n    return False\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\n# Test case\ntest_nums = [1, 2, 3, 4, 5]\ntest_target = 3\nassert f(*g(test_nums, test_target))\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a matrix is symmetric i.e. it is equal to its transpose.\n    \"\"\"\n    transpose = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n    return matrix == transpose\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 60,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the product of all the numbers in the given list.\n    Return the product as an integer.\n    \"\"\"\n    product = math.prod(nums)\n    return product\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g()) == 120\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(a: List[int], b: List[int]) -> bool:\n    \"\"\"Check if the arrays a and b have the same elements, regardless of order.\"\"\"\n    return set(a) == set(b)\n\ndef g(a=[1, 2, 3, 4, 5], b=[5, 4, 3, 2, 1]):\n    return a, b\n\nassert f(*g())\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Given a list of strings and a target substring, find all strings in the list\n    that contain the target substring and return them as a new list.\n    \n    Sample Input:\n    arr = ['apple', 'banana', 'cherry', 'grape', 'orange']\n    substring = 'an'\n    \n    Sample Output:\n    ['banana', 'orange']\n    \"\"\"\n    strings = []\n    for s in arr:\n        if substring in s:\n            strings.append(s)\n    return strings\n\ndef g():\n    return ['apple', 'banana', 'cherry', 'grape', 'orange'], 'an'\n\nassert f(*g()) == ['banana', 'orange']\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Find if there exists a pair of numbers in a list that add up to a given target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=5):\n    nums = [1, 2, 3, 4]\n    return nums\nassert f(g())\n",
        "idx_generation": 4,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(words: List[str], length: int) -> bool:\n    \"\"\"\n    Check if there are exactly length words in the given list that have the same length.\n\n    Example:\n    words = ['apple', 'banana', 'orange', 'grape', 'melon', 'kiwi']\n    length = 5\n\n    The words 'apple' and 'grape' have the same length, so the function should return True.\n\n    Hint: You can use the `len()` function to get the length of a string.\n    \"\"\"\n    length_count = {}\n    for word in words:\n        word_length = len(word)\n        if word_length in length_count:\n            length_count[word_length] += 1\n        else:\n            length_count[word_length] = 1\n    return length in length_count.values()\n\ndef g(words = ['apple', 'banana', 'orange', 'grape', 'melon', 'kiwi']):\n    return words\n\nassert f(g(), 2)\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exist two numbers in the list that add up to the target integer.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if target - num in num_set:\n            return True\n    return False\n\ndef g(nums=[-1, 0, 1, 2, -1, -4]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 40,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Check if the given string s can be transformed into string t by removing exactly one character.\n\n    Sample Input:\n    `s = \"abcde\", t = \"abde\"`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    if len(s) - len(t) != 1:\n        return False\n\n    for i in range(len(s)):\n        if s[:i] + s[i + 1:] == t:\n            return True\n\n    return False\n\ndef g(s: str, t: str):\n    return s, t\n\nassert f(*g(\"abcde\", \"abde\"))\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, days=7) -> bool:\n    \"\"\"\n    Check if the given date is within a certain number of days from today.\n    \"\"\"\n    today = datetime.date.today()\n    diff = (date - today).days\n    return 0 <= diff <= days\n\ndef g(days=7):\n    return datetime.date.today() + datetime.timedelta(days=days)\n\nassert f(g())\n",
        "idx_generation": 107,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix (a list of lists of integers), check if it is a square matrix.\n    A square matrix has the same number of rows and columns.\n    \"\"\"\n    rows = len(matrix)\n    for row in matrix:\n        if len(row) != rows:\n            return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 162,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int]) -> bool:\n    \"\"\"\n    Check if a given list of integers is a palindrome.\n    A palindrome is a sequence of characters that reads the same forwards and backwards.\n    Return True if the list is a palindrome, and False otherwise.\n    \"\"\"\n    return x == list(reversed(x))\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 185,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str = 'python') -> bool:\n    \"\"\"\n    Check if a given string starts with a specific target string.\n    Returns True if it does, False otherwise.\n    \"\"\"\n    return s.startswith(target)\n\ndef g(target: str = 'python'):\n    return target + ' is my favorite programming language'\n\nassert f(g())\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"Find the sum of all even numbers in the given matrix.\"\"\"\n    even_sum = 0\n    for row in matrix:\n        for num in row:\n            if num % 2 == 0:\n                even_sum += num\n    return even_sum\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == 20\n\n",
        "idx_generation": 79,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"\n    Check if there exists a substring in the given string that contains exactly k different characters.\n    \"\"\"\n    n = len(s)\n    for i in range(n):\n        for j in range(i+k, n+1):\n            if len(set(s[i:j])) == k:\n                return True\n    return False\n\ndef g(s='world'):\n    return s[::-1]\n\nassert f(g())\n",
        "idx_generation": 93,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a word contains all the specified vowels.\"\"\"\n    return set(vowels).issubset(set(word.lower()))\ndef g(vowels=['a', 'e', 'i', 'o', 'u']):\n    return \"\".join(vowels)\nassert f(g())\n",
        "idx_generation": 5,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Find the number of coconuts to solve the following riddle:\n        There is a pile of coconuts, owned by five men. One man divides the pile into five equal piles, giving the\n        one left over coconut to a passing monkey, and takes away his own share. The second man then repeats the\n        procedure, dividing the remaining pile into five and taking away his share, as do the third, fourth, and\n        fifth, each of them finding one coconut left over when dividing the pile by five, and giving it to a monkey.\n        Finally, the group divide the remaining coconuts into five equal piles: this time no coconuts are left over.\n        How many coconuts were there in the original pile?\n                                          Quoted from https://en.wikipedia.org/wiki/The_monkey_and_the_coconuts\n    \"\"\"\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\n\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 7\n\nassert f(g())\n",
        "idx_generation": 70,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport string\ndef f(words: List[str]) -> bool:\n    \"\"\"Find a list of 100 distinct words where each word starts with a lowercase letter and ends with an uppercase letter.\"\"\"\n    return len(set(words)) == 100 and all((w[0] in string.ascii_lowercase and w[-1] in string.ascii_uppercase for w in words))\ndef g():\n    import string\n    return [\"\".join(random.choice(string.ascii_lowercase) + random.choice(string.ascii_uppercase) for _ in range(5)) for _ in range(100)]\nassert f(g())\n",
        "idx_generation": 148,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, parts=['Python', 'is', 'cool'], string='Pythoniscool') -> bool:\n    \"\"\"\n    Find a separator that when used to join a given string gives a certain result.\n    \"\"\"\n    separator = x.join(parts)\n    return separator == string\ndef g(parts = ['Python', 'is', 'cool'], string = 'Pythoniscool'):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g())\n",
        "idx_generation": 221,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"\n    Find if there are any duplicate numbers in the given list.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g(target=5):\n    return [1, 2, 3, 4, 5, 5]\n\nassert f(g())\n",
        "idx_generation": 254,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(a: List[int]) -> bool:\n    \"\"\"Check if the array is sorted in non-decreasing order.\"\"\"\n    return all(a[i] <= a[i + 1] for i in range(len(a) - 1))\n\ndef g(a=[1, 2, 3, 4, 5]):\n    return a\n\nassert f(g()) == True\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Check if a given list is sorted in descending order\n    \"\"\"\n    return li == sorted(li, reverse=True)\n\ndef g(li=[5, 4, 3, 2, 1]):\n    return li\n\nassert f(g())\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Check if s1 is an anagram of s2.\n    \"\"\"\n    return sorted(s1.lower()) == sorted(s2.lower())\n\ndef g(s1 = \"listen\", s2 = \"silent\"):\n    return s1, s2\n\nassert f(*g())\n",
        "idx_generation": 147,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=50) -> bool:\n    \"\"\"Check if a string contains a valid email address\"\"\"\n    import re\n    pattern = \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"\n    return bool(re.match(pattern, s))\ndef g(n = 50):\n    return 'test@example.com'\nassert f(g())\n",
        "idx_generation": 42,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an upper triangular matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i > j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [0, 4, 5], [0, 0, 6]]):\n    \"\"\"Return the matrix.\"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 313,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\nfrom typing import List\n\ndef f(words: List[str]) -> List[str]:\n    \"\"\"\n    Find all words in a list that start with a vowel.\n\n    Example:\n    words = ['apple', 'banana', 'cat', 'elephant']\n    The words that start with a vowel are ['apple', 'elephant'].\n    Therefore, the puzzle is solved.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return [word for word in words if word[0].lower() in vowels]\n\ndef g():\n    return ['apple', 'banana', 'cat', 'elephant']\n\nassert f(g()) == ['apple', 'elephant']\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transpose the given matrix.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    The transposed matrix should be:\n    transposed = [[1, 4, 7],\n                  [2, 5, 8],\n                  [3, 6, 9]]\n    \"\"\"\n    n = len(matrix)\n    transposed = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            transposed[i][j] = matrix[j][i]\n    return transposed\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[str], target: str) -> bool:\n    \"\"\"Check if the target string is present in any of the strings in the given list, case-insensitive\"\"\"\n    for string in arr:\n        if target.lower() in string.lower():\n            return True\n    return False\n\ndef g():\n    return [\"Hello\", \"WORLD\", \"Python\", \"coding\", \"puzzle\"]\n\nassert f(g(), \"Worl\")\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(points: List[Tuple[float, float]]) -> bool:\n    \"\"\"\n    Check if all the points lie on the same line.\n    Returns True if they do, False otherwise.\n    \"\"\"\n    if len(points) < 3:\n        return True\n\n    x1, y1 = points[0]\n    x2, y2 = points[1]\n    slope = (y2 - y1) / (x2 - x1)\n\n    for i in range(2, len(points)):\n        x, y = points[i]\n        if (y - y1) != slope * (x - x1):\n            return False\n\n    return True\n\ndef g():\n    return [(1, 2), (3, 4), (5, 6), (7, 8)]\n\nassert f(g())\n",
        "idx_generation": 149,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exist three numbers in the list whose sum is equal to the target.\"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n-2):\n        left, right = i+1, n-1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 169,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(names: List[str], target_length: int) -> bool:\n    \"\"\"\n    Check if there is a name in the given list of names that has a length greater than the target length.\n\n    Example:\n    names = [\"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    target_length = 5\n\n    The name \"Charlie\" has a length greater than 5, so the function should return True.\n    \"\"\"\n    for name in names:\n        if len(name) > target_length:\n            return True\n    return False\n\ndef g(names = [\"Alice\", \"Bob\", \"Charlie\", \"David\"], target_length = 5):\n    return names, target_length\n\nassert f(*g())\n",
        "idx_generation": 371,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> int:\n    \"\"\"Calculate the factorial of the given number.\"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * f(n-1)\n\ndef g():\n    return 5\n\nassert f(g()) == 120\n\n",
        "idx_generation": 449,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target_count=3) -> bool:\n    \"\"\"Check if there are at least target_count number of even numbers in the list.\"\"\"\n    count = 0\n    for num in lst:\n        if num % 2 == 0:\n            count += 1\n        if count >= target_count:\n            return True\n    return False\n\ndef g(target_count=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Find a way to rearrange the letters in the word \"python\" to get the word \"typhon\". The answer should be represented as a list of index mappings.\n    \"\"\"\n    return ['python'[i] for i in li] == list('typhon')\ndef g():\n    return ['python'.index(t) for t in 'typhon']\nassert f(g())\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int]) -> bool:\n    \"\"\"Check if the given sequence is strictly increasing.\"\"\"\n    return all(seq[i] < seq[i+1] for i in range(len(seq)-1))\n\ndef g(seq=[1, 2, 3, 4, 5]):\n    \"\"\"Return the sequence.\"\"\"\n    return seq\n\nassert f(g())\n",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(triangle: List[List[int]]) -> bool:\n    \"\"\"\n    Check if there exists a path from the top of the triangle to the bottom such that the sum of the numbers along the path is a prime number.\n    Return True if such a path exists, False otherwise.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    rows = len(triangle)\n    dp = [[0] * rows for _ in range(rows)]\n    dp[0][0] = triangle[0][0]\n    \n    for i in range(1, rows):\n        for j in range(i+1):\n            if j == 0:\n                dp[i][j] = dp[i-1][j] + triangle[i][j]\n            elif j == i:\n                dp[i][j] = dp[i-1][j-1] + triangle[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j-1], dp[i-1][j]) + triangle[i][j]\n    \n    for num in dp[rows-1]:\n        if is_prime(num):\n            return True\n    \n    return False\n\ndef g():\n    return ([[1], [2, 3], [4, 5, 6]],)\n\nassert f(*g())\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given an integer matrix, determine if it is a Symmetric matrix.\n    A Symmetric matrix is one in which the matrix is equal to its transpose.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    transpose = [[0 for _ in range(rows)] for _ in range(cols)]\n    for i in range(rows):\n        for j in range(cols):\n            transpose[j][i] = matrix[i][j]\n    \n    return matrix == transpose\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 202,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a number n is a perfect square.\n    \"\"\"\n    sqrt = math.isqrt(n)\n    return sqrt * sqrt == n\n\ndef g(n=16):\n    return n\n\nassert f(g())\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\ndef f(s: str, pattern=r'\\d+') -> bool:\n    \"\"\"Check if the string matches the given pattern\"\"\"\n    return bool(re.match(pattern, s))\ndef g(pattern=r'\\d+'):\n    return '1234'\nassert f(g())\n",
        "idx_generation": 125,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a pair of numbers in the list whose sum is equal to the target.\n    \"\"\"\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i+1, n):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), 12)\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Check if a target string is present in a given string, ignoring case sensitivity.\n    \"\"\"\n    return target.lower() in s.lower()\n\ndef g(s = \"Hello, World!\", target = \"world\"):\n    return s, target\n\nassert f(*g())\n",
        "idx_generation": 121,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    target_sum = sum(matrix[0])\n    # Check rows\n    for i in range(rows):\n        if sum(matrix[i]) != target_sum:\n            return False\n    # Check columns\n    for j in range(cols):\n        col_sum = 0\n        for i in range(rows):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n    # Check diagonals\n    diagonal_sum1 = 0\n    diagonal_sum2 = 0\n    for i in range(rows):\n        diagonal_sum1 += matrix[i][i]\n        diagonal_sum2 += matrix[i][cols - i - 1]\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n    return True\n\ndef g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    \"\"\"Return the matrix.\"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nfrom typing import List, Tuple\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    A magic square is a square matrix in which the sums of the numbers in each row, each column, and both main diagonals are the same.\n    Returns True if it is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for col in range(n):\n        if sum(matrix[i][col] for i in range(n)) != target_sum:\n            return False\n\n    # Check main diagonal\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n\n    # Check secondary diagonal\n    if sum(matrix[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n\n    return True\n\ndef g(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Generate a 3x3 matrix with random numbers.\n    \"\"\"\n    return matrix\n\n# Example usage\nmatrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nassert f(g(matrix))\n",
        "idx_generation": 142,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=2) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list such that their sum is divisible by n.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    n = 3\n    Output: True (The pair [2, 4] has a sum of 6, which is divisible by 3)\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] + nums[j]) % n == 0:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], n=2):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 14,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(p: List[int], edges=[[4, 8], [7, 6], [2, 0], [3, 2], [6, 3], [4, 5], [11, 5], [11, 0], [1, 5], [12, 12], [12, 1], [4, 11], [3, 3], [2, 10], [10, 6], [0, 7], [2, 7], [6, 11], [2, 9], [7, 7], [8, 9], [2, 1], [4, 6], [9, 4]]) -> bool:\n    \"\"\"Find a path with an odd number of nodes from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\n\ndef g(edges = [[4, 8], [7, 6], [2, 0], [3, 2], [6, 3], [4, 5], [11, 5], [11, 0], [1, 5], [12, 12], [12, 1], [4, 11], [3, 3], [2, 10], [10, 6], [0, 7], [2, 7], [6, 11], [2, 9], [7, 7], [8, 9], [2, 1], [4, 6], [9, 4]]):\n    odd_paths = {0: [0]}\n    even_paths = {}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g())\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list that sums up to k.\n    Return True if such a subarray exists, False otherwise.\n    \"\"\"\n    prefix_sum = {0: -1}\n    curr_sum = 0\n    for i, num in enumerate(arr):\n        curr_sum += num\n        if curr_sum - k in prefix_sum:\n            return True\n        prefix_sum[curr_sum] = i\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 9)\n\nassert f(*g())\n\n",
        "idx_generation": 92,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"\n    Given a string s, check if there are at least n consecutive vowels (aeiouy/AEIOUY) in the string.\n\n    Sample Input:\n    s = \"HelloWorld\"\n\n    Sample Output:\n    True\n    \"\"\"\n    vowels = 'aeiouyAEIOUY'\n    count = 0\n    for c in s:\n        if c in vowels:\n            count += 1\n            if count >= n:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(n=3):\n    return 'aeiouy' * n\n\nassert f(g())\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer k, determine if there are three distinct indices i, j, and m in the list\n    such that arr[i] + arr[j] + arr[m] = k.\n    \"\"\"\n    seen = set()\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if k - arr[i] - arr[j] in seen:\n                return True\n            seen.add(arr[i])\n            seen.add(arr[j])\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 12\n\nassert f(*g())\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='abc') -> bool:\n    \"\"\"\n    Check if a given string contains all characters from the target string in the same order.\n    \"\"\"\n    target_index = 0\n    for char in s:\n        if char == target[target_index]:\n            target_index += 1\n            if target_index == len(target):\n                return True\n    return False\n\ndef g(s='abacabadabacaba'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if n is a palindrome.\"\"\"\n    return str(n) == str(n)[::-1]\n\ndef g():\n    return 12321\n\nassert f(g())\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\n\n    Sample Input:\n    string = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return string == string[::-1]\n\ndef g(string=\"racecar\"):\n    return string\n\nassert f(g())\n",
        "idx_generation": 292,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[str], target_word=\"apple\") -> bool:\n    \"\"\"Check if there exists a word in the list that starts with the target word.\"\"\"\n    for word in lst:\n        if word.startswith(target_word):\n            return True\n    return False\n\ndef g(target_word=\"apple\"):\n    return ['apple', 'banana', 'kiwi', 'pear', 'orange']\n\nassert f(g())\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n\n    Sample Input:\n    s = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target=\"hello\") -> bool:\n    \"\"\"\n    Given a string, check if it can be transformed into the target string by rearranging the characters.\n    Return True if it is possible, False otherwise.\n    \"\"\"\n    def rearrange_string(string, target):\n        return len(set(string)) == len(set(target))\n\n    return rearrange_string(string, target)\n\ndef g(string=\"ehllo\"):\n    return string\n\nassert f(g())\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr: str) -> bool:\n    \"\"\"Check if the given substring substr is present in the string s.\"\"\"\n    return substr in s\n\ndef g(s=\"Hello World!\", substr=\"World\"):\n    return s, substr\n\nassert f(*g())\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=8797233, b=2370036150831, lower_bound=8364173) -> bool:\n    \"\"\"Find a large common divisor of two integers.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a = 8797233, b = 2370036150831, lower_bound = 8364173):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g())\n",
        "idx_generation": 220,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a permutation of the numbers from 1 to n.\"\"\"\n    n = len(nums)\n    return set(nums) == set(range(1, n + 1))\n\ndef g():\n    return [3, 1, 2, 5, 4]\n\nassert f(g())\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"\n    Given a string, find if there exists a substring whose length is equal to the target_length and contains only unique characters.\n    \"\"\"\n    n = len(s)\n    if n < target_length:\n        return False\n    unique_substrings = set()\n    for i in range(n - target_length + 1):\n        substring = s[i:i + target_length]\n        if len(substring) == len(set(substring)):\n            unique_substrings.add(substring)\n    return len(unique_substrings) > 0\n\ndef g(target_length=10):\n    return \"abcdefghijabcdefghijabcdefghij\"\n\nassert f(g())\n",
        "idx_generation": 120,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: np.ndarray, target_sum: int) -> bool:\n    \"\"\"\n    Check if there exists a row in the given matrix whose sum is equal to the target sum.\n    \"\"\"\n    for row in matrix:\n        if np.sum(row) == target_sum:\n            return True\n    return False\n\ndef g(matrix: List[List[int]], target_sum: int) -> np.ndarray:\n    return np.array(matrix)\n\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 15), 15)\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, char: str) -> bool:\n    \"\"\"\n    Check if the given character is the first character of the string.\n    Return True if it is, False otherwise.\n    \"\"\"\n    return string[0] == char\n\ndef g(string=\"Hello\", char=\"H\"):\n    return string, char\n\nassert f(*g())\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, t=10, upper=20) -> bool:\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n    \"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper\n\ndef g(t = 10, upper = 20):\n    # Faster solution for simultaneously solving multiple problems is of course possible\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\n\nassert f(g())\n",
        "idx_generation": 409,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if all numbers in the given list are divisible by the target number.\"\"\"\n    return all(num % target == 0 for num in nums)\n\ndef g(nums=[10, 20, 30, 40, 50], target=5):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 406,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Find the sum of all even numbers in the given list.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 6]\n\n    Sample Output:\n    12\n    \"\"\"\n    _sum = 0\n    for num in arr:\n        if num % 2 == 0:\n            _sum += num\n    return _sum\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g()) == 12\n\n",
        "idx_generation": 420,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str = 'python', case_sensitive: bool = False) -> bool:\n    \"\"\"\n    Check if the given string contains the target string. The comparison can be case-sensitive or case-insensitive.\n    \"\"\"\n    if case_sensitive:\n        return target in s\n    else:\n        return target.lower() in s.lower()\n\ndef g(target: str = 'python', case_sensitive: bool = False):\n    s = \"I love Python programming\"\n    return s\n\nassert f(g())\n",
        "idx_generation": 57,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(n: int) -> bool:\n    \"\"\"Check if a given number is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=3, length=15) -> bool:\n    \"\"\"Check if a given string has a certain number of copies of a given substring and of a given length.\"\"\"\n    return string.count(substring) == count and len(string) == length\n\ndef g(substring='abc', count=3, length=15):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '*'\n\nassert f(g())\n",
        "idx_generation": 192,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='') -> bool:\n    \"\"\"Check if there exists a word in the given list that starts with the given prefix.\"\"\"\n    return any(word.startswith(prefix) for word in words)\n\ndef g(prefix=''):\n    return ['apple', 'banana', 'cherry', 'date']\n\nassert f(g())\n",
        "idx_generation": 115,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a given string is an anagram of a palindrome\"\"\"\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    odd_count = 0\n    for count in char_count.values():\n        if count % 2 != 0:\n            odd_count += 1\n    return odd_count <= 1\n\ndef g():\n    return \"aab\"\n\nassert f(g())\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it contains a Pythagorean triple.\n    A Pythagorean triple is a set of three positive integers a, b, and c, such that a^2 + b^2 = c^2.\n    \"\"\"\n    squares = set()\n    for num in nums:\n        squares.add(num * num)\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] * nums[i] + nums[j] * nums[j] == nums[k] * nums[k] or nums[j] * nums[j] + nums[k] * nums[k] == nums[i] * nums[i] or nums[k] * nums[k] + nums[i] * nums[i] == nums[j] * nums[j]:\n                    return True\n    return False\n\ndef g():\n    return [3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 74,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, word='Python') -> bool:\n    \"\"\"Check if the word is present in the sentence\"\"\"\n    return word in sentence\n\ndef g(word='Python'):\n    return \"I love Python programming\"\n\nassert f(g())\n",
        "idx_generation": 37,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of numbers, determine if it is a Fibonacci sequence.\n    A Fibonacci sequence is one in which each number is the sum of the two preceding ones, starting from 0 and 1.\n    \"\"\"\n    if len(nums) < 3:\n        return False\n\n    for i in range(2, len(nums)):\n        if nums[i] != nums[i-1] + nums[i-2]:\n            return False\n\n    return True\n\ndef g():\n    return [0, 1, 1, 2, 3, 5, 8, 13, 21]\n\nassert f(g())\n\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(x: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    Returns True if the string is a palindrome, False otherwise.\n    \"\"\"\n    return x == x[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g())\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given integer is a power of 2.\n    Return True if it is, False otherwise.\n    \"\"\"\n    return n > 0 and (n & (n - 1)) == 0\n\ndef g(n=32):\n    return n\n\nassert f(g())\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub_str='abcde', index=3) -> bool:\n    \"\"\"Check if the sub_str is present in s starting from the given index\"\"\"\n    return sub_str in s[index:]\n\ndef g(sub_str='abcde', index=3):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\n\nassert f(g())\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it contains a prime number.\n    A prime number is a positive integer greater than 1 that has no positive integer divisors other than 1 and itself.\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for num in nums:\n        if is_prime(num):\n            return True\n    return False\n\ndef g():\n    return [3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 28,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> int:\n    \"\"\"\n    Find the index of the target number in the list.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 4\n\n    Sample Output:\n    3\n    \"\"\"\n    for i, num in enumerate(arr):\n        if num == target:\n            return i\n    return -1\n\ndef g():\n    return ([1, 2, 3, 4, 5], 4)\n\nassert f(*g()) == 3\n\n",
        "idx_generation": 331,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Remove the duplicate elements from the given list and return the new list.\n\n    Sample Input:\n    nums = [1, 2, 3, 3, 4, 5, 5, 6]\n\n    Sample Output:\n    [1, 2, 3, 4, 5, 6]\n    \"\"\"\n    return list(set(nums))\n\ndef g(nums=[1, 2, 3, 3, 4, 5, 5, 6]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5, 6]\n\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(moves: List[List[int]], initial_state=[5, 8, 3, 0]) -> bool:\n    \"\"\"\n    Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\n    removing one or more objects from a single non-empty heap. The player who takes the last object wins.\n    - initial_state is list of numbers of objects in each heap\n    - moves is a list of your moves: [heap, number of objects to take]\n    - you play first\n    \"\"\"\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [5, 8, 3, 0]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(1, len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g())\n",
        "idx_generation": 30,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: int, a=25) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return x == int(sqrt(a))\n\ndef g(a = 25):\n    return sqrt(a)\n\nassert f(g())\n",
        "idx_generation": 103,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int, min_len: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list that sums up to k and has a minimum length of min_len.\n    Return True if such a subarray exists, False otherwise.\n    \"\"\"\n    prefix_sum = {0: -1}\n    curr_sum = 0\n    for i, num in enumerate(arr):\n        curr_sum += num\n        if curr_sum - k in prefix_sum and i - prefix_sum[curr_sum - k] >= min_len:\n            return True\n        if curr_sum not in prefix_sum:\n            prefix_sum[curr_sum] = i\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 9, 3)\n\nassert f(*g())\n",
        "idx_generation": 65,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=0) -> bool:\n    \"\"\"Check if there are k consecutive even numbers in the given list\"\"\"\n    return any(all(nums[i+j] % 2 == 0 for j in range(k)) for i in range(len(nums)-k+1))\ndef g(nums=[1, 2, 3, 4, 5], k=0):\n    return nums\nassert f(g())\n",
        "idx_generation": 93,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k: int) -> int:\n    \"\"\"\n    Given two integers n and k, find the kth smallest element in the\n    range from 1 to n (inclusive).\n\n    Sample Input:\n    n = 10\n    k = 3\n\n    Sample Output:\n    3\n    \"\"\"\n    return sorted(range(1, n+1))[k-1]\n\ndef g(n=10, k=3):\n    return n, k\n\nassert f(*g()) == 3\n\n",
        "idx_generation": 403,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_len=12, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if the given string can be rearranged to have a length equal to target_len and contain only vowels.\"\"\"\n    return len(s) == target_len and all(c in vowels for c in s)\ndef g(target_len = 12, vowels = ['a', 'e', 'i', 'o', 'u']):\n    s = ''.join(vowels)\n    while len(s) < target_len:\n        s += s\n    return s[:target_len]\nassert f(g())\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains a subsequence that is a palindrome.\n    \"\"\"\n    def is_palindrome(subseq):\n        return subseq == subseq[::-1]\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if is_palindrome(nums[i:j]):\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 105,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"\n    Check if a given number is a prime number.\n\n    Sample Input:\n    num = 17\n\n    Sample Output:\n    True\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Check if a given number n is a prime number or not.\n    A number is a prime number if it is only divisible by 1 and itself.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return is_prime(n)\n\ndef g():\n    return 17, 3\n\nassert f(*g())\n\n",
        "idx_generation": 115,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr: list) -> bool:\n    \"\"\"\n    Check if a number is present in a sorted list using binary search.\n    \"\"\"\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == n:\n            return True\n        elif arr[mid] < n:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return False\n\ndef g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    n = 5\n    return n, arr\n\nassert f(*g())\n",
        "idx_generation": 90,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list such that the sum of its elements is equal to n.\n\n    Sample Input:\n    `n = 10, arr = [3, 4, 7, 2, 1, 8]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in arr:\n        prefix_sum += num\n\n        if prefix_sum == n or prefix_sum - n in prefix_sums:\n            return True\n\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(arr: List[int]):\n    return 10, arr\n\nassert f(*g([3, 4, 7, 2, 1, 8]))\n",
        "idx_generation": 213,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, pairs=[[459604, 0], [364611, 68505], [562652, 512251], [668655, 471975], [464486, 626280], [138684, 177065], [163296, 68630], [188271, 104677], [367839, 338137], [73022, 362103], [464143, 484458], [214935, 189299], [643725, 283515], [908210, 541732], [710201, 234839], [854230, 34479], [3288, 675724], [846637, 396244], [0, 2526576]]) -> bool:\n    \"\"\"\n    Given a sequence of integer pairs, p_i, m_i, where \\\\sum p_i-m_i = 0, find the maximum value, over t, of\n    p_{t+1} + \\\\sum_{i=1}^t (p_i - m_i)\n    \"\"\"\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot += p - m\n        if tot <= n:\n            if tot == n:\n                success = True\n        else:\n            break\n    return success\ndef g(pairs = [[459604, 0], [364611, 68505], [562652, 512251], [668655, 471975], [464486, 626280], [138684, 177065], [163296, 68630], [188271, 104677], [367839, 338137], [73022, 362103], [464143, 484458], [214935, 189299], [643725, 283515], [908210, 541732], [710201, 234839], [854230, 34479], [3288, 675724], [846637, 396244], [0, 2526576]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g())\n",
        "idx_generation": 64,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, max_nums=4, options=[10, 20, 30, 40, 50]) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose sum is the target value, without including duplicates.\"\"\"\n    for n in nums:\n        assert n in options\n    unique_nums = list(set(nums))\n    return len(unique_nums) <= max_nums and sum(unique_nums) == target\ndef g(target=100, max_nums=4, options=[10, 20, 30, 40, 50]):\n    from itertools import combinations\n    for n in range(max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 105,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a=['apple', 'banana', 'cherry'], b=['banana', 'durian', 'grape']) -> bool:\n    \"\"\"Check if the given string is present in both list a and list b\"\"\"\n    return s in a and s in b\n\ndef g(a=['apple', 'banana', 'cherry'], b=['banana', 'durian', 'grape']):\n    return b[0]\n\nassert f(g())\n",
        "idx_generation": 194,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=100, b=200, upper_bound=1000) -> bool:\n    \"\"\"Check if n is a common multiple of a and b and within the upper bound.\"\"\"\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\n\ndef g(a=100, b=200, upper_bound=1000):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\n\nassert f(g())\n",
        "idx_generation": 171,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains duplicate elements.\n    Return True if it contains duplicates, and False otherwise.\n    \"\"\"\n    return len(set(lst)) != len(lst)\n\ndef g():\n    return [1, 2, 3, 4, 5, 5]\n\nassert f(g())\n",
        "idx_generation": 368,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Check if two strings are anagrams of each other.\n\n    Sample Input:\n    s1 = \"listen\"\n    s2 = \"silent\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g():\n    return (\"listen\", \"silent\")\n\nassert f(*g())\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, m: int) -> bool:\n    \"\"\"\n    Check if a given number n is a perfect square and if the square root of n is divisible by m.\n    \"\"\"\n    def is_perfect_square(num):\n        return int(math.sqrt(num))**2 == num\n    \n    return is_perfect_square(n) and math.sqrt(n) % m == 0\n\ndef g():\n    return 81, 3\n\nassert f(*g())\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: float, coeffs=[1.1222556871110754, -0.007015312913509468, -309237.6867547677]) -> bool:\n    \"\"\"\n    Check if a given value x is a root of the quadratic equation ax^2 + bx + c = 0, \n    where the coefficients are provided in the list 'coeffs'.\n    Returns True if x is a root, False otherwise.\n    \"\"\"\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\n\ndef g(coeffs=[1.1222556871110754, -0.007015312913509468, -309237.6867547677]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans\n\nassert f(g())\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=8) -> bool:\n    \"\"\"Check if the first digit of the product of n and 3 is equal to the given string.\"\"\"\n    return str(n * 3)[0] == s\n\ndef g(n=8):\n    return str(n * 3)[0]\n\nassert f(g())\n",
        "idx_generation": 127,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n\n    Sample Input:\n    string = \"radar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return string == string[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "idx_generation": 457,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, a=15, b=100) -> bool:\n    \"\"\"Check if the number is a perfect square between a and b (inclusive)\"\"\"\n    return a <= num <= b and num == int(num ** 0.5) ** 2\ndef g(a=15, b=100):\n    for num in range(a, b+1):\n        if int(num ** 0.5) ** 2 == num:\n            return num\nassert f(g())\n",
        "idx_generation": 127,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is a palindrome.\n    Returns True if the string is a palindrome, False otherwise.\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s=\"madam\"):\n    return s\n\nassert f(g())\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if the reversed version of the alphabetically second string is a substring of s.\"\"\"\n    return s[::-1] in strings and sum((t < s[::-1] for t in strings)) == 1\ndef g(strings = ['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return sorted(strings)[1][::-1]\nassert f(g())\n",
        "idx_generation": 55,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if there exists a row that is a palindrome.\n    Return True if such a row exists, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    for i in range(rows):\n        row = matrix[i]\n        if row == row[::-1]:\n            return True\n\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 4], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, num1=100, num2=25) -> bool:\n    \"\"\"Check if a number is divisible by both num1 and num2.\"\"\"\n    return (n % num1 == 0) and (n % num2 == 0)\ndef g(num1 = 100, num2 = 25):\n    n = num1 * num2\n    return n\nassert f(g())\n",
        "idx_generation": 64,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(res: int, m=1234567890, n=5) -> bool:\n    \"\"\"\n    Find the result of applying the following operation to an integer m, n times: if the last digit is odd, double\n    the number, otherwise subtract 1.\n    \"\"\"\n    for i in range(n):\n        m = m * 2 if m % 2 else m - 1\n    return res == m\n\ndef g(m = 1234567890, n = 5):\n    for i in range(n):\n        m = (m * 2 if m % 2 else m - 1)\n    return m\n\nassert f(g())\n",
        "idx_generation": 156,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, max_nums=3, options=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose total sum is equal to the target value.\"\"\"\n    for n in nums:\n        assert n in options\n    return len(nums) <= max_nums and sum(nums) == target\n\ndef g(target=10, max_nums=3, options=[1, 2, 3, 4, 5]):\n    from itertools import combinations_with_replacement\n    for n in range(max_nums + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\n\nassert f(g())\n",
        "idx_generation": 388,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    \"\"\"Find a path with an odd number of nodes from nodes 0 to n in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 1\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g())\n",
        "idx_generation": 443,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"\n    Check if the given value x is present in the list lst.\n\n    Sample Input:\n    x = 3\n    lst = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return x in lst\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst[2]\n\nassert f(g())\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if n is a perfect square.\"\"\"\n    return n > 0 and int(n**0.5)**2 == n\n\ndef g():\n    return 25\n\nassert f(g())\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Check if a target string is a palindrome.\n    \"\"\"\n    return target == target[::-1]\n\ndef g(s = \"racecar\", target = \"racecar\"):\n    return s, target\n\nassert f(*g())\n",
        "idx_generation": 121,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target_name: str) -> bool:\n    \"\"\"\n    Check if the given list of names contains the target name as a suffix of any name.\n    \"\"\"\n    for name in names:\n        if name.endswith(target_name):\n            return True\n    return False\n\ndef g():\n    return [\"John\", \"Mary\", \"Robert\", \"Lily\", \"David\"]\n\nassert f(g(), \"y\")\n",
        "idx_generation": 455,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=7) -> bool:\n    \"\"\"Check if x is a power of a\"\"\"\n    if x == 0:\n        return False\n    while x != 1:\n        if x % a != 0:\n            return False\n        x = x // a\n    return True\n\ndef g(a=7):\n    return a\nassert f(g())\n",
        "idx_generation": 104,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subset of numbers in the given list that add up to the target.\n    \"\"\"\n    for r in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            if sum(subset) == target:\n                return True\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums, target\n\nassert f(*g())\n\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n",
        "idx_generation": 72,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of a contiguous subarray within the list.\n    Return the maximum sum.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef g():\n    return [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\nassert f(g()) == 6\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=500) -> bool:\n    \"\"\"Check if a number is a factor of another number\"\"\"\n    return b % n == a\ndef g(a = 5, b = 500):\n    for n in range(1, b+1):\n        if b % n == a:\n            return n\nassert f(g())\n",
        "idx_generation": 3,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]]) -> bool:\n    \"\"\"\n    Given a list of 2D points, check if there exists a pair of points such that their x-coordinate difference is equal to their y-coordinate difference.\n    \"\"\"\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            if abs(points[i][0] - points[j][0]) == abs(points[i][1] - points[j][1]):\n                return True\n    return False\n\ndef g():\n    return [(1, 2), (3, 5), (4, 4), (-3, -4)]\nassert f(g())\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is an anagram of a palindrome.\n\n    Sample Input:\n    s = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n\n    odd_count = 0\n    for count in char_count.values():\n        if count % 2 != 0:\n            odd_count += 1\n\n    return odd_count <= 1\n\ndef g():\n    return \"racecar\"\n\nassert f(g()) == True\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Given a list of strings and a target substring, find the strings in the list\n    that start with the target substring and return them as a new list.\n    \n    Sample Input:\n    arr = ['apple', 'banana', 'cherry', 'grape', 'orange']\n    substring = 'ap'\n    \n    Sample Output:\n    ['apple']\n    \"\"\"\n    strings = []\n    for s in arr:\n        if s.startswith(substring):\n            strings.append(s)\n    return strings\n\ndef g():\n    return ['apple', 'banana', 'cherry', 'grape', 'orange'], 'ap'\n\nassert f(*g()) == ['apple']\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"\n    Find a pair of numbers in the given list whose product is equal to the target number.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] * lst[j] == target:\n                return True\n    return False\n\ndef g(target = 10):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 6,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], k: int) -> bool:\n    \"\"\"\n    Check if there exists a word in the list that has exactly k characters.\n    Return True if such a word exists, False otherwise.\n    \"\"\"\n    return any(len(word) == k for word in words)\n\ndef g(k=5):\n    \"\"\"\n    Generate a list of words.\n    \"\"\"\n    return [\"apple\", \"banana\", \"cherry\", \"date\"]\n\nassert f(g(), k=5) == True\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, seq=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if there exists a subsequence of length n in the sequence that is strictly increasing.\"\"\"\n    for i in range(len(seq) - n + 1):\n        subseq = seq[i:i+n]\n        if sorted(subseq) == subseq:\n            return True\n    return False\n\ndef g(n=3, seq=[1, 2, 3, 4, 5, 6]):\n    return n\n\nassert f(g())\n",
        "idx_generation": 57,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exist two numbers in the list that add up to the target integer. The numbers can be repeated.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[-1, 0, 1, 2, -1, -4]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 40,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n\n    Sample Input:\n    s = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s=\"racecar\"):\n    return s\n\nassert f(g())\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"\n    Given a positive integer n, return True if n can be expressed as the sum of two prime numbers, otherwise return False.\n    \"\"\"\n    def is_prime(num: int) -> bool:\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    for i in range(2, n//2 + 1):\n        if is_prime(i) and is_prime(n - i):\n            return True\n    return False\n\ndef g(n=100):\n    return n\n\nassert f(g())\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int]) -> bool:\n    \"\"\"Check if the list contains two numbers whose product is a perfect square.\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if (x[i] * x[j])**(1/2) % 1 == 0:\n                return True\n    return False\n\ndef g():\n    return [2, 4, 6, 3, 9]\n\nassert f(g())\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(ls: List[str]) -> bool:\n    \"\"\"\n    Check if the list of strings contains a string that is a palindrome.\n    \"\"\"\n    return any(s == s[::-1] for s in ls)\n\ndef g():\n    return ['racecar', 'python', 'madam']\n    \nassert f(g())\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(dates: List[str]) -> bool:\n    \"\"\"\n    Check if a list of dates is in ascending order.\n    \"\"\"\n    for i in range(len(dates) - 1):\n        if datetime.strptime(dates[i], \"%Y-%m-%d\") > datetime.strptime(dates[i + 1], \"%Y-%m-%d\"):\n            return False\n    return True\n\ndef g(dates=[\"2022-01-01\", \"2022-02-01\", \"2022-03-01\", \"2022-04-01\"]):\n    return dates\n\nassert f(g())\n",
        "idx_generation": 258,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if all elements in the given matrix are even numbers.\"\"\"\n    return all(all(x % 2 == 0 for x in row) for row in matrix)\n\ndef g(matrix = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 101,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"\n    Check if there exists a substring in the given string that contains exactly k different characters.\n    \"\"\"\n    n = len(s)\n    for i in range(n):\n        for j in range(i+k, n+1):\n            if len(set(s[i:j])) == k:\n                return True\n    return False\n\ndef g(s='programming'):\n    return s\n\nassert f(g())\n\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, pattern='aba') -> bool:\n    \"\"\"Check if the word matches the given pattern.\"\"\"\n    if len(word) != len(pattern):\n        return False\n    char_to_pattern = {}\n    pattern_to_char = {}\n    for i in range(len(word)):\n        char = word[i]\n        if char not in char_to_pattern:\n            char_to_pattern[char] = pattern[i]\n        if pattern[i] not in pattern_to_char:\n            pattern_to_char[pattern[i]] = char\n        if char_to_pattern[char] != pattern[i] or pattern_to_char[pattern[i]] != char:\n            return False\n    return True\n\ndef g(pattern='aba'):\n    word = 'cdc'\n    return word\n\nassert f(g())\n",
        "idx_generation": 26,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport string\n\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is a pangram.\n    A pangram is a sentence that contains every letter of the alphabet at least once.\n    Returns True if it is a pangram, False otherwise.\n    \"\"\"\n    s = s.lower()\n    return set(string.ascii_lowercase).issubset(s)\n\ndef g():\n    return \"The quick brown fox jumps over the lazy dog\"\n\nassert f(g())\n",
        "idx_generation": 149,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\nfrom typing import List\n\ndef f(emails: List[str]) -> bool:\n    \"\"\"\n    Check if all the emails in the given list are valid.\n    Returns True if all emails are valid, False otherwise.\n    \"\"\"\n    pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'\n    return all(re.match(pattern, email) for email in emails)\n\ndef g(emails=[\"test@example.com\", \"invalid.email@com\", \"another_test@example.com\"]):\n    return emails\n\nassert f(g()) == False\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Remove all duplicate elements from the list while preserving the original order.\"\"\"\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result\n\ndef g(nums=[1, 2, 3, 4, 5, 3, 4, 6]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5, 6]\n",
        "idx_generation": 264,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Rearrange the list to form the largest possible number.\n\n    Sample Input:\n    arr = [10, 2, 3, 5]\n\n    Sample Output:\n    [5, 3, 2, 10]\n    \"\"\"\n    arr = list(map(str, arr))\n    arr.sort(key=lambda x: x * 3, reverse=True)\n    return arr\ndef g():\n    return [10, 2, 3, 5]\nassert f(g()) == ['5', '3', '2', '10']\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, prefix='pre', suffix='ix') -> bool:\n    \"\"\"\n    Check if a word starts with a given prefix and ends with a given suffix.\n    \"\"\"\n    return word.startswith(prefix) and word.endswith(suffix)\n\ndef g(prefix='pre', suffix='ix'):\n    return \"prefix\"\n\nassert f(g())\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str = 'python') -> bool:\n    \"\"\"Check if a given string contains all the characters from the target string\"\"\"\n    return all(char in s for char in target)\n\ndef g(target = 'python'):\n    return 'python is fun'\n\nassert f(g())\n",
        "idx_generation": 52,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=27, b=3, c=12) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])\ndef g(a = 27, b = 3, c = 12):\n    return a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "idx_generation": 1,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transpose the given matrix.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    The transposed matrix should be:\n    transposed = [[1, 4, 7],\n                  [2, 5, 8],\n                  [3, 6, 9]]\n    \"\"\"\n    n = len(matrix)\n    transposed = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            transposed[i][j] = matrix[j][i]\n    return transposed\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[str]], target: str) -> bool:\n    \"\"\"\n    Given a list of lists containing strings and a target string, check if any sublist contains the target string.\n    \n    Sample Input:\n    arr = [['apple', 'banana', 'cherry'], ['dog', 'cat', 'mouse'], ['red', 'green', 'blue']]\n    target = 'mouse'\n    \n    Sample Output:\n    True\n    \"\"\"\n    for sublist in arr:\n        if target in sublist:\n            return True\n    return False\n\ndef g():\n    return [['apple', 'banana', 'cherry'], ['dog', 'cat', 'mouse'], ['red', 'green', 'blue']], 'mouse'\n\nassert f(*g()) == True\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(points: List[Tuple[float, float]]) -> bool:\n    \"\"\"\n    Check if all the points lie on the same line.\n    Returns True if they do, False otherwise.\n    \"\"\"\n    if len(points) < 3:\n        return True\n\n    x1, y1 = points[0]\n    x2, y2 = points[1]\n    slope = (y2 - y1) / (x2 - x1)\n\n    for i in range(2, len(points)):\n        x, y = points[i]\n        if (y - y1) != slope * (x - x1):\n            return False\n\n    return True\n\ndef g():\n    return [(1, 2), (3, 4), (5, 6), (8, 9)]\n\nassert f(g())\n",
        "idx_generation": 170,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[str], target='a') -> bool:\n    \"\"\"\n    Check if the target string is present in the list of strings.\n    - nums is a list of strings\n    - target is the desired string to find\n    \"\"\"\n\n    for string in nums:\n        if target in string:\n            return True\n    return False\n\ndef g(nums = ['apple', 'banana', 'cherry', 'date']):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst1: List[int], lst2: List[int]) -> bool:\n    \"\"\"\n    Check if the given two lists have any common elements.\n    Return True if they do, otherwise return False.\n    \"\"\"\n    return any(x in lst2 for x in lst1)\n\ndef g(lst1: List[int], lst2: List[int]):\n    return lst1, lst2\n\n# Test case\ntest_list1 = [1, 2, 3, 4, 5]\ntest_list2 = [4, 5, 6, 7, 8]\nassert f(*g(test_list1, test_list2))\n",
        "idx_generation": 429,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=10, c=15) -> bool:\n    \"\"\"\n    Check if the given number n is a common factor of three integers a, b, and c.\n    \"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\n\ndef g(a=5, b=10, c=15):\n    return a * b * c\n\nassert f(g())\n\n",
        "idx_generation": 449,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Given a list of numbers, check if the list contains duplicates.\n    Return True if the list contains duplicates, False otherwise.\n    \"\"\"\n    return len(numbers) != len(set(numbers))\n\ndef g(numbers = [1, 2, 3, 4, 5, 5]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 147,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Find a way to rearrange the letters in the word \"hello\" to get the word \"olleh\". The answer should be represented as a list of index mappings.\n    \"\"\"\n    return ['hello'[i] for i in li] == list('olleh')\ndef g():\n    return ['hello'.index(t) for t in 'olleh']\nassert f(g())\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int]) -> bool:\n    \"\"\"Check if the given sequence contains only even numbers.\"\"\"\n    return all(num % 2 == 0 for num in seq)\n\ndef g(seq=[2, 4, 6, 8, 10]):\n    \"\"\"Return the sequence.\"\"\"\n    return seq\n\nassert f(g())\n",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='reverseme', reverse=True) -> bool:\n    \"\"\"Either reverse a string or don't based on the reverse flag\"\"\"\n    return (s[::-1] == target) == reverse\ndef g(target = 'reverseme', reverse = True):\n    return target[::-1] if reverse else target + \"x\"\nassert f(g())\n",
        "idx_generation": 10,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(triangle: List[List[int]]) -> bool:\n    \"\"\"\n    Check if there exists a path from the top of the triangle to the bottom such that the sum of the numbers along the path is a prime number.\n    Return True if such a path exists, False otherwise.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    rows = len(triangle)\n    dp = [[0] * rows for _ in range(rows)]\n    dp[0][0] = triangle[0][0]\n    \n    for i in range(1, rows):\n        for j in range(i+1):\n            if j == 0:\n                dp[i][j] = dp[i-1][j] + triangle[i][j]\n            elif j == i:\n                dp[i][j] = dp[i-1][j-1] + triangle[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j-1], dp[i-1][j]) + triangle[i][j]\n    \n    for num in dp[rows-1]:\n        if is_prime(num):\n            return True\n    \n    return False\n\ndef g():\n    return ([[1], [2, 3], [4, 5, 7]],)\n\nassert f(*g())\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Check if the sum of two numbers is equal to the third number.\n    Returns True if the condition is satisfied, False otherwise.\n    \"\"\"\n    return a + b == c or a + c == b or b + c == a\n\ndef g(a=5, b=10, c=15):\n    return a, b, c\n\nassert f(*g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=100) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to a given number.\"\"\"\n    return x + x == a\ndef g(a = 100):\n    return a // 2\nassert f(g())\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 3, 5, 7, 9]\n\nassert f(g())\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, word='hello') -> bool:\n    \"\"\"\n    Check if a given string contains a specific word.\n    \"\"\"\n    return word in x.lower()\ndef g(word='hello'):\n    return 'Hello, World!'\nassert f(g())\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    \"\"\"\n    n = len(matrix)\n    target_sum = n * (n**2 + 1) // 2\n\n    # Check rows and columns\n    for i in range(n):\n        row_sum = sum(matrix[i])\n        col_sum = sum(matrix[j][i] for j in range(n))\n        if row_sum != target_sum or col_sum != target_sum:\n            return False\n\n    # Check diagonals\n    main_diag_sum = sum(matrix[i][i] for i in range(n))\n    anti_diag_sum = sum(matrix[i][n-i-1] for i in range(n))\n    if main_diag_sum != target_sum or anti_diag_sum != target_sum:\n        return False\n\n    return True\n\ndef g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n\n    A magic square is a square matrix where the sum of each row, each column, and both diagonals are equal.\n\n    Sample Input:\n    matrix = [\n        [2, 7, 6],\n        [9, 5, 1],\n        [4, 3, 8]\n    ]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    row_sums = [sum(row) for row in matrix]\n    if any(sum(row) != target_sum for row in matrix):\n        return False\n    \n    col_sums = [sum(col) for col in zip(*matrix)]\n    if any(sum(col) != target_sum for col in zip(*matrix)):\n        return False\n    \n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    \n    return diagonal_sum1 == diagonal_sum2 == target_sum\n\ndef g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 157,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n=5) -> bool:\n    \"\"\"\n    Check if the sum of all elements in a list is divisible by a given number.\n    \"\"\"\n    return sum(lst) % n == 0\n\ndef g(n=5):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(numbers: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there is a subarray in the list where the product of its elements is divisible by k.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)+1):\n            if math.prod(numbers[i:j]) % k == 0:\n                return True\n    return False\n\ndef g(numbers=[2, 3, 4, 5, 6], k=10):\n    return numbers\n\nassert f(g(), 10)\n\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, c='a') -> bool:\n    \"\"\"\n    Check if a given character is present in a string.\n    \"\"\"\n    return c in s\ndef g(c = 'a'):\n    return c * 2\nassert f(g())\n",
        "idx_generation": 36,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Remove all duplicate elements from a list and return the new list.\n\n    Sample Input:\n    nums = [1, 2, 3, 2, 4, 5, 1, 6, 7, 8, 5]\n\n    Sample Output:\n    [1, 2, 3, 4, 5, 6, 7, 8]\n    \"\"\"\n    return list(set(nums))\n\ndef g():\n    nums = [1, 2, 3, 2, 4, 5, 1, 6, 7, 8, 5]\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5, 6, 7, 8]\n",
        "idx_generation": 250,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='abc') -> bool:\n    \"\"\"\n    Check if a given string contains all characters from the target string in any order.\n    \"\"\"\n    for char in target:\n        if char not in s:\n            return False\n    return True\n\ndef g(s='abacabadabacaba'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a palindrome.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef g(n=12321):\n    return n\n\nassert f(g())\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in non-decreasing order.\"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst\n\nassert f(g())\n",
        "idx_generation": 98,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n\n    Sample Input:\n    s = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    s = \"racecar\"\n    return s\n\nassert f(g()) == True\n\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], k=3) -> bool:\n    \"\"\"Find k positive integers such that each integer divides (the sum of the rest plus 1).\"\"\"\n\n    def sum(nums) -> bool:\n        ans = 0\n        for i in nums:\n            ans += i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + sum(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 3):\n    n = 2\n    sum = 0\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        sum += n\n        n = sum + 1\n    return ans\nassert f(g())\n",
        "idx_generation": 4,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], substring: str) -> bool:\n    \"\"\"\n    Check if any of the words in the list contain the given substring.\n    \"\"\"\n    for word in words:\n        if substring in word:\n            return True\n    return False\n\ndef g(words = [\"apple\", \"banana\", \"cherry\", \"durian\"], substring = \"an\"):\n    return words\n\nassert f(g(), \"an\")\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 365):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g())\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=8797233, b=2370036150831, lower_bound=8364173) -> bool:\n    \"\"\"Check if the given number is a large common divisor of two integers.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a = 8797233, b = 2370036150831, lower_bound = 8364173):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g())\n",
        "idx_generation": 220,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"\n    Given a list of positive integers, find if there is a subset of the list that sums up to the target_sum.\n    \"\"\"\n    def subset_sum(numbers, target_sum, index, current_sum):\n        if current_sum == target_sum:\n            return True\n        if current_sum > target_sum or index >= len(numbers):\n            return False\n        include = subset_sum(numbers, target_sum, index + 1, current_sum + numbers[index])\n        exclude = subset_sum(numbers, target_sum, index + 1, current_sum)\n        return include or exclude\n\n    return subset_sum(numbers, target_sum, 0, 0)\n\ndef g(numbers=[10, 20, 30, 40, 50]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 20,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, k: int) -> bool:\n    \"\"\"\n    Check if a string contains at least k occurrences of the letter 'a'.\n    \"\"\"\n    count = string.count('a')\n    return count >= k\n\ndef g(k=2):\n    return \"banana\"\n\nassert f(g(), k=3)\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given array whose sum is equal to the target.\n    \"\"\"\n    n = len(arr)\n\n    for i in range(n):\n        curr_sum = arr[i]\n        \n        j = i + 1\n        while j <= n:\n            if curr_sum == target:\n                return True\n            if curr_sum > target or j == n:\n                break\n            \n            curr_sum += arr[j]\n            j += 1\n    \n    return False\n\ndef g(arr: List[int], target: int = 10) -> List[int]:\n    return arr\n\nassert f(g([1, 2, 3, 4, 5]), 9)\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, char: str) -> bool:\n    \"\"\"\n    Check if the given character is the first character in the string.\n    Return True if the character is the first character, False otherwise.\n    \"\"\"\n    return string[0] == char\n\ndef g(string=\"Hello\", char=\"H\"):\n    return string, char\n\nassert f(*g()) == True\n",
        "idx_generation": 290,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import numpy as np\nfrom typing import*\n\ndef f(arr: np.ndarray, target_row=1) -> bool:\n    \"\"\"\n    Check if the given 2D numpy array has a specific row that is sorted in non-decreasing order.\n\n    Example:\n    arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    The second row ([4, 5, 6]) is sorted in non-decreasing order.\n    Therefore, the puzzle is solved.\n    \"\"\"\n    row_values = arr[target_row, :]\n    return np.all(np.diff(row_values) >= 0)\n\ndef g(target_row=1):\n    arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    return arr\n\nassert f(g())\n",
        "idx_generation": 495,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subsequence of the list where the sum of any two numbers is a prime number.\n    Returns True if a subsequence exists, False otherwise.\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def check_subsequence(nums):\n        for subset in itertools.combinations(nums, 2):\n            if is_prime(sum(subset)):\n                return True\n        return False\n\n    return check_subsequence(nums)\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 407,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the even numbers.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    [2, 4, 6, 8, 10]\n    \"\"\"\n    return [num for num in arr if num % 2 == 0]\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [2, 4, 6, 8, 10]\n",
        "idx_generation": 420,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]]) -> bool:\n    \"\"\"\n    Given a list of 2D points, check if there exists a pair of points that lie on the same line.\n    \"\"\"\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            if points[i][0] == points[j][0] or points[i][1] == points[j][1]:\n                return True\n    return False\n\ndef g():\n    return [(1, 2), (3, 2), (4, 4), (-3, -4)]\nassert f(g())\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(s: str, target: str = 'python', case_sensitive: bool = False) -> bool:\n    \"\"\"\n    Check if the given string starts with the target string. The comparison can be case-sensitive or case-insensitive.\n    \"\"\"\n    if case_sensitive:\n        return s.startswith(target)\n    else:\n        return s.lower().startswith(target.lower())\n\ndef g(target: str = 'python', case_sensitive: bool = False):\n    s = \"Python programming is fun\"\n    return s\n\nassert f(g())\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a prime number.\n\n    Sample Input:\n    n = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    n = 7\n    return n\n\nassert f(g()) == True\n",
        "idx_generation": 193,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(s: str, sub_str: str = 'abcde', index: int = 3) -> bool:\n    \"\"\"Check if the sub_str exists in s from the given index.\"\"\"\n    return sub_str in s[index:]\n\ndef g(sub_str: str = 'abcde', index: int = 3):\n    return \"0123\" + sub_str + \"45\"\n\nassert f(g())\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Find all words in the list that start with the given prefix.\n    \"\"\"\n    matching_words = []\n    for word in words:\n        if word.startswith(prefix):\n            matching_words.append(word)\n    return matching_words\n\ndef g(words = [\"apple\", \"banana\", \"avocado\", \"orange\"], prefix = \"a\"):\n    return words\n\nassert f(g(), \"a\") == [\"apple\", \"avocado\"]\n\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], k=10, s=100) -> bool:\n    \"\"\"Find a list of k non-negative integers that sum up to s\"\"\"\n    return len(x) == k and sum(x) == s and all([a > 0 for a in x])\ndef g(k = 10, s = 100):\n    x = [1] * k\n    x[0] = s - k + 1\n    return x\nassert f(g())\n",
        "idx_generation": 13,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(s: str, n: int = 5) -> bool:\n    \"\"\"\n    Check if the string s contains a palindrome of length n.\n    Returns True if a palindrome is found, False otherwise.\n    \"\"\"\n    for i in range(len(s) - n + 1):\n        if s[i:i + n] == s[i:i + n][::-1]:\n            return True\n    return False\n\ndef g(n: int = 5):\n    return 'racecar'\n\nassert f(g()) == True\n",
        "idx_generation": 275,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it contains a Pythagorean triple.\n    A Pythagorean triple is a set of three positive integers a, b, and c, such that a^2 + b^2 = c^2.\n    \"\"\"\n    squares = set()\n    for num in nums:\n        squares.add(num * num)\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] * nums[i] + nums[j] * nums[j] == nums[k] * nums[k] or nums[j] * nums[j] + nums[k] * nums[k] == nums[i] * nums[i] or nums[k] * nums[k] + nums[i] * nums[i] == nums[j] * nums[j]:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 74,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='pythonpythonpythonpython', b='pythonpythonpythonpython', length=6) -> bool:\n    \"\"\"Find a string of length length that is in both strings a and b\"\"\"\n    return len(s) == length and s in a and (s in b)\ndef g(a = 'pythonpythonpythonpython', b = 'pythonpythonpythonpython', length = 6):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g())\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str) -> bool:\n    \"\"\"Check if a given sentence is a palindrome\"\"\"\n    sentence = sentence.lower().replace(\" \", \"\")\n    return sentence == sentence[::-1]\ndef g():\n    return \"A man a plan a canal Panama\"\nassert f(g())\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> List[int]:\n    \"\"\"Generate a list of Fibonacci numbers up to n\"\"\"\n    fib_list = []\n    a, b = 0, 1\n    while a <= n:\n        fib_list.append(a)\n        a, b = b, a + b\n    return fib_list\n\ndef g():\n    return 100\n\nassert f(g()) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given number is a prime number\"\"\"\n    num = int(s)\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(n=3):\n    return str(n)\n\nassert f(g())\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=1, target='a') -> bool:\n    \"\"\"Check if the n-th occurrence of a character in a string matches a specific target.\"\"\"\n    return s.count(target, 0, n) == n\ndef g(n = 1, target = 'a'):\n    return target * n\nassert f(g())\n",
        "idx_generation": 7,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, count=2) -> bool:\n    \"\"\"Check if there exists a substring that appears exactly count times in a given string\"\"\"\n    substring_length = len(s) // (count+1)\n    for i in range(len(s)-substring_length+1):\n        substring = s[i:i+substring_length]\n        if s.count(substring) == count:\n            return True\n    return False\ndef g(s='abababab'):\n    count = 3\n    return s, count\nassert f(*g())\n",
        "idx_generation": 19,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring: str) -> str:\n    \"\"\"\n    Find the longest common prefix between two strings.\n\n    Sample Input:\n    s = 'flower'\n    substring = 'flow'\n\n    Sample Output:\n    'flow'\n    \"\"\"\n    i = 0\n    while i < len(s) and i < len(substring) and s[i] == substring[i]:\n        i += 1\n    return s[:i]\n\ndef g():\n    s = 'flower'\n    substring = 'flow'\n    return s, substring\n\nassert f(*g()) == 'flow'\n",
        "idx_generation": 218,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine if it is a magic square. A matrix is considered a magic square if\n    the sum of each row, each column, and each diagonal is the same.\n    Return True if the matrix is a magic square, otherwise return False.\n    \"\"\"\n    n = len(matrix)\n\n    target_sum = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum or sum(matrix[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n\n    return True\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\n# Test case\ntest_matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nassert f(g(test_matrix))\n",
        "idx_generation": 31,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=-10, b=5) -> bool:\n    \"\"\"Solve a multiplication problem\"\"\"\n    return b * n + a % b == a\ndef g(a = -10, b = 5):\n    return a // b\nassert f(g())\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the index of the target element in the given list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 3\n\n    Sample Output:\n    2\n    \"\"\"\n    return nums.index(target)\n\ndef g():\n    return [1, 2, 3, 4, 5], 3\n\nassert f(*g()) == 2\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it contains duplicate elements.\n    \"\"\"\n    unique_nums = set(nums)\n    if len(nums) != len(unique_nums):\n        return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 5]\n\nassert f(g())\n\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], a=987654321, s=12345, e=10000000000) -> bool:\n    \"\"\"Create a list that is a subrange of an arithmetic sequence.\"\"\"\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a=987654321, s=12345, e=10000000000):\n    return list(range(a, e + 1, s))\nassert f(g())\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=100) -> bool:\n    \"\"\"Check if a number is a multiple of another number\"\"\"\n    return n % b == a\ndef g(a = 2, b = 100):\n    for n in range(1, b+1):\n        if n % b == a:\n            return n\nassert f(g())\n",
        "idx_generation": 14,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], threshold: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of numbers whose sum is equal to or greater than the threshold.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] >= threshold:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 30,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, num: int = 10) -> bool:\n    \"\"\"\n    Check if the number n is divisible by num and the square root of n is a whole number.\n    \"\"\"\n    return n % num == 0 and sqrt(n).is_integer()\n\ndef g(num: int = 10):\n    return num * num\n\nassert f(g())\n",
        "idx_generation": 153,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int, max_len: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list that sums up to k and has a maximum length of max_len.\n    Return True if such a subarray exists, False otherwise.\n    \"\"\"\n    prefix_sum = {0: -1}\n    curr_sum = 0\n    for i, num in enumerate(arr):\n        curr_sum += num\n        if curr_sum - k in prefix_sum and i - prefix_sum[curr_sum - k] <= max_len:\n            return True\n        if curr_sum not in prefix_sum:\n            prefix_sum[curr_sum] = i\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 9, 2)\n\nassert f(*g())\n",
        "idx_generation": 65,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given an array of integers and a target number, find if there are two distinct indices i and j in the array such that\n    nums[i] = nums[j] and the absolute difference between i and j is at most k.\n\n    Example:\n    nums = [1, 2, 3, 1]\n    k = 3\n    output: True\n    \"\"\"\n    num_dict = {}\n\n    for i, num in enumerate(nums):\n        if num in num_dict and i - num_dict[num] <= k:\n            return True\n        num_dict[num] = i\n\n    return False\n\ndef g(nums = [1, 2, 3, 1], k = 3):\n    return nums, k\n\nassert f(*g())\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a Fibonacci number.\n    \"\"\"\n    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b\n    return b == n\n\ndef g():\n    return 8\n\nassert f(g())\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if two strings are anagrams of each other.\"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g(s1=\"listen\", s2=\"silent\"):\n    return s1, s2\n\nassert f(*g())\n",
        "idx_generation": 115,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if a given list of numbers is a palindrome.\n\n    Example:\n    numbers = [1, 2, 3, 2, 1]\n    output: True\n    \"\"\"\n    return numbers == numbers[::-1]\n\ndef g(numbers = [1, 2, 3, 2, 1]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 108,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a palindrome.\n    Return True if it is a palindrome, False otherwise.\n    \"\"\"\n    temp = n\n    reverse = 0\n    while temp > 0:\n        digit = temp % 10\n        reverse = reverse * 10 + digit\n        temp = temp // 10\n    return n == reverse\n\ndef g():\n    return 1221\n\nassert f(g())\n",
        "idx_generation": 495,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a prime number.\n    A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 116,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of numbers, check if there exists a number that is a perfect square.\n    Return True if there exists a perfect square, False otherwise.\n    \"\"\"\n    for num in nums:\n        sqrt = int(num ** 0.5)\n        if sqrt * sqrt == num:\n            return True\n    return False\n\ndef g():\n    nums = [4, 7, 9, 12, 16]\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n = 3) -> bool:\n    \"\"\"Check if there exists a sublist of a specified length, such that the sum of its elements is divisible by n.\"\"\"\n    for i in range(len(arr) - n + 1):\n        sublist_sum = 0\n        for j in range(i, i+n):\n            sublist_sum += arr[j]\n        if sublist_sum % n == 0:\n            return True\n    return False\n\ndef g(n = 3):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n    \nassert f(g())\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew']) -> bool:\n    \"\"\"Check if the given string is a fruit and is present in the list.\"\"\"\n    return s in strings and any(fruit in s for fruit in strings)\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew']):\n    return strings[2]\nassert f(g())\n",
        "idx_generation": 13,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, pairs=[[459604, 0], [364611, 68505], [562652, 512251], [668655, 471975], [464486, 626280], [138684, 177065], [163296, 68630], [188271, 104677], [367839, 338137], [73022, 362103], [464143, 484458], [214935, 189299], [643725, 283515], [908210, 541732], [710201, 234839], [854230, 34479], [3288, 675724], [846637, 396244], [0, 2526576]]) -> bool:\n    \"\"\"\n    Given a sequence of integer pairs, p_i, m_i, where \\\\sum p_i-m_i = 0, find the minimum value, over t, of\n    p_{t+1} + \\\\sum_{i=1}^t (p_i - m_i)\n    \"\"\"\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot += p - m\n        if tot >= n:\n            if tot == n:\n                success = True\n        else:\n            break\n    return success\ndef g(pairs = [[459604, 0], [364611, 68505], [562652, 512251], [668655, 471975], [464486, 626280], [138684, 177065], [163296, 68630], [188271, 104677], [367839, 338137], [73022, 362103], [464143, 484458], [214935, 189299], [643725, 283515], [908210, 541732], [710201, 234839], [854230, 34479], [3288, 675724], [846637, 396244], [0, 2526576]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot < n:\n            n = tot\n    return n\nassert f(g())\n",
        "idx_generation": 368,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, max_nums=4, options=[10, 20, 30, 40, 50]) -> bool:\n    \"\"\"Find a unique selection of exactly max_nums numbers whose sum is the target value, without including duplicates.\"\"\"\n    for n in nums:\n        assert n in options\n    unique_nums = list(set(nums))\n    return len(unique_nums) == max_nums and sum(unique_nums) == target\ndef g(target=100, max_nums=4, options=[10, 20, 30, 40, 50]):\n    from itertools import combinations\n    for c in combinations(options, max_nums):\n        if sum(c) == target:\n            return list(c)\nassert f(g())\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], char: str) -> bool:\n    \"\"\"\n    Given a list of words and a character, determine if any of the words contain the given character.\n\n    Sample Input:\n    `['apple', 'banana', 'cherry']`, `'p'`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return any(char in word for word in words)\n\ndef g():\n    return ['apple', 'banana', 'cherry'], 'p'\n\nassert f(*g())\n",
        "idx_generation": 332,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=100, b=200, upper_bound=1000) -> bool:\n    \"\"\"Check if n is a common multiple of a and b and within the upper bound.\"\"\"\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\n\ndef g(a=100, b=200, upper_bound=1000):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\n\nassert f(g())\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Remove all duplicate elements from the given list.\n\n    Sample Input:\n    arr = [1, 2, 3, 2, 4, 3, 5]\n\n    Sample Output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    return list(set(arr))\n\ndef g():\n    return [1, 2, 3, 2, 4, 3, 5]\n\nassert f(g()) == [1, 2, 3, 4, 5]\n\n\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(moves: List[List[int]], capacities=[86, 259, 281], init=[47, 18, 35], goal=[35, 0, 65]) -> bool:\n    \"\"\"\n    Given an initial state of water quantities in jugs and jug capacities, find a sequence of moves (pouring\n    one jug into another until it is full or the first is empty) to reaches the given goal state.\n    moves is list of [from, to] pairs\n    \"\"\"\n    state = init.copy()\n    for [i, j] in moves:\n        assert min(i, j) >= 0, 'Indices must be non-negative'\n        assert i != j, 'Cannot pour from same state to itself'\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal\ndef g(capacities = [86, 259, 281], init = [47, 18, 35], goal = [35, 0, 65]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]\nassert f(g())\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string s contains exactly 3 'a's, 2 'b's, and 1 'c'.\"\"\"\n    return s.count('a') == 3 and s.count('b') == 2 and s.count('c') == 1\n\ndef g():\n    return 'a' * 3 + 'b' * 2 + 'c'\n\nassert f(g())\n",
        "idx_generation": 89,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_char='a') -> bool:\n    \"\"\"\n    Given a string, determine if it contains a specific character.\n    The goal is to find a string s that contains the target character.\n    \"\"\"\n    return target_char in s\ndef g(target_char='a'):\n    return 'This is a sample string containing the target character: ' + target_char\nassert f(g())\n",
        "idx_generation": 0,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Given an integer n, determine if it is a perfect square.\n    Return True if the number is a perfect square, otherwise return False.\n    \"\"\"\n    return n**0.5 % 1 == 0\n\ndef g():\n    return 16\n\nassert f(g())\n\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str) -> bool:\n    \"\"\"Check if a given sentence is a pangram\"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    sentence = sentence.lower().replace(\" \", \"\")\n    return all(char in sentence for char in alphabet)\ndef g():\n    return \"The quick brown fox jumps over the lazy dog\"\nassert f(g())\n",
        "idx_generation": 59,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: float, coeffs=[-2.5, 1.3, -0.5]) -> bool:\n    \"\"\"\n    Find any (real) solution to:  a x^2 + b x + c where coeffs = [a, b, c].\n    For example, since x^2 - 3x + 2 has a root at 1, sat(x = 1., coeffs = [1., -3., 2.]) is True.\n    \"\"\"\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\ndef g(coeffs = [-2.5, 1.3, -0.5]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans\nassert f(g())\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_count=3) -> bool:\n    \"\"\"Check if the count of a specific word in a list of words is equal to the target count\"\"\"\n    return words.count(\"apple\") == target_count\ndef g(words=[\"apple\", \"banana\", \"apple\", \"orange\", \"apple\"]):\n    return words\nassert f(g())\n",
        "idx_generation": 12,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nimport datetime\nfrom typing import*\n\ndef f(password: str, length: int, chars: str) -> bool:\n    \"\"\"\n    Check if a given password meets the specified criteria.\n    Return True if the password meets the criteria, False otherwise.\n    \"\"\"\n    if len(password) != length:\n        return False\n    \n    for char in password:\n        if char not in chars:\n            return False\n    \n    return True\n\ndef g(length: int, chars: str) -> str:\n    \"\"\"\n    Generate a random password with the specified length and characters.\n    \"\"\"\n    password = \"\"\n    for _ in range(length):\n        password += random.choice(chars)\n    return password\n\nassert f(g(8, \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"), 8, \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\")\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n\n    Sample Input:\n    s = \"radar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lb: List[bool], trips=[[0, 0, 1], [0, 1, 1], [0, 0, 1], [0, 1, 1]]) -> bool:\n    \"\"\"\n    Given a list of lists of triples of integers, return True for each list with a total of at least 2 and\n    False for each other list.\n    \"\"\"\n    return len(lb) == len(trips) and all((b is True if sum(s) >= 2 else b is False for (b, s) in zip(lb, trips)))\n\ndef g(trips = [[0, 0, 1], [0, 1, 1], [0, 0, 1], [0, 1, 1]]):\n    return [sum(s) >= 2 for s in trips]\n\nassert f(g())\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a number is a perfect square.\n    \"\"\"\n    if n < 0:\n        return False\n    sqrt = int(n ** 0.5)\n    return sqrt * sqrt == n\n\ndef g(n = 25):\n    return n\n\nassert f(g())\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s_case: str, s='pYThon') -> bool:\n    \"\"\"\n    Given a word, replace it either with an upper-case or lower-case depending on whether or not it has more capitals or lower-case letters.\n    If it has strictly more capitals, use upper-case, otherwise, use lower-case.\n    \"\"\"\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())\n    \ndef g(s = 'pYThon'):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())\n\nassert f(g())\n",
        "idx_generation": 409,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    Return True if it is a palindrome, False otherwise.\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"madam\"\n\nassert f(g())\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport string\n\ndef f(s: str, alphabet=string.ascii_lowercase) -> bool:\n    \"\"\"Check if all the letters of the alphabet are present in the given string.\"\"\"\n    for letter in alphabet:\n        if letter not in s.lower():\n            return False\n    return True\n\ndef g():\n    return \"The quick brown fox jumps over the lazy dog\"\n\nassert f(g())\n",
        "idx_generation": 79,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if there exists a row or column that contains all ones.\n    Return True if such a row or column exists, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    row_ones = [0] * rows\n    col_ones = [0] * cols\n\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] == 1:\n                row_ones[i] = 1\n                col_ones[j] = 1\n\n    return any(row_ones) or any(col_ones)\n\ndef g(matrix=[[1, 2, 3], [0, 5, 6], [7, 8, 1]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 292,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=-50) -> bool:\n    \"\"\"Check if the given number is divisible by either a or b.\"\"\"\n    return n % a == 0 or n % b == 0\n\ndef g(a = 10, b = -50):\n    if a == 0 and b == 0:\n        return 0\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 104,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], t=10, a=0, e=5, s=1) -> bool:\n    \"\"\"Check if the sum of values in a sublist is equal to t\"\"\"\n    return t == sum([x[i] for i in range(a, e, s)])\ndef g(t=10, a=0, e=5, s=1):\n    x = [i for i in range(10)]\n    return x\nassert f(g())\n",
        "idx_generation": 4,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(corners: List[List[int]], n=5, a=3, target=4) -> bool:\n    \"\"\"Find a minimal list of corner locations for a\u00d7a tiles that covers [0, n] \u00d7 [0, n] and does not double-cover\n    squares.\n\n    Sample Input:\n    n = 5\n    a = 3\n    target = 4\n\n    Sample Output:\n    [[0, 0], [0, 3], [3, 0], [3, 3]]\n    \"\"\"\n    covered = {(i + x, j + y) for (i, j) in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, 'Double coverage'\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(n) for y in range(n)})\ndef g(n = 5, a = 3, target = 4):\n    return [[x, y] for x in range(0, n, a) for y in range(0, n, a)]\nassert f(g())",
        "idx_generation": 285,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(res: int, m=1234567890, n=5) -> bool:\n    \"\"\"\n    Find the result of applying the following operation to an integer m, n times: if the number is divisible by 3, divide\n    it by 3, otherwise add 1.\n\n    Sample Input:\n    `1234567890, 5`\n\n    Sample Output:\n    `246913578`\n    \"\"\"\n    for i in range(n):\n        m = m // 3 if m % 3 == 0 else m + 1\n    return res == m\n\ndef g(m = 1234567890, n = 5):\n    for i in range(n):\n        m = m // 3 if m % 3 == 0 else m + 1\n    return m\n\nassert f(g())\n",
        "idx_generation": 242,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=20, max_nums=4, options=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose total sum is equal to the target value.\"\"\"\n    for n in nums:\n        assert n in options\n    return len(nums) <= max_nums and sum(nums) == target\n\ndef g(target=20, max_nums=4, options=[2, 4, 6, 8, 10]):\n    from itertools import combinations_with_replacement\n    for n in range(max_nums + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\n\nassert f(g())\n",
        "idx_generation": 432,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(stamps: List[int], target=100, max_stamps=3, options=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) -> bool:\n    \"\"\"Find a selection of at most max_stamps stamps whose total worth is the target value.\"\"\"\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 100, max_stamps = 3, options = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    from itertools import combinations\n    for n in range(max_stamps + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], a=500, b=1000, count=20) -> bool:\n    \"\"\"Find a list of count or more different numbers each between a and b that each have no repeated digits\"\"\"\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 500, b = 1000, count = 20):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g())\n",
        "idx_generation": 19,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a square matrix.\n    \"\"\"\n    rows = len(matrix)\n    for row in matrix:\n        if len(row) != rows:\n            return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 65,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], n: int) -> bool:\n    \"\"\"\n    Check if the given list contains n as one of its elements.\n    \"\"\"\n    return n in lst\n\ndef g():\n    return [1, 2, 3, 4, 5], 3\n\nassert f(*g())\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if n is a perfect square.\"\"\"\n    return n ** 0.5 == int(n ** 0.5)\ndef g():\n    return 49\nassert f(g())\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome. Return True if the string is a palindrome, False otherwise.\n    \"\"\"\n    return string == string[::-1]\n\ndef g(string=\"racecar\"):\n    return string\n\nassert f(g())\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(roots: List[float], coeffs=[-4.239, 5.786]) -> bool:\n    \"\"\"Find all (real) solutions to: x^2 + b x + c (i.e., factor into roots), here coeffs = [b, c]\"\"\"\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06\ndef g(coeffs = [-4.239, 5.786]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\nassert f(g())\n",
        "idx_generation": 169,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], n: int) -> bool:\n    \"\"\"\n    Find the first n words in the list that are palindromes.\n    \"\"\"\n    palindromes = []\n    for word in words:\n        if word == word[::-1]:\n            palindromes.append(word)\n            if len(palindromes) == n:\n                return True\n    return False\n\ndef g(words = [\"level\", \"racecar\", \"python\", \"madam\", \"hello\"], n = 2):\n    return words\n\nassert f(g(), 2)\n",
        "idx_generation": 7,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 23\n\nassert f(g())\n",
        "idx_generation": 187,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=3) -> bool:\n    \"\"\"\n    Given a string consisting only of 'a' and 'b', find if the string is valid. A string is valid if it is non-empty and there are no consecutive 'a' characters.\n\n    Sample Input:\n    `\"abab\"`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return len(s) >= target and 'aa' not in s\n\ndef g(s='abab', target=3):\n    # target is ignored\n    return s\n\nassert f(g())\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int, target: int) -> bool:\n    \"\"\"\n    Check if the sum of three numbers is equal to a certain value.\n    \"\"\"\n    return x + y + z == target\ndef g(x: int, y: int, target: int):\n    z = target - (x + y)\n    return z\nassert f(g(2, 5, 10), 2, 5, 10)\n",
        "idx_generation": 170,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subsequence with a sum equal to zero.\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements,\n    without changing the order of the remaining elements.\n    Returns True if such a subsequence exists, False otherwise.\n    \"\"\"\n    n = len(nums)\n    prefix_sum = set()\n    curr_sum = 0\n\n    for i in range(n):\n        curr_sum += nums[i]\n\n        if curr_sum == 0 or curr_sum in prefix_sum:\n            return True\n\n        prefix_sum.add(curr_sum)\n\n    return False\n\ndef g(nums=[2, -2, 4, -6, 1]):\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, target = 10) -> bool:\n    \"\"\"Find the number of times a specific digit appears in a given number.\"\"\"\n    return x.count(str(target)) > 0\ndef g(target = 10):\n    return str(target) * target\nassert f(g())\n",
        "idx_generation": 44,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    A symmetric matrix is a square matrix that is equal to its transpose.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 83,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list whose sum is equal to the product of two other integers.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums) + 1):\n            subarray = nums[i:j]\n            subarray_sum = sum(subarray)\n            for k in range(len(nums)):\n                for l in range(k + 1, len(nums)):\n                    if subarray_sum == nums[k] * nums[l] or subarray_sum == nums[l] * nums[k]:\n                        return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4]\n\nassert f(g())\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, letters=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a string contains all the specified letters\"\"\"\n    return all(letter in s for letter in letters)\ndef g(letters = ['a', 'e', 'i', 'o', 'u']):\n    return ''.join(letters)\nassert f(g())\n",
        "idx_generation": 32,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], n=10, length=5) -> bool:\n    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)\n\ndef g(n = 10, length = 5):\n    return [2] * (n - length) + [1] * (2 * length - n)\n\nassert f(g())\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=0, b=-1230085432451862) -> bool:\n    \"\"\"Check if n is the quotient of a and b\"\"\"\n    return n == a / b\n\ndef g(a = 0, b = -1230085432451862):\n    if b == 0:\n        return a\n    for n in [a / b, (a / b) + 1, (a / b) - 1]:\n        if n == a / b:\n            return n\nassert f(g())\n",
        "idx_generation": 18,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if n can be expressed as a sum of k prime numbers\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, n) if is_prime(i)]\n    dp = [False] * (n + 1)\n    dp[0] = True\n    for i in range(k):\n        for j in range(n, primes[i] - 1, -1):\n            if dp[j - primes[i]]:\n                dp[j] = True\n    return dp[n]\n\ndef g(n=10, k=3):\n    return n, k\n\nassert f(*g())\n",
        "idx_generation": 52,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Check if s2 is a rotation of s1.\n    \"\"\"\n    if len(s1) != len(s2):\n        return False\n    s1 += s1\n    if s2 in s1:\n        return True\n    return False\n\ndef g(s1=\"abcd\", s2=\"cdab\"):\n    return s1\n\nassert f(g(), \"cdab\")\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], target_length=0) -> bool:\n    \"\"\"\n    Check if there exists a pair of strings in the list that have a combined length greater than or equal to a specific value.\n    Return True if the target_length is 0 and there are at least two strings in the list.\n    Return False if the target_length is a negative value.\n    \"\"\"\n    if target_length == 0 and len(strings) >= 2:\n        return True\n    \n    if target_length < 0:\n        return False\n    \n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if len(strings[i]) + len(strings[j]) >= target_length:\n                return True\n    return False\n\ndef g(target_length=0):\n    return [\"hello\", \"world\", \"python\", \"programming\", \"puzzles\"]\nassert f(g())\n\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a list that add up to a target value\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False\ndef g(target=10):\n    num_list = [1, 3, 5, 7, 9]\n    return num_list\nassert f(g())",
        "idx_generation": 8,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], n: int) -> bool:\n    \"\"\"\n    Check if there are n words in the given list.\n\n    Sample Input:\n    words = [\"apple\", \"banana\", \"cherry\"]\n    n = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(words) == n\n\ndef g():\n    return [\"apple\", \"banana\", \"cherry\"], 3\n\nassert f(*g())\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(seq: List[int]) -> bool:\n    \"\"\"Check if the given sequence is a palindrome.\"\"\"\n    return seq == seq[::-1]\n\ndef g(seq=[1, 2, 3, 4, 3, 2, 1]):\n    \"\"\"Reverse the sequence and check if it is equal to the original sequence.\"\"\"\n    return seq\n\nassert f(g())\n",
        "idx_generation": 155,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='moz', count=70, length=210) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g())\n",
        "idx_generation": 58,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring: str = 'Python') -> bool:\n    \"\"\"\n    Check if a given string contains the given substring. The comparison is case-insensitive.\n    \"\"\"\n    return substring.lower() in s.lower()\n\ndef g(substring = 'Python'):\n    return 'Python is a programming language'\n\nassert f(g())\n",
        "idx_generation": 74,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exist four numbers in the list that add up to the target integer. The numbers can be repeated.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            for k in range(len(nums)):\n                for l in range(len(nums)):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return True\n    return False\n\ndef g(nums=[-1, 0, 1, 2, -1, -4]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, v=54888266, w=670740803) -> bool:\n    \"\"\"Find the smallest n such that if v is cubed n times and w is squared n times, v exceeds w.\"\"\"\n    for i in range(n):\n        assert v <= w\n        v = v**3\n        w = w**2\n    return v > w\n\ndef g(v=54888266, w=670740803):\n    i = 0\n    while v <= w:\n        v = v**3\n        w = w**2\n        i += 1\n    return i\n\nassert f(g())\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"\n    Given two integers n and m, check if there exists a prime number p such that p is a factor of both n and m.\n\n    Sample input:\n    n = 12\n    m = 18\n\n    Sample output:\n    True\n\n    Explanation:\n    The prime factors of 12 are [2, 2, 3] and the prime factors of 18 are [2, 3, 3]. Both numbers share the prime factors 2 and 3.\n    \"\"\"\n    def get_prime_factors(num):\n        factors = []\n        while num % 2 == 0:\n            factors.append(2)\n            num = num // 2\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            while num % i == 0:\n                factors.append(i)\n                num = num // i\n        if num > 2:\n            factors.append(num)\n        return factors\n\n    factors_n = get_prime_factors(n)\n    factors_m = get_prime_factors(m)\n\n    return any(factor in factors_m for factor in factors_n)\n\ndef g(n=12, m=18):\n    return n, m\n\nassert f(*g())\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 262,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_len=10) -> bool:\n    \"\"\"Check if the given string can be rearranged to have a length equal to target_len\"\"\"\n    return len(s) == target_len\ndef g(target_len = 10):\n    s = \"abcd\"\n    while len(s) < target_len:\n        s += s\n    return s[:target_len]\nassert f(g())\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"\n    Check if there exists a pair of words in the list whose length is equal to the sum of the lengths of all other words in the list.\n    \"\"\"\n    word_lengths = [len(word) for word in words]\n    target_length = sum(word_lengths) // 2\n    for i in range(len(words)):\n        for j in range(i + 1, len(words)):\n            if len(words[i]) + len(words[j]) == target_length:\n                return True\n    return False\n\ndef g():\n    return ['apple', 'banana', 'cherry', 'date', 'elderberry']\n\nassert f(g())\n",
        "idx_generation": 321,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str = 'python') -> bool:\n    \"\"\"\n    Check if a given string starts with a specific target string in a case-insensitive manner.\n    Returns True if it does, False otherwise.\n    \"\"\"\n    return s.lower().startswith(target.lower())\n\ndef g(target: str = 'python'):\n    return target + ' is a popular programming language'\n\nassert f(g())\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the maximum element in the given matrix.\n\n    Sample Input:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\n    Sample Output:\n    9\n    \"\"\"\n    max_element = float('-inf')\n    for row in matrix:\n        for num in row:\n            if num > max_element:\n                max_element = num\n    return max_element\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g()) == 9\n\n",
        "idx_generation": 151,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"\n    Check if there exists a substring in the given string that contains exactly k different characters.\n    \"\"\"\n    n = len(s)\n    for i in range(n):\n        for j in range(i+k, n+1):\n            if len(set(s[i:j])) == k:\n                return True\n    return False\n\ndef g(s='programming'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target_word=\"programming\") -> bool:\n    \"\"\"\n    Given a list of words, find if there is a word in the list that is an anagram of the target_word.\n    \"\"\"\n    def is_anagram(word, target_word):\n        if len(word) != len(target_word):\n            return False\n        return sorted(word) == sorted(target_word)\n\n    for word in words:\n        if is_anagram(word, target_word):\n            return True\n    return False\n\ndef g(words=[\"programming\", \"coding\", \"algorithm\", \"debugging\"]):\n    return words\n\nassert f(g())\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, s1='abc', s2='def', count1=5, count2=3) -> bool:\n    \"\"\"\n    Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\n    the same 5 characters\n    \"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:5] == s[-5:])\ndef g(s1 = 'abc', s2 = 'def', count1 = 5, count2 = 3):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 5 + ans + \"?\" * 5\nassert f(g())\n",
        "idx_generation": 13,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s1: str, s2: str, s3: str, s4: str, s5: str) -> bool:\n    \"\"\"Check if all the given strings are anagrams of each other.\"\"\"\n    return all(sorted(s) == sorted(s1) for s in [s1, s2, s3, s4, s5])\n\ndef g(length=5):\n    import random\n    s = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(length))\n    return [s, s[::-1], ''.join(random.sample(s, len(s))), ''.join(random.sample(s, len(s))), s]\n\nassert f(*g())\n",
        "idx_generation": 150,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\nfrom typing import List\n\ndef f(emails: List[str]) -> List[str]:\n    \"\"\"\n    Find all valid email addresses in a list of strings.\n\n    Example:\n    emails = ['john@gmail.com', 'jane@abc.com', 'invalidemail', 'test@example']\n    The valid email addresses are ['john@gmail.com', 'jane@abc.com'].\n    Therefore, the puzzle is solved.\n    \"\"\"\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return [email for email in emails if re.match(pattern, email)]\n\ndef g():\n    return ['john@gmail.com', 'jane@abc.com', 'invalidemail', 'test@example']\n\nassert f(g()) == ['john@gmail.com', 'jane@abc.com']\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, perm='abcdefghijklmnopqrstuvwxyz', target='zyxwvutsrqponmlkjihgfedcba') -> bool:\n    \"\"\"Find a string that, when a given permutation of characters is applied, has a given result.\"\"\"\n    return ''.join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm = 'abcdefghijklmnopqrstuvwxyz', target = 'zyxwvutsrqponmlkjihgfedcba'):\n    return \"\".join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c) for c in target)\nassert f(g())\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> List[int]:\n    \"\"\"Remove all duplicate elements from the given list and return a new list.\"\"\"\n    return list(set(numbers))\n\ndef g():\n    return [1, 2, 2, 3, 4, 4, 5, 5]\n\nassert f(g()) == [1, 2, 3, 4, 5]\n\n",
        "idx_generation": 321,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=24, b=18773099) -> bool:\n    \"\"\"Satisfy a simple if statement with a negation\"\"\"\n    if not (x > 0 and a > 50):\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 24, b = 18773099):\n    if not (a > 50 and b > a):\n        return b + a\n    else:\n        return b - a\nassert f(g())\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is a diagonal matrix\"\"\"\n    return all(matrix[i][j] == 0 for i in range(len(matrix)) for j in range(len(matrix[0])) if i != j)\ndef g(matrix = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]):\n    return matrix\nassert f(g())\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int]) -> bool:\n    \"\"\"\n    Check if a given list of integers contains duplicates.\n    Return True if the list contains duplicates, and False otherwise.\n    \"\"\"\n    return len(set(x)) < len(x)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\n\nassert f(g())\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Check if the given strings s and t are anagrams of each other.\n    Return True if s and t are anagrams, False otherwise.\n    \"\"\"\n    return sorted(s) == sorted(t)\n\ndef g():\n    return (\"listen\", \"silent\")\n\nassert f(*g())\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='pythonprogramming', target='') -> bool:\n    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s = 'pythonprogramming', target = ''):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n",
        "idx_generation": 183,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given three integers a, b, and c, determine if they form a Pythagorean triple.\n\n    A Pythagorean triple is a set of three positive integers a, b, and c, such that a^2 + b^2 = c^2.\n\n    Example:\n    a = 3\n    b = 4\n    c = 5\n    Output: True\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\ndef g(a = 3, b = 4, c = 5):\n    return a, b, c\n\nassert f(*g())\n",
        "idx_generation": 392,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(squares: List[List[int]], m=30, n=12, target=360) -> bool:\n    \"\"\"Tile an m x n checkerboard with 2 x 1 tiles. The solution is a list of fourtuples [i1, j1, i2, j2] with\n    i2 == i1 and j2 == j1 + 1 or i2 == i1 + 1 and j2 == j1 with no overlap.\"\"\"\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\n\ndef g(m = 30, n = 12, target = 360):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\n\nassert f(g())\n",
        "idx_generation": 16,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return string == string[::-1]\ndef g(string=\"madam\"):\n    return string\nassert f(g())\n",
        "idx_generation": 225,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=100) -> bool:\n    \"\"\"Check if a string contains a valid phone number\"\"\"\n    import re\n    pattern = \"^[0-9]{3}-[0-9]{3}-[0-9]{4}$\"\n    return bool(re.match(pattern, s))\ndef g(n = 100):\n    return '123-456-7890'\nassert f(g())\n",
        "idx_generation": 3,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=27, b=3, c=12) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])\ndef g(a = 27, b = 3, c = 12):\n    return a + sum([b * i for i in range(c)])\nassert f(g())\n\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transpose a given matrix.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\n    The transposed matrix is:\n    [\n        [1, 4, 7],\n        [2, 5, 8],\n        [3, 6, 9]\n    ]\n\n    So the function should return the transposed matrix.\n    \"\"\"\n    transposed = [[0 for _ in range(len(matrix))] for _ in range(len(matrix[0]))]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            transposed[j][i] = matrix[i][j]\n    return transposed\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g()) == [\n    [1, 4, 7],\n    [2, 5, 8],\n    [3, 6, 9]\n]\n\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 89,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[str], target: str = 'python') -> bool:\n    \"\"\"\n    Check if a list of strings contains a specific target string as a suffix.\n    Returns True if it does, False otherwise.\n    \"\"\"\n    return any((s.endswith(target) for s in lst))\n\ndef g(target: str = 'python'):\n    return ['I am a fan of ' + target, 'I love ' + target, 'My favorite language is ' + target]\n\nassert f(g())\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"\n    Check if given 2D grid is a valid sudoku solution\n    \"\"\"\n    rows = [set() for _ in range(9)]\n    cols = [set() for _ in range(9)]\n    boxes = [[set() for _ in range(3)] for _ in range(3)]\n\n    for i in range(9):\n        for j in range(9):\n            num = grid[i][j]\n            if num == 0:\n                continue\n            if num in rows[i] or num in cols[j] or num in boxes[i//3][j//3]:\n                return False\n            rows[i].add(num)\n            cols[j].add(num)\n            boxes[i//3][j//3].add(num)\n\n    return True\n\ndef g(grid=[[5, 3, 0, 0, 7, 0, 0, 0, 0],\n            [6, 0, 0, 1, 9, 5, 0, 0, 0],\n            [0, 9, 8, 0, 0, 0, 0, 6, 0],\n            [8, 0, 0, 0, 6, 0, 0, 0, 3],\n            [4, 0, 0, 8, 0, 3, 0, 0, 1],\n            [7, 0, 0, 0, 2, 0, 0, 0, 6],\n            [0, 6, 0, 0, 0, 0, 2, 8, 0],\n            [0, 0, 0, 4, 1, 9, 0, 0, 5],\n            [0, 0, 0, 0, 8, 0, 0, 7, 9]]):\n    return grid\n\nassert f(g())\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(delta: List[int], nums=[[-48, -64, 10], [-6, 46, 95], [89, 95, 20], [-96, 45, 74], [-78, 19, 47], [-6, -69, 55]]) -> bool:\n    \"\"\"Find the missing triple of integers to make them all add up to 0 coordinatewise\"\"\"\n    return all((sum((vec[i] for vec in nums)) + delta[i] == 0 for i in range(3)))\n\ndef g(nums = [[-48, -64, 10], [-6, 46, 95], [89, 95, 20], [-96, 45, 74], [-78, 19, 47], [-6, -69, 55]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]\n\nassert f(g())\n",
        "idx_generation": 94,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the number of occurrences of a target number in a given list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 2, 2, 3, 1]\n    target = 2\n\n    Sample Output:\n    3\n    \"\"\"\n    return nums.count(target)\n\ndef g():\n    nums = [1, 2, 3, 4, 2, 2, 3, 1]\n    target = 2\n    return nums, target\n\nassert f(*g()) == 3\n",
        "idx_generation": 218,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[str], n=0) -> bool:\n    \"\"\"\n    Check if there exist three distinct strings in the list that have a combined length greater than or equal to a specific value.\n    Return True if the target_length is 0 and there are at least three strings in the list.\n    Return False if the target_length is a negative value.\n    \"\"\"\n    if n == 0 and len(lst) >= 3:\n        return True\n    \n    if n < 0:\n        return False\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            for k in range(j+1, len(lst)):\n                if len(lst[i]) + len(lst[j]) + len(lst[k]) >= n:\n                    return True\n    return False\n\ndef g(n=0):\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\nassert f(g())\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=7) -> bool:\n    \"\"\"Check if n is a multiple of both a and b.\"\"\"\n    return n % a == 0 and n % b == 0\ndef g(a = 5, b = 7):\n    return a * b\nassert f(g())\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains duplicate elements.\n    Returns True if there are duplicates, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr=[1, 2, 3, 3, 4]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 168,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Find a way to rearrange the letters in the word \"programming\" to get the word \"gnimmargorp\". The answer should be represented as a list of index mappings.\n    \"\"\"\n    return ['programming'[i] for i in li] == list('gnimmargorp')\ndef g():\n    return ['programming'.index(t) for t in 'gnimmargorp']\nassert f(g())\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int]) -> bool:\n    \"\"\"Check if the given sequence is a permutation of 1 to n.\"\"\"\n    return set(seq) == set(range(1, len(seq) + 1))\n\ndef g(seq = [5, 1, 2, 3, 4]):\n    \"\"\"Return the sequence.\"\"\"\n    return seq\n\nassert f(g())\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"\n    Given a list of numbers, determine if there exists a pair of numbers that sums up to a target sum.\n    The goal is to find a list of numbers nums that contains a pair that sums up to the target sum.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target_sum - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target_sum-9]\nassert f(g())\n",
        "idx_generation": 0,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='abcdefgh', reverse=False) -> bool:\n    \"\"\"Either reverse a string or don't based on the reverse flag\"\"\"\n    if reverse:\n        return s[::-1] == target\n    else:\n        return s == target\ndef g(target='abcdefgh', reverse=False):\n    return target[::-1] if reverse else target\nassert f(g())\n",
        "idx_generation": 85,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(hands: List[int], target_angle=90) -> bool:\n    \"\"\"Find clock hands = [hour, min] such that the angle is target_angle degrees.\"\"\"\n    (h, m) = hands\n    assert 0 < h <= 12 and 0 <= m < 60\n    hour_angle = 30 * h + m / 2\n    minute_angle = 6 * m\n    return abs(hour_angle - minute_angle) == target_angle\n\ndef g(target_angle = 90):\n    for h in range(1, 13):\n        for m in range(60):\n            hour_angle = 30 * h + m / 2\n            minute_angle = 6 * m\n            if abs(hour_angle - minute_angle) == target_angle:\n                return [h, m]\n\nassert f(g())\n",
        "idx_generation": 306,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> int:\n    \"\"\"Calculate the factorial of a given number\"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * f(n-1)\n\ndef g():\n    return 5\n\nassert f(g()) == 120\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(d: Dict[str, int], key: str) -> bool:\n    \"\"\"Check if a given key exists in the dictionary and its value is even.\"\"\"\n    if key in d:\n        return d[key] % 2 == 0\n    return False\n\ndef g(d: Dict[str, int]):\n    return d\n\nassert f(g({'a': 1, 'b': 2, 'c': 3}), 'b') == True\n",
        "idx_generation": 103,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given an array of integers and a target number, find two elements in the array that sum up to the target number.\n    Returns the two elements that sum up to the target number, or an empty list if no such elements exist.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 6]\n    target = 8\n\n    Sample Output:\n    [2, 6]\n    \"\"\"\n    num_set = set(arr)\n    for num in arr:\n        if target - num in num_set:\n            return [num, target - num]\n    return []\n\ndef g():\n    return ([1, 2, 3, 4, 5, 6], 8)\n\nassert f(*g()) == [2, 6]\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"\n    Check if there exists a number in the given list that contains exactly k different digits.\n    \"\"\"\n    for num in n:\n        digits = set(str(num))\n        if len(digits) == k:\n            return True\n    return False\n\ndef g(n = [123, 456, 789]):\n    return n\n\nassert f(g())\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring: str) -> bool:\n    \"\"\"Check if the given substring is present in the given string s.\"\"\"\n    return substring in s\n\ndef g(s=\"Hello, World!\", substring=\"World\"):\n    return [s, substring]\n\nassert f(*g())\n",
        "idx_generation": 150,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = n * (n ** 2 + 1) // 2\n    rows_sum = [sum(row) for row in matrix]\n    cols_sum = [sum(col) for col in zip(*matrix)]\n    diag_sum = sum(matrix[i][i] for i in range(n))\n    anti_diag_sum = sum(matrix[i][n-i-1] for i in range(n))\n    return all(s == target_sum for s in rows_sum + cols_sum + [diag_sum, anti_diag_sum])\ndef g(matrix=[[4, 9, 2], [3, 5, 7], [8, 1, 6]]):\n    return matrix\nassert f(g())\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    A magic square is a square matrix where the sum of each row, each column, and both diagonals is the same.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in range(n):\n        if sum(matrix[i][col] for i in range(n)) != target_sum:\n            return False\n    \n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum or sum(matrix[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n    \n    return True\n\ndef g():\n    \"\"\"\n    Generate a magic square of size 3x3.\n    \"\"\"\n    return [[2, 7, 6],\n            [9, 5, 1],\n            [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=10) -> bool:\n    \"\"\"Check if the given number is a multiple of a\"\"\"\n    return x % a == 0\ndef g(a = 10):\n    return a * 5\nassert f(g())\n",
        "idx_generation": 58,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], t=10, n=5) -> bool:\n    \"\"\"Determine if the sum of the first n elements in the list is greater than the target\"\"\"\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if i == n:\n            return s > t\n        i += 1\n    return s > t\ndef g(t = 10, n = 5):\n    return [2, 4, 6, 8, 10] + [t]\nassert f(g())\n",
        "idx_generation": 2,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose sum is equal to k.\n\n    Sample Input:\n    arr = [2, 4, 7, 11, 15]\n    k = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        if k - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(arr = [2, 4, 7, 11, 15], k = 9):\n    return arr\n\nassert f(g(), 9)\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"\n    Given a string, check if there exists a substring of length k that contains only vowels (a, e, i, o, u).\n    \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return any((s[i:i+k] for i in range(len(s)-k+1) if all((c in vowels for c in s[i:i+k]))))\ndef g(s=\"helloaieouworld\"):\n    return s\nassert f(g())\n",
        "idx_generation": 45,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date_list: List[datetime], year: int) -> bool:\n    \"\"\"\n    Check if any of the dates in the given list fall in the given year.\n    Returns True if a date falls in the year, False otherwise.\n    \"\"\"\n    for date in date_list:\n        if date.year == year:\n            return True\n    return False\n\ndef g(date_list=[datetime(2021, 1, 1), datetime(2022, 2, 2), datetime(2023, 3, 3)], year=2022):\n    return date_list, year\n\nassert f(*g()) == True\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='abc') -> bool:\n    \"\"\"\n    Given a string, check if all the characters in the string are present in the target string.\n\n    Sample Input:\n    `\"abc\"`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return all(c in target for c in s)\n\ndef g(s='abc', target='abc'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 250,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a palindrome.\n\n    Sample Input:\n    n = 12321\n\n    Sample Output:\n    True\n    \"\"\"\n    if str(n) == str(n)[::-1]:\n        return True\n    else:\n        return False\n\ndef g():\n    n = 12321\n    return n\n\nassert f(g()) == True\n",
        "idx_generation": 152,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is a pangram.\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    s = s.lower()\n    for char in alphabet:\n        if char not in s:\n            return False\n    return True\n\ndef g(s = \"The quick brown fox jumps over the lazy dog\"):\n    return s\n\nassert f(g())\n\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n\n    Sample Input:\n    'racecar'\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    return 'racecar'\n\nassert f(g())\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list that sums up to k.\n    Return True if such a subarray exists, False otherwise.\n    \"\"\"\n    prefix_sum = {0: -1}\n    curr_sum = 0\n    for i, num in enumerate(arr):\n        curr_sum += num\n        if curr_sum - k in prefix_sum:\n            return True\n        prefix_sum[curr_sum] = i\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 9)\n\nassert f(*g())\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr: str) -> bool:\n    \"\"\"\n    Check if the given string contains the specified substring.\n    \"\"\"\n    return substr in string\n\ndef g(string=\"Hello, World!\", substr=\"Hello\"):\n    return string, substr\n\nassert f(*g())\n",
        "idx_generation": 209,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nimport datetime\nfrom typing import*\n\ndef f(date: str, days: int) -> bool:\n    \"\"\"\n    Check if a given date is within a certain number of days from today.\n    Return True if the date is within the specified number of days, False otherwise.\n    \"\"\"\n    def get_date_diff(date):\n        date_obj = datetime.datetime.strptime(date, \"%Y-%m-%d\")\n        today = datetime.datetime.now()\n        diff = (date_obj - today).days\n        return diff\n    \n    diff = get_date_diff(date)\n    \n    return abs(diff) <= days\n\ndef g(days: int) -> str:\n    \"\"\"\n    Generate a random date within the next 365 days.\n    \"\"\"\n    today = datetime.datetime.now()\n    future_date = today + datetime.timedelta(days=days)\n    return future_date.strftime(\"%Y-%m-%d\")\n\nassert f(g(30), 30)\n\n",
        "idx_generation": 93,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=8797233, b=2370036150831, lower_bound=8364173) -> bool:\n    \"\"\"Check if the given number is a large common divisor of two integers.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a = 8797233, b = 2370036150831, lower_bound = 8364173):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g())\n",
        "idx_generation": 220,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"\n    Given a list of positive integers, find if there is a subset of the list that has a sum greater than or equal to the target_sum.\n    \"\"\"\n    def subset_sum(numbers, target_sum, index, current_sum):\n        if current_sum >= target_sum:\n            return True\n        if index >= len(numbers):\n            return False\n        include = subset_sum(numbers, target_sum, index + 1, current_sum + numbers[index])\n        exclude = subset_sum(numbers, target_sum, index + 1, current_sum)\n        return include or exclude\n\n    return subset_sum(numbers, target_sum, 0, 0)\n\ndef g(numbers=[10, 20, 30, 40, 50]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 37,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Check if s1 is a palindrome substring of s2.\n\n    Sample Input:\n    s1 = \"aba\"\n    s2 = \"abacaba\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s1 in s2 and s1 == s1[::-1]\n\ndef g():\n    return (\"aba\", \"abacaba\")\n\nassert f(*g())\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Given an array of integers, find two numbers such that their difference is equal to a specific target number.\n    \"\"\"\n    seen = set()\n    for i in range(len(arr)):\n        complement = arr[i] - target\n        if complement in seen:\n            return True\n        seen.add(arr[i])\n    return False\n\ndef g(target=10):\n    return [2, 12, 7, 5, 9]\n\nassert f(g())\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub_str: str) -> bool:\n    \"\"\"Check if the given substring exists in the given string.\"\"\"\n    return sub_str in s\n\ndef g():\n    return \"Hello, World!\"\n\nassert f(g(), \"World!\") == True\n\n",
        "idx_generation": 321,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains all even numbers.\"\"\"\n    return all(num % 2 == 0 for num in nums)\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a triplet of numbers in the given list such that the sum of the first two numbers is equal to the third number.\n    Return True if such a triplet exists, False otherwise.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] == arr[k] or arr[j] + arr[k] == arr[i] or arr[k] + arr[i] == arr[j]:\n                    return True\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert f(g())\n",
        "idx_generation": 422,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target: str) -> bool:\n    \"\"\"Check if the target name is present in the list of names, ignoring case sensitivity\"\"\"\n    return target.lower() in [name.lower() for name in names]\n\ndef g(names = ['Alice', 'Bob', 'Charlie', 'David'], target = 'charlie'):\n    return names, target\n\nassert f(*g())\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a prime number.\n\n    Sample Input:\n    n = 17\n\n    Sample Output:\n    True\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub_str: str = 'abcde', index: int = 3) -> bool:\n    \"\"\"Check if the sub_str exists in s from the given index in a case-insensitive manner.\"\"\"\n    return sub_str.lower() in s.lower()[index:]\n\ndef g(sub_str: str = 'ABCDE', index: int = 3):\n    return \"0123\" + sub_str + \"45\"\n\nassert f(g())\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], pattern=\"abb\") -> bool:\n    \"\"\"Check if the given list of words follows the given pattern.\"\"\"\n    patterns = {}\n    for word in words:\n        if len(word) != len(pattern):\n            return False\n        for p, w in zip(pattern, word):\n            if p in patterns and patterns[p] != w:\n                return False\n            patterns[p] = w\n    return True\ndef g(words=[\"cat\", \"dog\", \"rat\"], pattern=\"abb\"):\n    return words if f(words, pattern) else []\nassert f(g())\n",
        "idx_generation": 185,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[str], target_length: int) -> bool:\n    \"\"\"Check if the sum of the lengths of all strings in the list is equal to the target length.\"\"\"\n    total_length = sum(len(string) for string in lst)\n    return total_length == target_length\n\ndef g(target_length=5):\n    return ['apple', 'banana', 'kiwi', 'pear', 'orange']\n\nassert f(g(), target_length=25)\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if the given string is a palindrome of length n\"\"\"\n    return s == s[::-1] and len(s) == n\ndef g(n: int):\n    return 'racecar'[:n]\nassert f(g(7), 7)\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it contains a Pythagorean triple.\n    A Pythagorean triple is a set of three positive integers a, b, and c, such that a^2 + b^2 = c^2.\n    \"\"\"\n    squares = set()\n    for num in nums:\n        squares.add(num * num)\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] * nums[i] + nums[j] * nums[j] == nums[k] * nums[k] or nums[j] * nums[j] + nums[k] * nums[k] == nums[i] * nums[i] or nums[k] * nums[k] + nums[i] * nums[i] == nums[j] * nums[j]:\n                    return True\n    return False\n\ndef g():\n    return [5, 12, 13, 20, 21, 29]\n\nassert f(g())\n",
        "idx_generation": 74,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='bafywihequyjicivicharyquynikixuhinyqu', b='syrapetagecvicharyquynirorazecheth', length=12) -> bool:\n    \"\"\"Find a string of length length that is in either string a or string b\"\"\"\n    return len(s) == length and (s in a or s in b)\ndef g(a = 'bafywihequyjicivicharyquynikixuhinyqu', b = 'syrapetagecvicharyquynirorazecheth', length = 12):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b or a[i:i + length] in a:\n            return a[i:i + length]\nassert f(g())\n",
        "idx_generation": 67,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if a string s contains all the letters in the target string.\"\"\"\n    return all(letter in s for letter in target)\n\ndef g(s = 'python'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: List[str], n: int) -> bool:\n    \"\"\"\n    Check if the given list of strings contains at least one string with a length greater than n.\n    \"\"\"\n    return any(len(word) > n for word in s)\n\ndef g(s=['apple', 'banana', 'cat', 'dog', 'elephant'], n=5):\n    return s\n\nassert f(g(), 5)\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, parts=['This', 'is', 'a', 'test'], string='Thisisatest') -> bool:\n    \"\"\"\n    Find a separator that when used to join a given string gives a certain result.\n    \"\"\"\n    return x.join(parts) == string\ndef g(parts = ['This', 'is', 'a', 'test'], string = 'Thisisatest'):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g())\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if all numbers in the given list are prime numbers\"\"\"\n    numbers = [int(num) for num in s.split(',')]\n    for num in numbers:\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n    return True\n\ndef g(n=3):\n    return '2,3,5,7,11'\n\nassert f(g())\n",
        "idx_generation": 212,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=2, target='b') -> bool:\n    \"\"\"Check if the n-th occurrence of a character in a string matches a specific target.\"\"\"\n    return s.count(target, 0, n) == n\ndef g(n = 2, target = 'b'):\n    return target * n\nassert f(g())\n\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring = 'abc') -> bool:\n    \"\"\"Check if the given substring is present in the string\"\"\"\n    return substring in s\n\ndef g(substring = 'abc'):\n    return 'abcdefgh'\n\nassert f(g())\n",
        "idx_generation": 136,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it contains a prime number.\n    A prime number is a number greater than 1 that has no positive divisors other than 1 and itself.\n    \"\"\"\n    for num in nums:\n        if num > 1:\n            for i in range(2, int(num ** 0.5) + 1):\n                if (num % i) == 0:\n                    return True\n    return False\n\ndef g():\n    return [3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 47,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=987654321) -> bool:\n    \"\"\"Solve a multiplication problem\"\"\"\n    return x * 2 == a\ndef g(a = 987654321):\n    return a / 2\nassert f(g())\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int], target: int, start: int, end: int) -> int:\n    \"\"\"\n    Given a sorted array of integers and a target value, return the index of the target value in the specified range of the array.\n    If the target value is not found, return -1.\n    \"\"\"\n    left, right = start, end\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\ndef g(arr=[1, 2, 3, 4, 5], target=3, start=0, end=4):\n    return arr, target, start, end\n\nassert f(*g()) == 2\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if an array is sorted in non-decreasing order.\"\"\"\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 67,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=-1) -> bool:\n    \"\"\"Check if n is divisible by m\"\"\"\n    return n % m == 0\ndef g(m = -1):\n    n = 100000\n    while n % m != 0:\n        n += 1\n    return n\nassert f(g())\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target sum.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return random.sample(range(1, 10), 5)\n\nassert f(g())\n",
        "idx_generation": 98,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, m: int) -> bool:\n    \"\"\"\n    Check if a given number n is divisible by m and if the square root of n is also divisible by m.\n    \"\"\"\n    def is_perfect_square(num):\n        return int(math.sqrt(num))**2 == num\n    \n    return n % m == 0 and math.sqrt(n) % m == 0\n\ndef g():\n    return 100, 10\n\nassert f(*g())\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int, max_len: int, min_len: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list that sums up to k and has a minimum length of min_len\n    and a maximum length of max_len.\n    Return True if such a subarray exists, False otherwise.\n    \"\"\"\n    prefix_sum = {0: -1}\n    curr_sum = 0\n    for i, num in enumerate(arr):\n        curr_sum += num\n        if curr_sum - k in prefix_sum and i - prefix_sum[curr_sum - k] >= min_len and i - prefix_sum[curr_sum - k] <= max_len:\n            return True\n        if curr_sum not in prefix_sum:\n            prefix_sum[curr_sum] = i\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 9, 3, 2)\n\nassert f(*g())\n",
        "idx_generation": 65,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=50, k=2) -> bool:\n    \"\"\"Find k numbers in the list that add up to the target number\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))\ndef g(target = 50, k = 2):\n    return [i for i in range(target + 1)]\nassert f(g())\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str]) -> bool:\n    \"\"\"\n    Check if the list contains strings that have all unique characters.\n    \"\"\"\n    def has_unique_chars(string):\n        return len(set(string)) == len(string)\n\n    return any(has_unique_chars(string) for string in strings)\n\ndef g():\n    return [\"hello\", \"world\", \"python\", \"programming\", \"unique\"]\n\nassert f(g())\n",
        "idx_generation": 120,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given array is a palindrome.\n    A palindrome is a sequence of elements that reads the same forward and backward.\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 117,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Check if n is divisible by k.\n    \"\"\"\n    return n % k == 0\n\ndef g(n=10, k=2):\n    return n, k\n\nassert f(*g())\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it contains a perfect square.\n    A perfect square is a number that is the square of an integer.\n    \"\"\"\n    for num in nums:\n        if num >= 0 and int(num ** 0.5) ** 2 == num:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 134,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, n: int = 5) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given numpy array arr with a sum equal to n.\n    Returns True if such a subarray is found, False otherwise.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr) + 1):\n            if np.sum(arr[i:j]) == n:\n                return True\n    return False\n\ndef g(n: int = 5):\n    return np.array([1, 2, 3, 4, 5])\n\nassert f(g()) == True\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew']) -> bool:\n    \"\"\"Check if the given string is a fruit and is present in the list.\"\"\"\n    return s != strings[0] and len(s) > 3\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew']):\n    return strings[3]\nassert f(g())\n",
        "idx_generation": 33,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=50, max_nums=3, options=[5, 10, 15, 20, 25]) -> bool:\n    \"\"\"Find a unique selection of exactly max_nums numbers whose sum is the target value, without including duplicates.\"\"\"\n    for n in nums:\n        assert n in options\n    unique_nums = list(set(nums))\n    return len(unique_nums) == max_nums and sum(unique_nums) == target\ndef g(target=50, max_nums=3, options=[5, 10, 15, 20, 25]):\n    from itertools import combinations\n    for c in combinations(options, max_nums):\n        if sum(c) == target:\n            return list(c)\nassert f(g())\n",
        "idx_generation": 415,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=8797233, b=2370036150831, lower_bound=8364173) -> bool:\n    \"\"\"Find the smallest common multiple of two integers.\"\"\"\n    lcm = (a * b) // g(a, b)\n    return lcm % n == 0 and (n >= lower_bound)\n\ndef g(a = 8797233, b = 2370036150831):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\n\nassert f(g())\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with all the duplicate elements removed, while preserving the order of the elements.\n    \n    Sample Input:\n    arr = [1, 2, 3, 3, 4, 4, 5]\n    \n    Sample Output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    seen = set()\n    result = []\n    for num in arr:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result\n\ndef g():\n    return [1, 2, 3, 3, 4, 4, 5]\n\nassert f(g()) == [1, 2, 3, 4, 5]\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(moves: List[List[int]], capacities=[100, 200, 300], init=[50, 50, 0], goal=[0, 0, 100]) -> bool:\n    \"\"\"\n    Given an initial state of water quantities in jugs and jug capacities, find a sequence of moves (pouring\n    one jug into another until it is full or the first is empty) to reaches the given goal state.\n    moves is list of [from, to] pairs\n    \"\"\"\n    state = init.copy()\n    for [i, j] in moves:\n        assert min(i, j) >= 0, 'Indices must be non-negative'\n        assert i != j, 'Cannot pour from same state to itself'\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal\ndef g(capacities = [100, 200, 300], init = [50, 50, 0], goal = [0, 0, 100]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]\nassert f(g())\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> int:\n    \"\"\"Count the number of times the word 'hello' appears in the string s.\"\"\"\n    return s.count('hello')\n\ndef g():\n    return 'hello, hello, hello, how are you?'\n\nassert f(g()) == 3\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, strings=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if the given string is present in the list and has a length greater than n\"\"\"\n    return s in strings and len(s) > n\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return max(strings, key=len)\nassert f(g())\n",
        "idx_generation": 89,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a number is a perfect square.\n    Returns True if the number is a perfect square, False otherwise.\n    \"\"\"\n    return math.isqrt(n) ** 2 == n\n\ndef g(n = 16):\n    return n\n\nassert f(g())\n",
        "idx_generation": 407,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['te', 'wusyc']) -> bool:\n    \"\"\"\n    Find a string that contains each string in substrings in reverse order, e.g., 'tdog' for 'cat' and 'dog'\n    \"\"\"\n    return all((sub[::-1] in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings = ['te', 'wusyc']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[::-1][i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g())\n",
        "idx_generation": 67,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"\n    Given a string and a number k, find if there exists a substring of length k that contains at least one repeated character.\n    \"\"\"\n    for i in range(len(s)-k+1):\n        substring = s[i:i+k]\n        if len(set(substring)) < k:\n            return True\n    return False\n\ndef g(s=\"abccbaabbaacc\", k=3):\n    for i in range(len(s)-k+1):\n        substring = s[i:i+k]\n        if len(set(substring)) < k:\n            return substring\n    return \"\"\n\nassert f(g())\n",
        "idx_generation": 25,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(binary_string: str) -> int:\n    \"\"\"\n    Count the number of '1's in the binary string.\n    \"\"\"\n    count = 0\n    for char in binary_string:\n        if char == '1':\n            count += 1\n    return count\n\ndef g(binary_string = \"101010101\"):\n    return binary_string\n\nassert f(g()) == 5\n\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    Return True if it is a palindrome, False otherwise.\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 216,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> str:\n    \"\"\"\n    Reverse the given string and capitalize every other character.\n    \"\"\"\n    return ''.join(char.upper() if i % 2 == 0 else char for i, char in enumerate(string[::-1]))\n\ndef g():\n    return 'hello world'\n\nassert f(g()) == 'DlRoW OlLeH'\n",
        "idx_generation": 116,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if there exists a row or column that contains all even numbers.\n    Return True if such a row or column exists, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    row_even = [0] * rows\n    col_even = [0] * cols\n\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] % 2 == 0:\n                row_even[i] = 1\n                col_even[j] = 1\n\n    return any(row_even) or any(col_even)\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=3, c=7) -> bool:\n    \"\"\"Check if the given number is a multiple of a, b, and c.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\n\ndef g(a = 5, b = 3, c = 7):\n    return a * b * c\n\nassert f(g())\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], t=10, a=0, e=5, s=1) -> bool:\n    \"\"\"Check if the sum of values in a sublist is equal to t\"\"\"\n    return t == sum([x[i] for i in range(a, e, s)])\ndef g(t=10, a=0, e=5, s=1):\n    x = [i for i in range(10)]\n    return x\nassert f(g())\n\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(stamps: List[int], target=100, max_stamps=3, options=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) -> bool:\n    \"\"\"Find a selection of at most max_stamps stamps whose total worth is the target value.\"\"\"\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\n\ndef g(target = 100, max_stamps = 3, options = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    from itertools import combinations\n    for n in range(1, max_stamps + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\n    return []\n\nassert f(g())\n",
        "idx_generation": 117,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], a=100, b=200, count=10) -> bool:\n    \"\"\"Find a list of count or more different numbers each between a and b that each have no repeated digits\"\"\"\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 100, b = 200, count = 10):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g())\n",
        "idx_generation": 19,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is symmetric.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(d: Dict[str, int], key: str, value: int) -> bool:\n    \"\"\"\n    Given a dictionary, a key, and a value, determine if the key exists in the dictionary and its corresponding\n    value is greater than the given value.\n    \"\"\"\n    if key in d and d[key] > value:\n        return True\n    return False\n\ndef g():\n    return {\"apple\": 5, \"banana\": 8, \"cherry\": 0}, \"banana\", 6\n\nassert f(*g())\n",
        "idx_generation": 364,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return math.isqrt(n)**2 == n\n\ndef g():\n    return 16\n\nassert f(g())\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, return True if the string is a palindrome, otherwise return False.\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s=\"racecar\"):\n    return s\n\nassert f(g()) == True\n",
        "idx_generation": 180,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(roots: List[float], coeffs=[-4.239, 5.786]) -> bool:\n    \"\"\"Check if the given roots are the solutions to the quadratic equation: x^2 + b x + c = 0, where coeffs = [b, c]\"\"\"\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return r1*r2 == c and r1 + r2 == -b\n\ndef g(coeffs = [-4.239, 5.786]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\n\nassert f(g())\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a given number is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g())\n",
        "idx_generation": 220,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int, target: int) -> bool:\n    \"\"\"\n    Check if the sum of three numbers is equal to a certain value.\n    \"\"\"\n    return x + y + z == target\n\ndef g(x: int, y: int, target: int):\n    z = target - (x + y)\n    return z\n\nassert f(g(5, 10, 15), 5, 10, 15)\n",
        "idx_generation": 190,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the list such that the difference between any two consecutive elements is equal to a given target.\n    Returns True if such a subsequence exists, False otherwise.\n    \"\"\"\n    n = len(nums)\n    prefix_diff = set()\n    target = 2\n\n    for i in range(n-1):\n        diff = abs(nums[i+1] - nums[i])\n\n        if diff == target:\n            return True\n\n        if diff in prefix_diff:\n            return True\n\n        prefix_diff.add(diff)\n\n    return False\n\ndef g(nums=[1, 4, 6, 9, 12]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: str) -> bool:\n    \"\"\"\n    Check if a given string contains only numeric characters.\n    \"\"\"\n    return nums.isnumeric()\n\ndef g():\n    return \"12345\"\n\nassert f(g())\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 94,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list whose sum is equal to the product of two other integers.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums) + 1):\n            subarray = nums[i:j]\n            subarray_sum = sum(subarray)\n            for k in range(len(nums)):\n                for l in range(k + 1, len(nums)):\n                    if subarray_sum == nums[k] * nums[l] or subarray_sum == nums[l] * nums[k]:\n                        return True\n    return False\n\ndef g():\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 266,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3, target='abc') -> bool:\n    \"\"\"Check if a given string can be formed by concatenating k copies of the target string.\"\"\"\n    return s == target * k\ndef g(k = 3, target = 'abc'):\n    return target * k\nassert f(g())\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum length of a sequence of consecutive numbers in the list.\n    Return the length of the longest consecutive sequence.\n\n    Sample Input:\n    [100, 4, 200, 1, 3, 2]\n\n    Sample Output:\n    4\n    \"\"\"\n    num_set = set(arr)\n    max_length = 0\n    for num in num_set:\n        # Checking if the current number is the start of a sequence\n        if num - 1 not in num_set:\n            current_num = num\n            current_length = 1\n            # Finding the length of the consecutive sequence\n            while current_num + 1 in num_set:\n                current_num += 1\n                current_length += 1\n            # Updating the maximum length if necessary\n            max_length = max(max_length, current_length)\n    # Returning the maximum length of consecutive sequence\n    return max_length\n\ndef g():\n    return [100, 4, 200, 1, 3, 2]\n\nassert f(g()) == 4\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 55,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"\n    Check if the number 'n' is divisible by 'k' and the sum of its digits is divisible by 'k'.\n    \"\"\"\n    if n % k == 0:\n        digit_sum = sum(int(digit) for digit in str(n))\n        if digit_sum % k == 0:\n            return True\n    return False\n\ndef g(n=123):\n    return n\n\nassert f(g())\n",
        "idx_generation": 56,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, rotate it 90 degrees clockwise.\n    \"\"\"\n    n = len(matrix)\n    rotated = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            rotated[j][n-i-1] = matrix[i][j]\n    return rotated\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Determine if the list contains a pair of elements that add up to the third element\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == li[2]:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 5]\nassert f(g())\n",
        "idx_generation": 8,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=2, seq=[1, 2, 3, 4]) -> bool:\n    \"\"\"Find the sum of the maximum k numbers in the sequence\"\"\"\n    return 0 <= k <= len(seq) and sum(sorted(seq)[-k:]) == n\ndef g(k = 2, seq = [1, 2, 3, 4]):\n    return sum(sorted(seq)[-k:])\nassert f(g())\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='a', count=10, length=100) -> bool:\n    \"\"\"Count the number of occurrences of a given substring in a string and check if the length of the string is equal to a given length.\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'a', count = 10, length = 100):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g())\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"\n    Given a string and a number k, find if there exists a substring of length k that contains at least one repeated character.\n    \"\"\"\n    for i in range(len(s)-k+1):\n        substring = s[i:i+k]\n        if len(set(substring)) < k:\n            return True\n    return False\n\ndef g(s=\"xyxzyxyz\", k=3):\n    for i in range(len(s)-k+1):\n        substring = s[i:i+k]\n        if len(set(substring)) < k:\n            return substring\n    return \"\"\n\nassert f(g())\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int, w: int) -> bool:\n    \"\"\"Check if the sum of x, y, z, and w is divisible by 7.\"\"\"\n    return (x + y + z + w) % 7 == 0\n\ndef g(x = 3, y = 5, z = 2, w = 4):\n    return x, y, z, w\n\nassert f(*g())\n",
        "idx_generation": 155,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(d: Dict[str, int], key: str) -> bool:\n    \"\"\"\n    Given a dictionary and a key, determine if the key exists in the dictionary and its corresponding\n    value is a prime number.\n    \"\"\"\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    if key in d and is_prime(d[key]):\n        return True\n    return False\n\ndef g():\n    return {\"apple\": 5, \"banana\": 8, \"cherry\": 17}, \"cherry\"\n\nassert f(*g())\n",
        "idx_generation": 364,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if the matrix is a magic square or not.\"\"\"\n    n = len(matrix)\n    target_sum = n * (n ** 2 + 1) // 2\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for col in range(n):\n        if sum(matrix[i][col] for i in range(n)) != target_sum:\n            return False\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(matrix[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n    return True\n\ndef g(matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return [[row[i] for row in matrix] for i in range(len(matrix[0]))]\n\nassert f(g())\n",
        "idx_generation": 313,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target=\"hello\") -> bool:\n    \"\"\"\n    Given a string, check if it can be transformed into the target string by rearranging the characters.\n    Return True if it is possible, False otherwise.\n    \"\"\"\n    def rearrange_string(string, target):\n        if len(string) != len(target):\n            return False\n        return sorted(string) == sorted(target)\n\n    return rearrange_string(string, target)\n\ndef g(string=\"ehlol\"):\n    return string\n\nassert f(g())\n\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[str]) -> List[str]:\n    \"\"\"\n    Given a list of strings, return a new list with all the strings that start with a vowel.\n\n    Sample Input:\n    arr = [\"apple\", \"banana\", \"carrot\", \"orange\", \"kiwi\"]\n\n    Sample Output:\n    [\"apple\", \"orange\"]\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return [string for string in arr if string[0].lower() in vowels]\n\ndef g():\n    return [\"apple\", \"banana\", \"carrot\", \"orange\", \"kiwi\"]\n\nassert f(g()) == [\"apple\", \"orange\"]\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str = 'python') -> bool:\n    \"\"\"\n    Check if a given string starts with a specific target string in a case-insensitive manner.\n    Returns True if it does, False otherwise.\n    \"\"\"\n    return s.lower().startswith(target.lower())\n\ndef g(target: str = 'python'):\n    return target + ' is a popular programming language'\n\nassert f(g())\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a diagonal matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(matrix=[[1, 0, 0], [0, 2, 0], [0, 0, 3]]):\n    \"\"\"Return the matrix.\"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=5) -> bool:\n    \"\"\"\n    Check if there exists a substring in the given string that contains exactly k characters.\n    \"\"\"\n    n = len(s)\n    for i in range(n):\n        for j in range(i+k, n+1):\n            if len(s[i:j]) == k:\n                return True\n    return False\n\ndef g(s='puzzle'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str) -> bool:\n    \"\"\"\n    Given a word, check if it is a palindrome (reads the same forwards and backwards).\n\n    Example:\n    word = \"racecar\"\n    output: True\n    \"\"\"\n    return word == word[::-1]\n\ndef g(word = \"racecar\"):\n    return word\n\nassert f(g())\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, s1='apple', s2='banana', count1=2, count2=4) -> bool:\n    \"\"\"\n    Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\n    the same 6 characters\n    \"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:6] == s[-6:])\ndef g(s1='apple', s2='banana', count1=2, count2=4):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 6 + ans + \"?\" * 6\nassert f(g())\n",
        "idx_generation": 13,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str) -> bool:\n    \"\"\"Check if the sentence ends with a question mark\"\"\"\n    return sentence.endswith('?')\n\ndef g(sentence = 'How are you?'):\n    return sentence\n\nassert f(g())\n",
        "idx_generation": 162,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, target='python') -> bool:\n    \"\"\"Check if a given word is a permutation of the target word\"\"\"\n    return sorted(word) == sorted(target)\ndef g(target='python'):\n    return target\nassert f(g())\n",
        "idx_generation": 31,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains any duplicate elements.\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 1]\n\nassert f(g())\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, transpose the matrix by swapping its rows and columns.\n    Return the transposed matrix.\n    \"\"\"\n    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers contains any duplicate elements.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 5]\n\nassert f(g())\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Check if the given strings s and t are anagrams of each other.\n    Return True if s and t are anagrams, False otherwise.\n    \"\"\"\n    def count_chars(string):\n        char_count = {}\n        for char in string:\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n        return char_count\n\n    s_count = count_chars(s)\n    t_count = count_chars(t)\n\n    return s_count == t_count\n\ndef g():\n    return (\"hello\", \"olleh\")\n\nassert f(*g())\n",
        "idx_generation": 162,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='pythonprogramming', target='') -> bool:\n    \"\"\"Check if the target is a substring of s using the slice indices\"\"\"\n    (i, j, k) = inds\n    return target in s[i:j:k]\ndef g(s = 'pythonprogramming', target = ''):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if target in s[i:j:k]:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n",
        "idx_generation": 233,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(squares: List[List[int]], m=20, n=30, target=600) -> bool:\n    \"\"\"Tile an m x n checkerboard with 2 x 1 tiles. The solution is a list of fourtuples [i1, j1, i2, j2] with\n    i2 == i1 and j2 == j1 + 1 or i2 == i1 + 1 and j2 == j1 with no overlap.\"\"\"\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 20, n = 30, target = 600):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g())\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Find a string that contains exactly n vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count == n\ndef g(n=3):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(vowels[:n])\nassert f(g())\n",
        "idx_generation": 81,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=15, b=5, c=10) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\ndef g(a = 15, b = 5, c = 10):\n    return sum([b * i for i in range(c)]) - a\nassert f(g())\n",
        "idx_generation": 136,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Find the sum of all negative elements in the list.\n\n    Returns the sum if there are negative elements, 0 otherwise.\n    \"\"\"\n    neg_sum = 0\n    for num in arr:\n        if num < 0:\n            neg_sum += num\n    return neg_sum\n\ndef g():\n    return [2, -1, 4, -3, -5, 6, 2]\n\nassert f(g()) == -9\n\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if it contains a path from the top-left corner to the bottom-right corner.\n    You can only move down or right.\n    \"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n    dp = [[False] * cols for _ in range(rows)]\n    dp[0][0] = True\n    for i in range(1, cols):\n        dp[0][i] = dp[0][i-1] and grid[0][i] == 1\n    for i in range(1, rows):\n        dp[i][0] = dp[i-1][0] and grid[i][0] == 1\n    for i in range(1, rows):\n        for j in range(1, cols):\n            if grid[i][j] == 1:\n                dp[i][j] = dp[i-1][j] or dp[i][j-1]\n    return dp[rows-1][cols-1]\n\ndef g():\n    return [[1, 1, 1], [1, 0, 1], [1, 1, 1]]\n\nassert f(g())\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists three numbers in the list that sum up to the target.\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums) - 2):\n        left = i + 1\n        right = len(nums) - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g())\n\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[str], target_length=0) -> bool:\n    \"\"\"\n    Check if there exist three distinct strings in the list that have a combined length greater than or equal to a specific value.\n    Return True if the target_length is 0 and there are at least three strings in the list.\n    Return False if the target_length is a negative value.\n    \"\"\"\n    if target_length == 0 and len(lst) >= 3:\n        return True\n    \n    if target_length < 0:\n        return False\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            for k in range(j+1, len(lst)):\n                if len(lst[i]) + len(lst[j]) + len(lst[k]) >= target_length:\n                    return True\n    return False\n\ndef g(target_length=0):\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\nassert f(g())\n\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the number of distinct elements in the given list.\n\n    Sample Input:\n    nums = [1, 2, 3, 3, 4, 5, 5, 5]\n\n    Sample Output:\n    5\n    \"\"\"\n    return len(set(nums))\n\ndef g():\n    nums = [1, 2, 3, 3, 4, 5, 5, 5]\n    return nums\n\nassert f(g()) == 5\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int], n=3) -> bool:\n    \"\"\"Check if the given sequence contains exactly n even numbers.\"\"\"\n    return len([num for num in seq if num % 2 == 0]) == n\n\ndef g(n=3):\n    \"\"\"Return a list of n even numbers.\"\"\"\n    return [2*i for i in range(1, n+1)]\n\nassert f(g())\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: list, target=10) -> bool:\n    \"\"\"Find if there exist two elements in the list whose sum is equal to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\nassert f(g())\n",
        "idx_generation": 8,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='abcdefgh', reverse=False, uppercase=False) -> bool:\n    \"\"\"Check if a string matches the target with optional reverse and uppercase conversion\"\"\"\n    if reverse:\n        s = s[::-1]\n    if uppercase:\n        s = s.upper()\n    return s == target\n\ndef g(target='abcdefgh', reverse=False, uppercase=False):\n    if reverse:\n        target = target[::-1]\n    if uppercase:\n        target = target.upper()\n    return target\n\nassert f(g())\n",
        "idx_generation": 100,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(hands: List[int], target_angle=120) -> bool:\n    \"\"\"Find clock hands = [hour, min] such that the angle is target_angle degrees.\"\"\"\n    (h, m) = hands\n    assert 0 < h <= 12 and 0 <= m < 60\n    hour_angle = 30 * h + m / 2\n    minute_angle = 6 * m\n    return abs(hour_angle - minute_angle) % 360 == target_angle\n\ndef g(target_angle = 120):\n    for h in range(1, 13):\n        for m in range(60):\n            hour_angle = 30 * h + m / 2\n            minute_angle = 6 * m\n            if abs(hour_angle - minute_angle) % 360 == target_angle:\n                return [h, m]\n\nassert f(g())\n",
        "idx_generation": 306,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to the third number\"\"\"\n    return a + b == c or a + c == b or b + c == a\ndef g(a: int, b: int):\n    c = a + b\n    return c\nassert f(g(10, 5), 10, 5)\n",
        "idx_generation": 271,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the sum of the digits of n is divisible by 3.\"\"\"\n    digit_sum = sum(int(digit) for digit in str(n))\n    return digit_sum % 3 == 0\n\ndef g():\n    return 123456789\n\nassert f(g())\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, scores=[44, 42, 41, 41, 40, 40, 39, 38, 38, 38, 37, 33, 32, 31, 31, 31, 30, 29, 28, 26, 25, 24, 24, 23, 23, 22, 20, 20, 20, 18, 17, 17, 16, 16, 12, 9, 9, 7, 6, 5, 4, 2], k=1) -> bool:\n    \"\"\"\n    Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\n    are larger than the kth.\n    \"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s > scores[k] and s > 0 for s in scores[:n])) and all((s <= scores[k] or s <= 0 for s in scores[n:]))\ndef g(scores = [44, 42, 41, 41, 40, 40, 39, 38, 38, 38, 37, 33, 32, 31, 31, 31, 30, 29, 28, 26, 25, 24, 24, 23, 23, 22, 20, 20, 20, 18, 17, 17, 16, 16, 12, 9, 9, 7, 6, 5, 4, 2], k = 1):\n    threshold = max(scores[k], 1)\n    return sum(s > threshold for s in scores)\nassert f(g())\n",
        "idx_generation": 100,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> str:\n    \"\"\"\n    Given a string, reverse the order of words in the string.\n    \"\"\"\n    words = s.split()\n    words.reverse()\n    return ' '.join(words)\n\ndef g(s=\"Hello World\"):\n    return s\n\nassert f(g()) == \"World Hello\"\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine if it is a magic square.\n    Return True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    target_sum = sum(matrix[0])\n    # Check row sums\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check column sums\n    for j in range(cols):\n        col_sum = 0\n        for i in range(rows):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n    # Check diagonal sums\n    diagonal_sum1 = 0\n    diagonal_sum2 = 0\n    for i in range(rows):\n        diagonal_sum1 += matrix[i][i]\n        diagonal_sum2 += matrix[i][cols - 1 - i]\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n    return True\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\n# Test case\ntest_matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nassert f(g(test_matrix))\n\n",
        "idx_generation": 215,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target_sum=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target sum.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=0):\n    return [target_sum] * 5\n\nassert f(g())\n",
        "idx_generation": 107,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], t=100, n=10) -> bool:\n    \"\"\"Determine if the sum of the even elements in the list is greater than the target\"\"\"\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        if v % 2 == 0:\n            s += v\n        if i == n:\n            return s > t\n        i += 1\n    return s > t\ndef g(t = 100, n = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] + [t]\nassert f(g())\n",
        "idx_generation": 2,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(word: str, n: int) -> bool:\n    \"\"\"\n    Check if the given word is a palindrome of length n.\n    A palindrome is a word that is the same when read forwards or backwards.\n    Return True if the word is a palindrome of length n, False otherwise.\n    \"\"\"\n    return len(word) == n and word == word[::-1]\n\ndef g():\n    return (\"racecar\", 7)\n\nassert f(*g())\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nimport random\n\ndef f(li: List[int]) -> List[int]:\n    \"\"\"Shuffle the given list randomly.\"\"\"\n    shuffled_list = li.copy()\n    random.shuffle(shuffled_list)\n    return shuffled_list != li\n\ndef g(li = [1, 2, 3, 4, 5]):\n    return li\n\nassert f(g())\n",
        "idx_generation": 260,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if n is a palindrome.\"\"\"\n    return str(n) == str(n)[::-1]\n\ndef g():\n    return 12321\n\nassert f(g())\n",
        "idx_generation": 153,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=['a', 'b', 'c', 'd', 'e']) -> bool:\n    \"\"\"\n    Given a list of elements, return True if the first n elements are in alphabetical order, and False otherwise.\n\n    Sample Input:\n    n = 3\n    lst = ['a', 'b', 'd', 'c', 'e']\n\n    Sample Output:\n    False\n    \"\"\"\n    return sorted(lst[:n]) == lst[:n]\n\ndef g(lst = ['a', 'b', 'c', 'd', 'e']):\n    return len(lst), lst\n\nassert f(*g())\n",
        "idx_generation": 144,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a given string is a palindrome.\n\n    Sample Input:\n    s = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int, n: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray of length n in the given list that sums up to k.\n    Return True if such a subarray exists, False otherwise.\n    \"\"\"\n    if n > len(arr):\n        return False\n    for i in range(len(arr) - n + 1):\n        subarray = arr[i:i + n]\n        if sum(subarray) == k:\n            return True\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 9, 3)\n\nassert f(*g())\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring: str) -> bool:\n    \"\"\"\n    Check if a given substring is a palindrome.\n    \"\"\"\n    return substring == substring[::-1]\n\ndef g(s=\"hello\", substring=\"lol\"):\n    return s, substring\n\nassert f(*g())\n",
        "idx_generation": 225,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nimport datetime\nfrom typing import*\n\ndef f(date: str, days: int) -> bool:\n    \"\"\"\n    Check if a given date is within a certain number of days from today.\n    Return True if the date is within the specified number of days, False otherwise.\n    \"\"\"\n    def get_date_diff(date):\n        date_obj = datetime.datetime.strptime(date, \"%Y-%m-%d\")\n        today = datetime.datetime.now()\n        diff = (date_obj - today).days\n        return diff\n    \n    diff = get_date_diff(date)\n    \n    return abs(diff) <= days\n\ndef g(days: int) -> str:\n    \"\"\"\n    Generate a random date within the next 365 days.\n    \"\"\"\n    today = datetime.datetime.now()\n    future_date = today + datetime.timedelta(days=days)\n    return future_date.strftime(\"%Y-%m-%d\")\n\nassert f(g(30), 30)\n",
        "idx_generation": 249,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=8797233, b=2370036150831, lower_bound=8364173) -> bool:\n    \"\"\"Check if the given number is a large common divisor of two integers.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a = 8797233, b = 2370036150831, lower_bound = 8364173):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g())\n\n",
        "idx_generation": 258,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=0) -> bool:\n    \"\"\"\n    Given a list of integers, find if there is a subset of the list that has a sum equal to the target_sum.\n    \"\"\"\n    def subset_sum(numbers, target_sum, index, current_sum):\n        if current_sum == target_sum:\n            return True\n        if index >= len(numbers):\n            return False\n        include = subset_sum(numbers, target_sum, index + 1, current_sum + numbers[index])\n        exclude = subset_sum(numbers, target_sum, index + 1, current_sum)\n        return include or exclude\n\n    return subset_sum(numbers, target_sum, 0, 0)\n\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the list that sum up to the target number.\n    \"\"\"\n    seen = set()\n    for num in lst:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 8\n\nassert f(*g())\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, y: str) -> bool:\n    \"\"\"\n    Check if two strings are anagrams.\n    \"\"\"\n    return sorted(x) == sorted(y)\ndef g(x: str):\n    y = x[::-1]\n    return x, y\nassert f(*g('racecar'))\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in non-decreasing order.\"\"\"\n    return nums == sorted(nums)\n\ndef g():\n    return [5, 10, 15, 20, 25]\n\nassert f(g())\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(lst: List[int]) -> int:\n    \"\"\"\n    Find the maximum product of any three numbers from the given list.\n\n    Sample Input:\n    lst = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    60\n    \"\"\"\n    max_product = max(a * b * c for a, b, c in itertools.combinations(lst, 3))\n    return max_product\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 60\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello world', reverse=False, uppercase=False) -> bool:\n    \"\"\"Check if a string contains all the target characters with optional reverse and uppercase conversion\"\"\"\n    if reverse:\n        s = s[::-1]\n    if uppercase:\n        s = s.upper()\n    return all((ch in s for ch in target))\n\ndef g(target='hello world', reverse=False, uppercase=False):\n    if reverse:\n        target = target[::-1]\n    if uppercase:\n        target = target.upper()\n    return target\n\nassert f(g())\n",
        "idx_generation": 216,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a prime number.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(n=17):\n    return n\n\nassert f(g()) == True\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], n: int) -> bool:\n    \"\"\"\n    Find the first n words in the list that contain the letter 'a'.\n    \"\"\"\n    a_words = []\n    for word in words:\n        if 'a' in word:\n            a_words.append(word)\n            if len(a_words) == n:\n                return True\n    return False\n\ndef g(words = [\"level\", \"racecar\", \"python\", \"madam\", \"hello\"], n = 2):\n    return words\n\nassert f(g(), 2)\n\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], pattern=\"abba\") -> bool:\n    \"\"\"Check if the given list of words follows the given pattern.\"\"\"\n    patterns = {}\n    for word in words:\n        if len(word) != len(pattern):\n            return False\n        for p, w in zip(pattern, word):\n            if p in patterns and patterns[p] != w:\n                return False\n            patterns[p] = w\n    return True\ndef g(words=[\"red\", \"green\", \"blue\"], pattern=\"abba\"):\n    return words if f(words, pattern) else []\nassert f(g())\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], x: int = 10) -> bool:\n    \"\"\"Check if there are exactly x numbers in the list that are divisible by 10\"\"\"\n    return len([num for num in lst if num % 10 == 0]) == x\n\ndef g(x: int = 10):\n    lst = [20, 30, 40, 50, 60, 70, 80, 90, 100, 110]\n    return lst\n\nassert f(g())\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if the given string is a palindrome of length n\"\"\"\n    return s == s[::-1] and len(s) == n\n\ndef g(n: int):\n    return 'level'[:n]\n\nassert f(g(5), 5)\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any two elements in the list.\n    \n    Sample Input:\n    nums = [1, 5, 2, 8, 3]\n    \n    Sample Output:\n    13\n    \"\"\"\n    max_sum = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            curr_sum = nums[i] + nums[j]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n    return max_sum\n\ndef g():\n    nums = [1, 5, 2, 8, 3]\n    return nums\n\nassert f(g()) == 13\n\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], length=6) -> bool:\n    \"\"\"Check if there exists two strings in the list that have a combined length greater than a specific length\"\"\"\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if len(strings[i]) + len(strings[j]) > length:\n                return True\n    return False\ndef g(length=6):\n    return [\"red\", \"blue\", \"green\", \"yellow\", \"orange\"]\nassert f(g())\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a given string is a palindrome\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"radar\"\nassert f(g())\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Check if the given list contains a subsequence that sums up to n.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            subseq = arr[i:j]\n            if sum(subseq) == n:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], n=9):\n    return n, arr\n\nassert f(*g())\n",
        "idx_generation": 362,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is a valid email address.\n    \"\"\"\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return re.match(pattern, s) is not None\n\ndef g():\n    return \"example@email.com\"\n\nassert f(g())\n\n",
        "idx_generation": 192,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a power of two.\n    \"\"\"\n    return n != 0 and (n & (n - 1)) == 0\n\ndef g():\n    return 16\n\nassert f(g())\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, target='c') -> bool:\n    \"\"\"Check if the n-th occurrence of a character in a string matches a specific target.\"\"\"\n    return s.count(target, 0, n) == n\ndef g(n = 3, target = 'c'):\n    return target * n\nassert f(g())\n\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(substring: str, s='rofegakusaquybemydomimibyzodycetextunoce') -> bool:\n    \"\"\"Check if the substring is present in s\"\"\"\n    return substring in s\ndef g(s = 'rofegakusaquybemydomimibyzodycetextunoce'):\n    return s[4:8]\nassert f(g())\n",
        "idx_generation": 178,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it contains a pair of numbers that multiply to a perfect square.\n    A perfect square is a number that can be expressed as the product of two equal integers.\n    \"\"\"\n    def is_perfect_square(n):\n        return n == int(n ** 0.5) ** 2\n    \n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if is_perfect_square(nums[i] * nums[j]):\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers is sorted in non-decreasing order.\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\ndef g():\n    \"\"\"\n    Generate a sorted list of integers in non-decreasing order.\n    \"\"\"\n    return list(range(100))\n\nassert f(g())\n",
        "idx_generation": 98,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if n is a multiple of m\"\"\"\n    return n % m == 0\ndef g(m: int):\n    n = 100000\n    while n % m != 0:\n        n += 1\n    return n\nassert f(g(3), 3)\n",
        "idx_generation": 38,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the list that add up to the target_sum.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target_sum=9):\n    return nums\n\nassert f(g(), 9)\n",
        "idx_generation": 240,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a: int, b: int, c: int) -> bool:\n    \"\"\"Check if the equation n * a == b * (the sum of the first c integers) is valid.\"\"\"\n    return n * a == b * (c * (c + 1)) // 2\n\ndef g(a: int, b: int, c: int):\n    return (b * (c * (c + 1)) // 2) / a\n\nassert f(g(7, 10, 5), 7, 10, 5)\n",
        "idx_generation": 204,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int], k: int, target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list that sums up to k and has a length greater than or equal to the target length.\n    Return True if such a subarray exists, False otherwise.\n    \"\"\"\n    prefix_sum = {0: -1}\n    curr_sum = 0\n    for i, num in enumerate(arr):\n        curr_sum += num\n        if curr_sum - k in prefix_sum and i - prefix_sum[curr_sum - k] >= target:\n            return True\n        if curr_sum not in prefix_sum:\n            prefix_sum[curr_sum] = i\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 9, 3)\n\nassert f(*g())\n",
        "idx_generation": 68,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, k=3) -> bool:\n    \"\"\"Find k numbers in the list that add up to the target number\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))\ndef g(target = 100, k = 3):\n    return [i for i in range(target + 1)]\nassert f(g())\n",
        "idx_generation": 177,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g(s=\"racecar\"):\n    return s\n\nassert f(g())\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[str]) -> bool:\n    \"\"\"Check if the list contains a palindrome.\"\"\"\n    return any(word == word[::-1] for word in x)\ndef g():\n    return ['hello', 'world', 'level', 'madam', 'python']\nassert f(g())\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if a given number is divisible by k\"\"\"\n    return n % k == 0\n\ndef g(k=3):\n    return k * 2\n\nassert f(g())\n",
        "idx_generation": 120,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[float]) -> bool:\n    \"\"\"\n    Check if all the numbers in the given list are perfect squares.\n    \"\"\"\n    return all(math.sqrt(num).is_integer() for num in nums)\n\ndef g():\n    return [4, 9, 16, 25, 36]\n\nassert f(g())\n",
        "idx_generation": 143,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"\n    Check if any element in the array arr is divisible by n.\n    Returns True if such an element exists, False otherwise.\n    \"\"\"\n    for num in arr:\n        if num % n == 0:\n            return True\n    return False\n\ndef g(arr=[10, 20, 30, 40, 50], n=5):\n    return n, arr\n\nassert f(*g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Find the number of strings in the list that have the same length as the given string.\"\"\"\n    return len([string for string in strings if len(string) == len(s)]) > 0\n\ndef g(strings = ['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return strings[0]\n\nassert f(g())\n",
        "idx_generation": 91,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, max_nums=5, options=[10, 20, 30, 40, 50]) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose total sum is equal to the target value.\"\"\"\n    for n in nums:\n        assert n in options\n    return len(nums) <= max_nums and sum(nums) == target\n\ndef g(target=100, max_nums=5, options=[10, 20, 30, 40, 50]):\n    from itertools import combinations_with_replacement\n    for n in range(max_nums + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\n\nassert f(g())\n",
        "idx_generation": 432,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Remove all duplicate elements from the given list and return a new list.\n\n    Sample input:\n    [1, 2, 3, 3, 4, 4, 5]\n\n    Sample output:\n    [1, 2, 3, 4, 5]\n\n    Explanation:\n    The duplicate elements 3 and 4 are removed from the list.\n    \"\"\"\n    return list(set(nums))\n\ndef g():\n    nums = [1, 2, 3, 3, 4, 4, 5]\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5]\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: List[str]) -> bool:\n    \"\"\"Find a list of 1000 distinct strings which each have more 'a's than 'b's and at least one 'b'.\"\"\"\n    return len(set(s)) == 1000 and all((x.count('a') > x.count('b') and 'b' in x for x in s))\ndef g():\n    return [\"a\" * (i + 2) + \"b\" for i in range(1000)]\nassert f(g())\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=2, strings=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if the given string is present in the list and has a length greater than n\"\"\"\n    return s in strings and len(s) > n\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return sorted(strings, key=len)[-1]\nassert f(g())\n",
        "idx_generation": 111,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return math.isqrt(n) ** 2 == n\n\ndef g():\n    return 25\n\nassert f(g())\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, lst=['apple', 'banana', 'cherry', 'durian']) -> bool:\n    \"\"\"Check if a given string is not in the list\"\"\"\n    return s not in lst\n\ndef g(lst=['apple', 'banana', 'cherry', 'durian']):\n    return 'grape'\n\nassert f(g())\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=4) -> bool:\n    \"\"\"\n    Given a string and a number k, find if there exists a substring of length k that contains at least one repeated character.\n    \"\"\"\n    for i in range(len(s)-k+1):\n        substring = s[i:i+k]\n        if len(set(substring)) < k:\n            return True\n    return False\n\ndef g(s=\"abcabcabcabc\", k=4):\n    for i in range(len(s)-k+1):\n        substring = s[i:i+k]\n        if len(set(substring)) < k:\n            return substring\n    return \"\"\n\nassert f(g())\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a perfect square.\n\n    Sample Input:\n    n = 16\n\n    Sample Output:\n    True\n    \"\"\"\n    if n < 0:\n        return False\n    elif int(n**0.5)**2 == n:\n        return True\n    else:\n        return False\n\ndef g():\n    n = 16\n    return n\n\nassert f(g()) == True\n",
        "idx_generation": 152,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"madam\"\n\nassert f(g())\n\n",
        "idx_generation": 220,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome i.e. it remains the same when reversed.\n    \"\"\"\n    s = s.lower()\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] != s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\ndef g(s: str):\n    return s\n\nassert f(g(\"racecar\"))\n",
        "idx_generation": 149,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=100, b=20, c=5) -> bool:\n    \"\"\"Check if the given number is divisible by either a, b, or c.\"\"\"\n    return n % a == 0 or n % b == 0 or n % c == 0\n\ndef g(a = 100, b = 20, c = 5):\n    if a == 0 and b == 0 and c == 0:\n        return 0\n    return a * b * c\n\nassert f(g())\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(stamps: List[int], target=100, max_stamps=3, options=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) -> bool:\n    \"\"\"Find a selection of at most max_stamps stamps whose total worth is the target value.\"\"\"\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\n\ndef g(target = 100, max_stamps = 3, options = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    from itertools import combinations\n    for n in range(max_stamps + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\n    return []\n\nassert f(g())\n",
        "idx_generation": 117,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], a=1000, b=2000, count=50) -> bool:\n    \"\"\"Find a list of count or more different numbers each between a and b that each have no repeated digits\"\"\"\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 1000, b = 2000, count = 50):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g())\n",
        "idx_generation": 19,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a matrix is symmetric.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 74,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_index=5) -> bool:\n    \"\"\"\n    Check if the target_index is a valid index for the given list.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    False\n    \"\"\"\n    try:\n        value = numbers[target_index]\n        return True\n    except IndexError:\n        return False\n\ndef g(target_index=5):\n    return [1, 2, 3, 4, 5]\nassert f(g()) == False\n",
        "idx_generation": 371,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, n=2) -> bool:\n    \"\"\"Check if a given number is a perfect square.\"\"\"\n    root = x ** 0.5\n    return root == int(root)\n\ndef g(n=4):\n    return n ** 2\n\nassert f(g())\n\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is a palindrome.\n    Return True if the string is a palindrome, False otherwise.\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s=\"racecar\"):\n    return s\n\nassert f(g())\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 242,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if the sum of three numbers is equal to a certain value.\n    \"\"\"\n    return x + y + z == 10\n\ndef g(x: int, y: int):\n    z = 10 - (x + y)\n    return z\n\nassert f(g(2, 3), 2, 3)\n",
        "idx_generation": 221,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the list such that the absolute difference between the maximum and minimum elements is equal to a given target.\n    Returns True if such a subsequence exists, False otherwise.\n    \"\"\"\n    n = len(nums)\n    prefix_diff = set()\n\n    for i in range(n-1):\n        curr_diff = abs(max(nums[i], nums[i+1]) - min(nums[i], nums[i+1]))\n\n        if curr_diff == target:\n            return True\n\n        if curr_diff in prefix_diff:\n            return True\n\n        prefix_diff.add(curr_diff)\n\n    return False\n\ndef g(target=5):\n    return [1, 3, 5, 7, 9]\n\nassert f(g())\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float) -> bool:\n    \"\"\"\n    Check if the given numbers x and y are both prime numbers.\n    Return True if both x and y are prime, False otherwise.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(x) and is_prime(y)\n\ndef g():\n    \"\"\"\n    Generate two prime numbers.\n    \"\"\"\n    return 17, 23\n\nassert f(*g())\n",
        "idx_generation": 193,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 98,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list whose sum is equal to the product of two other integers.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums) + 1):\n            subarray = nums[i:j]\n            subarray_sum = sum(subarray)\n            for k in range(len(nums)):\n                for l in range(k + 1, len(nums)):\n                    if subarray_sum == nums[k] * nums[l] or subarray_sum == nums[l] * nums[k]:\n                        return True\n    return False\n\ndef g():\n    return [3, 5, 7, 9]\n\nassert f(g())\n",
        "idx_generation": 266,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"\n    Check if the given string has at least n occurrences of each unique character.\n    Return True if the string has at least n occurrences of each unique character, False otherwise.\n    \"\"\"\n    count = {}\n    \n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    \n    return all(count[char] >= n for char in count.keys())\n\ndef g(n=2):\n    \"\"\"\n    Generate a string with at least n occurrences of each unique character.\n    \"\"\"\n    return 'abcdef' * n\n\nassert f(g(), n=2)\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=-10, b=5) -> bool:\n    \"\"\"Check if a number is a power of another number\"\"\"\n    return n != 0 and a != 0 and (a ** b) % n == 0\ndef g(a = -10, b = 5):\n    return a ** b\nassert f(g())\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"Check if the sum of the digits of a number n is divisible by k\"\"\"\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n    \n    return sum_of_digits(n) % k == 0\n\ndef g():\n    return 12345, 3\n\nassert f(*g())\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Rotate the given matrix clockwise by 90 degrees.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    The rotated matrix should be:\n    rotated = [[7, 4, 1],\n               [8, 5, 2],\n               [9, 6, 3]]\n    \"\"\"\n    n = len(matrix)\n    rotated = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            rotated[j][n-i-1] = matrix[i][j]\n    return rotated\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n\n",
        "idx_generation": 309,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_product=24) -> bool:\n    \"\"\"Find a pair of numbers in the list that multiplies to target_product.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target_product:\n                return True\n    return False\ndef g(target_product = 24):\n    nums = [2, 4, 6, 8, 10]\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target_product:\n                return [nums[i], nums[j]]\n    return []\nassert f(g())\n",
        "idx_generation": 17,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(n: int, k=2, seq=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Find the product of the maximum k numbers in the sequence\"\"\"\n    return 0 <= k <= len(seq) and math.prod(sorted(seq)[-k:]) == n\ndef g(k = 2, seq = [1, 2, 3, 4, 5, 6]):\n    return math.prod(sorted(seq)[-k:])\nassert f(g())\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='a', count=10, length=100) -> bool:\n    \"\"\"Check if the count of a given substring in a string is less than or equal to a given count and if the length of the string is less than or equal to a given length.\"\"\"\n    return string.count(substring) <= count and len(string) <= length\ndef g(substring = 'a', count = 10, length = 100):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g())\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring: str = 'Python') -> bool:\n    \"\"\"\n    Check if a given string contains the given substring. The comparison is case-sensitive.\n    \"\"\"\n    return substring in s\n\ndef g(substring = 'Python'):\n    return 'I love Python programming language'\n\nassert f(g())\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"\n    Check if the target number is present in the given matrix.\n    Return True if the target number is present, False otherwise.\n    \"\"\"\n    row = len(matrix)\n    col = len(matrix[0])\n    low = 0\n    high = row * col - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        num = matrix[mid // col][mid % col]\n        if num == target:\n            return True\n        elif num < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n\ndef g(target=8):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    Return True if it is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for i in range(n):\n        row_sum = sum(matrix[i])\n        if row_sum != target_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n    \n    # Check diagonals\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n    \n    return True\n\ndef g():\n    return ([[2, 7, 6], [9, 5, 1], [4, 3, 8]],)\n\nassert f(*g())\n\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target=\"hello\") -> bool:\n    \"\"\"\n    Given a string, check if it can be transformed into the target string by rearranging the characters.\n    Return True if it is possible, False otherwise.\n    \"\"\"\n    def rearrange_string(string, target):\n        if len(string) != len(target):\n            return False\n        return sorted(string) == sorted(target)\n\n    return rearrange_string(string, target)\n\ndef g(string=\"ehllo\"):\n    return string\n\nassert f(g())\n\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(ls: List[str]) -> bool:\n    \"\"\"\n    Check if there is a string in the list that is a palindrome.\n    Return True if a palindrome is found, False otherwise.\n    \"\"\"\n    for s in ls:\n        if s == s[::-1]:\n            return True\n    return False\n\ndef g():\n    return ['racecar', 'python', 'level', 'programming']\n\n# Test case\ntest_list = ['racecar', 'python', 'level', 'programming']\nassert f(g())\n",
        "idx_generation": 415,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Check if the given strings are anagrams of each other.\n    Return True if the strings are anagrams, False otherwise.\n    \"\"\"\n    return sorted(s1.lower()) == sorted(s2.lower())\n\ndef g():\n    return (\"listen\", \"silent\")\n\nassert f(*g())\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return a new list containing the maximum number from each row.\n    \"\"\"\n    return [max(row) for row in matrix]\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]])) == [3, 6, 9]\n\n",
        "idx_generation": 213,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    \"\"\"\n    Check if all the words in the list are palindromes.\n    Return True if all words are palindromes, False otherwise.\n    \"\"\"\n    for word in words:\n        if word != word[::-1]:\n            return False\n    return True\n\ndef g(words = [\"level\", \"radar\", \"noon\"]):\n    return words\n\nassert f(g())\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, s1='dog', s2='cat', count1=3, count2=2) -> bool:\n    \"\"\"\n    Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\n    the same 3 characters\n    \"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:3] == s[-3:])\ndef g(s1='dog', s2='cat', count1=3, count2=2):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 3 + ans + \"?\" * 3\nassert f(g())\n",
        "idx_generation": 13,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a pangram (contains all 26 letters of the alphabet).\"\"\"\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    return set(s.lower()) >= alphabet\n\ndef g():\n    return \"The quick brown fox jumps over the lazy dog\"\n\nassert f(g())\n",
        "idx_generation": 166,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Remove duplicates from the given list of numbers.\n\n    Example:\n    nums = [1, 2, 3, 3, 4, 4, 5]\n    After removing duplicates, the list becomes [1, 2, 3, 4, 5].\n    \"\"\"\n    return list(set(nums))\n\ndef g():\n    return [1, 2, 3, 3, 4, 4, 5]\n\nassert f(g()) == [1, 2, 3, 4, 5]\n\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given array is sorted in non-decreasing order.\n    \"\"\"\n    return arr == sorted(arr)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n\n",
        "idx_generation": 279,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if a list of numbers contains any duplicate elements.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 5, 6, 7, 8]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 91,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Check if two strings are anagrams of each other.\n    Return True if they are anagrams, False otherwise.\n    \"\"\"\n    if len(s1) != len(s2):\n        return False\n    return sorted(s1) == sorted(s2)\n\ndef g(s1=\"listen\", s2=\"silent\"):\n    return s1, s2\n\nassert f(*g())\n\n",
        "idx_generation": 166,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[str], target: str) -> bool:\n    \"\"\"Check if the target string is present in any of the strings in the given list\"\"\"\n    for string in arr:\n        if target in string:\n            return True\n    return False\n\ndef g():\n    return [\"hello\", \"world\", \"python\", \"coding\", \"puzzle\"]\n\nassert f(g(), \"pyt\")\n\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Check if the string s contains only uppercase letters\"\"\"\n    return s.isupper() and len(s) == n\ndef g(n = 10):\n    return 'PYTHONCODE'\nassert f(g())",
        "idx_generation": 95,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=7, b=2, c=8) -> bool:\n    \"\"\"Find n such that n * a == b * (the sum of the first c integers)\"\"\"\n    return n * a == sum([b * i for i in range(c)])\ndef g(a = 7, b = 2, c = 8):\n    return sum([b * i for i in range(c)]) / a\nassert f(g())\n",
        "idx_generation": 136,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]]) -> bool:\n    \"\"\"\n    Given a list of points in 2D space, check if they form a straight line.\n    \"\"\"\n    if len(points) < 2:\n        return True\n    \n    x0, y0 = points[0]\n    x1, y1 = points[1]\n    \n    for i in range(2, len(points)):\n        xi, yi = points[i]\n        if (y1 - y0) * (xi - x0) != (yi - y0) * (x1 - x0):\n            return False\n    \n    return True\n\ndef g(points: List[Tuple[int, int]] = [(1, 2), (3, 4), (5, 6)]):\n    return points\n\nassert f(g())\n\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if a list is sorted in ascending order.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return nums == sorted(nums)\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 265,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains a subsequence that sums to 100.\n    Returns True if such subsequence exists, False otherwise.\n    \"\"\"\n    for r in range(len(nums) + 1):\n        for combination in itertools.combinations(nums, r):\n            if sum(combination) == 100:\n                return True\n    return False\n\ndef g():\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 190,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Rearrange the given list in such a way that all the even numbers appear before the odd numbers.\n\n    Example:\n    nums = [1, 2, 3, 4]\n    After rearranging, the list becomes [2, 4, 1, 3].\n    \"\"\"\n    return sorted(nums, key=lambda x: x % 2)\n\ndef g():\n    return [1, 2, 3, 4]\n\nassert f(g()) == [2, 4, 1, 3]\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target_sum=1000000) -> bool:\n    \"\"\"Find a permutation of [1, 2, ..., 1000] such that the sum of any three adjacent elements is not equal to the target_sum.\"\"\"\n    return sorted(nums) == list(range(1, 1001)) and all((nums[i] + nums[i+1] + nums[i+2] != target_sum) for i in range(len(nums)-2))\ndef g(target_sum=1000000):\n    return [i+1 for i in range(1000) if i+1 != target_sum-(i+1) and i+2 != target_sum-(i+1)]\nassert f(g())\n",
        "idx_generation": 17,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='abcdefgh', reverse=False, uppercase=False) -> bool:\n    \"\"\"Check if a string matches the target with optional reverse and uppercase conversion\"\"\"\n    if reverse:\n        s = s[::-1]\n    if uppercase:\n        s = s.upper()\n    return s == target\n\ndef g(target='abcdefgh', reverse=False, uppercase=False):\n    if reverse:\n        target = target[::-1]\n    if uppercase:\n        target = target.upper()\n    return target\n\nassert f(g())\n",
        "idx_generation": 121,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(hands: List[int], target_angle=45) -> bool:\n    \"\"\"Find clock hands = [hour, min] such that the angle is target_angle degrees.\"\"\"\n    (h, m) = hands\n    assert 0 < h <= 12 and 0 <= m < 60\n    hour_angle = 30 * h + m / 2\n    minute_angle = 6 * m\n    return abs(hour_angle - minute_angle) != target_angle\n\ndef g(target_angle = 45):\n    for h in range(1, 13):\n        for m in range(60):\n            hour_angle = 30 * h + m / 2\n            minute_angle = 6 * m\n            if abs(hour_angle - minute_angle) != target_angle:\n                return [h, m]\n\nassert f(g())\n",
        "idx_generation": 306,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"Check if the sum of squares of two numbers is equal to the square of the third number\"\"\"\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\ndef g(a: int, b: int):\n    c = (a**2 + b**2)**0.5\n    return c\nassert f(g(3, 4), 3, 4)\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a number is a prime number.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(n = 17):\n    return n\n\nassert f(g())\n\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> List[int]:\n    \"\"\"Find all pairs of numbers in the list that add up to the target\"\"\"\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                pairs.append((nums[i], nums[j]))\n    return pairs\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g()) == [(1, 9), (2, 8), (3, 7), (4, 6)]\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Check if n is a multiple of k.\n    \"\"\"\n    return n % k == 0\n\ndef g(n=15, k=3):\n    return n, k\n\nassert f(*g())\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> str:\n    \"\"\"\n    Convert the given string to title case.\n    \n    Sample Input:\n    string = \"hello world\"\n    \n    Sample Output:\n    \"Hello World\"\n    \"\"\"\n    return string.title()\n\ndef g(string=\"hello world\"):\n    return string\n\nassert f(g()) == \"Hello World\"\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    A symmetric matrix is a square matrix that is equal to its transpose.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    \"\"\"\n    Generate a symmetric matrix of size 3x3.\n    \"\"\"\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g())\n\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target_sum=0) -> bool:\n    \"\"\"Check if the given list contains two consecutive numbers that add up to the target sum.\"\"\"\n    for i in range(len(lst)-1):\n        if lst[i] + lst[i+1] == target_sum:\n            return True\n    return False\n\ndef g(target_sum=0):\n    return [target_sum] * 5\n\nassert f(g())\n",
        "idx_generation": 114,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"\n    Check if there exists a sublist in the given list such that the product of its elements is divisible by k.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            sublist = arr[i:j]\n            product = 1\n            for num in sublist:\n                product *= num\n            if product % k == 0:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g())\n\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"\n    Given a string s, check if it contains exactly n consecutive vowels.\n    Return True if it does, False otherwise.\n\n    Sample Input:\n    s = \"Hello World\"\n\n    Sample Output:\n    False\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(n=3):\n    return \"aeiou\" * n\n\nassert f(g())\n",
        "idx_generation": 52,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transpose the given matrix.\n\n    Sample Input:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\n    Sample Output:\n    [\n        [1, 4, 7],\n        [2, 5, 8],\n        [3, 6, 9]\n    ]\n    \"\"\"\n    return [list(row) for row in zip(*matrix)]\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a palindrome.\n\n    Sample Input:\n    n = 12321\n\n    Sample Output:\n    True\n    \"\"\"\n    n_str = str(n)\n    return n_str == n_str[::-1]\n\ndef g():\n    n = 12321\n    return n\n\nassert f(g()) == True\n\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is sorted in descending order.\n\n    Example:\n    lst = [5, 4, 3, 2, 1]\n    output: True\n    \"\"\"\n    return lst == sorted(lst, reverse=True)\n\ndef g(lst=[5, 4, 3, 2, 1]):\n    return lst\n\nassert f(g())\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n\n    Sample Input:\n    s = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 380,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there is a subarray in the list where the sum of its elements is divisible by k.\n\n    Sample Input:\n    numbers = [4, 5, 3, 8, 6, 2]\n    k = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)+1):\n            if sum(numbers[i:j]) % k == 0:\n                return True\n    return False\n\ndef g(numbers = [4, 5, 3, 8, 6, 2], k = 7):\n    return numbers\n\nassert f(g(), 7)\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='python', case_sensitive=False) -> bool:\n    \"\"\"\n    Check if the substring is present in the given string,\n    based on the value of the case_sensitive flag.\n    Returns True if the condition is satisfied, False otherwise.\n    \"\"\"\n    if case_sensitive:\n        return substr in s\n    else:\n        return substr.lower() in s.lower()\n\ndef g(substr='python', case_sensitive=False):\n    if case_sensitive:\n        return 'This is a Python puzzle.'\n    else:\n        return 'This is a python puzzle.'\n\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nimport datetime\nfrom typing import*\n\ndef f(date: str, days: int) -> bool:\n    \"\"\"\n    Check if a given date is within a certain number of days from today.\n    Return True if the date is within the specified number of days, False otherwise.\n    \"\"\"\n    def get_date_diff(date):\n        date_obj = datetime.datetime.strptime(date, \"%Y-%m-%d\")\n        today = datetime.datetime.now()\n        diff = (date_obj - today).days\n        return diff\n    \n    diff = get_date_diff(date)\n    \n    return diff <= days\n\ndef g(days: int) -> str:\n    \"\"\"\n    Generate a random date within the next 365 days.\n    \"\"\"\n    today = datetime.datetime.now()\n    future_date = today + datetime.timedelta(days=days)\n    return future_date.strftime(\"%Y-%m-%d\")\n\nassert f(g(30), 30)\n",
        "idx_generation": 249,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list whose sum is equal to the target sum.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target value, find the number of pairs of elements in the list that sum up to the target value.\n\n    Example:\n    Input: arr = [1, 2, 3, 4, 5, 6], target = 7\n    Output: 3\n    Explanation: There are 3 pairs (1, 6), (2, 5) and (3, 4) that sum up to the target value 7.\n    \"\"\"\n    count = 0\n    complements = {}\n    for num in arr:\n        complement = target - num\n        if complement in complements:\n            count += 1\n        complements[num] = complement\n    return count\n\ndef g(arr=[1, 2, 3, 4, 5, 6], target=7):\n    return arr, target\n\nassert f(*g()) == 3\n",
        "idx_generation": 415,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Given two strings, determine if the second string is an anagram of the first string.\n\n    Sample Input:\n    `'listen'`, `'silent'`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g(s1='listen', s2='silent'):\n    return s1, s2\n\nassert f(*g())\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the missing number in a list of consecutive integers.\n    The list is missing one number in the range from the minimum to the maximum (inclusive).\n\n    Example:\n    nums = [1, 2, 4, 5, 6]\n    The missing number in the range from 1 to 6 is 3.\n    Therefore, the puzzle is solved.\n    \"\"\"\n    n = len(nums) + 1\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    return expected_sum - actual_sum\n\ndef g():\n    return [1, 2, 4, 5, 6]\n\nassert f(g()) == 3\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains all unique elements.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(arr) == len(set(arr))\n\ndef g():\n    arr = [1, 2, 3, 4, 5]\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python', reverse=False, uppercase=False) -> bool:\n    \"\"\"Check if a string contains all the target characters with optional reverse and uppercase conversion\"\"\"\n    if reverse:\n        s = s[::-1]\n    if uppercase:\n        s = s.upper()\n    return all((ch in s for ch in target))\n\ndef g(target='python', reverse=False, uppercase=False):\n    if reverse:\n        target = target[::-1]\n    if uppercase:\n        target = target.upper()\n    return target\n\nassert f(g())\n",
        "idx_generation": 309,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g()) == True\n\n",
        "idx_generation": 306,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\nfrom typing import List\n\ndef f(pattern: str, strings: List[str]) -> List[str]:\n    \"\"\"\n    Find all the strings in the given list that match the given regular expression pattern.\n    Return a list of strings that match the pattern.\n    \"\"\"\n    matching_strings = []\n    for string in strings:\n        if re.search(pattern, string):\n            matching_strings.append(string)\n    return matching_strings\n\ndef g():\n    pattern = r'\\b[A-Z]+\\b'\n    strings = [\"Hello\", \"world\", \"PYTHON\", \"programming\"]\n    return pattern, strings\n\nassert f(*g()) == [\"PYTHON\"]\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word_list: List[str], prefix='pre') -> bool:\n    \"\"\"Check if all words in the list start with the given prefix.\"\"\"\n    for word in word_list:\n        if not word.startswith(prefix):\n            return False\n    return True\n\ndef g(prefix='pre'):\n    return ['prefix', 'preposition', 'prehistoric', 'presentation']\n\nassert f(g())\n",
        "idx_generation": 226,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is present in the list\"\"\"\n    return n in lst\n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst[3]\n\nassert f(g())\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if the given string is a palindrome of length n\"\"\"\n    return s == s[::-1] and len(s) == n\n\ndef g(n: int):\n    return 'madam'[:n]\n\nassert f(g(5), 5)\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, find the product of all the elements in the list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    120\n    \"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 120\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc', length=10) -> bool:\n    \"\"\"\n    Check if a given substring appears in the given string, and if the length of the string is equal to a given length.\n    \"\"\"\n    return substring in s and len(s) == length\n\ndef g(substring='abc', length=10):\n    c = chr(1 + max(ord(c) for c in (substring or \"abc\")))  # a character not in substring\n    return substring * (length // len(substring)) + c * (length % len(substring))\n\nassert f(g())\n",
        "idx_generation": 265,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], pivot='python') -> bool:\n    \"\"\"Check if the pivot string is a prefix of any word in the list\"\"\"\n    for word in words:\n        if word.startswith(pivot):\n            return True\n    return False\n\ndef g(pivot='python'):\n    return [word for word in ['python', 'java', 'c++', 'javascript']]\n\nassert f(g())\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a Fibonacci sequence.\n    \"\"\"\n    if len(numbers) < 3:\n        return False\n    for i in range(2, len(numbers)):\n        if numbers[i] != numbers[i-1] + numbers[i-2]:\n            return False\n    return True\n\ndef g():\n    return [0, 1, 1, 2, 3, 5, 8, 13, 21]\n\nassert f(g())\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a power of two\"\"\"\n    return n > 0 and (n & (n - 1)) == 0\n\ndef g():\n    return 16\n\nassert f(g())\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=4, target='d') -> bool:\n    \"\"\"Check if the n-th occurrence of a character in a string matches a specific target.\"\"\"\n    return s.count(target, 0, n) == n\ndef g(n = 4, target = 'd'):\n    return target * n\nassert f(g())\n\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nimport re\n\ndef f(string: str, substring: str, pattern=r'\\b\\w+\\b') -> bool:\n    \"\"\"Check if the given substring is present in the string\"\"\"\n    return re.search(pattern, string) is not None\n\ndef g(string='This is a sample string', substring='sample', pattern=r'\\b\\w+\\b'):\n    return string, substring\n\nassert f(*g())\n",
        "idx_generation": 358,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"\n    Check if there are exactly k consecutive numbers in the given list.\n    Return True if there are exactly k consecutive numbers, False otherwise.\n    \"\"\"\n    nums.sort()\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]+1:\n            count += 1\n            if count == k:\n                return True\n        else:\n            count = 1\n    return False\n\ndef g(k=3):\n    return [1, 2, 4, 5, 6, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, find the maximum subarray sum.\n    Return the maximum subarray sum.\n    \"\"\"\n    max_sum = lst[0]\n    current_sum = lst[0]\n    for num in lst[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n\ndef g(lst=[-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return lst\n\nassert f(g()) == 6\n\n",
        "idx_generation": 167,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=7, b=15, c=9) -> bool:\n    \"\"\"Check if x is divisible by a and b, or if it is equal to c\"\"\"\n    if x % a == 0 and x % b == 0:\n        return True\n    elif x == c:\n        return True\n    else:\n        return False\n\ndef g(a=7, b=15, c=9):\n    if a > 0 and b > 0 and c > 0:\n        return a * b\n    else:\n        return c\n\nassert f(g())\n",
        "idx_generation": 91,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a triplet of numbers in the given list that sums up to the target.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=18):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a: int, b: int, c: int) -> bool:\n    \"\"\"Check if the equation n / a == b / (the sum of the first c integers) is valid.\"\"\"\n    return n / a == b / (c * (c + 1)) // 2\n\ndef g(a: int, b: int, c: int):\n    return (b / (c * (c + 1)) // 2) * a\n\nassert f(g(4, 8, 6), 4, 8, 6)\n",
        "idx_generation": 212,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int, target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list that sums up to k and has a length greater than or equal to the target length.\n    Return True if such a subarray exists, False otherwise.\n    \"\"\"\n    prefix_sum = {0: -1}\n    curr_sum = 0\n    for i, num in enumerate(arr):\n        curr_sum += num\n        if curr_sum - k in prefix_sum and i - prefix_sum[curr_sum - k] >= target:\n            return True\n        if curr_sum not in prefix_sum:\n            prefix_sum[curr_sum] = i\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 7, 2)\n\nassert f(*g())\n",
        "idx_generation": 108,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, max_nums=4, options=[10, 20, 30, 40, 50]) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose sum is the target value, and each number can be used at most once.\"\"\"\n    for n in nums:\n        assert n in options\n    return sum(nums) <= target and len(set(nums)) <= max_nums\ndef g(target=100, max_nums=4, options=[10, 20, 30, 40, 50]):\n    from itertools import permutations\n    for n in range(max_nums + 1):\n        for p in permutations(options, n):\n            if sum(p) == target:\n                return list(p)\nassert f(g())\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='hello') -> bool:\n    \"\"\"Check if a substring is present in a string.\"\"\"\n    return substring in string.lower()\ndef g(substring='hello'):\n    string = 'Hello, how are you doing today?'\n    return string\nassert f(g())\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums=[1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a number is divisible by 7.\n    \"\"\"\n    return n % 7 == 0\n\ndef g(n = 42):\n    return n\n\nassert f(g())\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subset of the given list with a sum equal to 0.\n    Returns True if such subset exists, False otherwise.\n    \"\"\"\n    for r in range(len(nums) + 1):\n        for combination in itertools.combinations(nums, r):\n            if sum(combination) == 0:\n                return True\n    return False\n\ndef g():\n    return [1, -2, 3, 4, -5]\n\nassert f(g())\n",
        "idx_generation": 149,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of elements in the given list whose sum is equal to n.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == n:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], n=9):\n    return n, arr\n\nassert f(*g())\n",
        "idx_generation": 362,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if the given string is the longest string in the list.\"\"\"\n    return len(s) == max(len(string) for string in strings)\n\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return max(strings, key=len)\n\nassert f(g())\n",
        "idx_generation": 119,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=50, max_nums=3, options=[2, 5, 10, 15, 20]) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose total sum is equal to the target value.\"\"\"\n    for n in nums:\n        assert n in options\n    return len(nums) <= max_nums and sum(nums) == target\n\ndef g(target=50, max_nums=3, options=[2, 5, 10, 15, 20]):\n    from itertools import combinations_with_replacement\n    for n in range(max_nums + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\n\nassert f(g())\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=3, lower=86, seq=[19, 82, -24, -9, -92, 50, -89, -15, 45, 56, -64]) -> bool:\n    \"\"\"Find the starting index of a sequence of k consecutive numbers whose sum is greater than or equal to a given lower bound\"\"\"\n    return any(sum(seq[i:i+k]) >= lower for i in range(len(seq)-k+1))\n\ndef g(k = 3, lower = 86, seq = [19, 82, -24, -9, -92, 50, -89, -15, 45, 56, -64]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\n\nassert f(g())\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, remove all duplicate elements and return a new list.\n\n    Example:\n    Input: [1, 2, 3, 4, 3, 2, 1]\n    Output: [1, 2, 3, 4]\n    \"\"\"\n    return list(set(arr))\n\ndef g():\n    return [1, 2, 3, 4, 3, 2, 1]\n\nassert f(g()) == [1, 2, 3, 4]\n",
        "idx_generation": 415,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Check if s1 and s2 are anagrams of each other.\n    \"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g():\n    return \"listen\", \"silent\"\n\nassert f(*g())\n",
        "idx_generation": 226,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=4, strings=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if the given string is present in the list and has a length greater than n\"\"\"\n    return s in strings and len(s) > n\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return strings[len(strings)//2]\nassert f(g())\n",
        "idx_generation": 111,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Check if a given number n is divisible by k and its square root is an integer.\n    \"\"\"\n    return n % k == 0 and int(n ** (1/2)) == n ** (1/2)\n\ndef g():\n    return 25, 5\n\nassert f(*g())\n",
        "idx_generation": 474,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring: str) -> bool:\n    \"\"\"Check if the substring is present in the given string\"\"\"\n    return substring in s\n\ndef g(s=\"Hello World!\", substring=\"World\"):\n    return s, substring\n\nassert f(*g())\n",
        "idx_generation": 80,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=4) -> bool:\n    \"\"\"\n    Check if there exists a substring in the given string that contains at least k different characters.\n    \"\"\"\n    n = len(s)\n    for i in range(n):\n        for j in range(i+k, n+1):\n            if len(set(s[i:j])) >= k:\n                return True\n    return False\n\ndef g(s='puzzles'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 210,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a perfect square\"\"\"\n    if n < 0:\n        return False\n    root = int(n ** 0.5)\n    return root * root == n\n\ndef g():\n    return 64\n\nassert f(g())\n\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is an anagram of a palindrome.\n    \"\"\"\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    odd_count = 0\n    for count in char_count.values():\n        if count % 2 != 0:\n            odd_count += 1\n        if odd_count > 1:\n            return False\n    return True\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 233,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> str:\n    \"\"\"Reverse the order of words in a given string.\"\"\"\n    words = s.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)\n\ndef g(s=\"Hello World!\"):\n    return s\n\nassert f(g()) == \"World! Hello\"\n",
        "idx_generation": 171,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=20, c=30) -> bool:\n    \"\"\"Check if the given number is a multiple of a, b, and c.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\n\ndef g(a=10, b=20, c=30):\n    return a * b * c\n\nassert f(g())\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(stamps: List[int], target=100, max_stamps=3, options=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) -> bool:\n    \"\"\"Find a selection of at most max_stamps stamps whose total worth is the target value.\"\"\"\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\n\ndef g(target = 100, max_stamps = 3, options = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    from itertools import combinations\n    for n in range(1, max_stamps + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\n    return []\n\nassert f(g())\n",
        "idx_generation": 117,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=0) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the given list\"\"\"\n    return any(nums[i:i+k] == list(range(nums[i], nums[i]+k)) for i in range(len(nums)-k+1))\ndef g(nums=[1, 2, 3, 4, 5], k=0):\n    return nums\nassert f(g())\n",
        "idx_generation": 63,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is symmetric.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 90,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(d: Dict[str, int], key: str, value: int) -> bool:\n    \"\"\"\n    Given a dictionary, a key, and a value, determine if the key exists in the dictionary and its corresponding\n    value is equal to the given value.\n    \"\"\"\n    if key in d and d[key] == value:\n        return True\n    return False\n\ndef g():\n    return {\"apple\": 5, \"banana\": 8, \"cherry\": 17}, \"cherry\", 17\n\nassert f(*g())\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    if n < 1:\n        return False\n    root = int(n ** 0.5)\n    return root * root == n\n\ndef g():\n    return 25\n\nassert f(g())\n",
        "idx_generation": 309,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Check if string s is a subsequence of string t.\n\n    Sample Input:\n    s = \"abc\"\n    t = \"ahbgdc\"\n\n    Sample Output:\n    True\n    \"\"\"\n    len_s, len_t = len(s), len(t)\n    i, j = 0, 0\n    while i < len_s and j < len_t:\n        if s[i] == t[j]:\n            i += 1\n        j += 1\n    return i == len_s\n\ndef g(s=\"abc\", t=\"ahbgdc\"):\n    return (s, t)\n\nassert f(*g())\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(n=17):\n    return n\n\nassert f(g())\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int, target: int) -> bool:\n    \"\"\"\n    Check if the sum of three numbers is equal to a certain value.\n    \"\"\"\n    return x + y + z == target\ndef g(x: int, y: int, target: int):\n    z = target - (x + y)\n    return z\nassert f(g(2, 5, 100), 2, 5, 100)\n",
        "idx_generation": 282,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the list such that the difference of any two consecutive elements is equal to a given target.\n    Returns True if such a subsequence exists, False otherwise.\n    \"\"\"\n    n = len(nums)\n    prefix_diff = set()\n\n    for i in range(n-1):\n        curr_diff = nums[i] - nums[i+1]\n\n        if curr_diff == target:\n            return True\n\n        if curr_diff in prefix_diff:\n            return True\n\n        prefix_diff.add(curr_diff)\n\n    return False\n\ndef g(target=0):\n    return [5, 2, 7, 4, 3]\n\nassert f(g())\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a given string represents a valid phone number.\n    \"\"\"\n    pattern = r'^\\+?[1-9]\\d{0,2}-?\\d{3}-?\\d{3}-?\\d{4}$'\n    return re.match(pattern, s) is not None\n\ndef g():\n    return \"+1-123-456-7890\"\n\nassert f(g())\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return all(matrix[i][j] == matrix[j][i] for i in range(rows) for j in range(cols))\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 115,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list whose sum is equal to the product of two other integers.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums) + 1):\n            subarray = nums[i:j]\n            subarray_sum = sum(subarray)\n            for k in range(len(nums)):\n                for l in range(k + 1, len(nums)):\n                    if subarray_sum == nums[k] * nums[l] or subarray_sum == nums[l] * nums[k]:\n                        return True\n    return False\n\ndef g():\n    return [0, 1, 2, 3]\n\nassert f(g())\n",
        "idx_generation": 266,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=987654321) -> bool:\n    \"\"\"Solve a division problem\"\"\"\n    return x / 2 == a\ndef g(a = 987654321):\n    return a * 2\nassert f(g())\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Check if a given number n is a palindrome with exactly k digits.\n    A number is a palindrome if it remains the same when its digits are reversed.\n    \"\"\"\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    return is_palindrome(n) and len(str(n)) == k\n\ndef g():\n    return 12321, 5\n\nassert f(*g())\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Rotate the given matrix counter-clockwise by 90 degrees.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    The rotated matrix should be:\n    rotated = [[3, 6, 9],\n               [2, 5, 8],\n               [1, 4, 7]]\n    \"\"\"\n    n = len(matrix)\n    rotated = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            rotated[j][i] = matrix[i][n-j-1]\n    return rotated\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == [[3, 6, 9], [2, 5, 8], [1, 4, 7]]\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target_product=24) -> bool:\n    \"\"\"Find a pair of numbers in the list that multiplies to target_product.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target_product:\n                return True\n    return False\ndef g(target_product = 24):\n    nums = [2, 3, 4, 6, 8]\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target_product:\n                return [nums[i], nums[j]]\n    return []\nassert f(g())\n",
        "idx_generation": 29,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"\n    Check if there exists a subsequence with a product divisible by k.\n    \"\"\"\n    n = len(arr)\n    dp = [[False] * (k+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][1] = True\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if arr[i-1] <= j:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][k]\n\ndef g(arr=[2, 3, 4, 5, 6]):\n    k = 10\n    return arr, k\n\nassert f(*g())\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=5, length=20) -> bool:\n    \"\"\"Check if a given string has a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'abc', count = 5, length = 20):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '$'\nassert f(g())\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring: str) -> bool:\n    \"\"\"\n    Check if a given string contains all the characters of a given substring in the same order.\n    Return True if the string contains the substring, False otherwise.\n    \"\"\"\n    i = 0\n    j = 0\n    while i < len(string) and j < len(substring):\n        if string[i] == substring[j]:\n            j += 1\n        i += 1\n    return j == len(substring)\n\ndef g(string = \"hello world\", substring = \"worl\"):\n    return string, substring\n\nassert f(*g())\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 65,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given array is a square matrix.\n\n    Returns True if the array is a square matrix, False otherwise.\n    \"\"\"\n    rows = len(arr)\n    for row in arr:\n        if len(row) != rows:\n            return False\n    return True\n\ndef g():\n    return ([[1, 2, 3], [4, 5, 6], [7, 8, 9]],)\n\nassert f(*g())\n\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word: str = 'Python', max_len: int = 10) -> bool:\n    \"\"\"\n    Check if the word is present in the string and the length of the word is less than or equal to max_len.\n    \"\"\"\n    return word in s and len(word) <= max_len\n\ndef g(word: str = 'Python', max_len: int = 10):\n    if len(word) <= max_len:\n        return word\n    return word[:max_len]\n\nassert f(g())\n",
        "idx_generation": 153,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[str]) -> bool:\n    \"\"\"Check if the given list of strings contains any palindromic words.\"\"\"\n    for word in arr:\n        if word == word[::-1]:\n            return True\n    return False\n\ndef g(arr = [\"level\", \"python\", \"racecar\", \"programming\"]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(s: str, ignore_case=True) -> bool:\n    \"\"\"Check if a given string is an anagram of the word \"listen\".\"\"\"\n    if ignore_case:\n        s = s.lower()\n    return sorted(s) == sorted(\"listen\")\n\ndef g(ignore_case=True):\n    return \"silent\"\n\nassert f(g())\n\n",
        "idx_generation": 384,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the sum of all the elements in the given matrix.\n    Return the sum as an integer.\n    \"\"\"\n    total_sum = sum(sum(row) for row in matrix)\n    return total_sum\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g()) == 45\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str) -> bool:\n    \"\"\"\n    Check if a word is a palindrome.\n    Return True if it is, and False otherwise.\n    \"\"\"\n    return word == word[::-1]\n\ndef g(word: str = \"racecar\"):\n    return word\n\nassert f(g())\n",
        "idx_generation": 177,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, s1='apple', s2='banana', count1=2, count2=3) -> bool:\n    \"\"\"\n    Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\n    the same 4 characters.\n    \"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:4] == s[-4:])\ndef g(s1='apple', s2='banana', count1=2, count2=3):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 4 + ans + \"?\" * 4\nassert f(g())\n",
        "idx_generation": 98,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if a string is a palindrome.\n    Return True if the string is a palindrome, False otherwise.\n    \"\"\"\n    return string == string[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n\n",
        "idx_generation": 167,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Remove the duplicates from the given list and return a sorted list.\"\"\"\n    return sorted(list(set(nums)))\n\ndef g():\n    return [4, 2, 8, 4, 6, 2, 8, 10]\n\nassert f(g()) == [2, 4, 6, 8, 10]\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, transpose it.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    The transposed matrix is:\n    [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n    \"\"\"\n    n = len(matrix)\n    transposed = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            transposed[i][j] = matrix[j][i]\n    return transposed\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n\n",
        "idx_generation": 290,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if there are duplicate elements in the given list.\"\"\"\n    return len(lst) != len(set(lst))\n\ndef g(lst=[1, 2, 2, 3, 4, 5]):\n    return lst\n\nassert f(g())\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Check if the given two strings are anagrams of each other.\n    Return True if the strings are anagrams, and False otherwise.\n    \"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g(s1=\"listen\", s2=\"silent\"):\n    return [s1, s2]\n\nassert f(*g())\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[str], target: str) -> bool:\n    \"\"\"Check if the target string is a suffix of any of the strings in the given list\"\"\"\n    for string in arr:\n        if string.endswith(target):\n            return True\n    return False\n\ndef g():\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n\nassert f(g(), \"berry\")\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"\n    Given a string s, check if there exists a substring of length n that contains only unique characters.\n\n    Sample Input:\n    s = \"hello\"\n\n    Sample Output:\n    False\n    \"\"\"\n    return any(len(set(s[i:i+n])) == n for i in range(len(s)-n+1))\ndef g(n = 3):\n    return 'python'\nassert f(g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=4, c=6) -> bool:\n    \"\"\"Find n such that n / a == b * (the sum of the first c integers)\"\"\"\n    return n / a == sum([b * i for i in range(c)])\ndef g(a = 10, b = 4, c = 6):\n    return sum([b * i for i in range(c)]) * a\nassert f(g())\n",
        "idx_generation": 136,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]]) -> bool:\n    \"\"\"\n    Given a list of 2D points, check if there exists a pair of points that are symmetrical with respect to the origin.\n    \"\"\"\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            if points[i][0] == -points[j][0] and points[i][1] == -points[j][1]:\n                return True\n    return False\n\ndef g():\n    return [(1, 2), (-1, -2), (3, 4), (-3, -4)]\nassert f(g())\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist three numbers in the given list such that their sum is equal to the target.\n    Return True if such a triplet exists, False otherwise.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    \n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        \n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            \n            if curr_sum == target:\n                return True\n            \n            elif curr_sum < target:\n                left += 1\n            \n            else:\n                right -= 1\n    \n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), 9)\n\n",
        "idx_generation": 286,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list where the sum of their digits is equal.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if sum(int(digit) for digit in str(arr[i])) == sum(int(digit) for digit in str(arr[j])):\n                return True\n    return False\n\ndef g():\n    return [12, 34, 56, 78, 90, 123, 456, 789, 987, 654]\n\nassert f(g())\n",
        "idx_generation": 240,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Return a new list with only the even numbers from the given list.\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == [2, 4, 6, 8, 10]\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target = 0):\n    \"\"\"Find two numbers in the given list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target = 0):\n    return [target//2, target - target//2]\nassert f(g())\n",
        "idx_generation": 26,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='reverseme', reverse=True) -> bool:\n    \"\"\"\n    Reverse a string and check if it matches the target string,\n    based on the value of the reverse flag.\n    Returns True if the condition is satisfied, False otherwise.\n    \"\"\"\n    return (s[::-1] == target) == reverse\n\ndef g(target='reverseme', reverse=True):\n    return target[::-1] if reverse else target + \"x\"\n\nassert f(g())\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\ndef f(a: float, b: float, c: float) -> bool:\n    \"\"\"Check if the given values a, b, and c form a Pythagorean triple\"\"\"\n    return a ** 2 + b ** 2 == c ** 2\ndef g():\n    a = 3\n    b = 4\n    return a, b, sqrt(a ** 2 + b ** 2)\nassert f(*g())\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(words: List[str], n=5) -> bool:\n    \"\"\"Find a list of 1000 distinct words where each word contains exactly n characters.\"\"\"\n    return len(set(words)) == 1000 and all((len(w) == n for w in words))\ndef g(n=5):\n    import random\n    import string\n    return [\"\".join(random.choice(string.ascii_letters) for _ in range(n)) for _ in range(1000)]\nassert f(g())\n",
        "idx_generation": 148,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find all pairs of numbers in the given list that sum up to the target number.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 6\n\n    The pairs of numbers that sum up to 6 are (1, 5) and (2, 4).\n    The function should return [(1, 5), (2, 4)].\n    \"\"\"\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                pairs.append((nums[i], nums[j]))\n    return pairs\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    target = 6\n    return nums, target\n\nassert f(*g()) == [(1, 5), (2, 4)]\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport itertools\n\ndef f(n: int, k=2) -> bool:\n    \"\"\"Check if there exist k distinct numbers from 1 to n which sum up to n.\"\"\"\n    for subset in itertools.combinations(range(1, n+1), k):\n        if sum(subset) == n:\n            return True\n    return False\n\ndef g(k = 2):\n    import random\n    n = random.randint(1, 10)\n    return n\n\nassert f(g())\n",
        "idx_generation": 147,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, char: str) -> bool:\n    \"\"\"\n    Check if the given character is present in the string.\n    Return True if it is, False otherwise.\n    \"\"\"\n    return char in string\n\ndef g(string=\"Hello\", char=\"H\"):\n    return string, char\n\nassert f(*g())\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    A magic square is a square matrix in which the sum of each row, each column, and both diagonals are the same.\n    Return True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    row_sum = sum(matrix[0])\n    \n    diagonal1_sum = 0\n    diagonal2_sum = 0\n    \n    for i in range(len(matrix)):\n        if sum(matrix[i]) != row_sum:\n            return False\n        column_sum = 0\n        for j in range(len(matrix)):\n            column_sum += matrix[j][i]\n            if i == j:\n                diagonal1_sum += matrix[i][j]\n            if i == len(matrix) - j - 1:\n                diagonal2_sum += matrix[i][j]\n        if column_sum != row_sum:\n            return False\n    \n    return diagonal1_sum == diagonal2_sum == row_sum\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\nassert f(g([[2, 7, 6], [9, 5, 1], [4, 3, 8]]))\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains the same number at the same index as its value\"\"\"\n    for i in range(len(nums)):\n        if nums[i] != i:\n            return False\n    return True\n\ndef g():\n    return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=5) -> bool:\n    \"\"\"\n    Check if there exists a sublist in the given list such that the maximum element in the sublist is divisible by k.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            sublist = arr[i:j]\n            if max(sublist) % k == 0:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g())\n\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=4) -> bool:\n    \"\"\"\n    Check if there exists a substring in the given string that contains at most k different characters.\n    \"\"\"\n    n = len(s)\n    for i in range(n):\n        for j in range(i+k, n+1):\n            if len(set(s[i:j])) <= k:\n                return True\n    return False\n\ndef g(s='programming'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Sort the list in ascending order.\n    \"\"\"\n    n = len(numbers)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if numbers[j] > numbers[j+1]:\n                numbers[j], numbers[j+1] = numbers[j+1], numbers[j]\n    return numbers\n\ndef g():\n    return [5, 3, 1, 4, 2]\n\nassert f(g()) == [1, 2, 3, 4, 5]\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"\n    Check if a given number is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], n: int) -> bool:\n    \"\"\"\n    Check if there are exactly n words in the given list that have the same number of vowels.\n\n    Example:\n    words = ['apple', 'banana', 'orange', 'grape', 'melon', 'kiwi']\n    n = 2\n\n    The words 'apple' and 'kiwi' have the same number of vowels, so the function should return True.\n\n    Hint: You can use the `count()` method to count the number of occurrences of a specific character in a string.\n    \"\"\"\n    vowel_count = {}\n    for word in words:\n        count = sum([word.count(vowel) for vowel in 'aeiou'])\n        if count in vowel_count:\n            vowel_count[count] += 1\n        else:\n            vowel_count[count] = 1\n    return n in vowel_count.values()\n\ndef g(words = ['apple', 'banana', 'orange', 'grape', 'melon', 'kiwi']):\n    return words\n\nassert f(g(), 2)\n",
        "idx_generation": 183,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a given string is a palindrome.\n\n    Sample Input:\n    s = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    if s == s[::-1]:\n        return True\n    return False\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there is a subarray in the list where the sum of its elements is divisible by k.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)+1):\n            if sum(numbers[i:j]) % k == 0:\n                return True\n    return False\n\ndef g(numbers=[2, 8, 6, 3, 10, 7], k=5):\n    return numbers\n\nassert f(g(), 5)\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string_list: List[str], substr: str) -> bool:\n    \"\"\"\n    Check if any of the strings in the given list contain the given substring.\n    Returns True if a string contains the substring, False otherwise.\n    \"\"\"\n    for string in string_list:\n        if substr in string:\n            return True\n    return False\n\ndef g(string_list=['apple', 'banana', 'cherry'], substr='na'):\n    return string_list, substr\n\nassert f(*g()) == True\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nimport datetime\nfrom typing import*\n\ndef f(date: str, days: int) -> bool:\n    \"\"\"\n    Check if a given date is within a certain number of days from today.\n    Return True if the date is within the specified number of days, False otherwise.\n    \"\"\"\n    def get_date_diff(date):\n        date_obj = datetime.datetime.strptime(date, \"%Y-%m-%d\")\n        today = datetime.datetime.now()\n        diff = (date_obj - today).days\n        return diff\n    \n    diff = get_date_diff(date)\n    \n    return abs(diff) < days\n\ndef g(days: int) -> str:\n    \"\"\"\n    Generate a random date within the next 365 days.\n    \"\"\"\n    today = datetime.datetime.now()\n    future_date = today + datetime.timedelta(days=days)\n    return future_date.strftime(\"%Y-%m-%d\")\n\nassert f(g(30), 30)\n",
        "idx_generation": 249,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, s=1234) -> bool:\n    \"\"\"Check if a number can be formed by concatenating the digits of x\"\"\"\n    return s == int(''.join(x))\n\ndef g(s = 1234):\n    return list(str(s))\n\nassert f(g())\n",
        "idx_generation": 94,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find if there exist two numbers in the matrix whose sum is equal to the target number.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[k])):\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Given two strings, check if they are anagrams of each other.\n\n    Sample Input:\n    s1 = \"listen\"\n    s2 = \"silent\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return sorted(s1.lower()) == sorted(s2.lower())\n\ndef g(s1 = \"listen\", s2 = \"silent\"):\n    return s1, s2\n\nassert f(g()[0], g()[1])\n\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is in ascending order.\"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g()) == True\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine if it is a lower triangular matrix.\n    A lower triangular matrix is a square matrix in which all the entries above the main diagonal are zero.\n    Return True if the matrix is lower triangular, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\n# Test case\ntest_matrix = [[1, 0, 0], [2, 5, 0], [3, 4, 9]]\nassert f(g(test_matrix))\n\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target: str, ignore_case: bool = False) -> bool:\n    \"\"\"Check if the target name is present in the list of names, optionally ignoring case sensitivity\"\"\"\n    if ignore_case:\n        return target.lower() in [name.lower() for name in names]\n    else:\n        return target in names\n\ndef g(names = ['Alice', 'Bob', 'Charlie', 'David'], target = 'Charlie', ignore_case = False):\n    return names, target, ignore_case\n\nassert f(*g())\n",
        "idx_generation": 388,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 306,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, lst=['apple', 'banana', 'cherry', 'durian']) -> bool:\n    \"\"\"Check if the given string is in the list, ignoring case\"\"\"\n    return s.lower() in [x.lower() for x in lst]\n\ndef g(lst=['apple', 'banana', 'cherry', 'durian']):\n    return 'Banana'\n\nassert f(g())\n",
        "idx_generation": 242,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, parts=['I!!', '!love', 'dumplings', '!', ''], string='I!!!!!love!!dumplings!!!!!') -> bool:\n    \"\"\"\n    Find if the given string contains all the parts in the correct order.\n    \"\"\"\n    return all(part in string for part in parts)\ndef g(parts = ['I!!', '!love', 'dumplings', '!', ''], string = 'I!!!!!love!!dumplings!!!!!'):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g())\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=5, s=20) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\n\ndef g(n = 5, s = 20):\n    x = [s // n] * n\n    if s % n != 0:\n        remainder = s % n\n        for i in range(remainder):\n            x[i] += 1\n    return x\n\nassert f(g())\n",
        "idx_generation": 91,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if the given string is a palindrome of length n\"\"\"\n    return s == s[::-1] and len(s) == n\n\ndef g(n: int):\n    return 'civic'[:n]\n\nassert f(g(5), 5)\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains a pair of numbers whose sum is equal to the average of all the numbers in the list.\n\n    Sample Input:\n    `[1, 2, 3, 4, 5]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    average = sum(nums) / len(nums)\n    num_set = set()\n    for num in nums:\n        if average - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, num: int = 3) -> bool:\n    \"\"\"Check if the number of occurrences of a character in a string is equal to the given number\"\"\"\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    return any(count == num for count in char_count.values())\n\ndef g(s: str):\n    return s\nassert f(g(\"hello\"), 2)\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, ignore_case: bool = False) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    if ignore_case:\n        s = s.lower()\n    return s == s[::-1]\n\ndef g(ignore_case: bool = False):\n    return \"Radar\" if ignore_case else \"racecar\"\n\nassert f(g(ignore_case=True), ignore_case=True)\n",
        "idx_generation": 106,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int]) -> bool:\n    \"\"\"Check if a sequence is a Fibonacci sequence\"\"\"\n    if len(seq) < 3:\n        return False\n    for i in range(2, len(seq)):\n        if seq[i-2] + seq[i-1] != seq[i]:\n            return False\n    return True\n\ndef g():\n    return [0, 1, 1, 2, 3, 5, 8, 13]\n\nassert f(g())\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a power of 2.\"\"\"\n    if n <= 0:\n        return False\n    while n > 1:\n        if n % 2 != 0:\n            return False\n        n = n // 2\n    return True\n\ndef g():\n    return 16\n\nassert f(g())\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, target='a') -> bool:\n    \"\"\"Check if the n-th occurrence of a character in a string matches a specific target.\"\"\"\n    return s.count(target, 0, n) == n\ndef g(n = 3, target = 'a'):\n    return target * n\nassert f(g())\n",
        "idx_generation": 166,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring: str) -> bool:\n    \"\"\"\n    Check if the given substring is present in the given string.\n\n    Example:\n    string = 'Hello, World!'\n    substring = 'World'\n\n    The substring 'World' is present in the string, so the function should return True.\n\n    Hint: You can use string slicing to compare each substring of the given length.\n    \"\"\"\n    return substring in string\n\ndef g(string = 'Hello, World!', substring = 'World'):\n    return string\n\nassert f(g(), 'World')\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Find if there exists two distinct indices i and j in the list such that nums[i] == nums[j] and abs(i - j) <= k.\n    \"\"\"\n    num_set = set()\n    for i, num in enumerate(nums):\n        if num in num_set and i - nums.index(num) <= k:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 1, 4, 5], k=3):\n    return nums\n\nassert f(g(), 3)\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"\n    Check if the given number is present in the list.\n    \"\"\"\n    return n in lst\n\ndef g():\n    \"\"\"\n    Generate a list of consecutive odd numbers starting from 1.\n    \"\"\"\n    return [2*i+1 for i in range(100)]\n\nassert f(55, g())\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=54321) -> bool:\n    \"\"\"Check if x is divisible by a\"\"\"\n    return x % a == 0\ndef g(a=54321):\n    return a\nassert f(g())\n",
        "idx_generation": 104,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if three numbers in the given list add up to the target number.\"\"\"\n    n = len(nums)\n    if n < 3:\n        return False\n    nums.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=18):\n    random.shuffle(nums)\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a: int, b: int, c: int) -> bool:\n    \"\"\"Check if the equation n * a + b == (the product of the first c integers) is valid.\"\"\"\n    prod = 1\n    for i in range(1, c+1):\n        prod *= i\n    return n * a + b == prod\n\ndef g(a: int, b: int, c: int):\n    prod = 1\n    for i in range(1, c+1):\n        prod *= i\n    return (prod - b) / a\n\nassert f(g(2, 5, 4), 2, 5, 4)\n",
        "idx_generation": 212,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of length k such that the sum of its elements is divisible by k\"\"\"\n    prefix_sum = [0]\n    for num in arr:\n        prefix_sum.append(prefix_sum[-1] + num)\n    \n    for i in range(k, len(prefix_sum)):\n        if prefix_sum[i] % k == 0:\n            return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    k = 4\n    return arr, k\n\nassert f(*g())\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Count the number of even elements in a given list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    5\n    \"\"\"\n    even_nums = [num for num in nums if num % 2 == 0]\n    return len(even_nums)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 5\n\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target: str) -> bool:\n    \"\"\"\n    Given a list of words, check if the target word exists in the list.\n    Return True if the target word is found, False otherwise.\n    \"\"\"\n    return target in words\n\ndef g(words=[\"apple\", \"banana\", \"cherry\"], target=\"banana\"):\n    return words, target\n\nassert f(*g())\n",
        "idx_generation": 144,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 143,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_value=0) -> bool:\n    \"\"\"Check if the target_value exists in the matrix.\"\"\"\n    for row in matrix:\n        if target_value in row:\n            return True\n    return False\n\ndef g(target_value=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [0, 7, 8]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Check if a given number n is a prime number and its reverse is also a prime number.\n    \"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def reverse_num(num):\n        return int(str(num)[::-1])\n    \n    return is_prime(n) and is_prime(reverse_num(n))\n\ndef g():\n    return 17, 0\n\nassert f(*g())\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target_sum=50) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine if there exists a path from the top-left cell to the bottom-right cell\n    where the sum of the numbers along the path is less than a given threshold.\n    Return True if a path exists, False otherwise.\n    \"\"\"\n    def dfs(matrix, i, j, threshold):\n        if i == len(matrix) - 1 and j == len(matrix[0]) - 1:\n            return matrix[i][j] < threshold\n        if i < len(matrix) - 1 and dfs(matrix, i + 1, j, threshold - matrix[i][j]):\n            return True\n        if j < len(matrix[0]) - 1 and dfs(matrix, i, j + 1, threshold - matrix[i][j]):\n            return True\n        return False\n\n    return dfs(matrix, 0, 0, target_sum)\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import numpy as np\nfrom typing import*\nfrom typing import List\n\ndef f(arr: np.ndarray) -> bool:\n    \"\"\"\n    Check if the given 2D numpy array has any duplicate rows.\n\n    Example:\n    arr = np.array([[1, 2, 3], [4, 5, 6], [1, 2, 3]])\n    The array has a duplicate row ([1, 2, 3]).\n    Therefore, the puzzle is solved.\n    \"\"\"\n    unique_rows = np.unique(arr, axis=0)\n    return unique_rows.shape[0] != arr.shape[0]\n\ndef g():\n    arr = np.array([[1, 2, 3], [4, 5, 6], [1, 2, 3]])\n    return arr\n\nassert f(g())\n\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    Return True if the string is a palindrome, False otherwise.\n    \"\"\"\n    reversed_string = string[::-1]\n    return string == reversed_string\n\ndef g():\n    return \"madam\"\n\nassert f(g())\n",
        "idx_generation": 148,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import *\ndef f(nums: List[int], target=10, max_nums=3, options=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose total sum is equal to the target value.\"\"\"\n    for n in nums:\n        assert n in options\n    return len(nums) <= max_nums and sum(nums) == target\n\ndef g(target=10, max_nums=3, options=[1, 2, 3, 4, 5]):\n    from itertools import combinations_with_replacement\n    for n in range(max_nums + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\n\nassert f(g())\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(length: int, k=3, seq=[-17, 55, 6, -2, -14, -19, 86, -4, -8, -49, 40, 82]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is maximal\"\"\"\n    return 0 <= length <= len(seq) - k and sum(seq[length:length + k]) >= 0\ndef g(k = 3, seq = [-17, 55, 6, -2, -14, -19, 86, -4, -8, -49, 40, 82]):\n    return max(range(len(seq) - k + 1), key=lambda length: sum(seq[length:length + k]))\nassert f(g())\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains duplicate elements.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(arr) != len(set(arr))\n\ndef g():\n    arr = [1, 2, 3, 4, 3, 2, 1]\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Check if s1 and s2 are anagrams of each other.\n\n    Sample Input:\n    `s1 = \"listen\", s2 = \"silent\"`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    def get_char_count(s):\n        char_count = {}\n        for char in s:\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n        return char_count\n\n    char_count_s1 = get_char_count(s1)\n    char_count_s2 = get_char_count(s2)\n\n    return char_count_s1 == char_count_s2\n\ndef g(s1: str, s2: str):\n    return [s1, s2]\n\nassert f(*g(\"listen\", \"silent\"))\n",
        "idx_generation": 254,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub_str='abcde', index=3) -> bool:\n    \"\"\"Check if the sub_str is present in s starting from the given index and has a length less than or equal to 5\"\"\"\n    return sub_str in s[index:] and len(sub_str) <= 5\n\ndef g(sub_str='abcde', index=3):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\n\nassert f(g())\n",
        "idx_generation": 368,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='world') -> bool:\n    \"\"\"Check if a substring is present in a given string\"\"\"\n    return substring in s\n\ndef g(substring='world'):\n    return \"hello world\"\n\nassert f(g())\n",
        "idx_generation": 106,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(s: str, k: int) -> List[str]:\n    \"\"\"\n    Split the given string into substrings of length k.\n\n    Example:\n    s = \"abcdefghij\"\n    k = 3\n\n    The output should be:\n    [\"abc\", \"def\", \"ghi\", \"j\"]\n    \"\"\"\n    return [s[i:i+k] for i in range(0, len(s), k)]\n\ndef g():\n    return (\"abcdefghij\", 3)\n\nassert f(*g()) == [\"abc\", \"def\", \"ghi\", \"j\"]\n\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return n >= 0 and int(n ** 0.5) ** 2 == n\n\ndef g():\n    return 16\n\nassert f(g())\n",
        "idx_generation": 187,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"madam\"\n\nassert f(g())\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(s: str, target='abc') -> bool:\n    \"\"\"Determine if the string s can be rearranged to form the target string.\"\"\"\n    perms = [''.join(p) for p in permutations(s)]\n    return target in perms\n\ndef g(target='abc'):\n    return ''.join(sorted(target, reverse=True))\n\nassert f(g())\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=15, upper_bound=100) -> bool:\n    \"\"\"Find the smallest number divisible by both a and b.\"\"\"\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 10, b = 15, upper_bound = 100):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g())\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(stamps: List[int], target=100, max_stamps=3, options=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) -> bool:\n    \"\"\"Find a selection of at most max_stamps stamps whose total worth is greater than or equal to the target value.\"\"\"\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) >= target\n\ndef g(target = 100, max_stamps = 3, options = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    from itertools import combinations\n    for n in range(1, max_stamps + 1):\n        for c in combinations(options, n):\n            if sum(c) >= target:\n                return list(c)\n    return []\n\nassert f(g())\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=0) -> bool:\n    \"\"\"Check if the given list contains at least k consecutive numbers in increasing order\"\"\"\n    return any(nums[i:i+k] == list(range(nums[i], nums[i]+k)) for i in range(len(nums)-k+1))\ndef g(nums=[1, 2, 3, 4, 5], k=0):\n    return nums\nassert f(g())\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a square matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 97,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n: int) -> bool:\n    \"\"\"\n    Check if a given number is present in a list.\n    \"\"\"\n    return n in lst\n\ndef g(lst = [1, 2, 3, 4, 5], n = 3):\n    return (lst, n)\n\nassert f(*g())\n\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a perfect square.\"\"\"\n    return n**0.5 == int(n**0.5)\n\ndef g():\n    return 16\n\nassert f(g())\n\n",
        "idx_generation": 321,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n\n    Sample Input:\n    s = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g()) == True\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(z: float, v: int = 3, d: float = 1e-17) -> bool:\n    \"\"\"Check if a specific digit is present at the end of the decimal part of a float number.\"\"\"\n    return int(z * 1 / d % 10) == v\n\ndef g(v: int = 3, d: float = 1e-17):\n    return v * d\n\nassert f(g())\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence in the given list that sums up to the target.\"\"\"\n    return any(sum(combination) == target for r in range(1, len(nums) + 1) for combination in itertools.combinations(nums, r))\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 5, 6, 7, 8]\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(d: Dict[str, int], key: str) -> bool:\n    \"\"\"\n    Given a dictionary and a key, determine if the key exists in the dictionary and its corresponding\n    value is a prime number.\n    \"\"\"\n    if key in d and is_prime(d[key]):\n        return True\n    return False\n\ndef g():\n    return {\"apple\": 5, \"banana\": 11, \"cherry\": 7}, \"banana\"\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Check if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nassert f(*g())\n",
        "idx_generation": 281,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    A symmetric matrix is a square matrix that is equal to its transpose.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 116,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the longest increasing subsequence (LIS).\n\n    A subsequence is a sequence that can be derived from an array by deleting some or no elements\n    without changing the order of the remaining elements.\n\n    Example:\n    Input: [10, 9, 2, 5, 3, 7, 101, 18]\n    Output: 4\n    Explanation: The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4.\n    \"\"\"\n    n = len(nums)\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\ndef g():\n    return [10, 9, 2, 5, 3, 7, 101, 18]\n\nassert f(g()) == 4\n\n",
        "idx_generation": 275,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(d: int, n=123456789) -> bool:\n    \"\"\"\n    Find a number bigger than n whose decimal representation has k 4's and 7's where k's decimal representation\n    consists only of 4's and 7's\n    \"\"\"\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 123456789):\n    return int(\"7777\" + \"0\" * (len(str(n)) - 3))\nassert f(g())\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, rotate it 90 degrees clockwise and return the rotated matrix.\n    \"\"\"\n    n = len(matrix)\n    rotated = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            rotated[j][n-i-1] = matrix[i][j]\n    return rotated\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=22) -> bool:\n    \"\"\"Find a sublist that adds up to a target number\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)+1):\n            sublist = numbers[i:j]\n            if sum(sublist) == target:\n                return True\n    return False\ndef g(numbers=[4, 7, 11, 5, 9, 2, 6, 3, 8]):\n    return numbers\nassert f(g())\n",
        "idx_generation": 31,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the given list that contains exactly k even numbers.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num % 2 == 0:\n            count += 1\n            if count == k:\n                return True\n    return False\n\ndef g(k=3):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums, k\n\nassert f(*g())\n",
        "idx_generation": 190,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=5, length=20) -> bool:\n    \"\"\"Check if a given string has a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'abc', count = 5, length = 20):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '$'\nassert f(g())\n",
        "idx_generation": 285,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Check if s1 is a substring of s2.\n\n    Sample Input:\n    s1 = \"bat\"\n    s2 = \"abate\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s1 in s2\n\ndef g():\n    return (\"bat\", \"abate\")\n\nassert f(*g())\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, determine if there are three numbers in the list that add up to\n    the target integer.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 70,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    Return True if it is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in range(n):\n        column_sum = sum(matrix[i][col] for i in range(n))\n        if column_sum != target_sum:\n            return False\n    \n    # Check diagonal 1\n    diagonal_1_sum = sum(matrix[i][i] for i in range(n))\n    if diagonal_1_sum != target_sum:\n        return False\n    \n    # Check diagonal 2\n    diagonal_2_sum = sum(matrix[i][n-i-1] for i in range(n))\n    if diagonal_2_sum != target_sum:\n        return False\n    \n    return True\n\ndef g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g())\n\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_length: int = 5) -> bool:\n    \"\"\"\n    Given a list of words and a target length, check if there is a word in the list\n    that has the exact target length.\n    Returns True if such a word exists, False otherwise.\n    \"\"\"\n    for word in words:\n        if len(word) == target_length:\n            return True\n    return False\n\ndef g(target_length: int = 5):\n    return ['apple', 'banana', 'cherry', 'date', 'eggplant']\n\nassert f(g())\n",
        "idx_generation": 154,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[str]) -> bool:\n    \"\"\"\n    Check if the given list of strings contains any palindrome strings.\n\n    A palindrome string is one that reads the same forwards and backwards.\n\n    Example:\n    arr = [\"hello\", \"world\", \"level\", \"racecar\"]\n    Output: True\n\n    arr = [\"python\", \"programming\", \"puzzle\"]\n    Output: False\n    \"\"\"\n    return any(word == word[::-1] for word in arr)\n\ndef g():\n    return [\"hello\", \"world\", \"level\", \"racecar\"]\n\nassert f(g()) == True\n",
        "idx_generation": 497,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], target: str) -> bool:\n    \"\"\"\n    Check if any string in the list is an anagram of the target string.\n    \"\"\"\n    sorted_target = sorted(target)\n    for string in strings:\n        if sorted(string) == sorted_target:\n            return True\n    return False\n\ndef g():\n    return [\"listen\", \"silent\", \"elbow\", \"below\", \"state\"]\n\nassert f(g(), \"silent\")\n",
        "idx_generation": 455,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the sum of the elements in the diagonal of a given matrix.\n    \"\"\"\n    n = len(matrix)\n    diagonal_sum = 0\n    \n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n    \n    return diagonal_sum\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 15\n",
        "idx_generation": 248,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a pangram\"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for char in alphabet:\n        if char not in s.lower():\n            return False\n    return True\n\ndef g():\n    return \"The quick brown fox jumps over the lazy dog\"\n\nassert f(g())\n",
        "idx_generation": 219,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str]) -> int:\n    \"\"\"\n    Count the number of words in a given list that have more than 5 characters.\n\n    Sample Input:\n    words = ['apple', 'banana', 'carrot', 'date', 'eggplant', 'fig']\n\n    Sample Output:\n    3\n    \"\"\"\n    long_words = [word for word in words if len(word) > 5]\n    return len(long_words)\n\ndef g():\n    return ['apple', 'banana', 'carrot', 'date', 'eggplant', 'fig']\n\nassert f(g()) == 3\n\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is a palindrome ignoring spaces and case sensitivity.\n    Return True if it is, and False otherwise.\n\n    Sample Input:\n    s = \"A man a plan a canal Panama\"\n\n    Sample Output:\n    True\n    \"\"\"\n    s = \"\".join(s.split()).lower()\n    return s == s[::-1]\n\ndef g(s: str = \"A man a plan a canal Panama\"):\n    return s\n\nassert f(g())\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains any duplicate elements.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\n\nassert f(g())\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, return a new matrix with all rows and columns reversed.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    The reversed matrix is:\n    [[9, 8, 7], [6, 5, 4], [3, 2, 1]]\n    \"\"\"\n    n = len(matrix)\n    reversed_matrix = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            reversed_matrix[i][j] = matrix[n-1-i][n-1-j]\n    return reversed_matrix\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[9, 8, 7], [6, 5, 4], [3, 2, 1]]\n\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any duplicate elements.\n    Return True if it does, False otherwise.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    \"\"\"\n    Generate a list of 100 random integers between 1 and 100.\n    \"\"\"\n    return [random.randint(1, 100) for _ in range(100)]\n\nassert f(g()) == True\n",
        "idx_generation": 167,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a given string is a valid URL.\n    \"\"\"\n    pattern = r'^(https?|ftp)://[^\\s/$.?#].[^\\s]*$'\n    return re.match(pattern, s) is not None\n\ndef g():\n    return \"https://www.example.com\"\n\nassert f(g())\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[str], substring: str) -> List[int]:\n    \"\"\"\n    Given a list of strings and a target substring, find the indices of all strings\n    in the list that contain the target substring and return them as a new list.\n    \n    Sample Input:\n    arr = ['apple', 'banana', 'cherry', 'grape', 'orange']\n    substring = 'an'\n    \n    Sample Output:\n    [1, 4]\n    \"\"\"\n    indices = []\n    for i, s in enumerate(arr):\n        if substring in s:\n            indices.append(i)\n    return indices\n\ndef g():\n    return ['apple', 'banana', 'cherry', 'grape', 'orange'], 'an'\n\nassert f(*g()) == [1, 4]\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=2, target='ab') -> bool:\n    \"\"\"Check if there are n occurrences of a target substring in a given string\"\"\"\n    count = 0\n    for i in range(len(s)-len(target)+1):\n        if s[i:i+len(target)] == target:\n            count += 1\n    return count == n\n\ndef g(n=2, target='ab'):\n    return 'ab' * n\n\nassert f(g())\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=7, b=10, c=5) -> bool:\n    \"\"\"Find n such that n * a == b * (the sum of the first c integers)\"\"\"\n    return n * a == sum([b * i for i in range(c)])\ndef g(a=7, b=10, c=5):\n    return (sum([b * i for i in range(c)]) / a)\nassert f(g())\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g())\n\n",
        "idx_generation": 292,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains only even numbers.\n    Return True if all numbers are even, False otherwise.\n    \"\"\"\n    for num in lst:\n        if num % 2 != 0:\n            return False\n    return True\n\ndef g():\n    \"\"\"\n    Generate a list of 10 random even numbers between 1 and 100.\n    \"\"\"\n    import random\n    return [random.randrange(2, 101, 2) for _ in range(10)]\n\nassert f(g())\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transpose a given matrix (2D list).\n    \"\"\"\n    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_diff=4) -> bool:\n    \"\"\"Find a pair of numbers in the list that has an absolute difference of target_diff.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) == target_diff:\n                return True\n    return False\ndef g(target_diff = 4):\n    nums = [3, 7, 11, 15, 19]\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) == target_diff:\n                return [nums[i], nums[j]]\n    return []\nassert f(g())\n",
        "idx_generation": 26,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='pythoniscool', reverse=True) -> bool:\n    \"\"\"\n    Reverse a string and check if it matches the target string,\n    based on the value of the reverse flag.\n    Returns True if the condition is satisfied, False otherwise.\n    \"\"\"\n    return (s[::-1] == target) == reverse\n\ndef g(target='pythoniscool', reverse=True):\n    return target[::-1] if reverse else target + \"x\"\n\nassert f(g())\n",
        "idx_generation": 226,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=66, b=-39109407, c=42) -> bool:\n    \"\"\"Check if the sum of x, a, and b is equal to c.\"\"\"\n    return x + a + b == c\n\ndef g(a = 66, b = -39109407, c = 42):\n    return c - a - b\n\nassert f(g())\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int) -> bool:\n    \"\"\"\n    Check if a number is a prime number.\n    Return True if it is, and False otherwise.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(num: int = 17):\n    return num\n\nassert f(g())\n",
        "idx_generation": 177,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(num_list: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list such that their sum is equal to the target number.\n    Returns True if such a pair exists, False otherwise.\n    \"\"\"\n    for i in range(len(num_list)):\n        for j in range(len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False\n\ndef g(num_list=[1, 2, 3, 4, 5], target=7):\n    return num_list, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(d: Dict[str, int], key: str) -> bool:\n    \"\"\"\n    Given a dictionary and a key, determine if the key exists in the dictionary and its corresponding\n    value is greater than 0.\n    \"\"\"\n    if key in d and d[key] > 0:\n        return True\n    return False\n\ndef g():\n    return {\"apple\": 5, \"banana\": 3, \"cherry\": 0}, \"banana\"\n\nassert f(*g())\n",
        "idx_generation": 166,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr: str) -> bool:\n    \"\"\"\n    Check if a string contains a given substring.\n\n    Args:\n    - s: The string to be checked.\n    - substr: The substring to be searched for.\n    \"\"\"\n    return substr in s\n\ndef g():\n    return \"Hello, World!\"\n\nassert f(g(), substr=\"World\")\n",
        "idx_generation": 295,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a square matrix.\n    Return True if it is a square matrix, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    for row in matrix:\n        if len(row) != rows:\n            return False\n    return True\n\ndef g():\n    \"\"\"\n    Generate a 3x3 matrix with random numbers.\n    \"\"\"\n    import random\n    return [[random.randint(1, 10) for _ in range(3)] for _ in range(3)]\n\nassert f(g())\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order\"\"\"\n    for i in range(len(nums) - 1):\n        if nums[i] > nums[i + 1]:\n            return False\n    return True\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"\n    Check if there exists a sublist in the given list such that the product of its elements is divisible by k.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            sublist = arr[i:j]\n            product = 1\n            for num in sublist:\n                product *= num\n            if product % k == 0:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"\n    Check if there exists a substring in the given string that contains exactly k different vowels.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    n = len(s)\n    for i in range(n):\n        for j in range(i+k, n+1):\n            if len([x for x in set(s[i:j]) if x in vowels]) == k:\n                return True\n    return False\n\ndef g(s='programming'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(lst: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer k, \n    return True if there exists two distinct indices i and j in the list such that lst[i] + lst[j] = k, \n    and False otherwise.\n\n    Sample Input:\n    lst = [1, 2, 3, 4, 5]\n    k = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in lst:\n        if k - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 7)\n\nassert f(*g())\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s=\"racecar\"):\n    return s\n\nassert f(g()) == True\n",
        "idx_generation": 198,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int]) -> bool:\n    \"\"\"Check if the given sequence is sorted in ascending order.\"\"\"\n    return all(seq[i] <= seq[i+1] for i in range(len(seq)-1))\n\ndef g(seq = [1, 2, 3, 4, 5]):\n    \"\"\"Return the sequence.\"\"\"\n    return seq\n\nassert f(g())\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n\n    Sample Input:\n    s = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    s = \"racecar\"\n    return s\n\nassert f(g()) == True\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there is a subarray in the list where the sum of its elements is divisible by k.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)+1):\n            if sum(numbers[i:j]) % k == 0:\n                return True\n    return False\n\ndef g(numbers=[1, 2, 3, 4, 5], k=4):\n    return numbers\n\nassert f(g(), 4)\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string_list: List[str], substr: str) -> bool:\n    \"\"\"\n    Check if any of the strings in the given list end with the given substring.\n    Returns True if a string ends with the substring, False otherwise.\n    \"\"\"\n    for string in string_list:\n        if string.endswith(substr):\n            return True\n    return False\n\ndef g(string_list=['apple', 'banana', 'cherry'], substr='ry'):\n    return string_list, substr\n\nassert f(*g()) == True\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nimport datetime\nfrom typing import*\n\ndef f(date: str, days: int) -> bool:\n    \"\"\"\n    Check if a given date is within a certain number of days from today.\n    Return True if the date is within the specified number of days, False otherwise.\n    \"\"\"\n    def get_date_diff(date):\n        date_obj = datetime.datetime.strptime(date, \"%Y-%m-%d\")\n        today = datetime.datetime.now()\n        diff = (date_obj - today).days\n        return diff\n    \n    diff = get_date_diff(date)\n    \n    return diff <= days\n\ndef g(days: int) -> str:\n    \"\"\"\n    Generate a random date within the next 365 days.\n    \"\"\"\n    today = datetime.datetime.now()\n    future_date = today + datetime.timedelta(days=days)\n    return future_date.strftime(\"%Y-%m-%d\")\n\nassert f(g(30), 30)\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, find three distinct elements in the list that sum up to the target.\n    Return True if such elements exist, False otherwise.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            for k in range(j + 1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == target:\n                    return True\n    return False\n\ndef g(lst=[1, 2, 3, 4, 5], target=9):\n    return lst, target\n\nassert f(*g())\n",
        "idx_generation": 136,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Check if there exist three numbers in the list that sum to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            for k in range(j+1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), 9)\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(string: str, substring: str) -> bool:\n    \"\"\"\n    Check if a given string starts with a specific substring.\n    \"\"\"\n    return string.startswith(substring)\n\ndef g(string = \"Hello, world!\", substring = \"Hello\"):\n    return string\n\nassert f(g(), \"Hello\")\n",
        "idx_generation": 495,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains all even numbers.\"\"\"\n    for num in nums:\n        if num % 2 != 0:\n            return False\n    return True\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix of integers, check if the matrix is symmetric.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str = 'python', case_sensitive: bool = False) -> str:\n    \"\"\"\n    Replace all occurrences of the target string in the given string with '***'.\n    The replacement can be case-sensitive or case-insensitive based on the value of case_sensitive.\n    \"\"\"\n    if case_sensitive:\n        return s.replace(target, '***')\n    else:\n        return s.lower().replace(target.lower(), '***')\n\ndef g(target: str = 'python', case_sensitive: bool = False):\n    s = \"Python programming is fun with Python\"\n    return s\n\nassert f(g()) == \"*** programming is fun with ***\"\n",
        "idx_generation": 409,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a number is a prime number.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 332,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str], length: int) -> bool:\n    \"\"\"\n    Check if there exists a string in the list that has length equal to the given value.\n    Return True if such a string exists, False otherwise.\n    \"\"\"\n    for string in strings:\n        if len(string) == length:\n            return True\n    return False\n\ndef g(length=5):\n    strings = [\"Hello\", \"World\", \"Python\"]\n    return strings, length\n\nassert f(*g())\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], pattern: str) -> bool:\n    \"\"\"Check if there exists a word in the list words that matches the pattern.\"\"\"\n    for word in words:\n        if len(word) == len(pattern) and all(c1 == c2 or c2 == '.' for c1, c2 in zip(word, pattern)):\n            return True\n    return False\n\ndef g(words=[\"cat\", \"dog\", \"bat\", \"rat\"], pattern=\"c.t\"):\n    return words, pattern\n\nassert f(*g())\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, lst: List[int]) -> List[int]:\n    \"\"\"Return a list of numbers that are divisible by n\"\"\"\n    return [num for num in lst if num % n == 0]\n\ndef g(lst: List[int]):\n    return lst\n\nassert f(3, g([1, 2, 3, 4, 5, 6, 7, 8, 9])) == [3, 6, 9]\n",
        "idx_generation": 103,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a given string is an anagram of a palindrome\"\"\"\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    odd_count = 0\n    for count in char_count.values():\n        if count % 2 != 0:\n            odd_count += 1\n\n    return odd_count <= 1\n\ndef g():\n    return \"abbccdd\"\n\nassert f(g())\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the sum of the squares of all even numbers in the given list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5, 6]\n\n    Sample Output:\n    56\n    \"\"\"\n    return sum([x**2 for x in nums if x%2 == 0])\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g()) == 56\n",
        "idx_generation": 403,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='kehorithxyfurexatextoxivuquunusethawatextebu', b='pxyfurexatextoxivuquuwynicixo', length=15) -> bool:\n    \"\"\"Find a string of length length that is in both strings a and b and has a length greater than or equal to 10\"\"\"\n    return len(s) == length and s in a and (s in b) and len(s) >= 10\ndef g(a = 'kehorithxyfurexatextoxivuquunusethawatextebu', b = 'pxyfurexatextoxivuquuwynicixo', length = 15):\n    for i in range(len(a) - length + 1):\n        if len(a[i:i + length]) >= 10 and a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g())\n",
        "idx_generation": 368,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    \"\"\"\n    Check if the list contains words that are palindromes.\n    \"\"\"\n    def is_palindrome(word):\n        return word == word[::-1]\n\n    return any(is_palindrome(word) for word in words)\n\ndef g():\n    return [\"hello\", \"world\", \"level\", \"madam\", \"python\"]\n\nassert f(g())\n",
        "idx_generation": 120,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, seq=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if the sum of any two numbers in the sequence is equal to n.\"\"\"\n    for i in range(len(seq)):\n        for j in range(i+1, len(seq)):\n            if seq[i] + seq[j] == n:\n                return True\n    return False\n\ndef g(n=7, seq=[1, 2, 3, 4, 5, 6]):\n    return n\n\nassert f(g())\n",
        "idx_generation": 474,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a power of two.\"\"\"\n    if n <= 0:\n        return False\n    while n % 2 == 0:\n        n //= 2\n    return n == 1\n\ndef g():\n    return 16\n\nassert f(g())\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if the given string contains the target string as a substring.\"\"\"\n    return target in s\n\ndef g():\n    return \"Hello, World!\", \"World\"\n\nassert f(*g())\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[str], substring: str) -> bool:\n    \"\"\"\n    Given a list of strings and a target substring, check if all strings in the list\n    contain the target substring.\n    \n    Sample Input:\n    arr = ['apple', 'banana', 'cherry', 'grape', 'orange']\n    substring = 'an'\n    \n    Sample Output:\n    False\n    \"\"\"\n    for s in arr:\n        if substring not in s:\n            return False\n    return True\n\ndef g():\n    return ['apple', 'banana', 'cherry', 'grape', 'orange'], 'an'\n\nassert f(*g()) == False\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Find if there exists a pair of numbers in the list such that their difference is k.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if num + k in num_set:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], k=2):\n    return nums\n\nassert f(g(), 2)\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains a subsequence that forms an arithmetic progression.\n    Returns True if such subsequence exists, False otherwise.\n    \"\"\"\n    arr.sort()\n    for i in range(len(arr) - 2):\n        if arr[i+1] - arr[i] == arr[i+2] - arr[i+1]:\n            return True\n    return False\n\ndef g():\n    return [1, 3, 5, 7, 9]\n\nassert f(g())\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, a=10, b=100) -> bool:\n    \"\"\"Check if a number is within a given range\"\"\"\n    return a <= n <= b\n\ndef g(a=10, b=100):\n    return random.randint(a, b)\n\nassert f(g())\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"\n    Given a list of numbers, check if there exists a pair of numbers that add up to a specific value.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a perfect square.\n    A perfect square is a number that can be expressed as the product of two equal integers.\n    \"\"\"\n    if n < 0:\n        return False\n    sqrt = int(n**0.5)\n    return sqrt * sqrt == n\n\ndef g(n=16):\n    return n\n\nassert f(g())\n",
        "idx_generation": 261,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of length k such that the product of its elements is divisible by k\"\"\"\n    prefix_product = [1]\n    for num in arr:\n        prefix_product.append(prefix_product[-1] * num)\n    \n    for i in range(k, len(prefix_product)):\n        if prefix_product[i] % k == 0:\n            return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    k = 4\n    return arr, k\n\nassert f(*g())\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisor=7) -> bool:\n    \"\"\"Check if n is divisible by the given divisor.\"\"\"\n    return n % divisor == 0\n\ndef g(divisor=7):\n    return 42\n\nassert f(g())\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given an array of integers nums and an integer k, return the k most frequent elements.\n    You may return the answer in any order.\n    \"\"\"\n    freq_map = {}\n    for num in nums:\n        freq_map[num] = freq_map.get(num, 0) + 1\n    sorted_nums = sorted(freq_map, key=lambda x: freq_map[x], reverse=True)\n    return sorted_nums[:k]\n\ndef g():\n    nums = [1, 1, 1, 2, 2, 3]\n    k = 2\n    return nums, k\n\nassert f(*g()) == [1, 2]\n",
        "idx_generation": 260,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g(s = 'racecar'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 149,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 149,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Find if the target number exists in the given matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5):\n    return matrix\n\nassert f(g(), 5)\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Check if a given number n is a prime number and its reverse is also a prime number.\n    \"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def reverse_num(num):\n        return int(str(num)[::-1])\n    \n    return is_prime(n) and is_prime(reverse_num(n))\n\ndef g():\n    return 37, 0\n\nassert f(*g())\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect cube\"\"\"\n    return n >= 0 and int(n ** (1/3)) ** 3 == n\n\ndef g():\n    return 27\n\nassert f(g())\n",
        "idx_generation": 190,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, nums=[1, 3, 5, 7, 9], upper_bound=10) -> bool:\n    \"\"\"\n    Check if the given string is a valid abbreviation of any number in the list.\n    \"\"\"\n    if len(s) <= upper_bound:\n        return str(nums[0]) == s\n    return int(s[1:-1]) == len(s[1:-1]) and str(nums[0])[0] == s[0] and (str(nums[0])[-1] == s[-1])\n\ndef g(nums=[1, 3, 5, 7, 9], upper_bound=10):\n    if len(str(nums[0])) <= upper_bound:\n        return str(nums[0])\n    return f\"{str(nums[0])[0]}{len(str(nums[0])) - 2}{str(nums[0])[-1]}\"\n\nassert f(g())\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import *\ndef f(nums: List[int], target=10, max_nums=3, options=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose total sum is equal to the target value.\"\"\"\n    for n in nums:\n        assert n in options\n    return len(nums) <= max_nums and sum(nums) == target\n\ndef g(target=10, max_nums=3, options=[1, 2, 3, 4, 5]):\n    from itertools import combinations\n    for n in range(max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\n\nassert f(g())\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=3, lower=100, seq=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is greater than or equal to lower.\"\"\"\n    return sum(seq[start:start+k]) >= lower\n\ndef g(k=3, lower=100, seq=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    indices = range(len(seq) - k + 1)\n    return max(indices, key=lambda start: sum(seq[start:start+k]))\n\nassert f(g())\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a list of all the unique elements in the list.\n    \"\"\"\n    unique_lst = []\n    for num in lst:\n        if num not in unique_lst:\n            unique_lst.append(num)\n    return unique_lst\n\ndef g():\n    return [1, 2, 2, 3, 4, 4, 5, 5]\n\n# Test case\nassert f(g()) == [1, 2, 3, 4, 5]\n\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char: str) -> int:\n    \"\"\"Count the number of occurrences of a specific character in the given string.\"\"\"\n    return s.count(char)\n\ndef g(s: str = \"hello world\", char: str = \"l\"):\n    return s, char\n\nassert f(*g()) == 3\n",
        "idx_generation": 285,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub_str='abcde', index=3) -> bool:\n    \"\"\"Check if the sub_str is present in s starting from the given index and has a length less than or equal to 5\"\"\"\n    return s[index:].startswith(sub_str) and len(sub_str) <= 5\n\ndef g(sub_str='abcde', index=3):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\n\nassert f(g())\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, start='a', end='z') -> bool:\n    \"\"\"Check if the given string starts with the provided start character and ends with the provided end character\"\"\"\n    return s.startswith(start) and s.endswith(end)\n\ndef g(start='a', end='z'):\n    return start + 'bcd' + end\n\nassert f(g())\n",
        "idx_generation": 116,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k: int) -> bool:\n    \"\"\"\n    Given a string s and an integer k, check if it is possible to rearrange the characters of s such that no two adjacent characters are the same, and the resulting string has exactly k unique characters.\n\n    Sample Input:\n    s = \"aabbc\"\n    k = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    if k <= 1:\n        return False\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return len(char_count) == k\n\ndef g(s: str, k: int):\n    return s + \"a\" * (k-1)\n\nassert f(g(\"aabbc\", 3), 3)\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: float, a=9876543210) -> bool:\n    \"\"\"Find a positive number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** (-3) and x > 0\ndef g(a = 9876543210):\n    return a ** 0.5\nassert f(g())\n",
        "idx_generation": 370,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a number is a power of 2.\n    \"\"\"\n    return n & (n - 1) == 0\n\ndef g():\n    return 16\n\nassert f(g())\n\n",
        "idx_generation": 192,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    Find the first n words in the list that are palindromes and return them in a new list.\n    \"\"\"\n    palindromes = []\n    for word in words:\n        if word == word[::-1]:\n            palindromes.append(word)\n            if len(palindromes) == n:\n                return palindromes\n    return []\n\ndef g(words = [\"level\", \"racecar\", \"python\", \"madam\", \"hello\"], n = 3):\n    return words\n\nassert f(g(), 3) == [\"level\", \"racecar\", \"madam\"]\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\n\ndef f(s: str, target='abc') -> bool:\n    \"\"\"\n    Check if the string s can be rearranged to form the target string,\n    considering only the first occurrence of each character in s.\n    \"\"\"\n    unique_chars = set(s)\n    perms = [''.join(p) for p in itertools.permutations(unique_chars)]\n    return target in perms\n\ndef g(target='abc'):\n    return ''.join(sorted(target, reverse=True))\n\nassert f(g())\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=100, b=200, upper_bound=1000) -> bool:\n    \"\"\"Find the smallest number that is a multiple of both a and b.\"\"\"\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 100, b = 200, upper_bound = 1000):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g())\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], a=1000, b=2000, count=50) -> bool:\n    \"\"\"Find a list of count or more different numbers each between a and b that each have no repeated digits\"\"\"\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 1000, b = 2000, count = 50):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n))) and sum(int(d) for d in str(n)) % 2 == 0]\nassert f(g())\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\nfrom typing import List\n\ndef f(x: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains a perfect square number.\n    \"\"\"\n    def is_perfect_square(n):\n        root = int(math.sqrt(n))\n        return root * root == n\n\n    return any(is_perfect_square(num) for num in x)\n\ndef g():\n    return [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\nassert f(g())\n",
        "idx_generation": 120,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n: int) -> bool:\n    \"\"\"\n    Check if a given number is present in a list.\n    \"\"\"\n    return lst.count(n) > 0\n\ndef g(lst = [1, 2, 3, 4, 5], n = 3):\n    return (lst, n)\n\nassert f(*g())\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=1234567890) -> bool:\n    \"\"\"Check if the sum of x and a is a prime number.\"\"\"\n    sum_num = x + a\n    if sum_num < 2:\n        return False\n    for i in range(2, int(sum_num ** 0.5) + 1):\n        if sum_num % i == 0:\n            return False\n    return True\n\ndef g(a = 1234567890):\n    return 2 - a\n\nassert f(g())\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if the sum of three numbers is equal to a certain value.\n    \"\"\"\n    return x + y + z == 10\ndef g(x: int, y: int):\n    z = 10 - (x + y)\n    return z\nassert f(g(2, 3), 2, 3)\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the list such that the difference between any two elements is equal to a given target.\n    Returns True if such a subsequence exists, False otherwise.\n    \"\"\"\n    n = len(nums)\n    diff_set = set()\n    target = 5\n\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(nums[i] - nums[j])\n            if diff == target:\n                return True\n            diff_set.add(diff)\n\n    return False\n\ndef g(nums=[1, 3, 6, 9, 12]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is a valid phone number.\n    \"\"\"\n\n    pattern = r'^\\+(?:[0-9] ?){6,14}[0-9]$'\n    return re.match(pattern, s) is not None\n\ndef g():\n    return \"+1234567890\"\n\nassert f(g())\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine if it is a square matrix. A matrix is considered square if\n    the number of rows is equal to the number of columns.\n    Return True if the matrix is square, otherwise return False.\n    \"\"\"\n    num_rows = len(matrix)\n    num_columns = len(matrix[0])\n\n    for row in matrix:\n        if len(row) != num_columns:\n            return False\n    if num_rows != num_columns:\n        return False\n    return True\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\n# Test case\ntest_matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g(test_matrix))\n",
        "idx_generation": 120,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum subarray sum.\n\n    A subarray is a contiguous part of the array.\n\n    Example:\n    Input: [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n    Output: 6\n    Explanation: The maximum subarray sum is [4, -1, 2, 1], therefore the sum is 6.\n    \"\"\"\n    n = len(nums)\n    if n == 0:\n        return 0\n    max_sum = current_sum = nums[0]\n    for i in range(1, n):\n        current_sum = max(nums[i], current_sum + nums[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n\ndef g():\n    return [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\nassert f(g()) == 6\n\n",
        "idx_generation": 275,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Check if the sum of two given numbers is equal to a third given number.\n    \"\"\"\n    return n + k == 10\n\ndef g(n = 4, k = 6):\n    return (n, k)\n\nassert f(*g())\n\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix represented as a list of lists, rotate the matrix by 90 degrees clockwise and return the rotated matrix.\n    \n    Sample Input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    \n    Sample Output:\n    [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \"\"\"\n    n = len(matrix)\n    for i in range(n // 2):\n        for j in range(i, n - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[n - j - 1][i]\n            matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1]\n            matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1]\n            matrix[j][n - i - 1] = temp\n\n    return matrix\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n\n",
        "idx_generation": 468,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 37,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int]) -> bool:\n    \"\"\"Check if the given sequence is a palindrome.\"\"\"\n    return seq == seq[::-1]\n\ndef g(seq=[1, 2, 3, 2, 1]):\n    \"\"\"Return the sequence.\"\"\"\n    return seq\n\nassert f(g())\n",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=5, length=20) -> bool:\n    \"\"\"Check if a given string has a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'abc', count = 5, length = 20):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '$'\nassert f(g())\n\n",
        "idx_generation": 384,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring: str) -> bool:\n    \"\"\"\n    Given a string and a substring, check if the substring is present in the string.\n    Return True if the substring is found, False otherwise.\n    \"\"\"\n    return substring in string\n\ndef g(string=\"Hello World!\", substring=\"World\"):\n    return string, substring\n\nassert f(*g())\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a pair of numbers in the list that multiply to the target.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] * numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers = [1, 2, 3, 4, 5], target = 10):\n    return numbers\n\nassert f(g(), 10)\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is a square matrix.\n    A matrix is a square matrix if the number of rows is equal to the number of columns.\n    Return True if it is a square matrix, False otherwise.\n    \"\"\"\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n    return num_rows == num_cols\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python', max_len=10) -> bool:\n    \"\"\"\n    Check if a string is a valid abbreviation of a word.\n    \"\"\"\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\n\ndef g(word = 'python', max_len = 10):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\"\n\nassert f(g())\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str]) -> bool:\n    \"\"\"\n    Given a list of strings, check if all the strings start with a capital letter.\n    Return True if all strings start with a capital letter, False otherwise.\n    \"\"\"\n    return all(string[0].isupper() for string in strings)\n\ndef g():\n    return [\"Hello\", \"World\", \"Python\", \"Programming\"]\n\nassert f(g())\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if all elements in a given matrix are positive integers.\n    Returns True if all elements are positive integers, False otherwise.\n    \"\"\"\n    for row in matrix:\n        for num in row:\n            if num <= 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == True\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str) -> bool:\n    \"\"\"\n    Check if a given word is a palindrome.\n    \"\"\"\n    return word == word[::-1]\n\ndef g(word = \"racecar\"):\n    return word\n\nassert f(g())\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\n\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is a palindrome.\n    A palindrome is a string that reads the same forwards and backwards.\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    \"\"\"\n    Generate a random palindrome.\n    \"\"\"\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Remove duplicates from the given list and return a new list with unique elements.\n\n    Sample Input:\n    nums = [1, 2, 2, 3, 4, 4, 5]\n\n    Sample Output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    return list(set(nums))\n\ndef g():\n    return [1, 2, 2, 3, 4, 4, 5]\n\nassert f(g()) == [1, 2, 3, 4, 5]\n",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> List[int]:\n    \"\"\"Return a new list containing only the even numbers from the original list\"\"\"\n    return [num for num in numbers if num % 2 == 0]\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g()) == [2, 4, 6, 8, 10]\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains duplicates.\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 1]\n\nassert f(g())\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, word: str) -> bool:\n    \"\"\"\n    Check if the given word is present in the given sentence.\n    \"\"\"\n    words = sentence.split()\n    return word in words\n\ndef g(sentence = \"The quick brown fox jumps over the lazy dog.\", word = \"fox\"):\n    return sentence, word\n\nassert f(*g())\n",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=991246824, b=123456789) -> bool:\n    \"\"\"Solve an addition problem\"\"\"\n    return a + x == b\ndef g(a = 991246824, b = 123456789):\n    return b - a\nassert f(g())\n",
        "idx_generation": 71,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"\n    Given a string and an integer, check if the string has a length greater than the integer.\n\n    Sample Input:\n    s = \"hello\"\n    n = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(s) > n\n\ndef g(s=\"hello\", n=3):\n    return s, n\n\nassert f(*g())\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a: int, b: int, c: int) -> bool:\n    \"\"\"Check if the equation n * a == b * (the sum of the first c integers) is valid.\"\"\"\n    return n * a == sum([b * i for i in range(1, c+1)])\n\ndef g(a: int, b: int, c: int):\n    return (sum([b * i for i in range(1, c+1)]) / a)\n\nassert f(g(7, 10, 5), 7, 10, 5)\n",
        "idx_generation": 204,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_num=5) -> bool:\n    \"\"\"\n    Check if the target number exists in the list.\n    Return True if the target number is found, False otherwise.\n    \"\"\"\n    return target_num in nums\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any duplicate numbers.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\n\nassert f(g())\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of numbers, return a new list with only the even numbers.\n\n    Example:\n    numbers = [1, 2, 3, 4, 5, 6]\n\n    The new list of even numbers is: [2, 4, 6]\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]\n\ndef g(numbers=[1, 2, 3, 4, 5, 6]):\n    return numbers\n\nassert f(g()) == [2, 4, 6]\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=100) -> bool:\n    \"\"\"Find two integers whose sum is n\"\"\"\n    return len(nums) >= 2 and any([nums[i] + nums[j] == n for i in range(len(nums)) for j in range(i+1, len(nums))])\ndef g(n = 100):\n    nums = [i for i in range(1, n+1)]\n    return nums\nassert f(g())\n",
        "idx_generation": 29,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, reverse: bool=False) -> str:\n    \"\"\"\n    Reverse a string if the 'reverse' flag is True, otherwise return the original string.\n\n    Args:\n    - s: The string to be reversed.\n    - reverse: If True, reverse the string. Default is False.\n    \"\"\"\n    if reverse:\n        return s[::-1]\n    return s\n\ndef g():\n    return \"Hello, World!\"\n\nassert f(g(), reverse=False) == \"Hello, World!\"\n",
        "idx_generation": 295,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(a: int, b: int, c: int, d: int) -> bool:\n    \"\"\"\n    Given four integers a, b, c, and d, determine if they form a valid arithmetic progression.\n    A valid arithmetic progression is a sequence of numbers in which the difference between any two consecutive numbers is the same.\n\n    Example:\n    a = 2\n    b = 4\n    c = 6\n    d = 8\n    Output: True\n    \"\"\"\n    return b - a == c - b == d - c\n\ndef g(a = 2, b = 4, c = 6, d = 8):\n    return a, b, c, d\n\nassert f(*g())\n",
        "idx_generation": 392,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisor=3) -> bool:\n    \"\"\"Check if the sum of the digits of n is divisible by the given divisor.\"\"\"\n    digits_sum = sum(int(digit) for digit in str(n))\n    return digits_sum % divisor == 0\n\ndef g(n=12345, divisor=3):\n    return n\n\nassert f(g())\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the number of occurrences of the target value in the given list.\n\n    Sample Input:\n    nums = [1, 2, 2, 2, 3, 4, 5]\n    target = 2\n\n    Sample Output:\n    3\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num == target:\n            count += 1\n    return count\n\ndef g(nums=[1, 2, 2, 2, 3, 4, 5], target=2):\n    return nums, target\n\nassert f(*g()) == 3\n\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of integers from 1 to n (inclusive) such that their sum is divisible by k.\n    Returns True if such a pair exists, False otherwise.\n    \"\"\"\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            if (i + j) % k == 0:\n                return True\n    return False\n\ndef g(n=10, k=3):\n    return n, k\n\nassert f(*g())\n\n",
        "idx_generation": 262,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr: str = 'hello') -> bool:\n    \"\"\"\n    Check if a given string contains a specific substring in a case-insensitive manner.\n    Returns True if it does, False otherwise.\n    \"\"\"\n    return substr.lower() in s.lower()\n\ndef g(substr: str = 'hello'):\n    return 'Greetings, ' + substr + '!'\n\nassert f(g())\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a square matrix.\n    Return True if it is a square matrix, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for row in matrix:\n        if len(row) != cols:\n            return False\n    return True\n\ndef g():\n    \"\"\"\n    Generate a 3x3 matrix with random numbers.\n    \"\"\"\n    import random\n    return [[random.randint(1, 10) for _ in range(3)] for _ in range(3)]\n\nassert f(g())\n",
        "idx_generation": 282,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome\"\"\"\n    return nums == nums[::-1]\n\ndef g(nums=[1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n\n    Sample Input:\n    `nums = [1, 2, 3, 2, 1]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([1, 2, 3, 2, 1]))\n",
        "idx_generation": 364,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target='aeiou') -> bool:\n    \"\"\"\n    Given a list of words, check if all the characters in each word are vowels.\n\n    Sample Input:\n    `[\"apple\", \"banana\", \"orange\"]`\n\n    Sample Output:\n    `False`\n    \"\"\"\n    return all(all(char in target for char in word) for word in words)\n\ndef g(target='aeiou'):\n    return target\n\nassert f(g())\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer k, \n    return True if there exists three distinct indices i, j, and h in the list such that lst[i] + lst[j] + lst[h] = k, \n    and False otherwise.\n\n    Sample Input:\n    lst = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for i, num in enumerate(lst):\n        for j in range(i+1, len(lst)):\n            if target - num - lst[j] in num_set:\n                return True\n            num_set.add(num)\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 9)\n\nassert f(*g())\n",
        "idx_generation": 331,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a palindrome.\n\n    Sample Input:\n    n = 12321\n\n    Sample Output:\n    True\n    \"\"\"\n    num = str(n)\n    return num == num[::-1]\n\ndef g():\n    n = 12321\n    return n\n\nassert f(g()) == True\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int]) -> bool:\n    \"\"\"Check if the given sequence is sorted in non-decreasing order.\"\"\"\n    return all(seq[i] <= seq[i+1] for i in range(len(seq)-1))\n\ndef g():\n    \"\"\"Return the sequence in non-decreasing order.\"\"\"\n    return sorted([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9])\n\nassert f(g())\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n\n    Sample Input:\n    \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g()) == True\n\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there is a subarray in the list where the sum of its elements is divisible by k.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)+1):\n            if sum(numbers[i:j]) % k == 0:\n                return True\n    return False\n\ndef g(numbers=[10, 20, 30, 40, 50], k=3):\n    return numbers\n\nassert f(g(), 3)\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr_list: List[str]) -> bool:\n    \"\"\"\n    Check if all of the substrings in the given list are present in the string.\n    Returns True if all substrings are found, False otherwise.\n    \"\"\"\n    for substr in substr_list:\n        if substr not in string:\n            return False\n    return True\n\ndef g(string=\"hello world\", substr_list=[\"hello\", \"world\"]):\n    return string, substr_list\n\nassert f(*g()) == True\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nimport datetime\nfrom typing import*\n\ndef f(date: str, days: int, format: str) -> bool:\n    \"\"\"\n    Check if a given date is within a certain number of days from today.\n    Return True if the date is within the specified number of days, False otherwise.\n    \"\"\"\n    def get_date_diff(date, format):\n        date_obj = datetime.datetime.strptime(date, format)\n        today = datetime.datetime.now()\n        diff = (date_obj - today).days\n        return diff\n    \n    diff = get_date_diff(date, format)\n    \n    return diff <= days\n\ndef g(days: int, format: str) -> str:\n    \"\"\"\n    Generate a random date within the next 365 days.\n    \"\"\"\n    today = datetime.datetime.now()\n    future_date = today + datetime.timedelta(days=days)\n    return future_date.strftime(format)\n\nassert f(g(30, \"%Y-%m-%d\"), 30, \"%Y-%m-%d\")\n",
        "idx_generation": 367,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], n=4, s=2021) -> bool:\n    \"\"\"Construct a list of n distinct integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\n\ndef g(n=4, s=2021):\n    \"\"\"\n    Generate a list of n distinct integers that sum up to s\n    \"\"\"\n    x = []\n    for i in range(1, n):\n        x.append(i)\n    x.append(s - sum(x))\n    return x\n\nassert f(g())\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there are three numbers in the list\n    that sum up to the target number.\n    \n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    target = 15\n    \n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9], 15\n\nassert f(*g()) == True\n",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"Return the sum of all positive numbers in the given list.\"\"\"\n    total = 0\n    for num in nums:\n        if num > 0:\n            total += num\n    return total\n\ndef g():\n    return [1, -2, 3, -4, 5]\n\nassert f(g()) == 9\n\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if there exist three consecutive numbers in the given list such that the sum of the first two numbers is equal to the third number.\n    Return True if such a triplet exists, False otherwise.\n    \"\"\"\n    return any(arr[i] + arr[i+1] == arr[i+2] for i in range(len(arr)-2))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a given number is a prime number.\n    \"\"\"\n\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], length: int, starts_with: str) -> bool:\n    \"\"\"\n    Check if there exists a word in the list that has the given length and starts with a specific letter.\n    \"\"\"\n    for word in words:\n        if len(word) == length and word.startswith(starts_with):\n            return True\n    return False\n\ndef g():\n    return [\"apple\", \"banana\", \"cherry\"], 6, \"c\"\n\nassert f(*g())\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    \"\"\"\n    Check if the given string contains all the words from the provided list of words.\n    \"\"\"\n    return all((word in s for word in words))\n\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return ' '.join(words)\n\nassert f(g())\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int]) -> bool:\n    \"\"\"Find a list of three integers whose sum is 0.\"\"\"\n    return len(x) == 3 and sum(x) == 0\ndef g():\n    return [1, -2, 1]\nassert f(g())\n",
        "idx_generation": 109,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g(s='madam'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> float:\n    \"\"\"\n    Calculate the average of the numbers in the given list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    3.0\n    \"\"\"\n    return sum(nums) / len(nums)\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g()) == 3.0\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: List[str], target_length=5) -> bool:\n    \"\"\"Check if there exists a string in the list that has a length greater than or equal to a specific value\"\"\"\n    for string in s:\n        if len(string) >= target_length:\n            return True\n    return False\n\ndef g(target_length=5):\n    return [\"hello\", \"world\", \"python\", \"programming\"]\nassert f(g())\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, letter='a') -> bool:\n    \"\"\"Check if the given letter is present in the word.\"\"\"\n    return letter in word\n\ndef g(word='pineapple'):\n    return word\n\nassert f(g())\n\n",
        "idx_generation": 156,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a given number is a power of four.\n    \"\"\"\n    if n <= 0:\n        return False\n    while n % 4 == 0:\n        n //= 4\n    return n == 1\n\ndef g():\n    n = 16\n    return n\n\nassert f(g())\n",
        "idx_generation": 388,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str = \"hello\") -> bool:\n    \"\"\"\n    Given a string and a target string, check if the target string is a substring of the given string.\n    Return True if the target string is a substring, and False otherwise.\n    \"\"\"\n    return target in s\n\ndef g(s: str = \"hello world\", target: str = \"hello\"):\n    \"\"\"\n    Return the given string and the target string.\n    \"\"\"\n    return s, target\n\nassert f(*g())\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if there exists a row or column that contains only positive numbers.\n    Return True if such a row or column exists, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    row_positive = [0] * rows\n    col_positive = [0] * cols\n\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] > 0:\n                row_positive[i] = 1\n                col_positive[j] = 1\n\n    return any(row_positive) or any(col_positive)\n\ndef g(matrix=[[1, 2, 3], [-4, 5, 6], [7, 8, -9]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 64,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains a subsequence that forms an arithmetic progression.\n    Returns True if such subsequence exists, False otherwise.\n    \"\"\"\n    arr.sort()\n    if len(arr) < 3:\n        return False\n    diff = arr[1] - arr[0]\n    for i in range(2, len(arr)):\n        if arr[i] - arr[i-1] != diff:\n            return False\n    return True\n\ndef g():\n    return [1, 3, 5, 7, 9]\n\nassert f(g())\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: float, a=5, b=10) -> bool:\n    \"\"\"Check if x is between the values of a and b\"\"\"\n    return a <= x <= b\ndef g(a=5, b=10):\n    return (a + b) / 2\nassert f(g())\n",
        "idx_generation": 127,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, threshold: int = 10) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5], target = 7):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"\n    Check if the given number is a perfect square from the provided list of numbers.\n    \"\"\"\n    return n in [x ** 2 for x in numbers]\n\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return numbers[0] ** 2\n\nassert f(g())\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of length k such that the sum of its elements is divisible by k and the maximum element is even\"\"\"\n    prefix_sum = [0]\n    for num in arr:\n        prefix_sum.append(prefix_sum[-1] + num)\n    \n    max_num = max(arr)\n    \n    for i in range(k, len(prefix_sum)):\n        if prefix_sum[i] % k == 0 and max_num % 2 == 0:\n            return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    k = 4\n    return arr, k\n\nassert f(*g())\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"\n    Check if the given number is a power of a prime number from the provided list.\n    \"\"\"\n    for prime in primes:\n        if prime ** int(math.log(n, prime)) == n:\n            return True\n    return False\n\ndef g(primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return primes[0] ** 2\n\nassert f(g())\n",
        "idx_generation": 107,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=50, max_nums=5, options=[10, 20, 30, 40, 50, 60, 70]) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose sum is the target value, and each number can be used at most once.\"\"\"\n    for n in nums:\n        assert n in options\n    return sum(nums) <= target and len(set(nums)) <= max_nums\ndef g(target=50, max_nums=5, options=[10, 20, 30, 40, 50, 60, 70]):\n    from itertools import permutations\n    for n in range(max_nums + 1):\n        for p in permutations(options, n):\n            if sum(p) == target:\n                return list(p)\nassert f(g())\n",
        "idx_generation": 331,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string contains all lowercase vowels (a, e, i, o, u) at least once.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return all(vowel in s for vowel in vowels)\n\ndef g():\n    return 'aeiou'\n\nassert f(g())\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the list is a palindrome.\n    Return True if the list is a palindrome, False otherwise.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n\ndef g(arr=[1, 2, 3, 2, 1]):\n    return arr\n\nassert f(g())\n\n",
        "idx_generation": 167,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> int:\n    \"\"\"\n    Find the index of the first occurrence of the target number in the list.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g(), 6) == 2\n",
        "idx_generation": 115,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Check if the given number n is a power of k.\n\n    Sample Input:\n    n = 64\n    k = 2\n\n    Sample Output:\n    True\n    \"\"\"\n    if n == 0:\n        return False\n    while n != 1:\n        if n % k != 0:\n            return False\n        n = n // k\n    return True\n\ndef g():\n    return (64, 2)\n\nassert f(*g())\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a pair of integers in the list whose sum is equal to the product of two other integers.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(len(nums)):\n                for l in range(k + 1, len(nums)):\n                    if nums[i] + nums[j] == nums[k] * nums[l] or nums[i] + nums[j] == nums[l] * nums[k]:\n                        return True\n    return False\n\ndef g():\n    return [2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], letter: str) -> bool:\n    \"\"\"\n    Check if any of the names in the list start with the given letter.\n    \"\"\"\n    for name in names:\n        if name.startswith(letter):\n            return True\n    return False\n\ndef g(names = [\"Alice\", \"Bob\", \"Charlie\", \"Dave\"], letter = \"B\"):\n    return names\n\nassert f(g(), \"B\")\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there are k consecutive numbers in the given list.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    k = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    for i in range(n-k+1):\n        if arr[i:i+k] == list(range(arr[i], arr[i]+k)):\n            return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5, 6, 7], k=3):\n    return (arr, k)\n\nassert f(*g())\n",
        "idx_generation": 157,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Remove duplicate elements from a given list.\n\n    Example:\n    arr = [1, 2, 3, 2, 1]\n\n    The duplicate elements in the list are 2 and 1,\n    so the function should return [1, 2, 3].\n    \"\"\"\n    return list(set(arr))\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == [1, 2, 3]\n\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(s: str, pattern: str) -> List[str]:\n    \"\"\"\n    Given a string and a regex pattern, find all occurrences of the pattern in the string.\n    Returns a list of all matching substrings.\n    \"\"\"\n    matches = re.findall(pattern, s)\n    return matches\n\ndef g():\n    return \"The quick brown fox jumps over the lazy dog.\", \"[a-z]+\"\n\nassert f(*g()) == ['he', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n\n",
        "idx_generation": 290,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=5) -> bool:\n    \"\"\"\n    Check if a given string has a length equal to the target number.\n    \"\"\"\n    return len(s) == target\n\ndef g(target=5):\n    return \"Hello\"\n\nassert f(g())\n\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if the given substring is present in the string in a case-insensitive manner\"\"\"\n    return substr.lower() in s.lower()\ndef g(substr='python'):\n    return \"I like to code in Python\"\nassert f(g())\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(sentence: str) -> int:\n    \"\"\"\n    Count the number of words in a sentence.\n    \"\"\"\n    words = re.findall(r'\\w+', sentence)\n    return len(words)\n\ndef g():\n    return \"This is a sentence with multiple words\"\n\nassert f(g()) == 7\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a perfect square.\n\n    Sample Input:\n    n = 16\n\n    Sample Output:\n    True\n    \"\"\"\n    return n**0.5 == int(n**0.5)\n\ndef g():\n    n = 16\n    return n\n\nassert f(g()) == True\n",
        "idx_generation": 193,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub: str) -> bool:\n    \"\"\"Check if a substring is present in a string.\"\"\"\n    return sub in s\n\ndef g():\n    return (\"Hello world!\", \"world\")\n\nassert f(*g())\n",
        "idx_generation": 306,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=1) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome when reversed n number of times.\n\n    Example:\n    s = \"madam\" and n = 2\n\n    The reversed string \"madam\" is still a palindrome, so the function should return True.\n    \"\"\"\n    for _ in range(n):\n        s = s[::-1]\n    return s == s[::-1]\n\ndef g(n=2):\n    return \"madam\"\n\nassert f(g())\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=7, upper_bound=100) -> bool:\n    \"\"\"Find the smallest common multiple of two integers.\"\"\"\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 3, b = 7, upper_bound = 100):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g())\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of numbers, remove all the duplicates and return the modified list.\n    \"\"\"\n    return list(set(nums))\n\ndef g(nums=[1, 2, 3, 4, 3, 2, 5]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5]\n\n",
        "idx_generation": 166,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a square matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n: int) -> bool:\n    \"\"\"\n    Check if a given number is present in a list.\n    \"\"\"\n    return any(num == n for num in lst)\n\ndef g(lst = [1, 2, 3, 4, 5], n = 3):\n    return (lst, n)\n\nassert f(*g())\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a perfect square.\"\"\"\n    return int(n**0.5) == n**0.5\n\ndef g():\n    return 9\n\nassert f(g())\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(n=17):\n    return n\n\nassert f(g())\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(x: int, y: int, z: int, target: int) -> bool:\n    \"\"\"\n    Check if the sum of three numbers is equal to a certain value.\n    \"\"\"\n    return x + y + z == target\n\ndef g(x: int, y: int, target: int):\n    z = target - (x + y)\n    return z\n\nassert f(g(2, 5, 100), 2, 5, 100)\n",
        "idx_generation": 473,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, find the maximum difference between any two distinct elements in the list.\n\n    Sample Input:\n    nums = [1, 9, 3, 7, 5]\n\n    Sample Output:\n    8\n    \"\"\"\n    max_diff = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            diff = abs(nums[i] - nums[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\ndef g(nums=[1, 9, 3, 7, 5]):\n    return nums\n\nassert f(g()) == 8\n\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"\n    Check if a given number is a prime number.\n    \"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if n % prime == 0:\n            return False\n    return True\n\ndef g(n=31, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    \"\"\"\n    Generate a number and a list of prime numbers.\n    \"\"\"\n    return n\n\nassert f(g())\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is a square matrix.\n    Return True if the matrix is square, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    for row in matrix:\n        if len(row) != rows:\n            return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 144,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list such that the product of its elements is equal to zero.\n\n    Sample Input:\n    `nums = [2, 0, 3, 1, -1]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    def is_zero_product(subarray):\n        return 0 in subarray\n\n    def find_subarrays(nums, idx, subarray):\n        if idx == len(nums):\n            if is_zero_product(subarray):\n                return True\n            return False\n\n        if find_subarrays(nums, idx + 1, subarray + [nums[idx]]):\n            return True\n\n        if find_subarrays(nums, idx + 1, subarray):\n            return True\n\n        return False\n\n    return find_subarrays(nums, 0, [])\n\ndef g(nums: List[int]):\n    return [nums]\n\nassert f(*g([2, 0, 3, 1, -1]))\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix represented by a 2D list, rotate the matrix by 90 degrees clockwise.\n    Return the rotated matrix.\n    \"\"\"\n    n = len(matrix)\n    rotated_matrix = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            rotated_matrix[i][j] = matrix[n - j - 1][i]\n    return rotated_matrix\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\n# Test case\ntest_matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nexpected_output = [\n    [7, 4, 1],\n    [8, 5, 2],\n    [9, 6, 3]\n]\nassert f(g(test_matrix)) == expected_output\n\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=0) -> bool:\n    \"\"\"Check if there is a sublist within a list that sums up to a target number.\"\"\"\n    for i, _ in enumerate(li):\n        for j, _ in enumerate(li[i+1:]):\n            sublist = li[i:j+i+2]\n            if sum(sublist) == target:\n                return True\n    return False\ndef g(target=0):\n    return [1, 2, -3, -2, 3, 4, -1, 0, 1]\nassert f(g())\n",
        "idx_generation": 38,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome sequence.\n\n    A palindrome sequence is one in which the sequence is the same when reversed.\n\n    Example:\n    nums = [1, 2, 3, 2, 1]\n    Output: True\n\n    nums = [1, 2, 3, 4, 5]\n    Output: False\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=5, length=20) -> bool:\n    \"\"\"Check if a given string has a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'abc', count = 5, length = 20):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '$'\nassert f(g())\n\n",
        "idx_generation": 384,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, char: str) -> bool:\n    \"\"\"\n    Check if the given character is present in the given string.\n    Return True if the character is found, False otherwise.\n    \"\"\"\n    return char in string\n\ndef g(string=\"Hello, World!\", char=\"o\"):\n    return string, char\n\nassert f(*g())\n",
        "idx_generation": 125,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target = 12) -> bool:\n    \"\"\"Find the two numbers in a given list that add up to a specific target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target = 12):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 80,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python', max_len=10) -> bool:\n    \"\"\"\n    Check if a string is a valid abbreviation of a word.\n    \"\"\"\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\n\ndef g(word = 'python', max_len = 10):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\"\n\nassert f(g())\n\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(names: List[str]) -> bool:\n    \"\"\"Check if all names in the list start with an uppercase letter.\"\"\"\n    return all(name[0].isupper() for name in names)\n\ndef g():\n    return [\"Alice\", \"Bob\", \"Charlie\", \"David\"]\n\nassert f(g())\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a rectangular matrix.\n    Return True if it is a rectangular matrix, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for row in matrix:\n        if len(row) != cols:\n            return False\n    return True\n\ndef g():\n    \"\"\"\n    Generate a 4x3 matrix with random numbers.\n    \"\"\"\n    import random\n    return [[random.randint(1, 10) for _ in range(3)] for _ in range(4)]\n\nassert f(g())\n\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(word: str) -> bool:\n    \"\"\"\n    Check if a word is an anagram of a palindrome.\n    An anagram of a palindrome is a word that can be rearranged to form a palindrome.\n    Return True if it is an anagram of a palindrome, and False otherwise.\n    \"\"\"\n    char_count = {}\n    for char in word:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    odd_count = 0\n    for count in char_count.values():\n        if count % 2 != 0:\n            odd_count += 1\n    return odd_count <= 1\n\ndef g(word: str = \"aab\"):\n    return word\n\nassert f(g()) == True\n",
        "idx_generation": 254,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is a pangram.\n    A pangram is a sentence that contains every letter of the alphabet at least once.\n    \"\"\"\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    return set(s.lower()) >= alphabet\n\ndef g():\n    return \"The quick brown fox jumps over the lazy dog\"\n\nassert f(g())\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Remove all duplicate numbers from the given list and return a new list without duplicates.\n\n    Example:\n    nums = [1, 2, 3, 2, 4, 5, 6, 4]\n    The new list without duplicates is [1, 2, 3, 4, 5, 6].\n    \"\"\"\n    return list(set(nums))\n\ndef g():\n    return [1, 2, 3, 2, 4, 5, 6, 4]\n\nassert f(g()) == [1, 2, 3, 4, 5, 6]\n",
        "idx_generation": 422,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix, find the sum of the numbers in the main diagonal.\n    \"\"\"\n    n = len(matrix)\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n    return diagonal_sum\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 15\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate elements\"\"\"\n    return len(arr) == len(set(arr))\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 220,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], char: str) -> bool:\n    \"\"\"\n    Given a list of words and a character, determine if any of the words start with the given character.\n\n    Sample Input:\n    `['apple', 'banana', 'cherry']`, `'b'`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return any(word.startswith(char) for word in words)\n\ndef g():\n    return ['apple', 'banana', 'cherry'], 'b'\n\nassert f(*g())\n",
        "idx_generation": 281,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=987654321) -> bool:\n    \"\"\"Solve an addition problem\"\"\"\n    return x + 2 == a\n\ndef g(a = 987654321):\n    return a - 2\n\nassert f(g())\n",
        "idx_generation": 187,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if a string has a length equal to n\"\"\"\n    return len(s) == n\ndef g(n = 4):\n    return \"abcd\"[:n]\nassert f(g())\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a: int, b: int, c: int) -> bool:\n    \"\"\"Check if the equation n * a == b * (the sum of the first c integers) is valid.\"\"\"\n    return n * a == b * c * (c + 1) / 2\n\ndef g(a: int, b: int, c: int):\n    return (b * c * (c + 1) / 2) / a\n\nassert f(g(7, 10, 5), 7, 10, 5)\n",
        "idx_generation": 204,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are four numbers in the list whose sum is equal to the target.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 10\n    The sum of four numbers in the list (1+2+3+4) is equal to the target (10).\n    Therefore, the puzzle is solved.\n    \"\"\"\n    for comb in combinations(nums, 4):\n        if sum(comb) == target:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g(), 10)\n\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there are any duplicate elements in the given list.\n    Return True if there are duplicates, False otherwise.\n    \"\"\"\n    return len(set(nums)) != len(nums)\n\ndef g():\n    \"\"\"\n    Generate a random list of integers with some duplicates.\n    \"\"\"\n    import random\n    return random.choices(range(1, 10), k=10)\n\nassert f(g())\n",
        "idx_generation": 274,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a: List[int]) -> int:\n    \"\"\"Count the occurrences of a given number in the array.\"\"\"\n    return a.count(n)\n\ndef g(n=4, a=[1, 4, 4, 2, 4, 6, 8, 4]):\n    return n, a\n\nassert f(*g()) == 4\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it contains all even numbers.\n    \"\"\"\n    return all(num % 2 == 0 for num in nums)\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 30,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python', reverse=False) -> bool:\n    \"\"\"Either reverse a string or don't based on the reverse flag and check if it matches the target.\"\"\"\n    return (s[::-1] == target) == reverse\n\ndef g(target = 'python', reverse = False):\n    return target[::-1] if reverse else target\n\nassert f(g())\n",
        "idx_generation": 313,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"Check if a, b, and c form a Pythagorean triplet.\"\"\"\n    return a**2 + b**2 == c**2\n\ndef g():\n    for a in range(1, 100):\n        for b in range(a+1, 100):\n            c = sqrt(a**2 + b**2)\n            if c.is_integer():\n                return (a, b, int(c))\n\nassert f(*g())\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the sum of the first n natural numbers is equal to the given number.\"\"\"\n    return sum(range(n+1)) == int(s)\ndef g(n = 3):\n    return str(n*(n+1)//2)\nassert f(g())\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, determine if there are three numbers in the list that add up to\n    the target integer.\n    \"\"\"\n    for i in range(len(arr)-2):\n        for j in range(i+1, len(arr)-1):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"\n    Given an array of integers and a target value k, return True if k is the sum of any two numbers in the array.\n    Return False otherwise.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if k - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], k=8):\n    return arr, k\n\nassert f(*g())\n",
        "idx_generation": 330,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, num=3) -> bool:\n    \"\"\"\n    Check if the given string has the same number of vowels as the given number.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return sum(1 for ch in s.lower() if ch in vowels) == num\n\ndef g(num=3):\n    return \"Hello World\"\n\nassert f(g())\n",
        "idx_generation": 325,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is symmetric.\n    Returns True if the matrix is symmetric, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of numbers, check if the sum of all the numbers is divisible by the largest number.\n    Return True if the sum is divisible, False otherwise.\n    \"\"\"\n    max_num = max(nums)\n    sum_nums = sum(nums)\n    if sum_nums % max_num == 0:\n        return True\n    else:\n        return False\n\ndef g(nums = [10, 20, 30, 40, 50]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n\n    Sample Input:\n    `nums = [1, 2, 3, 2, 1]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([1, 2, 3, 2, 1]))\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"Check if the given string contains exactly n vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return len([c for c in s if c.lower() in vowels]) == n\n\ndef g(n = 2):\n    return 'aeiou' * (n // 5) + 'aeiou'[:n % 5]\n\nassert f(g())\n",
        "idx_generation": 119,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer k, \n    return True if there exists two distinct indices i and j in the list such that lst[i] * lst[j] = k, \n    and False otherwise.\n\n    Sample Input:\n    lst = [1, 2, 3, 4, 5]\n    target = 10\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for i, num in enumerate(lst):\n        if target / num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 10)\n\nassert f(*g()) == True\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if n is a palindrome.\"\"\"\n    return str(n) == str(n)[::-1]\n\ndef g():\n    return 1234321\n\nassert f(g())\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'orange', 'grape']) -> bool:\n    \"\"\"Check if the given string is a concatenation of two words from the list.\"\"\"\n    for i in range(len(s)):\n        word1 = s[:i]\n        word2 = s[i:]\n        if word1 in words and word2 in words:\n            return True\n    return False\n\ndef g(words=['apple', 'banana', 'orange', 'grape']):\n    return words[0] + words[1]\n\nassert f(g())\n",
        "idx_generation": 279,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there is a subarray in the list where the difference of its maximum and minimum elements is divisible by k.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)+1):\n            if (max(numbers[i:j]) - min(numbers[i:j])) % k == 0:\n                return True\n    return False\n\ndef g(numbers=[5, 10, 15, 20, 25], k=5):\n    return numbers\n\nassert f(g(), 5)\n\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['cat', 'dog', 'bird', 'elephant']) -> bool:\n    \"\"\"\n    Check if the given string contains any of the substrings.\n    \"\"\"\n    return any(sub in s for sub in substrings)\n\ndef g(substrings = ['cat', 'dog', 'bird', 'elephant']):\n    return \"I have a cat, a dog, and a bird.\"\n\nassert f(g())\n",
        "idx_generation": 277,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=0) -> bool:\n    \"\"\"\n    Given a list of integers, find if there is a subset of the list that has a sum equal to the target_sum.\n    \"\"\"\n    def subset_sum(numbers, target_sum, index, current_sum):\n        if current_sum == target_sum:\n            return True\n        if index >= len(numbers):\n            return False\n        include = subset_sum(numbers, target_sum, index + 1, current_sum + numbers[index])\n        exclude = subset_sum(numbers, target_sum, index + 1, current_sum)\n        return include or exclude\n\n    return subset_sum(numbers, target_sum, 0, 0)\n\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list whose sum is equal to the target number.\n\n    Sample Input:\n    numbers = [2, 4, 6, 8, 10]\n    target = 14\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in numbers:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return ([2, 4, 6, 8, 10], 14)\n\nassert f(*g()) == True\n",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the index of the first occurrence of the target number in the given list.\n    If the target is not found, return -1.\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1\n\ndef g(nums=[3, 5, 2, 8, 4], target=8):\n    return (nums, target)\n\nassert f(*g()) == 3\n\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose sum is equal to the product of two other numbers in the list.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(len(numbers)):\n                for l in range(k+1, len(numbers)):\n                    if numbers[i] + numbers[j] == numbers[k] * numbers[l]:\n                        return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a given number is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], length: int, contains_letter: str) -> bool:\n    \"\"\"\n    Check if there exists a word in the list that has the given length and contains a specific letter.\n    \"\"\"\n    for word in words:\n        if len(word) == length and contains_letter in word:\n            return True\n    return False\n\ndef g():\n    return [\"apple\", \"banana\", \"cherry\"], 6, \"n\"\n\nassert f(*g())\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix: str) -> bool:\n    \"\"\"\n    Check if there exists a word in the list that starts with the given prefix.\n    \"\"\"\n    for word in words:\n        if word.startswith(prefix):\n            return True\n    return False\n\ndef g():\n    return [\"apple\", \"banana\", \"cherry\"], \"b\"\n\nassert f(*g())\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n=20, length=10) -> bool:\n    \"\"\"Find a list of integers where the sum is equal to n and the length is equal to length\"\"\"\n    return sum(lst) == n and len(lst) == length\ndef g(n = 20, length = 10):\n    return [n // length] * length\nassert f(g())\n",
        "idx_generation": 117,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(nums: List[float]) -> List[float]:\n    \"\"\"Return the square root of each number in the list\"\"\"\n    return [math.sqrt(num) for num in nums]\n\ndef g(nums: List[float]):\n    return nums\n\n# Test case\ntest_nums = [1.0, 4.0, 9.0, 16.0, 25.0]\nassert f(g(test_nums)) == [1.0, 2.0, 3.0, 4.0, 5.0]\n\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, target='python') -> bool:\n    \"\"\"Check if a given word is an anagram of the target word\"\"\"\n    def count_chars(word):\n        char_count = {}\n        for char in word:\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n        return char_count\n\n    return count_chars(word) == count_chars(target)\n\ndef g(target='python'):\n    return target\n\nassert f(g())\n",
        "idx_generation": 156,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a power of two\"\"\"\n    return n > 0 and (n & (n - 1)) == 0\n\ndef g(n=16):\n    return n\n\nassert f(g())\n\n",
        "idx_generation": 422,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Check if the target string is a substring of the given string.\n    \"\"\"\n    return target in s\n\ndef g(s = \"Hello, World!\", target = \"World\"):\n    return s, target\n\nassert f(*g())\n",
        "idx_generation": 226,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if there exists a row or column that contains only prime numbers.\n    Return True if such a row or column exists, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    row_prime = [0] * rows\n    col_prime = [0] * cols\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    for i in range(rows):\n        for j in range(cols):\n            if is_prime(matrix[i][j]):\n                row_prime[i] = 1\n                col_prime[j] = 1\n\n    return any(row_prime) or any(col_prime)\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 64,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> List[int]:\n    \"\"\"\n    Find the longest increasing subsequence in a list of integers.\n    \"\"\"\n    n = len(lst)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if lst[i] > lst[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_length = max(dp)\n    result = []\n    for i in range(n - 1, -1, -1):\n        if dp[i] == max_length:\n            result.append(lst[i])\n            max_length -= 1\n    return list(reversed(result))\n\ndef g():\n    return [3, 2, 5, 1, 6, 4]\n\nassert f(g()) == [2, 5, 6]\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the given number is a multiple of m\"\"\"\n    return n % m == 0\n\ndef g(m=10):\n    return 50\n\nassert f(g())\n",
        "idx_generation": 136,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, threshold: int = 10) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose difference is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) == target:\n                return True\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5], target = 3):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a power of 2\"\"\"\n    return n > 0 and (n & (n - 1)) == 0\ndef g():\n    return 16\n\nassert f(g())\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of length k such that the sum of its elements is divisible by k and the product of its elements is divisible by k\"\"\"\n    prefix_sum = [0]\n    prefix_product = [1]\n    for num in arr:\n        prefix_sum.append(prefix_sum[-1] + num)\n        prefix_product.append(prefix_product[-1] * num)\n    \n    for i in range(k, len(prefix_sum)):\n        if prefix_sum[i] % k == 0 and prefix_product[i] % k == 0:\n            return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    k = 4\n    return arr, k\n\nassert f(*g())\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisor=5) -> bool:\n    \"\"\"Check if n is divisible by the given divisor.\"\"\"\n    return n % divisor == 0\n\ndef g(divisor=5):\n    return 25\n\nassert f(g())\n",
        "idx_generation": 107,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the sum of all the even numbers in the given list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6]\n    The sum of all the even numbers is 2 + 4 + 6 = 12.\n    \"\"\"\n    even_sum = 0\n    for num in nums:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g()) == 12\n\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target: str) -> bool:\n    \"\"\"\n    Given a list of words, check if there is a word that contains the target string.\n    \"\"\"\n    for word in words:\n        if target in word:\n            return True\n    return False\n\ndef g(words=[\"apple\", \"banana\", \"cherry\"], target=\"na\"):\n    return words\n\nassert f(g(), \"na\")\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if the list is a palindrome.\n    Return True if it is, False otherwise.\n    \"\"\"\n    return numbers == numbers[::-1]\n\ndef g(numbers=[1, 2, 3, 2, 1]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> List[int]:\n    \"\"\"\n    Find the indices of the target number in the given matrix.\n    \n    Sample Input:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    target = 5\n    \n    Sample Output:\n    [1, 1]\n    \"\"\"\n    indices = []\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                indices.append([i, j])\n    return indices\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5):\n    return matrix, target\n\nassert f(*g()) == [[1, 1]]\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number n is a prime number.\n\n    Sample Input:\n    `7`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 7\n\nassert f(g())\n",
        "idx_generation": 198,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]], target=20) -> bool:\n    \"\"\"\n    Given a grid of numbers, check if there exists a path from the top-left cell to the bottom-right cell\n    where the product of the numbers along the path is greater than a given target.\n    Return True if a path exists, False otherwise.\n    \"\"\"\n    def find_path(grid, i, j, target):\n        if i == len(grid) - 1 and j == len(grid[0]) - 1:\n            return grid[i][j] > target\n        if i < len(grid) - 1:\n            if find_path(grid, i + 1, j, target // grid[i][j]):\n                return True\n        if j < len(grid[0]) - 1:\n            if find_path(grid, i, j + 1, target // grid[i][j]):\n                return True\n        return False\n\n    return find_path(grid, 0, 0, target)\n\ndef g(grid=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=20):\n    return grid\n\nassert f(g())\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(names: List[str], letter: str) -> bool:\n    \"\"\"\n    Check if any of the names in the given list start with the given letter.\n\n    Example:\n    names = ['Alice', 'Bob', 'Charlie', 'David']\n    letter = 'C'\n\n    The names 'Charlie' starts with the letter 'C', so the function should return True.\n\n    Hint: You can use a for loop to iterate over each name in the list.\n    \"\"\"\n    for name in names:\n        if name[0] == letter:\n            return True\n    return False\n\ndef g(names=['Alice', 'Bob', 'Charlie', 'David'], letter='C'):\n    return names, letter\n\nassert f(*g()) == True\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=3, seq=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Find the sum of the maximum k numbers in the sequence\"\"\"\n    return 0 <= k <= len(seq) and sum(sorted(seq)[-k:]) == n\ndef g(k = 3, seq = [1, 2, 3, 4, 5, 6]):\n    return sum(sorted(seq)[-k:])\nassert f(g())\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str) -> List[str]:\n    \"\"\"\n    Find all possible anagrams of a word.\n    Return a list of the anagrams.\n    \"\"\"\n    def backtrack(word, path, char_count, result):\n        if len(path) == len(word):\n            result.append(''.join(path))\n            return\n        for i, char in enumerate(word):\n            if char_count[char] > 0:\n                char_count[char] -= 1\n                path.append(char)\n                backtrack(word, path, char_count, result)\n                char_count[char] += 1\n                path.pop()\n\n    char_count = {}\n    for char in word:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    result = []\n    backtrack(word, [], char_count, result)\n    return result\n\ndef g(word: str = \"eat\"):\n    return word\n\nassert f(g()) == ['eat', 'eta', 'aet', 'ate', 'tea', 'tae']\n",
        "idx_generation": 294,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"Check if any word in the list contains a specific substring\"\"\"\n    substring = 'cat'\n    return any(substring in word for word in words)\n\ndef g(words=['cats', 'dogs', 'elephants']):\n    return words\n\nassert f(g())\n",
        "idx_generation": 169,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a perfect square.\n\n    Sample Input:\n    n = 25\n\n    Sample Output:\n    True\n    \"\"\"\n    if n < 0:\n        return False\n    root = int(n**0.5)\n    return root * root == n\n\ndef g():\n    n = 25\n    return n\n\nassert f(g()) == True\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub: str) -> bool:\n    \"\"\"Check if a given substring is present in the given string.\"\"\"\n    return sub in s\n\ndef g(s = \"hello world\", sub = \"world\"):\n    return s, sub\n\nassert f(*g())\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if a string is a palindrome.\n\n    Returns True if the string is the same when reversed,\n    False otherwise.\n\n    Sample Input:\n    \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return string == string[::-1]\n\ndef g(string=\"racecar\"):\n    return string\n\nassert f(g())\n",
        "idx_generation": 285,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=100, b=50) -> bool:\n    \"\"\"Check if the given number is divisible by both a and b.\"\"\"\n    return n % a == 0 and n % b == 0\n\ndef g(a = 100, b = 50):\n    if a == 0 or b == 0:\n        return 0\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 147,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with all duplicate numbers removed.\n    \"\"\"\n    return list(set(nums))\n\ndef g(nums=[1, 2, 3, 4, 5, 1, 2, 3, 4]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5]\n",
        "idx_generation": 180,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    \"\"\"Return the matrix.\"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n: int) -> bool:\n    \"\"\"\n    Check if a given number is present in a list.\n    \"\"\"\n    return len([num for num in lst if num == n]) > 0\n\ndef g(lst = [1, 2, 3, 4, 5], n = 3):\n    return (lst, n)\n\nassert f(*g())\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(i: int) -> bool:\n    \"\"\"Check if the given number is a perfect square.\"\"\"\n    return int(i ** 0.5) ** 2 == i\n\ndef g():\n    return 81\n\nassert f(g())\n",
        "idx_generation": 367,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n\n",
        "idx_generation": 474,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, find the minimum difference between any two distinct elements in the list.\n\n    Sample Input:\n    nums = [1, 9, 3, 7, 5]\n\n    Sample Output:\n    2\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            diff = abs(nums[i] - nums[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff\n\ndef g(nums=[1, 9, 3, 7, 5]):\n    return nums\n\nassert f(g()) == 2\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"Check if the given numbers form a Pythagorean triplet.\"\"\"\n    return a**2 + b**2 == c**2\n\ndef g(a = 3, b = 4, c = 5):\n    return a, b, c\n\nassert f(*g())\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a square matrix, check if it is symmetric i.e. the matrix is equal to its transpose.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\nassert f(g([[1, 2, 3], [2, 4, 5], [3, 5, 6]]))\n",
        "idx_generation": 149,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum product of any two numbers in a given list.\n\n    Sample Input:\n    nums = [1, 5, 3, 6, 2, 4]\n\n    Sample Output:\n    30\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\ndef g():\n    return [1, 5, 3, 6, 2, 4]\n\nassert f(g()) == 30\n",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers, rotate the matrix 90 degrees clockwise.\n    Returns the rotated matrix.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    The rotated matrix is:\n    [[7, 4, 1],\n     [8, 5, 2],\n     [9, 6, 3]]\n    \"\"\"\n    return [list(reversed(row)) for row in zip(*matrix)]\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that when multiplied gives the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target=16):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 39,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome sequence.\n\n    A palindrome sequence is one in which the sequence is the same when reversed.\n\n    Example:\n    nums = [1, 2, 3, 2, 1]\n    Output: True\n\n    nums = [1, 2, 3, 4, 5]\n    Output: False\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [4, 5, 6, 5, 4]\n\nassert f(g()) == True\n\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=5, length=20) -> bool:\n    \"\"\"Check if a given string has a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'abc', count = 5, length = 20):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '$'\nassert f(g())\n\n",
        "idx_generation": 384,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub_str: str) -> bool:\n    \"\"\"\n    Check if the given substring exists in the given string.\n\n    Sample Input:\n    s = \"Hello, World!\"\n    sub_str = \"World\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return sub_str in s\n\ndef g():\n    return \"Hello, World!\"\n\nassert f(g(), \"World\")\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if two numbers in the given list add up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6], target=9):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 83,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python', max_len=10) -> bool:\n    \"\"\"\n    Check if a string is a valid abbreviation of a word.\n    \"\"\"\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\n\ndef g(word = 'python', max_len = 10):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\"\n\nassert f(g())\n\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, determine if it is a diagonal matrix.\n    A diagonal matrix is one in which all non-diagonal elements are zero.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n    \n    return True\n\ndef g(matrix=[[1, 0, 0], [0, 2, 0], [0, 0, 3]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(sentence: str, word: str, pattern=r'\\b\\w+\\b') -> bool:\n    \"\"\"Check if the given word is present in the sentence and it ends with a vowel\"\"\"\n    return re.search(pattern, sentence) is not None and word[-1].lower() in ['a', 'e', 'i', 'o', 'u']\n\ndef g(sentence='This is a sample sentence', word='sample', pattern=r'\\b\\w+\\b'):\n    return sentence, word\n\nassert f(*g())\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a given string can be segmented into a space-separated sequence of dictionary words.\n    Return True if the string can be segmented, False otherwise.\n    \"\"\"\n    def word_break(s, wordDict):\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(1, len(s) + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        \n        return dp[len(s)]\n    \n    wordDict = {\"apple\", \"pen\", \"applepen\", \"pine\", \"pineapple\"}\n    \n    return word_break(s, wordDict)\n\ndef g():\n    return (\"pineapplepenapple\",)\n\nassert f(*g())\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Remove all the duplicate elements from the given list.\n\n    Sample Input:\n    nums = [1, 2, 3, 2, 4, 5, 3]\n\n    Sample Output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    unique_nums = list(set(nums))\n    return unique_nums\n\ndef g():\n    nums = [1, 2, 3, 2, 4, 5, 3]\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5]\n\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, return a new matrix with its rows reversed.\n    \"\"\"\n    n = len(matrix)\n    reversed_matrix = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        reversed_matrix[i] = matrix[n-1-i]\n    return reversed_matrix\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[7, 8, 9], [4, 5, 6], [1, 2, 3]]\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains duplicate elements.\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 5]\n\nassert f(g())\n\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is a valid URL.\n    \"\"\"\n\n    pattern = r'^(https?|ftp)://[^\\s/$.?#].[^\\s]*$'\n    return re.match(pattern, s) is not None\n\ndef g():\n    return \"https://www.example.com\"\n\nassert f(g())\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=62, b=92, c=24) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])\n\ndef g(a = 62, b = 92, c = 24):\n    return a + sum([b * i for i in range(c)])\n\nassert f(g())\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, max_nums=5, options=[10, 20, 30, 40, 50, 60, 70, 80, 90]) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose sum is the target value, and each number can be used at most once.\"\"\"\n    for n in nums:\n        assert n in options\n    return sum(nums) <= target and len(set(nums)) <= max_nums\ndef g(target=100, max_nums=5, options=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    from itertools import permutations\n    for n in range(max_nums + 1):\n        for p in permutations(options, n):\n            if sum(p) == target:\n                return list(p)\nassert f(g())\n",
        "idx_generation": 331,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any duplicate elements.\n    \"\"\"\n    return len(set(nums)) != len(nums)\n\ndef g():\n    nums = [1, 2, 3, 3, 4, 5, 5, 5]\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exist four numbers in the list that add up to the target integer.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                for l in range(k+1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return True\n    return False\n\ndef g(nums=[-1, 0, 1, 2, -1, -4]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 40,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str = 'python') -> bool:\n    \"\"\"\n    Check if a given string ends with a specific target string in a case-insensitive manner.\n    Returns True if it does, False otherwise.\n    \"\"\"\n    return s.lower().endswith(target.lower())\n\ndef g(target: str = 'python'):\n    return 'I love programming in ' + target\n\nassert f(g())\n\n",
        "idx_generation": 364,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"Check if a, b, and c are pythagorean triplets\"\"\"\n    return a**2 + b**2 == c**2\n\ndef g(a: int = 3, b: int = 4, c: int = 5):\n    return (a, b, c)\n\nassert f(*g())\n",
        "idx_generation": 435,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a number whose factorial contains all digits from 0 to 9 once.\"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    digits = set(str(factorial))\n    if len(digits) == 10:\n        return True\n    else:\n        return False\n\ndef g():\n    for n in range(1, 10000):\n        if f(n):\n            return n\n\nassert f(g())\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 9\n\nassert f(*g())\n\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer k, check if there exists two distinct indices i and j such that\n    nums[i] + nums[j] = k.\n\n    Sample input:\n    nums = [2, 4, 6, 8, 10]\n    k = 14\n\n    Sample output:\n    True\n\n    Explanation:\n    The sum of nums[2] and nums[3] is equal to k: 6 + 8 = 14.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if k - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums=[2, 4, 6, 8, 10], k=14):\n    return nums, k\n\nassert f(*g())\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(string: str, char: str) -> bool:\n    \"\"\"\n    Check if a given character is present in the string.\n    \"\"\"\n    return char in string\n\ndef g(string=\"Hello, world!\", char=\"o\"):\n    return string\n\nassert f(g(), \"o\")\n",
        "idx_generation": 368,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    Return True if the matrix is symmetric, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return all(matrix[i][j] == matrix[j][i] for i in range(rows) for j in range(cols))\n\ndef g():\n    \"\"\"\n    Generate a symmetric matrix.\n    \"\"\"\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a subarray in the list with a sum of 0\"\"\"\n    prefix_sum = 0\n    seen = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum in seen or prefix_sum == 0:\n            return True\n        seen.add(prefix_sum)\n    return False\n\ndef g(nums: List[int] = [4, 2, -3, 1, 6]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 141,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"\n    Check if a string s contains exactly n vowels.\n    Return True if s contains exactly n vowels, False otherwise.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = sum(1 for char in s if char.lower() in vowels)\n    return count == n\n\ndef g(s=\"Hello World!\", n=3):\n    return s, n\n\nassert f(*g())\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with the same elements in reverse order.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    [5, 4, 3, 2, 1]\n    \"\"\"\n    return nums[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == [5, 4, 3, 2, 1]\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a given number is a palindrome.\n    \"\"\"\n    num = str(n)\n    return num == num[::-1]\n\ndef g(n=12321):\n    return n\n\nassert f(g())\n",
        "idx_generation": 234,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, stopwords = ['is', 'a', 'the', 'of', 'and']) -> bool:\n    \"\"\"Check if a given string is a pangram.\"\"\"\n    words = string.lower().split()\n    filtered_words = [word for word in words if word not in stopwords]\n    return len(filtered_words) > 0\n\ndef g(stopwords = ['is', 'a', 'the', 'of', 'and']):\n    return \"The quick brown fox jumps over the lazy dog.\"\n\nassert f(g())\n",
        "idx_generation": 354,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there is a subarray in the list where the mean of its elements is divisible by k.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)+1):\n            if (sum(numbers[i:j]) / len(numbers[i:j])) % k == 0:\n                return True\n    return False\n\ndef g(numbers=[1, 2, 3, 4, 5], k=2):\n    return numbers\n\nassert f(g(), 2)\n\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr=\"\") -> bool:\n    \"\"\"\n    Check if the given substring exists in the given string.\n    \"\"\"\n    return substr in s\n\ndef g(substr=\"\"):\n    return \"Hello World\", \"Hello\"\n\nassert f(*g())\n",
        "idx_generation": 325,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, m: int, k: int) -> bool:\n    \"\"\"\n    Given three integers n, m, and k, check if the product of the first two integers is equal to the third integer.\n    \"\"\"\n    return n * m == k\n\ndef g(n = 4, m = 2, k = 8):\n    return n, m, k\n\nassert f(*g())\n",
        "idx_generation": 146,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exist three numbers in the list that sum up to a specific target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, find the sum of all even numbers.\n    \"\"\"\n    return sum(num for num in numbers if num % 2 == 0)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 30\n\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is a symmetric matrix.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    output: True\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g())\n\n",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], starts_with: str, contains: str) -> bool:\n    \"\"\"\n    Check if there exists a word in the list that starts with a specific letter and contains a specific substring.\n    \"\"\"\n    for word in words:\n        if word.startswith(starts_with) and contains in word:\n            return True\n    return False\n\ndef g():\n    return [\"apple\", \"banana\", \"cherry\"], \"b\", \"na\"\n\nassert f(*g())\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Determine if the word is present in the list of words.\"\"\"\n    return word in words\n\ndef g(words = ['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return words[2]\n\nassert f(g())\n",
        "idx_generation": 313,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if s1 is an anagram of s2\"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g():\n    return \"listen\", \"silent\"\n\nassert f(*g())\n",
        "idx_generation": 126,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the product of all the numbers in the list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    120\n    \"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g()) == 120\n\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"Check if all words in the list start with the same letter\"\"\"\n    first_letter = words[0][0]\n    return all(word[0] == first_letter for word in words)\n\ndef g(words = ['apple', 'ant', 'air']):\n    return words\n\nassert f(g())\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: int) -> bool:\n    \"\"\"\n    Given a string and a target length, check if the string contains a substring that has a length equal to the target.\n\n    Sample Input:\n    `\"abcdef\"`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return any(len(sub) == target for sub in [s[i:j] for i in range(len(s)) for j in range(i+1, len(s)+1)])\n\ndef g():\n    return \"abcdef\", 3\n\nassert f(*g())\n",
        "idx_generation": 281,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if there exists a row that contains only prime numbers.\n    Return True if such a row exists, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    for i in range(rows):\n        row_prime = True\n        for j in range(cols):\n            if not is_prime(matrix[i][j]):\n                row_prime = False\n                break\n        if row_prime:\n            return True\n\n    return False\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(matrix=[[2, 4, 6], [3, 5, 7], [8, 9, 10]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Return a new list containing only the even numbers from the given list.\n\n    Example:\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    The even numbers in the list are 2, 4, 6, 8, and 10.\n    Therefore, the function should return [2, 4, 6, 8, 10].\n    \"\"\"\n    even_nums = []\n    for num in arr:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums\n\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr\n\nassert f(g()) == [2, 4, 6, 8, 10]\n\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=-123456789) -> bool:\n    \"\"\"Check if the given number x is divisible by a\"\"\"\n    return x % a == 0\n\ndef g(a=-123456789):\n    return a\n\nassert f(g())\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, threshold: int = 10) -> bool:\n    \"\"\"Check if the sum of any three numbers in the list is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5], target = 10):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> int:\n    \"\"\"\n    Compute the factorial of a given number.\n\n    Sample Input:\n    n = 5\n\n    Sample Output:\n    120\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * f(n-1)\n\ndef g():\n    return 5\n\nassert f(g()) == 120\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of length k such that the sum of its elements is divisible by k and the product of its elements is divisible by k\"\"\"\n    prefix_sum = [0]\n    prefix_product = [1]\n    for num in arr:\n        prefix_sum.append(prefix_sum[-1] + num)\n        prefix_product.append(prefix_product[-1] * num)\n    \n    for i in range(k, len(prefix_sum)):\n        if prefix_sum[i] % k == 0 and prefix_product[i] % k == 0:\n            return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    k = 4\n    return arr, k\n\nassert f(*g())\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisor=3) -> bool:\n    \"\"\"Check if n is divisible by the given divisor.\"\"\"\n    return n % divisor == 0\n\ndef g(divisor=3):\n    return 6\n\nassert f(g())\n",
        "idx_generation": 107,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if the list is sorted in non-decreasing order, False otherwise.\n    \"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a given string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s=\"racecar\"):\n    return s\n\nassert f(g())\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], k=2) -> bool:\n    \"\"\"\n    Check if there exists a sublist in the given list that contains exactly k different elements.\n    \"\"\"\n    n = len(lst)\n    for i in range(n):\n        for j in range(i+k, n+1):\n            if len(set(lst[i:j])) == k:\n                return True\n    return False\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst\n\nassert f(g())\n",
        "idx_generation": 210,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> List[int]:\n    \"\"\"\n    Find the indices of the target number in the given matrix.\n    \n    Sample Input:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    target = 5\n    \n    Sample Output:\n    [1, 1]\n    \"\"\"\n    indices = []\n    for i, row in enumerate(matrix):\n        if target in row:\n            indices.append([i, row.index(target)])\n    return indices\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5):\n    return matrix, target\n\nassert f(*g()) == [[1, 1]]\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is divisible by 7\"\"\"\n    return n % 7 == 0\n\ndef g():\n    return 63\n\nassert f(g())\n",
        "idx_generation": 242,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list where the sum of their squares is a perfect square.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            square_sum = arr[i]**2 + arr[j]**2\n            if math.isqrt(square_sum)**2 == square_sum:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 274,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, char: str, case_sensitive: bool = True) -> bool:\n    \"\"\"\n    Check if the given character is the first character of the string.\n    Return True if it is, False otherwise.\n    \"\"\"\n    if case_sensitive:\n        return string[0] == char\n    else:\n        return string[0].lower() == char.lower()\n\ndef g(string=\"Hello\", char=\"H\", case_sensitive=True):\n    return string, char\n\nassert f(*g())\n\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the given list that contains exactly k consecutive numbers.\n    \"\"\"\n    nums.sort()\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] - nums[i-1] == 1:\n            count += 1\n            if count == k:\n                return True\n        else:\n            count = 1\n    return False\n\ndef g(k=3):\n    nums = [1, 2, 3, 4, 5, 7, 8, 9, 10]\n    return nums, k\n\nassert f(*g())\n",
        "idx_generation": 190,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a given string contains exactly two consecutive 'a's followed by three consecutive 'b's.\"\"\"\n    return 'aabbb' in s\n\ndef g():\n    return 'aabbb'\n\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, lst=['cat', 'dog', 'rabbit', 'hamster']) -> bool:\n    \"\"\"Check if a given string is in the list\"\"\"\n    return s in lst\n\ndef g(lst=['cat', 'dog', 'rabbit', 'hamster']):\n    return 'hamster'\n\nassert f(g())\n",
        "idx_generation": 171,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a power of two.\n\n    Sample Input:\n    n = 16\n\n    Sample Output:\n    True\n    \"\"\"\n    if n == 0:\n        return False\n    while n % 2 == 0:\n        n //= 2\n    return n == 1\n\ndef g():\n    n = 16\n    return n\n\nassert f(g()) == True\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a=\"hello\") -> bool:\n    \"\"\"Check if x is a substring of a.\"\"\"\n    return x in a\n\ndef g(a = \"hello\"):\n    return a[1:3]\n\nassert f(g())\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> str:\n    \"\"\"\n    Reverse the order of words in a given string.\n\n    Returns the reversed string.\n\n    Sample Input:\n    \"Hello World\"\n\n    Sample Output:\n    \"World Hello\"\n    \"\"\"\n    words = string.split()\n    return ' '.join(words[::-1])\n\ndef g(string=\"Hello World\"):\n    return string\n\nassert f(g()) == \"World Hello\"\n\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=8, b=12, upper_bound=100) -> bool:\n    \"\"\"Check if the given number is a common multiple of two integers and is within the upper bound.\"\"\"\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\n\ndef g(a=8, b=12, upper_bound=100):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\n\nassert f(g())\n",
        "idx_generation": 151,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers nums, return a list of all the missing numbers in the range from the minimum to the maximum number in the list.\n    \"\"\"\n    missing_nums = []\n    min_num = min(nums)\n    max_num = max(nums)\n    all_nums = set(range(min_num, max_num+1))\n    for num in all_nums:\n        if num not in nums:\n            missing_nums.append(num)\n    return missing_nums\n\ndef g():\n    nums = [1, 3, 5, 7, 9]\n    return nums\n\nassert f(g()) == [2, 4, 6, 8]\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    \"\"\"Return the matrix.\"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a perfect square.\n    \"\"\"\n    return sqrt(n) == int(sqrt(n))\n\ndef g():\n    return 16\n\nassert f(g())\n",
        "idx_generation": 390,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(n=17):\n    return n\n\nassert f(g())\n\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the given list whose sum is equal to the target.\n    \"\"\"\n    n = len(nums)\n    \n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n    \n    for i in range(n + 1):\n        dp[i][0] = True\n    \n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    \n    return dp[n][target]\n\ndef g(nums: List[int], target: int = 9) -> List[int]:\n    return nums\n\nassert f(g([2, 3, 5, 7]), 10)\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"\n    Check if a string contains a valid phone number.\n    \"\"\"\n    import re\n    pattern = \"^[0-9]{3}-[0-9]{3}-[0-9]{4}$\"\n    return bool(re.match(pattern, s))\ndef g(n = 5):\n    return '123-456-7890'\nassert f(g())\n",
        "idx_generation": 409,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is symmetric.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 157,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Find the maximum sum of a subarray in the given list.\n\n    Sample Input:\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n    Sample Output:\n    6\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in arr:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef g():\n    return [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\nassert f(g()) == 6\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int = 5) -> bool:\n    \"\"\"Check if the target number is present in any row of the matrix\"\"\"\n    return any(target in row for row in matrix)\n\ndef g(target: int = 5):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(d: Dict[str, int], key: str, value: int) -> bool:\n    \"\"\"\n    Given a dictionary, a key, and a value, determine if the key exists in the dictionary and its corresponding\n    value is a multiple of the given value.\n    \"\"\"\n    if key in d and d[key] % value == 0:\n        return True\n    return False\n\ndef g():\n    return {\"apple\": 5, \"banana\": 8, \"cherry\": 12}, \"cherry\", 3\n\nassert f(*g())\n",
        "idx_generation": 364,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=5, length=20) -> bool:\n    \"\"\"Check if a given string has at least a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) >= count and len(string) == length\n\ndef g(substring = 'abc', count = 5, length = 20):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '$'\n\nassert f(g())\n",
        "idx_generation": 412,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str, sub_str='abcde') -> bool:\n    \"\"\"Check if both s1 and s2 contain the sub_str\"\"\"\n    return sub_str in s1 and sub_str in s2\n\ndef g(s1='abcdef', s2='xyzabcde'):\n    return s1, s2\n\nassert f(*g())\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target = 7) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that adds up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5, 6]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 93,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python', max_len=10) -> bool:\n    \"\"\"\n    Check if a string is a valid abbreviation of a word.\n    \"\"\"\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\n\ndef g(word = 'python', max_len = 10):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\"\n\nassert f(g())\n\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, calculate the sum of all the elements in the matrix.\n    Return the sum as an integer.\n    \"\"\"\n    return sum(sum(row) for row in matrix)\n\ndef g() -> List[List[int]]:\n    \"\"\"\n    Generate a random matrix of integers.\n    \"\"\"\n    return [[random.randint(1, 10) for _ in range(3)] for _ in range(3)]\n\nassert f(g()) > 0\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(sentence: str, word: str, pattern=r'\\b\\w+\\b') -> bool:\n    \"\"\"Check if the given word is present in the sentence and it starts with a consonant\"\"\"\n    return re.search(pattern, sentence) is not None and word[0].lower() not in ['a', 'e', 'i', 'o', 'u']\n\ndef g(sentence='This is a sample sentence', word='sample', pattern=r'\\b\\w+\\b'):\n    return sentence, word\n\nassert f(*g())\n",
        "idx_generation": 390,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a given string is a palindrome.\n    \"\"\"\n    s = s.lower()\n    s = re.sub(r'[^a-z0-9]', '', s)\n    return s == s[::-1]\n\ndef g():\n    return \"A man, a plan, a canal: Panama\"\n\nassert f(g())\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Return a list of duplicate numbers from the given list.\n    \"\"\"\n    duplicates = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j] and nums[i] not in duplicates:\n                duplicates.append(nums[i])\n    return duplicates\n\ndef g():\n    return [1, 2, 3, 2, 4, 5, 6, 7, 7, 8, 9]\n\nassert f(g()) == [2, 7]\n\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, return a new matrix with its columns reversed.\n    \"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    reversed_matrix = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            reversed_matrix[i][j] = matrix[i][m-1-j]\n    return reversed_matrix\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\n\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a duplicate element.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(arr) != len(set(arr))\n\ndef g():\n    return [1, 2, 3, 4, 5, 5]\n\nassert f(g())\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Given two strings s and t, check if t is an anagram of s.\n\n    Sample input:\n    s = \"listen\"\n    t = \"silent\"\n\n    Sample output:\n    True\n\n    Explanation:\n    The letters of \"silent\" can be rearranged to form \"listen\".\n    \"\"\"\n    if len(s) != len(t):\n        return False\n    s_count = [0] * 26\n    t_count = [0] * 26\n    for char in s:\n        s_count[ord(char) - ord('a')] += 1\n    for char in t:\n        t_count[ord(char) - ord('a')] += 1\n    return s_count == t_count\n\ndef g(s=\"listen\", t=\"silent\"):\n    return s, t\n\nassert f(*g())\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=24, b=18773099) -> bool:\n    \"\"\"Check if the sum of x and a is equal to b.\"\"\"\n    return x + a == b\n\ndef g(a = 24, b = 18773099):\n    return b - a\n\nassert f(g())\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list whose sum is equal to the target.\n    \"\"\"\n    prefix_sum = 0\n    seen = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in seen:\n            return True\n        seen.add(prefix_sum)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 9\n\nassert f(*g())\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a duplicate number.\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        if num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, determine if there is a subsequence of the list whose sum is equal to 0.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if sum(nums[i:j+1]) == 0:\n                return True\n    return False\n\ndef g(nums=[4, 2, -3, 1, 6]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 42,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(s: str, n=1) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome when reversed n number of times.\n\n    Example:\n    s = \"racecar\" and n = 3\n\n    The reversed string \"racecar\" is still a palindrome, so the function should return True.\n    \"\"\"\n    for _ in range(n):\n        s = s[::-1]\n    return s == s[::-1]\n\ndef g(n=3):\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target value, find all pairs of numbers that sum up to the target.\n    Returns a list of tuples containing the pairs of numbers.\n\n    Example:\n    nums = [2, 4, 5, 7, 8]\n    target = 9\n\n    The pairs of numbers that sum up to 9 are: [(2, 7), (4, 5)]\n    \"\"\"\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                pairs.append((nums[i], nums[j]))\n    return pairs\n\ndef g(nums=[2, 4, 5, 7, 8], target=9):\n    return nums, target\n\nassert f(*g()) == [(2, 7), (4, 5)]\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum: int = 100, k: int = 3) -> bool:\n    \"\"\"\n    Find a subsequence of k numbers from the given list whose sum is equal to the target sum.\n    \"\"\"\n    def subset_sum(numbers, target_sum, k):\n        if target_sum == 0 and k == 0:\n            return True\n        if target_sum != 0 and k == 0:\n            return False\n        if numbers[0] > target_sum:\n            return subset_sum(numbers[1:], target_sum, k)\n        return subset_sum(numbers[1:], target_sum - numbers[0], k - 1) or subset_sum(numbers[1:], target_sum, k)\n    \n    return subset_sum(numbers, target_sum, k)\n\ndef g(target_sum: int = 100, k: int = 3):\n    numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 406,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string contains duplicate characters.\n    \"\"\"\n    return len(set(s)) != len(s)\n\ndef g():\n    return \"hello\"\n\nassert f(g())\n",
        "idx_generation": 369,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    A matrix is symmetric if it is equal to its transpose.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    transpose = [[matrix[j][i] for j in range(rows)] for i in range(cols)]\n    return matrix == transpose\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    \"\"\"Return the matrix.\"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the sum of all positive numbers is greater than the sum of all negative numbers.\n    \"\"\"\n    positive_sum = sum(num for num in nums if num > 0)\n    negative_sum = sum(num for num in nums if num < 0)\n    return positive_sum > negative_sum\n\ndef g():\n    return [1, -2, 3, -4, 5, -6]\n\nassert f(g())\n",
        "idx_generation": 149,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"\n    Check if the given string has at least n occurrences of each vowel (a, e, i, o, u).\n    Return True if the string has at least n occurrences of each vowel, False otherwise.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = {vowel: 0 for vowel in vowels}\n    \n    for char in s.lower():\n        if char in vowels:\n            count[char] += 1\n    \n    return all(count[vowel] >= n for vowel in vowels)\n\ndef g(n=2):\n    \"\"\"\n    Generate a string with at least n occurrences of each vowel.\n    \"\"\"\n    return 'aeiou' * n\n\nassert f(g(), n=2)\n",
        "idx_generation": 193,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nimport random\n\ndef f(lst: List[int]) -> List[int]:\n    \"\"\"\n    Shuffle the given list of integers randomly.\n\n    Sample Input:\n    lst = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    [4, 2, 1, 5, 3]\n    \"\"\"\n    random.shuffle(lst)\n    return lst\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) != g()\n\n",
        "idx_generation": 364,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a given string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    s = \"racecar\"\n    return s\n\nassert f(g())\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a pangram.\"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    return all(letter in string.lower() for letter in alphabet)\n\ndef g(string: str = \"The quick brown fox jumps over the lazy dog\"):\n    return string\n\nassert f(g()) == True\n",
        "idx_generation": 378,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list whose sum is equal to k.\n    \"\"\"\n    sum_set = set()\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        if curr_sum == k:\n            return True\n        if curr_sum - k in sum_set:\n            return True\n        sum_set.add(curr_sum)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], k=9):\n    return nums\n\nassert f(g(), 9)\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(s: str, substring: str) -> bool:\n    \"\"\"\n    Check if a string contains all characters from a given substring.\n    \"\"\"\n\n    return all(char in s for char in substring)\n\ndef g(substring='abc'):\n    return substring + \"def\"\n\nassert f(g(), 'abcdef')\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(words: List[str], target='python', max_words=4) -> bool:\n    \"\"\"Find a selection of at most max_words words whose concatenation is equal to the target string, without duplicates.\"\"\"\n    return ''.join(words)[:len(target)] == target and len(words) <= max_words\ndef g(target='python', max_words=4):\n    from itertools import combinations\n    words = ['py', 'th', 'on', 'is', 'a', 'programming', 'language']\n    for n in range(max_words + 1):\n        for c in combinations(words, n):\n            if ''.join(c) == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 177,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target = 10) -> bool:\n    \"\"\"Check if there exists two numbers in the list that sum up to the target value.\"\"\"\n    return any(target - num in arr for num in arr)\ndef g(target = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 425,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if the target number exists in the given matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5):\n    return matrix, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 425,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the smallest positive integer that is not present in the list.\n    Return the smallest positive integer.\n\n    Sample Input:\n    [1, 3, 6, 4, 1, 2]\n\n    Sample Output:\n    5\n    \"\"\"\n    n = len(arr)\n    # Creating a set of positive integers up to n+1\n    num_set = set(range(1, n+2))\n    # Removing the numbers that are present in the list\n    for num in arr:\n        if num in num_set:\n            num_set.remove(num)\n    # Returning the smallest positive integer\n    return min(num_set)\n\ndef g():\n    return [1, 3, 6, 4, 1, 2]\n\nassert f(g()) == 5\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 7\n\nassert f(g())\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(words: List[str], target_length: int, target_word: str, exclude_word: str) -> bool:\n    \"\"\"\n    Check if there is a word in the list that has a length greater than or equal to the target length, starts with the target word, and does not contain the exclude word.\n    \"\"\"\n    for word in words:\n        if len(word) >= target_length and word.startswith(target_word) and exclude_word not in word:\n            return True\n    return False\n\ndef g(target_word='a', exclude_word='b'):\n    return ['apple', 'banana', 'cat', 'dog']\n\nassert f(g(), 4, 'a', 'b')\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nimport re\n\ndef f(s: str, pattern: str) -> bool:\n    \"\"\"\n    Check if a string matches a given regular expression pattern.\n    \"\"\"\n    return re.match(pattern, s) is not None\n\ndef g(pattern: str):\n    return \"Hello, World!\"\n\nassert f(g(\"Hello, .*!\"), \"Hello, .*!\")\n\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst = [1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if n is present in the list\"\"\"\n    return n in lst\n\ndef g(n = 3):\n    return n\n\nassert f(g())\n",
        "idx_generation": 136,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any contiguous subarray of the list.\n\n    Sample Input:\n    [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n    Sample Output:\n    6\n    Explanation: The contiguous subarray [4, -1, 2, 1] has the maximum sum of 6.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n\ndef g():\n    return [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\nassert f(g()) == 6\n\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"Check if any word in the list is a palindrome\"\"\"\n    return any(word == word[::-1] for word in words)\n\ndef g(words=['level', 'hello', 'racecar']):\n    return words\n\nassert f(g())\n",
        "idx_generation": 169,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str = 'programming') -> bool:\n    \"\"\"\n    Check if a given string contains a specific target string in a case-insensitive manner.\n    Returns True if it does, False otherwise.\n    \"\"\"\n    return target.lower() in s.lower()\n\ndef g(target: str = 'programming'):\n    return 'I love ' + target + ' puzzles.'\n\nassert f(g())\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if there exists a row or column that contains only negative numbers.\n    Return True if such a row or column exists, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    row_negative = [0] * rows\n    col_negative = [0] * cols\n\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] < 0:\n                row_negative[i] = 1\n                col_negative[j] = 1\n\n    return any(row_negative) or any(col_negative)\n\ndef g(matrix=[[1, -2, 3], [-4, 5, -6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if there exists a subsequence that forms an arithmetic progression, otherwise return False.\n    \"\"\"\n    if len(arr) < 3:\n        return False\n    \n    diff = arr[1] - arr[0]\n    for i in range(2, len(arr)):\n        if arr[i] - arr[i-1] != diff:\n            return False\n    return True\n\ndef g(arr: List[int]):\n    return arr\n\nassert f(g([1, 3, 5, 7, 9]))\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=10) -> bool:\n    \"\"\"Check if a number is divisible by both a and b\"\"\"\n    return n % a == 0 and n % b == 0\n\ndef g(a=5, b=10):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a: List[int]) -> bool:\n    \"\"\"\n    Check if a given number is a prime number.\n\n    Sample Input:\n    n = 7\n    a = [2, 3, 5, 7, 11]\n\n    Sample Output:\n    True\n    \"\"\"\n    return n in a\n\ndef g(n=7, a=[2, 3, 5, 7, 11]):\n    return n, a\n\nassert f(*g()) == True\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=2) -> bool:\n    \"\"\"Check if there exists a subarray of length k such that the sum of its elements is divisible by k and the product of its elements is divisible by k\"\"\"\n    prefix_sum = [0]\n    prefix_product = [1]\n    for num in arr:\n        prefix_sum.append(prefix_sum[-1] + num)\n        prefix_product.append(prefix_product[-1] * num)\n    \n    for i in range(k, len(prefix_sum)):\n        if prefix_sum[i] % k == 0 and prefix_product[i] % k == 0:\n            return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    k = 4\n    return arr, k\n\nassert f(*g())\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisor=2) -> bool:\n    \"\"\"Check if n is a power of the given divisor.\"\"\"\n    return n > 0 and (n & (n - 1)) == 0 and n % divisor == 0\n\ndef g(divisor=2):\n    return 64\n\nassert f(g())\n",
        "idx_generation": 109,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, ignore_case=True) -> bool:\n    \"\"\"Check if a given string is a palindrome.\"\"\"\n    if ignore_case:\n        s = s.lower()\n    return s == s[::-1]\n\ndef g(ignore_case=True):\n    return \"Racecar\"\n\nassert f(g())\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n\n    Example:\n    nums = [1, 2, 3, 2, 1]\n\n    The list is a palindrome, so the function should return True.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 216,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> List[int]:\n    \"\"\"\n    Find the indices of the target number in the given matrix.\n    \n    Sample Input:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    target = 5\n    \n    Sample Output:\n    [1, 1]\n    \"\"\"\n    indices = []\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                indices.append([j, i])\n    return indices\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5):\n    return matrix, target\n\nassert f(*g()) == [[1, 1]]\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a prime number.\n    A prime number is a number greater than 1 that has no positive divisors other than 1 and itself.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(n=17):\n    return n\n\nassert f(g())\n",
        "idx_generation": 264,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"\n    Given a list of positive integers, find if there is a subset of the list that has a product greater than or equal to the target_sum.\n    \"\"\"\n    def subset_product(numbers, target_sum, index, current_product):\n        if current_product >= target_sum:\n            return True\n        if index >= len(numbers):\n            return False\n        include = subset_product(numbers, target_sum, index + 1, current_product * numbers[index])\n        exclude = subset_product(numbers, target_sum, index + 1, current_product)\n        return include or exclude\n\n    return subset_product(numbers, target_sum, 0, 1)\n\ndef g(numbers=[10, 20, 30, 40, 50]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 277,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if a given string is a palindrome.\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n    \"\"\"\n    return string == string[::-1]\n\ndef g(string = \"racecar\"):\n    return string\n\nassert f(g())\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the given list that contains exactly k unique numbers.\n    \"\"\"\n    unique_nums = set(nums)\n    return len(unique_nums) >= k\n\ndef g(k=3):\n    nums = [1, 2, 3, 4, 5, 5, 6, 7, 8]\n    return nums, k\n\nassert f(*g())\n",
        "idx_generation": 190,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: List[str]) -> int:\n    \"\"\"Count the number of strings in the given list that start with a vowel.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for word in s:\n        if word[0].lower() in vowels:\n            count += 1\n    return count\n\ndef g():\n    return ['apple', 'banana', 'cat', 'dog', 'elephant', 'fish', 'giraffe', 'horse', 'iguana']\n\nassert f(g()) == 3\n\n",
        "idx_generation": 319,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if a string contains any of the given words\"\"\"\n    return any(word in string for word in words)\n\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return \"This string contains one of the given words: \" + \" \".join(words)\n\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\n\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a given number is a perfect square.\n    Return True if the number is a perfect square, False otherwise.\n    \"\"\"\n    if n < 0:\n        return False\n    sqrt = int(math.sqrt(n))\n    return sqrt * sqrt == n\n\ndef g():\n    return 16\n\nassert f(g())\n\n",
        "idx_generation": 202,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr: str) -> bool:\n    \"\"\"Check if a substring is present in a string.\"\"\"\n    return substr in s\ndef g(s: str, substr: str):\n    return (s, substr)\nassert f(*g(\"Hello World!\", \"World\"))\n",
        "idx_generation": 370,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> str:\n    \"\"\"\n    Reverse the order of words in the given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)\n\ndef g():\n    return 'Python is a powerful programming language'\n\nassert f(g()) == 'language programming powerful a is Python'\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=5, upper_bound=100) -> bool:\n    \"\"\"Find the largest common divisor of two integers.\"\"\"\n    return a % n == 0 and b % n == 0 and (0 < n <= upper_bound)\ndef g(a = 2, b = 5, upper_bound = 100):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g())\n",
        "idx_generation": 250,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Return a new list with all duplicate values removed\"\"\"\n    return list(set(nums))\n\ndef g(nums: List[int]):\n    return nums\n\n# Test case\ntest_nums = [1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9]\nassert f(g(test_nums)) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a symmetric matrix.\n    A symmetric matrix is a square matrix that is equal to its transpose.\n    \"\"\"\n    transpose_matrix = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n    return matrix == transpose_matrix\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a number is a perfect square.\n\n    Sample Input:\n    n = 49\n\n    Sample Output:\n    True\n    \"\"\"\n    return sqrt(n) == int(sqrt(n))\n\ndef g(n=49):\n    return n\n\nassert f(g()) == True\n\n",
        "idx_generation": 403,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Remove all even numbers from the given list of numbers.\n    Return the list with even numbers removed.\n    \"\"\"\n    return [num for num in nums if num % 2 != 0]\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == [1, 3, 5]\n\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"\n    Check if a string contains a valid email address.\n    \"\"\"\n    import re\n    pattern = \"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+\"\n    return bool(re.match(pattern, s))\ndef g(n = 5):\n    return 'test@example.com'\nassert f(g())\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine if it is a square matrix.\n    Return True if the matrix is square, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\n# Test case\ntest_matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g(test_matrix))\n",
        "idx_generation": 210,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the product of all the elements in the given list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    120\n    \"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g()) == 120\n\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(lst: List[int], target_len=6) -> bool:\n    \"\"\"\n    Check if there exists a permutation of the given list with a length divisible by the target length.\n    \"\"\"\n    perms = itertools.permutations(lst)\n    for perm in perms:\n        if len(perm) % target_len == 0:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 55,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(d: Dict[str, int], key: str) -> bool:\n    \"\"\"\n    Given a dictionary and a key, determine if the key exists in the dictionary and its corresponding\n    value is a multiple of the length of the key.\n    \"\"\"\n    if key in d and d[key] % len(key) == 0:\n        return True\n    return False\n\ndef g():\n    return {\"apple\": 5, \"banana\": 6, \"cherry\": 18}, \"cherry\"\n\nassert f(*g())\n",
        "idx_generation": 428,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=5, length=20) -> bool:\n    \"\"\"Check if a given string has exactly a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\n\ndef g(substring = 'abc', count = 5, length = 20):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '$'\n\nassert f(g())\n",
        "idx_generation": 412,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr: str) -> bool:\n    \"\"\"\n    Given a string and a substring, determine if the substring appears at least twice consecutively in the string.\n    \"\"\"\n    if substr * 2 in s:\n        return True\n    return False\n\ndef g():\n    return \"hellohello\", \"hello\"\n\nassert f(*g())\n",
        "idx_generation": 166,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target = 20) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the given list that adds up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums = [4, 6, 12, 3, 9, 5]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 93,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, letters=['a', 'b', 'c', 'd', 'e'], target='abcde') -> bool:\n    \"\"\"\n    Rearrange the letters in the list to form a target word.\n    \"\"\"\n    return sorted(word) == sorted(letters) and \"\".join(letters) == target\ndef g(letters=['a', 'b', 'c', 'd', 'e'], target='abcde'):\n    if len(letters) != len(target):\n        return \"\"\n    return \"\".join(letters)\nassert f(g())\n\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is a square matrix.\n\n    A square matrix has the same number of rows and columns.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    This is a square matrix because it has 3 rows and 3 columns.\n    \"\"\"\n    rows = len(matrix)\n    for row in matrix:\n        if len(row) != rows:\n            return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == True\n\n",
        "idx_generation": 290,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(words: List[str]) -> List[str]:\n    \"\"\"\n    Given a list of words, return a new list containing only the words that start with a vowel.\n\n    Sample Input:\n    words = [\"apple\", \"banana\", \"orange\", \"pear\", \"kiwi\"]\n\n    Sample Output:\n    [\"apple\", \"orange\"]\n    \"\"\"\n    vowel_words = [word for word in words if re.match(r'[aeiouAEIOU]', word)]\n    return vowel_words\n\ndef g(words=[\"apple\", \"banana\", \"orange\", \"pear\", \"kiwi\"]):\n    return words\n\nassert f(g()) == [\"apple\", \"orange\"]\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a pangram.\n\n    A pangram is a sentence that contains every letter of the alphabet at least once.\n\n    Example:\n    s = \"The quick brown fox jumps over the lazy dog\"\n\n    The string is a pangram, so the function should return True.\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    return all(letter in s.lower() for letter in alphabet)\n\ndef g():\n    return \"The quick brown fox jumps over the lazy dog\"\n\nassert f(g())\n",
        "idx_generation": 216,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains duplicate elements.\n\n    Sample Input:\n    `nums = [1, 2, 3, 4, 5, 1]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 1]\n\nassert f(g())\n\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(ls: List[str]) -> bool:\n    \"\"\"\n    Find a list of strings whose length (viewed as a string) is equal to the lexicographically largest element\n    and is equal to the lexicographically smallest element.\n    \"\"\"\n    return len(set(ls)) == 1 and len(ls[0]) == len(str(len(ls[0])))\n\ndef g():\n    return ['1']\n    \nassert f(g())\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom collections import Counter\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if a list contains duplicate elements.\n    \"\"\"\n    counts = Counter(arr)\n    for count in counts.values():\n        if count > 1:\n            return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5, 5]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 258,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Check if the given two strings are anagrams of each other.\n    Return True if they are anagrams, False otherwise.\n    \"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g():\n    s1 = \"listen\"\n    s2 = \"silent\"\n    return s1, s2\n\nassert f(*g()) == True\n\n",
        "idx_generation": 407,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=24, b=18773099, c=100) -> bool:\n    \"\"\"\n    Check if the given conditions are met and return True or False accordingly.\n\n    Conditions:\n    - x is positive\n    - a is greater than 50\n    - c is less than 200\n    - x - a is equal to b\n\n    Returns:\n    True if the conditions are met, False otherwise.\n    \"\"\"\n    if x > 0 and a > 50 and c < 200:\n        return x - a == b\n    else:\n        return x + a == b\n\ndef g(a = 24, b = 18773099, c = 100):\n    \"\"\"\n    Return the value of b + a if the given conditions are met, otherwise return b - a.\n\n    Conditions:\n    - a is greater than 50\n    - b is greater than a\n    - c is less than 200\n\n    Returns:\n    b + a if the conditions are met, otherwise b - a.\n    \"\"\"\n    if a > 50 and b > a and c < 200:\n        return b + a\n    else:\n        return b - a\n\nassert f(g())\n\n",
        "idx_generation": 419,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target number, find three numbers in the list that sum up to the target.\n    Return True if such a triplet exists, False otherwise.\n    \"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g()) == True\n",
        "idx_generation": 354,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains both positive and negative numbers.\n    Return True if it does, False otherwise.\n    \"\"\"\n    positive = False\n    negative = False\n    for num in numbers:\n        if num > 0:\n            positive = True\n        elif num < 0:\n            negative = True\n    return positive and negative\n\ndef g():\n    \"\"\"\n    Generate a list of 10 random integers.\n    \"\"\"\n    import random\n    return [random.randint(-100, 100) for _ in range(10)]\n\nassert f(g())\n",
        "idx_generation": 369,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exist three numbers in the list that add up to the target integer. The numbers can be repeated.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            for k in range(len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[-1, 0, 1, 2, -1, -4]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g(s=\"level\"):\n    \"\"\"Reverse the given string.\"\"\"\n    return s[::-1]\n\nassert f(g())\n",
        "idx_generation": 479,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there exists a pair of numbers\n    in the list whose sum is equal to the target.\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        if (target - num) in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return [2, 3, 5, 7, 11, 13, 17, 19], 20\n\nassert f(*g())\n",
        "idx_generation": 47,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum: int = 100, k: int = 3) -> bool:\n    \"\"\"\n    Find a subsequence of k numbers from the given list whose sum is equal to the target sum.\n    \"\"\"\n    def subset_sum(numbers, target_sum, k):\n        if target_sum == 0 and k == 0:\n            return True\n        if target_sum != 0 and k == 0:\n            return False\n        if numbers[0] > target_sum:\n            return subset_sum(numbers[1:], target_sum, k)\n        return subset_sum(numbers[1:], target_sum - numbers[0], k - 1) or subset_sum(numbers[1:], target_sum, k)\n    \n    return subset_sum(numbers, target_sum, k)\n\ndef g(target_sum: int = 100, k: int = 3):\n    numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    return numbers\n\nassert f(g(), 30, 1)\n",
        "idx_generation": 457,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(s: str) -> int:\n    \"\"\"\n    Count the number of vowels in a string.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count\n\ndef g():\n    return 'Hello, World!'\n\nassert f(g()) == 3\n\n",
        "idx_generation": 392,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n\n    Sample Input:\n    matrix = [[2, 7, 6],\n              [9, 5, 1],\n              [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    target_sum = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for col in range(cols):\n        col_sum = 0\n        for row in range(rows):\n            col_sum += matrix[row][col]\n        if col_sum != target_sum:\n            return False\n    # Check diagonals\n    diagonal_sum = 0\n    anti_diagonal_sum = 0\n    for i in range(rows):\n        diagonal_sum += matrix[i][i]\n        anti_diagonal_sum += matrix[i][rows-i-1]\n    if diagonal_sum != target_sum or anti_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g():\n    matrix = [[2, 7, 6],\n              [9, 5, 1],\n              [4, 3, 8]]\n    return matrix\n\nassert f(g()) == True\n\n\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the sum of the numbers is divisible by the length of the list\"\"\"\n    return sum(numbers) % len(numbers) == 0\n\ndef g(numbers = [1, 2, 3, 4, 5]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=3) -> bool:\n    \"\"\"\n    Given a string, check if it contains at least n distinct vowels. Return True if it does, False otherwise.\n    \"\"\"\n    vowels = set('aeiou')\n    count = 0\n    for c in string.lower():\n        if c in vowels:\n            count += 1\n            if count == n:\n                return True\n    return False\n\ndef g(string=\"Hello, World!\"):\n    return string\n\nassert f(g())\n",
        "idx_generation": 219,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_index=2) -> int:\n    \"\"\"\n    Find the sum of the numbers in the list up to the target_index.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    6\n    \"\"\"\n    return sum(numbers[:target_index+1])\n\ndef g(target_index=2):\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 6\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"\n    Check if a number is a prime number.\n\n    Sample Input:\n    num = 13\n\n    Sample Output:\n    True\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    num = 13\n    return num\n\nassert f(g()) == True\n",
        "idx_generation": 265,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if a string is a pangram.\n    \"\"\"\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    return alphabet.issubset(string.lower())\n\ndef g(string = \"The quick brown fox jumps over the lazy dog\"):\n    return string\n\nassert f(g())\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=4) -> bool:\n    \"\"\"\n    Check if there are at least k even numbers in the given list.\n    Return True if there are at least k even numbers, False otherwise.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num % 2 == 0:\n            count += 1\n            if count == k:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 4, 5, 6, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 198,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring: str) -> bool:\n    \"\"\"\n    Check if a given substring is present in the given string.\n\n    Sample Input:\n    s = 'programming'\n    substring = 'gram'\n\n    Sample Output:\n    True\n    \"\"\"\n    return substring in s\n\ndef g():\n    s = 'programming'\n    substring = 'gram'\n    return s, substring\n\nassert f(*g())\n\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the sum of all the numbers in the list.\n    \"\"\"\n    return sum(nums)\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 15\n",
        "idx_generation": 180,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> int:\n    \"\"\"\n    Find the number of pairs of elements in the given list that add up to the target number.\n    Return the count of pairs.\n    \"\"\"\n    num_dict = {}\n    count = 0\n    for num in lst:\n        if target - num in num_dict:\n            count += num_dict[target - num]\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n    return count\n\ndef g(lst=[1, 2, 3, 4, 5], target=6):\n    return lst, target\n\n# Test case\nassert f(*g()) == 2\n\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum element in the given list of numbers.\n    \"\"\"\n    max_num = float('-inf')\n    for num in nums:\n        if num > max_num:\n            max_num = num\n    return max_num\n\ndef g(nums=[1, 5, 2, 8, 3, 10]):\n    return nums\n\nassert f(g()) == 10\n",
        "idx_generation": 429,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all even numbers in the list.\n    Return the sum of even numbers.\n\n    Sample Input:\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    30\n    \"\"\"\n    even_sum = 0\n    for num in arr:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 30\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(i: int) -> bool:\n    \"\"\"Check if the given number is prime.\"\"\"\n    if i < 2:\n        return False\n    for j in range(2, int(i ** 0.5) + 1):\n        if i % j == 0:\n            return False\n    return True\n\ndef g():\n    return 13\n\nassert f(g())\n",
        "idx_generation": 367,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(words: List[str], target_length: int, target_word: str, exclude_word: str) -> bool:\n    \"\"\"\n    Check if there is a word in the list that has a length greater than or equal to the target length, starts with the target word, and does not contain the exclude word.\n    \"\"\"\n    for word in words:\n        if len(word) >= target_length and word.startswith(target_word) and exclude_word not in word:\n            return True\n    return False\n\ndef g(target_word='a', exclude_word='b'):\n    return ['apple', 'banana', 'cat', 'dog']\n\nassert f(g(), 5, 'a', 'b')\n",
        "idx_generation": 409,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], max_length=5) -> bool:\n    \"\"\"\n    Check if any word in the list exceeds the maximum length.\n    \"\"\"\n    return any(len(word) > max_length for word in words)\n\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry'], max_length=5):\n    \"\"\"\n    Generate a list of words and a maximum length.\n    \"\"\"\n    return words\n\nassert f(g())\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int]) -> bool:\n    \"\"\"\n    Check if a given list of integers contains any duplicates.\n    Return True if the list contains duplicates, and False otherwise.\n    \"\"\"\n    return len(set(x)) < len(x)\n\ndef g():\n    return [1, 2, 3, 4, 2]\n\nassert f(g())\n\n",
        "idx_generation": 142,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=\"apple\") -> bool:\n    \"\"\"Check if the given string contains the target word\"\"\"\n    return target in s\n\ndef g(target=\"apple\"):\n    return \"I love eating \" + target\n\nassert f(g())\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='e') -> bool:\n    \"\"\"\n    Check if the given string contains the target character.\n    \"\"\"\n    return target in s\n\ndef g(s='puzzle'):\n    return s\n\nassert f(g())\n\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Find two numbers in the list whose product is equal to the sum of the list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    The sum of the list is 1+2+3+4+5 = 15\n    The product of two numbers in the list is 3*5 = 15\n    Therefore, the puzzle is solved.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == sum(nums):\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 76,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers is sorted in strictly increasing order.\n    \"\"\"\n    return all(lst[i] < lst[i+1] for i in range(len(lst)-1))\n\ndef g():\n    \"\"\"\n    Generate a sorted list of integers in strictly increasing order.\n    \"\"\"\n    return list(range(1, 101))\n\nassert f(g())\n\n",
        "idx_generation": 403,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=5, c=7) -> bool:\n    \"\"\"Check if n is divisible by a, b, and c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a = 3, b = 5, c = 7):\n    return a * b * c * 2\nassert f(g())\n",
        "idx_generation": 178,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> int:\n    \"\"\"\n    Calculate the factorial of a given number.\n\n    Sample Input:\n    n = 5\n\n    Sample Output:\n    120\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * f(n-1)\n\ndef g():\n    return 5\n\nassert f(g()) == 120\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of length k such that the sum of its elements is divisible by k and the product of its elements is divisible by k\"\"\"\n    prefix_sum = [0]\n    prefix_product = [1]\n    for num in arr:\n        prefix_sum.append(prefix_sum[-1] + num)\n        prefix_product.append(prefix_product[-1] * num)\n    \n    for i in range(k, len(prefix_sum)):\n        if prefix_sum[i] % k == 0 and prefix_product[i] % k == 0:\n            return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    k = 5\n    return arr, k\n\nassert f(*g())\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisor=3) -> bool:\n    \"\"\"Check if n is divisible by the given divisor.\"\"\"\n    return n % divisor == 0\n\ndef g(divisor=3):\n    return 15\n\nassert f(g())\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a given string is a valid palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g(s = \"racecar\"):\n    return s\n\nassert f(g())\n",
        "idx_generation": 192,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 217,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"Check if a target number is present in a matrix.\"\"\"\n    return any(target in row for row in matrix)\ndef g(target = 8):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if a number is divisible by k\"\"\"\n    return n % k == 0\n\ndef g(k=3):\n    return 15\n\nassert f(g())\n",
        "idx_generation": 266,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Given a list of positive integers, return True if there exists a pair of numbers in the list such that their sum is a perfect square, otherwise return False.\n    \"\"\"\n    squares = set()\n    for num in range(1, int(max(numbers)**0.5) + 1):\n        squares.add(num**2)\n    \n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] in squares:\n                return True\n    return False\n\ndef g(numbers=[1, 3, 5, 7, 9]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 319,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, char: str) -> List[int]:\n    \"\"\"\n    Find the indices of the given character in the string.\n    Return a list of indices where the character is found.\n    \"\"\"\n    indices = []\n    for i in range(len(string)):\n        if string[i] == char:\n            indices.append(i)\n    return indices\n\ndef g(string=\"Hello\", char=\"l\"):\n    return string, char\n\nassert f(*g()) == [2, 3]\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the given list that contains at least k unique numbers.\n    \"\"\"\n    unique_nums = set(nums)\n    return len(unique_nums) >= k\n\ndef g(k=3):\n    nums = [1, 2, 3, 4, 5, 5, 6, 7, 8]\n    return nums, k\n\nassert f(*g())\n",
        "idx_generation": 370,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if two strings are anagrams of each other.\"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g():\n    return \"listen\", \"silent\"\n\nassert f(*g()) == True\n\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a given string is a Pangram\"\"\"\n    alphabet = set(\"abcdefghijklmnopqrstuvwxyz\")\n    return alphabet.issubset(set(s.lower()))\n\ndef g():\n    return \"The quick brown fox jumps over the lazy dog\"\n\nassert f(g())\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of integers (a, b) such that a^2 + b^2 = n.\n\n    Sample Input:\n    `n = 85, k = 10`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    for a in range(1, k+1):\n        b = int((n - a**2)**0.5)\n        if b**2 + a**2 == n:\n            return True\n    return False\n\ndef g(k: int):\n    return 85, k\n\nassert f(*g(10))\n",
        "idx_generation": 213,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a given string is a palindrome.\n\n    Example:\n    s = \"racecar\"\n    The given string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> str:\n    \"\"\"\n    Reverse a given string.\n\n    Example:\n    string = \"hello\"\n\n    The reversed string is \"olleh\", so the function should return \"olleh\".\n    \"\"\"\n    return string[::-1]\n\ndef g(string=\"hello\"):\n    return string\n\nassert f(g()) == \"olleh\"\n",
        "idx_generation": 434,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3, c=4) -> bool:\n    \"\"\"Check if the given number is divisible by all three numbers a, b, and c.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\n\ndef g(a = 2, b = 3, c = 4):\n    if a == 0 or b == 0 or c == 0:\n        return 0\n    return a * b * c\n\nassert f(g())\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Return a list of all the unique elements in the given list, in the same order as they appear.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n\ndef g():\n    return [1, 2, 2, 3, 4, 4, 5]\n\nassert f(g()) == [1, 2, 3, 4, 5]\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    \"\"\"\n    Generate a symmetric matrix.\n    \"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 249,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a perfect square.\"\"\"\n    return n >= 0 and int(n ** 0.5) ** 2 == n\n\ndef g():\n    return 16\n\nassert f(g()) == True\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    for row in matrix:\n        if len(row) != rows:\n            return False\n    return True\n\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the length of the longest increasing subsequence in the given list.\n\n    Example:\n    nums = [10, 9, 2, 5, 3, 7, 101, 18]\n\n    The longest increasing subsequence is [2, 3, 7, 101], so the function should return 4.\n    \"\"\"\n    n = len(nums)\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\ndef g(nums: List[int]):\n    return nums\n\n# Test case\ntest_list = [10, 9, 2, 5, 3, 7, 101, 18]\nassert f(g(test_list)) == 4\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the product of the elements in the given list is equal to the target number.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product == target\n\ndef g():\n    return [2, 3, 4, 5]\n\nassert f(g(), 120)\n",
        "idx_generation": 59,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(d: Dict[str, int], key: str) -> bool:\n    \"\"\"\n    Given a dictionary and a key, determine if the key exists in the dictionary and its corresponding\n    value is a multiple of the length of the key.\n    \"\"\"\n    if key in d and d[key] % len(key) == 0:\n        return True\n    return False\n\ndef g():\n    return {\"apple\": 5, \"banana\": 6, \"cherry\": 18}, \"apple\"\n\nassert f(*g())\n",
        "idx_generation": 428,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=5, length=20, case_sensitive=False) -> bool:\n    \"\"\"Check if a given string has a certain number of copies of a given substring and of a given length\"\"\"\n    if case_sensitive:\n        return string.count(substring) == count and len(string) == length\n    else:\n        return string.lower().count(substring.lower()) == count and len(string) == length\n\ndef g(substring='abc', count=5, length=20, case_sensitive=False):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '$'\n\nassert f(g())\n",
        "idx_generation": 437,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"\n    Given a string and a number k, find if there exists a substring of length k that contains at least one repeated character.\n    \"\"\"\n    for i in range(len(s)-k+1):\n        substring = s[i:i+k]\n        if len(set(substring)) < k and substring[0] != substring[1]:\n            return True\n    return False\n\ndef g(s=\"xyxzyxyz\", k=3):\n    for i in range(len(s)-k+1):\n        substring = s[i:i+k]\n        if len(set(substring)) < k and substring[0] != substring[1]:\n            return substring\n    return \"\"\n\nassert f(g())\n",
        "idx_generation": 171,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=0) -> bool:\n    \"\"\"Check if there is a sublist within a list that sums up to a target number, but the sublist should not include the first element of the list.\"\"\"\n    for i, _ in enumerate(li[1:]):\n        for j, _ in enumerate(li[i+2:]):\n            sublist = li[i+1:j+i+3]\n            if sum(sublist) == target:\n                return True\n    return False\ndef g(target=0):\n    return [1, 2, -3, -2, 3, 4, -1, 0, 1]\nassert f(g())\n",
        "idx_generation": 104,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, letters=['a', 'b', 'c', 'd', 'e'], target='abcde') -> bool:\n    \"\"\"\n    Check if the target word can be formed using the letters in the list, without repeating any letter.\n    \"\"\"\n    return len(set(word)) == len(set(letters)) and set(word) <= set(letters)\ndef g(letters=['a', 'b', 'c', 'd', 'e'], target='abcde'):\n    if len(letters) != len(target):\n        return \"\"\n    return \"\".join(letters)\nassert f(g())\n",
        "idx_generation": 432,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a diagonal matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(matrix=[[1, 0, 0], [0, 4, 0], [0, 0, 6]]):\n    \"\"\"Return the matrix.\"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 292,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str) -> bool:\n    \"\"\"\n    Check if a word is a palindrome.\n    \"\"\"\n    return word == word[::-1]\n\ndef g(word=\"level\"):\n    return word\n\nassert f(g())\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a given string is a palindrome.\n\n    Sample Input:\n    s = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s=\"racecar\"):\n    return s\n\nassert f(g()) == True\n",
        "idx_generation": 217,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Remove all duplicate elements from the given list of numbers.\n    Return the list with duplicates removed.\n    \"\"\"\n    return list(set(nums))\n\ndef g():\n    return [1, 2, 2, 3, 4, 4, 5]\n\nassert f(g()) == [1, 2, 3, 4, 5]\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Flip the given matrix horizontally.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    The flipped matrix should be:\n    flipped = [[3, 2, 1],\n               [6, 5, 4],\n               [9, 8, 7]]\n    \"\"\"\n    n = len(matrix)\n    flipped = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            flipped[i][j] = matrix[i][n-j-1]\n    return flipped\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains any duplicate elements.\n    \"\"\"\n    return len(numbers) != len(set(numbers))\n\ndef g(n=5):\n    return [i for i in range(n)] + [0]\n\nassert f(g())\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Tuple\n\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Check if the given strings s and t are anagrams.\n\n    Example:\n    s = \"listen\"\n    t = \"silent\"\n    The strings s and t are anagrams.\n    Therefore, the puzzle is solved.\n    \"\"\"\n    return sorted(s) == sorted(t)\n\ndef g():\n    return \"listen\", \"silent\"\n\nassert f(*g())\n\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the list such that the sum of any two consecutive elements is equal to a given target.\n    Returns True if such a subsequence exists, False otherwise.\n    \"\"\"\n    n = len(nums)\n    prefix_sum = set()\n\n    for i in range(n-1):\n        curr_sum = nums[i] + nums[i+1]\n\n        if curr_sum == target:\n            return True\n\n        if curr_sum in prefix_sum:\n            return True\n\n        prefix_sum.add(curr_sum)\n\n    return False\n\ndef g(target=10):\n    return [1, 4, 6, 9, 12]\n\nassert f(g())\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with all the duplicates removed.\n\n    Sample Input:\n    nums = [1, 2, 3, 1, 4, 2, 5, 6, 3]\n\n    Sample Output:\n    [1, 2, 3, 4, 5, 6]\n    \"\"\"\n    return list(set(nums))\n\ndef g():\n    return [1, 2, 3, 1, 4, 2, 5, 6, 3]\n\nassert f(g()) == [1, 2, 3, 4, 5, 6]\n",
        "idx_generation": 380,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exist two distinct numbers in the list that add up to the target integer.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if nums[i] + nums[j] == target and i != j:\n                return True\n    return False\n\ndef g(nums=[-1, 0, 1, 2, -1, -4]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there is a pair of numbers in the list that adds up to the target.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub=\"python\") -> bool:\n    \"\"\"Check if the given string contains the substring.\"\"\"\n    return sub in s\n\ndef g(s=\"Hello, python!\"):\n    return s\n\nassert f(g())\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the list of numbers is sorted in descending order\"\"\"\n    return numbers == sorted(numbers, reverse=True)\n\ndef g(numbers = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 162,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"\n    Check if there exists a substring in the given string that contains at most k different characters.\n    \"\"\"\n    n = len(s)\n    for i in range(n):\n        for j in range(i+k, n+1):\n            if len(set(s[i:j])) <= k:\n                return True\n    return False\n\ndef g(s='coding'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_index=3) -> List[int]:\n    \"\"\"\n    Return a new list containing the numbers from the original list up to the target_index in descending order.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    [4, 3, 2, 1]\n    \"\"\"\n    return numbers[:target_index+1][::-1]\n\ndef g(target_index=3):\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == [4, 3, 2, 1]\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a given number is a palindrome.\"\"\"\n    return str(n) == str(n)[::-1]\n\ndef g():\n    return 12321\n\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"\n    Check if there are less than k odd numbers in the given list.\n    Return True if there are less than k odd numbers, False otherwise.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num % 2 != 0:\n            count += 1\n            if count >= k:\n                return False\n    return True\n\ndef g():\n    return [2, 4, 6, 8, 10, 12, 14, 16]\n\nassert f(g())\n\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(words: List[str], target_length: int, target_word: str) -> bool:\n    \"\"\"\n    Check if there is a word in the list that has a length greater than or equal to the target length and starts with the target word.\n    \"\"\"\n    for word in words:\n        if len(word) >= target_length and word.startswith(target_word):\n            return True\n    return False\n\ndef g(target_word='a'):\n    return ['apple', 'banana', 'cat', 'dog']\n\nassert f(g(), 4, 'a')\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Find the sum of elements in each row of the given matrix and return a list of the sums.\n\n    Sample Input:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\n    Sample Output:\n    [6, 15, 24]\n    \"\"\"\n    row_sums = []\n    for row in matrix:\n        row_sums.append(sum(row))\n    return row_sums\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g()) == [6, 15, 24]\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Given an array of integers, determine if there are four numbers in the array that sum up to the target number.\"\"\"\n    arr.sort()\n    for i in range(len(arr) - 3):\n        for j in range(i + 1, len(arr) - 2):\n            left = j + 1\n            right = len(arr) - 1\n            while left < right:\n                current_sum = arr[i] + arr[j] + arr[left] + arr[right]\n                if current_sum == target:\n                    return True\n                elif current_sum < target:\n                    left += 1\n                else:\n                    right -= 1\n    return False\n\ndef g(target=0):\n    return [-2, -1, 0, 1, 2, 3, 4]\n\nassert f(g())\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist three numbers in the list whose sum is equal to the target.\n    \"\"\"\n    return any(target - num - num2 in numbers for i, num in enumerate(numbers) for num2 in numbers[i+1:])\n\ndef g(numbers: List[int] = [1, 2, 3, 4, 5], target: int = 9) -> List[int]:\n    \"\"\"\n    Generate the list of numbers and target value.\n    \"\"\"\n    return numbers, target\n\nassert f(*g())\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is sorted in non-decreasing order.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a number is a prime number.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 369,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(words: List[str], target_length: int, target_word: str, exclude_word: str) -> bool:\n    \"\"\"\n    Check if there is a word in the list that has a length greater than or equal to the target length, starts with the target word, and does not contain the exclude word.\n    \"\"\"\n    for word in words:\n        if len(word) >= target_length and word.startswith(target_word) and exclude_word not in word:\n            return True\n    return False\n\ndef g(target_word='a', exclude_word='b'):\n    return ['apple', 'banana', 'cat', 'dog']\n\nassert f(g(), 3, 'd', 'a')\n",
        "idx_generation": 409,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], letter: str) -> bool:\n    \"\"\"\n    Check if the letter is present in any of the words in the list.\n    \"\"\"\n    for word in words:\n        if letter in word:\n            return True\n    return False\n\ndef g(words=[\"apple\", \"banana\", \"cherry\"], letter=\"a\"):\n    \"\"\"Return the list of words and the letter.\"\"\"\n    return words, letter\n\nassert f(*g())\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int]) -> bool:\n    \"\"\"\n    Check if a given list of integers is sorted in ascending order.\n    Return True if the list is sorted, and False otherwise.\n    \"\"\"\n    return all(x[i] <= x[i+1] for i in range(len(x)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a given string is a palindrome\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n",
        "idx_generation": 242,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Check if the target string is a substring of the given string.\n\n    Sample Input:\n    s = \"Hello, World!\"\n    target = \"World\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return target in s\n\ndef g(s: str, target: str):\n    return s, target\n\nassert f(*g(\"Hello, World!\", \"World\"))\n\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Find the maximum and minimum numbers in the list and check if their sum is divisible by 3.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    The maximum number is 5 and the minimum number is 1.\n    The sum of the maximum and minimum numbers is 5 + 1 = 6.\n    6 is divisible by 3.\n    Therefore, the puzzle is solved.\n    \"\"\"\n    max_num = max(nums)\n    min_num = min(nums)\n    return (max_num + min_num) % 3 == 0\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 76,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray with a sum divisible by k.\n    Return True if such a subarray exists, False otherwise.\n    \"\"\"\n    n = len(arr)\n    prefix_sum = 0\n    mod_sum = [False] * k\n    \n    for i in range(n):\n        prefix_sum = (prefix_sum + arr[i]) % k\n        if prefix_sum == 0 or mod_sum[prefix_sum]:\n            return True\n        mod_sum[prefix_sum] = True\n    \n    return False\n\ndef g(arr: List[int], k: int) -> List[int]:\n    \"\"\"\n    Generate a random array of size n and a random value for k.\n    \"\"\"\n    return arr, k\n\nassert f(*g([1, 2, 3, 4, 5], 2))\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3, c=5) -> bool:\n    \"\"\"\n    Check if a given number n is divisible by a, b, and c.\n    Return True if n is divisible by all three, False otherwise.\n    \"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\n\ndef g(a = 2, b = 3, c = 5):\n    n = a * b * c\n    return n\n\nassert f(g())\n\n",
        "idx_generation": 178,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=16) -> bool:\n    \"\"\"Check if a number is a power of 2\"\"\"\n    return x ** 2 == a\ndef g(a = 16):\n    return int(a ** 0.5)\nassert f(g())\n",
        "idx_generation": 419,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int, max_len: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list that sums up to k and has a maximum length of max_len.\n    Return True if such a subarray exists, False otherwise.\n    \"\"\"\n    prefix_sum = {0: -1}\n    curr_sum = 0\n    for i, num in enumerate(arr):\n        curr_sum += num\n        if curr_sum - k in prefix_sum and i - prefix_sum[curr_sum - k] <= max_len:\n            return True\n        if curr_sum not in prefix_sum:\n            prefix_sum[curr_sum] = i\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 9, 2)\n\nassert f(*g())\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisor=5) -> bool:\n    \"\"\"Check if n is divisible by the given divisor.\"\"\"\n    return n % divisor == 0\n\ndef g(divisor=5):\n    return 25\n\nassert f(g())\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a given string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s=\"racecar\"):\n    return s\n\nassert f(g())\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix and a target integer, find the index of the target in the matrix.\n    Return True if the target is found, False otherwise.\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == target:\n                return True, (i, j)\n    return False, (-1, -1)\n\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 5):\n    return matrix, target\n\nassert f(*g())[0]\n\n",
        "idx_generation": 178,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=10) -> bool:\n    \"\"\"\n    Given an integer n, check if it is divisible by the target.\n\n    Sample Input:\n    `50`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return n % target == 0\n\ndef g(n=50, target=10):\n    return n\n\nassert f(g())\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, find the maximum product of any two distinct elements in the list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    20\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 20\n",
        "idx_generation": 327,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, ignore_case=True) -> bool:\n    \"\"\"\n    Check if a string is a palindrome, ignoring case if specified.\n    \"\"\"\n    if ignore_case:\n        string = string.lower()\n    return string == string[::-1]\n\ndef g(ignore_case=True):\n    return \"Madam\"\n\nassert f(g())\n",
        "idx_generation": 268,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the given list that contains exactly k unique numbers.\n    \"\"\"\n    unique_nums = set(nums)\n    count = 0\n    for r in range(1, len(nums)+1):\n        for subset in itertools.combinations(nums, r):\n            if len(set(subset)) == k:\n                count += 1\n    return count > 0\n\ndef g(k=3):\n    nums = [1, 2, 3, 4, 5, 5, 6, 7, 8]\n    return nums, k\n\nassert f(*g())\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: List[str]) -> bool:\n    \"\"\"Find a list of 1000 distinct strings which each have more 'a's than 'b's and at least one 'b'.\"\"\"\n    return len(set(s)) == 1000 and all((x.count('a') > x.count('b') and 'b' in x for x in s))\n\ndef g():\n    return [\"a\" * (i + 2) + \"b\" for i in range(1000)]\n\nassert f(g())\n",
        "idx_generation": 330,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if the target string is a prefix of the given string\"\"\"\n    return s.startswith(target)\n\ndef g(s=\"Hello, World!\", target=\"Hello\"):\n    return s, target\n\nassert f(*g())\n\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a number is a perfect square.\n    \"\"\"\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    left, right = 1, n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n\ndef g():\n    return 16\n\nassert f(g())\n",
        "idx_generation": 233,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    Return True if the string is a palindrome, False otherwise.\n    \"\"\"\n    return string == string[::-1]\n\ndef g(string=\"madam\"):\n    return string\n\nassert f(g())\n\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str]) -> List[str]:\n    \"\"\"\n    Given a list of strings, return a new list with the strings reversed.\n\n    Example:\n    strings = [\"apple\", \"banana\", \"orange\", \"kiwi\"]\n\n    The reversed list of strings is: [\"elppa\", \"ananab\", \"egnaro\", \"iwik\"]\n    \"\"\"\n    return [string[::-1] for string in strings]\n\ndef g(strings=[\"apple\", \"banana\", \"orange\", \"kiwi\"]):\n    return strings\n\nassert f(g()) == [\"elppa\", \"ananab\", \"egnaro\", \"iwik\"]\n\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisor=7) -> bool:\n    \"\"\"Check if n is divisible by the given divisor.\"\"\"\n    return n % divisor == 0\n\ndef g(divisor=7):\n    return 84\n\nassert f(g())\n\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Find the indices of all numbers in the list that are divisible by 5\"\"\"\n    divisible_indices = []\n    for i, num in enumerate(nums):\n        if num % 5 == 0:\n            divisible_indices.append(i)\n    return divisible_indices\n\ndef g():\n    return [2, 5, 9, 12, 15, 18]\n\nassert f(g()) == [1, 4]\n",
        "idx_generation": 479,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is symmetric.\n\n    Sample Input:\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(i + 1, len(matrix)))\ndef g(matrix: List[List[int]]):\n    \"\"\"\n    This solution creates the transpose of the matrix.\n    \"\"\"\n    transpose = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n    return transpose\nassert f(g([[1, 2, 3], [2, 4, 5], [3, 5, 6]]))\n",
        "idx_generation": 283,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a perfect square.\"\"\"\n    return n >= 0 and int(n ** 0.5) ** 2 == n\n\ndef g() -> int:\n    return 16\n\nassert f(g())\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of any two numbers in the list.\n    Return the maximum product.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 20\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if target is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=5):\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 65,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"\n    Check if there exists a substring in the given string that contains exactly k different consonants.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    n = len(s)\n    for i in range(n):\n        for j in range(i+k, n+1):\n            if len([x for x in set(s[i:j]) if x not in vowels]) == k:\n                return True\n    return False\n\ndef g(s='programming'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 218,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the target number exists in the given list and if it is divisible by any of the other numbers in the list.\n    \"\"\"\n    for num in nums:\n        if num != target and target % num == 0:\n            return True\n    return False\n\ndef g(nums=[2, 4, 6, 8, 10], target=12):\n    return nums\n\nassert f(g(), 12)\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, letters=['a', 'b', 'c', 'd', 'e'], target='abcde') -> bool:\n    \"\"\"\n    Check if the target word can be formed using the letters in the list, without repeating any letter.\n    \"\"\"\n    return len(set(word)) == len(set(letters)) and set(word) <= set(letters)\ndef g(letters=['a', 'b', 'c', 'd', 'e'], target='abcde'):\n    if len(letters) != len(target):\n        return \"\"\n    return \"\".join(sorted(letters, key=lambda x: target.index(x)))\n\nassert f(g())\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is an identity matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if (i != j and matrix[i][j] != 0) or (i == j and matrix[i][j] != 1):\n                return False\n    return True\n\ndef g(matrix=[[1, 0, 0], [0, 1, 0], [0, 0, 1]]):\n    \"\"\"Return the matrix.\"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str) -> bool:\n    \"\"\"\n    Check if a word is a palindrome.\n\n    Sample Input:\n    word = \"level\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return word == word[::-1]\n\ndef g(word=\"level\"):\n    return word\n\nassert f(g())\n",
        "idx_generation": 473,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n    Return True if it is, False otherwise.\n    \"\"\"\n    return string == string[::-1]\n\ndef g(string=\"racecar\"):\n    return string\n\nassert f(g())\n",
        "idx_generation": 219,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Find the duplicates in the given list of numbers and return them in a new list.\n    \"\"\"\n    duplicates = []\n    for num in nums:\n        if nums.count(num) > 1 and num not in duplicates:\n            duplicates.append(num)\n    return duplicates\n\ndef g():\n    return [1, 2, 3, 2, 4, 5, 4, 6, 7, 8, 3, 9]\n\nassert f(g()) == [2, 3, 4]\n",
        "idx_generation": 497,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a list is a permutation of numbers from 1 to n\"\"\"\n    n = len(nums)\n    seen = set()\n    for num in nums:\n        if num < 1 or num > n or num in seen:\n            return False\n        seen.add(num)\n    return len(seen) == n\n\ndef g():\n    return [4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the list contains any duplicate elements.\"\"\"\n    return len(arr) != len(set(arr))\n\ndef g():\n    return [1, 2, 3, 4, 5, 1]\n\nassert f(g())\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(s: str, substring: str) -> bool:\n    \"\"\"\n    Check if a string contains all characters from a given substring.\n    \"\"\"\n\n    return substring in s\n\ndef g(s: str = \"hello world\", substring: str = \"world\"):\n    return s\n\nassert f(g(), \"world\")\n",
        "idx_generation": 437,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are three numbers in the list that add up to the target number.\n    Return True if such triplet exists, and False otherwise.\n    \"\"\"\n    num_set = set(numbers)\n    for i in range(len(numbers)-2):\n        for j in range(i+1, len(numbers)-1):\n            complement = target - numbers[i] - numbers[j]\n            if complement in num_set:\n                return True\n    return False\n\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=18):\n    return numbers\n\nassert f(g(), 18)\n",
        "idx_generation": 368,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose difference is equal to n.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if abs(lst[i] - lst[j]) == n:\n                return True\n    return False\n\ndef g(lst = [1, 2, 3, 4, 5], n = 2):\n    return n, lst\n\nassert f(*g())\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exist three numbers in the list that add up to the target integer.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[-1, 0, 1, 2, -1, -4]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 44,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, max_nums=5) -> bool:\n    \"\"\"\n    Find a combination of at most max_nums numbers from the list that sums up to the target value.\n    \"\"\"\n    from itertools import combinations\n    for c in combinations(nums, max_nums):\n        if sum(c) == target:\n            return True\n    return False\ndef g(target=100, max_nums=5):\n    return list(range(1, target + 1))\nassert f(g())\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char: str) -> bool:\n    \"\"\"\n    Check if a given character is present in the given string.\n\n    Sample Input:\n    s = \"Hello World\"\n    char = \"o\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return char in s\n\ndef g():\n    return \"Hello World\", \"o\"\n\nassert f(*g())\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n=0) -> bool:\n    \"\"\"\n    Check if the sum of all elements in a list is greater than a given number.\n    \"\"\"\n    return sum(lst) > n\n\ndef g(n=10):\n    return [5, 2, 3, 1, 4]\n\nassert f(g())\n\n",
        "idx_generation": 167,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3, target='cod') -> bool:\n    \"\"\"\n    Check if there exists a substring in the given string that contains at most k different characters and is equal to the target substring.\n    \"\"\"\n    n = len(s)\n    for i in range(n):\n        for j in range(i+k, n+1):\n            if len(set(s[i:j])) <= k and s[i:j] == target:\n                return True\n    return False\n\ndef g(s='coding', target='cod'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_index=4) -> List[int]:\n    \"\"\"\n    Return a new list containing the numbers from the original list starting from the target_index to the end.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    [5]\n    \"\"\"\n    return numbers[target_index:]\n\ndef g(target_index=4):\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == [5]\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a given number is a palindrome.\n    \"\"\"\n\n    return str(n) == str(n)[::-1]\n\ndef g():\n    return 12321\n\nassert f(g())\n\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"\n    Check if the given number is divisible by any element in the list.\n    Return True if it is divisible, False otherwise.\n    \"\"\"\n    return any(n % num == 0 for num in lst)\n\ndef g(lst: List[int]):\n    \"\"\"\n    Generate a number that is the product of all elements in the list.\n    \"\"\"\n    product = 1\n    for num in lst:\n        product *= num\n    return product\n\nassert f(g([2, 3, 4, 5]), [1, 2, 3, 4, 5])\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=0, target_word=\"\") -> bool:\n    \"\"\"\n    Check if there exists a pair of words in the list that have a combined length greater than or equal to a specific value.\n    Return True if the target_length is 0 and there are at least two words in the list.\n    Return False if the target_length is a negative value.\n    Return True if the target_word is an element in the list.\n    \"\"\"\n    if target_length == 0 and len(words) >= 2:\n        return True\n    \n    if target_length < 0:\n        return False\n    \n    if target_word in words:\n        return True\n    \n    for i in range(len(words)):\n        for j in range(i+1, len(words)):\n            if len(words[i]) + len(words[j]) >= target_length:\n                return True\n    return False\n\ndef g(target_length=0, target_word=\"\"):\n    return [\"hello\", \"world\", \"python\", \"programming\", \"puzzles\"]\nassert f(g())\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(lst: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a triplet of integers in the list whose sum is equal to the target sum.\"\"\"\n    for combination in itertools.combinations(lst, 3):\n        if sum(combination) == target_sum:\n            return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 205,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, check if there exists a pair of numbers in the list that adds up to the target sum.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 9)\n\nassert f(*g())\n\n",
        "idx_generation": 428,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the second smallest number in the given list.\n    Return the second smallest number.\n    \"\"\"\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in nums:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest\n\ndef g():\n    return [5, 8, 3, 2, 4, 1]\n\nassert f(g()) == 2\n",
        "idx_generation": 432,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n\n    Example:\n    arr = [1, 2, 3, 2, 1]\n\n    The list is symmetric when read from left to right or right to left,\n    so the function should return True.\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(string: str, substring='abc', count=5) -> bool:\n    \"\"\"\n    Check if a given string has a certain number of occurrences of a given substring.\n    Return True if the substring occurs count times in the string, False otherwise.\n    \"\"\"\n    return string.count(substring) == count\n\ndef g(substring = 'abc', count = 5):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + c\n\nassert f(g())\n",
        "idx_generation": 415,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> List[str]:\n    \"\"\"\n    Split a given string into a list of words.\n    \"\"\"\n    return string.split()\n\ndef g(string=\"Hello, World!\"):\n    return string\n\nassert f(g()) == ['Hello,', 'World!']\n\n",
        "idx_generation": 380,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the sum of all the elements in the given matrix.\n\n    Sample Input:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\n    Sample Output:\n    45\n    \"\"\"\n    total_sum = 0\n    for row in matrix:\n        total_sum += sum(row)\n    return total_sum\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g()) == 45\n",
        "idx_generation": 147,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str = \"apple\") -> bool:\n    \"\"\"Check if the given string starts with the target word\"\"\"\n    return s.startswith(target)\n\ndef g(target: str = \"apple\"):\n    return target + \" pie\"\n\nassert f(g())\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_length=5) -> bool:\n    \"\"\"\n    Given a string s, check if there exists a substring of length target_length that is a palindrome.\n    Return True if a palindrome substring exists, False otherwise.\n    \"\"\"\n    def is_palindrome(substring):\n        return substring == substring[::-1]\n\n    for i in range(len(s) - target_length + 1):\n        if is_palindrome(s[i:i+target_length]):\n            return True\n    return False\n\ndef g(s=\"racecar\"):\n    return s\n\nassert f(g())\n\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it contains a prime triplet.\n    A prime triplet is a set of three prime numbers a, b, and c, such that a + b = c.\n    \"\"\"\n    primes = set()\n    for num in nums:\n        if num < 2:\n            continue\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.add(num)\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] in primes:\n                return True\n    return False\n\ndef g():\n    return [2, 3, 5, 7, 11, 13, 17, 19]\n\nassert f(g())\n",
        "idx_generation": 76,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Return a new list containing the square roots of the numbers in the original list.\n    \"\"\"\n    return [math.sqrt(num) for num in nums]\n\ndef g():\n    return [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\nassert f(g()) == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]\n\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(n: int, m: int) -> bool:\n    \"\"\"\n    Check if n is a multiple of m.\n\n    Sample Input:\n    n = 21\n    m = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    return n % m == 0\n\ndef g(n: int = 21, m: int = 7):\n    return n\n\nassert f(g(), 7)\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=16) -> bool:\n    \"\"\"Check if a number is a power of 2\"\"\"\n    return x ** 2 == a\ndef g(a = 16):\n    return int(a ** 0.5)\nassert f(g())\n\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int, max_len: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list that sums up to k and has a maximum length of max_len.\n    Return True if such a subarray exists, False otherwise.\n    \"\"\"\n    prefix_sum = {0: -1}\n    curr_sum = 0\n    for i, num in enumerate(arr):\n        curr_sum += num\n        if curr_sum - k in prefix_sum and i - prefix_sum[curr_sum - k] <= max_len:\n            return True\n        if curr_sum not in prefix_sum:\n            prefix_sum[curr_sum] = i\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 7, 3)\n\nassert f(*g())\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisor=4) -> bool:\n    \"\"\"Check if n is divisible by the given divisor.\"\"\"\n    return n % divisor == 0\n\ndef g(divisor=4):\n    return 16\n\nassert f(g())\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target: str) -> bool:\n    \"\"\"\n    Given a list of words, check if the target word is present in the list.\n    \"\"\"\n    return target in words\n\ndef g(words = [\"apple\", \"banana\", \"orange\", \"grape\"], target = \"banana\"):\n    return words, target\n\nassert f(*g())\n",
        "idx_generation": 226,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the given number is present in the list.\"\"\"\n    return n in arr\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr[2]\n\nassert f(g())\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(d: Dict[str, int], n: int) -> bool:\n    \"\"\"\n    Given a dictionary and a number n, determine if there exists a key in the dictionary\n    whose value is divisible by n.\n    \"\"\"\n    for value in d.values():\n        if value % n == 0:\n            return True\n    return False\n\ndef g():\n    return {\"apple\": 6, \"banana\": 9, \"cherry\": 12}, 4\n\nassert f(*g())\n\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, find the minimum product of any two distinct elements in the list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    2\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product < min_product:\n                min_product = product\n    return min_product\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 2\n\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(strings: List[str]) -> bool:\n    \"\"\"Check if all the strings in the list are anagrams of each other.\"\"\"\n    return all(sorted(s) == sorted(strings[0]) for s in strings[1:])\n\ndef g():\n    import random\n    s = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(5))\n    return [s, s[::-1], ''.join(random.sample(s, len(s))), ''.join(random.sample(s, len(s))), s]\n\nassert f(g())\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Given two strings, check if they are anagrams of each other.\n    \n    Sample Input:\n    s1 = 'listen'\n    s2 = 'silent'\n    \n    Sample Output:\n    True\n    \"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g(s1 = 'listen', s2 = 'silent'):\n    return s1, s2\n\nassert f(*g()) == True\n",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], substring: str) -> bool:\n    \"\"\"\n    Given a list of words and a substring, determine if any of the words contain the substring.\n\n    Sample Input:\n    `['apple', 'banana', 'cherry']`, `'an'`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return any(substring in word for word in words)\n\ndef g():\n    return ['apple', 'banana', 'cherry'], 'an'\n\nassert f(*g())\n\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: float, a=1000000) -> bool:\n    \"\"\"Check if the given number is a perfect square and less than the target value\"\"\"\n    return x ** 0.5 == int(x ** 0.5) and x < a\ndef g(a=1000000):\n    return (int(a ** 0.5) - 1) ** 2\nassert f(g())\n",
        "idx_generation": 295,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"madam\"\n\nassert f(g())\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> str:\n    \"\"\"\n    Given a string, return a new string with the characters in reverse order.\n\n    Example:\n    string = \"Hello, World!\"\n\n    The reversed string is: \"!dlroW ,olleH\"\n    \"\"\"\n    reversed_string = \"\"\n    for char in string:\n        reversed_string = char + reversed_string\n    return reversed_string\n\ndef g(string = \"Hello, World!\"):\n    return string\n\nassert f(g()) == \"!dlroW ,olleH\"\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3, c=4) -> bool:\n    \"\"\"Check if the given number is divisible by any of the three numbers a, b, or c.\"\"\"\n    return n % a == 0 or n % b == 0 or n % c == 0\n\ndef g(a = 2, b = 3, c = 4):\n    if a == 0 or b == 0 or c == 0:\n        return 0\n    return a * b * c\n\nassert f(g()) == True\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    for row in matrix:\n        if len(row) != rows:\n            return False\n    return True\n\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a number is a perfect square.\n    \"\"\"\n\n    return math.isqrt(n)**2 == n\n\ndef g(n=16):\n    return n\n\nassert f(g())\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a square matrix, determine if it is symmetric along the main diagonal (top-left to bottom-right).\n\n    Sample Input:\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 277,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Return the length of the longest increasing subsequence in the given list.\n\n    Example:\n    nums = [10, 9, 2, 5, 3, 7, 101, 18]\n    The longest increasing subsequence is [2, 3, 7, 18], with a length of 4.\n    Therefore, the function should return 4.\n    \"\"\"\n    dp = [1] * len(nums)\n    for i in range(len(nums)):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\ndef g(nums=[10, 9, 2, 5, 3, 7, 101, 18]):\n    return nums\n\nassert f(g()) == 4\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if the target number can be obtained by combining the numbers in the list using addition and subtraction\"\"\"\n    def helper(numbers, target, index, current_sum):\n        if index == len(numbers):\n            return current_sum == target\n        return helper(numbers, target, index + 1, current_sum + numbers[index]) or helper(numbers, target, index + 1, current_sum - numbers[index])\n\n    return helper(numbers, target, 0, 0)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 7)\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub: str) -> bool:\n    \"\"\"\n    Check if a given substring is present in the string.\n\n    Sample Input:\n    s = \"Hello, World!\"\n    sub = \"World\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return sub in s\n\ndef g():\n    s = \"Hello, World!\"\n    sub = \"World\"\n    return s, sub\n\nassert f(*g()) == True\n",
        "idx_generation": 265,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in a list that add up to the target number.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g(lst=[-2, -5, 10, 4, 7]):\n    return lst, 5\n\nassert f(*g())\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"Calculate the sum of all elements in the given matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    total_sum = 0\n    for i in range(rows):\n        for j in range(cols):\n            total_sum += matrix[i][j]\n    return total_sum\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    \"\"\"Return the matrix.\"\"\"\n    return matrix\n\nassert f(g()) == 45\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str) -> bool:\n    \"\"\"\n    Check if the given word is a palindrome.\n    Return True if the word is a palindrome, False otherwise.\n    \"\"\"\n    return word == word[::-1]\n\ndef g(word = \"level\"):\n    return word\n\nassert f(g())\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(text: str, pattern: str) -> bool:\n    \"\"\"\n    Check if the given pattern exists in the given text.\n    \"\"\"\n    if not text or not pattern:\n        return False\n    \n    n = len(text)\n    m = len(pattern)\n    \n    for i in range(n - m + 1):\n        if text[i:i+m] == pattern:\n            return True\n    \n    return False\n\ndef g(text=\"abcde\", pattern=\"cd\"):\n    return text\n\nassert f(g(), \"cd\")\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the transpose of a matrix is equal to its inverse.\n    \"\"\"\n    transpose = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n    inverse = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n    return transpose == inverse\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there is a duplicate element in the list.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [5, 2, 7, 9, 1, 5]\n\nassert f(g())\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word: str) -> bool:\n    \"\"\"\n    Check if the given list of words contains the target word as a prefix of any word.\n    \"\"\"\n    for word in words:\n        if word.startswith(target_word):\n            return True\n    return False\n\ndef g():\n    return [\"apple\", \"banana\", \"cherry\", \"blueberry\", \"orange\"]\n\nassert f(g(), \"blue\")\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"\n    Check if there exist k numbers in the given list that sum up to the target value.\n\n    Sample Input:\n    nums = [2, 4, 1, 5, 6, 3]\n    target = 10\n    k = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    def backtrack(start, curr_sum, count):\n        if count == k:\n            return curr_sum == target\n        for i in range(start, n):\n            if curr_sum + nums[i] > target:\n                break\n            if i > start and nums[i] == nums[i-1]:\n                continue\n            if backtrack(i+1, curr_sum+nums[i], count+1):\n                return True\n        return False\n\n    return backtrack(0, 0, 0)\n\ndef g(nums=[2, 4, 1, 5, 6, 3], target=10, k=3):\n    return (nums, target, k)\n\nassert f(*g())\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any duplicate elements.\n\n    Example:\n    nums = [1, 2, 3, 4, 4]\n    The list contains duplicate elements, so the function should return True.\n    \"\"\"\n    return len(set(nums)) < len(nums)\n\ndef g():\n    return [1, 2, 3, 4, 4]\n\nassert f(g()) == True\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it contains consecutive numbers.\n    \"\"\"\n    nums.sort()\n    for i in range(1, len(nums)):\n        if nums[i] - nums[i-1] != 1:\n            return False\n    return True\n\ndef g():\n    return [4, 2, 3, 1, 5, 8, 7, 6]\n\nassert f(g())\n\n",
        "idx_generation": 85,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Given an array of integers, find two numbers such that their product is equal to a specific target number.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        complement = target / num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [2, 5]\n\nassert f(g())\n",
        "idx_generation": 52,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Check if the given string has at least n characters.\"\"\"\n    return len(s) >= n\ndef g(n = 10):\n    return 'Hello, World!'\nassert f(g())\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int]) -> int:\n    \"\"\"Return the sum of all prime numbers from the given list\"\"\"\n    primes_sum = 0\n    for num in nums:\n        if num < 2:\n            continue\n        is_prime = True\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes_sum += num\n    return primes_sum\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 17\n",
        "idx_generation": 212,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3, target='cod') -> bool:\n    \"\"\"\n    Check if there exists a substring in the given string that contains at most k different characters and starts with the target substring.\n    \"\"\"\n    n = len(s)\n    for i in range(n):\n        for j in range(i+k, n+1):\n            if len(set(s[i:j])) <= k and s[i:i+len(target)] == target:\n                return True\n    return False\n\ndef g(s='coding', target='cod'):\n    return s\n\nassert f(g())\n\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Find the maximum element in the given list.\n\n    Sample Input:\n    arr = [5, 8, 2, 10, 3]\n\n    Sample Output:\n    10\n    \"\"\"\n    max_num = float('-inf')\n    for num in arr:\n        if num > max_num:\n            max_num = num\n    return max_num\n\ndef g():\n    return [5, 8, 2, 10, 3]\n\nassert f(g()) == 10\n\n",
        "idx_generation": 380,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=999999999) -> bool:\n    \"\"\"Check if x is a palindrome number.\"\"\"\n    num = str(x)\n    return num == num[::-1]\n\ndef g(a = 999999999):\n    return int(str(a)[::-1])\n\nassert f(g())\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=2) -> bool:\n    \"\"\"\n    Check if there exists a sublist in the given list such that the sum of its elements is divisible by k.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            sublist = arr[i:j]\n            if sum(sublist) % k == 0:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 234,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, substring: str) -> bool:\n    \"\"\"\n    Check if the given substring is present in the word.\n\n    Example:\n    word = 'pineapple'\n    substring = 'apple'\n\n    The word 'pineapple' contains the substring 'apple', so the function should return True.\n    \"\"\"\n    return substring in word\n\ndef g(substring='apple'):\n    return 'pineapple'\n\nassert f(g(), substring='apple')\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(lst: List[int], target_sum=10) -> bool:\n    \"\"\"\n    Check if there exists a pair of distinct integers in the list whose sum is equal to the target sum.\n    \"\"\"\n    random.shuffle(lst)\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 205,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two different elements in the given list that sum up to the target value.\n    Return True if there are, otherwise return False.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g(lst: List[int], target: int):\n    return lst, target\n\n# Test case\ntest_list = [1, 2, 3, 4, 5]\nassert f(*g(test_list, 7))\n",
        "idx_generation": 429,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in non-decreasing order.\"\"\"\n    return nums == sorted(nums)\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 433,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is strictly increasing.\n\n    Example:\n    arr = [1, 3, 5, 7, 9]\n\n    The list is strictly increasing,\n    so the function should return True.\n    \"\"\"\n    return all(arr[i] < arr[i+1] for i in range(len(arr)-1))\n\ndef g():\n    return [1, 3, 5, 7, 9]\n\nassert f(g()) == True\n\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g()) == True\n\n",
        "idx_generation": 449,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"\n    Find the position of the first occurrence of the given substring in the string.\n    Return True if the substring is found, False otherwise.\n    \"\"\"\n    return substring in s\n\ndef g(substring='abc'):\n    return \"abccba\"\n\nassert f(g())\n\n",
        "idx_generation": 428,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], pattern: str) -> List[str]:\n    \"\"\"\n    Find all words in the given list that match the given pattern.\n    The pattern can contain any number of letters (represented by '?') or fixed characters.\n    \"\"\"\n    matches = []\n    for word in words:\n        if len(word) == len(pattern):\n            match = True\n            for i in range(len(word)):\n                if pattern[i] != '?' and pattern[i] != word[i]:\n                    match = False\n                    break\n            if match:\n                matches.append(word)\n    return matches\n\ndef g(words = ['cat', 'hat', 'bat', 'pat'], pattern = 'c?t'):\n    return words, pattern\n\nassert f(*g()) == ['cat']\n",
        "idx_generation": 391,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=[1, 2, 3], b=[4, 5, 6]) -> bool:\n    \"\"\"Check if the sum of two numbers from lists a and b is equal to n\"\"\"\n    return any(n - x in b for x in a)\ndef g(a=[1, 2, 3], b=[4, 5, 6]):\n    return a[0] + b[1]\nassert f(g())\n",
        "idx_generation": 157,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> str:\n    \"\"\"Reverse the order of words in a sentence\"\"\"\n    words = s.split()\n    reversed_words = words[::-1]\n    return \" \".join(reversed_words)\n\ndef g(s = \"Hello World\"):\n    return s\n\nassert f(g()) == \"World Hello\"\n\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(s: str, target_length=5) -> bool:\n    \"\"\"\n    Given a string s, check if there exists a substring of length target_length that is a palindrome.\n    Return True if a palindrome substring exists, False otherwise.\n    \"\"\"\n    def is_palindrome(substring):\n        return substring == substring[::-1]\n\n    for i in range(len(s) - target_length + 1):\n        if is_palindrome(s[i:i+target_length]):\n            return True\n    return False\n\ndef g(s=\"level\"):\n    return s\n\nassert f(g())\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a matrix is a magic square. A magic square is a square matrix in which the sum of each row, each column, and both diagonals is the same.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    diagonal_sum_1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum_2 = sum(matrix[i][n-1-i] for i in range(n))\n    \n    if diagonal_sum_1 != target_sum or diagonal_sum_2 != target_sum:\n        return False\n    \n    for i in range(n):\n        if sum(matrix[i]) != target_sum:\n            return False\n        if sum(matrix[j][i] for j in range(n)) != target_sum:\n            return False\n    \n    return True\n\ndef g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains only even numbers.\n    Return True if all numbers are even, False otherwise.\n    \"\"\"\n    return all(num % 2 == 0 for num in num_list)\n\ndef g():\n    \"\"\"\n    Generate a list of even numbers.\n    \"\"\"\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 419,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=5) -> bool:\n    \"\"\"Check if the number 'n' is divisible by either 'a' or 'b'\"\"\"\n    return n % a == 0 or n % b == 0\n\ndef g(n=15, a=2, b=5):\n    return n\n\nassert f(g())\n",
        "idx_generation": 194,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"\n    Check if the given number is a prime number.\n\n    Sample Input:\n    n = 23\n\n    Sample Output:\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if n % prime == 0:\n            return False\n    for i in range(20, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(n=23):\n    return n\n\nassert f(g()) == True\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int, min_len: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list that sums up to k and has a minimum length of min_len.\n    Return True if such a subarray exists, False otherwise.\n    \"\"\"\n    prefix_sum = {0: -1}\n    curr_sum = 0\n    for i, num in enumerate(arr):\n        curr_sum += num\n        if curr_sum - k in prefix_sum and i - prefix_sum[curr_sum - k] >= min_len:\n            return True\n        if curr_sum not in prefix_sum:\n            prefix_sum[curr_sum] = i\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 7, 2)\n\nassert f(*g())\n\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if a given string contains only uppercase letters.\n    \"\"\"\n    return string.isupper()\n\ndef g(string = \"HELLO\"):\n    return string\n\nassert f(g())\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers is a palindrome.\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g(arr: List[int]):\n    return arr\n\n# Test case\ntest_arr = [1, 2, 3, 2, 1]\nassert f(g(test_arr))\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=9) -> bool:\n    \"\"\"Check if the target number is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=9):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 226,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a prime number.\n\n    Sample Input:\n    n = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 7\n\nassert f(g()) == True\n\n",
        "idx_generation": 380,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subset of numbers in the given list that when multiplied by 2, add up to the target.\n    \"\"\"\n    for r in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            if sum(subset) * 2 == target:\n                return True\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5], target = 20):\n    return nums, target\n\nassert f(*g())\n\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str]) -> List[str]:\n    \"\"\"\n    Find the longest words in a given list of words.\n    Returns a list of the longest words.\n    \"\"\"\n    max_length = max(len(word) for word in words)\n    return [word for word in words if len(word) == max_length]\n\ndef g(words=[\"apple\", \"banana\", \"car\", \"dog\"]):\n    return words\n\nassert f(g()) == [\"banana\"]\n",
        "idx_generation": 294,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Check if two strings are anagrams of each other.\n\n    Sample Input:\n    `s1 = 'listen', s2 = 'silent'`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g(s1: str, s2: str):\n    return s1, s2\n\nassert f(*g('listen', 'silent'))\n",
        "idx_generation": 474,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if all the given words are substrings of the target word\"\"\"\n    return all((word in target for word in words))\n\ndef g(target='python'):\n    return target.split()\n\nassert f(g())\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=25) -> bool:\n    \"\"\"\n    Given a positive integer n, return True if n can be expressed as the difference of two perfect squares, otherwise return False.\n    \"\"\"\n    squares = set()\n    for num in range(1, int(n**0.5) + 1):\n        squares.add(num**2)\n    \n    for square in squares:\n        if n + square in squares or n - square in squares:\n            return True\n    return False\n\ndef g(n=25):\n    return n\n\nassert f(g())\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a given string is an anagram of a palindrome.\n    \"\"\"\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    odd_count = 0\n    for count in char_count.values():\n        if count % 2 != 0:\n            odd_count += 1\n    \n    return odd_count <= 1\n\ndef g():\n    return \"aabba\"\n\nassert f(g())\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(d: Dict[str, int]) -> Dict[str, int]:\n    \"\"\"\n    Return a dictionary with the keys and values reversed from the given dictionary.\n    \"\"\"\n    return {value: key for key, value in d.items()}\n\ndef g(d={'a': 1, 'b': 2, 'c': 3}):\n    return d\n\nassert f(g()) == {1: 'a', 2: 'b', 3: 'c'}\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    \"\"\"Return the matrix.\"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 292,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric along the diagonal.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    if rows != cols:\n        return False\n    \n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if the target value is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=5):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"\n    Check if the given substring is present in the string.\n    \"\"\"\n    return substring in s\n\ndef g(substring='python'):\n    return \"I love programming in \" + substring\n\nassert f(g())\n",
        "idx_generation": 332,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, determine if there are two numbers in the list that add up to the target.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[2, 7, 11, 15], target=9):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 121,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return a list containing all the elements of the matrix in spiral order.\n    \n    Sample Input:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    \n    Sample Output:\n    [1, 2, 3, 6, 9, 8, 7, 4, 5]\n    \"\"\"\n    if not matrix:\n        return []\n    result = []\n    top = 0\n    bottom = len(matrix) - 1\n    left = 0\n    right = len(matrix[0]) - 1\n    while top <= bottom and left <= right:\n        for i in range(left, right + 1):\n            result.append(matrix[top][i])\n        top += 1\n        for i in range(top, bottom + 1):\n            result.append(matrix[i][right])\n        right -= 1\n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                result.append(matrix[bottom][i])\n            bottom -= 1\n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                result.append(matrix[i][left])\n            left += 1\n    return result\n\ndef g():\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\n\nassert f(g()) == [1, 2, 3, 6, 9, 8, 7, 4, 5]\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, char: str) -> bool:\n    \"\"\"\n    Check if the given character is present at least twice in the word.\n    \"\"\"\n    count = 0\n    for c in word:\n        if c == char:\n            count += 1\n        if count >= 2:\n            return True\n    return False\n\ndef g(word=\"programming\", char=\"m\"):\n    return word, char\n\nassert f(*g())\n\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if a given string is a palindrome.\n    Return True if the string is a palindrome, and False otherwise.\n    \"\"\"\n    return string == string[::-1]\n\ndef g(string=\"racecar\"):\n    return string\n\nassert f(g())\n",
        "idx_generation": 242,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a permutation of the numbers from 1 to n,\n    where n is the length of the list.\n    Return True if it is a permutation, False otherwise.\n    \"\"\"\n    n = len(lst)\n    return set(lst) == set(range(1, n+1))\n\ndef g(lst = [4, 3, 1, 5, 2]):\n    return lst\n\nassert f(g())\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any duplicate elements.\n    \"\"\"\n    return len(arr) != len(set(arr))\n\ndef g():\n    return [1, 2, 3, 4, 5, 5]\n\nassert f(g())\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Check if the given string s is an anagram of string t.\"\"\"\n    return sorted(s) == sorted(t)\ndef g(s=\"listen\", t=\"silent\"):\n    return s, t\nassert f(*g())\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Sort the given list of numbers in ascending order.\n    \"\"\"\n    return sorted(nums)\n\ndef g():\n    nums = [5, 2, 7, 1, 9]\n    return nums\n\nassert f(g()) == [1, 2, 5, 7, 9]\n\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains all unique numbers.\"\"\"\n    return len(set(nums)) == len(nums)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, primes: List[int]) -> bool:\n    \"\"\"\n    Given a number n and a list of primes, check if n can be expressed as a sum of two primes.\n    Return True if n can be expressed as a sum of two primes, False otherwise.\n    \"\"\"\n    prime_set = set(primes)\n    for num in primes:\n        if n - num in prime_set:\n            return True\n    return False\n\ndef g(n = 20, primes = [2, 3, 5, 7, 11, 13, 17, 19]):\n    return n, primes\n\nassert f(*g())\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, find a pair of numbers that sum up to the target.\n    \"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> int:\n    \"\"\"\n    Calculate the total number of consonants in a given string.\n\n    Example:\n    s = \"Hello, World!\"\n    The total number of consonants is 7.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonant_count = 0\n    for char in s.lower():\n        if char.isalpha() and char not in vowels:\n            consonant_count += 1\n    return consonant_count\n\ndef g():\n    return \"Hello, World!\"\n\nassert f(g()) == 7\n",
        "idx_generation": 443,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target_sum=0) -> bool:\n    \"\"\"\n    Check if the given list contains three consecutive numbers that add up to the target sum.\n    \"\"\"\n    for i in range(len(lst)-2):\n        if lst[i] + lst[i+1] + lst[i+2] == target_sum:\n            return True\n    return False\n\ndef g(target_sum=0):\n    return [target_sum] * 5\n\nassert f(g())\n",
        "idx_generation": 218,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k: int = 3) -> bool:\n    \"\"\"\n    Check if the given string s contains a substring of length k that consists of only vowels.\n    Returns True if such a substring is found, False otherwise.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(s) - k + 1):\n        substring = s[i:i + k]\n        if all(char in vowels for char in substring):\n            return True\n    return False\n\ndef g(k: int = 3):\n    return \"hello\"\n\nassert f(g()) == False\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Sort the given list in descending order.\n\n    Sample Input:\n    arr = [5, 8, 2, 10, 3]\n\n    Sample Output:\n    [10, 8, 5, 3, 2]\n    \"\"\"\n    return sorted(arr, reverse=True)\n\ndef g():\n    return [5, 8, 2, 10, 3]\n\nassert f(g()) == [10, 8, 5, 3, 2]\n\n\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a palindrome.\"\"\"\n    return str(n) == str(n)[::-1]\n\ndef g():\n    return 12321\n\nassert f(g())\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=4) -> bool:\n    \"\"\"\n    Check if there exists a sublist in the given list such that the sum of the squares of its elements is divisible by k.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            sublist = arr[i:j]\n            sum_squares = sum([num**2 for num in sublist])\n            if sum_squares % k == 0:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g())\n\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=0) -> bool:\n    \"\"\"\n    Given a list of integers, find if there is a subset of the list that has a sum equal to the target_sum.\n    \"\"\"\n    def subset_sum(numbers, target_sum, index, current_sum):\n        if current_sum == target_sum:\n            return True\n        if index >= len(numbers):\n            return False\n        include = subset_sum(numbers, target_sum, index + 1, current_sum + numbers[index])\n        exclude = subset_sum(numbers, target_sum, index + 1, current_sum)\n        return include or exclude\n\n    return subset_sum(numbers, target_sum, 0, 0)\n\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 225,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of elements in the given array that sums up to the target value.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], target=9):\n    return arr, target\n\nassert f(*g()) == True\n",
        "idx_generation": 429,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> int:\n    \"\"\"\n    Find the maximum number in a list of integers.\n\n    Example:\n    numbers = [1, 5, 3, 7, 2]\n\n    The maximum number in the list is 7, so the function should return 7.\n    \"\"\"\n    return max(numbers)\n\ndef g(numbers=[1, 5, 3, 7, 2]):\n    return numbers\n\nassert f(g()) == 7\n",
        "idx_generation": 434,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is symmetric.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [2, 4, 5],\n        [3, 5, 6]\n    ]\n\n    The matrix is symmetric, so the function should return True.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [\n        [1, 2, 3],\n        [2, 4, 5],\n        [3, 5, 6]\n    ]\n\nassert f(g())\n\n\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> List[int]:\n    \"\"\"Return a list of all prime factors of the given number.\"\"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef g():\n    return 100\n\nassert f(g()) == [2, 2, 5, 5]\n\n",
        "idx_generation": 449,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str]) -> int:\n    \"\"\"\n    Given a list of strings, count the number of strings that start with a vowel (a, e, i, o, u).\n\n    Example:\n    strings = [\"apple\", \"banana\", \"orange\", \"kiwi\"]\n\n    The count of strings starting with a vowel is: 2\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for string in strings:\n        if string[0].lower() in vowels:\n            count += 1\n    return count\n\ndef g(strings=[\"apple\", \"banana\", \"orange\", \"kiwi\"]):\n    return strings\n\nassert f(g()) == 2\n",
        "idx_generation": 442,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(words: List[str], char='a') -> int:\n    \"\"\"\n    Count the number of words in the given list that start with the specified character.\n    Returns the count.\n    \"\"\"\n    return len([word for word in words if word.startswith(char)])\n\ndef g(words=['apple', 'banana', 'avocado', 'grape', 'pear']):\n    return words\n\nassert f(g()) == 2\n\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=24, b=18773099) -> bool:\n    \"\"\"Check if the sum of x and a is equal to b\"\"\"\n    return x + a == b\ndef g(a = 24, b = 18773099):\n    return b - a\nassert f(g())\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    \"\"\"\n    Check if all the words in the given list start with the same letter.\n\n    Sample Input:\n    words = ['apple', 'ant', 'banana', 'ball']\n\n    Sample Output:\n    False\n    \"\"\"\n    if len(words) == 0:\n        return False\n    first_letter = words[0][0]\n    for word in words:\n        if word[0] != first_letter:\n            return False\n    return True\n\ndef g():\n    words = ['apple', 'ant', 'banana', 'ball']\n    return words\n\nassert f(g()) == False\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(s: str, target_length=4) -> bool:\n    \"\"\"\n    Given a string s, check if there exists a substring of length target_length that is a palindrome.\n    Return True if a palindrome substring exists, False otherwise.\n    \"\"\"\n    def is_palindrome(substring):\n        return substring == substring[::-1]\n\n    for i in range(len(s) - target_length + 1):\n        if is_palindrome(s[i:i+target_length]):\n            return True\n    return False\n\ndef g(s=\"noon\"):\n    return s\n\nassert f(g())\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"Find the sum of all prime numbers in the given list.\"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_sum = 0\n    for num in arr:\n        if is_prime(num):\n            prime_sum += num\n    return prime_sum\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g()) == 17\n\n",
        "idx_generation": 79,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a subsequence of a larger list\"\"\"\n    larger_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    i = 0\n    for num in larger_list:\n        if i == len(arr):\n            return True\n        if num == arr[i]:\n            i += 1\n    return False\n\ndef g():\n    return [2, 4, 6, 8]\n\nassert f(g())\n\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if one number is a factor of another number\"\"\"\n    return n % m == 0 or m % n == 0\ndef g(n=10, m=2):\n    return n\nassert f(g(), m=2)\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Check if the given integers satisfy the Pythagorean theorem.\n\n    If a^2 + b^2 = c^2, return True.\n    Otherwise, return False.\n    \"\"\"\n    return math.isclose(a ** 2 + b ** 2, c ** 2)\n\ndef g(a: int = 3, b: int = 4, c: int = 5):\n    \"\"\"\n    Return the integers a, b, and c.\n    \"\"\"\n    return a, b, c\n\nassert f(*g())\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"Find if the given list contains a subarray with a sum of k\"\"\"\n    prefix_sum = set()\n    curr_sum = 0\n    for num in arr:\n        curr_sum += num\n        if curr_sum == k or curr_sum - k in prefix_sum:\n            return True\n        prefix_sum.add(curr_sum)\n    return False\n\ndef g(arr: List[int]):\n    return arr\n\nassert f(g([1, 2, 3, 4, 5]), 9)\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Check if the given two strings are anagrams of each other.\n    \"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g(s1=\"listen\", s2=\"silent\"):\n    return s1, s2\n\nassert f(*g())\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums=[1, 2, 3, 4, 5, 4, 3, 2, 1]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if the target number is present in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g(), target=5)\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"\n    Check if a given number n is divisible by k.\n    \"\"\"\n    return n % k == 0\n\ndef g(n=15, k=3):\n    return n\n\nassert f(g())\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the list such that the product of its elements is equal to a given target.\n    Returns True if such a subsequence exists, False otherwise.\n    \"\"\"\n    n = len(nums)\n    prefix_product = set()\n    curr_product = 1\n    target = 24\n\n    for i in range(n):\n        curr_product *= nums[i]\n\n        if curr_product == target:\n            return True\n\n        if curr_product in prefix_product:\n            return True\n\n        prefix_product.add(curr_product)\n\n    return False\n\ndef g(nums=[2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, ignore_case: bool=True) -> bool:\n    \"\"\"\n    Check if a string is a palindrome.\n\n    Args:\n    - s: The string to be checked.\n    - ignore_case: If True, ignore the case of the characters in the string. Default is True.\n    \"\"\"\n    if ignore_case:\n        s = s.lower()\n    return s == s[::-1]\n\ndef g():\n    return \"Madam\"\n\nassert f(g(), ignore_case=True)\n",
        "idx_generation": 295,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Check if the given strings are anagrams of each other.\n\n    Sample Input:\n    s1 = \"listen\"\n    s2 = \"silent\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g():\n    return \"listen\", \"silent\"\n\nassert f(*g()) == True\n",
        "idx_generation": 497,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if any of the given words is a substring of the target word\"\"\"\n    return any((word in target for word in words))\n\ndef g(target='python'):\n    return target.split()\n\nassert f(g())\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a given number is a perfect square.\n    \"\"\"\n\n    return n >= 0 and (n**0.5).is_integer()\n\ndef g():\n    return 25\n\nassert f(g())\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\nfrom typing import List\n\ndef f(names: List[str]) -> List[str]:\n    \"\"\"\n    Find all names in a list that have more than 5 characters.\n\n    Example:\n    names = ['John', 'Jane', 'Mark', 'Emily', 'Samuel']\n    The names with more than 5 characters are ['Samuel'].\n    Therefore, the puzzle is solved.\n    \"\"\"\n    return [name for name in names if len(name) > 5]\n\ndef g():\n    return ['John', 'Jane', 'Mark', 'Emily', 'Samuel']\n\nassert f(g()) == ['Samuel']\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str]) -> List[str]:\n    \"\"\"\n    Return a new list with the reversed version of each string in the given list.\n\n    Sample Input:\n    strings = ['hello', 'world', 'python']\n\n    Sample Output:\n    ['olleh', 'dlrow', 'nohtyp']\n    \"\"\"\n    reversed_strings = [string[::-1] for string in strings]\n    return reversed_strings\n\ndef g():\n    return ['hello', 'world', 'python']\n\nassert f(g()) == ['olleh', 'dlrow', 'nohtyp']\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\n\n    Sample Input:\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n\n    Sample Output:\n    False\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 292,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a square matrix.\n    Return True if the matrix is square, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\n# Test case\ntest_matrix = [[1, 0, 0], [0, 4, 0], [0, 0, 6]]\nassert f(g(test_matrix))\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list such that their product is equal to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] == target:\n                return True\n    return False\n\ndef g(target=15):\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), target=20)\n",
        "idx_generation": 80,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring: str) -> bool:\n    \"\"\"\n    Check if the given substring is present in the string.\n    Return True if it is, False otherwise.\n    \"\"\"\n    return substring in string\n\ndef g(string=\"Hello\", substring=\"lo\"):\n    return string, substring\n\nassert f(*g())\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exists two numbers in the given list that add up to the target number.\n    Return True if such numbers exist, otherwise return False.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\n\n# Test case\ntest_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g(), target=10)\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a diagonal matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(matrix=[[1, 0, 0], [0, 2, 0], [0, 0, 3]]):\n    \"\"\"Return the matrix.\"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 313,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str]) -> List[str]:\n    \"\"\"\n    Given a list of words, return a new list where each word is capitalized.\n\n    Sample Input:\n    words = ['python', 'programming', 'puzzle']\n\n    Sample Output:\n    ['PYTHON', 'PROGRAMMING', 'PUZZLE']\n    \"\"\"\n    return [word.upper() for word in words]\n\ndef g():\n    words = ['python', 'programming', 'puzzle']\n    return words\n\nassert f(g()) == ['PYTHON', 'PROGRAMMING', 'PUZZLE']\n",
        "idx_generation": 497,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a valid palindrome ignoring any non-alphanumeric characters.\n    Return True if it is a valid palindrome, and False otherwise.\n    \"\"\"\n    alphanumeric_string = ''.join(char.lower() for char in string if char.isalnum())\n    return alphanumeric_string == alphanumeric_string[::-1]\n\ndef g(string: str = \"A man, a plan, a canal, Panama!\"):\n    return string\n\nassert f(g())\n",
        "idx_generation": 254,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum number in the list.\n    \"\"\"\n    return max(arr)\n\ndef g():\n    return [1, 5, 3, 9, 2]\n\nassert f(g()) == 9\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a list contains duplicate elements\"\"\"\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]\n\nassert f(g())\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, word: str) -> bool:\n    \"\"\"Check if the given word is present in the sentence.\"\"\"\n\n    return word.lower() in sentence.lower().split()\n\ndef g(sentence: str = \"The quick brown fox jumps over the lazy dog\", word: str = \"fox\"):\n    return sentence, word\n\nassert f(*g())\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are three numbers in the list that sum up to the target value.\n    Return True if there exist three numbers that sum up to the target, False otherwise.\n    \"\"\"\n    return any(sum(triplet) == target for triplet in itertools.combinations(nums, 3))\n    \ndef g(target=10):\n    \"\"\"\n    Generate a list of numbers.\n    \"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), target=15)\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains a number that is divisible by the sum of its digits.\n    \"\"\"\n    return any(num % sum(int(digit) for digit in str(num)) == 0 for num in x)\ndef g():\n    return [12, 34, 56, 78, 90, 123]\nassert f(g())\n",
        "idx_generation": 433,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, find two numbers in the list that add up to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    \"\"\"\n    This solution uses a set to keep track of the numbers seen so far. It checks if the difference between the target\n    value and the current number is already in the set. If it is, then there exists a pair of numbers that add up to the target.\n    \"\"\"\n    return nums\n\nassert f(g())\n",
        "idx_generation": 89,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there are two numbers in the given list that sum up to the target number.\n    Return True if there are two numbers that sum up to the target, False otherwise.\n    \"\"\"\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        current_sum = nums[left] + nums[right]\n        if current_sum == target:\n            return True\n        elif current_sum < target:\n            left += 1\n        else:\n            right -= 1\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str = 'a') -> bool:\n    \"\"\"Check if the target letter is present at least once in the given string\"\"\"\n    return target in s\n\ndef g(s: str = \"Hello, World!\", target: str = 'a'):\n    \"\"\"\n    Return the string and the target letter.\n    \"\"\"\n    return s, target\n\nassert f(g())\n\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes: List[int]) -> bool:\n    \"\"\"Check if a given number is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for prime in primes:\n        if n % prime == 0:\n            return False\n    return True\ndef g(primes = [2, 3, 5, 7, 11, 13]):\n    return 17\nassert f(g(), primes=[2, 3, 5, 7, 11, 13])\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> str:\n    \"\"\"\n    Given a string, return a new string where each character is replaced by its corresponding ASCII code.\n\n    Sample Input:\n    s = \"Hello\"\n\n    Sample Output:\n    \"72101108108111\"\n    \"\"\"\n    result = \"\"\n    for char in s:\n        result += str(ord(char))\n    return result\n\ndef g(s=\"Hello\"):\n    return s\n\nassert f(g()) == \"72101108108111\"\n",
        "idx_generation": 327,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a list of lists containing integers and a target value, check if any sublist contains the target value.\n    \n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n    \n    Sample Output:\n    True\n    \"\"\"\n    for sublist in arr:\n        if target in sublist:\n            return True\n    return False\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5\n\nassert f(*g()) == True\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(i: int) -> bool:\n    \"\"\"Check if the given number is a power of 2.\"\"\"\n    return i & (i - 1) == 0\n\ndef g():\n    return 16\n\nassert f(g())\n",
        "idx_generation": 367,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=5) -> bool:\n    \"\"\"\n    Check if there exists a sublist in the given list such that the sum of its elements is divisible by k.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            sublist = arr[i:j]\n            if sum(sublist) % k == 0:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst1: List[int], lst2: List[int]) -> bool:\n    \"\"\"\n    Check if the given two lists have at least one common element.\n    Return True if they do, False otherwise.\n    \"\"\"\n    return any(num in lst2 for num in lst1)\n\ndef g(lst1: List[int], lst2: List[int]):\n    \"\"\"\n    Generate a list that contains all elements from lst1 and lst2, without duplicates.\n    \"\"\"\n    return list(set(lst1 + lst2))\n\nassert f(g([1, 2, 3], [3, 4, 5]), [1, 2, 3, 4, 5])\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given an array of integers and a target number, determine if there are three elements in the array that sum up to the target number.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 6]\n    target = 10\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)):\n        left = i + 1\n        right = len(arr) - 1\n        \n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5, 6], 10)\n\nassert f(*g())\n",
        "idx_generation": 432,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers contains any duplicate elements.\n    Return True if any duplicates exist, False otherwise.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 5]\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any contiguous subarray.\n\n    Example:\n    Input: [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n    Output: 6\n    Explanation: The contiguous subarray [4, -1, 2, 1] has the largest sum, which is 6.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n\ndef g():\n    return [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\nassert f(g()) == 6\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a prime number.\n\n    Sample Input:\n    n = 17\n\n    Sample Output:\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g()) == True\n",
        "idx_generation": 457,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring: str) -> bool:\n    \"\"\"\n    Check if a given string starts with the given substring.\n    Return True if the string starts with the substring, False otherwise.\n    \"\"\"\n    return string.startswith(substring)\n\ndef g(string='This is a sample string', substring='This'):\n    return string, substring\n\nassert f(*g())\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word_list: List[str]) -> bool:\n    \"\"\"\n    Check if all words in the given list start with the same letter.\n    Return True if all words start with the same letter, False otherwise.\n    \"\"\"\n    return all(word[0] == word_list[0][0] for word in word_list)\n\ndef g():\n    \"\"\"\n    Generate a list of words starting with the letter 'c'.\n    \"\"\"\n    return [\"cat\", \"cow\", \"camel\", \"car\"]\n\nassert f(g())\n",
        "idx_generation": 419,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target_sum=100) -> bool:\n    \"\"\"\n    Given a list of integers, determine if there exists a pair of numbers that sums up to a target sum.\n    However, the second number must be a multiple of the first number.\n\n    Sample Input:\n    lst = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in lst:\n        if target_sum % num == 0 and target_sum // num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target_sum=100):\n    return [5, 10, 15, 20, 25]\n\nassert f(g())\n\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str = 'python') -> bool:\n    \"\"\"\n    Check if a given string ends with a specific target string in a case-insensitive manner.\n    Returns True if it does, False otherwise.\n    \"\"\"\n    return s.lower().endswith(target.lower())\n\ndef g(target: str = 'python'):\n    return 'I am learning ' + target\n\nassert f(g())\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Check if the given target string is a substring of the given string.\n\n    Sample Input:\n    s = \"Hello, World!\"\n    target = \"World\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return target in s\n\ndef g():\n    return (\"Hello, World!\", \"World\")\n\nassert f(*g()) == True\n",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers nums, check if the list is a permutation of the numbers from 1 to n, where n is the length of the list.\n\n    Example:\n    nums = [4, 2, 1, 3]\n\n    Output:\n    True (Because it is a permutation of [1, 2, 3, 4])\n    \"\"\"\n    n = len(nums)\n    seen = set()\n\n    for num in nums:\n        if num < 1 or num > n or num in seen:\n            return False\n        seen.add(num)\n\n    return len(seen) == n\n\ndef g():\n    n = random.randint(1, 10)\n    nums = random.sample(range(1, n + 1), n)\n    return (nums,)\n\nassert f(*g())\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Return the maximum sum of a contiguous subarray within the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n\ndef g(arr=[-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return arr\n\nassert f(g()) == 6\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a given number n is divisible by both 2 and 3.\n    \"\"\"\n    return n % 2 == 0 and n % 3 == 0\n\ndef g(n = 18):\n    return n\n\nassert f(g())\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=2) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given array that contains exactly k distinct elements.\n    Returns True if such a subarray exists, False otherwise.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if len(set(arr[i:j])) == k:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g())\n\n",
        "idx_generation": 262,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], target_char: str) -> bool:\n    \"\"\"\n    Check if there is a string in the list that starts with the target_char.\n    \"\"\"\n    for string in strings:\n        if string[0] == target_char:\n            return True\n    return False\n\ndef g(strings=['apple', 'banana', 'cherry'], target_char='b'):\n    return strings\n\nassert f(g(), 'b')\n",
        "idx_generation": 240,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n\n    Example:\n    nums = [1, 2, 3, 2, 1]\n    Output: True\n\n    nums = [1, 2, 3, 4, 5]\n    Output: False\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if the target number is present in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=2):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g(), target=2)\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(d: datetime.datetime) -> bool:\n    \"\"\"\n    Check if the given date is a weekday.\n    \"\"\"\n    return d.weekday() < 5\n\ndef g():\n    return datetime.datetime.now()\n\nassert f(g())\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist four numbers in the given list such that their sum is equal to the target.\n    Return True if such a quadruplet exists, False otherwise.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    \n    for i in range(n-3):\n        for j in range(i+1, n-2):\n            left = j + 1\n            right = n - 1\n            \n            while left < right:\n                curr_sum = nums[i] + nums[j] + nums[left] + nums[right]\n                \n                if curr_sum == target:\n                    return True\n                \n                elif curr_sum < target:\n                    left += 1\n                \n                else:\n                    right -= 1\n    \n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), 20)\n",
        "idx_generation": 362,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str], char: str) -> bool:\n    \"\"\"\n    Check if the given character is present in any of the strings.\n    Return True if it is, False otherwise.\n    \"\"\"\n    for string in strings:\n        if char in string:\n            return True\n    return False\n\ndef g(strings=[\"Hello\", \"World\"], char=\"o\"):\n    return strings, char\n\nassert f(*g())\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nimport re\n\ndef f(string: str, substring: str, pattern=r'\\b\\w+\\b') -> bool:\n    \"\"\"Check if the given substring is at the start of the string\"\"\"\n    return re.match(pattern, string) is not None\n\ndef g(string='This is a sample string', substring='This', pattern=r'\\b\\w+\\b'):\n    return string, substring\n\nassert f(*g())\n",
        "idx_generation": 358,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return n >= 0 and int(n ** 0.5) ** 2 == n\n\ndef g():\n    return 25\n\nassert f(g())\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(strings: List[str]) -> List[str]:\n    \"\"\"\n    Remove all vowels from the given list of strings and return the modified list.\n\n    Sample Input:\n    `strings = [\"apple\", \"banana\", \"cherry\"]`\n\n    Sample Output:\n    `[\"ppl\", \"bnn\", \"chrry\"]`\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return [''.join(char for char in string if char.lower() not in vowels) for string in strings]\n\ndef g():\n    return [\"apple\", \"banana\", \"cherry\"]\n\nassert f(g()) == [\"ppl\", \"bnn\", \"chrry\"]\n\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, return a new matrix with each element squared.\n    \"\"\"\n    n = len(matrix)\n    squared_matrix = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            squared_matrix[i][j] = matrix[i][j] ** 2\n    return squared_matrix\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[1, 4, 9], [16, 25, 36], [49, 64, 81]]\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    if rows != cols:\n        return False\n    \n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    \n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target_sum=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiplies to the target sum.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] * lst[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=0):\n    return [target_sum] * 5\n\nassert f(g())\n",
        "idx_generation": 114,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[str], substring: str) -> bool:\n    \"\"\"\n    Given a list of strings and a target substring, check if any string in the list\n    contains the target substring in reverse order.\n    \n    Sample Input:\n    arr = ['apple', 'banana', 'cherry', 'grape', 'orange']\n    substring = 'egnar'\n    \n    Sample Output:\n    True\n    \"\"\"\n    for s in arr:\n        if substring[::-1] in s:\n            return True\n    return False\n\ndef g():\n    return ['apple', 'banana', 'cherry', 'grape', 'orange'], 'egnar'\n\nassert f(*g()) == True\n\n",
        "idx_generation": 392,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are three numbers in the list whose sum is equal to the target.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 6\n    The sum of three numbers in the list (1+2+3) is equal to the target (6).\n    Therefore, the puzzle is solved.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 6)\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if all the elements in the matrix are positive integers.\"\"\"\n    for row in matrix:\n        for num in row:\n            if num <= 0:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    \"\"\"Return the matrix.\"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='py', suffix='on') -> bool:\n    \"\"\"\n    Given a list of words, check if there exists a word that starts with the given prefix and ends with the given suffix.\n\n    Example:\n    words = ['python', 'pyramid', 'jupyter', 'puzzle']\n    output: True\n    \"\"\"\n    return any((word.startswith(prefix) and word.endswith(suffix) for word in words))\n\ndef g(prefix='py', suffix='on'):\n    return ['python', 'pyramid', 'jupyter', 'puzzle']\n\nassert f(g())\n",
        "idx_generation": 254,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is sorted in ascending order.\n\n    Returns True if the list is sorted, False otherwise.\n    \"\"\"\n    return arr == sorted(arr)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there are any duplicate elements in the given list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    False\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == False\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist three distinct numbers in the list whose sum is equal to the target integer.\n    Return True if such triple exists, False otherwise.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g(), 10)\n",
        "idx_generation": 415,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains exactly one duplicate number.\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]\n\nassert f(g())\n",
        "idx_generation": 443,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_count=3) -> bool:\n    \"\"\"Check if there are at least target_count distinct even numbers in the list.\"\"\"\n    even_nums = set(filter(lambda x: x % 2 == 0, nums))\n    return len(even_nums) >= target_count\ndef g(target_count=3):\n    return [2, 4, 6, 8, 10]\nassert f(g())\n",
        "idx_generation": 103,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there are three numbers in the given list that sum up to the target number.\n    Return True if there are three numbers that sum up to the target, False otherwise.\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums) - 2):\n        left = i + 1\n        right = len(nums) - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(target=0):\n    return [-1, 0, 1, 2, -1, -4]\n\nassert f(g())\n",
        "idx_generation": 57,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, char: str) -> bool:\n    \"\"\"\n    Check if the given character is present in the string and appears at least twice consecutively.\n    Return True if it does, False otherwise.\n    \"\"\"\n    for i in range(len(string) - 1):\n        if string[i] == char and string[i + 1] == char:\n            return True\n    return False\n\ndef g(string=\"Hello\", char=\"l\"):\n    return string, char\n\nassert f(*g())\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if the sum of the elements in the list is divisible by the first element in the list.\n    \"\"\"\n    return sum(numbers) % numbers[0] == 0\n\ndef g(numbers=[2, 4, 6, 8, 10]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char: str) -> bool:\n    \"\"\"\n    Check if the character char is present in the string s.\n    Returns True if char is present, False otherwise.\n    \"\"\"\n    for c in s:\n        if c == char:\n            return True\n    return False\n\ndef g(s=\"Hello World!\", char=\"o\"):\n    return s, char\n\nassert f(*g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(x: List[int]) -> List[int]:\n    \"\"\"\n    Reverse the order of elements in the given list and return the reversed list.\n\n    Example:\n    x = [1, 2, 3, 4, 5]\n\n    The reversed list is [5, 4, 3, 2, 1].\n    \"\"\"\n    return x[::-1]\n\ndef g(x: List[int]):\n    return x\n\n# Test case\ntest_list = [1, 2, 3, 4, 5]\nassert f(g(test_list)) == [5, 4, 3, 2, 1]\n\n",
        "idx_generation": 412,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a given number n is a palindrome.\n\n    Sample Input:\n    `121`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef g(n=121):\n    return n\n\nassert f(g())\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"\n    Check if there exists a sublist in the given list such that the difference between the maximum and minimum elements is divisible by k.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            sublist = arr[i:j]\n            max_num = max(sublist)\n            min_num = min(sublist)\n            if (max_num - min_num) % k == 0:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> List[int]:\n    \"\"\"\n    Generate a list of the first n prime numbers.\n    Return the list of prime numbers.\n    \"\"\"\n    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes\n\ndef g():\n    return 5\n\nassert f(g()) == [2, 3, 5, 7, 11]\n",
        "idx_generation": 240,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the list that add up to the target_sum.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False\n\ndef g(lst=[1, 2, 3, 4, 5], target_sum=7):\n    return lst\n\nassert f(g(), 7)\n",
        "idx_generation": 434,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains any duplicate numbers.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g(nums=[1, 2, 3, 4, 5, 1]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 442,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a sublist in the given list whose sum is equal to the maximum element in the list.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    max_val = max(arr)\n    sublists = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            sublist = arr[i:j]\n            sublists.append(sublist)\n    for sublist in sublists:\n        if sum(sublist) == max_val:\n            return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a prime number.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str]) -> List[str]:\n    \"\"\"Return the list of words in reverse order\"\"\"\n    return words[::-1]\n\ndef g(words: List[str]):\n    return words\n\n# Test case\ntest_words = [\"Hello\", \"World\", \"Python\"]\nassert f(g(test_words)) == [\"Python\", \"World\", \"Hello\"]\n\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, letters=['a', 'b', 'c', 'd', 'e'], target='abcde') -> bool:\n    \"\"\"\n    Check if the target word can be formed using the letters in the list, allowing repetition of letters.\n    \"\"\"\n    return all(word.count(letter) <= letters.count(letter) for letter in set(word))\ndef g(letters=['a', 'b', 'c', 'd', 'e'], target='abcde'):\n    if len(letters) != len(target):\n        return \"\"\n    return \"\".join(letters)\nassert f(g())\n",
        "idx_generation": 432,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[List[int]]) -> int:\n    \"\"\"Find the sum of all the elements in the list of lists\"\"\"\n    total_sum = 0\n    for sub_list in lst:\n        for num in sub_list:\n            total_sum += num\n    return total_sum\n\ndef g(lst: List[List[int]]):\n    return lst\n\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]])) == 45\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(sentence: str, word: str, pattern=r'\\b\\w+\\b') -> bool:\n    \"\"\"Check if the given word is present in the sentence and it contains only uppercase letters\"\"\"\n    return re.search(pattern, sentence) is not None and word.isupper()\n\ndef g(sentence='This is a sample sentence', word='SAMPLE', pattern=r'\\b\\w+\\b'):\n    return sentence, word\n\nassert f(*g())\n",
        "idx_generation": 390,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square\"\"\"\n    n = len(matrix)\n    sums = set()\n    for row in matrix:\n        sums.add(sum(row))\n    for col in range(n):\n        sums.add(sum(matrix[i][col] for i in range(n)))\n    sums.add(sum(matrix[i][i] for i in range(n)))\n    sums.add(sum(matrix[i][n-i-1] for i in range(n)))\n    return len(sums) == 1\n\ndef g():\n    return [\n        [2, 7, 6],\n        [9, 5, 1],\n        [4, 3, 8]\n    ]\n\nassert f(g())\n",
        "idx_generation": 89,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"\n    Check if a number n is divisible by a and b.\n\n    Sample Input:\n    `12`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return n % a == 0 and n % b == 0\n\ndef g(a=2, b=3):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 231,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]], distance=5) -> bool:\n    \"\"\"Check if there exists a pair of points in the list that are at a distance greater than or equal to a specific value\"\"\"\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            if ((points[i][0] - points[j][0]) ** 2 + (points[i][1] - points[j][1]) ** 2) ** 0.5 >= distance:\n                return True\n    return False\n\ndef g(distance=5):\n    return [(0, 0), (3, 4), (5, 12), (8, 15), (9, 12)]\nassert f(g())\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub: str) -> bool:\n    \"\"\"Check if the given string contains the given substring.\"\"\"\n    return sub in s\n\ndef g(sub: str):\n    return 'abcdefgh' + sub + 'ijklmnopqrstuvwxyz'\n\nassert f(g('xyz'), 'xyz')\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=4) -> bool:\n    \"\"\"\n    Check if there exists a sublist in the given list such that the difference between the maximum and minimum element in the sublist is less than or equal to k.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            sublist = arr[i:j]\n            if max(sublist) - min(sublist) <= k:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 282,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if the target number is present in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=8):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g(), target=8)\n\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=10) -> bool:\n    \"\"\"\n    Given a positive integer n, return True if n can be expressed as the product of two prime numbers, otherwise return False.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    for i in range(2, int(n/2) + 1):\n        if is_prime(i) and is_prime(n/i):\n            return True\n    return False\n\ndef g(n=10):\n    return n\n\nassert f(g())\n",
        "idx_generation": 420,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=8) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the list such that the product of any two consecutive elements is equal to a given target.\n    Returns True if such a subsequence exists, False otherwise.\n    \"\"\"\n    n = len(nums)\n    prefix_product = set()\n\n    for i in range(n-1):\n        curr_product = nums[i] * nums[i+1]\n\n        if curr_product == target:\n            return True\n\n        if curr_product in prefix_product:\n            return True\n\n        prefix_product.add(curr_product)\n\n    return False\n\ndef g(target=8):\n    return [2, 4, 1, 3, 2]\n\nassert f(g())\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], suffix: str) -> bool:\n    \"\"\"\n    Check if there exists a word in the list that ends with the given suffix.\n    \"\"\"\n    for word in words:\n        if word.endswith(suffix):\n            return True\n    return False\n\ndef g():\n    return [\"apple\", \"banana\", \"cherry\"], \"ry\"\n\nassert f(*g())\n\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nimport re\n\ndef f(string: str, substring: str, pattern=r'\\b\\w+\\b') -> bool:\n    \"\"\"Check if the given substring is at the end of the string\"\"\"\n    return re.search(substring + r\"$\", string) is not None\n\ndef g(string='This is a sample string', substring='string', pattern=r'\\b\\w+\\b'):\n    return string, substring\n\nassert f(*g())\n",
        "idx_generation": 358,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a perfect square.\n\n    Example:\n    n = 16\n\n    The output should be:\n    True\n    \"\"\"\n    return int(n**0.5)**2 == n\n\ndef g():\n    return 16\n\nassert f(g()) == True\n\n\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str]) -> List[str]:\n    \"\"\"\n    Given a list of words, return a new list where each word is reversed.\n\n    Sample Input:\n    words = ['python', 'programming', 'puzzle']\n\n    Sample Output:\n    ['nohtyp', 'gnimmargorp', 'elzzup']\n    \"\"\"\n    return [word[::-1] for word in words]\n\ndef g():\n    words = ['python', 'programming', 'puzzle']\n    return words\n\nassert f(g()) == ['nohtyp', 'gnimmargorp', 'elzzup']\n\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    \"\"\"Return the matrix.\"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is symmetric along the main diagonal.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    if rows != cols:\n        return False\n    \n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    \n    return True\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, find two distinct elements in the list that sum up to the target.\n    Return True if such elements exist, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in lst:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(lst=[1, 2, 3, 4, 5], target=9):\n    return lst, target\n\nassert f(*g())\n",
        "idx_generation": 114,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring: str) -> bool:\n    \"\"\"\n    Check if a given substring is a palindrome.\n\n    Sample Input:\n    string = 'level'\n    substring = 'eve'\n\n    Sample Output:\n    True\n    \"\"\"\n    return substring == substring[::-1]\n\ndef g(string='level', substring='eve'):\n    return string, substring\n\nassert f(*g())\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exist two numbers in the list that multiply to the target integer. The numbers can be repeated.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[-1, 0, 1, 2, -1, -4]):\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the sum of all elements in the given matrix.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    The sum of all elements is 45.\n    \"\"\"\n    total_sum = 0\n    for row in matrix:\n        total_sum += sum(row)\n    return total_sum\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == 45\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a pangram.\"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for char in alphabet:\n        if char not in s.lower():\n            return False\n    return True\n\ndef g():\n    return \"The quick brown fox jumps over the lazy dog\"\n\nassert f(g())\n",
        "idx_generation": 260,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in ascending order\"\"\"\n    return arr == sorted(arr)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the array contains duplicate elements.\"\"\"\n    return len(set(arr)) != len(arr)\n\ndef g():\n    return [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, threshold: int = 10) -> bool:\n    \"\"\"\n    Check if there exist three numbers in the list whose sum is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, remove all duplicates and return the updated list.\n\n    Example:\n    nums = [1, 2, 3, 2, 4, 5, 1]\n    Output: [1, 2, 3, 4, 5]\n    \"\"\"\n    return list(set(nums))\n\ndef g():\n    return [1, 2, 3, 2, 4, 5, 1]\n\nassert f(g()) == [1, 2, 3, 4, 5]\n\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains at least one element that is both an even number and a multiple of 3.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 0 and num % 3 == 0:\n            return True\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 105,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers, find a pair of numbers that add up to the target value.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers = [1, 2, 3, 4, 5], target = 8):\n    return numbers\n\nassert f(g(), 8)\n\n",
        "idx_generation": 60,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(email: str) -> bool:\n    \"\"\"\n    Check if the given string is a valid email address.\n    A valid email address should have the following format:\n    - It should contain exactly one '@' symbol.\n    - It should have a domain name after the '@' symbol.\n    - The domain name should contain at least one '.' symbol.\n    - The domain name should have at least two characters after the last '.' symbol.\n    \"\"\"\n    if email.count('@') != 1:\n        return False\n    username, domain = email.split('@')\n    if '.' not in domain or len(domain.split('.')[-1]) < 2:\n        return False\n    return True\n\ndef g():\n    return \"john.doe@example.com\"\n\nassert f(g())\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n=10) -> bool:\n    \"\"\"\n    Check if the sum of all elements in a list is divisible by a given number.\n    \"\"\"\n    total = sum(lst)\n    return total % n == 0\n\ndef g(n=10):\n    return [2, 4, 6, 8]\n\nassert f(g())\n\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> int:\n    \"\"\"\n    Calculate the total number of vowels in a given string.\n\n    Example:\n    s = \"Hello, World!\"\n    The total number of vowels is 3.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    for char in s.lower():\n        if char in vowels:\n            vowel_count += 1\n    return vowel_count\n\ndef g():\n    return \"Hello, World!\"\n\nassert f(g()) == 3\n",
        "idx_generation": 422,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is sorted in non-decreasing order.\n    Return True if the list is sorted in non-decreasing order, False otherwise.\n    \"\"\"\n    return all(num_list[i] <= num_list[i+1] for i in range(len(num_list)-1))\n\ndef g():\n    \"\"\"\n    Generate a sorted list of numbers.\n    \"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 419,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(num: int) -> bool:\n    \"\"\"\n    Check if a number is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n\n",
        "idx_generation": 392,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given an array of integers nums and an integer k, return the k least frequent elements.\n    You may return the answer in any order.\n    \"\"\"\n    freq_map = {}\n    for num in nums:\n        freq_map[num] = freq_map.get(num, 0) + 1\n    sorted_nums = sorted(freq_map, key=lambda x: freq_map[x])\n    return sorted_nums[:k]\n\ndef g():\n    nums = [1, 1, 1, 2, 2, 3]\n    k = 2\n    return nums, k\n\nassert f(*g()) == [3, 2]\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Return a new list containing only the unique elements from the given list, in the same order.\n    \"\"\"\n    unique_numbers = []\n    for num in numbers:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return unique_numbers\n\ndef g(numbers = [1, 2, 3, 4, 4, 5, 6, 6]):\n    return numbers\n\nassert f(g()) == [1, 2, 3, 4, 5, 6]\n\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import numpy as np\nfrom typing import*\nfrom typing import List\n\ndef f(arr: np.ndarray, target: int) -> bool:\n    \"\"\"\n    Check if the given 2D numpy array contains any row where the sum of its elements is equal to the target.\n\n    Example:\n    arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    The array does not have any row with a sum equal to the target (10).\n    Therefore, the function should return False.\n    \"\"\"\n    row_sums = np.sum(arr, axis=1)\n    return np.any(row_sums == target)\n\ndef g(target=10):\n    arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    return (arr, target)\n\nassert f(*g()) == False\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, find the maximum number in the list.\n    \"\"\"\n    return max(numbers)\n\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return numbers\n\nassert f(g()) == 5\n\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    A matrix is symmetric if it is equal to its transpose.\n    Return True if the matrix is symmetric, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a prime number.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g()) == True\n\n\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str]) -> bool:\n    \"\"\"Check if all names in the given list start with the same letter\"\"\"\n    first_letter = names[0][0].lower()\n    return all(name[0].lower() == first_letter for name in names)\n\ndef g():\n    return [\"Alice\", \"Adam\", \"Alex\", \"Amy\"]\n\nassert f(g())\n\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, k: int) -> bool:\n    \"\"\"\n    Check if a given string can be divided into k equal parts.\n    \"\"\"\n    if len(string) % k != 0:\n        return False\n    part_len = len(string) // k\n    for i in range(0, len(string), part_len):\n        if string[i:i+part_len] != string[:part_len]:\n            return False\n    return True\n\ndef g(string=\"hellohellohello\", k=3):\n    return string, k\n\nassert f(*g())\n\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 169,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, ignore_case=True) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    if ignore_case:\n        string = string.lower()\n    return string == string[::-1]\ndef g(ignore_case=True):\n    return \"Level\"\nassert f(g())\n\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is a magic square.\n    A magic square is a square matrix where the sums of each row, each column, and both diagonals are the same.\n    Return True if it is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(matrix[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n\n    return True\n\ndef g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 92,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"\n    Check if the sum of the digits of a number n is divisible by a and b.\n\n    Sample Input:\n    `123`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    digit_sum = sum([int(digit) for digit in str(n)])\n    return digit_sum % a == 0 and digit_sum % b == 0\n\ndef g(a=2, b=3):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 240,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"Check if there exists a subsequence of the given list whose sum is divisible by k\"\"\"\n    dp = [False] * (k + 1)\n    dp[0] = True\n    for num in arr:\n        for i in range(k):\n            if dp[i]:\n                dp[(i + num) % k] = True\n    return dp[0]\n\ndef g(arr: List[int], k: int):\n    return arr, k\n\nassert f(*g([1, 2, 3, 4, 5], 7))\n",
        "idx_generation": 357,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Check if the given two strings are palindromes of each other.\n    Return True if the strings are palindromes, and False otherwise.\n    \"\"\"\n    return s1 == s2[::-1]\n\ndef g(s1=\"racecar\", s2=\"racecar\"):\n    return [s1, s2]\n\nassert f(*g())\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n\n    Example:\n    nums = [1, 2, 3, 2, 1]\n    Output: True\n\n    nums = [1, 2, 3, 4, 5]\n    Output: False\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n",
        "idx_generation": 283,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if the target number is present in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g(), target=5)\n\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"\n    Given a string s and a positive integer n, return True if the n-th character of the string is a digit,\n    otherwise return False.\n\n    Sample Input:\n    s = \"Hello123\"\n    n = 6\n\n    Sample Output:\n    True\n    \"\"\"\n    if n <= len(s):\n        return s[n-1].isdigit()\n    else:\n        return False\n\ndef g(s='Hello123', n=6):\n    return s, n\n\nassert f(*g())\n\n",
        "idx_generation": 434,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, find the maximum product of any two distinct elements in the list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    20\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 20\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: List[str]) -> str:\n    \"\"\"Find the longest string in the given list.\"\"\"\n    longest = \"\"\n    for word in s:\n        if len(word) > len(longest):\n            longest = word\n    return longest\n\ndef g():\n    return ['apple', 'banana', 'cat', 'dog', 'elephant', 'fish', 'giraffe', 'horse', 'iguana']\n\nassert f(g()) == 'elephant'\n\n",
        "idx_generation": 319,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string s\"\"\"\n    return substr in s\n\ndef g(substr='abc'):\n    return \"xyz\" + substr + \"pqr\"\n\nassert f(g())\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(num: int) -> bool:\n    \"\"\"\n    Check if a number is a perfect square.\n    \"\"\"\n    if num < 0:\n        return False\n    sqrt = int(num ** 0.5)\n    return sqrt * sqrt == num\n\ndef g():\n    return 16\n\nassert f(g())\n\n",
        "idx_generation": 357,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a square matrix.\n    \"\"\"\n    n = len(matrix)\n    for row in matrix:\n        if len(row) != n:\n            return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 311,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if any two numbers in the given list add up to the target number\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(), 10)\n",
        "idx_generation": 116,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring: str) -> bool:\n    \"\"\"\n    Check if the given substring is present in the given string.\n\n    Sample Input:\n    string = \"Hello, World!\"\n    substring = \"World\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return substring in string\n\ndef g(string=\"Hello, World!\", substring=\"World\"):\n    return string, substring\n\nassert f(*g())\n\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exist four numbers in the list that add up to the target integer. The numbers can be repeated.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            for k in range(len(numbers)):\n                for l in range(len(numbers)):\n                    if numbers[i] + numbers[j] + numbers[k] + numbers[l] == target:\n                        return True\n    return False\n\ndef g(numbers=[-1, 0, 1, 2]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a diagonal matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(matrix=[[1, 0, 0], [0, 2, 0], [0, 0, 3]]):\n    \"\"\"Return the matrix.\"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is an anagram of a palindrome.\n    An anagram of a palindrome is a string that can be rearranged to form a palindrome.\n    \"\"\"\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    odd_count = 0\n    for count in char_count.values():\n        if count % 2 != 0:\n            odd_count += 1\n        if odd_count > 1:\n            return False\n    \n    return True\n\ndef g(s='racecar'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 261,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in descending order\"\"\"\n    return arr == sorted(arr, reverse=True)\n\ndef g():\n    return [5, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 406,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"Return a list of distinct elements from the given array.\"\"\"\n    return list(set(arr))\n\ndef g():\n    return [1, 2, 2, 3, 4, 4, 5]\n\nassert f(g()) == [1, 2, 3, 4, 5]\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\nfrom typing import List\n\ndef f(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Find all numbers in a list that are divisible by 3.\n\n    Example:\n    numbers = [1, 3, 6, 9, 12]\n    The numbers divisible by 3 are [3, 6, 9, 12].\n    Therefore, the puzzle is solved.\n    \"\"\"\n    return [num for num in numbers if num % 3 == 0]\n\ndef g():\n    return [1, 3, 6, 9, 12]\n\nassert f(g()) == [3, 6, 9, 12]\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if there is a subsequence in the list that sums up to 0.\n    \"\"\"\n    for i in range(1, len(lst) + 1):\n        for sub in itertools.combinations(lst, i):\n            if sum(sub) == 0:\n                return True\n    return False\n\ndef g():\n    return [1, -2, 3, 4, -5]\n\nassert f(g())\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with only the even numbers from the original list.\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]\n\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g()) == [2, 4, 6, 8]\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target_sum=10) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose sum is equal to the target sum.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> int:\n    \"\"\"\n    Given a string s, return the number of vowels present in the string.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count\n\ndef g(s: str):\n    return s\n\n# Test case\ntest_string = \"Hello, World!\"\nassert f(g(test_string)) == 3\n\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to the third number\"\"\"\n    return x + y == z or x + z == y or y + z == x\ndef g(x: int, y: int):\n    z = x + y\n    return z\nassert f(g(10, 5), 10, 5)\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char: str = 'a') -> bool:\n    \"\"\"Check if the given character `char` is present in the string `s`\"\"\"\n    return char in s\n\ndef g(s='Hello, World!', char='o'):\n    return s, char\n\nassert f(*g())\n",
        "idx_generation": 428,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer k, check if there exists two distinct indices i and j in the list \n    such that nums[i] = nums[j] and the absolute difference between i and j is less than or equal to k.\n    Return True if such indices exist, False otherwise.\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(arr):\n        if num in num_dict and i - num_dict[num] <= k:\n            return True\n        num_dict[num] = i\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5, 6, 7, 8, 9, 9], 5)\n\nassert f(*g())\n\n",
        "idx_generation": 428,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a given number is a palindrome.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef g():\n    n = 12321\n    return n\n\nassert f(g())\n\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    Find the k largest numbers in the list and return them in descending order.\n    \"\"\"\n    nums.sort(reverse=True)\n    return nums[:k]\n\ndef g(nums=[10, 4, 6, 8, 2], k=3):\n    return nums, k\n\nassert f(*g()) == [10, 8, 6]\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int], target=10) -> bool:\n    \"\"\"Check if the sum of any two distinct numbers in the sequence is equal to the target.\"\"\"\n    return any(seq[i] + seq[j] == target for i in range(len(seq)-1) for j in range(i+1, len(seq)))\n\ndef g(target=10):\n    \"\"\"Return a list of 5 distinct numbers whose sum is equal to the target.\"\"\"\n    return [1, 2, 3, target-6, target-4]\n\nassert f(g())\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given numpy array that sums up to the target value.\n\n    Example:\n    arr = np.array([1, 2, 3, 4, 5])\n    target = 9\n\n    The subarray [2, 3, 4] sums up to 9, so the function should return True.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if np.sum(arr[i:j+1]) == target:\n                return True\n    return False\n\ndef g(arr=np.array([1, 2, 3, 4, 5]), target=9):\n    return arr, target\n\nassert f(*g())\n",
        "idx_generation": 439,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list such that the sum of its elements is equal to target,\n    and the subarray contains at least one even number.\n\n    Sample Input:\n    `nums = [3, -4, 7, 2, 1, -8], target = 1`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n\n        if prefix_sum == target and any(n % 2 == 0 for n in nums):\n            return True\n\n        if prefix_sum - target in prefix_sums:\n            return True\n\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int]):\n    return nums, 1\n\nassert f(*g([3, -4, 7, 2, 1, -8]))\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    A list is a palindrome if it remains the same when reversed.\n    Return True if the list is a palindrome, False otherwise.\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 3, 2, 1]\n\nassert f(g())\n\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if a string is a valid email address.\n    \"\"\"\n    pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n    return bool(re.match(pattern, string))\n\ndef g(string = \"test@example.com\"):\n    return string\n\nassert f(g())\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n: int) -> bool:\n    \"\"\"\n    Check if a list contains at least n distinct numbers.\n    \"\"\"\n    return len(set(lst)) >= n\n\ndef g(n=3):\n    return [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6]\n\nassert f(g(), n=4)\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(s: List[str]) -> bool:\n    \"\"\"\n    Check if at least one string in the list contains only uppercase letters.\n    \"\"\"\n    return any(all(c.isupper() for c in x) for x in s)\n\ndef g():\n    return [\"APPLE\", \"banana\", \"CHERRY\"]\n\nassert f(g())\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of numbers, check if all the numbers in the list are prime.\n    Return True if all numbers are prime, False otherwise.\n    \"\"\"\n    for num in nums:\n        if num < 2:\n            return False\n        for i in range(2, int(num/2)+1):\n            if num % i == 0:\n                return False\n    return True\n\ndef g():\n    nums = [2, 3, 5, 7, 11]\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(a: int, b: int, c: int, d: int) -> bool:\n    \"\"\"Check if the difference between the product of a and b and the sum of c and d is divisible by 3.\"\"\"\n    return (a * b - c - d) % 3 == 0\n\ndef g(a = 2, b = 3, c = 4, d = 5):\n    return a, b, c, d\n\nassert f(*g())\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"Check if there exists a subsequence of the given list whose sum is divisible by k\"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in arr:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum == 0 or prefix_sum in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\n\ndef g(arr: List[int], k: int):\n    return arr, k\n\nassert f(*g([1, 2, 3, 4, 5], 7))\n",
        "idx_generation": 357,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], character: str) -> bool:\n    \"\"\"\n    Check if any word in the list contains the given character.\n\n    Example:\n    words = ['apple', 'banana', 'orange', 'grape', 'melon', 'kiwi']\n    character = 'a'\n\n    The words 'apple', 'banana', 'grape', and 'orange' contain the character 'a', so the function should return True.\n    \"\"\"\n    for word in words:\n        if character in word:\n            return True\n    return False\n\ndef g(character='a'):\n    return ['apple', 'banana', 'orange', 'grape', 'melon', 'kiwi']\n\nassert f(g(), character='a')\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of numbers, check if the list is a palindrome.\n    Return True if the list is a palindrome, False otherwise.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums=[1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 295,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if the target number is present in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=9):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g(), target=9)\n\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, find the minimum product of any two distinct elements in the list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    2\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product < min_product:\n                min_product = product\n    return min_product\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 2\n\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5, strings=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if the given string is present in the list and has a length less than n.\"\"\"\n    return s in strings and len(s) < n\n\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return sorted(strings, key=len)[0]\n\nassert f(g())\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if a string is a pangram\"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    string = string.lower()\n    for char in alphabet:\n        if char not in string:\n            return False\n    return True\n\ndef g(string=\"The quick brown fox jumps over the lazy dog\"):\n    return string\n\nassert f(g())\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a given number is a perfect square.\n\n    Sample Input:\n    n = 16\n\n    Sample Output:\n    True\n    \"\"\"\n    return int(n ** 0.5) ** 2 == n\n\ndef g():\n    return 16\n\nassert f(g())\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    \"\"\"Return the matrix.\"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a square matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, length=5) -> bool:\n    \"\"\"Find a combination of numbers from the given list which adds up to the target and has a length equal to length\"\"\"\n    from itertools import combinations\n    for comb in combinations(nums, length):\n        if sum(comb) == target:\n            return True\n    return False\ndef g(target = 100, length = 5):\n    return list(range(1, target + 1))\nassert f(g())\n",
        "idx_generation": 117,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, substring='py') -> bool:\n    \"\"\"\n    Given a string and a substring, return True if the substring appears in the string, otherwise return False.\n    \"\"\"\n    return substring in word\n\ndef g(word = 'python'):\n    return word\n\nassert f(g())\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exist two numbers in the list that multiply to the target integer. The numbers can be repeated.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if numbers[i] * numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers=[-1, 0, 1, 2]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a diagonal matrix.\n    A diagonal matrix is a square matrix where all non-diagonal elements are zero.\n    \"\"\"\n    n = len(matrix)\n    \n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    \n    return True\n\ndef g(matrix=[[1, 0, 0], [0, 2, 0], [0, 0, 3]]):\n    \"\"\"\n    This solution checks if all non-diagonal elements are zero.\n    \"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 355,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is a palindrome, ignoring spaces and cases.\n    \"\"\"\n    s = \"\".join(s.lower().split())\n    return s == s[::-1]\n\ndef g(s=\"A man a plan a canal Panama\"):\n    return s\n\nassert f(g())\n",
        "idx_generation": 268,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the sum of the elements in the main diagonal of a given matrix.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    output: 15\n    \"\"\"\n    n = len(matrix)\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n    return diagonal_sum\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g()) == 15\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers has a duplicate number.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    Output: False\n\n    nums = [1, 2, 3, 2, 4]\n    Output: True\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 2, 4]\n\nassert f(g()) == True\n",
        "idx_generation": 375,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exist four elements in the list whose sum is equal to the target number.\"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n-3):\n        for j in range(i+1, n-2):\n            left = j + 1\n            right = n - 1\n            while left < right:\n                current_sum = nums[i] + nums[j] + nums[left] + nums[right]\n                if current_sum == target:\n                    return True\n                elif current_sum < target:\n                    left += 1\n                else:\n                    right -= 1\n    return False\n\ndef g(nums=[-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return (nums, 7)\n\nassert f(*g())\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains both even and odd numbers.\n    Return True if it does, False otherwise.\n    \"\"\"\n    even = False\n    odd = False\n    for num in lst:\n        if num % 2 == 0:\n            even = True\n        else:\n            odd = True\n    return even and odd\n\ndef g():\n    \"\"\"\n    Generate a list of 10 random integers.\n    \"\"\"\n    import random\n    return [random.randint(1, 100) for _ in range(10)]\n\nassert f(g())\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target_sum=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that subtracts to the target sum.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] - lst[j] == target_sum or lst[j] - lst[i] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=0):\n    return [target_sum] * 5\n\nassert f(g())\n",
        "idx_generation": 114,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target=20) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    return [i for i in range(target)]\n\nassert f(g())\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(a: int, b: int, c: int, d: int) -> bool:\n    \"\"\"Check if the sum of three numbers is equal to the fourth number\"\"\"\n    return a + b + c == d or a + b + d == c or a + c + d == b or b + c + d == a\ndef g(a: int, b: int, c: int):\n    d = a + b + c\n    return d\nassert f(g(1, 2, 3), 1, 2, 3)\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, letters=['a', 'b', 'c', 'd', 'e'], target='abcde') -> bool:\n    \"\"\"\n    Check if all the letters in the target word are present in the list of letters.\n    \"\"\"\n    return set(target).issubset(set(letters))\ndef g(letters=['a', 'b', 'c', 'd', 'e'], target='abcde'):\n    if len(letters) != len(target):\n        return \"\"\n    return \"\".join(letters)\nassert f(g())\n",
        "idx_generation": 432,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr1: List[int], arr2: List[int]) -> bool:\n    \"\"\"\n    Check if two lists have the same elements, regardless of their order.\n\n    Example:\n    arr1 = [1, 2, 3, 4]\n    arr2 = [3, 2, 4, 1]\n\n    Both lists have the same elements, so the function should return True.\n    \"\"\"\n    return set(arr1) == set(arr2)\n\ndef g():\n    return ([1, 2, 3, 4], [3, 2, 4, 1])\n\nassert f(*g())\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a palindrome.\"\"\"\n    return str(n) == str(n)[::-1]\n\ndef g() -> int:\n    return 12321\n\nassert f(g())\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=2) -> bool:\n    \"\"\"\n    Check if there exists a sublist in the given list such that the sum of its elements is divisible by k.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            sublist = arr[i:j]\n            if sum(sublist) % k == 0:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 282,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if all elements in the list are distinct and positive.\n    \"\"\"\n    return len(numbers) == len(set(numbers)) and all(num > 0 for num in numbers)\n\ndef g(numbers=[1, 2, 3, 4, 5, 6]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there exists a pair of numbers in the list whose sum is equal to the target.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n    output: True\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 7\n\nassert f(*g())\n\n",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the sum of the numbers in the given list is a multiple of 10.\n\n    Sample Input:\n    nums = [5, 10, 15]\n\n    Sample Output:\n    True\n    \"\"\"\n    return sum(nums) % 10 == 0\n\ndef g(nums=[5, 10, 15]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 449,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if all elements in the given list are even numbers\"\"\"\n    return all(num % 2 == 0 for num in arr)\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(names: List[str]) -> bool:\n    \"\"\"\n    Check if all the names in the given list are palindrome.\n    \"\"\"\n    return all(name == name[::-1] for name in names)\n\ndef g(names = [\"anna\", \"bob\", \"eve\", \"elle\"]):\n    return names\n\nassert f(g())\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n=20, length=5) -> bool:\n    \"\"\"Find a list of integers where the sum is equal to n and the length is equal to length\"\"\"\n    return sum(lst) == n and len(lst) == length\ndef g(n = 20, length = 5):\n    return [n // length] * length\nassert f(g())\n",
        "idx_generation": 183,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g())\n",
        "idx_generation": 437,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers nums, determine if it forms an arithmetic progression.\n    An arithmetic progression is a sequence of numbers in which the difference between\n    consecutive terms is constant.\n\n    Example:\n    nums = [1, 3, 5, 7, 9]\n\n    Output:\n    True (Because the difference between consecutive terms is 2)\n    \"\"\"\n    if len(nums) < 2:\n        return True\n    \n    diff = nums[1] - nums[0]\n    \n    for i in range(1, len(nums)):\n        if nums[i] - nums[i-1] != diff:\n            return False\n    \n    return True\n\ndef g(nums=[1, 3, 5, 7, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 134,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> int:\n    \"\"\"Find the factorial of a given number\"\"\"\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(2, n+1):\n            result *= i\n        return result\n\ndef g():\n    return 5\n\nassert f(g()) == 120\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given array that contains at least k consecutive elements.\n    Returns True if such a subarray exists, False otherwise.\n    \"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        if len(set(arr[i:i+k])) == k:\n            return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'orange', 'grape']) -> bool:\n    \"\"\"Check if the given string can be formed by concatenating any two words from the list.\"\"\"\n    for i in range(len(words)):\n        for j in range(len(words)):\n            if words[i] + words[j] == s:\n                return True\n    return False\n\ndef g(words=['apple', 'banana', 'orange', 'grape']):\n    return words[0] + words[2]\n\nassert f(g())\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the list is a palindrome.\n    Return True if the list is a palindrome, False otherwise.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int]):\n    return nums\n\n# Test case\ntest_nums = [1, 2, 3, 2, 1]\nassert f(g(test_nums)) == True\n\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is present in the array.\"\"\"\n    return target in arr\n\ndef g(arr=[1, 3, 5, 7, 9, 11, 13], target=7):\n    return arr, target\n\nassert f(*g())\n\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, find the maximum product of any two distinct elements in the list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    20\n    \"\"\"\n    max_product = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 20\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], target=\"python\") -> bool:\n    \"\"\"\n    Check if the target string is present in the given list of strings.\n\n    Sample Input:\n    strings = [\"hello\", \"world\", \"python\", \"programming\"]\n\n    Sample Output:\n    True\n    \"\"\"\n    return target in strings\n\ndef g():\n    return [\"hello\", \"world\", \"python\", \"programming\"]\n\nassert f(g())\n\n",
        "idx_generation": 356,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a given string contains all the vowels (a, e, i, o, u) at least once\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return all(vowel in s.lower() for vowel in vowels)\n\ndef g():\n    return \"The quick brown fox jumps over the lazy dog\"\n\nassert f(g())\n\n",
        "idx_generation": 435,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=100) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return x * x == a\ndef g(a = 100):\n    return int(a ** 0.5)\nassert f(g())\n",
        "idx_generation": 419,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    target_sum = sum(matrix[0])\n    for i in range(rows):\n        if sum(matrix[i]) != target_sum:\n            return False\n    for j in range(cols):\n        if sum(matrix[i][j] for i in range(rows)) != target_sum:\n            return False\n    if sum(matrix[i][i] for i in range(rows)) != target_sum:\n        return False\n    if sum(matrix[i][rows-i-1] for i in range(rows)) != target_sum:\n        return False\n    return True\n\ndef g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    \"\"\"Return the matrix.\"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a square matrix.\n    Returns True if the matrix is square, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=50, length=5) -> bool:\n    \"\"\"Find a combination of numbers from the given list which adds up to the target and has a length equal to length\"\"\"\n    from itertools import combinations\n    for comb in combinations(nums, length):\n        if sum(comb) == target:\n            return True\n    return False\ndef g(target = 50, length = 5):\n    return list(range(1, target + 1))\nassert f(g())\n",
        "idx_generation": 117,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exist two numbers in the list that add up to the target integer. The numbers cannot be repeated.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers=[-1, 0, 1, 2]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Calculate the sum of all the elements in the matrix.\n    Return the sum as an integer.\n    \"\"\"\n    total_sum = 0\n    for row in matrix:\n        for num in row:\n            total_sum += num\n    return total_sum\n\ndef g():\n    \"\"\"\n    Generate a 3x3 matrix filled with random integers.\n    \"\"\"\n    import random\n    return [[random.randint(1, 10) for _ in range(3)] for _ in range(3)]\n\nassert f(g()) > 0\n",
        "idx_generation": 369,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if a given string is a pangram.\n    A pangram is a sentence that contains every letter of the alphabet at least once.\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return all(char in string.lower() for char in alphabet)\n\ndef g(string = \"The quick brown fox jumps over the lazy dog\"):\n    return string\n\nassert f(g())\n",
        "idx_generation": 277,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in non-decreasing order.\"\"\"\n    return arr == sorted(arr)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list has duplicate elements.\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 5]\n\nassert f(g())\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: list, target=15) -> bool:\n    \"\"\"Find if there exist three elements in the list whose sum is equal to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\nassert f(g())\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import datetime\nfrom typing import*\n\ndef f(dates: List[datetime.date]) -> bool:\n    \"\"\"Check if all dates in the list are in the past.\"\"\"\n    today = datetime.date.today()\n    return all(date < today for date in dates)\n\ndef g():\n    return [datetime.date(2020, 1, 1), datetime.date(2019, 12, 31), datetime.date(2018, 6, 15)]\n\nassert f(g())\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the sum of all the positive integers in the given list.\n    \"\"\"\n    return sum(num for num in nums if num > 0)\n\ndef g():\n    return [1, -2, 3, -4, 5]\n\nassert f(g()) == 9\n",
        "idx_generation": 116,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"\n    Given a list of integers, find a pair of numbers that multiply to give the target.\n    \"\"\"\n    return any((nums[i] * nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target = 20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, return the sum of all even numbers.\n\n    Example:\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    The sum of even numbers is: 2 + 4 + 6 + 8 + 10 = 30\n    \"\"\"\n    even_sum = 0\n    for num in numbers:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum\n\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return numbers\n\nassert f(g()) == 30\n\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[str]) -> bool:\n    \"\"\"\n    Check if the list contains words that have the same first and last character.\n    \"\"\"\n    return any(word[0] == word[-1] for word in x)\ndef g():\n    return ['hello', 'world', 'level', 'madam', 'python']\nassert f(g())\n",
        "idx_generation": 433,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Find the maximum value in a given list.\n\n    Example:\n    arr = [5, 2, 8, 1, 9]\n\n    The maximum value in the list is 9,\n    so the function should return 9.\n    \"\"\"\n    return max(arr)\n\ndef g():\n    return [5, 2, 8, 1, 9]\n\nassert f(g()) == 9\n\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], k: int) -> int:\n    \"\"\"\n    Find the sum of the k smallest numbers in the list.\n    \"\"\"\n    numbers.sort()\n    return sum(numbers[:k])\n\ndef g():\n    return ([1, 5, 3, 7, 2, 8, 4], 3)\n\nassert f(*g()) == 6\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(a: List[int], b: List[int]) -> bool:\n    \"\"\"\n    Check if the lists have any common elements.\n    Return True if they have at least one common element, False otherwise.\n    \"\"\"\n    for num in a:\n        if num in b:\n            return True\n    return False\n\ndef g():\n    \"\"\"\n    Generate two lists of 5 random numbers between 1 and 10.\n    \"\"\"\n    import random\n    return [random.randint(1, 10) for _ in range(5)], [random.randint(1, 10) for _ in range(5)]\n\nassert f(*g())\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nimport numpy as np\nfrom typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subset of numbers in the given list that add up to the target.\n    \"\"\"\n    for r in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            if sum(subset) == target:\n                return True\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums, target\n\nassert f(*g())\n\n",
        "idx_generation": 442,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Given a list of numbers, check if the list is sorted in ascending order.\n    Return True if the list is sorted in ascending order, False otherwise.\n    \"\"\"\n    return numbers == sorted(numbers)\n\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return numbers\n\nassert f(g())\n\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the sum of all elements in the given list is divisible by 10\"\"\"\n    return sum(arr) % 10 == 0\n\ndef g():\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if a list is sorted in ascending order\"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 187,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a given string is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers nums, determine if it contains any duplicate elements.\n\n    Example:\n    nums = [1, 2, 3, 1]\n\n    Output:\n    True (Because 1 appears twice in the list)\n    \"\"\"\n    seen = set()\n    \n    for num in nums:\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n    \n    return False\n\ndef g(nums=[1, 2, 3, 1]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 134,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=-1) -> bool:\n    \"\"\"Check if n is divisible by m\"\"\"\n    return n % m == 0\ndef g(m = -1):\n    n = 1000000\n    while n % m != 0:\n        n += 1\n    return n\nassert f(g(m=3))\n\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given array that contains exactly k consecutive elements in ascending order.\n    Returns True if such a subarray exists, False otherwise.\n    \"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        if arr[i:i+k] == sorted(arr[i:i+k]):\n            return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'orange', 'grape']) -> bool:\n    \"\"\"Check if the given string is a concatenation of any two substrings from the list.\"\"\"\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j] in words and s[j:] in words:\n                return True\n    return False\n\ndef g(words=['apple', 'banana', 'orange', 'grape']):\n    return words[1] + words[3]\n\nassert f(g())\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return lst == lst[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is present in the array.\"\"\"\n    return target in arr\n\ndef g():\n    return [1, 2, 3, 4, 5], 3\n\nassert f(*g()) == True\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, find the maximum product of any two distinct elements in the list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    20\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 20\n\n",
        "idx_generation": 403,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str]) -> bool:\n    \"\"\"\n    Check if the given list of strings contains any palindrome.\n    \"\"\"\n    for string in strings:\n        if string == string[::-1]:\n            return True\n    return False\n\ndef g():\n    return [\"hello\", \"world\", \"racecar\", \"python\"]\n\nassert f(g())\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"\n    Check if the given number is a perfect square less than the target value.\n\n    Sample Input:\n    n = 9\n    target = 100\n\n    Sample Output:\n    True\n    \"\"\"\n    return n * n < target and int(n ** 0.5) ** 2 == n\n\ndef g(target=100):\n    return 9\n\nassert f(g()) == True\n\n",
        "idx_generation": 420,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a square matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    \"\"\"Return the matrix.\"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    for row in matrix:\n        if len(row) != rows:\n            return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, check if the target is present in the matrix.\n    Return True if the target is found, False otherwise.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5):\n    return matrix, target\n\nassert f(*g())\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target.\"\"\"\n    return any(target - num in numbers for num in numbers)\n\ndef g(numbers = [1, 2, 3, 4, 5], target = 9):\n    return numbers, target\n\nassert f(*g())\n\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"Find the maximum element in the given array.\"\"\"\n    return max(arr)\n\ndef g():\n    return [1, 5, 3, 2, 4]\n\nassert f(g()) == 5\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if a string is a pangram.\n\n    A pangram is a sentence that contains every letter of the alphabet at least once.\n\n    Sample Input:\n    \"The quick brown fox jumps over the lazy dog\"\n\n    Sample Output:\n    True\n    \"\"\"\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    return set(string.lower()) >= alphabet\n\ndef g(string=\"The quick brown fox jumps over the lazy dog\"):\n    return string\n\nassert f(g())\n\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the prime numbers.\n    \n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    \n    Sample Output:\n    [2, 3, 5, 7]\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for num in arr:\n        if is_prime(num):\n            primes.append(num)\n    return primes\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [2, 3, 5, 7]\n\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers contains a duplicate.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nimport random\nfrom typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that add up to 10.\"\"\"\n    return any(num1 + num2 == 10 for num1, num2 in itertools.combinations(nums, 2))\n\ndef g():\n    return random.sample(range(1, 10), 5)\n\nassert f(g())\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are two distinct indices i and j in the list such that the absolute difference between nums[i] and nums[j] is at most target.\n\n    Sample Input:\n    `[1, 5, 9, 13, 20]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    num_set = set()\n\n    for num in nums:\n        if any(abs(num - n) <= target for n in num_set):\n            return True\n        \n        num_set.add(num)\n    \n    return False\n\ndef g(nums=[1, 5, 9, 13, 20], target=100):\n    # target is ignored\n    return nums\n\nassert f(g())\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list that sum up to the target number.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 9)\n\nassert f(*g())\n",
        "idx_generation": 68,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums = [1, 4, 7, 10, 13, 16, 19, 22, 25, 28]):\n    \"\"\"Check if a number is divisible by any number in the given list\"\"\"\n    return any(n % num == 0 for num in nums)\ndef g(nums = [1, 4, 7, 10, 13, 16, 19, 22, 25, 28]):\n    return nums[len(nums)//2]\nassert f(g())\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"\n    Given a string s, count the number of vowels in the string and return True if the count is even,\n    otherwise return False.\n\n    Sample Input:\n    s = \"Hello\"\n\n    Sample Output:\n    False\n    \"\"\"\n    count = sum(1 for char in s if char.lower() in vowels)\n    return count % 2 == 0\n\ndef g(s='Hello'):\n    return s\n\nassert f(g())\n\n",
        "idx_generation": 434,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr1: List[int], arr2: List[int]) -> List[int]:\n    \"\"\"\n    Given two lists of integers, merge them into a single list in sorted order and return the sorted list.\n    \n    Sample Input:\n    arr1 = [1, 4, 6, 8]\n    arr2 = [2, 3, 5, 7]\n    \n    Sample Output:\n    [1, 2, 3, 4, 5, 6, 7, 8]\n    \"\"\"\n    merged = arr1 + arr2\n    merged.sort()\n    return merged\n\ndef g():\n    return [1, 4, 6, 8], [2, 3, 5, 7]\n\nassert f(*g()) == [1, 2, 3, 4, 5, 6, 7, 8]\n\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=4) -> bool:\n    \"\"\"\n    Check if there exists a sublist in the given list such that the sum of its elements is divisible by k.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            sublist = arr[i:j]\n            sublist_sum = sum(sublist)\n            if sublist_sum % k == 0:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> List[int]:\n    \"\"\"Generate a list of prime numbers up to n\"\"\"\n    prime_list = []\n    for num in range(2, n+1):\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            prime_list.append(num)\n    return prime_list\n\ndef g():\n    return 20\n\nassert f(g()) == [2, 3, 5, 7, 11, 13, 17, 19]\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list that sums up to the target number.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n\n    There exists a pair (2, 5) in the list that sums up to 7, so the function should return True.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=7):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a number in the list that is divisible by 7.\n    Return True if such a number exists, False otherwise.\n    \"\"\"\n    return any(num % 7 == 0 for num in numbers)\n\ndef g():\n    \"\"\"\n    Generate a list of 10 random numbers between 1 and 100 (inclusive).\n    \"\"\"\n    return random.sample(range(1, 101), 10)\n\nassert f(g())\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is sorted in non-decreasing order.\n    Return True if the list is sorted, False otherwise.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if a list contains any negative numbers\"\"\"\n    return any(num < 0 for num in lst)\n\ndef g():\n    return [1, 2, -3, 4, 5, 6, -7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 198,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"\n    Given a list of words, check if all the words are palindromes.\n    A palindrome is a word that reads the same forwards and backwards.\n    \"\"\"\n    def is_palindrome(word):\n        return word == word[::-1]\n\n    for word in words:\n        if not is_palindrome(word):\n            return False\n\n    return True\n\ndef g():\n    return [\"level\", \"racecar\", \"deified\", \"radar\"]\n\nassert f(g())\n\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it contains a palindromic number.\n    A palindromic number is a number that remains the same when its digits are reversed.\n    \"\"\"\n    for num in nums:\n        if str(num) == str(num)[::-1]:\n            return True\n    return False\n\ndef g():\n    return [123, 456, 789, 121, 232, 343, 454, 565]\n\nassert f(g())\n",
        "idx_generation": 134,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> int:\n    \"\"\"Find the factorial of a given number\"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * f(n-1)\n\ndef g():\n    return 5\n\nassert f(g()) == 120\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given array that contains at least k consecutive elements in descending order.\n    Returns True if such a subarray exists, False otherwise.\n    \"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        if arr[i:i+k] == sorted(arr[i:i+k], reverse=True):\n            return True\n    return False\n\ndef g(arr=[5, 4, 3, 2, 1]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'orange', 'grape']) -> bool:\n    \"\"\"Check if the given string can be formed by concatenating any two substrings from the list.\"\"\"\n    for i in range(len(words)):\n        for j in range(len(words)):\n            if words[i] + words[j] == s or words[j] + words[i] == s:\n                return True\n    return False\n\ndef g(words=['apple', 'banana', 'orange', 'grape']):\n    return words[2] + words[3]\n\nassert f(g())\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n\n    A palindrome is a sequence of characters that reads the same forward and backward.\n\n    Example:\n    nums = [1, 2, 3, 2, 1]\n\n    The list is a palindrome, so the function should return True.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if the target number is present in the given matrix.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    target = 5\n\n    The number 5 is present in the matrix, so the function should return True.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5):\n    return matrix, target\n\nassert f(*g())\n",
        "idx_generation": 428,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, find the minimum product of any two distinct elements in the list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    2\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product < min_product:\n                min_product = product\n    return min_product\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 2\n",
        "idx_generation": 455,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(string: str) -> bool:\n    \"\"\"Check if the string is a palindrome.\"\"\"\n    return string == string[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a number is a perfect square.\n    \"\"\"\n    return n**0.5 % 1 == 0\n\ndef g():\n    return 16\n\nassert f(g())\n",
        "idx_generation": 422,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    \"\"\"Return the matrix.\"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is symmetric.\n    \"\"\"\n    rows, cols = len(matrix), len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 443,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list whose difference is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] - nums[j] == target or nums[j] - nums[i] == target:\n                return True\n    return False\n\ndef g():\n    return [3, 5, 8, 11, 14]\n\nassert f(g(), 6)\n",
        "idx_generation": 126,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers and a target number, check if there exists two numbers in the list whose product is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=6):\n    return [nums, target]\n\nassert f(*g())\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Calculate the sum of all elements in the given matrix.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    The sum of all elements in the matrix is 45.\n    \"\"\"\n    n = len(matrix)\n    matrix_sum = 0\n    for i in range(n):\n        for j in range(n):\n            matrix_sum += matrix[i][j]\n    return matrix_sum\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\n# Test case\ntest_matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g(test_matrix)) == 45\n\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(st: str, a='s', b='tos') -> bool:\n    \"\"\"Check if the string is a palindrome when reversed.\"\"\"\n    return st == st[::-1]\n\ndef g(st='racecar', a='s', b='tos'):\n    return st\n\nassert f(g())\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the array is monotonic.\"\"\"\n    return arr == sorted(arr) or arr == sorted(arr, reverse=True)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate elements\"\"\"\n    return len(arr) != len(set(arr))\n\ndef g():\n    return [1, 2, 3, 4, 5, 2]\n\nassert f(g())\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if there are any duplicate numbers in the list.\n    \"\"\"\n    seen = set()\n    for num in numbers:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 2, 6, 7, 8]\n\nassert f(g())\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=0) -> bool:\n    \"\"\"\n    Check if the sum of any two integers in the list is equal to the target sum.\n    \"\"\"\n    return any((nums[i] + nums[i+1] == target_sum) for i in range(len(nums)-1))\ndef g(target_sum=0):\n    return [i for i in range(-1000, 1000) if i != target_sum-i]\nassert f(g())\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target number, find three numbers in the list that add up to the target.\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums) - 2):\n        left = i + 1\n        right = len(nums) - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums\n\nassert f(g(), 9)\n",
        "idx_generation": 74,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in non-decreasing order\"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(lst1: List[int], lst2: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers, one from lst1 and one from lst2, whose sum is equal to the target number.\n    Return True if such pair exists, False otherwise.\n    \"\"\"\n    for num1 in lst1:\n        for num2 in lst2:\n            if num1 + num2 == target:\n                return True\n    return False\n\ndef g():\n    \"\"\"\n    Generate two lists of 5 random integers.\n    \"\"\"\n    import random\n    return [random.randint(1, 10) for _ in range(5)], [random.randint(1, 10) for _ in range(5)]\n\nassert f(*g(), 10)\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"\n    Check if there exists a sublist in the given list such that the sum of its elements is divisible by k.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            sublist = arr[i:j]\n            if sum(sublist) % k == 0:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix, return the sum of each row as a list.\n\n    Sample Input:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\n    Sample Output:\n    [6, 15, 24]\n    \"\"\"\n    return [sum(row) for row in matrix]\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g()) == [6, 15, 24]\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exist two numbers in the list that sum up to the target.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g() -> Tuple[List[int], int]:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum element.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    Output: 5\n    \"\"\"\n    return max(nums)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 5\n\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a wave list.\n\n    A list is considered a wave list if the elements alternate between being greater than and less than their adjacent elements.\n\n    Sample Input:\n    `nums = [1, 3, 2, 4, 3, 5]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    n = len(nums)\n    for i in range(1, n - 1):\n        if (nums[i] < nums[i - 1] and nums[i] < nums[i + 1]) or (nums[i] > nums[i - 1] and nums[i] > nums[i + 1]):\n            continue\n        else:\n            return False\n    return True\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([1, 3, 2, 4, 3, 5]))\n\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all even numbers in the list.\n    \"\"\"\n    return sum(num for num in lst if num % 2 == 0)\n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst\n\nassert f(g()) == 30\n",
        "idx_generation": 198,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a 2D list has a magic square.\n    A magic square is a square grid of numbers where the sum of each row, each column, and both diagonals is the same.\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n\n    # Check rows\n    for row in arr:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        col_sum = sum(arr[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n\n    # Check diagonals\n    diag_sum1 = sum(arr[i][i] for i in range(n))\n    diag_sum2 = sum(arr[i][n-i-1] for i in range(n))\n    if diag_sum1 != target_sum or diag_sum2 != target_sum:\n        return False\n\n    return True\n\ndef g():\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 136,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=10) -> bool:\n    \"\"\"Check if a number is divisible by 5\"\"\"\n    return x % 5 == 0\ndef g(a = 10):\n    return a * 2\nassert f(g())\n",
        "idx_generation": 419,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given array that contains at least k consecutive elements in non-decreasing order.\n    Returns True if such a subarray exists, False otherwise.\n    \"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        if arr[i:i+k] == sorted(arr[i:i+k]) or arr[i:i+k] == sorted(arr[i:i+k], reverse=True):\n            return True\n    return False\n\ndef g(arr=[1, 2, 3, 2, 1]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: List[str]) -> bool:\n    \"\"\"Check if the given list of strings contains at least one string with more vowels than consonants.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return any(sum(1 for char in word if char.lower() in vowels) > sum(1 for char in word if char.isalpha() and char.lower() not in vowels) for word in s)\n\ndef g():\n    return ['apple', 'banana', 'cat', 'dog', 'elephant', 'fish', 'giraffe', 'horse', 'iguana']\n\nassert f(g())\n",
        "idx_generation": 315,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers is a palindrome.\n    Returns True if the list is a palindrome, False otherwise.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(a: List[int], n: int) -> bool:\n    \"\"\"Check if a given number is present in the array.\"\"\"\n    return n in a\n\ndef g(a=[1, 2, 3, 4, 5], n=5):\n    return a, n\n\nassert f(*g())\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"\n    Given a number n and a list of numbers, check if n is a perfect square\n    and if all the numbers in the list are divisible by n.\n    \"\"\"\n    def is_perfect_square(num):\n        return int(num ** 0.5) ** 2 == num\n\n    if not is_perfect_square(n):\n        return False\n\n    for num in nums:\n        if num % n != 0:\n            return False\n\n    return True\n\ndef g():\n    return 9, [18, 36, 54, 72]\n\nassert f(*g())\n\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[str]) -> bool:\n    \"\"\"Check if all strings in the given list start with the same letter.\"\"\"\n    first_letter = nums[0][0]\n    for string in nums:\n        if string[0] != first_letter:\n            return False\n    return True\n\ndef g():\n    return ['apple', 'avocado', 'artichoke']\n\nassert f(g())\n\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a perfect square.\n\n    Sample Input:\n    n = 16\n\n    Sample Output:\n    True\n    \"\"\"\n    return n ** 0.5 == int(n ** 0.5)\n\ndef g():\n    return 16\n\nassert f(g()) == True\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    \"\"\"\n    This solution checks if each element in the matrix matches the criteria for a symmetric matrix.\n    \"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 390,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix (a list of lists), check if it is a square matrix.\n    Return True if it is square, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0]) if rows > 0 else 0\n    return rows == cols\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == True\n\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list whose product is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g(), 48)\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> List[int]:\n    \"\"\"\n    Find the smallest number in the matrix that is greater than the target number.\n\n    Sample Input:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    target = 5\n\n    Sample Output:\n    [1, 2]\n    \"\"\"\n    min_number = float('inf')\n    min_indices = []\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] > target and matrix[i][j] < min_number:\n                min_number = matrix[i][j]\n                min_indices = [i, j]\n    return min_indices\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5):\n    return matrix, target\n\nassert f(*g()) == [1, 2]\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the sum of all elements in the given matrix.\n    \"\"\"\n    total_sum = 0\n    for row in matrix:\n        total_sum += sum(row)\n    return total_sum\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g()) == 45\n\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is a palindrome.\n    Return True if it is a palindrome, False otherwise.\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s=\"racecar\"):\n    return s\n\nassert f(g())\n",
        "idx_generation": 315,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, return the transpose of the matrix.\n    \"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    transposed = [[0] * n for _ in range(m)]\n    for i in range(n):\n        for j in range(m):\n            transposed[j][i] = matrix[i][j]\n    return transposed\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there are any duplicate elements.\n\n    Example:\n    nums = [1, 2, 3, 3, 4, 5]\n    Output: True\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 406,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if all elements of the list are positive integers.\"\"\"\n    return all(isinstance(num, int) and num > 0 for num in numbers)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of numbers, check if all the numbers in the list are even.\n    Return True if all numbers are even, False otherwise.\n    \"\"\"\n    for num in nums:\n        if num % 2 != 0:\n            return False\n    return True\n\ndef g(nums = [2, 4, 6, 8, 10]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> List[List[int]]:\n    \"\"\"\n    Find all pairs of numbers in the list that sum up to the target.\n    \"\"\"\n    pairs = []\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                pairs.append([numbers[i], numbers[j]])\n    return pairs\n\ndef g(numbers = [1, 2, 3, 4, 5], target = 9):\n    return numbers\n\nassert f(g(), 9) == [[4, 5]]\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, digits_sum: int) -> bool:\n    \"\"\"Check if a number is divisible by its sum of digits\"\"\"\n    return n % digits_sum == 0\n\ndef g():\n    return 12345, sum(int(digit) for digit in str(12345))\n\nassert f(*g())\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Find the maximum element in the list.\n\n    Returns the maximum element if it exists, -1 otherwise.\n    \"\"\"\n    if len(arr) == 0:\n        return -1\n    max_val = arr[0]\n    for num in arr:\n        if num > max_val:\n            max_val = num\n    return max_val\n\ndef g():\n    return [2, 1, 4, 3, 5, 6, 2]\n\nassert f(g()) == 6\n\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"\n    Check if there exists a sublist in the given list such that the sum of its elements is divisible by k and the length of the sublist is greater than or equal to k.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            sublist = arr[i:j]\n            if sum(sublist) % k == 0 and len(sublist) >= k:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Return a list containing the sum of each row in the matrix.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    The sum of the first row is 6, the sum of the second row is 15, and the sum of the third row is 24.\n    Therefore, the function should return [6, 15, 24].\n    \"\"\"\n    row_sums = []\n    for row in matrix:\n        row_sums.append(sum(row))\n    return row_sums\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [6, 15, 24]\n\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sums up to the target.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5], target = 7):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(inds: List[int], nums=[12, 18, 20, 30, 36, 40]) -> bool:\n    \"\"\"\n    Find a subset of indices such that the greatest common divisor (GCD) of the corresponding elements in nums is greater than 1.\n    \"\"\"\n    subset_nums = [nums[i] for i in inds]\n    subset_gcd = gcd(*subset_nums)\n    return subset_gcd > 1\n\ndef g(nums=[12, 18, 20, 30, 36, 40]):\n    return [i for i in range(len(nums)) if nums[i] % 2 == 0]\n\nassert f(g())\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, find the next permutation in lexicographic order. If such permutation does not exist, return the list in ascending order.\n    \n    Sample Input:\n    nums = [1, 2, 3]\n    \n    Sample Output:\n    [1, 3, 2]\n    Explanation: The next permutation in lexicographic order is [1, 3, 2].\n    \"\"\"\n    i = len(nums) - 2\n    while i >= 0 and nums[i + 1] <= nums[i]:\n        i -= 1\n\n    if i >= 0:\n        j = len(nums) - 1\n        while j >= 0 and nums[j] <= nums[i]:\n            j -= 1\n        nums[i], nums[j] = nums[j], nums[i]\n\n    left = i + 1\n    right = len(nums) - 1\n    while left < right:\n        nums[left], nums[right] = nums[right], nums[left]\n        left += 1\n        right -= 1\n\n    return nums\n\ndef g():\n    return [1, 2, 3]\n\nassert f(g()) == [1, 3, 2]\n\n",
        "idx_generation": 468,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[str], target_length=5) -> bool:\n    \"\"\"Check if there exists a string in the list with a length equal to the target length.\"\"\"\n    for string in lst:\n        if len(string) == target_length:\n            return True\n    return False\n\ndef g(target_length=5):\n    return [\"apple\", \"banana\", \"cherry\", \"date\"]\n\nassert f(g())\n",
        "idx_generation": 205,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if all numbers in the given list are prime numbers.\n    \"\"\"\n    for num in numbers:\n        if num < 2:\n            return False\n        for i in range(2, int(num/2)+1):\n            if num % i == 0:\n                return False\n    return True\n\ndef g(numbers: List[int]):\n    return numbers[::-1]\n\nassert f(g([2, 3, 5, 7, 11, 13]))\n\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"\n    Check if the given number n is divisible by m without any remainder.\n    Return True if n is divisible by m, False otherwise.\n    \"\"\"\n    return n % m == 0\n\ndef g(n=10, m=2):\n    return n, m\n\nassert f(*g()) == True\n\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=2) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given array that contains at least k consecutive elements in strictly increasing order.\n    Returns True if such a subarray exists, False otherwise.\n    \"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        if arr[i:i+k] == sorted(arr[i:i+k]):\n            return True\n    return False\n\ndef g(arr=[1, 2, 3, 2, 1]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: List[str]) -> bool:\n    \"\"\"Check if the given list of strings contains at least one string with more consonants than vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return any(sum(1 for char in word if char.lower() in vowels) < sum(1 for char in word if char.isalpha() and char.lower() not in vowels) for word in s)\n\ndef g():\n    return ['apple', 'banana', 'cat', 'dog', 'elephant', 'fish', 'giraffe', 'horse', 'iguana']\n\nassert f(g())\n\n",
        "idx_generation": 319,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Check if two strings have the same characters, regardless of their order.\n    \"\"\"\n    return set(s1) == set(s2)\n\ndef g(s1: str, s2: str):\n    return s1, s2[::-1]\n\nassert f(*g('hello', 'olleh'))\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a number is a perfect square.\n    \"\"\"\n    return int(n ** 0.5) ** 2 == n\n\ndef g():\n    return 144\n\nassert f(g())\n",
        "idx_generation": 468,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a square matrix.\n    \"\"\"\n    rows = len(matrix)\n    for row in matrix:\n        if len(row) != rows:\n            return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    \"\"\"\n    This solution checks if the matrix has the same number of rows and columns.\n    \"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 390,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Check if there are any two elements in the list whose product is equal to the target value.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] * numbers[j] == target:\n                return True\n    return False\n\ndef g(target: int = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list whose sum is equal to the target.\"\"\"\n    return any(target - num1 - num2 in arr for num1 in arr for num2 in arr)\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n\n",
        "idx_generation": 185,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an identity matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i == j and matrix[i][j] != 1:\n                return False\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(matrix=[[1, 0, 0], [0, 1, 0], [0, 0, 1]]):\n    \"\"\"Return the matrix.\"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a valid palindrome ignoring any non-alphanumeric characters and considering only the alphabetic characters.\n    Return True if it is a valid palindrome, and False otherwise.\n\n    Example:\n    Input: \"A man, a plan, a canal, Panama!\"\n    Output: True\n    Explanation: The alphabetic characters in the string are \"AmanaplanacanalPanama\" which is a valid palindrome.\n    \"\"\"\n    alphanumeric_string = ''.join(char.lower() for char in string if char.isalpha())\n    return alphanumeric_string == alphanumeric_string[::-1]\n\ndef g(string: str = \"A man, a plan, a canal, Panama!\"):\n    return string\n\nassert f(g())\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given an array of integers, rearrange the elements such that all the even numbers appear before the odd numbers.\n    The order of even numbers and odd numbers should remain the same.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 6]\n\n    Sample Output:\n    [2, 4, 6, 1, 3, 5]\n    \"\"\"\n    return sorted(arr, key=lambda x: x % 2)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g()) == [2, 4, 6, 1, 3, 5]\n",
        "idx_generation": 429,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list contains duplicate elements\"\"\"\n    return len(set(arr)) < len(arr)\n\ndef g():\n    return [1, 2, 3, 4, 5, 5]\n\nassert f(g())\n\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Remove all odd numbers from the given list and return a new list with only even numbers.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    [2, 4, 6, 8, 10]\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [2, 4, 6, 8, 10]\n\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Check if there exist three distinct numbers in the list that add up to the target integer.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            for k in range(len(nums)):\n                if nums[i] + nums[j] + nums[k] == target and i != j and j != k and i != k:\n                    return True\n    return False\n\ndef g(nums=[-1, 0, 1, 2, -1, -4]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of numbers whose sum is equal to the target.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    target = 10\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in non-decreasing order\"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=4) -> bool:\n    \"\"\"\n    Check if there exists a sublist in the given list such that the sum of its elements is divisible by k.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            sublist = arr[i:j]\n            sublist_sum = sum(sublist)\n            if sublist_sum % k == 0:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g())\n\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix, calculate the sum of all elements in it.\n    \"\"\"\n    total_sum = 0\n    for row in matrix:\n        for element in row:\n            total_sum += element\n    return total_sum\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 45\n\n",
        "idx_generation": 290,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose sum is equal to the target value.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), target=7)\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any duplicate numbers.\n    \"\"\"\n    return len(numbers) != len(set(numbers))\n\ndef g(numbers=[1, 2, 3, 4, 5, 5]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers is sorted in non-decreasing order.\n    \"\"\"\n    return arr == sorted(arr)\n\ndef g(arr = [1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=10) -> bool:\n    \"\"\"Check if the sum of n and a is equal to b\"\"\"\n    return n + a == b\n\ndef g(a = 5, b = 10):\n    if a < b:\n        return b - a\n    else:\n        return a - b\n\nassert f(g())\n",
        "idx_generation": 210,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to a prime number\"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if is_prime(arr[i] + arr[j]):\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, divisor: int) -> bool:\n    \"\"\"Check if a number is divisible by a given divisor\"\"\"\n    return num % divisor == 0\n\ndef g():\n    return 20, 5\n\nassert f(*g()) == True\n\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=4) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given array that contains at least k consecutive elements in strictly decreasing order.\n    Returns True if such a subarray exists, False otherwise.\n    \"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        if arr[i:i+k] == sorted(arr[i:i+k], reverse=True):\n            return True\n    return False\n\ndef g(arr=[5, 4, 3, 2, 1]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Check if the given strings are anagrams.\n    \"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g():\n    return \"listen\", \"silent\"\n\nassert f(*g())\n",
        "idx_generation": 332,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if a list of numbers is a palindrome.\n    Returns True if it is, False otherwise.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 315,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, char: str, case_sensitive: bool = True) -> bool:\n    \"\"\"\n    Check if the given character is present in the string.\n    Return True if it is, False otherwise.\n    By default, the search is case-sensitive, but it can be made case-insensitive by setting `case_sensitive` to False.\n    \"\"\"\n    if case_sensitive:\n        return char in string\n    else:\n        return char.lower() in string.lower()\n\ndef g(string=\"Hello\", char=\"H\", case_sensitive=True):\n    return string, char, case_sensitive\n\nassert f(*g())\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a perfect square.\n    \"\"\"\n    sqrt = int(n**0.5)\n    return sqrt*sqrt == n\n\ndef g():\n    return 25\n\nassert f(g())\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    \"\"\"Return the matrix.\"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list that multiply to the target number.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        complement = target / num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 10)\n\nassert f(*g())\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the given list that add up to the target number.\n    Return True if such numbers exist, and False otherwise.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums=[2, 7, 11, 15], target=9):\n    return [nums, target]\n\nassert f(*g())\n",
        "idx_generation": 194,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a matrix is diagonal.\n    A matrix is diagonal if all its non-diagonal elements are zeros.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(matrix = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is a palindrome.\n\n    Sample Input:\n    s = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s=\"racecar\"):\n    return s\n\nassert f(g()) == True\n\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in non-decreasing order\"\"\"\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"Remove duplicate elements from a given list and return the sorted list in ascending order\"\"\"\n    return sorted(list(set(arr)))\n\ndef g():\n    return [3, 2, 4, 1, 2, 4, 3, 5]\n\nassert f(g()) == [1, 2, 3, 4, 5]\n",
        "idx_generation": 435,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers and a target number, check if there exists three numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=10):\n    return [nums, target]\n\nassert f(*g())\n",
        "idx_generation": 150,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target_sum: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target sum.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), target_sum=9)\n",
        "idx_generation": 79,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> int:\n    \"\"\"Find the sum of all even numbers in the given list\"\"\"\n    total = 0\n    for num in numbers:\n        if num % 2 == 0:\n            total += num\n    return total\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 30\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=5) -> bool:\n    \"\"\"\n    Check if there exists two sublists in the given list whose sums are divisible by k.\n    \"\"\"\n    n = len(arr)\n    dp = [[False] * (k+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = True\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if arr[i-1] <= j:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if dp[i][k] and dp[j][k]:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    k = 2\n    return arr, k\n\nassert f(*g())\n\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix, return the sum of all the elements in the matrix.\n    \"\"\"\n    total_sum = 0\n    for row in matrix:\n        total_sum += sum(row)\n    return total_sum\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 45\n\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there are three integers in the list whose sum is equal to the target.\n    Return True if such three integers exist, False otherwise.\n    \"\"\"\n    arr.sort()\n    for i in range(len(arr)-2):\n        left = i + 1\n        right = len(arr) - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 10)\n\nassert f(*g())\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is sorted in ascending order.\n    \"\"\"\n    return all(numbers[i] <= numbers[i + 1] for i in range(len(numbers) - 1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, determine if there are any duplicate elements.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 1]\n\nassert f(g())\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target_sum=50) -> bool:\n    \"\"\"\n    Given a list of integers, determine if there exists a pair of numbers that sum up to a target sum. If the target sum is not provided, it defaults to 50.\n\n    Sample Input:\n    lst = [10, 20, 30, 40, 50]\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in lst:\n        if target_sum - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target_sum=50):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 217,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k: int, n: int) -> bool:\n    \"\"\"\n    Given a list of integers and two target integers k and n, determine if there are three distinct indices i, j, and l\n    in the list such that arr[i] + arr[j] + arr[l] = k + n.\n    \"\"\"\n    seen = set()\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if k + n - arr[i] - arr[j] in seen:\n                return True\n            seen.add(arr[i])\n            seen.add(arr[j])\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 7, 3\n\nassert f(*g())\n",
        "idx_generation": 141,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=2) -> bool:\n    \"\"\"Check if a number is divisible by m\"\"\"\n    return n % m == 0\n\ndef g(m=2):\n    return m * 5\n\nassert f(g())\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given array that contains at least k consecutive elements in strictly increasing order.\n    Returns True if such a subarray exists, False otherwise.\n    \"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        if arr[i:i+k] == sorted(arr[i:i+k]) and len(set(arr[i:i+k])) == k:\n            return True\n    return False\n\ndef g(arr=[1, 2, 3, 3, 1]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(dates: List[str], format='%Y-%m-%d') -> bool:\n    \"\"\"\n    Check if all the dates in the list are in the specified format.\n\n    Sample Input:\n    dates = ['2022-01-01', '2022-01-02', '2022-01-03']\n\n    Sample Output:\n    True\n\n    Explanation:\n    All the dates are in the format 'YYYY-MM-DD'.\n    \"\"\"\n    for date in dates:\n        try:\n            datetime.strptime(date, format)\n        except ValueError:\n            return False\n    return True\n\ndef g(dates=['2022-01-01', '2022-01-02', '2022-01-03'], format='%Y-%m-%d'):\n    \"\"\"\n    Generate a list of dates and a date format.\n    \"\"\"\n    return dates\n\nassert f(g())\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, char: str, case_sensitive: bool = True) -> bool:\n    \"\"\"\n    Check if the given character is present in the string.\n    Return True if it is, False otherwise.\n    By default, the search is case-sensitive, but it can be made case-insensitive by setting `case_sensitive` to False.\n    \"\"\"\n    if case_sensitive:\n        return string.count(char) > 0\n    else:\n        return string.lower().count(char.lower()) > 0\n\ndef g(string=\"Hello\", char=\"H\", case_sensitive=True):\n    return string, char, case_sensitive\n\nassert f(*g())\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a power of 2.\n    \"\"\"\n    if n == 0:\n        return False\n    while n != 1:\n        if n % 2 != 0:\n            return False\n        n = n // 2\n    return True\n\ndef g():\n    return 16\n\nassert f(g())\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a square matrix (number of rows equals number of columns).\n\n    Sample Input:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix and a target number, check if the target number exists in the matrix.\n\n    Example:\n    matrix = [\n        [1, 3, 5, 7],\n        [10, 11, 16, 20],\n        [23, 30, 34, 60]\n    ]\n    target = 16\n    output: True\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    left = 0\n    right = rows * cols - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        mid_element = matrix[mid // cols][mid % cols]\n        if mid_element == target:\n            return True\n        elif mid_element < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\n\ndef g(matrix = [[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 60]], target = 16):\n    return matrix, target\n\nassert f(*g())\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the list that add up to the target number.\n\n    Sample input:\n    [1, 2, 3, 4, 5], 7\n\n    Sample output:\n    True\n\n    Explanation:\n    In the given list, the numbers 2 and 5 add up to the target number 7.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"Find the maximum element in each row of the matrix.\"\"\"\n    max_elements = []\n    for row in matrix:\n        max_elements.append(max(row))\n    return max_elements\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == [3, 6, 9]\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n    Return True if it is a palindrome, False otherwise.\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g()) == True\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is in non-decreasing order.\"\"\"\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 443,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if a given list contains duplicate elements.\n    \"\"\"\n    return len(lst) != len(set(lst))\n\ndef g():\n    return [1, 2, 3, 4, 5, 5]\n\nassert f(g())\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if all elements in a list are even numbers.\n    Return True if they are, False otherwise.\n    \"\"\"\n    return all(num % 2 == 0 for num in nums)\n\ndef g():\n    nums = [2, 4, 6, 8, 10]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find a pair of integers in the array that sum up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 10):\n    return arr\nassert f(g())\n",
        "idx_generation": 81,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n=5) -> bool:\n    \"\"\"\n    Check if the sum of the given list of integers is greater than n.\n    Returns True if the sum is greater, False otherwise.\n    \"\"\"\n    return sum(nums) > n\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=5) -> bool:\n    \"\"\"\n    Check if there exists three sublists in the given list whose sums are divisible by k.\n    \"\"\"\n    n = len(arr)\n    dp = [[False] * (k+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = True\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if arr[i-1] <= j:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for l in range(j+1, n+1):\n                if dp[i][k] and dp[j][k] and dp[l][k]:\n                    return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    k = 3\n    return arr, k\n\nassert f(*g())\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(n: int) -> List[List[int]]:\n    \"\"\"\n    Given an integer n, return a matrix of size n x n with the elements in a spiral order.\n\n    Example:\n    n = 3\n\n    The matrix should be:\n    [[1, 2, 3],\n     [8, 9, 4],\n     [7, 6, 5]]\n    \"\"\"\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    num = 1\n    row_start = 0\n    row_end = n - 1\n    col_start = 0\n    col_end = n - 1\n    while row_start <= row_end and col_start <= col_end:\n        for i in range(col_start, col_end + 1):\n            matrix[row_start][i] = num\n            num += 1\n        row_start += 1\n        for i in range(row_start, row_end + 1):\n            matrix[i][col_end] = num\n            num += 1\n        col_end -= 1\n        if row_start <= row_end:\n            for i in range(col_end, col_start - 1, -1):\n                matrix[row_end][i] = num\n                num += 1\n            row_end -= 1\n        if col_start <= col_end:\n            for i in range(row_end, row_start - 1, -1):\n                matrix[i][col_start] = num\n                num += 1\n            col_start += 1\n    return matrix\n\ndef g(n=3):\n    return n\n\nassert f(g()) == [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are three numbers in the list that sum up to the target number.\n    \"\"\"\n    for i in range(len(lst)-2):\n        for j in range(i+1, len(lst)-1):\n            for k in range(j+1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 9\n\nassert f(*g())\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum value in the list.\n\n    Sample Input:\n    nums = [5, 2, 9, 1, 7]\n\n    Sample Output:\n    9\n    \"\"\"\n    return max(nums)\n\ndef g():\n    return [[5, 2, 9, 1, 7]]\n\nassert f(*g()) == 9\n\n",
        "idx_generation": 455,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, determine if the list is sorted in non-decreasing order.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int]) -> bool:\n    \"\"\"Check if the list contains two numbers whose sum is equal to 10.\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == 10:\n                return True\n    return False\n\ndef g():\n    return [2, 5, 8, 3, 7]\n\nassert f(g())\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square\"\"\"\n    if len(matrix) != len(matrix[0]):\n        return False\n    \n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in range(n):\n        if sum(row[col] for row in matrix) != target_sum:\n            return False\n    \n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(matrix[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n    \n    return True\n\ndef g(matrix: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 141,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if all elements in the array are divisible by k\"\"\"\n    for num in arr:\n        if num % k != 0:\n            return False\n    return True\n\ndef g(arr=[10, 20, 30, 40, 50]):\n    k = 5\n    return arr, k\n\nassert f(*g())\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s=\"racecar\"):\n    \"\"\"\n    This solution checks if the string is equal to its reverse.\n    \"\"\"\n    return s\n\nassert f(g())\n\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(string: str, substring: str) -> bool:\n    \"\"\"\n    Check if a given string ends with a specific substring.\n    \"\"\"\n    return string.endswith(substring)\n\ndef g(string = \"Hello, world!\", substring = \"world!\"):\n    return string\n\nassert f(g(), \"world!\")\n",
        "idx_generation": 495,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"\n    Check if a number is a power of 2.\n\n    Sample Input:\n    num = 16\n\n    Sample Output:\n    True\n    \"\"\"\n    return num & (num - 1) == 0 and num != 0\n\ndef g():\n    return 16\n\nassert f(g())\n",
        "idx_generation": 473,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is symmetric.\n    \"\"\"\n    arr = np.array(matrix)\n    return np.array_equal(arr, arr.T)\n\ndef g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"Check if there exist two numbers in the array whose product is equal to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] == target:\n                return True\n    return False\n\ndef g(target=5):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 141,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if the target number exists in the given matrix.\n\n    Sample input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]], 5\n\n    Sample output:\n    True\n\n    Explanation:\n    The target number 5 exists in the matrix.\n    \"\"\"\n    m, n = len(matrix), len(matrix[0])\n    left, right = 0, m * n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        row, col = mid // n, mid % n\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n    return matrix, target\n\nassert f(*g())\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an identity matrix.\n    An identity matrix is a square matrix with ones on the main diagonal and zeros elsewhere.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i == j and matrix[i][j] != 1:\n                return False\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    \"\"\"\n    Generate an identity matrix of size 3x3.\n    \"\"\"\n    return [[1, 0, 0],\n            [0, 1, 0],\n            [0, 0, 1]]\n\nassert f(g())\n\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n\n    Example:\n    s = \"racecar\"\n\n    The output should be:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g()) == True\n\n\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix represented as a list of lists, transpose the matrix and return the transposed matrix.\n    \n    Sample Input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    \n    Sample Output:\n    [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n    \"\"\"\n    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate elements.\"\"\"\n    return len(lst) != len(set(lst))\n\ndef g():\n    return [1, 2, 3, 4, 5, 5]\n\nassert f(g())\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Remove all the duplicates from a given list of integers.\n    Return the list with duplicates removed.\n    \"\"\"\n    return list(set(nums))\n\ndef g(nums=[1, 2, 2, 3, 4, 4, 5]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5]\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), target=9)\n",
        "idx_generation": 81,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the sum of all elements in a list is greater than zero\"\"\"\n    return sum(arr) > 0\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 358,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int], k=4) -> bool:\n    \"\"\"\n    Check if there exists a sublist in the given list whose sum is divisible by k.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    dp = [False] * (k+1)\n    dp[0] = True\n    for i in range(n):\n        for j in range(k, arr[i]-1, -1):\n            if dp[j-k] or dp[j]:\n                dp[j] = True\n    return dp[k]\n\ndef g(arr=[2, 4, 6, 8, 10]):\n    k = 4\n    return arr, k\n\nassert f(*g())\n\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n: int = 3, s: int = 100) -> bool:\n    \"\"\"\n    Construct a list of n distinct integers that sum up to s\n    \"\"\"\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\n\ndef g(n: int = 3, s: int = 100):\n    \"\"\"\n    Generate a list of n distinct integers that sum up to s\n    \"\"\"\n    x = []\n    for i in range(1, n):\n        x.append(i)\n    x.append(s - sum(x))\n    return x\n\nassert f(g())\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the given list that sums up to the target value.\n    \"\"\"\n    for r in range(1, len(nums)+1):\n        for subset in itertools.combinations(nums, r):\n            if sum(subset) == target:\n                return True\n    return False\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8]\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a perfect square sequence.\n    \"\"\"\n    for i in range(1, len(nums)):\n        if math.isqrt(nums[i]) != i:\n            return False\n    return True\n\ndef g():\n    return [0, 1, 4, 9, 16, 25, 36, 49]\n\nassert f(g())\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers is a palindrome.\n\n    Sample Input:\n    arr = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric\"\"\"\n    return all((matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[0]))))\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\nassert f(g())\n",
        "idx_generation": 225,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int]) -> bool:\n    \"\"\"\n    Check if a given list of integers is a prime sequence.\n    A prime sequence is a sequence of prime numbers where each number is greater than the previous number.\n    Return True if the list is a prime sequence, and False otherwise.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return all(is_prime(x[i]) and x[i] > x[i-1] for i in range(1, len(x)))\n\ndef g():\n    return [2, 3, 5, 7, 11, 13]\n\nassert f(g())\n\n",
        "idx_generation": 142,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(a: str, b: str) -> bool:\n    \"\"\"Check if the given strings are anagrams of each other.\"\"\"\n    return sorted(a) == sorted(b)\n\ndef g(a=\"listen\", b=\"silent\"):\n    return a, b\n\nassert f(*g())\n",
        "idx_generation": 362,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n\n    Example:\n    nums = [1, 2, 3, 2, 1]\n    Output: True\n\n    nums = [1, 2, 3, 4, 5]\n    Output: False\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n\n",
        "idx_generation": 321,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a perfect square.\n\n    Sample Input:\n    n = 16\n\n    Sample Output:\n    True\n    \"\"\"\n    return int(n**0.5)**2 == n\n\ndef g():\n    return 16\n\nassert f(g())\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Return a list containing the square of each number in the given list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == [1, 4, 9, 16, 25]\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there exists a pair of numbers\n    in the list whose product is equal to the target.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target % num == 0 and target // num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return [2, 3, 4, 5, 6, 7, 8, 9], 24\n\nassert f(*g())\n",
        "idx_generation": 152,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target = 0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose difference is equal to the target number.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if num - target in num_set:\n            return True\n    return False\ndef g(target = 5):\n    return [1, 3, 6, 9, 12, 15, 18, 21]\nassert f(g())\n",
        "idx_generation": 209,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Calculate the sum of the diagonal elements of a square matrix.\n\n    Returns the sum of the diagonal elements.\n    \"\"\"\n    n = len(arr)\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += arr[i][i]\n    return diagonal_sum\n\ndef g():\n    return ([[1, 2, 3], [4, 5, 6], [7, 8, 9]],)\n\nassert f(*g()) == 15\n\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(text: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a pangram.\n    A pangram is a sentence that contains every letter of the alphabet at least once.\n    Return True if the string is a pangram, False otherwise.\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    return all(char in text.lower() for char in alphabet)\n\ndef g():\n    return \"The quick brown fox jumps over the lazy dog.\"\n\nassert f(g())\n\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if a given list is sorted in non-decreasing order.\n    \"\"\"\n    return lst == sorted(lst)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers contains any duplicate elements.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 5, 6]\n    Output: True\n\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    Output: False\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 5, 6]\n\nassert f(g()) == True\n",
        "idx_generation": 497,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0, k=2) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target number\"\"\"\n    return any(sum(comb) == target for comb in itertools.combinations(nums, k))\ndef g(target = 0, k = 2):\n    return [i for i in range(-10, 11)]\nassert f(g())\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=10, max_nums=2) -> bool:\n    \"\"\"\n    Find a pair of numbers from the given list whose sum is equal to the target value.\n    The pair should contain at most max_nums numbers.\n    \"\"\"\n    return any(sum(pair) == target for pair in itertools.combinations(arr, max_nums))\ndef g(target = 10, max_nums = 2):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(range(1, target), n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n\n",
        "idx_generation": 83,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers contains any negative elements.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    Output: False\n\n    nums = [1, 2, -3, 4, 5]\n    Output: True\n    \"\"\"\n    for num in nums:\n        if num < 0:\n            return True\n    return False\n\ndef g(nums=[1, 2, -3, 4, 5]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 367,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int], k=10) -> bool:\n    \"\"\"\n    Check if there exists a sublist in the given list whose sum is divisible by k.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    dp = [False] * (k+1)\n    dp[0] = True\n    for i in range(n):\n        for j in range(k, arr[i]-1, -1):\n            if dp[j-k] or dp[j]:\n                dp[j] = True\n    return dp[k]\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    k = 10\n    return arr, k\n\nassert f(*g())\n\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"\n    Given a list of positive integers, find if there is a subset of the list that has a sum greater than or equal to the target_sum.\n    \"\"\"\n    def subset_sum(numbers, target_sum, index, current_sum):\n        if current_sum >= target_sum:\n            return True\n        if index >= len(numbers):\n            return False\n        include = subset_sum(numbers, target_sum, index + 1, current_sum + numbers[index])\n        exclude = subset_sum(numbers, target_sum, index + 1, current_sum)\n        return include or exclude\n\n    return subset_sum(numbers, target_sum, 0, 0)\n\ndef g(numbers=[10, 20, 30, 40, 50]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 309,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=0) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that have a sum greater than or equal to a specific value.\n    Return True if the target_sum is 0 and there are at least two numbers in the list.\n    Return False if the target_sum is a negative value.\n    \"\"\"\n    if target_sum == 0 and len(numbers) >= 2:\n        return True\n    \n    if target_sum < 0:\n        return False\n    \n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] >= target_sum:\n                return True\n    return False\n\ndef g(target_sum=0):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> int:\n    \"\"\"\n    Find the sum of all the even numbers in a given list.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5, 6]\n\n    Sample Output:\n    12\n    \"\"\"\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    return sum(even_numbers)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g()) == 12\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    A matrix is considered symmetric if it is equal to its transpose.\n    \"\"\"\n    transpose = [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))]\n    return arr == transpose\n\ndef g():\n    arr = [[1, 2, 3],\n           [2, 4, 5],\n           [3, 5, 6]]\n    return arr\n\nassert f(g())\n\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: List[int]) -> bool:\n    \"\"\"Check if a given number is present in a list\"\"\"\n    return n in m\ndef g(n=5, m=[1, 2, 3, 4, 5]):\n    return n\nassert f(g(), m=[1, 2, 3, 4, 5])\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it contains a prime number.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return any(is_prime(num) for num in nums)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 143,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'orange', 'grape']) -> bool:\n    \"\"\"Check if the given string can be formed by concatenating any three words from the list.\"\"\"\n    for i in range(len(words)):\n        for j in range(len(words)):\n            for k in range(len(words)):\n                if words[i] + words[j] + words[k] == s:\n                    return True\n    return False\n\ndef g(words=['apple', 'banana', 'orange', 'grape']):\n    return words[0] + words[1] + words[2]\n\nassert f(g())\n",
        "idx_generation": 370,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if a list is a palindrome.\n    \"\"\"\n\n    return lst == lst[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a square matrix.\n    Return True if the matrix is square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    for row in matrix:\n        if len(row) != n:\n            return False\n    return True\n\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 432,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list whose product is equal to the target\"\"\"\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i+1, n):\n            if numbers[i] * numbers[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), 20)\n",
        "idx_generation": 153,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int], k=3, target=10) -> bool:\n    \"\"\"\n    Find k numbers in the list that add up to the target.\n    Return True if k such numbers exist, False otherwise.\n    \"\"\"\n    for combination in itertools.combinations(nums, k):\n        if sum(combination) == target:\n            return True\n    return False\n\ndef g(k=3, target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 216,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Find the maximum element in a matrix.\n\n    Returns the maximum element in the matrix.\n    \"\"\"\n    max_element = float('-inf')\n    for row in arr:\n        for num in row:\n            if num > max_element:\n                max_element = num\n    return max_element\n\ndef g():\n    return ([[1, 2, 3], [4, 5, 6], [7, 8, 9]],)\n\nassert f(*g()) == 9\n\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a pangram.\"\"\"\n    return set(s.lower()) >= set('abcdefghijklmnopqrstuvwxyz')\n\ndef g():\n    return \"The quick brown fox jumps over the lazy dog\"\n\nassert f(g())\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in ascending order\"\"\"\n    return arr == sorted(arr)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> List[int]:\n    \"\"\"Return a list of even numbers from the given list\"\"\"\n    return [num for num in lst if num % 2 == 0]\n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return [lst]\n\nassert f(*g()) == [2, 4, 6, 8]\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=10, max_nums=2) -> bool:\n    \"\"\"\n    Find a pair of numbers from the given list whose sum is equal to the target value.\n    The pair should contain exactly max_nums numbers.\n    \"\"\"\n    return any(sum(pair) == target for pair in itertools.combinations(arr, max_nums))\ndef g(target = 10, max_nums = 2):\n    from itertools import combinations\n    for c in combinations(range(1, target), max_nums):\n        if sum(c) == target:\n            return list(c)\nassert f(g())\n\n",
        "idx_generation": 83,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists two numbers in the list that multiply to give a product of 100\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == 100:\n                return True\n    return False\n\ndef g():\n    return [10, 5, 20, 4, 25]\n\nassert f(g())\n\n",
        "idx_generation": 390,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=0) -> bool:\n    \"\"\"\n    Given a list of integers, find if there is a subset of the list that has a sum equal to the target_sum.\n    \"\"\"\n    def subset_sum(numbers, target_sum, index, current_sum):\n        if current_sum == target_sum:\n            return True\n        if index >= len(numbers):\n            return False\n        include = subset_sum(numbers, target_sum, index + 1, current_sum + numbers[index])\n        exclude = subset_sum(numbers, target_sum, index + 1, current_sum)\n        return include or exclude\n\n    return subset_sum(numbers, target_sum, 0, 0)\n\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of numbers whose sum is equal to the target.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], target=9):\n    return arr, target\n\nassert f(*g())\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a subsequence of length k with consecutive elements in the given list.\"\"\"\n    n = len(nums)\n    if k > n:\n        return False\n    nums.sort()\n    for i in range(n - k + 1):\n        if nums[i+k-1] - nums[i] == k - 1:\n            return True\n    return False\ndef g(nums=[5, 3, 2, 7, 6, 4]):\n    k = 3\n    return nums, k\nassert f(*g())\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n\n    Example:\n    arr = [1, 2, 3, 2, 1]\n\n    The list is symmetric when read from left to right or right to left,\n    so the function should return True.\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> int:\n    \"\"\"\n    Find the sum of all the positive numbers in the given list.\n    \n    Sample Input:\n    numbers = [1, -2, 3, -4, 5, -6]\n    \n    Sample Output:\n    9\n    \"\"\"\n    return sum(num for num in numbers if num > 0)\n\ndef g(numbers=[1, -2, 3, -4, 5, -6]):\n    return numbers\n\nassert f(g()) == 9\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it contains a perfect square number.\n    \"\"\"\n    return any(num**0.5 == int(num**0.5) for num in nums)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(strings: List[str], target: str) -> bool:\n    \"\"\"\n    Check if the target string can be formed by concatenating any two strings from the given list.\n\n    Example:\n    strings = [\"hello\", \"world\", \"python\", \"programming\"]\n    target = \"helloworld\"\n\n    The strings \"hello\" and \"world\" can be concatenated to form \"helloworld\", so the function should return True.\n    \"\"\"\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if strings[i] + strings[j] == target or strings[j] + strings[i] == target:\n                return True\n    return False\n\ndef g(strings = [\"hello\", \"world\", \"python\", \"programming\"], target = \"helloworld\"):\n    return strings, target\n\nassert f(*g())\n",
        "idx_generation": 371,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 332,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    A symmetric matrix is a square matrix that is equal to its transpose.\n    \"\"\"\n    transpose = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix))]\n    return matrix == transpose\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there is a trio of numbers in the list whose sum is equal to the target\"\"\"\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), 15)\n",
        "idx_generation": 153,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: List[int], target=0) -> bool:\n    \"\"\"\n    Check if a given list of integers contains a number greater than the target number.\n    Return True if the list contains a number greater than target, False otherwise.\n    \"\"\"\n    def contains_greater(n, target):\n        return any(num > target for num in n)\n\n    return contains_greater(n, target)\n\ndef g(target=0):\n    return [1, 2, 3]\n\nassert f(g())\n\n",
        "idx_generation": 221,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the sum of all the elements in a given matrix.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    output: 45\n    \"\"\"\n    return sum(sum(row) for row in matrix)\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g()) == 45\n\n",
        "idx_generation": 407,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    Returns True if the string is a palindrome, False otherwise.\n    \"\"\"\n    return string == string[::-1]\n\ndef g(string: str = \"racecar\"):\n    return string\n\nassert f(g())\n",
        "idx_generation": 375,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix (a list of lists), return a new matrix with the rows and columns flipped.\n    \"\"\"\n    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the sum of all the positive numbers in the list.\n    \"\"\"\n    return sum(num for num in nums if num > 0)\n\ndef g():\n    return [1, -2, 3, -4, 5, -6, 7, -8, 9, -10]\n\nassert f(g()) == 25\n\n",
        "idx_generation": 213,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find a pair of numbers from the list whose sum is equal to the target number.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 83,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum: int, target_length: int) -> bool:\n    \"\"\"Check if there exists a combination of numbers from the given list, which adds up to the target_sum and has a length equal to target_length\"\"\"\n    from itertools import combinations\n    for comb in combinations(nums, target_length):\n        if sum(comb) == target_sum:\n            return True\n    return False\n\ndef g(target_sum: int, target_length: int):\n    return list(range(1, target_sum + 1))\n\nassert f(g(50, 5), 50, 5)\n",
        "idx_generation": 391,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Return the sum of all numbers in the given list.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    The sum of the numbers in the list is 1 + 2 + 3 + 4 + 5 = 15.\n    Therefore, the function should return 15.\n    \"\"\"\n    return sum(arr)\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g()) == 15\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, determine if there are three elements in the list\n    whose sum is equal to the target.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 9\n\nassert f(*g())\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Given a list of numbers, check if the list is sorted in non-decreasing order.\n\n    Example:\n    numbers = [1, 2, 3, 4, 5]\n\n    The list is sorted in non-decreasing order.\n    \"\"\"\n    return numbers == sorted(numbers)\n\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome, i.e., it reads the same forwards and backwards.\n\n    Sample Input:\n    `[1, 2, 3, 2, 1]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, num_list: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list whose sum is equal to n.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == n:\n                return True\n    return False\n\ndef g(num_list=[1, 2, 3, 4, 5, 6], n=10):\n    return num_list\n\nassert f(n=10, num_list=g())\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[float]) -> bool:\n    \"\"\"Check if there are two numbers in the list whose sum is equal to 10.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == 10:\n                return True\n    return False\n\ndef g():\n    return [1.5, 3.5, 2.5, 5.5, 4.5]\n\nassert f(g())\n",
        "idx_generation": 146,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str], target: str) -> bool:\n    \"\"\"Check if the target string is a substring of any of the strings in the list.\"\"\"\n    return any(target in s for s in strings)\n\ndef g(strings=[\"apple\", \"banana\", \"orange\"], target=\"na\"):\n    return strings, target\n\nassert f(*g())\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return arr == arr[::-1]\n\ndef g(arr = [1, 2, 3, 2, 1]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Return a new list with the square of each number in the given list.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    [1, 4, 9, 16, 25]\n    \"\"\"\n    squared_numbers = [num ** 2 for num in numbers]\n    return squared_numbers\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == [1, 4, 9, 16, 25]\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list that multiplies to the target.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        if target % num == 0 and target // num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 10)\n\nassert f(*g())\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are exactly two numbers in the given list that add up to the target number.\n\n    Example:\n    numbers = [1, 2, 3, 4, 5, 6]\n    target = 7\n\n    The numbers 3 and 4 add up to 7, so the function should return True.\n\n    Hint: You can use the `sum()` function to get the sum of a list of numbers.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers = [1, 2, 3, 4, 5, 6], target = 7):\n    return numbers, target\n\nassert f(*g())\n\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Calculate the sum of all elements in the given matrix.\n    \"\"\"\n    total = 0\n    for row in matrix:\n        total += sum(row)\n    return total\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 45\n",
        "idx_generation": 429,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is a palindrome.\n\n    Sample Input:\n    s = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s=\"racecar\"):\n    return s\n\nassert f(g())\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(mat: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix represented by a 2D list, return the transpose of the matrix.\n\n    Example:\n    mat = [[1, 2, 3],\n           [4, 5, 6],\n           [7, 8, 9]]\n\n    The transpose of the matrix is: [[1, 4, 7],\n                                    [2, 5, 8],\n                                    [3, 6, 9]]\n    \"\"\"\n    return [list(row) for row in zip(*mat)]\n\ndef g(mat=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return mat\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums to the target sum.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += nums[j]\n            if curr_sum == target_sum:\n                return True\n    return False\n\ndef g(target_sum=0):\n    return [target_sum] * 5\n\nassert f(g())\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, find all pairs of numbers from the list whose sum is equal to the target number.\n    \"\"\"\n    pairs = []\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                pairs.append([nums[i], nums[j]])\n    return pairs\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [[1, 9], [2, 8], [3, 7], [4, 6]]\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list that add up to the target sum\"\"\"\n    return any(numbers[i] + numbers[j] == target_sum for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing the unique elements from the original list in the same order.\n    \"\"\"\n    return list(set(nums))\n\ndef g(nums=[1, 2, 2, 3, 3, 4, 5, 5]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5]\n",
        "idx_generation": 323,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list whose sum is equal to the target.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5], target = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(arr: List[int]):\n    target = 7\n    return arr, target\n\nassert f(*g([1, 2, 3, 4, 5]))\n\n",
        "idx_generation": 474,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, numbers: List[int]) -> bool:\n    \"\"\"\n    Given a list of numbers, determine if any of the numbers is divisible by n.\n\n    Sample Input:\n    `3`, `[10, 15, 20, 25, 30]`\n\n    Sample Output:\n    `False`\n    \"\"\"\n    return any(num % n == 0 for num in numbers)\n\ndef g(numbers=[10, 15, 20, 25, 30]):\n    return 3, numbers\n\nassert f(*g())\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if there exists three numbers in the given list that form a Pythagorean triplet.\n\n    Sample Input:\n    `[3, 4, 5, 6, 7, 8, 9]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i]**2 + arr[j]**2 == arr[k]**2 or arr[j]**2 + arr[k]**2 == arr[i]**2 or arr[i]**2 + arr[k]**2 == arr[j]**2:\n                    return True\n    return False\n\ndef g():\n    return [3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the product of all positive numbers in the list.\n    \n    Sample Input:\n    nums = [2, -3, 4, -5, 6]\n    \n    Sample Output:\n    48\n    \"\"\"\n    product = 1\n    for num in nums:\n        if num > 0:\n            product *= num\n    return product\n\ndef g():\n    nums = [2, -3, 4, -5, 6]\n    return nums\n\nassert f(g()) == 48\n\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[str]) -> bool:\n    \"\"\"Check if there are two strings in the list whose lengths add up to 10.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if len(arr[i]) + len(arr[j]) == 10:\n                return True\n    return False\n\ndef g():\n    return [\"apple\", \"banana\", \"kiwi\", \"grape\", \"pear\"]\n\nassert f(g())\n",
        "idx_generation": 146,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_len=5, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if the given string can be rearranged to have a length equal to target_len and contain all vowels.\"\"\"\n    return len(s) == target_len and all(c in s for c in vowels)\n\ndef g(target_len = 5, vowels = ['a', 'e', 'i', 'o', 'u']):\n    s = ''.join(vowels)\n    while len(s) < target_len:\n        s += s\n    return s[:target_len]\n\nassert f(g())\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"\n    Check if there exists a sublist in the given list such that the difference between the maximum and minimum elements is greater than or equal to k.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            sublist = arr[i:j]\n            max_num = max(sublist)\n            min_num = min(sublist)\n            if max_num - min_num >= k:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list where each element is squared.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    [1, 4, 9, 16, 25]\n    \"\"\"\n    return [num ** 2 for num in nums]\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g()) == [1, 4, 9, 16, 25]\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target: str) -> bool:\n    \"\"\"Check if the target name is present in the list of names\"\"\"\n    return target in names\n\ndef g(names = ['Alice', 'Bob', 'Charlie', 'David'], target = 'Charlie'):\n    return names, target\n\nassert f(*g())\n",
        "idx_generation": 162,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are exactly three numbers in the given list that multiply to the target number.\n\n    Example:\n    numbers = [1, 2, 3, 4, 5, 6]\n    target = 24\n\n    The numbers 3, 4, and 2 multiply to 24, so the function should return True.\n\n    Hint: You can use the `reduce()` function from the `functools` library to multiply a list of numbers.\n    \"\"\"\n    from functools import reduce\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] * numbers[j] * numbers[k] == target:\n                    return True\n    return False\n\ndef g(numbers = [1, 2, 3, 4, 5, 6], target = 24):\n    return numbers, target\n\nassert f(*g())\n\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is an identity matrix.\"\"\"\n    n = len(matrix)\n    return len(matrix) == len(matrix[0]) and all(matrix[i][j] == 1 if i == j else matrix[i][j] == 0 for i in range(n) for j in range(n))\n\ndef g(matrix=[[1, 0, 0], [0, 1, 0], [0, 0, 1]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"\n    Check if all words in the given list start with the same letter.\n    Returns True if all words start with the same letter, False otherwise.\n    \"\"\"\n    return len(set(word[0] for word in words)) == 1\n\ndef g():\n    return [\"apple\", \"ant\", \"arrow\"]\n\nassert f(g())\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Find the majority element in a list.\n\n    The majority element is the element that appears more than n/2 times in the list,\n    where n is the length of the list.\n\n    Returns the majority element if it exists, -1 otherwise.\n    \"\"\"\n    count = 0\n    candidate = -1\n\n    for num in arr:\n        if count == 0:\n            candidate = num\n        if num == candidate:\n            count += 1\n        else:\n            count -= 1\n\n    count = 0\n    for num in arr:\n        if num == candidate:\n            count += 1\n\n    return candidate if count > len(arr) // 2 else -1\n\ndef g():\n    return [2, 1, 2, 3, 2, 4, 2]\n\nassert f(g()) == 2\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the sum of all the odd elements in the given list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    25\n    \"\"\"\n    total_sum = 0\n    for num in nums:\n        if num % 2 != 0:\n            total_sum += num\n    return total_sum\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\n\nassert f(g()) == 25\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists three numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), target=15)\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list contains any negative numbers\"\"\"\n    return any(num < 0 for num in arr)\n\ndef g():\n    return [1, 2, 3, 4, -5]\n\nassert f(g())\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(arr: List[Tuple[int, int]], target_sum: int = 100) -> bool:\n    \"\"\"\n    Check if there exists a pair of integers in the given list whose sum is equal to the target_sum.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i][0] + arr[j][1] == target_sum:\n                return True\n    return False\n\ndef g(target_sum: int = 100):\n    return [(i, j) for i in range(1, 101) for j in range(1, 101)]\n\nassert f(g())\n\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists two numbers in the array whose sum equals the target\"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], target=9):\n    return arr, target\n\nassert f(*g())\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there is a pair of numbers in the list that sums up to 10.\n\n    Returns True if there exists a pair of numbers that sums up to 10, False otherwise.\n    \"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        complements.add(10 - num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a permutation of the numbers from 1 to n, where n is the length of the list.\n\n    Sample Input:\n    `[3, 4, 1, 2]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return sorted(arr) == list(range(1, len(arr)+1))\n\ndef g():\n    return [3, 4, 1, 2]\n\nassert f(g())\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the sum of all positive integers in a given list.\n\n    Sample Input:\n    nums = [-1, 2, -3, 4, -5, 6, -7]\n\n    Sample Output:\n    12\n    \"\"\"\n    positive_nums = [num for num in nums if num > 0]\n    return sum(positive_nums)\n\ndef g():\n    return [-1, 2, -3, 4, -5, 6, -7]\n\nassert f(g()) == 12\n\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of numbers whose sum is equal to the maximum number in the list.\n    \"\"\"\n    max_num = max(nums)\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == max_num:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7]\n\nassert f(g())\n",
        "idx_generation": 149,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, pattern: str) -> bool:\n    \"\"\"\n    Check if a string matches a given pattern.\n    A pattern consists of lowercase letters and can be used to match strings.\n    \"\"\"\n    pattern_dict = {}\n    string_list = string.split()\n    if len(pattern) != len(string_list):\n        return False\n    for i in range(len(pattern)):\n        if pattern[i] in pattern_dict:\n            if pattern_dict[pattern[i]] != string_list[i]:\n                return False\n        else:\n            if string_list[i] in pattern_dict.values():\n                return False\n            pattern_dict[pattern[i]] = string_list[i]\n    return True\n\ndef g(string = \"apple banana apple\", pattern = \"aba\"):\n    return string, pattern\n\nassert f(*g())\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return numbers == numbers[::-1]\n\ndef g(numbers=[1, 2, 3, 2, 1]):\n    \"\"\"Return the list of numbers.\"\"\"\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    \"\"\"Return the matrix.\"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], rows=3, cols=3, target=10) -> bool:\n    \"\"\"Check if there exists a row and a column in the matrix such that their product is equal to the target.\"\"\"\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] * matrix[j][i] == target:\n                return True\n    return False\ndef g(rows = 3, cols = 3, target = 10):\n    return [[1, 1, 2], [2, 3, 4], [5, 6, 2]]\nassert f(g())\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 226,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the sum of all the elements in the given matrix.\n    \"\"\"\n    result = 0\n    for row in matrix:\n        for num in row:\n            result += num\n    return result\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 45\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g()) == True\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the list is sorted in non-decreasing order.\n\n    Returns True if the list is sorted, False otherwise.\n    \"\"\"\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8]\n\nassert f(g()) == True\n\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there are three elements in the list whose sum is equal to zero.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == 0:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, -3, 4, -5, 6, 7, -8, 9]\n\nassert f(g())\n\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"\n    Given a list of integers, find a pair of numbers that multiply to give the target.\n    \"\"\"\n    return any((nums[i] * nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target = 20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 93,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"Find the sum of all numbers in the given list\"\"\"\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 15\n",
        "idx_generation": 420,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the sum of any two numbers in the list equals the target number.\n    Returns True if there exist two numbers in the list whose sum is equal to the target, False otherwise.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers=[1, 2, 3, 4, 5], target=9):\n    return numbers, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, check if there exists a pair of numbers\n    in the list that adds up to the target.\n    \n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 7\n    \n    Sample Output:\n    True\n    \"\"\"\n    arr.sort()\n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        current_sum = arr[left] + arr[right]\n        if current_sum == target:\n            return True\n        elif current_sum < target:\n            left += 1\n        else:\n            right -= 1\n    \n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 7\n\nassert f(*g())\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a duplicate number.\n\n    Sample Input:\n    `nums = [1, 2, 3, 4, 5, 2]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([1, 2, 3, 4, 5, 2]))\n\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine if it is a symmetric matrix.\n    A symmetric matrix is a square matrix that is equal to its transpose.\n\n    Example:\n    Input: [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n    Output: False\n    Explanation: The given matrix is not symmetric.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix = [[1, 2, 3],\n                [2, 4, 5],\n                [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(words: List[str]) -> bool:\n    \"\"\"\n    Check if all the words in the list have the same length.\n    \"\"\"\n    return all(len(word) == len(words[0]) for word in words)\n\ndef g(n=5, length=4):\n    return [\"word\" + str(i) for i in range(n)]\n\nassert f(g())\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if all elements in the list are prime numbers.\"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return all(is_prime(num) for num in arr)\n\ndef g():\n    return [2, 3, 5, 7, 11]\n\nassert f(g())\n",
        "idx_generation": 153,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: List[str]) -> bool:\n    \"\"\"Check if all strings in the list contain only lowercase letters.\"\"\"\n    return all(all(c.islower() for c in x) for x in s)\n\ndef g():\n    return [\"apple\", \"banana\", \"cherry\"]\n\nassert f(g())\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of integers is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g(nums=[1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a square matrix.\n\n    Sample Input:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    return all(len(row) == n for row in matrix)\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == True\n",
        "idx_generation": 497,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, find the pair of numbers whose product is equal to the target.\n    Return True if such a pair is found, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        complement = target / num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr=[2, 4, 6, 8, 10], target=48):\n    return arr, target\n\nassert f(*g())\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are two elements in the list that add up to the target number.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr: List[int]):\n    return arr\n\nassert f(g([1, 2, 3, 4, 5]), 7)\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the maximum element in the given matrix.\n\n    Sample Input:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\n    Sample Output:\n    9\n    \"\"\"\n    max_element = float('-inf')\n    for row in matrix:\n        for num in row:\n            if num > max_element:\n                max_element = num\n    return max_element\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g()) == 9\n\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    \"\"\"\n    Given a list of words, check if each word can be formed using only the letters from the previous word.\n    Return True if it is possible for each word, False otherwise.\n    \"\"\"\n    for i in range(1, len(words)):\n        prev_word = words[i-1]\n        curr_word = words[i]\n        if set(curr_word) - set(prev_word):\n            return False\n    return True\n\ndef g():\n    words = [\"cat\", \"act\", \"tac\", \"atc\"]\n    return words\n\nassert f(g())\n\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n=10) -> bool:\n    \"\"\"\n    Check if there are n consecutive numbers in the list lst.\n    \"\"\"\n    lst.sort()\n    for i in range(len(lst) - n + 1):\n        if lst[i:i+n] == list(range(lst[i], lst[i]+n)):\n            return True\n    return False\n\ndef g(n=10):\n    return list(range(n))\n\nassert f(g())\n",
        "idx_generation": 249,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"\n    Find three numbers in the list that add up to the target.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "idx_generation": 97,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in non-decreasing order\"\"\"\n    return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))\n\ndef g(arr=[2, 4, 6, 8, 10]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(x: List[int]) -> List[int]:\n    \"\"\"\n    Remove duplicates from the given list and return the new list with unique elements.\n\n    Example:\n    x = [1, 2, 2, 3, 4, 4, 5]\n\n    The new list with unique elements is [1, 2, 3, 4, 5].\n    \"\"\"\n    unique_list = []\n    for num in x:\n        if num not in unique_list:\n            unique_list.append(num)\n    return unique_list\n\ndef g(x: List[int]):\n    return x\n\n# Test case\ntest_list = [1, 2, 2, 3, 4, 4, 5]\nassert f(g(test_list)) == [1, 2, 3, 4, 5]\n\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, check if there exists a pair of numbers\n    in the list that adds up to the target.\n    \n    Sample Input:\n    arr = [2, 5, 8, 10, 12]\n    target = 15\n    \n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return [2, 5, 8, 10, 12], 15\n\nassert f(*g())\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers is sorted in non-decreasing order.\n    \"\"\"\n    return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 468,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i < j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(matrix=[[1, 0, 0], [2, 3, 0], [4, 5, 6]]):\n    \"\"\"Return the matrix.\"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 264,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list such that their sum is even and divisible by 4.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] + nums[j]) % 2 == 0 and (nums[i] + nums[j]) % 4 == 0:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 166,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string_list: List[str]) -> bool:\n    \"\"\"\n    Check if all strings in the given list are palindromes.\n    Return True if all strings are palindromes, False otherwise.\n    \"\"\"\n    return all(string == string[::-1] for string in string_list)\n\ndef g():\n    return [\"radar\", \"level\", \"deed\", \"civic\"]\n\nassert f(g())\n\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it is a palindrome list.\n    A list is a palindrome if it reads the same forwards and backwards.\n    Return True if the list is a palindrome, False otherwise.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums=[1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list whose product is equal to the target.\"\"\"\n    return any(num1 * num2 * num3 == target for num1 in arr for num2 in arr for num3 in arr)\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 192,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find the indices of all occurrences of a target number in a given list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 2, 2, 3, 1]\n    target = 2\n\n    Sample Output:\n    [1, 4, 5]\n    \"\"\"\n    return [i for i, num in enumerate(nums) if num == target]\n\ndef g():\n    nums = [1, 2, 3, 4, 2, 2, 3, 1]\n    target = 2\n    return nums, target\n\nassert f(*g()) == [1, 4, 5]\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Return a new matrix where each element is the sum of its row and column index.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    new_matrix = [[0 for _ in range(cols)] for _ in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            new_matrix[i][j] = i + j\n    return new_matrix\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[0, 1, 2], [1, 2, 3], [2, 3, 4]]\n\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a valid email address.\n    Return True if it is a valid email address, and False otherwise.\n    \"\"\"\n\n    import re\n\n    pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'\n    return re.match(pattern, s) is not None\n\ndef g(s: str = \"test@example.com\"):\n    return s\n\nassert f(g())\n",
        "idx_generation": 437,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exist two numbers in the list nums whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"\n    Find a pair of numbers in the list that multiply to the target.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target=5):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 97,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"Find the sum of all numbers in the list that are divisible by 3\"\"\"\n    divisible_sum = 0\n    for num in nums:\n        if num % 3 == 0:\n            divisible_sum += num\n    return divisible_sum\n\ndef g():\n    return [2, 5, 9, 12, 15, 18]\n\nassert f(g()) == 54\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(e: List[int], target_sum=10) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exist two distinct numbers whose sum is equal to target_sum.\n    Return True if such pair exists, False otherwise.\n    \"\"\"\n    for i in range(len(e)):\n        for j in range(i+1, len(e)):\n            if e[i] + e[j] == target_sum:\n                return True\n    return False\n\ndef g(e=[1, 2, 3, 4, 5]):\n    return e\n\nassert f(g(), 7)\n",
        "idx_generation": 415,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of numbers whose sum is equal to the target value.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], target=7):\n    return arr, target\n\nassert f(*g())\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a: List[int]) -> bool:\n    \"\"\"Check if all the elements in the array are divisible by the given number.\"\"\"\n    return all(num % n == 0 for num in a)\n\ndef g(n=3, a=[9, 12, 15, 18]):\n    return n, a\n\nassert f(*g()) == True\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n\n    Example:\n    arr = [1, 2, 3, 2, 1]\n\n    The list is a palindrome, so the function should return True.\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a symmetric sequence.\n\n    A symmetric sequence is one in which the sequence is the same when reversed.\n\n    Example:\n    nums = [1, 2, 3, 2, 1]\n    Output: True\n\n    nums = [1, 2, 3, 4, 5]\n    Output: False\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    A magic square is a square matrix in which the sum of each row, each column, and both diagonals are the same.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n    \n    # Check diagonal from top-left to bottom-right\n    diagonal_sum = sum(matrix[i][i] for i in range(n))\n    if diagonal_sum != target_sum:\n        return False\n    \n    # Check diagonal from top-right to bottom-left\n    diagonal_sum = sum(matrix[i][n-i-1] for i in range(n))\n    if diagonal_sum != target_sum:\n        return False\n    \n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 178,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date_str: str, format_str: str) -> bool:\n    \"\"\"\n    Check if the given date string matches the provided format string.\n\n    Example:\n    date_str = \"2022-12-31\"\n    format_str = \"%Y-%m-%d\"\n\n    The date string \"2022-12-31\" matches the format string \"%Y-%m-%d\", so the function should return True.\n    \"\"\"\n    try:\n        datetime.strptime(date_str, format_str)\n        return True\n    except ValueError:\n        return False\n\ndef g(date_str=\"2022-12-31\", format_str=\"%Y-%m-%d\"):\n    return date_str, format_str\n\nassert f(*g())\n",
        "idx_generation": 439,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if a list is a palindrome.\n    \"\"\"\n    i, j = 0, len(lst) - 1\n    while i < j:\n        if lst[i] != lst[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n\n",
        "idx_generation": 357,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Find if the target number exists in the given matrix.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 10\n\n    Sample Output:\n    False\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 10\n    return matrix, target\n\nassert f(*g()) == False\n\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the list whose product is equal to the target.\n    \"\"\"\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i+1, n):\n            if numbers[i] * numbers[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), 12)\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix, return a list containing the diagonal elements.\n\n    Example:\n    matrix = [[1, 2, 3], \n              [4, 5, 6], \n              [7, 8, 9]]\n\n    The diagonal elements are: 1, 5, 9\n    \"\"\"\n    diagonal_elements = []\n    for i in range(len(matrix)):\n        diagonal_elements.append(matrix[i][i])\n    return diagonal_elements\n\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [1, 5, 9]\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(text: str, pattern: str) -> bool:\n    \"\"\"\n    Check if the given pattern exists in the given text.\n\n    Example:\n    text = \"Hello, World!\"\n    pattern = \"World\"\n\n    The pattern \"World\" can be found in the text \"Hello, World!\", so the function should return True.\n    \"\"\"\n    if pattern in text:\n        return True\n    return False\n\ndef g(text=\"Hello, World!\", pattern=\"World\"):\n    return text, pattern\n\nassert f(*g())\n",
        "idx_generation": 439,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list that contains only even numbers.\n\n    Return True if such a subarray exists, False otherwise.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            subarray = nums[i:j]\n            if all(num % 2 == 0 for num in subarray):\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"\n    Find four numbers in the list that add up to the target.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                for l in range(k+1, len(arr)):\n                    if arr[i] + arr[j] + arr[k] + arr[l] == target:\n                        return True\n    return False\n\ndef g(target=20):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18]\n\nassert f(g())\n",
        "idx_generation": 97,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the sum of all the positive numbers.\n\n    Example:\n    nums = [-2, 5, -9, 10, -3, 7]\n\n    The output should be: 22\n    \"\"\"\n    return sum([num for num in nums if num > 0])\n\ndef g(nums=[-2, 5, -9, 10, -3, 7]):\n    return nums\n\nassert f(g()) == 22\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"\n    Given a positive integer n, return True if n can be expressed as the sum of consecutive numbers, otherwise return False.\n    \"\"\"\n    for i in range(1, n):\n        sum = 0\n        for j in range(i, n):\n            sum += j\n            if sum == n:\n                return True\n            elif sum > n:\n                break\n    return False\n\ndef g(n=100):\n    return n\n\nassert f(g())\n",
        "idx_generation": 420,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists two numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers = [1, 2, 3, 4, 5], target = 9):\n    return numbers, target\n\nassert f(*g())\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"\n    Given a number n and a list of numbers, check if n is a perfect square\n    and if all the numbers in the list are divisible by n.\n    \"\"\"\n    def is_perfect_square(num):\n        return int(num ** 0.5) ** 2 == num\n\n    if not is_perfect_square(n):\n        return False\n\n    for num in nums:\n        if num % n != 0:\n            return False\n\n    return True\n\ndef g():\n    return 16, [32, 64, 96, 128]\n\nassert f(*g())\n\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome. A list is considered a palindrome if it reads the same forwards and backwards.\n\n    Example:\n    arr = [1, 2, 3, 2, 1]\n\n    The list reads the same forwards and backwards, so the function should return True.\n\n    Hint: You can use list slicing to compare the original list with its reverse.\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g(arr=[1, 2, 3, 2, 1]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if the sum of x, y, and z is divisible by 3\"\"\"\n    return (x + y + z) % 3 == 0\ndef g(x: int = 1, y: int = 2, z: int = 3):\n    return x, y, z\nassert f(*g())\n",
        "idx_generation": 294,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of each row, each column, and both diagonals are equal.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n    \n    # Check diagonals\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n    \n    return True\n\ndef g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the string contains alternating lowercase and uppercase letters.\n\n    Example:\n    s = \"aBcDeF\"\n    The string contains alternating lowercase and uppercase letters.\n    Therefore, the puzzle is solved.\n    \"\"\"\n    for i in range(1, len(s)):\n        if (s[i].islower() and s[i-1].islower()) or (s[i].isupper() and s[i-1].isupper()):\n            return False\n    return True\n\ndef g():\n    return \"aBcDeFgHi\"\n\nassert f(g())\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(e: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    A palindrome is a sequence that reads the same forwards and backwards.\n    Return True if the list is a palindrome, False otherwise.\n    \"\"\"\n    return e == e[::-1]\n\ndef g(e=[1, 2, 3, 2, 1]):\n    return e\n\nassert f(g())\n\n",
        "idx_generation": 358,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target=0) -> bool:\n    \"\"\"Check if there exist two numbers in the list that subtract to the target\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] - x[j] == target or x[j] - x[i] == target:\n                return True\n    return False\n\ndef g():\n    return [5, 10, 15, 20, 25, 30]\n\nassert f(g(), 5)\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find two numbers in the given list that sum up to the target number and return their indices.\n\n    Example:\n    numbers = [1, 2, 3, 4, 5]\n    target = 7\n\n    The numbers 2 and 5 sum up to 7, so the function should return [1, 4] (indices of 2 and 5).\n\n    Hint: You can use nested loops to compare each pair of numbers.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return [i, j]\n    return []\n\ndef g(numbers=[1, 2, 3, 4, 5], target=7):\n    return numbers, target\n\nassert f(*g()) == [1, 4]\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a diagonal matrix.\n    A diagonal matrix is a square matrix in which all the elements outside the main diagonal are zero.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(matrix = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string `s` is a pangram.\n    A pangram is a sentence that contains every letter of the alphabet at least once.\n    \"\"\"\n    alphabet = set(\"abcdefghijklmnopqrstuvwxyz\")\n    s = s.lower()\n    for char in s:\n        if char.isalpha() and char in alphabet:\n            alphabet.remove(char)\n    return len(alphabet) == 0\n\ndef g():\n    return \"The quick brown fox jumps over the lazy dog.\"\n\nassert f(g())\n",
        "idx_generation": 439,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers nums, determine if it is possible to split the list into two equal halves such that the sum of elements in each half is the same.\n    Return True if such a split is possible, otherwise return False.\n    \"\"\"\n    total_sum = sum(nums)\n    if total_sum % 2 != 0:\n        return False\n    \n    target = total_sum // 2\n    dp = [False] * (target + 1)\n    dp[0] = True\n    \n    for num in nums:\n        for j in range(target, num-1, -1):\n            dp[j] = dp[j] or dp[j-num]\n    \n    return dp[target]\n\ndef g(nums: List[int]):\n    return nums\n\n# Test case\ntest_nums = [1, 5, 11, 5]\nassert f(g(test_nums))\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list such that their sum is equal to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), target=7)\n",
        "idx_generation": 100,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in ascending order\"\"\"\n    return nums == sorted(nums)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of numbers, return a new list where each element is multiplied by 2.\n\n    Example:\n    numbers = [1, 2, 3, 4, 5]\n    output: [2, 4, 6, 8, 10]\n    \"\"\"\n    return [num * 2 for num in numbers]\n\ndef g(numbers = [1, 2, 3, 4, 5]):\n    return numbers\n\nassert f(g()) == [2, 4, 6, 8, 10]\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Check if there is a subarray in the given list that has a sum equal to the target value.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    The subarray [2, 3, 4] has a sum equal to the target value 9, so the function should return True.\n\n    Hint: You can use two pointers to maintain a sliding window and check the sum of the subarray.\n    \"\"\"\n    left = 0\n    right = 0\n    current_sum = 0\n\n    while right < len(nums):\n        current_sum += nums[right]\n\n        while current_sum > target:\n            current_sum -= nums[left]\n            left += 1\n\n        if current_sum == target:\n            return True\n\n        right += 1\n\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g(), 9)\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if a list of numbers is sorted in non-decreasing order.\n\n    Sample Input:\n    `nums = [1, 2, 3, 4, 5]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([1, 2, 3, 4, 5]))\n",
        "idx_generation": 474,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order.\"\"\"\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(points: List[Tuple[float, float]], distance=10) -> bool:\n    \"\"\"Check if there exists a pair of points in the list that are at a distance greater than or equal to a specific value\"\"\"\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            if ((points[i][0] - points[j][0]) ** 2 + (points[i][1] - points[j][1]) ** 2) ** 0.5 >= distance:\n                return True\n    return False\n\ndef g(distance=10):\n    return [(1, 1), (2, 3), (4, 5), (6, 7), (8, 9)]\nassert f(g())\n",
        "idx_generation": 295,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a 2D list has a magic square.\n    A magic square is a square grid of numbers where the sums of the numbers in each row, each column, and both main diagonals are the same.\n    \"\"\"\n    n = len(arr)\n    magic_sum = sum(arr[0])\n\n    # Check rows\n    for row in arr:\n        if sum(row) != magic_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        column_sum = 0\n        for i in range(n):\n            column_sum += arr[i][j]\n        if column_sum != magic_sum:\n            return False\n\n    # Check main diagonal\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += arr[i][i]\n    if diagonal_sum != magic_sum:\n        return False\n\n    # Check secondary diagonal\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += arr[i][n - i - 1]\n    if diagonal_sum != magic_sum:\n        return False\n\n    return True\n\ndef g():\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 193,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=5) -> bool:\n    \"\"\"\n    Check if the given string contains only uppercase letters.\n    \"\"\"\n    return s.isupper()\n\ndef g(target=5):\n    return \"HELLO\"\n\nassert f(g())\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g(nums=[1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g()) is True\n\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target=0) -> bool:\n    \"\"\"Check if there exist two numbers in the list that divide the target\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if target % x[i] == 0 and target % x[j] == 0:\n                return True\n    return False\n\ndef g():\n    return [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), 20)\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if any two numbers in the given list add up to the target number.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n\n    The numbers 2 and 5 add up to the target number 7, so the function should return True.\n\n    Hint: You can use a nested loop to compare each pair of numbers in the list.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=7):\n    return nums, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 231,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Calculate the sum of all elements in the given matrix.\n    \"\"\"\n    total_sum = 0\n    for row in matrix:\n        total_sum += sum(row)\n    return total_sum\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g()) == 45\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], char: str) -> bool:\n    \"\"\"\n    Given a list of words and a character, determine if none of the words contain the given character.\n\n    Sample Input:\n    `['apple', 'banana', 'cherry']`, `'z'`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return not any(char in word for word in words)\n\ndef g():\n    return ['apple', 'banana', 'cherry'], 'z'\n\nassert f(*g())\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist three distinct numbers in the list that add up to the target integer.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g(), 9)\n",
        "idx_generation": 258,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Check if there are two elements in the list whose sum is equal to the target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target: int = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 105,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> List[List[int]]:\n    \"\"\"\n    Find all unique quadruplets in the list that sum up to the target integer.\n    Return a list of lists containing the quadruplets.\n    \"\"\"\n    result = []\n    nums.sort()\n    n = len(nums)\n    for i in range(n-3):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        for j in range(i+1, n-2):\n            if j > i+1 and nums[j] == nums[j-1]:\n                continue\n            left = j+1\n            right = n-1\n            while left < right:\n                curr_sum = nums[i] + nums[j] + nums[left] + nums[right]\n                if curr_sum == target:\n                    result.append([nums[i], nums[j], nums[left], nums[right]])\n                    while left < right and nums[left] == nums[left+1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right-1]:\n                        right -= 1\n                    left += 1\n                    right -= 1\n                elif curr_sum < target:\n                    left += 1\n                else:\n                    right -= 1\n    return result\n\ndef g(nums=[1, 0, -1, 0, -2, 2], target=0):\n    return nums\n\nassert f(g(), 0) == [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]]\n",
        "idx_generation": 435,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import numpy as np\nfrom typing import*\n\ndef f(arr: np.ndarray, target_column=1) -> bool:\n    \"\"\"\n    Check if the given 2D numpy array has any duplicate values in a specific column.\n\n    Example:\n    arr = np.array([[1, 2, 3], [4, 5, 6], [7, 2, 9]])\n    The second column has a duplicate value (2).\n    Therefore, the puzzle is solved.\n    \"\"\"\n    column_values = arr[:, target_column]\n    unique_values, counts = np.unique(column_values, return_counts=True)\n    return np.any(counts > 1)\n\ndef g(target_column=1):\n    arr = np.array([[1, 2, 3], [4, 5, 6], [7, 2, 9]])\n    return arr\n\nassert f(g())\n",
        "idx_generation": 495,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of any two numbers in the list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            max_product = max(max_product, product)\n    return max_product\n\ndef g(nums=[-2, 0, 3, 4, -1]):\n    return nums\n\nassert f(g()) == 12\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if all the elements in each column are unique.\n    Return True if all columns have unique elements, False otherwise.\n    \"\"\"\n    def has_unique_elements(column):\n        return len(column) == len(set(column))\n\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n\n    for j in range(num_cols):\n        column = [matrix[i][j] for i in range(num_rows)]\n        if not has_unique_elements(column):\n            return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    A magic square is a square matrix where the sum of each row, each column, and both diagonals are the same.\n\n    Sample Input:\n    matrix = [\n        [2, 7, 6],\n        [9, 5, 1],\n        [4, 3, 8]\n    ]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n\n    # Check rows\n    for i in range(n):\n        if sum(matrix[i]) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n\n    # Check diagonal from top-left to bottom-right\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n    if diagonal_sum != target_sum:\n        return False\n\n    # Check diagonal from top-right to bottom-left\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][n-i-1]\n    if diagonal_sum != target_sum:\n        return False\n\n    return True\n\ndef g():\n    return [\n        [2, 7, 6],\n        [9, 5, 1],\n        [4, 3, 8]\n    ]\n\nassert f(g())\n",
        "idx_generation": 193,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(string: str, substring: str) -> bool:\n    \"\"\"\n    Check if a given string is equal to a specific substring.\n    \"\"\"\n    return string == substring\n\ndef g(string = \"Hello, world!\", substring = \"Hello, world!\"):\n    return string\n\nassert f(g(), \"Hello, world!\")\n",
        "idx_generation": 495,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of numbers, check if the list is a palindrome.\n    Return True if the list is a palindrome, False otherwise.\n\n    Sample Input:\n    nums = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums=[1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Return a list of prime numbers from the given list\"\"\"\n    primes = []\n    for num in nums:\n        if num < 2:\n            continue\n        is_prime = True\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [2, 3, 5, 7]\n",
        "idx_generation": 212,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list such that the product of its elements is equal to target.\n\n    Sample Input:\n    `nums = [2, 4, 5, 3], target = 120`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    prefix_product = 1\n    prefix_products = set()\n\n    for num in nums:\n        prefix_product *= num\n\n        if prefix_product == target or target % prefix_product == 0 and target // prefix_product in prefix_products:\n            return True\n\n        prefix_products.add(prefix_product)\n\n    return False\n\ndef g(nums: List[int]):\n    return nums, 120\n\nassert f(*g([2, 4, 5, 3]))\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Find the maximum value in each row of the given matrix and return them in a list.\n    \"\"\"\n    row_max = []\n\n    for row in matrix:\n        max_val = max(row)\n        row_max.append(max_val)\n\n    return row_max\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [3, 6, 9]\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], char: str) -> bool:\n    \"\"\"\n    Given a list of words and a character, determine if all the characters in the words are unique.\n\n    Sample Input:\n    `['apple', 'banana', 'cherry']`, `'e'`\n\n    Sample Output:\n    `False`\n    \"\"\"\n    return all(word.count(char) <= 1 for word in words)\n\ndef g():\n    return ['apple', 'banana', 'cherry'], 'e'\n\nassert f(*g())\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list contains three consecutive numbers.\n\n    Returns True if the list contains three consecutive numbers, False otherwise.\n    \"\"\"\n    nums = sorted(nums)\n    for i in range(len(nums)-2):\n        if nums[i+1] == nums[i] + 1 and nums[i+2] == nums[i] + 2:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 5, 6, 7]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 258,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target number, check if there exists a pair of numbers in the list whose sum is equal to the target.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=6):\n    return nums\n\nassert f(g(), 6)\n\n",
        "idx_generation": 109,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers, check if there are two numbers that sum up to the target.\n    Return True if there are two numbers that sum up to the target, and False otherwise.\n    \"\"\"\n\n    seen = set()\n\n    for num in numbers:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    \n    return False\n\ndef g(numbers: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return numbers, target\n\nassert f(*g())\n",
        "idx_generation": 437,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, determine if there is a subarray in the list\n    whose sum is equal to the target integer.\n    \"\"\"\n    n = len(arr)\n    prefix_sum = 0\n    prefix_sums = set()\n    \n    for i in range(n):\n        prefix_sum += arr[i]\n        \n        if prefix_sum == target or prefix_sum - target in prefix_sums:\n            return True\n        \n        prefix_sums.add(prefix_sum)\n    \n    return False\n\ndef g(arr = [3, 4, -7, 2, 1, 3, -2, 1]):\n    return arr, 7\n\nassert f(*g())\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> int:\n    \"\"\"\n    Find the sum of all the even numbers in the given list.\n\n    Example:\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    The even numbers in the list are 2, 4, 6, 8, and 10, so the function should return 30.\n    \"\"\"\n    return sum(num for num in numbers if num % 2 == 0)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 30\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix.\n\n    Returns True if the matrix is a lower triangular matrix, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    if rows != cols:\n        return False\n\n    for i in range(rows):\n        for j in range(cols):\n            if j > i:\n                if matrix[i][j] != 0:\n                    return False\n\n    return True\n\ndef g(matrix=[[1, 0, 0], [2, 3, 0], [4, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 497,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> int:\n    \"\"\"Return the sum of all the positive numbers in the list\"\"\"\n    return sum(num for num in numbers if num > 0)\n\ndef g(numbers=[-1, 2, -3, 4, -5, 6]):\n    return numbers\n\nassert f(g()) == 12\n\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square.\n    A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n\n    Sample Input:\n    matrix = [\n        [2, 7, 6],\n        [9, 5, 1],\n        [4, 3, 8]\n    ]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        column_sum = sum(matrix[i][j] for i in range(n))\n        if column_sum != target_sum:\n            return False\n    \n    # Check diagonals\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-1-i] for i in range(n))\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n    \n    return True\n\ndef g():\n    return [[2, 7, 6],\n            [9, 5, 1],\n            [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the list of numbers is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find two numbers from the list whose product is equal to the target number.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target=24):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 216,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose difference is equal to the target.\n\n    Example:\n    nums = [2, 4, 7, 11, 15]\n    target = 3\n\n    Output:\n    True (Because 4 - 7 = 3)\n    \"\"\"\n    complements = set()\n\n    for num in nums:\n        complement = num - target\n        if complement in complements:\n            return True\n        else:\n            complements.add(num)\n\n    return False\n\ndef g(nums: List[int] = [2, 4, 7, 11, 15], target: int = 3):\n    return (nums, target)\n\nassert f(*g())\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Calculate the sum of all elements in the given matrix.\n    Return the sum of all elements.\n    \"\"\"\n    return sum(sum(row) for row in matrix)\n\ndef g():\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\n\nassert f(g()) == 45\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is a palindrome, ignoring case sensitivity and whitespace.\n    \"\"\"\n    s = s.lower().replace(\" \", \"\")\n    return s == s[::-1]\n\ndef g(s = \"A man a plan a canal Panama\"):\n    return s\n\nassert f(g())\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list contains duplicate elements.\n\n    Returns True if the list contains duplicate elements, False otherwise.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 258,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find if there exists a subarray in a list that adds up to the given target.\n    Return True if such a subarray exists, False otherwise.\n    \"\"\"\n    left = 0\n    right = 0\n    curr_sum = nums[0]\n    \n    while right < len(nums):\n        if curr_sum == target:\n            return True\n        elif curr_sum < target:\n            right += 1\n            if right < len(nums):\n                curr_sum += nums[right]\n        else:\n            curr_sum -= nums[left]\n            left += 1\n    \n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 9)\n\nassert f(*g())\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int) -> List[List[int]]:\n    \"\"\"\n    Generate a matrix of size n x m where each element is the sum of its row and column indices.\n\n    Sample Input:\n    n = 3\n    m = 4\n\n    Sample Output:\n    [\n        [0, 1, 2, 3],\n        [1, 2, 3, 4],\n        [2, 3, 4, 5]\n    ]\n    \"\"\"\n    return [[i+j for j in range(m)] for i in range(n)]\n\ndef g(n: int = 3, m: int = 4):\n    return n, m\n\nassert f(*g()) == [\n    [0, 1, 2, 3],\n    [1, 2, 3, 4],\n    [2, 3, 4, 5]\n]\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"\n    Given a target integer and a list of integers, determine if there are two numbers in the list\n    whose difference is equal to the target integer.\n    \"\"\"\n    num_set = set(arr)\n    \n    for num in arr:\n        if num - n in num_set:\n            return True\n    \n    return False\n\ndef g(arr = [5, 7, 9, 11, 13], n = 4):\n    return n, arr\n\nassert f(*g())\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a: int) -> bool:\n    \"\"\"Check if the given number is divisible by the given divisor.\"\"\"\n    return n % a == 0\n\ndef g(n=24, a=6):\n    \"\"\"Find a number divisible by the given divisor.\"\"\"\n    return n, a\n\nassert f(*g())\n",
        "idx_generation": 479,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the array contains alternating odd and even numbers.\n    \"\"\"\n    for i in range(len(arr) - 1):\n        if (arr[i] % 2 == 0 and arr[i + 1] % 2 == 0) or (arr[i] % 2 != 0 and arr[i + 1] % 2 != 0):\n            return False\n    return True\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose sum is equal to n.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False\n\ndef g(lst: List[int] = [3, 4, 5, 6, 7, 8], n: int = 11):\n    return lst, n\n\nassert f(*g()) == True\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, find the majority element.\n    The majority element is the element that appears more than \u230an/2\u230b times, where n is the length of the list.\n    Return True if there exists a majority element in the list, False otherwise.\n    \"\"\"\n    num_count = {}\n    for num in nums:\n        num_count[num] = num_count.get(num, 0) + 1\n        if num_count[num] > len(nums) // 2:\n            return True\n    return False\n\ndef g():\n    nums = [1, 2, 3, 3, 3, 4, 5, 3, 3, 3, 6, 3, 3, 7]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    nums = [1, 2, 3, 2, 1]\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=10) -> bool:\n    \"\"\"Check if the target is a sum of any two numbers in the list\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 219,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a pair of elements in the list that equals the target value.\n    \"\"\"\n    return any(target - num in numbers for num in numbers)\n\ndef g(numbers=[1, 2, 3, 4, 5], target=9):\n    return numbers, target\n\nassert f(*g())\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the sum of the elements in each row of the given matrix.\n\n    Sample Input:\n    matrix = [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [9, 10, 11, 12]\n    ]\n\n    Sample Output:\n    [10, 26, 42]\n    \"\"\"\n    return [sum(row) for row in matrix]\ndef g():\n    return [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\nassert f(g()) == [10, 26, 42]\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome, which is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\"\"\"\n    string = string.lower()\n    string = ''.join(c for c in string if c.isalnum())\n    return string == string[::-1]\n\ndef g():\n    return (\"A man, a plan, a canal: Panama\",)\n\nassert f(*g())\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the sum of all the odd numbers in the given list.\n    Returns the sum of odd numbers.\n    \"\"\"\n    return sum(num for num in nums if num % 2 != 0)\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == 25\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find if the target number exists in the given list and if it is a perfect square.\n    \"\"\"\n    for num in nums:\n        if num == target and num ** 0.5 == int(num ** 0.5):\n            return True\n    return False\n\ndef g(nums=[1, 4, 9, 16, 25], target=9):\n    return nums\n\nassert f(g(), 9)\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the product of all positive numbers.\n\n    Example:\n    nums = [-2, 3, -4, 5, -6]\n\n    The product of positive numbers is: 3 * 5 = 15\n    \"\"\"\n    product = 1\n    for num in nums:\n        if num > 0:\n            product *= num\n    return product\n\ndef g(nums=[-2, 3, -4, 5, -6]):\n    return nums\n\nassert f(g()) == 15\n",
        "idx_generation": 442,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target.\n    \"\"\"\n    for r in range(1, len(arr) + 1):\n        for combination in itertools.combinations(arr, r):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(target=15):\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), target=10)\n\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(numbers: List[int]) -> int:\n    \"\"\"\n    Find the sum of all even numbers in the given list.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5, 6]\n\n    Sample Output:\n    12\n    \"\"\"\n    return sum(x for x in numbers if x % 2 == 0)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g()) == 12\n\n",
        "idx_generation": 479,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if an array is sorted in non-decreasing order.\n    \"\"\"\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n\n",
        "idx_generation": 192,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the positive numbers.\n    \"\"\"\n    return [num for num in lst if num > 0]\n\ndef g(lst=[-1, 2, -3, 4, -5]):\n    return lst\n\nassert f(g()) == [2, 4]\n\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains a subsequence that forms a geometric progression.\n    Returns True if such subsequence exists, False otherwise.\n    \"\"\"\n    arr.sort()\n    if len(arr) < 3:\n        return False\n    ratio = arr[1] / arr[0]\n    for i in range(2, len(arr)):\n        if arr[i] / arr[i-1] != ratio:\n            return False\n    return True\n\ndef g():\n    return [2, 4, 8, 16, 32]\n\nassert f(g())\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=5) -> bool:\n    \"\"\"\n    Check if there exists three sublists in the given list whose sums are divisible by k.\n    Returns True if such sublists exist, False otherwise.\n    \"\"\"\n    n = len(arr)\n    dp = [[False] * (k+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = True\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if arr[i-1] <= j:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for l in range(j+1, n+1):\n                if dp[i][k] and dp[j][k] and dp[l][k]:\n                    return True\n    return False\n\ndef g(arr=[10, 20, 30, 40, 50]):\n    k = 10\n    return arr, k\n\nassert f(*g())\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subarray in the list such that the product of its elements is equal to the target.\"\"\"\n    for i in range(len(arr)):\n        curr_product = arr[i]\n        j = i + 1\n        while j <= len(arr):\n            if curr_product == target:\n                return True\n            if curr_product > target or j == len(arr):\n                break\n            curr_product *= arr[j]\n            j += 1\n    return False\n\ndef g(target=24):\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), target=24)\n",
        "idx_generation": 219,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are three elements in the list that add up to the target number.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(arr: List[int]):\n    return arr\n\nassert f(g([1, 2, 3, 4, 5]), 9)\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an identity matrix.\n    An identity matrix is a square matrix in which all the elements of the principal diagonal are ones and all other elements are zeros.\n    Returns True if the matrix is an identity matrix, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if (i == j and matrix[i][j] != 1) or (i != j and matrix[i][j] != 0):\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n\nassert f(g())\n\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if a string is a palindrome ignoring case and spaces.\n    \"\"\"\n    string = ''.join(filter(str.isalnum, string.lower()))\n    return string == string[::-1]\n\ndef g(string = \"Able was I saw Elba\"):\n    return string\n\nassert f(g())\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Remove all even elements from the list while preserving the original order.\"\"\"\n    return [num for num in nums if num % 2 != 0]\n\ndef g(nums=[1, 2, 3, 4, 5, 3, 4, 6]):\n    return nums\n\nassert f(g()) == [1, 3, 5, 3]\n\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target=5) -> bool:\n    \"\"\"Find a list of two integers whose sum is equal to the target value.\"\"\"\n    return len(x) == 2 and sum(x) == target\ndef g(target=5):\n    return [target - 2, 2]\nassert f(g())\n",
        "idx_generation": 114,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"\n    Given a list of positive integers, find if there is a subset of the list that has a sum less than or equal to the target_sum.\n    \"\"\"\n    def subset_sum(numbers, target_sum, index, current_sum):\n        if current_sum <= target_sum:\n            return True\n        if index >= len(numbers):\n            return False\n        include = subset_sum(numbers, target_sum, index + 1, current_sum + numbers[index])\n        exclude = subset_sum(numbers, target_sum, index + 1, current_sum)\n        return include or exclude\n\n    return subset_sum(numbers, target_sum, 0, 0)\n\ndef g(numbers=[10, 20, 30, 40, 50]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 443,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the given list that add up to the target sum.\n\n    Sample Input:\n    lst = [1, 2, 3, 4, 5]\n    target_sum = 8\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst\n\nassert f(g(), 8)\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a perfect square.\n    \"\"\"\n    return all(num**0.5 == int(num**0.5) for num in numbers)\n\ndef g(numbers = [4, 9, 16, 25]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    arr = [1, 2, 3, 4, 3, 2, 1]\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 193,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the difference between the maximum and minimum number in the list.\n    \"\"\"\n    return max(lst) - min(lst)\n\ndef g(lst=[10, 5, 8, 3, 2]):\n    return lst\n\nassert f(g()) == 8\n\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if all the numbers in a given list are prime numbers.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return all(is_prime(num) for num in arr)\n\ndef g():\n    return [2, 3, 5, 7, 11, 13, 17, 19]\n\nassert f(g())\n",
        "idx_generation": 215,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=5) -> bool:\n    \"\"\"\n    Check if there exists three sublists in the given list whose sums are divisible by k.\n    Returns True if such sublists exist, False otherwise.\n    \"\"\"\n    n = len(arr)\n    dp = [[False] * (k+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = True\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if arr[i-1] <= j:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for l in range(j+1, n+1):\n                if dp[i][k] and dp[j][k] and dp[l][k]:\n                    return True\n    return False\n\ndef g(arr=[2, 4, 6, 8, 10]):\n    k = 4\n    return arr, k\n\nassert f(*g())\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if any two numbers in the list multiply to give the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[2, 4, 6, 8, 10], target=40):\n    return nums, target\n\nassert f(*g())\n\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there exists a pair of numbers in the list that adds up to the target number.\n    Return True if such a pair exists, False otherwise.\n\n    Example:\n    nums = [2, 3, 5, 7, 9]\n    target = 12\n    Output: True\n\n    nums = [2, 3, 5, 7, 9]\n    target = 8\n    Output: False\n    \"\"\"\n    numSet = set()\n    for num in nums:\n        if target - num in numSet:\n            return True\n        numSet.add(num)\n    return False\n\ndef g():\n    return ([2, 3, 5, 7, 9], 12)\n\nassert f(*g()) == True\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a diagonal matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(matrix=[[1, 0, 0], [0, 2, 0], [0, 0, 3]]):\n    \"\"\"Return the matrix.\"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is a palindrome.\n    Returns True if it is, False otherwise.\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to 10\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == 10:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6]):\n    return nums\nassert f(g())\n",
        "idx_generation": 285,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, check if there are two numbers in the list that sum up to the target.\n    Return True if a pair is found, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in numbers:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(numbers=[1, 2, 3, 4, 5], target=9):\n    return numbers, target\n\nassert f(*g())\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the given list that add up to the target sum.\n    Return True if there are two such numbers, False otherwise.\n    \"\"\"\n    seen_numbers = set()\n    for num in numbers:\n        complement = target_sum - num\n        if complement in seen_numbers:\n            return True\n        seen_numbers.add(num)\n    return False\n\ndef g(numbers=[1, 2, 3, 4, 5], target_sum=9):\n    return numbers, target_sum\n\nassert f(*g())\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if the given list contains a subsequence that sums up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            subseq = arr[i:j]\n            if sum(subseq) == target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 9) -> Tuple[List[int], int]:\n    return arr, target\n\nassert f(*g())\n",
        "idx_generation": 368,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=4, m=4) -> bool:\n    \"\"\"\n    Check if the given matrix has at least n rows and m columns.\n\n    Sample Input:\n    matrix = [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [9, 10, 11, 12],\n        [13, 14, 15, 16]\n    ]\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(matrix) >= n and all(len(row) >= m for row in matrix)\ndef g(n=4, m=4):\n    return [[i * m + j + 1 for j in range(m)] for i in range(n)]\nassert f(g())\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an identity matrix.\n\n    Returns True if the matrix is an identity matrix, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    if rows != cols:\n        return False\n\n    for i in range(rows):\n        for j in range(cols):\n            if i == j:\n                if matrix[i][j] != 1:\n                    return False\n            else:\n                if matrix[i][j] != 0:\n                    return False\n\n    return True\n\ndef g(matrix=[[1, 0, 0], [0, 1, 0], [0, 0, 1]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=5, s=19) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])\ndef g(n = 5, s = 19):\n    x = [0] * n\n    x[0] = s\n    return x\nassert f(g())\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains only prime numbers.\"\"\"\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return all(is_prime(num) for num in nums)\n\ndef g():\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\nassert f(g())\n",
        "idx_generation": 221,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n    \"\"\"\n    return numbers == numbers[::-1]\n\ndef g(numbers=[1, 2, 3, 2, 1]):\n    return numbers\n\nassert f(g())\n\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5):\n    return matrix, target\n\nassert f(*g())\n\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the list that add up to the target number.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 271,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Tuple\n\ndef f(matrix: List[List[int]]) -> Tuple[int, int]:\n    \"\"\"\n    Given a matrix, find the position (row and column indices) of the maximum element.\n    Return a tuple containing the row and column indices.\n    \"\"\"\n    max_val = float('-inf')\n    max_row = -1\n    max_col = -1\n    for row in range(len(matrix)):\n        for col in range(len(matrix[row])):\n            if matrix[row][col] > max_val:\n                max_val = matrix[row][col]\n                max_row = row\n                max_col = col\n    return max_row, max_col\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == (2, 2)\n\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the given string is a pangram.\n    A pangram is a sentence that contains every letter of the alphabet at least once.\n\n    Sample Input:\n    string = \"The quick brown fox jumps over the lazy dog\"\n    \n    Sample Output:\n    True\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return all(letter in string.lower() for letter in alphabet)\n\ndef g(string=\"The quick brown fox jumps over the lazy dog\"):\n    return string\n\nassert f(g())\n\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"Return the sum of all the odd numbers in the given list.\"\"\"\n    return sum(num for num in nums if num % 2 != 0)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 9\n",
        "idx_generation": 285,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 9)\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(x: List[List[int]]) -> int:\n    \"\"\"\n    Find the sum of all elements in the given matrix.\n    \"\"\"\n    total_sum = 0\n    for row in x:\n        for num in row:\n            total_sum += num\n    return total_sum\n\ndef g(x=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    \"\"\"\n    This solution calculates the sum of all elements in the matrix by iterating through each element.\n    \"\"\"\n    return x\n\nassert f(g()) == 45\n\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sum up to the target value.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    target = 7\n\n    The numbers 3 and 4 sum up to the target value 7, so the function should return True.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], target=7):\n    return arr, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 371,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum value in the given list of numbers.\n    Return the maximum value.\n    \"\"\"\n    return max(nums)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 5\n\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix.\n\n    Returns True if the matrix is a lower triangular matrix, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    if rows != cols:\n        return False\n\n    for i in range(rows):\n        for j in range(cols):\n            if i < j:\n                if matrix[i][j] != 0:\n                    return False\n\n    return True\n\ndef g(matrix=[[1, 0, 0], [2, 3, 0], [4, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], x: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose sum is equal to x.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == x:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 7\n\nassert f(*g())\n\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int]) -> bool:\n    \"\"\"Check if the list contains three consecutive numbers in increasing order.\"\"\"\n    for i in range(len(x)-2):\n        if x[i] + 1 == x[i+1] and x[i+1] + 1 == x[i+2]:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 5, 7, 9]\n\nassert f(g())\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n\n    Example:\n    nums = [1, 2, 3, 2, 1]\n    output: True\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    nums = [1, 2, 3, 2, 1]\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 407,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix and a target number, check if the target number exists in the matrix.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n    \n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    left = 0\n    right = rows * cols - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        num = matrix[mid // cols][mid % cols]\n        \n        if num == target:\n            return True\n        elif num < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return False\n\ndef g(matrix=[[1,3,5,7],[10,11,16,20],[23,30,34,50]], target=3):\n    return matrix\n\nassert f(g(), 3)\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Check if there are two numbers in the list that add up to the target number.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr=[2, 4, 6, 8]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 271,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n\n    Sample Input:\n    string = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return string == string[::-1]\n\ndef g(string = \"racecar\"):\n    return string\n\nassert f(g())\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a triplet in the given list such that the sum of the triplet is zero.\n    Return True if such a triplet exists, False otherwise.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    \n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        \n        while left < right:\n            if nums[i] + nums[left] + nums[right] == 0:\n                return True\n            elif nums[i] + nums[left] + nums[right] < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return False\n\ndef g():\n    return [1, -2, 3, 4, 5, -6]\n\nassert f(g())\n\n",
        "idx_generation": 286,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are four numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                for l in range(k+1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7]\n\nassert f(g(), 13)\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, return the sum of all the elements in the list.\n\n    Example:\n    numbers = [1, 2, 3, 4, 5]\n\n    The sum of the list is: 15\n    \"\"\"\n    return sum(numbers)\n\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return numbers\n\nassert f(g()) == 15\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target: int) -> bool:\n    \"\"\"\n    Determine if a given number n can be expressed as a sum of consecutive positive integers, \n    where the sum contains at least target number of terms.\n\n    Sample Input:\n    `15, 3`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    for i in range(1, n+1):\n        sum = 0\n        for j in range(i, n+1):\n            sum += j\n            if sum == n and j-i+1 >= target:\n                return True\n            elif sum > n:\n                break\n    return False\n\ndef g(n=15, target=3):\n    return n, target\n\nassert f(*g())\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is strictly increasing.\n\n    Example:\n    numbers = [1, 2, 3, 4, 5]\n\n    The numbers in the list are in increasing order, so the function should return True.\n    \"\"\"\n    return all(numbers[i] < numbers[i+1] for i in range(len(numbers)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an upper triangular matrix.\n\n    Returns True if the matrix is an upper triangular matrix, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    if rows != cols:\n        return False\n\n    for i in range(rows):\n        for j in range(cols):\n            if i > j:\n                if matrix[i][j] != 0:\n                    return False\n\n    return True\n\ndef g(matrix=[[1, 2, 3], [0, 4, 5], [0, 0, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    n = len(matrix)\n    return all(matrix[i][j] == matrix[j][i] for i in range(n) for j in range(n))\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of numbers, determine if it is a prime sequence.\n    A prime sequence is one in which all numbers are prime.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    for num in nums:\n        if not is_prime(num):\n            return False\n\n    return True\n\ndef g():\n    return [2, 3, 5, 7, 11, 13, 17, 19]\n\nassert f(g())\n\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n    \"\"\"\n    return numbers == numbers[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that add up to the target.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(num_list: List[int], target=20) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            for k in range(j+1, len(num_list)):\n                if num_list[i] + num_list[j] + num_list[k] == target:\n                    return True\n    return False\n\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 277,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a pangram.\n    A pangram is a sentence that contains every letter of the alphabet at least once.\n    \n    Sample Input:\n    s = \"The quick brown fox jumps over the lazy dog\"\n    \n    Sample Output:\n    True\n    \"\"\"\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    return alphabet.issubset(set(s.lower()))\n\ndef g():\n    return \"The quick brown fox jumps over the lazy dog\"\n\nassert f(g())\n\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"Return the sum of all positive numbers in the list.\"\"\"\n    total = 0\n    for num in nums:\n        if num > 0:\n            total += num\n    return total\n\ndef g(nums=[-1, 2, -3, 4, -5]):\n    return nums\n\nassert f(g()) == 6\n\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target sum.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 3, 5, 7, 9]\n\nassert f(g())\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(a: List[int], n: int) -> bool:\n    \"\"\"Check if the sum of all elements in the array is equal to the given number.\"\"\"\n    return sum(a) == n\n\ndef g(a=[1, 2, 3, 4, 5], n=15):\n    return a, n\n\nassert f(*g())\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list such that their sum equals the target.\n\n    Sample Input:\n    `[1, 2, 3, 4, 5], 7`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 7)\n\nassert f(*g())\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Find the missing number in a list of consecutive numbers.\n\n    The list contains all the numbers from 1 to n, but one number is missing.\n\n    Returns the missing number.\n    \"\"\"\n    n = len(arr) + 1\n    total_sum = (n * (n + 1)) // 2\n    arr_sum = sum(arr)\n    return total_sum - arr_sum\n\ndef g():\n    return [1, 2, 3, 5, 6]\n\nassert f(g()) == 4\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is sorted in non-ascending order.\n    Return True if it is sorted, False otherwise.\n    \"\"\"\n    return all(arr[i] >= arr[i+1] for i in range(len(arr)-1))\n\ndef g():\n    return [5, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Find the sum of all the positive elements in the given list.\n\n    Example:\n    arr = [1, -2, 3, -4, 5, -6]\n\n    The output should be:\n    9\n    \"\"\"\n    return sum([num for num in arr if num > 0])\n\ndef g():\n    return [1, -2, 3, -4, 5, -6]\n\nassert f(g()) == 9\n\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a sublist in the given list such that the product of its elements is a perfect square.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            sublist = arr[i:j]\n            product = 1\n            for num in sublist:\n                product *= num\n            if product >= 0 and int(product**0.5)**2 == product:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 422,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there are two numbers in the list that multiply to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] == target:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], target=10):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers nums and a target integer, determine if there are two numbers in the list that add up to the target.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n\n    Output:\n    True (Because 3 + 4 = 7)\n    \"\"\"\n    seen = set()\n    \n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        else:\n            seen.add(num)\n    \n    return False\n\ndef g(nums = [1, 2, 3, 4, 5], target = 7):\n    return nums, target\n\nassert f(g()[0], g()[1])\n",
        "idx_generation": 283,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a given string is a valid email address.\n    \"\"\"\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return re.match(pattern, s) is not None\n\ndef g():\n    return \"example@example.com\"\n\nassert f(g())\n\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of distinct numbers in the given list that sums up to the target.\n    \"\"\"\n    num_set = set(nums)\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=15):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are three distinct indices i, j, and k in the list such that nums[i] + nums[j] + nums[k] equals to the target.\n\n    Sample Input:\n    `[1, 2, 3, 4, 5]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    num_set = set()\n\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    \n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=10):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(arr: List[Tuple[int, str]]) -> List[str]:\n    \"\"\"\n    Given a list of tuples, return a list of strings where each string is the concatenation of the tuple elements.\n\n    Sample Input:\n    arr = [(1, 'a'), (2, 'b'), (3, 'c')]\n\n    Sample Output:\n    ['1a', '2b', '3c']\n    \"\"\"\n    return [str(num) + string for num, string in arr]\n\ndef g():\n    return [(1, 'a'), (2, 'b'), (3, 'c')]\n\nassert f(g()) == ['1a', '2b', '3c']\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Given a sorted array of integers, find a pair of elements that sum up to the target number.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        current_sum = arr[left] + arr[right]\n        if current_sum == target:\n            return True\n        elif current_sum < target:\n            left += 1\n        else:\n            right -= 1\n\n    return False\n\ndef g(target=10):\n    return [1, 3, 5, 7, 9]\n\nassert f(g())\n\n",
        "idx_generation": 375,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the sum of all the even numbers in the given list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6]\n    The even numbers in the list are 2, 4, and 6.\n    The sum of these numbers is 12, so the function should return 12.\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g()) == 12\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine if it is a symmetric matrix.\n    Return True if the matrix is symmetric, False otherwise.\n    \"\"\"\n    n = len(matrix)\n\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n\n    return True\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\n# Test case\ntest_matrix = [[1, 2, 3], [2, 5, 6], [3, 6, 9]]\nassert f(g(test_matrix))\n\n",
        "idx_generation": 202,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=100, b=200) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to a given number\"\"\"\n    return a + b == x\n\ndef g(a=100, b=200):\n    return a + b\n\nassert f(g())\n",
        "idx_generation": 330,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is an arithmetic progression.\n\n    Example:\n    nums = [1, 3, 5, 7, 9]\n\n    The list is an arithmetic progression, so the function should return True.\n    \"\"\"\n    diff = nums[1] - nums[0]\n    for i in range(2, len(nums)):\n        if nums[i] - nums[i-1] != diff:\n            return False\n    return True\n\ndef g():\n    return [1, 3, 5, 7, 9]\n\nassert f(g())\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the array is a palindrome.\"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(num_list: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list such that their product is equal to the target number.\n    Returns True if such a pair exists, False otherwise.\n    \"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] * num_list[j] == target:\n                return True\n    return False\n\ndef g(num_list=[2, 4, 6, 8, 10], target=48):\n    return num_list, target\n\nassert f(*g()) == True\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the list that add up to the target number.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target: int):\n    return [3, 5, 9, 2, 8, 4]\n\nassert f(g(12), 12)\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a given list contains a pair of elements that add up to 10.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == 10:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7]\n\nassert f(g())\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sum up to the target.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[2, 7, 11, 15], target=9):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: List[str]) -> bool:\n    \"\"\"Check if there exists a string in the list that contains exactly two 'a's and ends with 'c'.\"\"\"\n    return any(x.count('a') == 2 and x.endswith('c') for x in s)\n\ndef g():\n    \"\"\"\n    Generate a list of 1000 random strings of length between 3 and 10 (inclusive),\n    consisting of lowercase letters.\n    \"\"\"\n    import random\n    import string\n\n    return [''.join(random.choices(string.ascii_lowercase, k=random.randint(3, 10))) for _ in range(1000)]\n\nassert f(g())\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Check if there are two numbers in the given list that add up to the target value.\n\n    Example:\n    nums = [2, 4, 6, 8]\n    target = 10\n\n    The numbers 2 and 8 add up to the target value 10, so the function should return True.\n\n    Hint: You can use nested loops to compare each pair of numbers.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums = [2, 4, 6, 8]):\n    return nums\n\nassert f(g(), 12)\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, numbers=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the sum of all numbers in the list is divisible by n.\"\"\"\n    return sum(numbers) % n == 0\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return sum(numbers)\nassert f(g())\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a mountain sequence.\n\n    A mountain sequence is a list of integers that increases up to a peak and then decreases.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    if len(arr) < 3:\n        return False\n    i = 0\n    while i < len(arr)-1 and arr[i] < arr[i+1]:\n        i += 1\n    if i == 0 or i == len(arr)-1:\n        return False\n    while i < len(arr)-1 and arr[i] > arr[i+1]:\n        i += 1\n    return i == len(arr)-1\n\ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if all the elements in the given list are positive.\"\"\"\n    return all(x > 0 for x in arr)\n\ndef g(arr = [1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a geometric progression.\n\n    Example:\n    nums = [2, 4, 8, 16, 32]\n\n    The list is a geometric progression, so the function should return True.\n    \"\"\"\n    ratio = nums[1] / nums[0]\n    for i in range(2, len(nums)):\n        if nums[i] / nums[i-1] != ratio:\n            return False\n    return True\n\ndef g():\n    return [2, 4, 8, 16, 32]\n\nassert f(g())\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return lst == lst[::-1]\n\ndef g(lst=[1, 2, 3, 2, 1]):\n    return lst\n\nassert f(g()) == True\n\n",
        "idx_generation": 425,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list that adds up to the target.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 9)\n\nassert f(*g())\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target number, determine if any two numbers in the list add up to the target number.\n\n    Sample Input:\n    `[1, 2, 3, 4, 5]`, `7`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return any(num1 + num2 == target for i, num1 in enumerate(numbers) for num2 in numbers[i+1:])\n\ndef g():\n    return [1, 2, 3, 4, 5], 7\n\nassert f(*g())\n\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exist three numbers in the list nums whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers and a target number, check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return [nums, target]\n\nassert f(*g())\n",
        "idx_generation": 150,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the list such that the sum of any two elements is equal to a given target.\n    Returns True if such a subsequence exists, False otherwise.\n    \"\"\"\n    n = len(nums)\n    target = 10\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n\n    return False\n\ndef g(nums=[1, 3, 6, 9, 12]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose difference is equal to the target.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = num - target\n        if complement in num_set:\n            return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if all the numbers in the given list are prime numbers.\"\"\"\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return all(is_prime(num) for num in numbers)\n\ndef g(numbers: List[int] = [2, 3, 5, 7, 11, 13]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n = 2) -> bool:\n    \"\"\"Check if there exists a sublist of a specified length, such that the product of its elements is divisible by n.\"\"\"\n    for i in range(len(arr) - n + 1):\n        sublist_product = 1\n        for j in range(i, i+n):\n            sublist_product *= arr[j]\n        if sublist_product % n == 0:\n            return True\n    return False\n\ndef g(n = 3):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n    \nassert f(g())\n",
        "idx_generation": 210,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to n.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False\ndef g(lst = [1, 2, 3, 4, 5], n = 7):\n    return n, lst\nassert f(*g())\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square.\n    A magic square is a square matrix in which the sums of each row, each column, and both main diagonals are the same.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    for col in range(n):\n        col_sum = sum(matrix[i][col] for i in range(n))\n        if col_sum != target_sum:\n            return False\n    \n    diagonal_sum = sum(matrix[i][i] for i in range(n))\n    if diagonal_sum != target_sum:\n        return False\n    \n    reverse_diagonal_sum = sum(matrix[i][n-i-1] for i in range(n))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    \n    return True\n\ndef g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 248,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n\n    A palindrome is a sequence of numbers that reads the same forward and backward.\n\n    Example:\n    nums1 = [1, 2, 3, 2, 1]\n    Output: True\n\n    nums2 = [1, 2, 3, 4, 5]\n    Output: False\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if the given target number is present in the matrix.\n    Returns True if the target is found, False otherwise.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5):\n    return matrix, target\n\nassert f(*g()) == True\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"Find two numbers in the list nums that add up to the target and return their indices.\"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n    return []\n\ndef g(nums=[2, 7, 11, 15], target=9):\n    return nums, target\n\nassert f(*g()) == [0, 1]\n\n",
        "idx_generation": 306,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"Find the sum of all even numbers in the list\"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g(nums: List[int]):\n    return nums\n\n# Test case\ntest_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g(test_nums)) == 30\n\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a subarray in the given list whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n",
        "idx_generation": 151,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose difference is greater than or equal to the target.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = num - target\n        if complement in num_set:\n            return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the sum of all even numbers in the list.\n    \"\"\"\n    return sum([num for num in numbers if num % 2 == 0])\n\ndef g(numbers: List[int]):\n    return numbers\n\n# Test case\ntest_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g(test_numbers)) == 30\n\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine if it is a diagonal matrix.\n    Return True if the matrix is diagonal, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\n# Test case\ntest_matrix = [[1, 0, 0], [0, 5, 0], [0, 0, 9]]\nassert f(g(test_matrix))\n\n",
        "idx_generation": 215,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of numbers, return a new list with only the positive elements.\n\n    Sample Input:\n    nums = [-1, 2, -3, 4, -5]\n\n    Sample Output:\n    [2, 4]\n    \"\"\"\n    return [num for num in nums if num > 0]\n\ndef g(nums=[-1, 2, -3, 4, -5]):\n    return nums\n\nassert f(g()) == [2, 4]\n\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square.\n    A magic square is a square matrix in which the sums of each row, each column, and both main diagonals are the same.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    for col in range(n):\n        col_sum = sum(matrix[i][col] for i in range(n))\n        if col_sum != target_sum:\n            return False\n    \n    diagonal_sum = sum(matrix[i][i] for i in range(n))\n    if diagonal_sum != target_sum:\n        return False\n    \n    reverse_diagonal_sum = sum(matrix[i][n-i-1] for i in range(n))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    \n    return True\n\ndef g(matrix=[[2, 9, 4], [7, 5, 3], [6, 1, 8]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 248,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers `nums`, check if it is a palindrome.\n    A palindrome is a list that reads the same forwards and backwards.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 439,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, return True if there exists a pair of numbers in the list whose product is equal to the target value.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target % num == 0 and (target // num) in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], target=10):\n    return arr, target\n\nassert f(*g())\n",
        "idx_generation": 261,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a pair of numbers in the list whose sum is equal to the target.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 8\n    The sum of two numbers in the list (3+5) is equal to the target (8).\n    Therefore, the puzzle is solved.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 8)\n\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order\"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g(nums: List[int]):\n    return nums\n\n# Test case\ntest_nums = [1, 2, 3, 4, 5]\nassert f(g(test_nums)) == True\n\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Check if there is a pair of numbers in the given list that adds up to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(target: int = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 153,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subarray in arr that sums up to target\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            if sum(arr[i:j+1]) == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\nassert f(g())\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is sorted in non-decreasing order.\n    \"\"\"\n    return nums == sorted(nums)\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    \"\"\"\n    This solution returns the list of numbers.\n    \"\"\"\n    return nums\n\nassert f(g())\n",
        "idx_generation": 368,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if a given list of numbers is a Fibonacci sequence or not.\n    A list is a Fibonacci sequence if each element is the sum of the two preceding ones.\n    \"\"\"\n    def is_fibonacci(seq):\n        if len(seq) < 3:\n            return False\n        for i in range(2, len(seq)):\n            if seq[i] != seq[i-1] + seq[i-2]:\n                return False\n        return True\n    \n    return is_fibonacci(arr)\n\ndef g():\n    return [0, 1, 1, 2, 3, 5, 8, 13]\n\nassert f(g())\n",
        "idx_generation": 215,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, find the sum of all the elements.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    15\n    \"\"\"\n    return sum(nums)\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 15\n\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if all the elements in a list are unique.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(nums) == len(set(nums))\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers `nums`, check if it is a palindrome.\n    A palindrome is a list that reads the same forwards and backwards.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [5, 10, 15, 10, 5]\n\nassert f(g())\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int, num_elements: int) -> bool:\n    \"\"\"\n    Check if there exists a combination of 'num_elements' numbers in the list 'arr' whose product is equal to the 'target'.\n    \"\"\"\n    if num_elements > len(arr):\n        return False\n    if num_elements == 1:\n        return target in arr\n    for i in range(len(arr)):\n        if f(arr[i+1:], target//arr[i], num_elements-1):\n            return True\n    return False\n\ndef g(target=24, num_elements=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(), target=24, num_elements=3)\n",
        "idx_generation": 265,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target number, check if there are two numbers in the list that add up to the target number.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n    Output: True\n\n    nums = [1, 2, 3, 4, 5]\n    target = 10\n    Output: False\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums\n\nassert f(g(), target=9) == True\n",
        "idx_generation": 311,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains any duplicate elements.\n    Return True if there are duplicates, False otherwise.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g(nums: List[int]):\n    return nums\n\n# Test case\ntest_nums = [1, 2, 3, 4, 5]\nassert f(g(test_nums)) == False\n\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum: int = 10) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the array whose sum is equal to the target_sum.\n    Return True if such pair exists, and False otherwise.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum: int = 10):\n    arr = [1, 2, 3, 4, 5, 6]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 156,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=2021) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array that sums up to a given target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\n\ndef g(arr = [1999, 23, 534, 1500, 521, 921, 600]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(numbers: List[int]) -> bool:\n    \"\"\" Check if the given list of numbers contains any duplicates. \"\"\"\n    return len(numbers) != len(set(numbers))\n\ndef g(numbers=[1, 2, 3, 4, 5, 5, 6, 7]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list such that the sum of its elements is a power of 2.\n    Return True if such a subarray exists, False otherwise.\n    \"\"\"\n    def is_power_of_two(n):\n        return n != 0 and (n & (n - 1)) == 0\n    \n    prefix_sum = [0] * (len(arr) + 1)\n    for i in range(len(arr)):\n        prefix_sum[i+1] = prefix_sum[i] + arr[i]\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if is_power_of_two(prefix_sum[j] - prefix_sum[i]):\n                return True\n    \n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],)\n\nassert f(*g())\n",
        "idx_generation": 217,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> List[int]:\n    \"\"\"Return a list of numbers that are less than n\"\"\"\n    return [num for num in lst if num < n]\n\ndef g():\n    return 5, [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(*g()) == [1, 2, 3, 4]\n\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subsequence of the list that is a palindrome.\n    Return True if a subsequence exists, False otherwise.\n    \"\"\"\n    def dfs(nums, path):\n        if path == path[::-1]:\n            return True\n        if not nums:\n            return False\n        return dfs(nums[1:], path + [nums[0]]) or dfs(nums[1:], path)\n\n    return dfs(nums, [])\n\ndef g(nums=[1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    A palindrome list is a list that reads the same forwards and backwards.\n    \"\"\"\n    return numbers == numbers[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"\n    Check if there exists a triplet of numbers in the list whose product is equal to the target.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            for k in range(j+1, len(lst)):\n                if lst[i] * lst[j] * lst[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a subset of numbers in the list whose sum is equal to the target.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n    The sum of the subset [2, 3, 4] is equal to the target (9).\n    Therefore, the puzzle is solved.\n    \"\"\"\n    def subset_sum(nums: List[int], target: int) -> bool:\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        include = subset_sum(nums[1:], target - nums[0])\n        exclude = subset_sum(nums[1:], target)\n        return include or exclude\n\n    return subset_sum(nums, target)\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g(), 9)\n\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=5) -> bool:\n    \"\"\"\n    Check if the sum of all even integers in the given list is divisible by n.\n    Returns True if it is divisible, False otherwise.\n    \"\"\"\n    even_sum = sum([num for num in nums if num % 2 == 0])\n    return even_sum % n == 0\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in a list whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    return [5, 10, 15, 25, 30]\n\nassert f(g())\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list that sum up to the target value.\n\n    Example:\n    nums = [1, 2, 3, 4]\n    target = 5\n    The pair of numbers [1, 4] sum up to the target value, so the function should return True.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=5):\n    return [1, 2, 3, 4]\n\nassert f(g(), target=5) == True\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the given list that sum up to the target.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums)))\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 5, 6, 7, 8]\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Check if the list is a sorted list in non-decreasing order.\"\"\"\n    return all(li[i] <= li[i+1] for i in range(len(li)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 219,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], n: int) -> bool:\n    \"\"\"\n    Given a list of integers and a number n, determine if there are two numbers in the list\n    that add up to n.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 9\n\nassert f(*g())\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the sum of all even numbers in the list.\n    \n    Sample Input:\n    nums = [1, 2, 3, 4, 5, 6]\n    \n    Sample Output:\n    12\n    \"\"\"\n    return sum([num for num in nums if num % 2 == 0])\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums\n\nassert f(g()) == 12\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if a given list is a palindrome.\n    \"\"\"\n    return lst == lst[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that multiply to the target value.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] == target:\n                return True\n    return False\ndef g(target = 12):\n    return [3, 4, 6, 2, 9]\nassert f(g(), 12)\n\n",
        "idx_generation": 275,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the given list that add up to the target number.\n\n    Example:\n    nums = [2, 4, 6, 8, 10]\n    target = 12\n    Output: True\n\n    nums = [1, 3, 5, 7, 9]\n    target = 12\n    Output: False\n    \"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        complements.add(target - num)\n    return False\n\ndef g(nums=[2, 4, 6, 8, 10], target=12):\n    return nums, target\n\nassert f(*g()) == True\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Check if there exist two distinct numbers in the list that add up to the target integer.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if nums[i] + nums[j] == target and i != j:\n                return True\n    return False\n\ndef g(nums=[-1, 0, 1, 2, -1, -4]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find two numbers from the list that add up to the target.\n\n    Sample Input:\n    nums = [2, 7, 11, 15]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    nums = [2, 7, 11, 15]\n    target = 9\n    return nums, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist four numbers in the given list that sum up to the target value.\n\n    Sample Input:\n    nums = [2, 4, 1, 5, 6, 3]\n    target = 14\n\n    Sample Output:\n    True\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n-3):\n        for j in range(i+1, n-2):\n            left = j + 1\n            right = n - 1\n            while left < right:\n                current_sum = nums[i] + nums[j] + nums[left] + nums[right]\n                if current_sum == target:\n                    return True\n                elif current_sum < target:\n                    left += 1\n                else:\n                    right -= 1\n    return False\n\ndef g(nums=[2, 4, 1, 5, 6, 3], target=14):\n    return (nums, target)\n\nassert f(*g())\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the list of numbers is sorted in ascending order.\"\"\"\n    return numbers == sorted(numbers)\n\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the elements in the given list are in increasing order\"\"\"\n    return all(arr[i] < arr[i+1] for i in range(len(arr)-1))\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 220,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], n: int) -> bool:\n    \"\"\"\n    Given a list of integers and a number n, determine if there are three numbers in the list\n    that add up to n.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            for k in range(j + 1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == n:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 12\n\nassert f(*g())\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, every column, and both diagonals is the same.\n\n    Sample Input:\n    matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n\n    for i in range(n):\n        row_sum = sum(matrix[i])\n        if row_sum != target_sum:\n            return False\n\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n\n    diagonal_sum = sum(matrix[i][i] for i in range(n))\n    if diagonal_sum != target_sum:\n        return False\n\n    reverse_diagonal_sum = sum(matrix[i][n - 1 - i] for i in range(n))\n    if reverse_diagonal_sum != target_sum:\n        return False\n\n    return True\n\ndef g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 275,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers is a palindrome.\n    A palindrome is a list that reads the same forwards and backwards.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if the target number is present in the given matrix\"\"\"\n    return any(target in row for row in matrix)\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5):\n    return matrix, target\nassert f(*g())\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list that adds up to the target.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(nums=[2, 4, 6, 8, 10], target=12):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[List[int]]:\n    \"\"\"Find all unique triplets in the array that give the sum of zero.\"\"\"\n    nums.sort()\n    result = []\n    for i in range(len(nums) - 2):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        left = i + 1\n        right = len(nums) - 1\n        while left < right:\n            total = nums[i] + nums[left] + nums[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                result.append([nums[i], nums[left], nums[right]])\n                while left < right and nums[left] == nums[left+1]:\n                    left += 1\n                while left < right and nums[right] == nums[right-1]:\n                    right -= 1\n                left += 1\n                right -= 1\n    return result\n\ndef g():\n    return [-1, 0, 1, 2, -1, -4]\n\nassert f(g()) == [[-1, -1, 2], [-1, 0, 1]]\n\n",
        "idx_generation": 306,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n    Given a list of integers and a target integer k, find all pairs of distinct indices i and j in the list\n    such that arr[i] + arr[j] = k and return them as a list of pairs.\n    \n    Sample Input:\n    arr = [2, 4, 6, 8, 10]\n    k = 14\n    \n    Sample Output:\n    [[4, 10], [6, 8]]\n    \"\"\"\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == k:\n                pairs.append([arr[i], arr[j]])\n    return pairs\n\ndef g():\n    return [2, 4, 6, 8, 10], 14\n\nassert f(*g()) == [[4, 10], [6, 8]]\n",
        "idx_generation": 162,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list that adds up to the target value.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], target=7):\n    return arr, target\n\nassert f(*g())\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the list such that the sum of its elements is equal to a given target.\n    Returns True if such a subsequence exists, False otherwise.\n    \"\"\"\n    n = len(nums)\n    prefix_sum = set()\n    curr_sum = 0\n    target = 10\n\n    for i in range(n):\n        curr_sum += nums[i]\n\n        if curr_sum == target:\n            return True\n\n        if curr_sum in prefix_sum:\n            return True\n\n        prefix_sum.add(curr_sum)\n\n    return False\n\ndef g(nums=[1, 2, 3, 4]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a Fibonacci sequence.\"\"\"\n    def is_perfect_square(n: int) -> bool:\n        return int(n**0.5)**2 == n\n    \n    def is_fibonacci(num: int) -> bool:\n        return is_perfect_square(5 * num**2 + 4) or is_perfect_square(5 * num**2 - 4)\n    \n    return all(is_fibonacci(nums[i]) for i in range(2, len(nums)))\n\ndef g():\n    return [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n\nassert f(g())\n",
        "idx_generation": 221,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=10) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to a given number\"\"\"\n    return x + a == 20\ndef g(a = 10):\n    return 20 - a\nassert f(g())\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a 2D list has a magic square.\n    A magic square is a square grid of numbers, where the sum of each row, each column, and both diagonals are the same.\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n\n    # Check rows\n    for row in arr:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for col in range(n):\n        if sum(row[col] for row in arr) != target_sum:\n            return False\n\n    # Check diagonal 1\n    if sum(arr[i][i] for i in range(n)) != target_sum:\n        return False\n\n    # Check diagonal 2\n    if sum(arr[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n\n    return True\n\ndef g():\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k: int) -> List[int]:\n    \"\"\"\n    Find the indices of the two numbers in the given list whose sum is equal to k.\n    \"\"\"\n    n = len(arr)\n    num_dict = {}\n\n    for i in range(n):\n        complement = k - arr[i]\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[arr[i]] = i\n\n    return []\n\ndef g(arr=[2, 7, 11, 15], k=9):\n    return arr, k\n\nassert f(*g()) == [0, 1]\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list that multiplies to the target.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        complement = target / num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 8)\n\nassert f(*g())\n",
        "idx_generation": 277,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target number, determine if any two numbers in the list add up to the target number.\n\n    Sample Input:\n    `[1, 2, 3, 4, 5]`, `7`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return any(target - num in numbers for num in numbers)\n\ndef g():\n    return [1, 2, 3, 4, 5], 7\n\nassert f(*g())\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if all the elements in the list are even numbers.\n    \"\"\"\n    return all(num % 2 == 0 for num in nums)\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, find the pair of numbers whose sum is equal to the target.\n    Return True if such a pair is found, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr=[2, 4, 6, 8, 10], target=12):\n    return arr, target\n\nassert f(*g())\n\n",
        "idx_generation": 167,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that adds up to the target value.\n    \"\"\"\n    seen = set()\n    for num in numbers:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7], target=10):\n    return numbers, target\n\nassert f(*g())\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum element in the given list.\n\n    Sample Input:\n    nums = [4, 2, 8, 4, 6, 2, 8, 10]\n\n    Sample Output:\n    10\n    \"\"\"\n    return max(nums)\n\ndef g():\n    return [4, 2, 8, 4, 6, 2, 8, 10]\n\nassert f(g()) == 10\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is symmetric.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n\n    The matrix is symmetric, so the function should return True.\n\n    Hint: You can use the `zip()` function to transpose a matrix.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(x: List[int]) -> int:\n    \"\"\"\n    Find the sum of all elements in the given list and return the sum.\n\n    Example:\n    x = [1, 2, 3, 4, 5]\n\n    The sum of all elements is 15.\n    \"\"\"\n    return sum(x)\n\ndef g(x: List[int]):\n    return x\n\n# Test case\ntest_list = [1, 2, 3, 4, 5]\nassert f(g(test_list)) == 15\n\n",
        "idx_generation": 412,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int = 2) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list such that their difference is divisible by k.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 3\n    Output: True (The pair [2, 5] has a difference of 3, which is divisible by 3)\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) % k == 0:\n                return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], k: int = 2):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n    Return True if it is a palindrome, False otherwise.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=[], n=0) -> bool:\n    \"\"\"Find a list that when multiplied n times gives the target list\"\"\"\n    return li * n == target\ndef g(target = [], n = 0):\n    if n == 0:\n        return []\n    return target[:len(target) // n]\nassert f(g())\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the given target number exists in the list.\n    Return True if the target number is found, False otherwise.\n    \"\"\"\n    return target in nums\n\ndef g(nums=[1, 2, 3, 4, 5], target=3):\n    return nums\n\nassert f(g(), 3)\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there are three consecutive numbers in the list.\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums) - 2):\n        if nums[i] + 1 == nums[i+1] and nums[i+1] + 1 == nums[i+2]:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 5, 6, 7, 9, 10, 11]\n\nassert f(g())\n",
        "idx_generation": 330,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Find two numbers in the given list that sum up to the target.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[2, 5, 7, 3, 1]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 170,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a triplet of elements in the array that sums up to the target.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)-2):\n        for j in range(i+1, len(arr)-1):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 9\n\nassert f(*g())\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers is sorted in non-decreasing order.\n    \"\"\"\n    return nums == sorted(nums)\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is a symmetric matrix.\n    Return True if the matrix is symmetric, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(s: List[str], n: int) -> bool:\n    \"\"\"\n    Check if there exists a string in the list whose length is greater than n.\n    \"\"\"\n    return any(len(x) > n for x in s)\n\ndef g(n=5):\n    return [\"apple\", \"banana\", \"cherry\", \"pear\", \"grape\"]\n\nassert f(g(), 4)\n",
        "idx_generation": 428,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains both even and odd numbers.\n\n    Returns True if the list contains at least one even number and one odd number,\n    False otherwise.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    even = False\n    odd = False\n    for num in numbers:\n        if num % 2 == 0:\n            even = True\n        else:\n            odd = True\n    return even and odd\n\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 285,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int]) -> bool:\n    \"\"\"Check if the given list of integers is a palindrome.\"\"\"\n    return x == x[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that add up to the target.\"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 7)\n\nassert f(*g())\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the index of the target number in the given list. If the target number is not present, return -1.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 3\n    output: 2\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    target = 3\n    return nums, target\n\nassert f(*g()) == 2\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there exists a triplet in the list whose sum is equal to the target number.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 331,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find two numbers from the list that add up to the target.\n\n    Sample Input:\n    nums = [2, 7, 11, 15]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    nums = [2, 7, 11, 15]\n    target = 9\n    return nums, target\n\nassert f(*g())\n\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[int], target: int, n: int) -> bool:\n    \"\"\"Check if there exists a subsequence of length 'n' in the list 'lst' that sums up to the target.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(lst, n))\n\ndef g(target = 10, n = 3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target, n\n\nassert f(*g())\n",
        "idx_generation": 391,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists two numbers in the list that multiply to the target.\n\n    Sample Input:\n    nums = [2, 4, 6, 8]\n    target = 16\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(num1 * num2 == target for num1 in nums for num2 in nums)\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(*g([2, 4, 6, 8], 16))\n\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is sorted in non-decreasing order.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"\n    Check if there exists a pair of words in the list that have the same length as the target length.\n    \"\"\"\n    for i in range(len(words)):\n        for j in range(i+1, len(words)):\n            if len(words[i]) == len(words[j]) == target_length:\n                return True\n    return False\n\ndef g(target_length=5):\n    return [\"hello\", \"world\", \"python\", \"programming\", \"puzzles\"]\nassert f(g())\n\n",
        "idx_generation": 434,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subsequence of the list that contains only prime numbers.\n    Return True if a subsequence exists, False otherwise.\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def dfs(nums, path):\n        if all(is_prime(num) for num in path):\n            return True\n        if not nums:\n            return False\n        return dfs(nums[1:], path + [nums[0]]) or dfs(nums[1:], path)\n\n    return dfs(nums, [])\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 286,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if a list of integers is a palindrome.\n\n    Returns True if the list is a palindrome, False otherwise.\n\n    Example:\n    nums = [1, 2, 3, 2, 1]\n\n    The list is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums=[1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Find if the target number exists in the given matrix.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n\n    Sample Output:\n    True\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n    return matrix, target\n\nassert f(*g()) == True\n",
        "idx_generation": 294,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the target number is present in the list of integers.\n    Returns True if the target is found, False otherwise.\n    \"\"\"\n    return target in nums\n\ndef g(nums=[1, 2, 3, 4, 5], target=3):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there are three numbers in the list that sum up to the target value.\n    \"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target) for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(ans: List[List[int]], target=2) -> bool:\n    \"\"\"\n    Find a list of pairs of integers where the number of pairs in which the second number is more than\n    two greater than the first number is a given constant\n    \"\"\"\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0\ndef g(target = 2):\n    if target == 0:\n        return []\n    return [[i, i+2] for i in range(target)]\nassert f(g())\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers, check if there exists a pair of numbers that sums up to the target.\n    \"\"\"\n    seen = set()\n    for num in numbers:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(numbers = [1, 3, 5, 7, 9], target = 10):\n    return numbers, target\n\nassert f(*g())\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n: int) -> int:\n    \"\"\"\n    Find the sum of the first n even numbers in the list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    n = 3\n    The first 3 even numbers are 2, 4, and 6.\n    The sum of these numbers is 12.\n    Therefore, the puzzle is solved.\n    \"\"\"\n    even_nums = [num for num in nums if num % 2 == 0]\n    return sum(even_nums[:n])\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3\n\nassert f(*g()) == 12\n\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"\n    Check if there exists a pair of words in the list that have a combined length that is a multiple of the target length.\n    \"\"\"\n    for i in range(len(words)):\n        for j in range(i+1, len(words)):\n            if (len(words[i]) + len(words[j])) % target_length == 0:\n                return True\n    return False\n\ndef g(target_length=5):\n    return [\"hello\", \"world\", \"python\", \"programming\", \"puzzles\"]\nassert f(g())\n\n",
        "idx_generation": 434,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n\n    A palindrome is a sequence that reads the same backwards as forwards.\n\n    Example:\n    nums = [1, 2, 3, 2, 1]\n    Output: True\n\n    nums = [1, 2, 3, 4, 5]\n    Output: False\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n",
        "idx_generation": 290,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[str], target: str) -> bool:\n    \"\"\"Check if any two strings in the given list concatenate to form the target string\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g():\n    return [\"hello\", \"world\", \"python\", \"coding\", \"puzzle\"]\n\nassert f(g(), \"helloworld\")\n\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, find two numbers in the list that add up to the target and return their indices.\n\n    Example:\n    nums = [2, 7, 11, 15]\n    target = 9\n\n    Output:\n    [0, 1]\n\n    Explanation:\n    The numbers at indices 0 and 1 (2 and 7) add up to the target number 9.\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n\ndef g(nums=[2, 7, 11, 15], target=9):\n    return nums, target\n\nassert f(*g()) == [0, 1]\n\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the target integer is present in the list of integers.\n    \"\"\"\n    return target in nums\n\ndef g(nums=[1, 2, 3, 4, 5], target=3):\n    \"\"\"Return the list of integers and the target integer.\"\"\"\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int, max_len: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list that sums up to the target and has a maximum length of max_len.\n    Return True if such a subarray exists, False otherwise.\n    \"\"\"\n    prefix_sum = {0: -1}\n    curr_sum = 0\n    for i, num in enumerate(nums):\n        curr_sum += num\n        if curr_sum - target in prefix_sum and i - prefix_sum[curr_sum - target] <= max_len:\n            return True\n        if curr_sum not in prefix_sum:\n            prefix_sum[curr_sum] = i\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 9, 2)\n\nassert f(*g())\n\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, check if any two integers in the list sum up to the target value.\n    \n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 7\n    \n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 7\n\nassert f(*g()) == True\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"Check if a given number is greater than all the numbers in a list.\"\"\"\n    return all(num < n for num in nums)\n\ndef g(nums = [2, 4, 6, 8, 10]):\n    return 12\n\nassert f(g(), nums=[2, 4, 6, 8, 10])\n\n",
        "idx_generation": 384,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Check if a list is sorted in non-decreasing order\"\"\"\n    return all(li[i] <= li[i+1] for i in range(len(li)-1))\ndef g(li: List[int]):\n    return li\nassert f(g([1, 3, 5, 7, 9]))\n",
        "idx_generation": 231,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(m: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric\"\"\"\n    rows = len(m)\n    cols = len(m[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, rows):\n            if m[i][j] != m[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 437,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square.\n\n    A magic square is a square matrix in which the sums of each row, each column, and both main diagonals are the same.\n\n    Example:\n    matrix = [\n        [2, 7, 6],\n        [9, 5, 1],\n        [4, 3, 8]\n    ]\n\n    The matrix is a magic square, so the function should return True.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        column_sum = 0\n        for i in range(n):\n            column_sum += matrix[i][j]\n        if column_sum != target_sum:\n            return False\n\n    # Check main diagonal\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n    if diagonal_sum != target_sum:\n        return False\n\n    # Check secondary diagonal\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][n - i - 1]\n    if diagonal_sum != target_sum:\n        return False\n\n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if any three numbers in the given list add up to the target number\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(), 15)\n\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to the target.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Remove all duplicates from the list while preserving the order of the remaining elements.\n    \"\"\"\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result\n\ndef g():\n    return [1, 2, 2, 3, 4, 4, 5]\n\nassert f(g()) == [1, 2, 3, 4, 5]\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Find a pair of numbers in the list that sums up to the target value.\n    - nums is a list of integers\n    - target is the desired sum value\n    \"\"\"\n\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if all elements in the matrix are equal to the target.\"\"\"\n    for row in matrix:\n        for element in row:\n            if element != target:\n                return False\n    return True\n\ndef g(target=0):\n    return [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n\nassert f(g())\n",
        "idx_generation": 125,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the list is sorted in non-decreasing order.\n\n    Sample Input:\n    `[1, 2, 3, 3, 5]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return nums == sorted(nums)\n\ndef g(nums=[1, 2, 3, 3, 5]):\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given array is a mountain array.\n    A mountain array is an array that increases until a peak element and then decreases.\n    \"\"\"\n    n = len(arr)\n    if n < 3:\n        return False\n    \n    peak = max(arr)\n    peak_index = arr.index(peak)\n    \n    if peak_index == 0 or peak_index == n - 1:\n        return False\n    \n    for i in range(1, peak_index):\n        if arr[i] <= arr[i-1]:\n            return False\n    \n    for i in range(peak_index, n - 1):\n        if arr[i] <= arr[i+1]:\n            return False\n    \n    return True\n\ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g())\n\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all the numbers in the list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    15\n    \"\"\"\n    return sum(nums)\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 15\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square.\n    A magic square is a square matrix in which the sums of each row, each column, and both diagonals are the same.\n    Return True if it is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n\n    # Check diagonal 1\n    diag1_sum = 0\n    for i in range(n):\n        diag1_sum += matrix[i][i]\n    if diag1_sum != target_sum:\n        return False\n\n    # Check diagonal 2\n    diag2_sum = 0\n    for i in range(n):\n        diag2_sum += matrix[i][n - i - 1]\n    if diag2_sum != target_sum:\n        return False\n\n    return True\n\ndef g(matrix: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 294,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target number, determine if the target number is a multiple of any number in the list.\n\n    Sample Input:\n    `[2, 4, 6, 8, 10]`, `20`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return any(target % num == 0 for num in numbers)\n\ndef g():\n    return [2, 4, 6, 8, 10], 20\n\nassert f(*g())\n\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the list that add up to the target number.\n    Return True if such pair exists, and False otherwise.\n    \"\"\"\n    num_set = set(numbers)\n    for num in numbers:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(numbers = [1, 2, 3, 4, 5], target = 7):\n    return numbers\n\nassert f(g(), 7)\n\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subsequence of the list that contains only odd numbers.\n    Return True if a subsequence exists, False otherwise.\n    \"\"\"\n    def is_odd(n):\n        return n % 2 != 0\n\n    def dfs(nums, path):\n        if all(is_odd(num) for num in path):\n            return True\n        if not nums:\n            return False\n        return dfs(nums[1:], path + [nums[0]]) or dfs(nums[1:], path)\n\n    return dfs(nums, [])\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    return any(target - num in arr for num in arr)\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n\n",
        "idx_generation": 185,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], t=50, n=5) -> bool:\n    \"\"\"Determine if the product of the odd elements in the list is less than the target\"\"\"\n    assert all([v > 0 for v in x])\n    p = 1\n    i = 0\n    for v in sorted(x):\n        if v % 2 != 0:\n            p *= v\n        if i == n:\n            return p < t\n        i += 1\n    return p < t\ndef g(t = 50, n = 5):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20] + [t]\nassert f(g())\n\n",
        "idx_generation": 127,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the list is sorted in non-decreasing order.\n    \"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if a list of integers is a palindrome list.\n    A palindrome list is a list that remains the same when reversed.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, arr: list) -> bool:\n    \"\"\"Check if a number n exists in the given list\"\"\"\n    return n in arr\n\ndef g(arr=[1, 3, 5, 7, 9]):\n    n = random.choice(arr)\n    return n, arr\n\nassert f(*g())\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if there exists a row or column that contains all positive numbers.\n    Return True if such a row or column exists, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    row_positive = [0] * rows\n    col_positive = [0] * cols\n\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] > 0:\n                row_positive[i] = 1\n                col_positive[j] = 1\n\n    return any(row_positive) or any(col_positive)\n\ndef g(matrix=[[1, -2, 3], [0, -5, 6], [7, 8, 0]]):\n    return matrix\n\nassert f(g())\n\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=10) -> bool:\n    \"\"\"Check if the sum of the list elements is equal to the target value\"\"\"\n    return sum(li) == target\n\ndef g(target=10):\n    return [1, 2, 3, 4]\n\nassert f(g())\n",
        "idx_generation": 309,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if the target value exists in the matrix.\n    Return True if it exists, False otherwise.\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    row = 0\n    col = n - 1\n    while row < m and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] > target:\n            col -= 1\n        else:\n            row += 1\n    return False\n\ndef g(target=5):\n    \"\"\"\n    Generate a matrix of numbers.\n    \"\"\"\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g(), target=5) == True\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"Count the number of even elements in the list.\"\"\"\n    count = 0\n    for num in nums:\n        if num % 2 == 0:\n            count += 1\n    return count\n\ndef g(nums=[1, 2, 3, 4, 5, 6]):\n    return nums\n\nassert f(g()) == 3\n\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), 13)\n",
        "idx_generation": 187,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Check if there are three elements in the list whose sum is equal to the target value.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g(target: int = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is sorted in non-decreasing order.\n\n    Sample Input:\n    `nums = [1, 2, 3, 4, 5]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return nums == sorted(nums)\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([1, 2, 3, 4, 5]))\n\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is symmetric.\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g())\n\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(x: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    \"\"\"\n    n = len(x)\n    for i in range(n):\n        for j in range(n):\n            if x[i][j] != x[j][i]:\n                return False\n    return True\n\ndef g(x=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    \"\"\"\n    This solution checks if each element in the matrix matches the criteria for a symmetric matrix.\n    \"\"\"\n    return x\n\nassert f(g())\n\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if there exists a row or column that contains all prime numbers.\n    Return True if such a row or column exists, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    row_prime = [0] * rows\n    col_prime = [0] * cols\n\n    for i in range(rows):\n        for j in range(cols):\n            if is_prime(matrix[i][j]):\n                row_prime[i] = 1\n                col_prime[j] = 1\n\n    return any(row_prime) or any(col_prime)\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nassert f(g())\n\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[str], target: str) -> bool:\n    \"\"\"Check if the target string is present at the start of any of the strings in the given list\"\"\"\n    for string in arr:\n        if string.startswith(target):\n            return True\n    return False\n\ndef g():\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n\nassert f(g(), \"ban\")\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if the difference between any two numbers in the list is equal to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if abs(arr[i] - arr[j]) == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), target=1)\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, find the sum of all the odd elements in the list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    9\n    \"\"\"\n    odd_sum = 0\n    for num in nums:\n        if num % 2 != 0:\n            odd_sum += num\n    return odd_sum\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 9\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of numbers and a target value, check if there exists a pair of numbers in the list whose sum is equal to the target value.\n    Return True if such a pair exists, and False otherwise.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    \"\"\"\n    Return the list of numbers and the target value.\n    \"\"\"\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists three numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=20):\n    nums = [2, 5, 8, 10, 12, 15]\n    return nums\nassert f(g())\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains only unique elements.\n\n    Sample Input:\n    `nums = [1, 2, 3, 4, 5]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return len(nums) == len(set(nums))\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([1, 2, 3, 4, 5]))\n\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if all numbers in the list are even.\n\n    Sample input:\n    [2, 4, 6, 8, 10]\n\n    Sample output:\n    True\n\n    Explanation:\n    All numbers in the list are even.\n    \"\"\"\n    for num in nums:\n        if num % 2 != 0:\n            return False\n    return True\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 240,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(x: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a square matrix.\n    \"\"\"\n    rows = len(x)\n    for row in x:\n        if len(row) != rows:\n            return False\n    return True\n\ndef g(x=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    \"\"\"\n    This solution checks if the number of rows and columns in the matrix are equal.\n    \"\"\"\n    return x\n\nassert f(g())\n\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of the even numbers in the list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5, 6]\n\n    Sample Output:\n    12\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums\n\nassert f(g()) == 12\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target: int = 5) -> bool:\n    \"\"\"\n    Check if a given list contains a specific target number.\n    Returns True if it does, False otherwise.\n    \"\"\"\n    return target in num_list\n\ndef g(target: int = 5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that when added gives the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 369,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers contains any even elements.\n\n    Example:\n    nums = [1, 3, 5]\n    Output: False\n\n    nums = [1, 2, 3, 4, 5]\n    Output: True\n    \"\"\"\n    for num in nums:\n        if num % 2 == 0:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 367,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers such that they add up to a specific target number.\n    Return True if there exist two numbers in the list that add up to the target, False otherwise.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(arr: List[int], n: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, determine if there is a combination of numbers in the list\n    whose sum is equal to the target integer.\n    \"\"\"\n    for r in range(1, len(arr) + 1):\n        for combination in combinations(arr, r):\n            if sum(combination) == n:\n                return True\n    return False\n\ndef g(arr=[2, 7, 11, 15], n=9):\n    return arr, n\n\nassert f(*g())\n",
        "idx_generation": 133,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the sum of all numbers in the list is divisible by 5.\"\"\"\n    return sum(nums) % 5 == 0\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is diagonal, meaning that all the elements outside the main diagonal are zero.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    matrix = [[1, 0, 0],\n              [0, 2, 0],\n              [0, 0, 3]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n: int) -> bool:\n    \"\"\"Check if an element is present in a list using binary search\"\"\"\n    first = 0\n    last = len(lst) - 1\n    found = False\n    while first <= last and not found:\n        mid = (first + last) // 2\n        if lst[mid] == n:\n            found = True\n        else:\n            if n < lst[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\n    return found\n\ndef g(lst=[1, 2, 3, 4, 5], n=4):\n    return lst, n\n\nassert f(*g())\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list whose sum is divisible by 5.\n\n    Sample Input:\n    `nums = [2, 7, 3, 8, 5]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] + nums[j]) % 5 == 0:\n                return True\n    return False\n\ndef g():\n    return [2, 7, 3, 8, 5]\n\nassert f(g())\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"Find all indices of the occurrences of the target element in a list\"\"\"\n    indices = []\n    for i, num in enumerate(nums):\n        if num == target:\n            indices.append(i)\n    return indices\n\ndef g(target=3):\n    nums = [1, 2, 3, 4, 3, 5, 3]\n    return nums, target\n\nassert f(*g()) == [2, 4, 6]\n",
        "idx_generation": 325,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if the target number is present in the given matrix.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    target = 5\n\n    The number 5 is present in the matrix, so the function should return True.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 5):\n    return matrix, target\n\nassert f(*g())\n",
        "idx_generation": 371,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target sum, find if there exists a pair of distinct elements in the list\n    whose sum is equal to the target sum.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target_sum = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target_sum=7):\n    return nums, target_sum\n\nassert f(*g()) == True\n\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of integers, find three numbers such that they add up to a specific target number.\n    Return True if there exist three numbers in the list that add up to the target, False otherwise.\n    \"\"\"\n    num_set = set(nums)\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if target - (nums[i] + nums[j]) in num_set:\n                return True\n    return False\n\ndef g(target=100):\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n=3, target=10) -> bool:\n    \"\"\"Check if there are n numbers in the list that sum up to the target\"\"\"\n    if n > len(nums):\n        return False\n    if n == 1:\n        return target in nums\n    for i in range(len(nums)):\n        if f(nums[i+1:], n-1, target-nums[i]):\n            return True\n    return False\n\ndef g(n=3, target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target=\"Tom\", max_names=3, options=[\"Tom\", \"Jerry\", \"Spike\", \"Butch\"]) -> bool:\n    \"\"\"Check if the target name is present in the list of names and the number of names does not exceed the maximum limit.\"\"\"\n    for name in names:\n        assert name in options\n    return len(names) <= max_names and target in names\n\ndef g(target=\"Tom\", max_names=3, options=[\"Tom\", \"Jerry\", \"Spike\", \"Butch\"]):\n    return [target] * max_names\n\nassert f(g())\n",
        "idx_generation": 388,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine if it is a diagonal matrix.\n    Return True if the matrix is diagonal, False otherwise.\n    \"\"\"\n    n = len(matrix)\n\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n\n    return True\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\n# Test case\ntest_matrix = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\nassert f(g(test_matrix))\n\n",
        "idx_generation": 248,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]], distance=10) -> bool:\n    \"\"\"Check if there exists a pair of points in the list that are at a distance less than or equal to a specific value\"\"\"\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            if ((points[i][0] - points[j][0]) ** 2 + (points[i][1] - points[j][1]) ** 2) ** 0.5 <= distance:\n                return True\n    return False\n\ndef g(distance=10):\n    return [(0, 0), (3, 4), (5, 12), (8, 15), (9, 12)]\nassert f(g())\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if there exists a subsequence that forms a geometric progression, otherwise return False.\n    \"\"\"\n    if len(arr) < 3:\n        return False\n    \n    ratio = arr[1] / arr[0]\n    for i in range(2, len(arr)):\n        if arr[i] / arr[i-1] != ratio:\n            return False\n    return True\n\ndef g(arr: List[int]):\n    return arr\n\nassert f(g([2, 4, 8, 16, 32]))\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"Transpose a matrix\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    transposed = [[0 for _ in range(n)] for _ in range(m)]\n    for i in range(n):\n        for j in range(m):\n            transposed[j][i] = matrix[i][j]\n    return transposed\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n",
        "idx_generation": 325,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exist three distinct numbers in the list that add up to the target integer.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            for k in range(len(lst)):\n                if lst[i] + lst[j] + lst[k] == target and i != j and j != k and i != k:\n                    return True\n    return False\n\ndef g(lst=[-1, 0, 1, 2, -1, -4]):\n    return lst\n\nassert f(g())\n\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers contains any duplicate elements.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g(nums=[1, 2, 3, 4, 4, 5, 6, 7, 8]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that add up to the target value.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target = 10):\n    return [2, 4, 6, 8]\nassert f(g(), 10)\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the array whose sum is equal to the target.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    arr = [1, 2, 3, 4, 5, 6]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of numbers and a target number, find the index of the target number in the list.\n    Return -1 if the target number is not found.\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1\n\ndef g(nums: List[int]=[1, 5, 7, 10, 12], target: int=10):\n    return nums, target\n\nassert f(*g()) == 3\n\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given array such that the product of its elements is equal to zero.\n\n    Sample Input:\n    `arr = [1, 2, 3, 0, 4]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    def is_zero_product(subarray):\n        return 0 in subarray\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr) + 1):\n            if is_zero_product(arr[i:j]):\n                return True\n\n    return False\n\ndef g(arr: List[int]):\n    return [arr]\n\nassert f(*g([1, 2, 3, 0, 4]))\n",
        "idx_generation": 254,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the sum of all the elements in the given matrix.\n\n    Sample Input:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Sample Output:\n    45\n    \"\"\"\n    total_sum = 0\n    for row in matrix:\n        total_sum += sum(row)\n    return total_sum\n\ndef g():\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    return matrix\n\nassert f(g()) == 45\n\n\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if all the numbers in the given list are prime numbers.\n\n    Sample Input:\n    nums = [2, 3, 5, 7, 11]\n\n    Sample Output:\n    True\n    \"\"\"\n    for num in nums:\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n    return True\n\ndef g():\n    nums = [2, 3, 5, 7, 11]\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if the target integer is present at the end of any of the integers in the given list\"\"\"\n    for num in arr:\n        if str(num).endswith(str(target)):\n            return True\n    return False\n\ndef g():\n    return [123, 456, 789, 101, 112]\n\nassert f(g(), 2)\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the given list contains two numbers that add up to the target number.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 8\n\n    Sample Output:\n    True\n    \"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        complements.add(target - num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 8\n\nassert f(*g())\n",
        "idx_generation": 380,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers contains any prime numbers.\n    \"\"\"\n    for num in nums:\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the sum of any two numbers in the given list equals the target.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=15) -> bool:\n    \"\"\"Check if there exist three numbers in the array whose sum is equal to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=15):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 141,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport functools\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, find the maximum product of any two numbers in the list.\n    \"\"\"\n    nums.sort()\n    return functools.reduce(lambda x, y: x*y, nums[-2:])\n\ndef g(nums: List[int]=[4, 7, 2, 9, 5]):\n    return nums\n\nassert f(g()) == 63\n\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given an m x n matrix, determine if it is Toeplitz matrix.\n    A Toeplitz matrix is one in which every diagonal from top-left to bottom-right has the same elements.\n    \"\"\"\n    m, n = len(matrix), len(matrix[0])\n    \n    for i in range(m-1):\n        for j in range(n-1):\n            if matrix[i][j] != matrix[i+1][j+1]:\n                return False\n    \n    return True\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\n# Test case\ntest_matrix = [\n    [1, 2, 3, 4],\n    [5, 1, 2, 3],\n    [9, 5, 1, 2]\n]\nassert f(g(test_matrix))\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is symmetric. A matrix is considered symmetric if it is equal to its transpose.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n\n    The matrix is symmetric, so the function should return True.\n\n    Hint: You can use list comprehension to create the transpose of the matrix.\n    \"\"\"\n    transpose = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n    return matrix == transpose\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it contains any duplicate elements.\n\n    Sample Input:\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    False\n    \"\"\"\n    return len(nums) == len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, lst=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if a given item is present in the list\"\"\"\n    return x in lst\n\ndef g(lst=['apple', 'banana', 'cherry']):\n    return 'apple'\n\nassert f(g())\n",
        "idx_generation": 330,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find two numbers in the given list that add up to the target, and return them in a new list.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[i] + nums[j] == target:\n                return [nums[i], nums[j]]\n\ndef g():\n    return [1, 2, 3, 4, 5], 7\n\nassert f(*g()) == [2, 5]\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a combination of odd and even numbers\"\"\"\n    return any(num % 2 == 0 for num in arr) and any(num % 2 != 0 for num in arr)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 388,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"\n    Find three numbers in the list that add up to the target.\n    Return True if three such numbers exist, False otherwise.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there exist four numbers in the array whose sum is equal to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                for l in range(k + 1, len(arr)):\n                    if arr[i] + arr[j] + arr[k] + arr[l] == target:\n                        return True\n    return False\n\ndef g(target=100):\n    arr = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 141,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if a given list is in ascending order.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return nums == sorted(nums)\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an upper triangular matrix.\n    An upper triangular matrix is a square matrix in which all the entries below the main diagonal are zero.\n    \"\"\"\n    n = len(matrix)\n    for i in range(1, n):\n        for j in range(i):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    \"\"\"\n    Generate an upper triangular matrix of size 4x4.\n    \"\"\"\n    return [[1, 2, 3, 4],\n            [0, 5, 6, 7],\n            [0, 0, 8, 9],\n            [0, 0, 0, 10]]\n\nassert f(g())\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[str]) -> bool:\n    \"\"\"Check if there are two strings in the list whose lengths add up to a prime number.\"\"\"\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if is_prime(len(arr[i]) + len(arr[j])):\n                return True\n    return False\n\ndef g():\n    return [\"apple\", \"banana\", \"kiwi\", \"grape\", \"pear\"]\n\nassert f(g())\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, lst=['apple', 'banana', 'cherry'], target='banana') -> bool:\n    \"\"\"Check if the target item is at the given index in the list\"\"\"\n    return lst.index(target) == x\n\ndef g(lst=['apple', 'banana', 'cherry'], target='banana'):\n    return lst.index(target)\n\nassert f(g())\n",
        "idx_generation": 330,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the list whose product is equal to the target value.\n    Return True if there exist two numbers whose product is equal to the target, False otherwise.\n    \"\"\"\n    return any(num1 * num2 == target for num1, num2 in itertools.combinations(nums, 2))\n\ndef g(target=10):\n    \"\"\"\n    Generate a list of numbers.\n    \"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), target=20)\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains any consecutive numbers.\n\n    Sample Input:\n    nums = [1, 2, 3, 5, 6]\n\n    Sample Output:\n    False\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums)-1):\n        if nums[i+1] - nums[i] == 1:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 5, 6]):\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, determine if there are three numbers in the list that add up to the target.\n    Return True if such a triplet exists, False otherwise.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(nums=[-1, 0, 1, 2, -1, -4], target=0):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 215,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list that sums up to the target.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 7)\n\nassert f(*g())\n",
        "idx_generation": 148,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is sorted in non-decreasing order.\n\n    Sample Input:\n    `nums = [1, 2, 3, 4, 5]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return nums == sorted(nums)\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([1, 2, 3, 4, 5]))\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is symmetric (i.e., equal to its transpose).\n    \"\"\"\n    return matrix == [[row[i] for row in matrix] for i in range(len(matrix[0]))]\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"\n    Find a subarray of length k in the given list such that the sum of all its elements is a perfect square.\n    Return True if such a subarray exists, False otherwise.\n    \"\"\"\n    n = len(nums)\n    for i in range(n - k + 1):\n        subarray_sum = sum(nums[i:i+k])\n        if int(subarray_sum ** 0.5) ** 2 == subarray_sum:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 327,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list that add up to the target number.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 9)\n\nassert f(*g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix and a target number, determine if the target number exists in the matrix.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n\n    Sample Output:\n    True\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n    return matrix, target\n\nassert f(*g())\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of numbers, return a new list containing only the even numbers from the original list.\n    \"\"\"\n    even_nums = []\n    for num in nums:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == [2, 4, 6, 8, 10]\n\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of integers in the list that sums up to the target value.\n    \"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(), target=15)\n",
        "idx_generation": 226,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of integers in the given list whose sum is equal to the target value.\"\"\"\n    return any((target - num in arr for num in arr))\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\nassert f(g())\n",
        "idx_generation": 151,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n\n    Example:\n    nums = [1, 2, 3, 2, 1]\n    Output: True\n\n    nums = [1, 2, 3, 4, 5]\n    Output: False\n    \"\"\"\n    reversed_nums = nums[::-1]\n    return nums == reversed_nums\n\ndef g(nums=[1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(e: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a Fibonacci sequence.\n    \"\"\"\n    a, b = 0, 1\n    for num in e:\n        if num != a:\n            return False\n        a, b = b, a + b\n    return True\n\ndef g():\n    return [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n\nassert f(g())\n",
        "idx_generation": 261,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, determine if there exists a subarray whose sum is equal to zero.\n\n    Sample Input:\n    `[4, 2, -3, 1, 6]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    prefix_sum = set()\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        if curr_sum == 0 or curr_sum in prefix_sum:\n            return True\n        prefix_sum.add(curr_sum)\n    return False\n\ndef g():\n    return [4, 2, -3, 1, 6]\n\nassert f(g())\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target integer, find all indices i in the list\n    such that arr[i] is greater than the target and return them as a list.\n    \n    Sample Input:\n    arr = [2, 4, 6, 8, 10, 4]\n    target = 4\n    \n    Sample Output:\n    [2, 3, 4]\n    \"\"\"\n    indices = []\n    for i in range(len(arr)):\n        if arr[i] > target:\n            indices.append(i)\n    return indices\n\ndef g():\n    return [2, 4, 6, 8, 10, 4], 4\n\nassert f(*g()) == [2, 3, 4]\n\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in a list whose product equals a target number.\n    \"\"\"\n    complements = set()\n    for num in nums:\n        if num == 0 and target == 0:\n            return True\n        if num != 0 and target % num == 0 and target // num in complements:\n            return True\n        complements.add(num)\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g(), target=48)\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers contains only even elements.\n    Returns True if all elements are even, False otherwise.\n    \"\"\"\n    return all(num % 2 == 0 for num in nums)\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list such that the sum of its elements is equal to target,\n    and the subarray contains at least one negative number.\n\n    Sample Input:\n    `nums = [3, -4, 7, 2, 1, -8], target = 2`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n\n        if prefix_sum == target and any(n < 0 for n in nums):\n            return True\n\n        if prefix_sum - target in prefix_sums:\n            return True\n\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int]):\n    return nums, 2\n\nassert f(*g([3, -4, 7, 2, 1, -8]))\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"\n    Given an array of integers, find three numbers such that their product is equal to a specific target number.\n    \"\"\"\n    seen = set()\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            complement = target / (arr[i] * arr[j])\n            if complement in seen:\n                return True\n            seen.add(arr[i])\n            seen.add(arr[j])\n    return False\n\ndef g(target=20):\n    return [2, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 153,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> int:\n    \"\"\"Find the sum of all the numbers in a given list.\"\"\"\n    return sum(numbers)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 15\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix represented as a list of lists, return True if the matrix is symmetric, otherwise return False.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 261,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n\n    A magic square is a square matrix in which the sums of each row, each column, and both diagonals are the same.\n\n    Example:\n    matrix = [[2, 7, 6],\n              [9, 5, 1],\n              [4, 3, 8]]\n\n    This is a magic square because the sums of each row, each column, and both diagonals are equal to 15.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for i in range(n):\n        if sum(matrix[i]) != target_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n    \n    # Check diagonals\n    diag_sum1 = 0\n    diag_sum2 = 0\n    for i in range(n):\n        diag_sum1 += matrix[i][i]\n        diag_sum2 += matrix[i][n-i-1]\n    if diag_sum1 != target_sum or diag_sum2 != target_sum:\n        return False\n    \n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the list whose product is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] * nums[j] * nums[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g(), 240)\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the index of the first occurrence of a target number in the given list.\n    If the target number is not in the list, return -1.\n\n    Sample input:\n    [1, 2, 3, 4, 5, 6, 7], 4\n\n    Sample output:\n    3\n\n    Explanation:\n    The target number 4 is found at index 3 in the list.\n    \"\"\"\n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    return -1\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    target = 4\n    return nums, target\n\nassert f(*g()) == 3\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find if there exist three elements in the list whose sum is equal to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"\n    Find three numbers in the list that multiply up to the target.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] * arr[j] * arr[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [2, 4, 5, 10, 12, 15, 20]\n\nassert f(g())\n\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"\n    Given an array of integers, find two numbers such that their sum is equal to a specific target number.\n    \"\"\"\n    seen = set()\n    for i in range(len(arr)):\n        complement = target - arr[i]\n        if complement in seen:\n            return True\n        seen.add(arr[i])\n    return False\n\ndef g(target=20):\n    return [2, 18]\n\nassert f(g())\n",
        "idx_generation": 154,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of numbers, find a combination of numbers that adds up to the target value.\n    Return True if a combination is found, False otherwise.\n    \"\"\"\n    def find_combination(target, numbers):\n        if target == 0:\n            return True\n        if target < 0 or not numbers:\n            return False\n        return find_combination(target - numbers[0], numbers[1:]) or find_combination(target + numbers[0], numbers[1:])\n\n    return find_combination(target, numbers)\n\ndef g(numbers=[10, 20, 30, 40, 50]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a perfect shuffle of two other lists.\n    A perfect shuffle is an operation where two lists are merged by alternating their elements.\n    \"\"\"\n    n = len(lst)\n    half = n // 2\n    list1 = lst[:half]\n    list2 = lst[half:]\n    \n    return sorted(list1) + sorted(list2) == lst\n\ndef g(lst=[1, 3, 2, 4]):\n    return lst\n\nassert f(g())\n",
        "idx_generation": 261,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list that contains only the prime numbers from the original list.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_nums = [num for num in nums if is_prime(num)]\n    return prime_nums\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [2, 3, 5, 7]\n\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of integers in the given list whose product is equal to the target value.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] == target:\n                return True\n    return False\n\ndef g(arr=[2, 3, 4, 5, 6]):\n    return arr\n\nassert f(g(), 12)\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the index of the last occurrence of a target number in the given list.\n    If the target number is not in the list, return -1.\n\n    Sample input:\n    [1, 2, 3, 4, 4, 5, 6, 7], 4\n\n    Sample output:\n    4\n\n    Explanation:\n    The target number 4 is found at the last occurrence at index 4 in the list.\n    \"\"\"\n    for i in range(len(nums) - 1, -1, -1):\n        if nums[i] == target:\n            return i\n    return -1\n\ndef g():\n    nums = [1, 2, 3, 4, 4, 5, 6, 7]\n    target = 4\n    return nums, target\n\nassert f(*g()) == 4\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the product of all the odd numbers in the given list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6]\n    The product of all the odd numbers is 1 * 3 * 5 = 15.\n    \"\"\"\n    odd_product = 1\n    for num in nums:\n        if num % 2 != 0:\n            odd_product *= num\n    return odd_product\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g()) == 15\n",
        "idx_generation": 422,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list such that their product is equal to the target.\n\n    Sample Input:\n    `nums = [2, 4, 5, 3], target = 10`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n\n    return False\n\ndef g(nums: List[int]):\n    return nums, 10\n\nassert f(*g([2, 4, 5, 3]))\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"\n    Given an array of integers, find three numbers such that their sum is equal to a specific target number.\n    \"\"\"\n    seen = set()\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            complement = target - arr[i] - arr[j]\n            if complement in seen:\n                return True\n            seen.add(arr[i])\n            seen.add(arr[j])\n    return False\n\ndef g(target=20):\n    return [2, 4, 14]\n\nassert f(g())\n",
        "idx_generation": 154,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of numbers, find a combination of numbers that adds up to the target value.\n    Return True if a combination is found, False otherwise.\n    \"\"\"\n    def find_combination(target, numbers):\n        if target == 0:\n            return True\n        if target < 0 or not numbers:\n            return False\n        return find_combination(target - numbers[0], numbers[1:]) or find_combination(target + numbers[0], numbers[1:])\n\n    return find_combination(target, numbers)\n\ndef g(numbers=[30, 40, 50, 60, 70]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, determine if it is a lower triangular matrix.\n    A lower triangular matrix is one in which all elements above the main diagonal are zero.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    for i in range(rows):\n        for j in range(i + 1, cols):\n            if matrix[i][j] != 0:\n                return False\n    \n    return True\n\ndef g(matrix=[[1, 0, 0], [2, 3, 0], [4, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains duplicate elements.\n\n    Sample Input:\n    nums = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g(nums: List[int]):\n    return nums * 2\n\nassert f(g([1, 2, 3, 2, 1])) == True\n\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find if there exists a pair of numbers in the list such that their product is equal to the target number.\n    Return True if such pair exists, and False otherwise.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target / num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5], target = 10):\n    return nums\n\nassert f(g(), 10)\n\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two distinct numbers in the list whose sum is equal to the target.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 8\n    The sum of two distinct numbers in the list (3+5) is equal to the target (8).\n    Therefore, the puzzle is solved.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(target=8):\n    nums = [1, 2, 3, 4, 5]\n    return nums, target\n\nassert f(*g())\n\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the even numbers.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    [2, 4, 6, 8, 10]\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == [2, 4, 6, 8, 10]\n",
        "idx_generation": 425,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list whose sum is equal to a certain target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums) + 1):\n            subarray = nums[i:j]\n            subarray_sum = sum(subarray)\n            if subarray_sum == 10:\n                return True\n    return False\n\ndef g():\n    return [2, 3, 5, 4, 6, 7]\n\nassert f(g())\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Check if there exist three distinct integers in the list that sum up to the target value.\n    Return True if such integers exist, and False otherwise.\n    \"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            for k in range(j+1, len(x)):\n                if x[i] + x[j] + x[k] == target:\n                    return True\n    return False\n\ndef g(target: int = 10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 154,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is divisible by any number in the list.\"\"\"\n    return any(n % num == 0 for num in nums)\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return max(nums)\n\nassert f(g())\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> int:\n    \"\"\"\n    Find the maximum sum of any contiguous subarray in the given list.\n\n    Sample Input:\n    `[1, -2, 3, 4, -1, 2, 1, -5, 4]`\n\n    Sample Output:\n    `9`\n    Explanation: The subarray [3, 4, -1, 2, 1] has the maximum sum of 9.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in lst:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef g(lst=[1, -2, 3, 4, -1, 2, 1, -5, 4]):\n    return lst\n\nassert f(g()) == 9\n",
        "idx_generation": 264,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subarray with a sum equal to zero.\n    Returns True if such a subarray exists, False otherwise.\n    \"\"\"\n    prefix_sum = set()\n    curr_sum = 0\n\n    for num in arr:\n        curr_sum += num\n\n        if curr_sum == 0 or curr_sum in prefix_sum:\n            return True\n\n        prefix_sum.add(curr_sum)\n\n    return False\n\ndef g(arr=[4, -2, 3, -1, 1]):\n    return arr\n\nassert f(g())\n\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is a factor of any of the numbers in the given list\"\"\"\n    for num in arr:\n        if num % target == 0:\n            return True\n    return False\n\ndef g():\n    return [10, 15, 20, 25, 30, 35, 40, 45, 50]\n\nassert f(g(), 5)\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import datetime\nfrom typing import*\n\ndef f(dates: List[datetime.date], target_year: int) -> int:\n    \"\"\"\n    Count the number of dates in the given list that fall in the target year.\n    \"\"\"\n    count = 0\n    for date in dates:\n        if date.year == target_year:\n            count += 1\n    return count\n\ndef g(dates=[datetime.date(2020, 1, 1), datetime.date(2021, 2, 3), datetime.date(2022, 3, 4), datetime.date(2023, 4, 5)], target_year=2021):\n    return (dates, target_year)\n\nassert f(*g()) == 1\n\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all even numbers.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6]\n\n    The sum of even numbers is: 2 + 4 + 6 = 12\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g(nums=[1, 2, 3, 4, 5, 6]):\n    return nums\n\nassert f(g()) == 12\n",
        "idx_generation": 442,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Count the number of subarrays in the given list whose sum is equal to the target.\n\n    Return the count of such subarrays.\n    \"\"\"\n    count = 0\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            subarray = nums[i:j]\n            if sum(subarray) == target:\n                count += 1\n    return count\n\ndef g(nums=[1, 2, 3, 4, 5], target=5):\n    return nums, target\n\nassert f(*g()) == 2\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums=[2, 4, 6, 8, 10], target=14):\n    \"\"\"Find a pair of numbers in the list that sum up to the target.\"\"\"\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 155,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if the given number is present in the list of numbers.\"\"\"\n    return n in nums\n\ndef g(nums=[2, 4, 6, 8, 10]):\n    return nums[0]\n\nassert f(g())\n",
        "idx_generation": 180,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return li == li[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a magic square.\n    A matrix is a magic square if the sum of each row, each column, and each diagonal is the same.\n    Return True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    target_sum = sum(matrix[0])\n    for i in range(rows):\n        if sum(matrix[i]) != target_sum:\n            return False\n        if sum(matrix[j][i] for j in range(rows)) != target_sum:\n            return False\n    if sum(matrix[i][i] for i in range(rows)) != target_sum:\n        return False\n    if sum(matrix[i][rows-1-i] for i in range(rows)) != target_sum:\n        return False\n    return True\n\ndef g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g())\n\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[str], target: str) -> bool:\n    \"\"\"Check if the target string is a prefix of any of the strings in the given list\"\"\"\n    for string in arr:\n        if string.startswith(target):\n            return True\n    return False\n\ndef g():\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n\nassert f(g(), \"ban\")\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find two numbers in the given list that add up to the target value.\n    Return the list of the indices of those numbers.\n\n    Sample Input:\n    nums = [2, 7, 11, 15]\n    target = 9\n\n    Sample Output:\n    [0, 1]\n    \"\"\"\n    visited = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in visited:\n            return [visited[complement], i]\n        visited[num] = i\n    return []\n\ndef g(nums=[2, 7, 11, 15], target=9):\n    return nums, target\n\nassert f(*g()) == [0, 1]\n\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with the odd numbers removed.\n    \n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \n    Sample Output:\n    [2, 4, 6, 8]\n    \"\"\"\n    return [num for num in arr if num % 2 == 0]\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g()) == [2, 4, 6, 8]\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given an array of integers, find two numbers such that they add up to a specific target number.\n    Return the indices of the two numbers in the array.\n    \"\"\"\n    num_map = {}\n    for i, num in enumerate(arr):\n        complement = target - num\n        if complement in num_map:\n            return [num_map[complement], i]\n        num_map[num] = i\n    return []\n\ndef g():\n    arr = [2, 7, 11, 15]\n    target = 9\n    return arr, target\n\nassert f(*g()) == [0, 1]\n",
        "idx_generation": 260,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 155,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[3, 6, 9, 12, 15]) -> bool:\n    \"\"\"Check if the given number is divisible by any number in the list.\"\"\"\n    return any(n % num == 0 for num in nums)\n\ndef g(nums=[3, 6, 9, 12, 15]):\n    return nums[0]\n\nassert f(g())\n",
        "idx_generation": 180,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is a diagonal matrix.\n    Return True if the matrix is diagonal, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(matrix=[[1, 0, 0], [0, 2, 0], [0, 0, 3]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if all numbers in the list are prime numbers.\n    Return True if all numbers are prime, False otherwise.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    for num in nums:\n        if not is_prime(num):\n            return False\n    return True\n\ndef g():\n    return [2, 3, 5, 7, 11, 13]\n\nassert f(g())\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int = 0) -> bool:\n    \"\"\"\n    Check if the target value is present in the given matrix.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    target = 5\n\n    The target value 5 is present in the matrix, so the function should return True.\n\n    Hint: You can use nested loops to iterate through each element of the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g(), 9)\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the given list that add up to the target number.\n    \"\"\"\n    num_set = set()\n    for num in lst:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(lst=[1, 2, 3, 4, 5], target=9):\n    return lst, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 425,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if all the numbers are odd.\n    Return True if all numbers are odd, False otherwise.\n    \"\"\"\n    return all(num % 2 != 0 for num in nums)\n\ndef g():\n    return [1, 3, 5, 7, 9, 11]\n\nassert f(g())\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list 'arr' whose sum is equal to the 'target'.\n    \"\"\"\n    n = len(arr)\n    prefix_sum = [0] * (n+1)\n    for i in range(1, n+1):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i-1]\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if prefix_sum[j] - prefix_sum[i] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(), target=10)\n",
        "idx_generation": 265,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray of size n in the given list of integers\n    that sums up to the target value.\n\n    Sample Input:\n    n = 3\n    arr = [1, 2, 3, 4, 5, 6]\n    target = 12\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr) - n + 1):\n        if sum(arr[i:i+n]) == target:\n            return True\n    return False\n\ndef g(n=3, arr=[1, 2, 3, 4, 5, 6], target=12):\n    return (n, arr, target)\n\nassert f(*g())\n",
        "idx_generation": 155,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is sorted in non-decreasing order.\n    \"\"\"\n    return nums == sorted(nums)\n\ndef g():\n    return [1, 3, 5, 7, 9]\n\nassert f(g())\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list where each element is multiplied by 2.\n    \n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    \n    Sample Output:\n    [2, 4, 6, 8, 10]\n    \"\"\"\n    return [num * 2 for num in nums]\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g()) == [2, 4, 6, 8, 10]\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence in which the sum of any two adjacent elements is a perfect square.\n    Return True if such a subsequence is found, False otherwise.\n    \"\"\"\n    def is_perfect_square(num):\n        return int(num ** 0.5) ** 2 == num\n\n    for i in range(len(nums)-1):\n        if is_perfect_square(nums[i] + nums[i+1]):\n            return True\n    return False\n\ndef g():\n    return [1, 4, 3, 2, 5, 7, 9]\n\nassert f(g())\n",
        "idx_generation": 354,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose product is equal to the target.\n    Return True if such pair exists, False otherwise.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] * lst[j] == target:\n                return True\n    return False\n\ndef g(lst = [1, 2, 3, 4, 5], target = 8):\n    return lst, target\n\nassert f(*g())\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists two numbers in the given list whose product is equal to the target number.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), target=30)\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all even numbers in the list.\n    Return the sum.\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 30\n\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list whose sum is greater than or equal to the target value.\n    \"\"\"\n    prefix_sum = 0\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum >= target:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 268,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n: int) -> bool:\n    \"\"\"\n    Check if the given list of integers contains a pair of elements\n    that sums up to the target value.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 6]\n    n = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if n - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5, 6], n=9):\n    return (arr, n)\n\nassert f(*g())\n",
        "idx_generation": 155,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100, n=5) -> bool:\n    \"\"\"Find a combination of n numbers that adds up to the target.\"\"\"\n    return sum(numbers) == target and len(numbers) == n\ndef g(target = 100, n = 5):\n    return [20] * n\nassert f(g())\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if all elements in the given list are even numbers.\n    Return True if all elements are even, False otherwise.\n    \"\"\"\n    return all(num % 2 == 0 for num in arr)\n\ndef g():\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert f(g())\n",
        "idx_generation": 274,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    A magic square is a square matrix where the sums of each row, each column, and both diagonals are the same.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check row sums\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check column sums\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n    \n    # Check diagonal sums\n    diagonal_sum = sum(matrix[i][i] for i in range(n))\n    reverse_diagonal_sum = sum(matrix[i][n-i-1] for i in range(n))\n    if diagonal_sum != target_sum or reverse_diagonal_sum != target_sum:\n        return False\n    \n    return True\n\ndef g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    \"\"\"\n    This solution checks if the sum of each row, each column, and both diagonals are equal to 15.\n    \"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 355,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> List[int]:\n    \"\"\"Return a list of numbers that are greater than n\"\"\"\n    return [num for num in lst if num > n]\n\ndef g():\n    return 5, [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(*g()) == [6, 7, 8, 9]\n\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exist two numbers in the list that add up to the target value.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g(lst: List[int] = [1, 2, 3, 4, 5]):\n    \"\"\"\n    Return the list of numbers.\n    \"\"\"\n    return lst\n\nassert f(g(), 6)\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum: int) -> int:\n    \"\"\"\n    Given a list of numbers and a target sum, find the number of distinct pairs whose sum is equal to the target sum.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target_sum = 7\n\n    Sample Output:\n    2\n    \"\"\"\n    pairs = set()\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                pair = tuple(sorted([nums[i], nums[j]]))\n                if pair not in pairs:\n                    pairs.add(pair)\n                    count += 1\n    return count\n\ndef g(nums=[1, 2, 3, 4, 5], target_sum=7):\n    return nums, target_sum\n\nassert f(*g()) == 2\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find all pairs of numbers in the given list that add up to the target value.\n    Return a list of tuples containing the pairs.\n    \"\"\"\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                pairs.append((arr[i], arr[j]))\n    return pairs\n\ndef g():\n    return ([1, 2, 3, 4, 5], 6)\n\nassert f(*g()) == [(1, 5), (2, 4)]\n",
        "idx_generation": 268,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are three numbers in the given list that sum up to the target value.\n\n    Sample Input:\n    nums = [2, 4, 1, 5, 6, 3]\n    target = 10\n\n    Sample Output:\n    True\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(nums=[2, 4, 1, 5, 6, 3], target=10):\n    return (nums, target)\n\nassert f(*g())\n",
        "idx_generation": 157,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n: int) -> bool:\n    \"\"\"\n    Check if there are exactly n rows in the given matrix where the sum of all elements is divisible by n.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    n = 2\n\n    The sum of the elements in the first row (1+2+3 = 6) and the sum of the elements in the second row (4+5+6 = 15)\n    are both divisible by 2, so the function should return True.\n\n    Hint: You can use the `sum()` function to calculate the sum of a list.\n    \"\"\"\n    count = 0\n    for row in matrix:\n        if sum(row) % n == 0:\n            count += 1\n    return count == n\n\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g(), 2)\n",
        "idx_generation": 183,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list where the first number is a multiple of the second number.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] % arr[j] == 0 or arr[j] % arr[i] == 0:\n                return True\n    return False\n\ndef g():\n    return [12, 34, 56, 78, 90, 123, 456, 789, 987, 654]\n\nassert f(g())\n",
        "idx_generation": 274,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    A magic square is an n x n matrix of distinct positive integers from 1 to n^2 where the sums of the rows, columns,\n    and diagonals are all the same.\n    Return True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(matrix[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n\n    return True\n\ndef g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g())\n\n",
        "idx_generation": 358,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(numbers: List[int], target_num: int) -> bool:\n    \"\"\"Check if the target_num is present in the list\"\"\"\n    return target_num in numbers\n\ndef g(numbers=[random.randint(1, 10) for _ in range(5)], target_num=random.randint(1, 10)):\n    return numbers, target_num\n\nassert f(*g())\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist two numbers in the list whose sum is equal to the target and the second number is greater than the first number.\n    \"\"\"\n    return any(num2 > num1 and num1 + num2 == target for i, num1 in enumerate(numbers) for num2 in numbers[i+1:])\n\ndef g(numbers: List[int] = [1, 2, 3, 4, 5], target: int = 9) -> List[int]:\n    \"\"\"\n    Generate the list of numbers and target value.\n    \"\"\"\n    return numbers, target\n\nassert f(*g())\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exist three numbers in the list that add up to the target integer. The numbers can be repeated.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            for k in range(len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[-1, 0, 1, 2, -1, -4]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find all pairs of elements in a list that sum up to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 6\n\n    Sample Output:\n    [(1, 5), (2, 4)]\n    \"\"\"\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                pairs.append((nums[i], nums[j]))\n    return pairs\n\ndef g(target=6):\n    nums = [1, 2, 3, 4, 5]\n    return nums, target\n\nassert f(*g()) == [(1, 5), (2, 4)]\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subset of numbers in the given list that sums up to the target.\n    \"\"\"\n    for r in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            if sum(subset) == target:\n                return True\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if it is possible to obtain the target number by combining the given numbers using multiplication and division.\n    Return True if the target number can be obtained, False otherwise.\n    \"\"\"\n    def helper(i, curr_product):\n        if curr_product == target:\n            return True\n        if i >= len(nums):\n            return False\n        \n        return helper(i + 1, curr_product * nums[i]) or helper(i + 1, curr_product / nums[i])\n    \n    return helper(0, 1)\n\ndef g(target=36):\n    \"\"\"\n    Generate a list of numbers that can be used to obtain the target number.\n    \"\"\"\n    return [2, 3, 4, 6]\n\nassert f(g(), target=36)\n",
        "idx_generation": 193,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given an array of integers, find the longest subarray such that the sum of its elements is equal to zero.\n    Returns True if such a subarray exists, False otherwise.\n    \"\"\"\n    prefix_sum = 0\n    sum_dict = {0: -1}\n\n    max_length = 0\n\n    for i in range(len(arr)):\n        prefix_sum += arr[i]\n\n        if prefix_sum in sum_dict:\n            max_length = max(max_length, i - sum_dict[prefix_sum])\n        else:\n            sum_dict[prefix_sum] = i\n\n    return max_length > 0\n\ndef g(arr=[4, 2, -3, 1, 6]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 274,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there are three consecutive numbers in the list.\n\n    Example:\n    nums = [1, 2, 3, 5, 6]\n    The list contains the consecutive numbers 1, 2, and 3.\n    Therefore, the puzzle is solved.\n    \"\"\"\n    for i in range(len(nums)-2):\n        if nums[i] + 1 == nums[i+1] and nums[i+1] + 1 == nums[i+2]:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 5, 6, 7, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 362,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that when multiplied gives the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target=15):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, return True if all the numbers in the list are divisible by the target value.\n    \"\"\"\n    return all(num % target == 0 for num in arr)\n\ndef g(arr=[10, 20, 30, 40, 50], target=10):\n    return arr, target\n\nassert f(*g())\n",
        "idx_generation": 439,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all the numbers that appear an odd number of times.\n    \"\"\"\n    count = {}\n    for num in nums:\n        count[num] = count.get(num, 0) + 1\n    result = 0\n    for num, freq in count.items():\n        if freq % 2 != 0:\n            result += num\n    return result\n\ndef g(nums=[1, 2, 3, 2, 1, 4, 5, 4, 5]):\n    return nums\n\nassert f(g()) == 3\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of elements in the given list whose sum is equal to the target number.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n    Output: True\n\n    nums = [1, 2, 3, 4, 5]\n    target = 10\n    Output: False\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 7\n\nassert f(*g()) == True\n\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k=2) -> bool:\n    \"\"\"\n    Given a list of integers, a target number, and an integer k, check if there exists a combination of k numbers from the list whose sum is equal to the target.\n    \"\"\"\n    from itertools import combinations\n    for comb in combinations(nums, k):\n        if sum(comb) == target:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9, k=2):\n    return [nums, target, k]\n\nassert f(*g())\n",
        "idx_generation": 162,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Given a list of numbers, check if all numbers are even.\n    \"\"\"\n    for num in numbers:\n        if num % 2 != 0:\n            return False\n    return True\n\ndef g(numbers: List[int] = [2, 4, 6, 8, 10]):\n    \"\"\"\n    Return the list of numbers.\n    \"\"\"\n    return numbers\n\nassert f(g())\n\n",
        "idx_generation": 194,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, rotate it by 90 degrees in clockwise direction.\n\n    Example:\n    Input: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    Output: [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \"\"\"\n    n = len(matrix)\n    for i in range(n // 2):\n        for j in range(i, n - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[n - j - 1][i]\n            matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1]\n            matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1]\n            matrix[j][n - i - 1] = temp\n    return matrix\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n\n",
        "idx_generation": 275,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of numbers, check if all the elements are even.\n\n    Sample Input:\n    nums = [2, 4, 6, 8, 10]\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(num % 2 == 0 for num in nums)\n\ndef g(nums=[2, 4, 6, 8, 10]):\n    return nums\n\nassert f(g()) == True\n\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if the target number is present in the given matrix.\n    Return True if the target is present, False otherwise.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5):\n    return matrix, target\n\nassert f(*g())\n\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the target number is present in the given list.\n\n    Example:\n    x = [1, 2, 3, 4, 5]\n    target = 3\n\n    The number 3 is present in the list, so the function should return True.\n    \"\"\"\n    return target in x\n\ndef g(x=[1, 2, 3, 4, 5], target=3):\n    return x, target\n\nassert f(*g())\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all numbers in the list are even\"\"\"\n    for num in nums:\n        if num % 2 != 0:\n            return False\n    return True\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 479,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list whose sum is equal to the target sum\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr=[-1, 0, 1, 2, -1, -4], target=0):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of numbers, check if there exist three numbers in the list that add up to the target value.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g(numbers: List[int] = [1, 2, 3, 4, 5]):\n    \"\"\"\n    Return the list of numbers.\n    \"\"\"\n    return numbers\n\nassert f(g())\n\n",
        "idx_generation": 194,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if the list is sorted in non-decreasing order.\n\n    Returns True if the list is sorted in non-decreasing order,\n    False otherwise.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(numbers[i] <= numbers[i+1] for i in range(len(numbers)-1))\n\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 285,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list such that their sum is equal to 10.\n\n    Sample Input:\n    `nums = [2, 3, 4, 5, 6]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if 10 - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([2, 3, 4, 5, 6]))\n",
        "idx_generation": 364,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, check if the target value can be obtained by multiplying any two integers in the list.\n    \n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 10\n    \n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 10\n\nassert f(*g()) == True\n\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the target number is present in the given list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 3\n\n    The number 3 is present in the list, so the function should return True.\n    \"\"\"\n    return target in nums\n\ndef g(nums=[1, 2, 3, 4, 5], target=3):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with all the even numbers removed.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    The output should be: [1, 3, 5, 7, 9]\n    \"\"\"\n    return [num for num in nums if num % 2 != 0]\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == [1, 3, 5, 7, 9]\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers from the given list that adds up to the target value.\n    \"\"\"\n    return any((x + y == target for i, x in enumerate(lst) for j, y in enumerate(lst) if i != j))\n\ndef g(target=100):\n    return [target // 2, target // 2]\n\nassert f(g())\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there exists a pair of numbers in the list whose sum is equal to the target.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return [nums, target]\n\nassert f(*g())\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is in non-decreasing order.\n    Returns True if the list is non-decreasing, False otherwise.\n    \"\"\"\n    for i in range(len(nums)-1):\n        if nums[i] > nums[i+1]:\n            return False\n\n    return True\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 194,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is in non-decreasing order.\n    Return True if the list is in non-decreasing order, otherwise return False.\n    \"\"\"\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))\n\ndef g(arr=[1, 2, 3, 3, 5, 6, 7, 8]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 286,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if all the numbers are prime.\n    Return True if all numbers are prime, False otherwise.\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return all(is_prime(num) for num in nums)\n\ndef g():\n    return [2, 3, 5, 7, 11, 13]\n\nassert f(g())\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[str], target: str) -> bool:\n    \"\"\"\n    Given a list of strings and a target string, check if the target string exists in any of the strings in the list.\n    \n    Sample Input:\n    arr = ['apple', 'banana', 'cherry']\n    target = 'an'\n    \n    Sample Output:\n    True\n    \"\"\"\n    for string in arr:\n        if target in string:\n            return True\n    return False\n\ndef g():\n    return ['apple', 'banana', 'cherry'], 'an'\n\nassert f(*g()) == True\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Return a list of two distinct numbers from the given list that add up to the target integer.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if nums[i] + nums[j] == target and i != j:\n                return [nums[i], nums[j]]\n    return []\n\ndef g(target: int = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(), target=10) == [1, 9]\n\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with only the positive numbers.\n    \n    Sample Input:\n    nums = [-1, 2, -3, 4, -5, 6, -7, 8, -9]\n    \n    Sample Output:\n    [2, 4, 6, 8]\n    \"\"\"\n    return [num for num in nums if num > 0]\n\ndef g(nums=[-1, 2, -3, 4, -5, 6, -7, 8, -9]):\n    return nums\n\nassert f(g()) == [2, 4, 6, 8]\n\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Find all pairs of numbers in the given list that add up to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 6\n\n    Sample Output:\n    [(1, 5), (2, 4)]\n    \"\"\"\n    pairs = []\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[i] + nums[j] == target:\n                pairs.append((nums[i], nums[j]))\n    return pairs\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    target = 6\n    return nums, target\n\nassert f(*g()) == [(1, 5), (2, 4)]\n\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if there exist two numbers in the matrix whose sum is equal to the target.\"\"\"\n    return any(target - num in row for row in matrix for num in row)\n\ndef g(matrix=[[1, 2], [3, 4], [5, 6]], target=10):\n    return matrix, target\n\nassert f(*g())\n",
        "idx_generation": 169,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers contains any duplicate elements.\n    Returns True if there are duplicates, False otherwise.\n    \"\"\"\n    num_set = set()\n\n    for num in nums:\n        if num in num_set:\n            return True\n        num_set.add(num)\n\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 1]\n\nassert f(g())\n",
        "idx_generation": 194,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is a palindrome.\n    Return True if the list is a palindrome, otherwise return False.\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g(arr=[1, 2, 3, 4, 5, 4, 3, 2, 1]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 286,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of numbers whose sum is equal to 10.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == 10:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 369,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers and a target number n, determine if there exists a pair of integers in the list\n    whose sum is equal to n.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False\n\ndef g():\n    return 10, [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(*g())\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose sum is equal to the target.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 6\n    There exists a pair of numbers in the list (1+5) whose sum is equal to the target (6).\n    Therefore, the puzzle is solved.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 6)\n",
        "idx_generation": 457,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with only the even numbers.\n    \n    Sample Input:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \n    Sample Output:\n    [2, 4, 6, 8]\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g()) == [2, 4, 6, 8]\n\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there exists a pair of numbers from the list whose sum is equal to the target number.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Check if a list contains at least one pair of numbers that sum up to the target.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(), target=15)\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the list of integers is sorted in ascending order.\n    \"\"\"\n    for i in range(len(nums) - 1):\n        if nums[i] > nums[i+1]:\n            return False\n    return True\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if each column is in ascending order.\n    Return True if all columns are in ascending order, False otherwise.\n    \"\"\"\n    for j in range(len(matrix[0])):\n        column = [matrix[i][j] for i in range(len(matrix))]\n        if column != sorted(column):\n            return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 6], [3, 6, 9]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 295,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if all numbers in the given list are prime numbers.\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for num in numbers:\n        if not is_prime(num):\n            return False\n    return True\n\ndef g():\n    return [2, 3, 5, 7, 11]\n\nassert f(g())\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers and a target number n, determine if there exists a triplet of integers in the list\n    whose sum is equal to n.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            for k in range(j+1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == n:\n                    return True\n    return False\n\ndef g():\n    return 15, [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(*g())\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the target number can be obtained by combining any two numbers in the list using the four basic arithmetic operations.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n    The target number (9) can be obtained by combining the numbers 4 and 5 using the addition operation (4 + 5 = 9).\n    Therefore, the puzzle is solved.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n            if nums[i] - nums[j] == target:\n                return True\n            if nums[i] * nums[j] == target:\n                return True\n            if nums[j] != 0 and nums[i] / nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 9)\n",
        "idx_generation": 457,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the sum of any two numbers in the list is equal to a given target.\n    \"\"\"\n    target = 10\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return [2, 4, 6, 8]\n\nassert f(g())\n\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there exists a pair of integers in the list that sum up to the target number.\n    Return True if such a pair exists, and False otherwise.\n    \"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        complements.add(target - num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the list whose sum is equal to the target.\n    \"\"\"\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        current_sum = nums[left] + nums[right]\n        if current_sum == target:\n            return True\n        elif current_sum < target:\n            left += 1\n        else:\n            right -= 1\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 9)\n",
        "idx_generation": 177,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[5, 10, 15], lower_bound=0) -> bool:\n    \"\"\"Check if the given number is a multiple of all the numbers in the list.\"\"\"\n    return all((n % i == 0 for i in nums)) and n >= lower_bound\n\ndef g(nums=[5, 10, 15], lower_bound=0):\n    n = 1\n    for i in nums:\n        n *= i\n    return n\n\nassert f(g())\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers is a palindrome.\n\n    Sample Input:\n    [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n\n    A palindrome is a sequence that reads the same backwards as forwards.\n\n    Example:\n    nums = [1, 2, 3, 2, 1]\n    Output: True\n\n    nums = [1, 2, 3, 4, 5]\n    Output: False\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n",
        "idx_generation": 375,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers and a target number n, determine if there exists a subarray in the list\n    whose sum is equal to n.\n    \"\"\"\n    for i in range(len(lst)):\n        sum = 0\n        for j in range(i, len(lst)):\n            sum += lst[j]\n            if sum == n:\n                return True\n    return False\n\ndef g():\n    return 12, [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(*g())\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the target number can be obtained by multiplying any three numbers in the list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 24\n    The target number (24) can be obtained by multiplying the numbers 3, 4, and 2 (3 * 4 * 2 = 24).\n    Therefore, the puzzle is solved.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] * nums[j] * nums[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 24)\n",
        "idx_generation": 457,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if it is possible to find a pair of numbers in the list that add up to the target number.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr: List[int], target: int):\n    arr.append(target - sum(arr))\n    return arr, target\n\nassert f(*g([1, 2, 3, 4, 5], 7)) == True\n\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\ndef g(target = 10):\n    return [1, 2, 4, 5, 6, 7]\nassert f(g())\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(str_list: List[str], n = 3) -> bool:\n    \"\"\"Check if there exists a string in the list that has a length divisible by n.\"\"\"\n    for s in str_list:\n        if len(s) % n == 0:\n            return True\n    return False\ndef g(n = 4):\n    return ['apple', 'banana', 'cherry', 'date', 'elderberry']\nassert f(g())\n",
        "idx_generation": 209,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is in ascending order.\n\n    Sample Input:\n    li = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(li[i] <= li[i+1] for i in range(len(li)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers contains a prime number.\n\n    Example:\n    nums = [4, 6, 8, 10, 12]\n    Output: False\n\n    nums = [4, 6, 7, 10, 12]\n    Output: True\n    \"\"\"\n    def is_prime(n):\n        if n == 2:\n            return True\n        if n < 2 or n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    return any(is_prime(num) for num in nums)\n\ndef g():\n    return [4, 6, 7, 10, 12]\n\nassert f(g()) == True\n",
        "idx_generation": 375,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist two numbers in the given list whose sum is equal to the target number.\n    Return True if such pair exists, False otherwise.\n    \"\"\"\n    n = len(lst)\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g():\n    lst = [2, 4, 6, 8, 10]\n    target = 12\n    return lst, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 407,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(matrix: List[List[int]], target: int) -> Tuple[int, int]:\n    \"\"\"\n    Given a matrix of integers and a target number, find the indices (row, col) of the target number in the matrix.\n    If the target number is not present in the matrix, return (-1, -1).\n    \n    Sample Input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n    \n    Sample Output:\n    (1, 1)\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                return (i, j)\n    return (-1, -1)\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5\n\nassert f(*g()) == (1, 1)\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target value, find the number of pairs of integers\n    in the list that sum up to the target value.\n    \n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 6\n    \n    Sample Output:\n    2\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                count += 1\n    return count\n\ndef g():\n    return [1, 2, 3, 4, 5], 6\n\nassert f(*g()) == 2\n",
        "idx_generation": 315,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if the target number is present in any of the subarrays in the given list.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n\n    Sample Output:\n    True\n    \"\"\"\n    for subarr in arr:\n        if target in subarr:\n            return True\n    return False\n\ndef g(arr=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5):\n    return arr, target\n\nassert f(*g()) == True\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n = 2) -> bool:\n    \"\"\"Check if there exists a sublist of a specified length, such that the sum of its digits is divisible by n.\"\"\"\n    for i in range(len(arr) - n + 1):\n        sublist_sum = 0\n        for j in range(i, i+n):\n            sublist_sum += sum(int(digit) for digit in str(arr[j]))\n        if sublist_sum % n == 0:\n            return True\n    return False\n\ndef g(n = 3):\n    return [12, 34, 56, 78, 90, 123, 456, 789, 987, 654]\n    \nassert f(g())\n",
        "idx_generation": 210,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a Pythagorean triplet.\n    A Pythagorean triplet is a set of three integers a, b, and c, such that a^2 + b^2 = c^2.\n    \"\"\"\n    arr.sort()\n    for i in range(len(arr) - 2):\n        a = arr[i]\n        b = arr[i+1]\n        c = arr[i+2]\n        if a**2 + b**2 == c**2:\n            return True\n    return False\n\ndef g():\n    arr = [3, 4, 5, 6, 7, 8, 9]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if there exists a subsequence that forms a geometric progression, otherwise return False.\n    \"\"\"\n    if len(arr) < 3:\n        return False\n    \n    ratio = arr[1] / arr[0]\n    for i in range(2, len(arr)):\n        if arr[i] / arr[i-1] != ratio:\n            return False\n    return True\n\ndef g(arr: List[int]):\n    return arr\n\nassert f(g([1, 3, 9, 27, 81]))\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number n, return True if there exists\n    two numbers in the list whose sum is equal to n, otherwise return False.\n    \n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    n = 7\n    \n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == n:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 7\n\nassert f(*g()) == True\n\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> Tuple[int, int]:\n    \"\"\"\n    Find two numbers from a list that add up to the target number and return their indices.\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return num_dict[complement], i\n        num_dict[num] = i\n    return -1, -1\n\ndef g(nums=[2, 7, 11, 15], target=9):\n    return nums, target\n\nassert f(*g()) == (0, 1)\n\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Check if there exists a triple of numbers in the list whose sum is equal to the target.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), 10)\n",
        "idx_generation": 321,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list that sum up to a specific target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [2, 4, 6, 8]\nassert f(g())\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]]) -> int:\n    \"\"\"\n    Given a grid of numbers, return the sum of all the numbers in the grid.\n    \"\"\"\n    return sum(sum(row) for row in grid)\n\ndef g(grid=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return grid\n\nassert f(g()) == 45\n\n",
        "idx_generation": 213,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i < j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(matrix=[[1, 0, 0], [2, 3, 0], [4, 5, 6]]):\n    \"\"\"Return the matrix.\"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 313,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if the sum of the elements is greater than 100, otherwise return False.\n    \"\"\"\n    return sum(arr) > 100\n\ndef g(arr: List[int]):\n    return arr\n\nassert f(g([10, 20, 30, 40, 50]))\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[str], n: int) -> List[str]:\n    \"\"\"\n    Given a list of strings and a target number n, return a new list containing\n    the strings whose length is greater than n.\n    \n    Sample Input:\n    arr = ['apple', 'banana', 'cherry', 'grape', 'orange']\n    n = 5\n    \n    Sample Output:\n    ['banana', 'cherry', 'orange']\n    \"\"\"\n    strings = []\n    for s in arr:\n        if len(s) > n:\n            strings.append(s)\n    return strings\n\ndef g():\n    return ['apple', 'banana', 'cherry', 'grape', 'orange'], 5\n\nassert f(*g()) == ['banana', 'cherry', 'orange']\n\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose product is equal to the target.\n    \"\"\"\n    return any(num1 * num2 == target for i, num1 in enumerate(lst) for num2 in lst[i+1:])\n\ndef g(lst: List[int] = [2, 4, 6, 8, 10], target: int = 48) -> List[int]:\n    \"\"\"\n    Generate the list of numbers and target value.\n    \"\"\"\n    return lst, target\n\nassert f(*g())\n",
        "idx_generation": 468,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [i for i in range(-10, 10)]\n\nassert f(g())\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if there exist two numbers in the matrix that sum up to a specific target\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[0])):\n                    if i == k and j == l:\n                        continue\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return True\n    return False\ndef g(target=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in non-decreasing order.\"\"\"\n    return nums == sorted(nums)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if all elements in the given list are odd.\n    \"\"\"\n    return all(num % 2 != 0 for num in arr)\n\ndef g():\n    return [1, 3, 5, 7, 9, 11, 13]\n\nassert f(g())\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the sum of all even numbers in the given list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    30\n    \"\"\"\n    even_sum = 0\n    for num in nums:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 30\n",
        "idx_generation": 378,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, check if there exists a pair of numbers\n    in the list that adds up to the target.\n    \n    Sample Input:\n    arr = [2, 4, 6, 8, 10, 4]\n    target = 12\n    \n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10, 4], 12\n\nassert f(*g())\n",
        "idx_generation": 420,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a subset of numbers in the list whose product is equal to the target.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 24\n    The product of the subset [3, 4] is equal to the target (24).\n    Therefore, the puzzle is solved.\n    \"\"\"\n    def subset_product(nums: List[int], target: int) -> bool:\n        if target == 1:\n            return True\n        if not nums or target < 1:\n            return False\n        include = subset_product(nums[1:], target // nums[0])\n        exclude = subset_product(nums[1:], target)\n        return include or exclude\n\n    return subset_product(nums, target)\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g(), 24)\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> int:\n    \"\"\"\n    Count the number of pairs of elements in the list that sum up to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 6\n\n    Sample Output:\n    2\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                count += 1\n    return count\n\ndef g(target=6):\n    nums = [1, 2, 3, 4, 5]\n    return nums, target\n\nassert f(*g()) == 2\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given array whose sum is equal to the target value.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if sum(arr[i:j]) == target:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], target=7):\n    return arr, target\n\nassert f(*g())\n",
        "idx_generation": 183,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains only even numbers.\"\"\"\n    return all(num % 2 == 0 for num in nums)\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list such that the sum of its elements is equal to 0.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum in prefix_sums or prefix_sum == 0:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\n\ndef g():\n    return [1, -2, 3, 4, -5]\n\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square.\n    A magic square is a square grid of numbers where the numbers in each row, each column, and both diagonals all add up to the same constant.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        column = [matrix[i][j] for i in range(n)]\n        if sum(column) != target_sum:\n            return False\n    \n    # Check diagonals\n    diagonal1 = [matrix[i][i] for i in range(n)]\n    diagonal2 = [matrix[i][n-i-1] for i in range(n)]\n    if sum(diagonal1) != target_sum or sum(diagonal2) != target_sum:\n        return False\n    \n    return True\n\ndef g():\n    matrix = [[2, 7, 6],\n              [9, 5, 1],\n              [4, 3, 8]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 388,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the list that add up to the target number.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), 12)\n",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a subset of numbers in the list whose sum is equal to the target.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n    The sum of the subset [2, 5] is equal to the target (7).\n    Therefore, the puzzle is solved.\n    \"\"\"\n    def subset_sum(nums: List[int], target: int) -> bool:\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        include = subset_sum(nums[1:], target - nums[0])\n        exclude = subset_sum(nums[1:], target)\n        return include or exclude\n\n    return subset_sum(nums, target)\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g(), 7)\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[float], target: float) -> bool:\n    \"\"\"Check if the target float is greater than or equal to any of the floats in the given list\"\"\"\n    for num in arr:\n        if target >= num:\n            return True\n    return False\n\ndef g():\n    return [1.23, 4.56, 7.89, 10.1, 11.2]\n\nassert f(g(), 5.0)\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(arr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is sorted in non-decreasing order.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n\n    The list is sorted in non-decreasing order, so the function should return True.\n    \"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 216,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(matrix=[[1, 0, 0], [2, 3, 0], [4, 5, 6]]):\n    \"\"\"Return the matrix.\"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there exist two distinct indices i and j in the list nums, such that the absolute difference between nums[i] and nums[j] is at most k.\n    \"\"\"\n    num_set = set()\n    for i, num in enumerate(nums):\n        if num in num_set:\n            return True\n        num_set.add(num)\n        if i >= k:\n            num_set.remove(nums[i-k])\n    return False\n\ndef g():\n    nums = [1, 2, 3, 1]\n    k = 3\n    return nums, k\n\nassert f(*g())\n",
        "idx_generation": 388,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[str], target: str) -> bool:\n    \"\"\"\n    Given a list of strings and a target string, check if the target string is a substring of any string in the list.\n    \n    Sample Input:\n    arr = ['apple', 'banana', 'cherry']\n    target = 'an'\n    \n    Sample Output:\n    True\n    \"\"\"\n    for string in arr:\n        if target in string:\n            return True\n    return False\n\ndef g():\n    return ['apple', 'banana', 'cherry'], 'an'\n\nassert f(*g()) == True\n\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Return a list of indices of the two numbers from the given list that add up to the target number.\n\n    Example:\n    nums = [2, 7, 11, 15]\n    target = 9\n    The numbers at indices 0 and 1 (2 and 7) add up to 9.\n    Therefore, the function should return [0, 1].\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n    return []\n\ndef g(nums=[2, 7, 11, 15], target=9):\n    return nums, target\n\nassert f(*g()) == [0, 1]\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Find if there exists a pair of numbers in the list whose sum is equal to the target.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 332,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subarray in the given list that sums up to the target number.\"\"\"\n    prefix_sum = {0: -1}\n    curr_sum = 0\n    for i, num in enumerate(arr):\n        curr_sum += num\n        if curr_sum - target in prefix_sum:\n            return True\n        if curr_sum not in prefix_sum:\n            prefix_sum[curr_sum] = i\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 9)\n\nassert f(*g())\n",
        "idx_generation": 192,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the missing number from a list of consecutive numbers.\n\n    Sample Input:\n    nums = [1, 2, 3, 5]\n\n    Sample Output:\n    4\n    \"\"\"\n    n = len(nums) + 1\n    total_sum = (n * (n + 1)) // 2\n    return total_sum - sum(nums)\n\ndef g():\n    nums = [1, 2, 3, 5]\n    return nums\n\nassert f(g()) == 4\n",
        "idx_generation": 218,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    \"\"\"Check if a given list contains at least two elements whose sum is divisible by 5.\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if (li[i] + li[j]) % 5 == 0:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    A magic square is a square matrix where the sum of each row, each column, and each diagonal is the same.\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n        if sum(row[i] for row in arr) != target_sum:\n            return False\n        if sum(arr[i][i] for i in range(n)) != target_sum:\n            return False\n        if sum(arr[i][n - i - 1] for i in range(n)) != target_sum:\n            return False\n    return True\n\ndef g(arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 392,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"Find two numbers in a list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    \"\"\"Return the list of numbers and the target value\"\"\"\n    return nums, target\n\nassert f(g()[0], g()[1])\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_index=2) -> List[int]:\n    \"\"\"\n    Return a new list containing the numbers from the original list up to the target_index in ascending order.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    [1, 2, 3]\n    \"\"\"\n    return numbers[:target_index+1]\n\ndef g(target_index=2):\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == [1, 2, 3]\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=15):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that adds up to the target.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if target - num in num_set:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums\n\nassert f(g(), 9)\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the sum of all elements in the list is divisible by 5.\"\"\"\n    return sum(arr) % 5 == 0\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    \"\"\"Return the list.\"\"\"\n    return arr\n\nassert f(g())\n",
        "idx_generation": 218,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if each row is in ascending order.\n    Return True if all rows are in ascending order, False otherwise.\n    \"\"\"\n    for row in matrix:\n        if row != sorted(row):\n            return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 6], [3, 6, 9]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 319,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the sum of all the even numbers.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    Sample Output:\n    20 (2 + 4 + 6 + 8 = 20)\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g()) == 20\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list whose product is equal to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] * numbers[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), 24)\n",
        "idx_generation": 468,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target number, check if there exists a pair of numbers in the list that adds up to the target.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    complements = set()\n    for num in numbers:\n        complement = target - num\n        if complement in complements:\n            return True\n        complements.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 9\n\nassert f(*g())\n\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find three numbers in the list that add up to the target number.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=12):\n    return nums\n\nassert f(g(), 12)\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the list whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers=[1, 2, 3, 4, 5], target=9):\n    return numbers\n\nassert f(g(), 9)\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if a list of numbers is a permutation of a sequence of non-negative integers.\n    \"\"\"\n    nums.sort()\n    return nums == list(range(len(nums)))\n\ndef g():\n    return [4, 3, 2, 1, 0]\n\nassert f(g())\n",
        "idx_generation": 219,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"Find the product of all the even elements in the given list.\"\"\"\n    product = 1\n    for num in arr:\n        if num % 2 == 0:\n            product *= num\n    return product\n\ndef g():\n    return [2, 4, 6, 8, 10, 12]\n\nassert f(g()) == 46080\n\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains any palindrome numbers.\n\n    Sample Input:\n    nums = [121, 123, 246, 454]\n\n    Sample Output:\n    True\n    \"\"\"\n    for num in nums:\n        if str(num) == str(num)[::-1]:\n            return True\n    return False\n\ndef g(nums=[121, 123, 246, 454]):\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there is a triplet of numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), 15)\n",
        "idx_generation": 468,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find the maximum product of two numbers in the list that is less than the target number.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    max_product = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product < target and product > max_product:\n                max_product = product\n    return max_product > 0\n\ndef g(nums=[1, 2, 3, 4, 5], target=10):\n    return nums\n\nassert f(g(), 10)\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, check if there exists a subset of the list that adds up to the target sum.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if target < 0 or not nums:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    \n    return subset_sum(nums, target)\n\ndef g():\n    return ([1, 2, 3, 4, 5], 9)\n\nassert f(*g())\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subsequence of 'nums' that adds up to 'n'.\n    \"\"\"\n    if n == 0:\n        return True\n    if len(nums) == 0:\n        return False\n    if nums[0] > n:\n        return f(n, nums[1:])\n    return f(n - nums[0], nums[1:]) or f(n, nums[1:])\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(10, g([1, 2, 3, 4, 5]))\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is sorted in non-decreasing order.\n\n    A list is considered sorted in non-decreasing order if each element is less than or equal to the next element.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    The list is sorted in non-decreasing order.\n    Therefore, the function should return True.\n    \"\"\"\n    return arr == sorted(arr)\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if all the elements in the list are prime numbers.\n\n    Sample Input:\n    nums = [2, 3, 5, 7, 11]\n\n    Sample Output:\n    True\n    \"\"\"\n    for num in nums:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n    return True\n\ndef g(nums=[2, 3, 5, 7, 11]):\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is present in the list\"\"\"\n    return target in nums\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\n# Test case\ntest_nums = [1, 2, 3, 4, 5]\ntest_target = 3\nassert f(*g(test_nums, test_target)) == True\n\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose sum is equal to the target.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 9\n\nassert f(*g())\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given an array of integers and a target number, check if there exist three integers in the array that sum up to the target number.\n    Return True if such a triplet exists, False otherwise.\n    \"\"\"\n    n = len(arr)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=15):\n    \"\"\"\n    Generate an array of integers with a triplet that sums up to the target number.\n    \"\"\"\n    arr = [2, 4, 6, 8]\n    return arr + [target - arr[0] - arr[1]]\n\nassert f(g(), target=15)\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists two numbers in the list that sum up to the target.\"\"\"\n    return any(target - num in nums for num in nums)\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it is sorted in non-decreasing order.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == sorted(arr)\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) != target_sum:\n            return False\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) != target_sum:\n            return False\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(matrix[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(numbers: List[int], target_product: int = 24) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list whose product is equal to the target product.\"\"\"\n    for r in range(1, len(numbers) + 1):\n        for combination in itertools.combinations(numbers, r):\n            product = 1\n            for num in combination:\n                product *= num\n            if product == target_product:\n                return True\n    return False\n\ndef g(target_product: int = 24):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n\n",
        "idx_generation": 473,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target number, find two numbers in the list that sum up to the target.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        complements.add(target - num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g()) == True\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that add up to the target sum.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(numbers=[1, 2, 3, 4, 5], target_sum=9):\n    return numbers\n\nassert f(g(), 9)\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists three numbers in the list that sum up to the target.\"\"\"\n    return any(target - num1 - num2 in nums for num1 in nums for num2 in nums)\n\ndef g(nums=[1, 2, 3, 4, 5], target=12):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if all the elements in each row are unique.\n    Return True if all rows have unique elements, False otherwise.\n    \"\"\"\n    def has_unique_elements(row):\n        return len(row) == len(set(row))\n\n    for row in matrix:\n        if not has_unique_elements(row):\n            return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 327,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Find the maximum difference between any two numbers in the given list.\n\n    Sample Input:\n    arr = [1, 5, 2, 9, 4]\n\n    Sample Output:\n    8\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\ndef g():\n    return [1, 5, 2, 9, 4]\n\nassert f(g()) == 8\n\n",
        "idx_generation": 420,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr1: List[int], arr2: List[int]) -> bool:\n    \"\"\"Check if two lists have any common elements\"\"\"\n    set1 = set(arr1)\n    set2 = set(arr2)\n    return bool(set1.intersection(set2))\n\ndef g():\n    return [1, 2, 3, 4, 5], [4, 5, 6, 7, 8]\n\nassert f(*g())\n\n",
        "idx_generation": 474,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target number, find the pair of numbers with the smallest difference.\n    Return the difference between the two numbers.\n    \"\"\"\n    nums.sort()\n    min_diff = float('inf')\n    for i in range(len(nums)-1):\n        diff = abs(nums[i] - nums[i+1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n\ndef g(nums=[1, 5, 7, 10, 12], target=9):\n    return nums, target\n\nassert f(*g()) == 2\n",
        "idx_generation": 354,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Find if there exists a pair of numbers in the given list that sums up to the target.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 9)\n\nassert f(*g())\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists four numbers in the list that sum up to the target.\"\"\"\n    return any(target - num1 - num2 - num3 in nums for num1 in nums for num2 in nums for num3 in nums)\n\ndef g(nums=[1, 2, 3, 4, 5], target=15):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, determine if the list is sorted in non-decreasing order.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums) - 1):\n        if nums[i] > nums[i + 1]:\n            return False\n    return True\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g()) == True\n\n",
        "idx_generation": 327,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    A magic square is a square matrix in which the sums of each row, each column, and both diagonals are the same.\n\n    Sample Input:\n    matrix = [[2, 7, 6],\n              [9, 5, 1],\n              [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n\n    # Check rows\n    for i in range(n):\n        if sum(matrix[i]) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n\n    # Check diagonals\n    diagonal_sum1 = 0\n    diagonal_sum2 = 0\n    for i in range(n):\n        diagonal_sum1 += matrix[i][i]\n        diagonal_sum2 += matrix[i][n - i - 1]\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n\n    return True\n\ndef g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 425,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Check if the target number can be obtained by adding up any two numbers in the list\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), 9)\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is a perfect square\"\"\"\n    return target ** 0.5 == int(target ** 0.5)\n\ndef g():\n    return [9, 16, 25, 36, 49, 64, 81]\n\nassert f(g(), 36)\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the given list contains two numbers that sum up to the target value.\n    Return True if there are two numbers that sum up to the target, False otherwise.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums=[2, 4, 1, 5, 6, 3], target=10):\n    return (nums, target)\n\nassert f(*g())\n\n",
        "idx_generation": 202,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is in strictly increasing order.\n    Return True if the list is in strictly increasing order, and False otherwise.\n    \"\"\"\n    return all(numbers[i] < numbers[i+1] for i in range(len(numbers)-1))\n\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 234,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a sublist in the given list such that the sum of its elements is a perfect square.\n\n    Example:\n    Input: [1, 2, 3, 4, 5]\n    Output: True\n    Explanation: The sublist [3, 4] has a sum of 7, which is a perfect square.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            sublist = arr[i:j]\n            sublist_sum = sum(sublist)\n            if sublist_sum >= 0 and int(sublist_sum**0.5)**2 == sublist_sum:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> int:\n    \"\"\"\n    Find the sum of all even numbers in the given list.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    30\n    \"\"\"\n    even_sum = sum(num for num in numbers if num % 2 == 0)\n    return even_sum\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 30\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transpose the given matrix and return the modified matrix.\n\n    Sample Input:\n    `matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]`\n\n    Sample Output:\n    `[[1, 4, 7], [2, 5, 8], [3, 6, 9]]`\n    \"\"\"\n    return [[row[i] for row in matrix] for i in range(len(matrix[0]))]\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list such that the sum of the elements in the subarray is equal to target.\n\n    Sample Input:\n    `nums = [1, 2, 3, 4, 5], target = 9`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    for i in range(len(nums)):\n        sum = 0\n        for j in range(i, len(nums)):\n            sum += nums[j]\n            if sum == target:\n                return True\n    return False\n\ndef g(nums: List[int]):\n    return nums, 9\n\nassert f(*g([1, 2, 3, 4, 5]))\n",
        "idx_generation": 364,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target=0) -> bool:\n    \"\"\"Check if there exist three numbers in the list that sum to the target\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            for k in range(j+1, len(x)):\n                if x[i] + x[j] + x[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), 15)\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if there is a duplicate element in the given list of numbers.\n    Return True if a duplicate element is found, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in numbers:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(numbers=[1, 2, 3, 4, 5, 2]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 234,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is symmetric.\n    Return True if it is symmetric, and False otherwise.\n\n    Example:\n    Input: [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n    Output: True\n    Explanation: The matrix is symmetric along its main diagonal.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    if rows != cols:\n        return False\n    \n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> int:\n    \"\"\"\n    Find the maximum difference between any two numbers in the given list.\n\n    Sample Input:\n    numbers = [4, 8, 2, 6, 10, 12]\n\n    Sample Output:\n    10\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    max_diff = max_num - min_num\n    return max_diff\n\ndef g():\n    return [4, 8, 2, 6, 10, 12]\n\nassert f(g()) == 10\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst1: List[int], lst2: List[int]) -> List[int]:\n    \"\"\"Find the common elements between two lists\"\"\"\n    return list(set(lst1) & set(lst2))\n\ndef g():\n    return [1, 2, 3, 4, 5], [4, 5, 6, 7, 8]\n\nassert f(*g()) == [4, 5]\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a pair of numbers in the list whose product is equal to the target.\n\n    If there is a pair, return True.\n    Otherwise, return False.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g():\n    \"\"\"\n    Return a list of numbers.\n    \"\"\"\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 8)\n\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list whose sum is equal to the target value.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        curr_sum = arr[i]\n        j = i + 1\n        while j <= n:\n            if curr_sum == target:\n                return True\n            if curr_sum > target or j == n:\n                break\n            curr_sum += arr[j]\n            j += 1\n    return False\n\ndef g(target=10):\n    arr = [1, 2, 3, 4, 5]\n    return arr, target\n\nassert f(*g())\n",
        "idx_generation": 204,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Find the maximum number in each row of the given matrix and return a list of these maximum numbers.\n    \n    Sample Input:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    \n    Sample Output:\n    [3, 6, 9]\n    \"\"\"\n    return [max(row) for row in matrix]\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [3, 6, 9]\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains a number that is a power of 2.\n    \"\"\"\n    for num in numbers:\n        if num > 0 and num & (num - 1) == 0:\n            return True\n    return False\n\ndef g():\n    return [1, 3, 5, 8, 10, 16, 20]\n\nassert f(g())\n",
        "idx_generation": 330,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains a perfect square number.\n    \"\"\"\n    return any(num**0.5 == int(num**0.5) for num in x)\ndef g():\n    return [2, 4, 6, 8, 10, 12]\nassert f(g())\n",
        "idx_generation": 433,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the product of any two numbers in the list is equal to a certain value.\n\n    Example:\n    numbers = [2, 4, 6, 8, 10]\n    target = 20\n\n    The numbers 2 and 10 have a product of 20, so the function should return True.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] * numbers[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    return [2, 4, 6, 8, 10]\n\nassert f(g(), target=20)\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=8) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that when subtracted gives the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] - nums[j] == target or nums[j] - nums[i] == target:\n                return True\n    return False\n\ndef g(target=8):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 369,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by all numbers in a given list.\"\"\"\n    return all((n % i == 0 for i in nums))\n\ndef g(nums=[2, 3, 5]):\n    ans = 1\n    for i in nums:\n        ans *= i\n    return ans\n\nassert f(g())\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is sorted in non-decreasing order.\n    Return True if it is sorted, False otherwise.\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome, i.e., the same forwards as backwards.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Check if the given list contains any pair of numbers that multiply to the target value.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] * lst[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [target] * 5\n\nassert f(g())\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sum up to a specific value.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 371,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the given list that sum up to the target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=7):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 209,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=10) -> bool:\n    \"\"\"\n    Check if the given number is divisible by the target number.\n    Returns True if the condition is satisfied, False otherwise.\n    \"\"\"\n    return n % target == 0\n\ndef g(target=10):\n    return target * 2\n\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a diagonal matrix\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\nassert f(g())\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all numbers in a list are prime numbers\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return all(is_prime(num) for num in nums)\n\ndef g():\n    return [2, 3, 5, 7, 11, 13]\n\nassert f(g())\n",
        "idx_generation": 437,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, check if there exists a pair of numbers\n    in the list that adds up to the target.\n    \n    Sample Input:\n    arr = [3, 6, 9, 12, 15]\n    target = 21\n    \n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [3, 6, 9, 12, 15], 21\n\nassert f(*g())\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, determine if there are two numbers in the list that add up to\n    the target integer.\n    Returns True if there are two numbers that add up to the target, False otherwise.\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return arr, target\n\nassert f(*g())\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the given list whose sum is equal to the target value.\n    \"\"\"\n    n = len(arr)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        dp[i][0] = True\n        for j in range(1, target + 1):\n            if j < arr[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n\n    return dp[n][target]\n\ndef g(arr=[1, 2, 3, 4, 5], target=7):\n    return arr, target\n\nassert f(*g())\n",
        "idx_generation": 209,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if there exists a column that is strictly increasing.\n    Return True if such a column exists, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    for j in range(cols):\n        column = [matrix[i][j] for i in range(rows)]\n        if column == sorted(column) and len(set(column)) == rows:\n            return True\n\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 4], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 240,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine if there exists a row or column where all the elements are even.\n\n    Sample Input:\n    `[[2, 4, 6], [1, 2, 3], [8, 10, 12]]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    rows = any(all(num % 2 == 0 for num in row) for row in matrix)\n    columns = any(all(row[i] % 2 == 0 for row in matrix) for i in range(len(matrix[0])))\n    return rows or columns\n\ndef g():\n    return [[2, 4, 6], [1, 2, 3], [8, 10, 12]]\n\nassert f(g())\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if all numbers in the given list are prime.\n\n    Example:\n    nums = [2, 3, 5, 7, 11]\n\n    All numbers in the list are prime, so the function should return True.\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return all(is_prime(num) for num in nums)\n\ndef g():\n    return [2, 3, 5, 7, 11]\n\nassert f(g())\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exist two numbers in the given list that add up to the target\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if target - num in num_set:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 9\n\nassert f(*g())\n\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list such that the sum of all elements in the subarray is equal to the target.\n\n    Sample Input:\n    `nums = [1, 2, 3, 4, 5], target = 9`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False\n\ndef g(nums: List[int]):\n    return nums, 9\n\nassert f(*g([1, 2, 3, 4, 5]))\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if there exists a row or column that contains all elements equal to the target.\n    Return True if such a row or column exists, False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    row_target = [0] * rows\n    col_target = [0] * cols\n\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] == target:\n                row_target[i] = 1\n                col_target[j] = 1\n\n    return any(row_target) or any(col_target)\n\ndef g(matrix=[[1, 2, 3], [0, 5, 6], [7, 8, 0]], target=0):\n    return matrix, target\n\nassert f(*g())\n",
        "idx_generation": 212,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list such that the maximum element in the subarray is equal to target.\n\n    Sample Input:\n    `nums = [2, 4, 5, 3], target = 5`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    max_element = float('-inf')\n    max_elements = set()\n\n    for num in nums:\n        max_element = max(max_element, num)\n\n        if max_element == target or target in max_elements:\n            return True\n\n        max_elements.add(max_element)\n\n    return False\n\ndef g(nums: List[int]):\n    return nums, 5\n\nassert f(*g([2, 4, 5, 3]))\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a lower triangular matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i < j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(matrix=[[1, 0, 0], [2, 3, 0], [4, 5, 6]]):\n    \"\"\"Return the matrix.\"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains at least two duplicate elements.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 2]\n    The list contains two duplicate elements.\n    Therefore, the puzzle is solved.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 2, 6, 7]\n\nassert f(g())\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[str], n=0) -> bool:\n    \"\"\"\n    Check if there exist two distinct strings in the list that have a combined length greater than or equal to a specific value.\n    Return True if the target_length is 0 and there are at least two strings in the list.\n    Return False if the target_length is a negative value.\n    \"\"\"\n    if n == 0 and len(lst) >= 2:\n        return True\n    \n    if n < 0:\n        return False\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i]) + len(lst[j]) >= n:\n                return True\n    return False\n\ndef g(n=0):\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\nassert f(g())\n\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target value, find the two integers in the list whose sum is closest to the target value.\n    \n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 7\n    \n    Sample Output:\n    [2, 5]\n    \"\"\"\n    arr.sort()\n    left = 0\n    right = len(arr) - 1\n    closest_sum = float('inf')\n    result = []\n    \n    while left < right:\n        current_sum = arr[left] + arr[right]\n        \n        if current_sum == target:\n            return [arr[left], arr[right]]\n        \n        if abs(current_sum - target) < abs(closest_sum - target):\n            closest_sum = current_sum\n            result = [arr[left], arr[right]]\n        \n        if current_sum < target:\n            left += 1\n        else:\n            right -= 1\n    \n    return result\n\ndef g():\n    return [1, 2, 3, 4, 5], 7\n\nassert f(*g()) == [2, 5]\n\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nimport math\nfrom typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subset of numbers in the given list that multiply to the target.\n    \"\"\"\n    for r in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            if math.prod(subset) == target:\n                return True\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5], target = 120):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 221,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list such that the minimum element in the subarray is equal to target.\n\n    Sample Input:\n    `nums = [2, 4, 5, 3], target = 2`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    min_element = float('inf')\n    min_elements = set()\n\n    for num in nums:\n        min_element = min(min_element, num)\n\n        if min_element == target or target in min_elements:\n            return True\n\n        min_elements.add(min_element)\n\n    return False\n\ndef g(nums: List[int]):\n    return nums, 2\n\nassert f(*g([2, 4, 5, 3]))\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a cyclic permutation of another list.\n\n    Sample Input:\n    nums = [3, 4, 5, 1, 2]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        if all(nums[(i+j) % n] == j+1 for j in range(n)):\n            return True\n    return False\n\ndef g(nums: List[int]):\n    return nums[1:] + [nums[0]]\n\nassert f(g([3, 4, 5, 1, 2])) == True\n\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    A magic square is a square matrix where the sum of each row, each column, and both diagonals is the same.\n    Return True if it is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for i in range(n):\n        if sum(matrix[i]) != target_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) != target_sum:\n            return False\n    \n    # Check diagonal 1\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    \n    # Check diagonal 2\n    if sum(matrix[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n    \n    return True\n\ndef g():\n    matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n    return matrix\n\nassert f(g())\n\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[str], n=0) -> bool:\n    \"\"\"\n    Check if there exist two distinct strings in the list that have a combined length greater than or equal to a specific value.\n    Return True if the target_length is 0 and there are at least two strings in the list.\n    Return False if the target_length is a negative value.\n    \"\"\"\n    if n == 0 and len(lst) >= 2:\n        return True\n    \n    if n < 0:\n        return False\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i]) + len(lst[j]) >= n:\n                return True\n    return False\n\ndef g(n=0):\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\nassert f(g())\n\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=20) -> bool:\n    \"\"\"Find a pair of numbers in a list whose sum is equal to the target sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target_sum-9]\nassert f(g())\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=50) -> bool:\n    \"\"\"\n    Check if a given number n is greater than the target number.\n    Return True if n is greater than target, False otherwise.\n    \"\"\"\n    def is_greater(n, target):\n        return n > target\n\n    return is_greater(n, target)\n\ndef g(target=50):\n    return target + 1\n\nassert f(g())\n\n",
        "idx_generation": 221,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, check if there is a subset of the list that sums up to the target value.\n    \"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target-nums[0]) or subset_sum(nums[1:], target)\n    \n    return subset_sum(nums, target)\n\ndef g(nums=[10, 20, 30, 40, 50]):\n    \"\"\"\n    Return the list of numbers.\n    \"\"\"\n    return nums\n\nassert f(g())\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given array is sorted in non-decreasing order.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n\n    The output should be:\n    True\n    \"\"\"\n    return arr == sorted(arr)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n\n\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if all elements in the given list are prime numbers.\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    for num in arr:\n        if not is_prime(num):\n            return False\n    return True\n\ndef g(arr=[2, 3, 5, 7, 11]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, check if the target value is divisible by any element in the list.\n    \n    Sample Input:\n    arr = [2, 4, 6, 8, 10]\n    target = 20\n    \n    Sample Output:\n    True\n    \"\"\"\n    for num in arr:\n        if target % num == 0:\n            return True\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10], 20\n\nassert f(*g()) == True\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sums up to the target number.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(), target=10)\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the given list such that the sum of its elements is equal to zero.\n\n    Sample Input:\n    `nums = [2, -2, 3, 1, -1]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    def is_zero_sum(subset):\n        return sum(subset) == 0\n\n    def find_subsequences(nums, idx, subset):\n        if idx == len(nums):\n            if is_zero_sum(subset):\n                return True\n            return False\n\n        if find_subsequences(nums, idx + 1, subset + [nums[idx]]):\n            return True\n\n        if find_subsequences(nums, idx + 1, subset):\n            return True\n\n        return False\n\n    return find_subsequences(nums, 0, [])\n\ndef g(nums: List[int]):\n    return [nums]\n\nassert f(*g([2, -2, 3, 1, -1]))\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of positive integers, return the sum of the squares of all the odd numbers in the list.\n    \n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \n    Sample Output:\n    165\n    \"\"\"\n    return sum([num**2 for num in arr if num % 2 != 0])\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g()) == 165\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target integer, return a list of pairs\n    of integers from the list that add up to the target.\n\n    Sample Input:\n    arr = [1, 3, 5, 7, 9]\n    target = 10\n\n    Sample Output:\n    [(1, 9), (3, 7)]\n    \"\"\"\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                pairs.append((arr[i], arr[j]))\n    return pairs\n\ndef g(arr=[1, 3, 5, 7, 9], target=10):\n    return arr, target\n\nassert f(*g()) == [(1, 9), (3, 7)]\n\n",
        "idx_generation": 403,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    nums_set = set(nums)\n    \n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            return True\n    \n    return False\n\ndef g(nums=[2, 4, 6, 8], target=10):\n    return nums\n\nassert f(g(), 10)\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n\n    Sample Input:\n    nums = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums=[1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers is sorted in non-decreasing order.\n\n    Sample Input:\n    li = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(li[i] <= li[i + 1] for i in range(len(li) - 1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    A magic square is a square matrix in which the sum of each row, each column, and both diagonals are the same.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check row sums\n    for i in range(n):\n        if sum(matrix[i]) != target_sum:\n            return False\n    \n    # Check column sums\n    for j in range(n):\n        column_sum = 0\n        for i in range(n):\n            column_sum += matrix[i][j]\n        if column_sum != target_sum:\n            return False\n    \n    # Check diagonal sums\n    diagonal_sum1 = 0\n    diagonal_sum2 = 0\n    for i in range(n):\n        diagonal_sum1 += matrix[i][i]\n        diagonal_sum2 += matrix[i][n-i-1]\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n    \n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers, find two numbers that sum up to the target value.\n    Return the indices of the two numbers as a list. If no such pair exists, return an empty list.\n\n    Example:\n    Input: arr = [2, 7, 11, 15], target = 9\n    Output: [0, 1]\n    Explanation: The numbers at indices 0 and 1 (2 and 7) sum up to the target value 9.\n    \"\"\"\n    complements = {}\n    for i, num in enumerate(arr):\n        complement = target - num\n        if complement in complements:\n            return [complements[complement], i]\n        complements[num] = i\n    return []\n\ndef g(arr=[2, 7, 11, 15], target=9):\n    return arr, target\n\nassert f(*g()) == [0, 1]\n",
        "idx_generation": 412,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are any two numbers in the given list that sum up to the target number.\n\n    Example:\n    numbers = [1, 2, 3, 4, 5]\n    target = 7\n\n    The numbers 2 and 5 sum up to 7, so the function should return True.\n\n    Hint: You can use nested loops to compare each pair of numbers.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers=[1, 2, 3, 4, 5], target=7):\n    return numbers, target\n\nassert f(*g()) == True\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the given list that add up to the target number.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums = [2, 4, 7, 11, 15], target = 9):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int]) -> int:\n    \"\"\"\n    Find the maximum element in the given list of integers.\n\n    Sample Input:\n    li = [4, 7, 2, 9, 5]\n\n    Sample Output:\n    9\n    \"\"\"\n    return max(li)\n\ndef g():\n    return [4, 7, 2, 9, 5]\n\nassert f(g()) == 9\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of positive integers, return the sum of all the even numbers.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    30\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\n\nassert f(g()) == 30\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the maximum number in the list that is less than the target.\n    If no such number exists, return -1.\n    \"\"\"\n    max_num = -1\n    for num in nums:\n        if num < target and num > max_num:\n            max_num = num\n    return max_num\n\ndef g(nums=[10, 5, 8, 12, 3], target=9):\n    return (nums, target)\n\nassert f(*g()) == 8\n\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist two numbers in the list that sum up to the target number.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g(lst: List[int] = random.sample(range(1, 100), 10), target: int = random.randint(1, 100)):\n    return lst, target\n\nassert f(*g())\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list that adds up to 10.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    num_set = set()\n    for num in numbers:\n        if 10 - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n\n",
        "idx_generation": 248,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is sorted in non-decreasing order.\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a perfect square list.\n\n    A list is considered a perfect square list if the square root of each element in the list is an integer.\n\n    Sample Input:\n    `nums = [4, 9, 16, 25]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    for num in nums:\n        if num < 0 or int(num**0.5)**2 != num:\n            return False\n    return True\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([4, 9, 16, 25]))\n\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there exists a pair of numbers in the list whose sum is equal to the target number.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n    return nums, target\n\nassert f(*g())\n\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if any two numbers in the given list sum up to the target number.\n\n    Example:\n    numbers = [1, 2, 3, 4, 5]\n    target = 7\n\n    The numbers 3 and 4 sum up to the target number 7, so the function should return True.\n\n    Hint: You can use nested loops to iterate over each pair of numbers in the list.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers=[1, 2, 3, 4, 5], target=7):\n    return numbers, target\n\nassert f(*g()) == True\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) -> bool:\n    \"\"\"\n    Check if the number n is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(lst=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]):\n    return lst[0]\n\nassert f(g())\n",
        "idx_generation": 249,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Find the maximum number in a given list.\n\n    Sample Input:\n    arr = [5, 8, 2, 10, 3]\n\n    Sample Output:\n    10\n    \"\"\"\n    max_num = arr[0]\n    for num in arr:\n        if num > max_num:\n            max_num = num\n    return max_num\n\ndef g():\n    return [5, 8, 2, 10, 3]\n\nassert f(g()) == 10\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list whose sum is equal to 10.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == 10:\n                return True\n    return False\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list such that the sum of its elements is equal to target,\n    and the subarray contains at least two positive numbers.\n\n    Sample Input:\n    `nums = [3, -4, 7, 2, 1, -8], target = 5`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n\n        if prefix_sum == target and any(n > 0 for n in nums):\n            return True\n\n        if prefix_sum - target in prefix_sums:\n            return True\n\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int]):\n    return nums, 5\n\nassert f(*g([3, -4, 7, 2, 1, -8]))\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Find if there are two distinct numbers in the list that sum up to the target value.\n    Return True if a pair of numbers is found, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in numbers:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(numbers=[1, 2, 3, 4, 5], target=7):\n    return numbers\n\nassert f(g(), 7)\n",
        "idx_generation": 234,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a given list of integers is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g(nums=[1, 2, 3, 2, 1]):\n    \"\"\"\n    Generate a palindrome list of integers.\n    \"\"\"\n    return nums\n\nassert f(g())\n",
        "idx_generation": 249,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], n: int = 3) -> bool:\n    \"\"\"\n    Check if the sum of the last n elements in the list is greater than the sum of the first n elements.\n    Return True if it is, False otherwise.\n    \"\"\"\n    assert len(arr) >= 2 * n and n > 0\n    first_sum = sum(arr[:n])\n    last_sum = sum(arr[-n:])\n    return last_sum > first_sum\n\ndef g():\n    return ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n\nassert f(*g())\n",
        "idx_generation": 356,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains three consecutive numbers.\n    \"\"\"\n    for i in range(len(numbers)-2):\n        if numbers[i]+1 == numbers[i+1] and numbers[i+1]+1 == numbers[i+2]:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 9\n\nassert f(*g()) == True\n\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, check if there is a combination of the list that sums up to the target value.\n    \"\"\"\n    from itertools import combinations\n    \n    return any(sum(comb) == target for r in range(len(nums)+1) for comb in combinations(nums, r))\n\ndef g(nums=[10, 20, 30, 40, 50]):\n    \"\"\"\n    Return the list of numbers.\n    \"\"\"\n    return nums\n\nassert f(g())\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=50) -> bool:\n    \"\"\"\n    Given an integer n, check if it is a multiple of the target.\n\n    Sample Input:\n    `100`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return n % target == 0\n\ndef g(n=100, target=50):\n    return n\n\nassert f(g())\n",
        "idx_generation": 250,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains all even numbers.\n    Return True if it does, False otherwise.\n    \"\"\"\n    for num in lst:\n        if num % 2 != 0:\n            return False\n    return True\n\ndef g(lst=[2, 4, 6, 8]):\n    return lst\n\nassert f(g())\n",
        "idx_generation": 356,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    A magic square is a square matrix in which the sums of each row, column, and diagonal are equal.\n    \"\"\"\n    n = len(arr)\n\n    # Calculate the sum of the first row\n    target_sum = sum(arr[0])\n\n    # Check rows\n    for row in arr:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for i in range(n):\n        col_sum = sum(arr[j][i] for j in range(n))\n        if col_sum != target_sum:\n            return False\n\n    # Check diagonals\n    diagonal1_sum = sum(arr[i][i] for i in range(n))\n    diagonal2_sum = sum(arr[i][n-1-i] for i in range(n))\n    if diagonal1_sum != target_sum or diagonal2_sum != target_sum:\n        return False\n\n    return True\n\ndef g():\n    arr = [[2, 7, 6],\n           [9, 5, 1],\n           [4, 3, 8]]\n    return arr\n\nassert f(g())\n\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find two numbers in a list that sum up to the target value.\n    Return the indices of the numbers found.\n\n    Example:\n    arr = [2, 4, 6, 8, 10]\n    target = 12\n\n    The numbers 2 and 10 sum up to the target value 12,\n    so the function should return the indices [0, 4].\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return [i, j]\n    return []\n\ndef g():\n    return ([2, 4, 6, 8, 10], 12)\n\nassert f(*g()) == [0, 4]\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"\n    Check if there exists a sublist in the given list such that the sum of its elements is equal to the target number.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            sublist = arr[i:j]\n            if sum(sublist) == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if a given list of integers is sorted in ascending order.\n    \"\"\"\n    for i in range(len(nums) - 1):\n        if nums[i] > nums[i + 1]:\n            return False\n    return True\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is sorted in non-decreasing order.\n    Return True if it is, False otherwise.\n    \"\"\"\n    return lst == sorted(lst)\n\ndef g(lst=[1, 2, 3, 4]):\n    return lst\n\nassert f(g())\n",
        "idx_generation": 356,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is a magic square, which is a square grid of numbers such that the sums of the numbers in each row, each column, and both main diagonals are the same.\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in range(n):\n        if sum(matrix[i][col] for i in range(n)) != target_sum:\n            return False\n    \n    # Check main diagonal\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    \n    # Check secondary diagonal\n    if sum(matrix[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n    \n    return True\n\ndef g():\n    return ([[2, 7, 6], [9, 5, 1], [4, 3, 8]],)\n\nassert f(*g())\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[List[int]]:\n    \"\"\"\n    Find all unique combinations in the 'nums' list where the sum of the combinations is equal to the 'target'.\n\n    Example:\n    nums = [2, 3, 6, 7]\n    target = 7\n\n    The unique combinations that sum up to the target are:\n    [[2, 2, 3], [7]]\n    \"\"\"\n    def backtrack(remain, current_combination, start):\n        if remain == 0:\n            result.append(list(current_combination))\n            return\n        elif remain < 0:\n            return\n        for i in range(start, len(nums)):\n            current_combination.append(nums[i])\n            backtrack(remain - nums[i], current_combination, i)\n            current_combination.pop()\n\n    result = []\n    backtrack(target, [], 0)\n    return result\n\ndef g():\n    nums = [2, 3, 6, 7]\n    target = 7\n    return nums, target\n\nassert f(*g()) == [[2, 2, 3], [7]]\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(arr=[-1, 0, 1, 2, -1, -4], target=0):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the given list such that the sum of its elements is equal to zero.\n\n    Sample Input:\n    `nums = [1, -1, 2, -2, 3, -3]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    def is_zero_sum(subset):\n        return sum(subset) == 0\n\n    def find_subsequences(nums, idx, subset):\n        if idx == len(nums):\n            if is_zero_sum(subset):\n                return True\n            return False\n\n        if find_subsequences(nums, idx + 1, subset + [nums[idx]]):\n            return True\n\n        if find_subsequences(nums, idx + 1, subset):\n            return True\n\n        return False\n\n    return find_subsequences(nums, 0, [])\n\ndef g(nums: List[int]):\n    return [nums]\n\nassert f(*g([1, -1, 2, -2, 3, -3]))\n",
        "idx_generation": 254,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains a subsequence that forms a geometric progression.\n    Returns True if such subsequence exists, False otherwise.\n    \"\"\"\n    arr.sort()\n    for i in range(len(arr) - 2):\n        if arr[i+1] / arr[i] == arr[i+2] / arr[i+1]:\n            return True\n    return False\n\ndef g():\n    return [2, 4, 8, 16, 32]\n\nassert f(g())\n\n",
        "idx_generation": 357,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the sum of all the even numbers in the list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5, 6]\n\n    Sample Output:\n    12\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums\n\nassert f(g()) == 12\n\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the sum of any two numbers in the list is equal to the target number.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(), 10)\n",
        "idx_generation": 455,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=12):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of positive integers, find the maximum product of any two numbers in the list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 20\n",
        "idx_generation": 254,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains only even elements.\n    Returns True if all elements are even, False otherwise.\n    \"\"\"\n    for num in arr:\n        if num % 2 != 0:\n            return False\n    return True\n\ndef g(arr=[2, 4, 6, 8, 10]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 357,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains any negative numbers.\n    Return True if there are negative numbers, False otherwise.\n    \"\"\"\n    return any(num < 0 for num in nums)\n\ndef g():\n    return [1, -2, 3, -4, 5]\n\nassert f(g()) == True\n\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number k, find all unique pairs of numbers in the list that sum up to k.\n    Return a list of tuples representing the pairs.\n\n    Example:\n    Input: [1, 2, 3, 4, 5, 6], k = 7\n    Output: [(1, 6), (2, 5), (3, 4)]\n    \"\"\"\n    pairs = set()\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == k:\n                pairs.add((arr[i], arr[j]))\n    return list(pairs)\n\ndef g():\n    return ([1, 2, 3, 4, 5, 6], 7)\n\nassert f(*g()) == [(1, 6), (2, 5), (3, 4)]\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of elements in the array that sums up to the target.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    complement = set()\n    for num in arr:\n        if num in complement:\n            return True\n        complement.add(target - num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 7\n\nassert f(*g())\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Sort the given list of integers in non-descending order.\n    Returns the sorted list.\n    \"\"\"\n    return sorted(nums)\n\ndef g(nums=[5, 2, 9, 1, 7, 3]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 5, 7, 9]\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a diagonal matrix.\n    A diagonal matrix is a square matrix with all non-diagonal elements equal to zero.\n    Return True if the matrix is diagonal, and False otherwise.\n    \"\"\"\n    n = len(matrix)\n    \n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    \n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\nassert f(g())\n\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Find all the prime numbers in a given list of integers.\n\n    Sample Input:\n    nums = [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    [2, 3, 5, 7]\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [num for num in nums if is_prime(num)]\n\ndef g():\n    return [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [2, 3, 5, 7]\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a list of lists containing integers and a target value, check if the target value is the maximum value in any sublist.\n    \n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 9\n    \n    Sample Output:\n    True\n    \"\"\"\n    for sublist in arr:\n        if max(sublist) == target:\n            return True\n    return False\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]], 9\n\nassert f(*g()) == True\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if the given matrix contains the target number.\n\n    Sample Input:\n    matrix = [\n        [1, 3, 5],\n        [2, 4, 6],\n        [7, 8, 9]\n    ]\n    target = 4\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    if n == 0:\n        return False\n    m = len(matrix[0])\n    if m == 0:\n        return False\n    row, col = 0, m - 1\n    while row < n and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False\n\ndef g():\n    return [[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4\n\nassert f(*g())\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, numbers=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"\n    Check if the given number is a prime number.\n    \"\"\"\n    return n in numbers\n\ndef g(numbers=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return numbers[0]\n\nassert f(g())\n",
        "idx_generation": 261,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Find the sum of all the even numbers in the given list.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 6]\n\n    Sample Output:\n    12\n    \"\"\"\n    return sum(num for num in arr if num % 2 == 0)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g()) == 12\n\n",
        "idx_generation": 364,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it contains a prime number.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    for num in nums:\n        if is_prime(num):\n            return True\n    return False\n\ndef g():\n    return [4, 6, 8, 9, 10, 11]\n\nassert f(g())\n\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum: int) -> List[List[int]]:\n    \"\"\"\n    Given a list of numbers and a target sum, find all pairs of distinct elements in the list\n    whose sum is equal to the target sum.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target_sum = 7\n\n    Sample Output:\n    [[2, 5], [3, 4]]\n    \"\"\"\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                pairs.append([nums[i], nums[j]])\n    return pairs\n\ndef g(nums=[1, 2, 3, 4, 5], target_sum=7):\n    return nums, target_sum\n\nassert f(*g()) == [[2, 5], [3, 4]]\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in a list whose sum equals a target number.\n    \"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        complements.add(target - num)\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10, 12, 14]\n\nassert f(g(), target=16)\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if the list is sorted in non-decreasing order.\n    \"\"\"\n    return numbers == sorted(numbers)\n\ndef g(n=5):\n    return [i for i in range(n)]\n\nassert f(g())\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n\n    If the matrix is symmetric, return True.\n    Otherwise, return False.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    \"\"\"\n    Return the matrix.\n    \"\"\"\n    return matrix\n\nassert f(g())\n\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers is a palindrome, meaning it reads the same forwards and backwards.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find three numbers in the list that add up to the target number.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5], target = 12):\n    return nums\n\nassert f(g(), 12)\n",
        "idx_generation": 463,
        "target_skills": null
    }
]