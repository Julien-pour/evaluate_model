[{"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(arr: list, target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, find if there are two integers in the list whose sum is equal to the target.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(length: int = 10, target: int = 10):\n    \"\"\"\n    Generate a list of random integers of a given length and a target value.\n    \"\"\"\n    arr = [random.randint(1, 10) for _ in range(length)]\n    return arr, target\n\nassert f(g())\n", "emb": null, "idx_generation": 400, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(arr: list, target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, find if there are two integers in the list whose sum is equal to the target.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(length: int = 10, target: int = 10):\n    \"\"\"\n    Generate a list of random integers of a given length and a target value.\n    \"\"\"\n    arr = [random.randint(1, 10) for _ in range(length)]\n    return arr, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(lst: list, target: int) -> bool:\n    \"\"\"\n    Find if there are three numbers in the list that sum up to the target value.\n    \"\"\"\n    lst.sort()\n    n = len(lst)\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = lst[i] + lst[left] + lst[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(length: int = 10, target: int = 10):\n    \"\"\"\n    Generate a list of random integers of a given length and a target value.\n    \"\"\"\n    arr = [random.randint(1, 10) for _ in range(length)]\n    return arr, target\n\nassert f(g())\n", "emb": null, "idx_generation": 400, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(lst: list, target: int) -> bool:\n    \"\"\"\n    Find if there are three numbers in the list that sum up to the target value.\n    \"\"\"\n    lst.sort()\n    n = len(lst)\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = lst[i] + lst[left] + lst[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False", "solution_func": "def g(length: int = 10, target: int = 10):\n    \"\"\"\n    Generate a list of random integers of a given length and a target value.\n    \"\"\"\n    arr = [random.randint(1, 10) for _ in range(length)]\n    return arr, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(mat: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers sorted in non-decreasing order from left to right and top to bottom, \n    find if a target value exists in the matrix.\n    \"\"\"\n    if not mat or not mat[0]:\n        return False\n    rows, cols = len(mat), len(mat[0])\n    row, col = 0, cols - 1\n    while row < rows and col >= 0:\n        if mat[row][col] == target:\n            return True\n        elif mat[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False\n\ndef g(rows: int = 3, cols: int = 3, target: int = 5):\n    \"\"\"\n    Generate a matrix of random integers with a given number of rows and columns, along with a target value.\n    \"\"\"\n    mat = [[random.randint(1, 10) for _ in range(cols)] for _ in range(rows)]\n    return mat, target\n\nassert f(g())\n", "emb": null, "idx_generation": 400, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(mat: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers sorted in non-decreasing order from left to right and top to bottom, \n    find if a target value exists in the matrix.\n    \"\"\"\n    if not mat or not mat[0]:\n        return False\n    rows, cols = len(mat), len(mat[0])\n    row, col = 0, cols - 1\n    while row < rows and col >= 0:\n        if mat[row][col] == target:\n            return True\n        elif mat[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False", "solution_func": "def g(rows: int = 3, cols: int = 3, target: int = 5):\n    \"\"\"\n    Generate a matrix of random integers with a given number of rows and columns, along with a target value.\n    \"\"\"\n    mat = [[random.randint(1, 10) for _ in range(cols)] for _ in range(rows)]\n    return mat, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: List[float], a=0.5, s=0.3, e=1.5) -> bool:\n    \"\"\"Create a list that is a subrange of a geometric sequence.\"\"\"\n    return x[0] == a and x[-1] <= e and (x[-1] * s > e) and all([x[i] * s == x[i + 1] for i in range(len(x) - 1)])\n\ndef g(a=0.5, s=0.3, e=1.5):\n    return [a * sqrt(s)**n for n in range(int((log(e, s) - log(a, s))//2)+1)]\n\nassert f(g())\n", "emb": null, "idx_generation": 400, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: List[float], a=0.5, s=0.3, e=1.5) -> bool:\n    \"\"\"Create a list that is a subrange of a geometric sequence.\"\"\"\n    return x[0] == a and x[-1] <= e and (x[-1] * s > e) and all([x[i] * s == x[i + 1] for i in range(len(x) - 1)])", "solution_func": "def g(a=0.5, s=0.3, e=1.5):\n    return [a * sqrt(s)**n for n in range(int((log(e, s) - log(a, s))//2)+1)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[str], a='apple', b='orange', c='banana') -> bool:\n    \"\"\"Create a list that contains a specific sequence of strings.\"\"\"\n    return x[0] == a and x[1] == b and x[2] == c and len(x) == 3\n\ndef g(a='apple', b='orange', c='banana'):\n    return [a, b, c]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 400, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[str], a='apple', b='orange', c='banana') -> bool:\n    \"\"\"Create a list that contains a specific sequence of strings.\"\"\"\n    return x[0] == a and x[1] == b and x[2] == c and len(x) == 3", "solution_func": "def g(a='apple', b='orange', c='banana'):\n    return [a, b, c]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], a=10, s=2, e=100) -> bool:\n    \"\"\"Create a list that is a subrange of an arithmetic sequence with even numbers only.\"\"\"\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] and x[i] % 2 == 0 for i in range(len(x) - 1)])\n\ndef g(a=10, s=2, e=100):\n    return [n for n in range(a, e + 1, s) if n % 2 == 0]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 400, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], a=10, s=2, e=100) -> bool:\n    \"\"\"Create a list that is a subrange of an arithmetic sequence with even numbers only.\"\"\"\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] and x[i] % 2 == 0 for i in range(len(x) - 1)])", "solution_func": "def g(a=10, s=2, e=100):\n    return [n for n in range(a, e + 1, s) if n % 2 == 0]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exists a pair of integers in the list that add up to the target value.\n    \"\"\"\n    return any((x + y == target for x in arr for y in arr if x != y))\ndef g(arr = [1, 2, 3, 4, 5], target = 10):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 400, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exists a pair of integers in the list that add up to the target value.\n    \"\"\"\n    return any((x + y == target for x in arr for y in arr if x != y))", "solution_func": "def g(arr = [1, 2, 3, 4, 5], target = 10):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5], max_val=5) -> bool:\n    \"\"\"\n    Check if the given integer is present in the list of numbers and is less than or equal to the maximum value.\n    \"\"\"\n    return n in nums and n <= max_val\ndef g(nums = [1, 2, 3, 4, 5], max_val = 5):\n    return nums[0]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 400, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5], max_val=5) -> bool:\n    \"\"\"\n    Check if the given integer is present in the list of numbers and is less than or equal to the maximum value.\n    \"\"\"\n    return n in nums and n <= max_val", "solution_func": "def g(nums = [1, 2, 3, 4, 5], max_val = 5):\n    return nums[0]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, char='a', min_len=3) -> bool:\n    \"\"\"\n    Check if the given character is present in the string and if the length of the string is at least the minimum length.\n    \"\"\"\n    return char in s and len(s) >= min_len\ndef g(char = 'a', min_len = 3):\n    return char * min_len\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 400, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, char='a', min_len=3) -> bool:\n    \"\"\"\n    Check if the given character is present in the string and if the length of the string is at least the minimum length.\n    \"\"\"\n    return char in s and len(s) >= min_len", "solution_func": "def g(char = 'a', min_len = 3):\n    return char * min_len", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(strings: List[str], char='e') -> bool:\n    \"\"\"Check if every string in the list contains the given character.\"\"\"\n    return all(char in s for s in strings)\ndef g(strings=['hello', 'world', 'python']):\n    return strings\nassert f(g())\n", "emb": null, "idx_generation": 400, "target_skills": null, "problem_func": "from typing import*\ndef f(strings: List[str], char='e') -> bool:\n    \"\"\"Check if every string in the list contains the given character.\"\"\"\n    return all(char in s for s in strings)", "solution_func": "def g(strings=['hello', 'world', 'python']):\n    return strings", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 401, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 401, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int], threshold=100) -> bool:\n    \"\"\"Check if the sum of the square roots of the numbers in the list is greater than the threshold\"\"\"\n    total = sum([math.sqrt(num) for num in nums])\n    return total > threshold\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 401, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(nums: List[int], threshold=100) -> bool:\n    \"\"\"Check if the sum of the square roots of the numbers in the list is greater than the threshold\"\"\"\n    total = sum([math.sqrt(num) for num in nums])\n    return total > threshold", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=15) -> bool:\n    \"\"\"Find three numbers from the given list that sum up to the target value.\"\"\"\n    return any(sum(comb) == target for comb in combinations(arr, 3))\ndef g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    from itertools import combinations\n    return next(comb for comb in combinations(arr, 3) if sum(comb) == 15)\nassert f(g())\n", "emb": null, "idx_generation": 401, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=15) -> bool:\n    \"\"\"Find three numbers from the given list that sum up to the target value.\"\"\"\n    return any(sum(comb) == target for comb in combinations(arr, 3))", "solution_func": "def g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    from itertools import combinations\n    return next(comb for comb in combinations(arr, 3) if sum(comb) == 15)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, pattern=\"abc\") -> bool:\n    \"\"\"Check if the given string follows the pattern.\"\"\"\n    return all(ch == pattern[i % len(pattern)] for i, ch in enumerate(s))\ndef g(pattern = \"abc\"):\n    return \"\".join(pattern * 10)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 401, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, pattern=\"abc\") -> bool:\n    \"\"\"Check if the given string follows the pattern.\"\"\"\n    return all(ch == pattern[i % len(pattern)] for i, ch in enumerate(s))", "solution_func": "def g(pattern = \"abc\"):\n    return \"\".join(pattern * 10)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if the sum of any two numbers in the given list is equal to the target value.\"\"\"\n    return any(num + other_num == target for i, num in enumerate(arr) for other_num in arr[i+1:])\ndef g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return sum(arr)\nassert f(g())\n", "emb": null, "idx_generation": 401, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if the sum of any two numbers in the given list is equal to the target value.\"\"\"\n    return any(num + other_num == target for i, num in enumerate(arr) for other_num in arr[i+1:])", "solution_func": "def g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return sum(arr)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, c='a', count=5) -> bool:\n    \"\"\"Check if a certain character appears a certain number of times in a string\"\"\"\n    return s.count(c) == count\ndef g(c='a', count=5):\n    return c * count + 'b'\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 401, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, c='a', count=5) -> bool:\n    \"\"\"Check if a certain character appears a certain number of times in a string\"\"\"\n    return s.count(c) == count", "solution_func": "def g(c='a', count=5):\n    return c * count + 'b'", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(li: List[int], target=100, k=3) -> bool:\n    \"\"\"Find a list that can be divided into k sublists with the same sum equal to the target\"\"\"\n    if sum(li) % k != 0:\n        return False\n    subset_sum = sum(li) // k\n    return can_partition(li, subset_sum, subset_sum, k, 0, {})\ndef g(target=100, k=3):\n    return [target // k] * k\ndef can_partition(li, subset_sum, remaining_sum, k, current_index, memo):\n    if current_index == len(li):\n        return k == 0\n    if (current_index, remaining_sum, k) in memo:\n        return memo[(current_index, remaining_sum, k)]\n    if remaining_sum == 0:\n        return can_partition(li, subset_sum, subset_sum, k - 1, 0, memo)\n    if remaining_sum < 0 or current_index >= len(li):\n        return False\n    if can_partition(li, subset_sum, remaining_sum - li[current_index], k, current_index + 1, memo):\n        memo[(current_index, remaining_sum, k)] = True\n        return True\n    memo[(current_index, remaining_sum, k)] = can_partition(li, subset_sum, remaining_sum, k, current_index + 1, memo)\n    return memo[(current_index, remaining_sum, k)]\nassert f(g())\n", "emb": null, "idx_generation": 401, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], target=100, k=3) -> bool:\n    \"\"\"Find a list that can be divided into k sublists with the same sum equal to the target\"\"\"\n    if sum(li) % k != 0:\n        return False\n    subset_sum = sum(li) // k\n    return can_partition(li, subset_sum, subset_sum, k, 0, {})", "solution_func": "def g(target=100, k=3):\n    return [target // k] * k\ndef can_partition(li, subset_sum, remaining_sum, k, current_index, memo):\n    if current_index == len(li):\n        return k == 0\n    if (current_index, remaining_sum, k) in memo:\n        return memo[(current_index, remaining_sum, k)]\n    if remaining_sum == 0:\n        return can_partition(li, subset_sum, subset_sum, k - 1, 0, memo)\n    if remaining_sum < 0 or current_index >= len(li):\n        return False\n    if can_partition(li, subset_sum, remaining_sum - li[current_index], k, current_index + 1, memo):\n        memo[(current_index, remaining_sum, k)] = True\n        return True\n    memo[(current_index, remaining_sum, k)] = can_partition(li, subset_sum, remaining_sum, k, current_index + 1, memo)\n    return memo[(current_index, remaining_sum, k)]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(li: List[int], target=100, k=3) -> bool:\n    \"\"\"Find a list that can be divided into k sublists with the same sum equal to the target\"\"\"\n    if sum(li) % k != 0:\n        return False\n    subset_sum = sum(li) // k\n    return can_partition(li, subset_sum, subset_sum, k, 0, {})\ndef g(target=100, k=3):\n    return [target // k] * (k-1) + [target // k + target % k]\ndef can_partition(li, subset_sum, remaining_sum, k, current_index, memo):\n    if current_index == len(li):\n        return k == 0\n    if (current_index, remaining_sum, k) in memo:\n        return memo[(current_index, remaining_sum, k)]\n    if remaining_sum == 0:\n        return can_partition(li, subset_sum, subset_sum, k - 1, 0, memo)\n    if remaining_sum < 0 or current_index >= len(li):\n        return False\n    if can_partition(li, subset_sum, remaining_sum - li[current_index], k, current_index + 1, memo):\n        memo[(current_index, remaining_sum, k)] = True\n        return True\n    memo[(current_index, remaining_sum, k)] = can_partition(li, subset_sum, remaining_sum, k, current_index + 1, memo)\n    return memo[(current_index, remaining_sum, k)]\nassert f(g())\n", "emb": null, "idx_generation": 401, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], target=100, k=3) -> bool:\n    \"\"\"Find a list that can be divided into k sublists with the same sum equal to the target\"\"\"\n    if sum(li) % k != 0:\n        return False\n    subset_sum = sum(li) // k\n    return can_partition(li, subset_sum, subset_sum, k, 0, {})", "solution_func": "def g(target=100, k=3):\n    return [target // k] * (k-1) + [target // k + target % k]\ndef can_partition(li, subset_sum, remaining_sum, k, current_index, memo):\n    if current_index == len(li):\n        return k == 0\n    if (current_index, remaining_sum, k) in memo:\n        return memo[(current_index, remaining_sum, k)]\n    if remaining_sum == 0:\n        return can_partition(li, subset_sum, subset_sum, k - 1, 0, memo)\n    if remaining_sum < 0 or current_index >= len(li):\n        return False\n    if can_partition(li, subset_sum, remaining_sum - li[current_index], k, current_index + 1, memo):\n        memo[(current_index, remaining_sum, k)] = True\n        return True\n    memo[(current_index, remaining_sum, k)] = can_partition(li, subset_sum, remaining_sum, k, current_index + 1, memo)\n    return memo[(current_index, remaining_sum, k)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers such that they add up to a specific target number.\n\n    Sample Input:\n    `[2, 7, 11, 15]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 9]\n\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 401, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers such that they add up to a specific target number.\n\n    Sample Input:\n    `[2, 7, 11, 15]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(target=10):\n    return [1, 9]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, a=-10, b=3) -> bool:\n    \"\"\"Check if x is a power of a within the range of b\"\"\"\n    return a ** b == x\ndef g(a = -10, b = 3):\n    return a ** b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 402, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=-10, b=3) -> bool:\n    \"\"\"Check if x is a power of a within the range of b\"\"\"\n    return a ** b == x", "solution_func": "def g(a = -10, b = 3):\n    return a ** b", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the nth character in s is a vowel\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return s[n] in vowels\ndef g(n = 3):\n    return 'python'\nassert f(g())\n", "emb": null, "idx_generation": 402, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the nth character in s is a vowel\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return s[n] in vowels", "solution_func": "def g(n = 3):\n    return 'python'", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: int, a=5, b=12) -> bool:\n    \"\"\"Check if x is a multiple of a and less than b\"\"\"\n    return x % a == 0 and x < b\ndef g(a = 5, b = 12):\n    return a + b\nassert f(g())\n", "emb": null, "idx_generation": 402, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=5, b=12) -> bool:\n    \"\"\"Check if x is a multiple of a and less than b\"\"\"\n    return x % a == 0 and x < b", "solution_func": "def g(a = 5, b = 12):\n    return a + b", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target_length=7) -> bool:\n    \"\"\"Check if the given string has all unique characters and has a length equal to the target_length.\"\"\"\n    return len(s) == target_length and len(set(s)) == target_length\ndef g(target_length=7):\n    import string\n    return ''.join(string.ascii_lowercase[:target_length])\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 402, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target_length=7) -> bool:\n    \"\"\"Check if the given string has all unique characters and has a length equal to the target_length.\"\"\"\n    return len(s) == target_length and len(set(s)) == target_length", "solution_func": "def g(target_length=7):\n    import string\n    return ''.join(string.ascii_lowercase[:target_length])", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10, row_length=3) -> bool:\n    \"\"\"Check if the sum of each row in the matrix is equal to the target.\"\"\"\n    return all(sum(row) == target for row in matrix)\ndef g(target=10, row_length=3):\n    return [[target] * row_length] * row_length\nassert f(g())\n", "emb": null, "idx_generation": 402, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10, row_length=3) -> bool:\n    \"\"\"Check if the sum of each row in the matrix is equal to the target.\"\"\"\n    return all(sum(row) == target for row in matrix)", "solution_func": "def g(target=10, row_length=3):\n    return [[target] * row_length] * row_length", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if target - num in num_set:\n            return True\n    return False\ndef g(target=20):\n    return [10, 5, 3, 8, 7]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 402, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if target - num in num_set:\n            return True\n    return False", "solution_func": "def g(target=20):\n    return [10, 5, 3, 8, 7]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, char='a', count=3) -> bool:\n    \"\"\"Check if the given character appears 'count' number of times in the string\"\"\"\n    return string.count(char) == count\ndef g(char='a', count=3):\n    return char * count\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 402, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, char='a', count=3) -> bool:\n    \"\"\"Check if the given character appears 'count' number of times in the string\"\"\"\n    return string.count(char) == count", "solution_func": "def g(char='a', count=3):\n    return char * count", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sum=15, col_sum=15) -> bool:\n    \"\"\"Check if the sum of each row and each column in the matrix is equal to row_sum and col_sum respectively\"\"\"\n    return all(sum(row) == row_sum for row in matrix) and all(sum(col) == col_sum for col in zip(*matrix))\ndef g(row_sum=15, col_sum=15):\n    n = row_sum // 3\n    matrix = [[n, n, n], [n, n, n], [n, n, n]]\n    return matrix\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 402, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row_sum=15, col_sum=15) -> bool:\n    \"\"\"Check if the sum of each row and each column in the matrix is equal to row_sum and col_sum respectively\"\"\"\n    return all(sum(row) == row_sum for row in matrix) and all(sum(col) == col_sum for col in zip(*matrix))", "solution_func": "def g(row_sum=15, col_sum=15):\n    n = row_sum // 3\n    matrix = [[n, n, n], [n, n, n], [n, n, n]]\n    return matrix", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if any three numbers from the list sum up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, 3))\ndef g(target=100):\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 402, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if any three numbers from the list sum up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, 3))", "solution_func": "def g(target=100):\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find a sublist of arr whose sum is equal to target\"\"\"\n    return sum(arr) == target\ndef g(target=10):\n    return [1, 2, 3, 4]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 402, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find a sublist of arr whose sum is equal to target\"\"\"\n    return sum(arr) == target", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4]", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return list(range(1, target))\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 403, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(target=10):\n    return list(range(1, target))", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find a number in the matrix that equals the target.\"\"\"\n    return any(target in row for row in matrix)\ndef g(target=0):\n    return [[i+j for i in range(5)] for j in range(5)]\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 403, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find a number in the matrix that equals the target.\"\"\"\n    return any(target in row for row in matrix)", "solution_func": "def g(target=0):\n    return [[i+j for i in range(5)] for j in range(5)]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target.\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(target=100):\n    return list(range(1, target))\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 403, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target.\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))", "solution_func": "def g(target=100):\n    return list(range(1, target))", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"\n    Find a pair of numbers from the list that add up to the target\n    \"\"\"\n    pairs = [(a, b) for a in numbers for b in numbers if a + b == target]\n    return len(pairs) > 0\ndef g(target = 10):\n    numbers = [1, 2, 3, 4, 5]\n    return numbers\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 403, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"\n    Find a pair of numbers from the list that add up to the target\n    \"\"\"\n    pairs = [(a, b) for a in numbers for b in numbers if a + b == target]\n    return len(pairs) > 0", "solution_func": "def g(target = 10):\n    numbers = [1, 2, 3, 4, 5]\n    return numbers", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, reverse=False) -> bool:\n    \"\"\"\n    Check if a string is a palindrome\n    \"\"\"\n    if reverse:\n        return s == s[::-1]\n    else:\n        return s == ''.join(reversed(s))\ndef g(reverse = False):\n    return \"racecar\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 403, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, reverse=False) -> bool:\n    \"\"\"\n    Check if a string is a palindrome\n    \"\"\"\n    if reverse:\n        return s == s[::-1]\n    else:\n        return s == ''.join(reversed(s))", "solution_func": "def g(reverse = False):\n    return \"racecar\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"\n    Find a combination of numbers from the list that add up to the target\n    \"\"\"\n    combinations = []\n    for r in range(1, len(numbers) + 1):\n        for subset in itertools.combinations(numbers, r):\n            if sum(subset) == target:\n                combinations.append(subset)\n    return len(combinations) > 0\ndef g(target = 100):\n    numbers = [50, 20, 30, 40]\n    return numbers\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 403, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"\n    Find a combination of numbers from the list that add up to the target\n    \"\"\"\n    combinations = []\n    for r in range(1, len(numbers) + 1):\n        for subset in itertools.combinations(numbers, r):\n            if sum(subset) == target:\n                combinations.append(subset)\n    return len(combinations) > 0", "solution_func": "def g(target = 100):\n    numbers = [50, 20, 30, 40]\n    return numbers", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a sorted array of integers and a target integer, determine if there exist two distinct indices i and j \n    in the array such that nums[i] + nums[j] == target.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] + arr[right] == target:\n            return True\n        elif arr[left] + arr[right] < target:\n            left += 1\n        else:\n            right -= 1\n    return False\ndef g(arr = [1, 2, 3, 4, 5], target = 9):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 403, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a sorted array of integers and a target integer, determine if there exist two distinct indices i and j \n    in the array such that nums[i] + nums[j] == target.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] + arr[right] == target:\n            return True\n        elif arr[left] + arr[right] < target:\n            left += 1\n        else:\n            right -= 1\n    return False", "solution_func": "def g(arr = [1, 2, 3, 4, 5], target = 9):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, k: int) -> bool:\n    \"\"\"\n    Given a string and an integer k, determine if the string can be rearranged such that the same characters are at \n    least k distance apart from each other.\n    \"\"\"\n    if k == 0:\n        return True\n    freq = collections.Counter(string)\n    max_heap = []\n    for char, count in freq.items():\n        heapq.heappush(max_heap, (-count, char))\n    queue = collections.deque()\n    result = \"\"\n    while max_heap:\n        count, char = heapq.heappop(max_heap)\n        result += char\n        queue.append((count + 1, char))\n        if len(queue) >= k:\n            count, char = queue.popleft()\n            if -count > 0:\n                heapq.heappush(max_heap, (count, char))\n    return len(result) == len(string)\ndef g(string = \"aabbc\", k = 2):\n    return string\nassert f(g())\n", "emb": null, "idx_generation": 403, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, k: int) -> bool:\n    \"\"\"\n    Given a string and an integer k, determine if the string can be rearranged such that the same characters are at \n    least k distance apart from each other.\n    \"\"\"\n    if k == 0:\n        return True\n    freq = collections.Counter(string)\n    max_heap = []\n    for char, count in freq.items():\n        heapq.heappush(max_heap, (-count, char))\n    queue = collections.deque()\n    result = \"\"\n    while max_heap:\n        count, char = heapq.heappop(max_heap)\n        result += char\n        queue.append((count + 1, char))\n        if len(queue) >= k:\n            count, char = queue.popleft()\n            if -count > 0:\n                heapq.heappush(max_heap, (count, char))\n    return len(result) == len(string)", "solution_func": "def g(string = \"aabbc\", k = 2):\n    return string", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given an array of integers and a target value, determine if there exist three integers in the array such that the \n    sum is closest to the target.\n    \"\"\"\n    arr.sort()\n    closest_sum = float('inf')\n    for i in range(len(arr) - 2):\n        left = i + 1\n        right = len(arr) - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == target:\n                return True\n            if abs(current_sum - target) < abs(closest_sum - target):\n                closest_sum = current_sum\n            if current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\ndef g(arr = [1, 2, 3, 4, 5], target = 9):\n    return arr\nassert f(g())", "emb": null, "idx_generation": 403, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given an array of integers and a target value, determine if there exist three integers in the array such that the \n    sum is closest to the target.\n    \"\"\"\n    arr.sort()\n    closest_sum = float('inf')\n    for i in range(len(arr) - 2):\n        left = i + 1\n        right = len(arr) - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == target:\n                return True\n            if abs(current_sum - target) < abs(closest_sum - target):\n                closest_sum = current_sum\n            if current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False", "solution_func": "def g(arr = [1, 2, 3, 4, 5], target = 9):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are two numbers that add up to the target value.\n\n    Sample Input:\n    nums = [1, 2, 3, 4]\n    target = 5\n\n    Sample Output:\n    True\n    \"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        else:\n            complements.add(target - num)\n    return False\n\ndef g(nums=[1, 2, 3, 4], target=0):\n    return target - sum(nums) + nums[0]\n    \nassert f(g())\n", "emb": null, "idx_generation": 403, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are two numbers that add up to the target value.\n\n    Sample Input:\n    nums = [1, 2, 3, 4]\n    target = 5\n\n    Sample Output:\n    True\n    \"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        else:\n            complements.add(target - num)\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4], target=0):\n    return target - sum(nums) + nums[0]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix and a target value, determine if the target value exists in the matrix.\n    The matrix is a 2D grid of integers, where each row is sorted in ascending order and the first element of each row is greater than the last element of the previous row.\n\n    Example:\n    matrix = [\n        [1, 3, 5, 7],\n        [10, 11, 16, 20],\n        [23, 30, 34, 50]\n    ]\n    target = 3\n\n    Output:\n    True\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    low = 0\n    high = rows * cols - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        num = matrix[mid // cols][mid % cols]\n        if num == target:\n            return True\n        elif num < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return False\n\ndef g(matrix: List[List[int]], target: int) -> bool:\n    return f(matrix, target)\n\nassert f(g()) == True", "emb": null, "idx_generation": 404, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix and a target value, determine if the target value exists in the matrix.\n    The matrix is a 2D grid of integers, where each row is sorted in ascending order and the first element of each row is greater than the last element of the previous row.\n\n    Example:\n    matrix = [\n        [1, 3, 5, 7],\n        [10, 11, 16, 20],\n        [23, 30, 34, 50]\n    ]\n    target = 3\n\n    Output:\n    True\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    low = 0\n    high = rows * cols - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        num = matrix[mid // cols][mid % cols]\n        if num == target:\n            return True\n        elif num < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return False", "solution_func": "def g(matrix: List[List[int]], target: int) -> bool:\n    return f(matrix, target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string s, determine if it is a palindrome after removing at most one character.\n\n    Example:\n    s = \"racecar\"\n\n    Output:\n    True\n    \"\"\"\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    if is_palindrome(s):\n        return True\n\n    left = 0\n    right = len(s) - 1\n\n    while left < right:\n        if s[left] != s[right]:\n            return is_palindrome(s[left:right]) or is_palindrome(s[left + 1:right + 1])\n        left += 1\n        right -= 1\n\n    return True\n\ndef g(s: str) -> bool:\n    return f(s)\n\nassert f(g()) == True", "emb": null, "idx_generation": 404, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string s, determine if it is a palindrome after removing at most one character.\n\n    Example:\n    s = \"racecar\"\n\n    Output:\n    True\n    \"\"\"\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    if is_palindrome(s):\n        return True\n\n    left = 0\n    right = len(s) - 1\n\n    while left < right:\n        if s[left] != s[right]:\n            return is_palindrome(s[left:right]) or is_palindrome(s[left + 1:right + 1])\n        left += 1\n        right -= 1\n\n    return True", "solution_func": "def g(s: str) -> bool:\n    return f(s)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, determine if there are three integers in the list that sum up to the target value.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Output:\n    True\n    \"\"\"\n    nums.sort()\n\n    for i in range(len(nums) - 2):\n        left = i + 1\n        right = len(nums) - 1\n\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n\n    return False\n\ndef g(nums: List[int], target: int) -> bool:\n    return f(nums, target)\n\nassert f(g()) == True", "emb": null, "idx_generation": 404, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, determine if there are three integers in the list that sum up to the target value.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Output:\n    True\n    \"\"\"\n    nums.sort()\n\n    for i in range(len(nums) - 2):\n        left = i + 1\n        right = len(nums) - 1\n\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n\n    return False", "solution_func": "def g(nums: List[int], target: int) -> bool:\n    return f(nums, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Find a pair of integers in the list that sum up to the target\"\"\"\n    return any(i + j == target for i in x for j in x if i != j)\n    \ndef g():\n    random.seed(42)\n    x = random.sample(range(1, 101), 10)\n    return x\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 404, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Find a pair of integers in the list that sum up to the target\"\"\"\n    return any(i + j == target for i in x for j in x if i != j)", "solution_func": "def g():\n    random.seed(42)\n    x = random.sample(range(1, 101), 10)\n    return x", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find a sublist in the given list that sums up to the target\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if sum(li[i:j+1]) == target:\n                return True\n    return False\n    \ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    \nassert f(g())\n", "emb": null, "idx_generation": 404, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find a sublist in the given list that sums up to the target\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if sum(li[i:j+1]) == target:\n                return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=100) -> bool:\n    \"\"\"Check if the sum of any row or column in the array equals the target\"\"\"\n    return any(np.sum(arr, axis=0) == target) or any(np.sum(arr, axis=1) == target)\n\ndef g():\n    return np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\nassert f(g())\n", "emb": null, "idx_generation": 404, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=100) -> bool:\n    \"\"\"Check if the sum of any row or column in the array equals the target\"\"\"\n    return any(np.sum(arr, axis=0) == target) or any(np.sum(arr, axis=1) == target)", "solution_func": "def g():\n    return np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"\n    Given a list of integers 'nums' and a target integer 'target', find if there are 'k' elements in 'nums'\n    that add up to 'target'. Return True if such elements exist, False otherwise.\n    \"\"\"\n    def dfs(nums, target, k, index, path, res):\n        if k == 0 and target == 0:\n            res.append(path)\n            return\n        if k == 0 or target < 0:\n            return\n        for i in range(index, len(nums)):\n            dfs(nums, target - nums[i], k - 1, i + 1, path + [nums[i]], res)\n    \n    res = []\n    nums.sort()\n    dfs(nums, target, k, 0, [], res)\n    return len(res) > 0\n\ndef g(nums = [2, 5, 7, 9, 13], target = 16, k = 3):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 404, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"\n    Given a list of integers 'nums' and a target integer 'target', find if there are 'k' elements in 'nums'\n    that add up to 'target'. Return True if such elements exist, False otherwise.\n    \"\"\"\n    def dfs(nums, target, k, index, path, res):\n        if k == 0 and target == 0:\n            res.append(path)\n            return\n        if k == 0 or target < 0:\n            return\n        for i in range(index, len(nums)):\n            dfs(nums, target - nums[i], k - 1, i + 1, path + [nums[i]], res)\n    \n    res = []\n    nums.sort()\n    dfs(nums, target, k, 0, [], res)\n    return len(res) > 0", "solution_func": "def g(nums = [2, 5, 7, 9, 13], target = 16, k = 3):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target integer, return True if the target exists in the matrix,\n    False otherwise.\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    i = 0\n    j = n - 1\n    \n    while i < m and j >= 0:\n        if matrix[i][j] == target:\n            return True\n        elif matrix[i][j] < target:\n            i += 1\n        else:\n            j -= 1\n    \n    return False\n\ndef g(matrix = [[1, 4, 7], [2, 5, 8], [3, 6, 9]], target = 5):\n    return matrix\n    \nassert f(g())\n", "emb": null, "idx_generation": 404, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target integer, return True if the target exists in the matrix,\n    False otherwise.\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    i = 0\n    j = n - 1\n    \n    while i < m and j >= 0:\n        if matrix[i][j] == target:\n            return True\n        elif matrix[i][j] < target:\n            i += 1\n        else:\n            j -= 1\n    \n    return False", "solution_func": "def g(matrix = [[1, 4, 7], [2, 5, 8], [3, 6, 9]], target = 5):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers 'nums' and an integer 'k', return True if there are two distinct indices i and j\n    in the list such that nums[i] - nums[j] = k, False otherwise.\n    \"\"\"\n    num_set = set(nums)\n    \n    for num in nums:\n        if num + k in num_set:\n            return True\n    \n    return False\n\ndef g(nums = [1, 5, 3, 2, 7, 4], k = 3):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 404, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers 'nums' and an integer 'k', return True if there are two distinct indices i and j\n    in the list such that nums[i] - nums[j] = k, False otherwise.\n    \"\"\"\n    num_set = set(nums)\n    \n    for num in nums:\n        if num + k in num_set:\n            return True\n    \n    return False", "solution_func": "def g(nums = [1, 5, 3, 2, 7, 4], k = 3):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if a given number is divisible by any of the prime numbers in the list.\"\"\"\n    return any(n % p == 0 for p in primes)\ndef g(primes=[2, 3, 5, 7, 11, 13]):\n    return primes[-1] ** 2\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 404, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if a given number is divisible by any of the prime numbers in the list.\"\"\"\n    return any(n % p == 0 for p in primes)", "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13]):\n    return primes[-1] ** 2", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Find a list of integers where the sum of all elements is equal to a given target\n    \"\"\"\n    return sum(arr) == target\n\ndef g(target=0):\n    return [target]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 405, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Find a list of integers where the sum of all elements is equal to a given target\n    \"\"\"\n    return sum(arr) == target", "solution_func": "def g(target=0):\n    return [target]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Find a list of integers where the product of all elements is equal to a given target\n    \"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product == target\n\ndef g(target=0):\n    return [target]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 405, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Find a list of integers where the product of all elements is equal to a given target\n    \"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product == target", "solution_func": "def g(target=0):\n    return [target]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[str], target='') -> bool:\n    \"\"\"\n    Find a list of strings where concatenating all elements results in a given target string\n    \"\"\"\n    return ''.join(arr) == target\n\ndef g(target=''):\n    return [target]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 405, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[str], target='') -> bool:\n    \"\"\"\n    Find a list of strings where concatenating all elements results in a given target string\n    \"\"\"\n    return ''.join(arr) == target", "solution_func": "def g(target=''):\n    return [target]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"\n    Check if there are two numbers in the list that sum up to the target.\n\n    Sample Input:\n    [10, 30, 20, 40], 50\n\n    Sample Output:\n    True\n\n    Explanation:\n    The numbers 10 and 40 sum up to the target value of 50.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [10, 30, 20, 40]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 405, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"\n    Check if there are two numbers in the list that sum up to the target.\n\n    Sample Input:\n    [10, 30, 20, 40], 50\n\n    Sample Output:\n    True\n\n    Explanation:\n    The numbers 10 and 40 sum up to the target value of 50.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g():\n    return [10, 30, 20, 40]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"\n    Check if a string is a palindrome.\n\n    Sample Input:\n    \"racecar\"\n\n    Sample Output:\n    True\n\n    Explanation:\n    The string \"racecar\" is a palindrome because it reads the same forwards and backwards.\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 405, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"\n    Check if a string is a palindrome.\n\n    Sample Input:\n    \"racecar\"\n\n    Sample Output:\n    True\n\n    Explanation:\n    The string \"racecar\" is a palindrome because it reads the same forwards and backwards.\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g():\n    return \"racecar\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the list of numbers is sorted in non-descending order.\n\n    Sample Input:\n    [1, 2, 3, 3, 5]\n\n    Sample Output:\n    True\n\n    Explanation:\n    The list is sorted in non-descending order.\n    \"\"\"\n    return nums == sorted(nums)\n\ndef g():\n    return [1, 2, 3, 3, 5]\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 405, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the list of numbers is sorted in non-descending order.\n\n    Sample Input:\n    [1, 2, 3, 3, 5]\n\n    Sample Output:\n    True\n\n    Explanation:\n    The list is sorted in non-descending order.\n    \"\"\"\n    return nums == sorted(nums)", "solution_func": "def g():\n    return [1, 2, 3, 3, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(n: int, x=random.randint(0, 100)) -> bool:\n    \"\"\"Check if the given number is a multiple of x\"\"\"\n    return n % x == 0\n\ndef g(x=random.randint(0, 100)):\n    return random.choice(range(1, 101))\n\nassert f(g())\n", "emb": null, "idx_generation": 405, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(n: int, x=random.randint(0, 100)) -> bool:\n    \"\"\"Check if the given number is a multiple of x\"\"\"\n    return n % x == 0", "solution_func": "def g(x=random.randint(0, 100)):\n    return random.choice(range(1, 101))", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport math\n\ndef f(a: int, b: int, c: int, d: int, e: int, f: int) -> bool:\n    \"\"\"Check if the given values satisfy the equation ax^2 + by^2 = c + dz + ey + f\"\"\"\n    x = math.sqrt((c + d * a + e * b - f) / a)\n    y = (c - d * a - e * b + f) / b\n    return x.is_integer() and y.is_integer()\n\ndef g(a: int, b: int, c: int, d: int, e: int, f: int):\n    return random.randint(1, 100), random.randint(1, 100), random.randint(1, 100), random.randint(1, 100), random.randint(1, 100), random.randint(1, 100)\n\nassert f(g())\n", "emb": null, "idx_generation": 405, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport math\n\ndef f(a: int, b: int, c: int, d: int, e: int, f: int) -> bool:\n    \"\"\"Check if the given values satisfy the equation ax^2 + by^2 = c + dz + ey + f\"\"\"\n    x = math.sqrt((c + d * a + e * b - f) / a)\n    y = (c - d * a - e * b + f) / b\n    return x.is_integer() and y.is_integer()", "solution_func": "def g(a: int, b: int, c: int, d: int, e: int, f: int):\n    return random.randint(1, 100), random.randint(1, 100), random.randint(1, 100), random.randint(1, 100), random.randint(1, 100), random.randint(1, 100)", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome\"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return random.sample(range(10), 5)\n\nassert f(g())\n", "emb": null, "idx_generation": 405, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome\"\"\"\n    return arr == arr[::-1]", "solution_func": "def g():\n    return random.sample(range(10), 5)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if the target string is a substring of the given string.\"\"\"\n    return target in s\ndef g(s: str, target: str):\n    return s + target\nassert f(g(\"hello\", \"lo\"))\n", "emb": null, "idx_generation": 405, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if the target string is a substring of the given string.\"\"\"\n    return target in s", "solution_func": "def g(s: str, target: str):\n    return s + target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, a: int, b: int, c: int) -> bool:\n    \"\"\"Check if n can be expressed as a sum of the other numbers\"\"\"\n    return n == (m * a + b + c)\ndef g(m: int, a: int, b: int, c: int):\n    return (m * a) + b + c\nassert f(g())\n", "emb": null, "idx_generation": 406, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, a: int, b: int, c: int) -> bool:\n    \"\"\"Check if n can be expressed as a sum of the other numbers\"\"\"\n    return n == (m * a + b + c)", "solution_func": "def g(m: int, a: int, b: int, c: int):\n    return (m * a) + b + c", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums: List[int], target: int):\n    return nums, target\nassert f(g())\n", "emb": null, "idx_generation": 406, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if the length of the string is equal to n\"\"\"\n    return len(s) == n\ndef g(s: str, n: int):\n    return s[:n]\nassert f(g())\n", "emb": null, "idx_generation": 406, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if the length of the string is equal to n\"\"\"\n    return len(s) == n", "solution_func": "def g(s: str, n: int):\n    return s[:n]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(num: int, digits=[1, 2, 3, 4, 5], target=3) -> bool:\n    \"\"\"Check if the given number contains the target digit.\"\"\"\n    return str(target) in str(num)\ndef g(digits=[1, 2, 3, 4, 5], target=3):\n    return int(''.join([str(d) for d in digits]))\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 406, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int, digits=[1, 2, 3, 4, 5], target=3) -> bool:\n    \"\"\"Check if the given number contains the target digit.\"\"\"\n    return str(target) in str(num)", "solution_func": "def g(digits=[1, 2, 3, 4, 5], target=3):\n    return int(''.join([str(d) for d in digits]))", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, sub='hello') -> bool:\n    \"\"\"Check if the given string contains the given substring.\"\"\"\n    return sub in s\ndef g(sub='hello'):\n    return 'The quick brown fox jumps over the lazy dog ' + sub + '!'\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 406, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, sub='hello') -> bool:\n    \"\"\"Check if the given string contains the given substring.\"\"\"\n    return sub in s", "solution_func": "def g(sub='hello'):\n    return 'The quick brown fox jumps over the lazy dog ' + sub + '!'", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target.\"\"\"\n    return any([(target - num) in arr for num in arr])\ndef g(target=100):\n    return [num for num in range(1, target+1)]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 406, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target.\"\"\"\n    return any([(target - num) in arr for num in arr])", "solution_func": "def g(target=100):\n    return [num for num in range(1, target+1)]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers 'arr', find any two elements that sum up to the 'target' value.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    (3, 7)\n    \"\"\"\n    return any((arr[i] + arr[j] == target) for i in range(len(arr)) for j in range(i + 1, len(arr)))\ndef g(target = 10):\n    return [3, 7]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 406, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers 'arr', find any two elements that sum up to the 'target' value.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    (3, 7)\n    \"\"\"\n    return any((arr[i] + arr[j] == target) for i in range(len(arr)) for j in range(i + 1, len(arr)))", "solution_func": "def g(target = 10):\n    return [3, 7]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"\n    Given a string 's', determine if it can be split into exactly 'k' equal parts.\n\n    Sample Input:\n    \"ababab\"\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(s)\n    if n % k != 0:\n        return False\n    part_len = n // k\n    for i in range(part_len, n, part_len):\n        if s[i:i+part_len] != s[:part_len]:\n            return False\n    return True\ndef g(k = 2):\n    return \"ababab\"\nassert f(g())\n", "emb": null, "idx_generation": 406, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"\n    Given a string 's', determine if it can be split into exactly 'k' equal parts.\n\n    Sample Input:\n    \"ababab\"\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(s)\n    if n % k != 0:\n        return False\n    part_len = n // k\n    for i in range(part_len, n, part_len):\n        if s[i:i+part_len] != s[:part_len]:\n            return False\n    return True", "solution_func": "def g(k = 2):\n    return \"ababab\"", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers 'arr', find any three elements that sum up to the 'target' value.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    (1, 2, 7)\n    \"\"\"\n    return any((arr[i] + arr[j] + arr[k] == target) for i in range(len(arr)) for j in range(i + 1, len(arr)) for k in range(j + 1, len(arr)))\ndef g(target = 0):\n    return [1, 2, 7]\nassert f(g())\n", "emb": null, "idx_generation": 406, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers 'arr', find any three elements that sum up to the 'target' value.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    (1, 2, 7)\n    \"\"\"\n    return any((arr[i] + arr[j] + arr[k] == target) for i in range(len(arr)) for j in range(i + 1, len(arr)) for k in range(j + 1, len(arr)))", "solution_func": "def g(target = 0):\n    return [1, 2, 7]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target_sum=0) -> bool:\n    \"\"\"\n    Subset Sum\n\n    Given an array of integers, determine if there is a subset of the array that adds up to the target sum.\n\n    Example:\n    arr = [2, 4, 6, 8]\n    target_sum = 10\n    output: True\n    \"\"\"\n    def subset_sum(arr, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if arr[n-1] > target_sum:\n            return subset_sum(arr, n-1, target_sum)\n        return subset_sum(arr, n-1, target_sum) or subset_sum(arr, n-1, target_sum-arr[n-1])\n\n    return subset_sum(arr, len(arr), target_sum)\n\ndef g(arr=[2, 4, 6, 8], target_sum=10):\n    return arr\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 406, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=0) -> bool:\n    \"\"\"\n    Subset Sum\n\n    Given an array of integers, determine if there is a subset of the array that adds up to the target sum.\n\n    Example:\n    arr = [2, 4, 6, 8]\n    target_sum = 10\n    output: True\n    \"\"\"\n    def subset_sum(arr, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if arr[n-1] > target_sum:\n            return subset_sum(arr, n-1, target_sum)\n        return subset_sum(arr, n-1, target_sum) or subset_sum(arr, n-1, target_sum-arr[n-1])\n\n    return subset_sum(arr, len(arr), target_sum)", "solution_func": "def g(arr=[2, 4, 6, 8], target_sum=10):\n    return arr", "map_ix": [1, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(n: int, nums=[3, 7, 13, 19, 23], target=100) -> bool:\n    \"\"\"Find a combination of numbers that sums up to a target number\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, n))\ndef g(nums=[3, 7, 13, 19, 23], target=100):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 407, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, nums=[3, 7, 13, 19, 23], target=100) -> bool:\n    \"\"\"Find a combination of numbers that sums up to a target number\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, n))", "solution_func": "def g(nums=[3, 7, 13, 19, 23], target=100):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(n: int, nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=15) -> bool:\n    \"\"\"Find a combination of numbers from a list of lists that sums up to a target number\"\"\"\n    from itertools import product\n    return any(sum(comb) == target for comb in product(*nums))\ndef g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=15):\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 407, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=15) -> bool:\n    \"\"\"Find a combination of numbers from a list of lists that sums up to a target number\"\"\"\n    from itertools import product\n    return any(sum(comb) == target for comb in product(*nums))", "solution_func": "def g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=15):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, char_set='abcdefghijklmnopqrstuvwxyz') -> bool:\n    \"\"\"Check if a string contains all the characters in a given character set\"\"\"\n    return set(char_set).issubset(set(s))\ndef g(char_set='abcdefghijklmnopqrstuvwxyz'):\n    return char_set\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 407, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, char_set='abcdefghijklmnopqrstuvwxyz') -> bool:\n    \"\"\"Check if a string contains all the characters in a given character set\"\"\"\n    return set(char_set).issubset(set(s))", "solution_func": "def g(char_set='abcdefghijklmnopqrstuvwxyz'):\n    return char_set", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, s='Hello, World!', k=5) -> bool:\n    \"\"\"Check if the kth character of the string is equal to the ASCII value of n\"\"\"\n    return ord(s[k]) == n\ndef g(s='Hello, World!', k=5):\n    return ord(s[k])\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 407, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, s='Hello, World!', k=5) -> bool:\n    \"\"\"Check if the kth character of the string is equal to the ASCII value of n\"\"\"\n    return ord(s[k]) == n", "solution_func": "def g(s='Hello, World!', k=5):\n    return ord(s[k])", "map_ix": [0, 0, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=2.5, y=1.5) -> bool:\n    \"\"\"Check if n is within a certain radius from the point (x, y)\"\"\"\n    distance = math.sqrt((x - 0) ** 2 + (y - 0) ** 2)\n    return distance <= n\ndef g(x=2.5, y=1.5):\n    return math.sqrt((x - 0) ** 2 + (y - 0) ** 2)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 407, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=2.5, y=1.5) -> bool:\n    \"\"\"Check if n is within a certain radius from the point (x, y)\"\"\"\n    distance = math.sqrt((x - 0) ** 2 + (y - 0) ** 2)\n    return distance <= n", "solution_func": "def g(x=2.5, y=1.5):\n    return math.sqrt((x - 0) ** 2 + (y - 0) ** 2)", "map_ix": [0, 0, 0, 1, 0, 0, 1, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(li: List[int], n=5) -> bool:\n    \"\"\"Check if the sum of the first n elements in the list is equal to the sum of the last n elements\"\"\"\n    return sum(li[:n]) == sum(li[-n:])\ndef g(n=5):\n    return [i for i in range(1, 2 * n + 1)]\nassert f(g())\n", "emb": null, "idx_generation": 407, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], n=5) -> bool:\n    \"\"\"Check if the sum of the first n elements in the list is equal to the sum of the last n elements\"\"\"\n    return sum(li[:n]) == sum(li[-n:])", "solution_func": "def g(n=5):\n    return [i for i in range(1, 2 * n + 1)]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], n=10, target=5) -> bool:\n    \"\"\"\n    Given an array of integers, find a subarray of length n that sums up to target.\n\n    Sample Input:\n    arr = [1, 4, 2, 5, 6, 3, 8, 9, 7, 10]\n    n = 4\n    target = 12\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr) - n + 1):\n        if sum(arr[i:i+n]) == target:\n            return True\n    return False\ndef g(n=10, target=5):\n    return [i for i in range(1, n+1)]\nassert f(g())\n", "emb": null, "idx_generation": 407, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], n=10, target=5) -> bool:\n    \"\"\"\n    Given an array of integers, find a subarray of length n that sums up to target.\n\n    Sample Input:\n    arr = [1, 4, 2, 5, 6, 3, 8, 9, 7, 10]\n    n = 4\n    target = 12\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr) - n + 1):\n        if sum(arr[i:i+n]) == target:\n            return True\n    return False", "solution_func": "def g(n=10, target=5):\n    return [i for i in range(1, n+1)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, a='hello', b='world') -> bool:\n    \"\"\"\n    Given a string s, check if it can be formed by concatenating a and b.\n\n    Sample Input:\n    s = 'helloworld'\n    a = 'hello'\n    b = 'world'\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == a + b\ndef g(a='hello', b='world'):\n    return a + b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 407, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a='hello', b='world') -> bool:\n    \"\"\"\n    Given a string s, check if it can be formed by concatenating a and b.\n\n    Sample Input:\n    s = 'helloworld'\n    a = 'hello'\n    b = 'world'\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == a + b", "solution_func": "def g(a='hello', b='world'):\n    return a + b", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers that sum up to the target.\n\n    Sample Input:\n    nums = [2, 4, 5, 7, 11, 15]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        complements.add(target - num)\n    return False\ndef g(target=9):\n    return [1, 8]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 407, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers that sum up to the target.\n\n    Sample Input:\n    nums = [2, 4, 5, 7, 11, 15]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        complements.add(target - num)\n    return False", "solution_func": "def g(target=9):\n    return [1, 8]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=3.14159, b=5) -> bool:\n    \"\"\"Check if the sine of x is equal to the product of a and b\"\"\"\n    return math.sin(x) == a * b\n\ndef g(a=3.14159, b=5):\n    return math.asin(a * b)\n\nassert f(g())\n", "emb": null, "idx_generation": 407, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=3.14159, b=5) -> bool:\n    \"\"\"Check if the sine of x is equal to the product of a and b\"\"\"\n    return math.sin(x) == a * b", "solution_func": "def g(a=3.14159, b=5):\n    return math.asin(a * b)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers that add up to the target value.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    (5, 5)\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5], target = 10):\n    return (target, target)\nassert f(g())\n", "emb": null, "idx_generation": 408, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers that add up to the target value.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    (5, 5)\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5], target = 10):\n    return (target, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='Hello, World!') -> bool:\n    \"\"\"Check if the given string is equal to the target string.\n\n    Sample Input:\n    s = 'Hello, World!'\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == target\ndef g(target = 'Hello, World!'):\n    return target\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 408, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='Hello, World!') -> bool:\n    \"\"\"Check if the given string is equal to the target string.\n\n    Sample Input:\n    s = 'Hello, World!'\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == target", "solution_func": "def g(target = 'Hello, World!'):\n    return target", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find if there exists a path from the top left corner to the bottom right corner of the matrix such that the sum\n    of all the numbers along the path is equal to the target value.\n\n    Sample Input:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\n    Sample Output:\n    False\n    \"\"\"\n    def dfs(i, j, cur_sum):\n        if i < 0 or j < 0 or i >= len(matrix) or j >= len(matrix[0]):\n            return False\n        cur_sum += matrix[i][j]\n        if cur_sum == target and i == len(matrix)-1 and j == len(matrix[0])-1:\n            return True\n        return dfs(i+1, j, cur_sum) or dfs(i, j+1, cur_sum)\n    \n    return dfs(0, 0, 0)\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 100):\n    return matrix\nassert f(g())", "emb": null, "idx_generation": 408, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find if there exists a path from the top left corner to the bottom right corner of the matrix such that the sum\n    of all the numbers along the path is equal to the target value.\n\n    Sample Input:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\n    Sample Output:\n    False\n    \"\"\"\n    def dfs(i, j, cur_sum):\n        if i < 0 or j < 0 or i >= len(matrix) or j >= len(matrix[0]):\n            return False\n        cur_sum += matrix[i][j]\n        if cur_sum == target and i == len(matrix)-1 and j == len(matrix[0])-1:\n            return True\n        return dfs(i+1, j, cur_sum) or dfs(i, j+1, cur_sum)\n    \n    return dfs(0, 0, 0)", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 100):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, g=lambda a, b: a + b) -> bool:\n    \"\"\"\n    Given two integers n and m, return their sum using a custom function g.\n    \"\"\"\n    return g(n, m) == n + m\n\ndef g(n: int, m: int) -> int:\n    \"\"\"\n    Return the sum of two integers n and m.\n    \"\"\"\n    return n + m\n\nassert f(g())\n", "emb": null, "idx_generation": 408, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, g=lambda a, b: a + b) -> bool:\n    \"\"\"\n    Given two integers n and m, return their sum using a custom function g.\n    \"\"\"\n    return g(n, m) == n + m", "solution_func": "def g(n: int, m: int) -> int:\n    \"\"\"\n    Return the sum of two integers n and m.\n    \"\"\"\n    return n + m", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, g=lambda a, b: a - b) -> bool:\n    \"\"\"\n    Given two integers n and m, return their difference using a custom function g.\n    \"\"\"\n    return g(n, m) == n - m\n\ndef g(n: int, m: int) -> int:\n    \"\"\"\n    Return the difference of two integers n and m.\n    \"\"\"\n    return n - m\n\nassert f(g())\n", "emb": null, "idx_generation": 408, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, g=lambda a, b: a - b) -> bool:\n    \"\"\"\n    Given two integers n and m, return their difference using a custom function g.\n    \"\"\"\n    return g(n, m) == n - m", "solution_func": "def g(n: int, m: int) -> int:\n    \"\"\"\n    Return the difference of two integers n and m.\n    \"\"\"\n    return n - m", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, g=lambda a, b: a * b) -> bool:\n    \"\"\"\n    Given two integers n and m, return their product using a custom function g.\n    \"\"\"\n    return g(n, m) == n * m\n\ndef g(n: int, m: int) -> int:\n    \"\"\"\n    Return the product of two integers n and m.\n    \"\"\"\n    return n * m\n\nassert f(g())\n", "emb": null, "idx_generation": 408, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, g=lambda a, b: a * b) -> bool:\n    \"\"\"\n    Given two integers n and m, return their product using a custom function g.\n    \"\"\"\n    return g(n, m) == n * m", "solution_func": "def g(n: int, m: int) -> int:\n    \"\"\"\n    Return the product of two integers n and m.\n    \"\"\"\n    return n * m", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(lst: list, s: int, n=0) -> bool:\n    \"\"\"Check if the sum of n random elements in the list equals s\"\"\"\n    random_elements = random.sample(lst, n)\n    return sum(random_elements) == s\n\ndef g(lst: list, s: int, n=0):\n    return lst, s, n\n\nassert f(g([1, 2, 3, 4, 5], 9, 3))\n", "emb": null, "idx_generation": 408, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: list, s: int, n=0) -> bool:\n    \"\"\"Check if the sum of n random elements in the list equals s\"\"\"\n    random_elements = random.sample(lst, n)\n    return sum(random_elements) == s", "solution_func": "def g(lst: list, s: int, n=0):\n    return lst, s, n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: list, x: int, y: int, n=0) -> bool:\n    \"\"\"Check if there are n elements in the list that are between x and y\"\"\"\n    count = 0\n    for num in lst:\n        if x < num < y:\n            count += 1\n        if count == n:\n            return True\n    return False\n\ndef g(lst: list, x: int, y: int, n=0):\n    return lst, x, y, n\n\nassert f(g([1, 2, 3, 4, 5], 2, 4, 2))\n", "emb": null, "idx_generation": 408, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: list, x: int, y: int, n=0) -> bool:\n    \"\"\"Check if there are n elements in the list that are between x and y\"\"\"\n    count = 0\n    for num in lst:\n        if x < num < y:\n            count += 1\n        if count == n:\n            return True\n    return False", "solution_func": "def g(lst: list, x: int, y: int, n=0):\n    return lst, x, y, n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: list, x: int, y: int, n=0) -> bool:\n    \"\"\"Check if there are n elements in the list that are evenly divisible by x and y\"\"\"\n    count = 0\n    for num in lst:\n        if num % x == 0 and num % y == 0:\n            count += 1\n        if count == n:\n            return True\n    return False\n\ndef g(lst: list, x: int, y: int, n=0):\n    return lst, x, y, n\n\nassert f(g([1, 2, 3, 4, 5], 2, 3, 1))\n", "emb": null, "idx_generation": 408, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: list, x: int, y: int, n=0) -> bool:\n    \"\"\"Check if there are n elements in the list that are evenly divisible by x and y\"\"\"\n    count = 0\n    for num in lst:\n        if num % x == 0 and num % y == 0:\n            count += 1\n        if count == n:\n            return True\n    return False", "solution_func": "def g(lst: list, x: int, y: int, n=0):\n    return lst, x, y, n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, a=0, b='') -> bool:\n    \"\"\"Check if s is a palindrome and if a is equal to the number of occurrences of b in s\"\"\"\n    return s == s[::-1] and s.count(b) == a\ndef g(a = 0, b = ''):\n    s = b * a\n    return s + s[::-1]\nassert f(g())\n", "emb": null, "idx_generation": 408, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a=0, b='') -> bool:\n    \"\"\"Check if s is a palindrome and if a is equal to the number of occurrences of b in s\"\"\"\n    return s == s[::-1] and s.count(b) == a", "solution_func": "def g(a = 0, b = ''):\n    s = b * a\n    return s + s[::-1]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(s: str, n=10) -> bool:\n    \"\"\"Is the square root of n, rounded to the nearest integer, equal to the integer itself?\"\"\"\n    return round(math.sqrt(n)) == n\ndef g(n = 10):\n    return str(n ** 2)\nassert f(g())\n", "emb": null, "idx_generation": 409, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(s: str, n=10) -> bool:\n    \"\"\"Is the square root of n, rounded to the nearest integer, equal to the integer itself?\"\"\"\n    return round(math.sqrt(n)) == n", "solution_func": "def g(n = 10):\n    return str(n ** 2)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Does the list contain an element that is a multiple of 10?\"\"\"\n    for num in lst:\n        if num % 10 == 0:\n            return True\n    return False\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst + [10]\nassert f(g())\n", "emb": null, "idx_generation": 409, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Does the list contain an element that is a multiple of 10?\"\"\"\n    for num in lst:\n        if num % 10 == 0:\n            return True\n    return False", "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    return lst + [10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, num1=5, num2=10) -> bool:\n    \"\"\"Is the sum of num1 and num2 less than or equal to 20?\"\"\"\n    return num1 + num2 <= 20\ndef g(num1=5, num2=10):\n    return str(num1 + num2)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 409, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, num1=5, num2=10) -> bool:\n    \"\"\"Is the sum of num1 and num2 less than or equal to 20?\"\"\"\n    return num1 + num2 <= 20", "solution_func": "def g(num1=5, num2=10):\n    return str(num1 + num2)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=1.61803398875) -> bool:\n    \"\"\"Check if the value of x raised to the power of y is equal to z multiplied by a\"\"\"\n    return math.isclose(x ** y, z * a)\n\ndef g(x=3.24, y=0.5, z=1.5):\n    return x ** y\n\nassert f(g(), y=0.5, z=1.5)\n", "emb": null, "idx_generation": 409, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=1.61803398875) -> bool:\n    \"\"\"Check if the value of x raised to the power of y is equal to z multiplied by a\"\"\"\n    return math.isclose(x ** y, z * a)", "solution_func": "def g(x=3.24, y=0.5, z=1.5):\n    return x ** y", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(lst: list, s: int, n: int, m: int) -> bool:\n    \"\"\"Check if the sum of n random integers from the list is equal to s, and if the maximum value of the n integers is less than m\"\"\"\n    random_lst = random.sample(lst, n)\n    return sum(random_lst) == s and max(random_lst) < m\n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], s=27, n=4, m=8):\n    return lst\n\nassert f(g(), s=27, n=4, m=8)\n", "emb": null, "idx_generation": 409, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: list, s: int, n: int, m: int) -> bool:\n    \"\"\"Check if the sum of n random integers from the list is equal to s, and if the maximum value of the n integers is less than m\"\"\"\n    random_lst = random.sample(lst, n)\n    return sum(random_lst) == s and max(random_lst) < m", "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], s=27, n=4, m=8):\n    return lst", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst: list, m: int) -> bool:\n    \"\"\"Check if the sum of the first n integers in the list is equal to m\"\"\"\n    return sum(lst[:n]) == m\n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m=15):\n    return len(lst)\n\nassert f(g(), lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m=15)\n", "emb": null, "idx_generation": 409, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst: list, m: int) -> bool:\n    \"\"\"Check if the sum of the first n integers in the list is equal to m\"\"\"\n    return sum(lst[:n]) == m", "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m=15):\n    return len(lst)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target_sum: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target sum\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\n\ndef g(arr: List[int], target_sum: int):\n    return [arr, target_sum]\n\nassert f(g())\n", "emb": null, "idx_generation": 409, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target_sum: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target sum\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(arr: List[int], target_sum: int):\n    return [arr, target_sum]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subset of the list that sums up to the target\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]\n\ndef g(nums: List[int], target: int):\n    return [nums, target]\n\nassert f(g())\n", "emb": null, "idx_generation": 409, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subset of the list that sums up to the target\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]", "solution_func": "def g(nums: List[int], target: int):\n    return [nums, target]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix: List[List[int]]):\n    return [matrix]\n\nassert f(g())\n", "emb": null, "idx_generation": 409, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(matrix: List[List[int]]):\n    return [matrix]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there are any three numbers in a list that sum up to a target value\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            for k in range(j+1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == target:\n                    return True\n    return False\ndef g(lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return lst\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 409, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there are any three numbers in a list that sum up to a target value\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            for k in range(j+1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == target:\n                    return True\n    return False", "solution_func": "def g(lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return lst", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 100, n: int = 5) -> bool:\n    \"\"\"Find n distinct positive even integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target and all((i >= i % 2 == 0 for i in nums))\n\ndef g(target: int = 100, n: int = 5):\n    return list(range(2, 2 * n + 1, 2)) + [target - sum(range(2, 2 * n + 1, 2))]\n\nassert f(g())\n", "emb": null, "idx_generation": 410, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 100, n: int = 5) -> bool:\n    \"\"\"Find n distinct positive even integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target and all((i >= i % 2 == 0 for i in nums))", "solution_func": "def g(target: int = 100, n: int = 5):\n    return list(range(2, 2 * n + 1, 2)) + [target - sum(range(2, 2 * n + 1, 2))]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[str], pattern: str = 'abc', count: int = 3) -> bool:\n    \"\"\"Check if the given pattern appears a certain number of times in the list\"\"\"\n    return lst.count(pattern) == count\n\ndef g(pattern: str = 'abc', count: int = 3):\n    return [pattern] * count + ['def']\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 410, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[str], pattern: str = 'abc', count: int = 3) -> bool:\n    \"\"\"Check if the given pattern appears a certain number of times in the list\"\"\"\n    return lst.count(pattern) == count", "solution_func": "def g(pattern: str = 'abc', count: int = 3):\n    return [pattern] * count + ['def']", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int = 10) -> bool:\n    \"\"\"Check if the target number appears in the matrix\"\"\"\n    return any(target in row for row in matrix)\n\ndef g(target: int = 10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target]]\n\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 410, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int = 10) -> bool:\n    \"\"\"Check if the target number appears in the matrix\"\"\"\n    return any(target in row for row in matrix)", "solution_func": "def g(target: int = 10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target]]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, a=['xemogubigaleq', 'tav', 'najel', 'ly', 'fahap', 'quasowis', 'xuxot', 'huhon', 'xuwaf', 'fuvur', 'vug', 'jyl', 'jodax', 'zek', 'nax', 'hov', 'hat', 'jex', 'xux', 'fek'], b=['xemogubigaleq', 'tav', 'najel', 'ly', 'fahap', 'quasowis', 'xuxot', 'huhon', 'xuwaf', 'fuvur', 'vug', 'jyl', 'jodax', 'zek', 'nax', 'hov', 'hat', 'jex', 'xux', 'fek']) -> bool:\n    \"\"\"Check if string s is present in both lists a and b\"\"\"\n    return s in a and s in b\ndef g(a = ['xemogubigaleq', 'tav', 'najel', 'ly', 'fahap', 'quasowis', 'xuxot', 'huhon', 'xuwaf', 'fuvur', 'vug', 'jyl', 'jodax', 'zek', 'nax', 'hov', 'hat', 'jex', 'xux', 'fek'], b = ['xemogubigaleq', 'tav', 'najel', 'ly', 'fahap', 'quasowis', 'xuxot', 'huhon', 'xuwaf', 'fuvur', 'vug', 'jyl', 'jodax', 'zek', 'nax', 'hov', 'hat', 'jex', 'xux', 'fek']):\n    return next(s for s in b if s in a)\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 410, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a=['xemogubigaleq', 'tav', 'najel', 'ly', 'fahap', 'quasowis', 'xuxot', 'huhon', 'xuwaf', 'fuvur', 'vug', 'jyl', 'jodax', 'zek', 'nax', 'hov', 'hat', 'jex', 'xux', 'fek'], b=['xemogubigaleq', 'tav', 'najel', 'ly', 'fahap', 'quasowis', 'xuxot', 'huhon', 'xuwaf', 'fuvur', 'vug', 'jyl', 'jodax', 'zek', 'nax', 'hov', 'hat', 'jex', 'xux', 'fek']) -> bool:\n    \"\"\"Check if string s is present in both lists a and b\"\"\"\n    return s in a and s in b", "solution_func": "def g(a = ['xemogubigaleq', 'tav', 'najel', 'ly', 'fahap', 'quasowis', 'xuxot', 'huhon', 'xuwaf', 'fuvur', 'vug', 'jyl', 'jodax', 'zek', 'nax', 'hov', 'hat', 'jex', 'xux', 'fek'], b = ['xemogubigaleq', 'tav', 'najel', 'ly', 'fahap', 'quasowis', 'xuxot', 'huhon', 'xuwaf', 'fuvur', 'vug', 'jyl', 'jodax', 'zek', 'nax', 'hov', 'hat', 'jex', 'xux', 'fek']):\n    return next(s for s in b if s in a)", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substrings=['x', 'vochemachylit', 'vutextynydakelopi', 'fazapydomozamochug']) -> bool:\n    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"\n    return all((sub in s and sub[::-1] in s for sub in substrings))\ndef g(substrings = ['x', 'vochemachylit', 'vutextynydakelopi', 'fazapydomozamochug']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 410, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=['x', 'vochemachylit', 'vutextynydakelopi', 'fazapydomozamochug']) -> bool:\n    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"\n    return all((sub in s and sub[::-1] in s for sub in substrings))", "solution_func": "def g(substrings = ['x', 'vochemachylit', 'vutextynydakelopi', 'fazapydomozamochug']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, ops=['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], target=13) -> bool:\n    \"\"\"\n    Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\n    final value is the target value.\n\n    Sample Input:\n    ops = [\"x++\", \"--x\", \"--x\"]\n    target = 12\n\n    Sample Output:\n    13\n    \"\"\"\n    for op in ops:\n        if op in ['++x', 'x++']:\n            n += 1\n        else:\n            assert op in ['--x', 'x--']\n            n -= 1\n    return n == target\ndef g(ops=['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], target=13):\n    return target + ops.count(\"++x\") + ops.count(\"x++\") - ops.count(\"--x\") - ops.count(\"x--\")\nassert f(g())\n", "emb": null, "idx_generation": 410, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, ops=['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], target=13) -> bool:\n    \"\"\"\n    Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\n    final value is the target value.\n\n    Sample Input:\n    ops = [\"x++\", \"--x\", \"--x\"]\n    target = 12\n\n    Sample Output:\n    13\n    \"\"\"\n    for op in ops:\n        if op in ['++x', 'x++']:\n            n += 1\n        else:\n            assert op in ['--x', 'x--']\n            n -= 1\n    return n == target", "solution_func": "def g(ops=['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], target=13):\n    return target + ops.count(\"++x\") + ops.count(\"x++\") - ops.count(\"--x\") - ops.count(\"x--\")", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Two Sum\n\n    Given a list of integers and a target integer, find two numbers in the list that add up to the target.\n\n    Example:\n    nums = [2, 7, 11, 15]\n    target = 9\n    output: True\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[2, 7, 11, 15], target=9):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 410, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Two Sum\n\n    Given a list of integers and a target integer, find two numbers in the list that add up to the target.\n\n    Example:\n    nums = [2, 7, 11, 15]\n    target = 9\n    output: True\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums=[2, 7, 11, 15], target=9):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Kth Largest Element\n\n    Given a list of integers and an integer k, find the kth largest element in the list.\n\n    Example:\n    nums = [3, 2, 1, 5, 6, 4]\n    k = 2\n    output: 5\n    \"\"\"\n    nums.sort(reverse=True)\n    return nums[k-1]\n\ndef g(nums=[3, 2, 1, 5, 6, 4], k=2):\n    return nums, k\n\nassert f(g()) == 5\n", "emb": null, "idx_generation": 410, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Kth Largest Element\n\n    Given a list of integers and an integer k, find the kth largest element in the list.\n\n    Example:\n    nums = [3, 2, 1, 5, 6, 4]\n    k = 2\n    output: 5\n    \"\"\"\n    nums.sort(reverse=True)\n    return nums[k-1]", "solution_func": "def g(nums=[3, 2, 1, 5, 6, 4], k=2):\n    return nums, k", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Product of Array Except Self\n\n    Given a list of integers, return a new list where each element at index i is the product of all the numbers in the\n    original list except the one at i.\n\n    Example:\n    nums = [1, 2, 3, 4]\n    output: [24, 12, 8, 6]\n    \"\"\"\n    n = len(nums)\n    result = [1] * n\n    left = 1\n    for i in range(n):\n        result[i] *= left\n        left *= nums[i]\n    right = 1\n    for i in range(n-1, -1, -1):\n        result[i] *= right\n        right *= nums[i]\n    return result\n\ndef g(nums=[1, 2, 3, 4]):\n    return nums\n\nassert f(g()) == [24, 12, 8, 6]\n", "emb": [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 410, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Product of Array Except Self\n\n    Given a list of integers, return a new list where each element at index i is the product of all the numbers in the\n    original list except the one at i.\n\n    Example:\n    nums = [1, 2, 3, 4]\n    output: [24, 12, 8, 6]\n    \"\"\"\n    n = len(nums)\n    result = [1] * n\n    left = 1\n    for i in range(n):\n        result[i] *= left\n        left *= nums[i]\n    right = 1\n    for i in range(n-1, -1, -1):\n        result[i] *= right\n        right *= nums[i]\n    return result", "solution_func": "def g(nums=[1, 2, 3, 4]):\n    return nums", "map_ix": [1, 1, 1, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], n=4) -> bool:\n    \"\"\"\n    Given an array of integers, return True if there exists a subarray of length n where the sum of the subarray is 0,\n    and False otherwise.\n\n    Sample input:\n    [2, -3, 1, 5, -4, 7]\n\n    Sample output:\n    True\n\n    Explanation:\n    The subarray [-3, 1, 5, -4] has a sum of 0.\n    \"\"\"\n    return any(sum(arr[i:i+n]) == 0 for i in range(len(arr)-n+1))\ndef g(n=4):\n    return [2, -3, 1, 5, -4, 7]\nassert f(g())\n", "emb": null, "idx_generation": 410, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], n=4) -> bool:\n    \"\"\"\n    Given an array of integers, return True if there exists a subarray of length n where the sum of the subarray is 0,\n    and False otherwise.\n\n    Sample input:\n    [2, -3, 1, 5, -4, 7]\n\n    Sample output:\n    True\n\n    Explanation:\n    The subarray [-3, 1, 5, -4] has a sum of 0.\n    \"\"\"\n    return any(sum(arr[i:i+n]) == 0 for i in range(len(arr)-n+1))", "solution_func": "def g(n=4):\n    return [2, -3, 1, 5, -4, 7]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=100, n=10) -> bool:\n    \"\"\"Find n distinct positive integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target\n\ndef g(target=100, n=10):\n    nums = []\n    while len(nums) < n:\n        num = random.randint(1, target)\n        if num not in nums:\n            nums.append(num)\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 411, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target=100, n=10) -> bool:\n    \"\"\"Find n distinct positive integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target", "solution_func": "def g(target=100, n=10):\n    nums = []\n    while len(nums) < n:\n        num = random.randint(1, target)\n        if num not in nums:\n            nums.append(num)\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there exists two elements in matrix that sum to target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        for j in range(m):\n            for k in range(i, n):\n                for l in range(j, m):\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return True\n    return False\n\ndef g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 411, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there exists two elements in matrix that sum to target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        for j in range(m):\n            for k in range(i, n):\n                for l in range(j, m):\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return True\n    return False", "solution_func": "def g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a subarray in nums that sums to target\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i, n):\n            if sum(nums[i:j+1]) == target:\n                return True\n    return False\n\ndef g(target=5):\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 411, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a subarray in nums that sums to target\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i, n):\n            if sum(nums[i:j+1]) == target:\n                return True\n    return False", "solution_func": "def g(target=5):\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, result: float) -> bool:\n    \"\"\"Check if the result of a mathematical operation meets a certain condition\"\"\"\n    return math.sqrt(x + y) * z == result\n\ndef g(x = 4, y = 9, z = 3):\n    return math.sqrt(x + y) * z\n\nassert f(g(), x = 4, y = 9, z = 3, result = 21)\n", "emb": null, "idx_generation": 411, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, result: float) -> bool:\n    \"\"\"Check if the result of a mathematical operation meets a certain condition\"\"\"\n    return math.sqrt(x + y) * z == result", "solution_func": "def g(x = 4, y = 9, z = 3):\n    return math.sqrt(x + y) * z", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(word: str, letter: str, position: int) -> bool:\n    \"\"\"Check if a specific letter is at the given position in a word\"\"\"\n    return word[position] == letter\n\ndef g(word = \"programming\", letter = \"g\", position = 3):\n    return word\n\nassert f(g(), letter = \"g\", position = 3)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 411, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str, letter: str, position: int) -> bool:\n    \"\"\"Check if a specific letter is at the given position in a word\"\"\"\n    return word[position] == letter", "solution_func": "def g(word = \"programming\", letter = \"g\", position = 3):\n    return word", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(numbers: list, target: int) -> bool:\n    \"\"\"Check if there are two numbers in a list that add up to the target\"\"\"\n    return any(num1 + num2 == target for idx, num1 in enumerate(numbers) for num2 in numbers[idx+1:])\n\ndef g(numbers = [1, 2, 3, 4, 5], target = 7):\n    return numbers\n\nassert f(g(), target = 7)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 411, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: list, target: int) -> bool:\n    \"\"\"Check if there are two numbers in a list that add up to the target\"\"\"\n    return any(num1 + num2 == target for idx, num1 in enumerate(numbers) for num2 in numbers[idx+1:])", "solution_func": "def g(numbers = [1, 2, 3, 4, 5], target = 7):\n    return numbers", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, a=987654321) -> bool:\n    \"\"\"Check if the sum of the digits of a is equal to x.\"\"\"\n    return sum(int(digit) for digit in str(a)) == x\ndef g(a = 987654321):\n    return sum(int(digit) for digit in str(a))\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 411, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=987654321) -> bool:\n    \"\"\"Check if the sum of the digits of a is equal to x.\"\"\"\n    return sum(int(digit) for digit in str(a)) == x", "solution_func": "def g(a = 987654321):\n    return sum(int(digit) for digit in str(a))", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, chars='abcdefghijklmnopqrstuvwxyz') -> bool:\n    \"\"\"Check if all characters in a string are present in a given set of characters.\"\"\"\n    return all(char in chars for char in s)\ndef g(chars = 'abcdefghijklmnopqrstuvwxyz'):\n    return chars\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 411, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, chars='abcdefghijklmnopqrstuvwxyz') -> bool:\n    \"\"\"Check if all characters in a string are present in a given set of characters.\"\"\"\n    return all(char in chars for char in s)", "solution_func": "def g(chars = 'abcdefghijklmnopqrstuvwxyz'):\n    return chars", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(cards: list) -> bool:\n    \"\"\"Check if a given list of cards contains a pair of matching cards.\"\"\"\n    return len(set(cards)) != len(cards)\ndef g():\n    cards = ['A', 'K', 'Q', 'J', '10', '9', '8', '7', '6', '5', '4', '3', '2']\n    random.shuffle(cards)\n    return cards\nassert f(g())\n", "emb": null, "idx_generation": 411, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(cards: list) -> bool:\n    \"\"\"Check if a given list of cards contains a pair of matching cards.\"\"\"\n    return len(set(cards)) != len(cards)", "solution_func": "def g():\n    cards = ['A', 'K', 'Q', 'J', '10', '9', '8', '7', '6', '5', '4', '3', '2']\n    random.shuffle(cards)\n    return cards", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Find if there is a pair of numbers in the list that sums up to the target value.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g(lst: List[int], target: int):\n    \"\"\"Generate a list of random integers and a target value.\"\"\"\n    random.seed(0)\n    lst = [random.randint(1, 100) for _ in range(10)]\n    target = random.randint(1, 200)\n    return lst, target\n\nassert f(*g())\n", "emb": null, "idx_generation": 411, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Find if there is a pair of numbers in the list that sums up to the target value.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False", "solution_func": "def g(lst: List[int], target: int):\n    \"\"\"Generate a list of random integers and a target value.\"\"\"\n    random.seed(0)\n    lst = [random.randint(1, 100) for _ in range(10)]\n    target = random.randint(1, 200)\n    return lst, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10007) -> bool:\n    \"\"\"Find a pair of numbers whose product is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 412, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10007) -> bool:\n    \"\"\"Find a pair of numbers whose product is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='Programming') -> bool:\n    \"\"\"Check if a string contains a target word.\"\"\"\n    return target in s\ndef g(s = 'I love Programming!'):\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 412, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='Programming') -> bool:\n    \"\"\"Check if a string contains a target word.\"\"\"\n    return target in s", "solution_func": "def g(s = 'I love Programming!'):\n    return s", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 412, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=50, n=3) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, determine if there are n integers in the list that add up to the target sum.\n    \"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, n))\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target=50, n=3):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 412, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=50, n=3) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, determine if there are n integers in the list that add up to the target sum.\n    \"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, n))", "solution_func": "def g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target=50, n=3):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='abc', count=3) -> bool:\n    \"\"\"\n    Determine if a string contains a specific substring a certain number of times.\n    \"\"\"\n    return s.count(substr) == count\ndef g(substr='abc', count=3):\n    return substr * count\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 412, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='abc', count=3) -> bool:\n    \"\"\"\n    Determine if a string contains a specific substring a certain number of times.\n    \"\"\"\n    return s.count(substr) == count", "solution_func": "def g(substr='abc', count=3):\n    return substr * count", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers, determine if there are two distinct indices i and j in the list such that nums[i] + nums[j] = target.\n    \"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, 2))\ndef g(nums=[-2, -1, 0, 1, 2, 3, 4, 5], target=0):\n    return nums\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 412, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers, determine if there are two distinct indices i and j in the list such that nums[i] + nums[j] = target.\n    \"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, 2))", "solution_func": "def g(nums=[-2, -1, 0, 1, 2, 3, 4, 5], target=0):\n    return nums", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], n=4, s=10) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 4, s = 10):\n    x = [2] * n\n    x[0] = s - n + 2\n    return x\nassert f(g())\n", "emb": null, "idx_generation": 412, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=4, s=10) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])", "solution_func": "def g(n = 4, s = 10):\n    x = [2] * n\n    x[0] = s - n + 2\n    return x", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, perm='abcdefghijklmnopqrstuvwxyz', target='hello world') -> bool:\n    \"\"\"Find a string that, when a given permutation of characters is applied, has a given result.\"\"\"\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm = 'abcdefghijklmnopqrstuvwxyz', target = 'hello world'):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 412, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, perm='abcdefghijklmnopqrstuvwxyz', target='hello world') -> bool:\n    \"\"\"Find a string that, when a given permutation of characters is applied, has a given result.\"\"\"\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target", "solution_func": "def g(perm = 'abcdefghijklmnopqrstuvwxyz', target = 'hello world'):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(ls: List[str]) -> bool:\n    \"\"\"\n    Find a list of characters which are aligned at the same indices of the three strings 'abc', 'def', and 'ghi'.\n    \"\"\"\n    return tuple(ls) in zip('abc', 'def', 'ghi')\ndef g():\n    return list(next(zip('abc', 'def', 'ghi')))\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 412, "target_skills": null, "problem_func": "from typing import*\ndef f(ls: List[str]) -> bool:\n    \"\"\"\n    Find a list of characters which are aligned at the same indices of the three strings 'abc', 'def', and 'ghi'.\n    \"\"\"\n    return tuple(ls) in zip('abc', 'def', 'ghi')", "solution_func": "def g():\n    return list(next(zip('abc', 'def', 'ghi')))", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int = 10, length: int = 3) -> bool:\n    \"\"\"\n    Find a subarray of length 'length' in the given array 'arr' that adds up to 'target'.\n\n    Example:\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    target = 12\n    length = 4\n\n    Output:\n    True\n\n    Explanation:\n    The subarray [2, 3, 4, 5] adds up to the target value 12.\n    \"\"\"\n    for i in range(len(arr) - length + 1):\n        if sum(arr[i:i+length]) == target:\n            return True\n    return False\n\ndef g(target: int = 10, length: int = 3):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 412, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int = 10, length: int = 3) -> bool:\n    \"\"\"\n    Find a subarray of length 'length' in the given array 'arr' that adds up to 'target'.\n\n    Example:\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    target = 12\n    length = 4\n\n    Output:\n    True\n\n    Explanation:\n    The subarray [2, 3, 4, 5] adds up to the target value 12.\n    \"\"\"\n    for i in range(len(arr) - length + 1):\n        if sum(arr[i:i+length]) == target:\n            return True\n    return False", "solution_func": "def g(target: int = 10, length: int = 3):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Find n distinct characters that appear in s\"\"\"\n    return len(set(s)) >= n\ndef g(n=5):\n    import string\n    return string.ascii_lowercase[:n]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 413, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Find n distinct characters that appear in s\"\"\"\n    return len(set(s)) >= n", "solution_func": "def g(n=5):\n    import string\n    return string.ascii_lowercase[:n]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, divisor=7) -> bool:\n    \"\"\"Find n such that n is divisible by divisor\"\"\"\n    return n % divisor == 0\ndef g(divisor=7):\n    return divisor * 2\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 413, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, divisor=7) -> bool:\n    \"\"\"Find n such that n is divisible by divisor\"\"\"\n    return n % divisor == 0", "solution_func": "def g(divisor=7):\n    return divisor * 2", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find nums such that the sum of nums is equal to target\"\"\"\n    return sum(nums) == target\ndef g(target=100):\n    return [target // 2, target // 2]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 413, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find nums such that the sum of nums is equal to target\"\"\"\n    return sum(nums) == target", "solution_func": "def g(target=100):\n    return [target // 2, target // 2]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if a given substring exists in a string.\"\"\"\n    return substr in s\ndef g(substr = 'python'):\n    s = 'I love python programming'\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 413, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if a given substring exists in a string.\"\"\"\n    return substr in s", "solution_func": "def g(substr = 'python'):\n    s = 'I love python programming'\n    return s", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sums up to a given target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g():\n    nums = [1, 5, 7, 3, 9, 2, 4]\n    return nums\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 413, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sums up to a given target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g():\n    nums = [1, 5, 7, 3, 9, 2, 4]\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if a given target exists in a matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 413, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if a given target exists in a matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the given list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 413, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the given list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, pattern: str) -> bool:\n    \"\"\"Check if the given pattern matches the given string.\"\"\"\n    pattern_dict = {}\n    pattern_set = set()\n    words = s.split()\n\n    if len(words) != len(pattern):\n        return False\n\n    for i in range(len(pattern)):\n        if pattern[i] not in pattern_dict:\n            if words[i] in pattern_set:\n                return False\n            pattern_dict[pattern[i]] = words[i]\n            pattern_set.add(words[i])\n        else:\n            if pattern_dict[pattern[i]] != words[i]:\n                return False\n    \n    return True\ndef g(s=\"dog cat cat dog\", pattern=\"abba\"):\n    return s, pattern\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 413, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, pattern: str) -> bool:\n    \"\"\"Check if the given pattern matches the given string.\"\"\"\n    pattern_dict = {}\n    pattern_set = set()\n    words = s.split()\n\n    if len(words) != len(pattern):\n        return False\n\n    for i in range(len(pattern)):\n        if pattern[i] not in pattern_dict:\n            if words[i] in pattern_set:\n                return False\n            pattern_dict[pattern[i]] = words[i]\n            pattern_set.add(words[i])\n        else:\n            if pattern_dict[pattern[i]] != words[i]:\n                return False\n    \n    return True", "solution_func": "def g(s=\"dog cat cat dog\", pattern=\"abba\"):\n    return s, pattern", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    \n    # Check if each row has the same sum\n    row_sum = sum(matrix[0])\n    for row in matrix:\n        if sum(row) != row_sum:\n            return False\n    \n    # Check if each column has the same sum\n    column_sum = sum(matrix[i][0] for i in range(n))\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) != column_sum:\n            return False\n    \n    # Check if the sum of the main diagonal is the same as the row and column sums\n    if sum(matrix[i][i] for i in range(n)) != row_sum:\n        return False\n    \n    # Check if the sum of the anti-diagonal is the same as the row and column sums\n    if sum(matrix[i][n-i-1] for i in range(n)) != row_sum:\n        return False\n    \n    return True\ndef g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 413, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    \n    # Check if each row has the same sum\n    row_sum = sum(matrix[0])\n    for row in matrix:\n        if sum(row) != row_sum:\n            return False\n    \n    # Check if each column has the same sum\n    column_sum = sum(matrix[i][0] for i in range(n))\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) != column_sum:\n            return False\n    \n    # Check if the sum of the main diagonal is the same as the row and column sums\n    if sum(matrix[i][i] for i in range(n)) != row_sum:\n        return False\n    \n    # Check if the sum of the anti-diagonal is the same as the row and column sums\n    if sum(matrix[i][n-i-1] for i in range(n)) != row_sum:\n        return False\n    \n    return True", "solution_func": "def g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target_sum=0, target_product=1) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list 'nums' whose sum is equal to 'target_sum' and product is equal to 'target_product'.\"\"\"\n    return any((x + y == target_sum and x * y == target_product for x in nums for y in nums if x != y))\ndef g(target_sum=0, target_product=1):\n    return [(target_sum // 2) - 1, (target_sum // 2) + 1]\nassert f(g())\n", "emb": null, "idx_generation": 413, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=0, target_product=1) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list 'nums' whose sum is equal to 'target_sum' and product is equal to 'target_product'.\"\"\"\n    return any((x + y == target_sum and x * y == target_product for x in nums for y in nums if x != y))", "solution_func": "def g(target_sum=0, target_product=1):\n    return [(target_sum // 2) - 1, (target_sum // 2) + 1]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: int, a=142857, b=999999) -> bool:\n    \"\"\"Check if a number is divisible by another number.\"\"\"\n    return a % x == b\ndef g(a = 142857, b = 999999):\n    return b % a\nassert f(g())\n", "emb": null, "idx_generation": 414, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=142857, b=999999) -> bool:\n    \"\"\"Check if a number is divisible by another number.\"\"\"\n    return a % x == b", "solution_func": "def g(a = 142857, b = 999999):\n    return b % a", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=345, b=987, lower_bound=100) -> bool:\n    \"\"\"Determine if a number is within a certain range.\"\"\"\n    return n >= lower_bound and n <= a + b\ndef g(a = 345, b = 987, lower_bound = 100):\n    return a + b - lower_bound + 1\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 414, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=345, b=987, lower_bound=100) -> bool:\n    \"\"\"Determine if a number is within a certain range.\"\"\"\n    return n >= lower_bound and n <= a + b", "solution_func": "def g(a = 345, b = 987, lower_bound = 100):\n    return a + b - lower_bound + 1", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=123, b=456, c=789) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return math.isqrt(n) ** 2 == n and n >= a and n <= b and n != c\ndef g(a = 123, b = 456, c = 789):\n    return a ** 2\nassert f(g())\n", "emb": null, "idx_generation": 414, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=123, b=456, c=789) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return math.isqrt(n) ** 2 == n and n >= a and n <= b and n != c", "solution_func": "def g(a = 123, b = 456, c = 789):\n    return a ** 2", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(num: int, lst=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a given number is in a list of primes.\"\"\"\n    return num in lst\ndef g(lst=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return lst[0]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 414, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int, lst=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a given number is in a list of primes.\"\"\"\n    return num in lst", "solution_func": "def g(lst=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return lst[0]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"Check if a string contains only alphanumeric characters.\"\"\"\n    return s.isalnum() and len(s) > n\ndef g(n=2):\n    return 'a' * n\nassert f(g())\n", "emb": null, "idx_generation": 414, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"Check if a string contains only alphanumeric characters.\"\"\"\n    return s.isalnum() and len(s) > n", "solution_func": "def g(n=2):\n    return 'a' * n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: int, y=10) -> bool:\n    \"\"\"Check if the square root of a number is greater than a given value.\"\"\"\n    return math.sqrt(x) > y\ndef g(y=10):\n    return int(pow(y, 2) + 1)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 414, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: int, y=10) -> bool:\n    \"\"\"Check if the square root of a number is greater than a given value.\"\"\"\n    return math.sqrt(x) > y", "solution_func": "def g(y=10):\n    return int(pow(y, 2) + 1)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    \"\"\"Check if the sum of all elements in the list is even\"\"\"\n    return sum(li) % 2 == 0\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n", "emb": null, "idx_generation": 414, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    \"\"\"Check if the sum of all elements in the list is even\"\"\"\n    return sum(li) % 2 == 0", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target: int) -> bool:\n    \"\"\"Check if there exists two distinct elements in the list that sum up to the target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i + 1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False\n\ndef g(target: int):\n    return [1, 2, 3, 4, 5]\n\nassert f(g(target=7), target=7)\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 414, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target: int) -> bool:\n    \"\"\"Check if there exists two distinct elements in the list that sum up to the target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i + 1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False", "solution_func": "def g(target: int):\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    \"\"\"Check if the list contains any duplicate elements\"\"\"\n    return len(li) != len(set(li))\n\ndef g():\n    return [1, 2, 3, 3, 4]\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 414, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    \"\"\"Check if the list contains any duplicate elements\"\"\"\n    return len(li) != len(set(li))", "solution_func": "def g():\n    return [1, 2, 3, 3, 4]", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"Check if there are k elements in nums that sum up to target.\"\"\"\n    def dfs(nums, target, k, start, cur_sum):\n        if k == 0:\n            return cur_sum == target\n        if cur_sum == target:\n            return dfs(nums, target, k-1, 0, 0)\n        for i in range(start, len(nums)):\n            if cur_sum + nums[i] > target:\n                break\n            if dfs(nums, target, k, i+1, cur_sum + nums[i]):\n                return True\n        return False\n    nums.sort()\n    return dfs(nums, target, k, 0, 0)\n\ndef g(nums=[2, 4, 6, 3, 1], target=9, k=3):\n    return nums\n\nassert f(g(), target=9, k=3)\n", "emb": null, "idx_generation": 414, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"Check if there are k elements in nums that sum up to target.\"\"\"\n    def dfs(nums, target, k, start, cur_sum):\n        if k == 0:\n            return cur_sum == target\n        if cur_sum == target:\n            return dfs(nums, target, k-1, 0, 0)\n        for i in range(start, len(nums)):\n            if cur_sum + nums[i] > target:\n                break\n            if dfs(nums, target, k, i+1, cur_sum + nums[i]):\n                return True\n        return False\n    nums.sort()\n    return dfs(nums, target, k, 0, 0)", "solution_func": "def g(nums=[2, 4, 6, 3, 1], target=9, k=3):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=10, b=2) -> bool:\n    \"\"\"Check if the given number is a power of another number\"\"\"\n    return n == a ** b\ndef g(a=10, b=2):\n    return a ** b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 415, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=10, b=2) -> bool:\n    \"\"\"Check if the given number is a power of another number\"\"\"\n    return n == a ** b", "solution_func": "def g(a=10, b=2):\n    return a ** b", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(arr: list, target: int, n=5) -> bool:\n    \"\"\"Check if there is a subsequence in the array that sums up to the target\"\"\"\n    dp = [[False for _ in range(target + 1)] for _ in range(len(arr) + 1)]\n    dp[0][0] = True\n    for i in range(1, len(arr) + 1):\n        for j in range(target + 1):\n            dp[i][j] = dp[i-1][j]\n            if j >= arr[i-1]:\n                dp[i][j] = dp[i][j] or dp[i-1][j-arr[i-1]]\n    return dp[len(arr)][target]\n\ndef g(arr=[random.randint(1, 10) for _ in range(10)], target=20, n=5):\n    return arr, target\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 415, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(arr: list, target: int, n=5) -> bool:\n    \"\"\"Check if there is a subsequence in the array that sums up to the target\"\"\"\n    dp = [[False for _ in range(target + 1)] for _ in range(len(arr) + 1)]\n    dp[0][0] = True\n    for i in range(1, len(arr) + 1):\n        for j in range(target + 1):\n            dp[i][j] = dp[i-1][j]\n            if j >= arr[i-1]:\n                dp[i][j] = dp[i][j] or dp[i-1][j-arr[i-1]]\n    return dp[len(arr)][target]", "solution_func": "def g(arr=[random.randint(1, 10) for _ in range(10)], target=20, n=5):\n    return arr, target", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, x: int, y: int, z: int) -> bool:\n    \"\"\"Check if the string can be divided into three equal parts\"\"\"\n    if len(s) % 3 != 0:\n        return False\n    part_len = len(s) // 3\n    part1 = s[:part_len]\n    part2 = s[part_len:part_len*2]\n    part3 = s[part_len*2:]\n    return part1.count('x') == x and part2.count('y') == y and part3.count('z') == z\n\ndef g(s=\"xyzxyzxyz\", x=3, y=3, z=3):\n    return s, x, y, z\nassert f(*g())\n", "emb": null, "idx_generation": 415, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, x: int, y: int, z: int) -> bool:\n    \"\"\"Check if the string can be divided into three equal parts\"\"\"\n    if len(s) % 3 != 0:\n        return False\n    part_len = len(s) // 3\n    part1 = s[:part_len]\n    part2 = s[part_len:part_len*2]\n    part3 = s[part_len*2:]\n    return part1.count('x') == x and part2.count('y') == y and part3.count('z') == z", "solution_func": "def g(s=\"xyzxyzxyz\", x=3, y=3, z=3):\n    return s, x, y, z", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if a target value exists in a matrix, where the matrix is sorted row-wise and column-wise.\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    i, j = 0, n - 1\n    while i < m and j >= 0:\n        if matrix[i][j] == target:\n            return True\n        elif matrix[i][j] < target:\n            i += 1\n        else:\n            j -= 1\n    return False\ndef g(matrix = [[1, 4, 7], [2, 5, 8], [3, 6, 9]], target = 5):\n    return matrix, target\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 415, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if a target value exists in a matrix, where the matrix is sorted row-wise and column-wise.\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    i, j = 0, n - 1\n    while i < m and j >= 0:\n        if matrix[i][j] == target:\n            return True\n        elif matrix[i][j] < target:\n            i += 1\n        else:\n            j -= 1\n    return False", "solution_func": "def g(matrix = [[1, 4, 7], [2, 5, 8], [3, 6, 9]], target = 5):\n    return matrix, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g(s = \"racecar\"):\n    return s\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 415, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]", "solution_func": "def g(s = \"racecar\"):\n    return s", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists three distinct indices i, j, k in the list such that nums[i] + nums[j] == nums[k].\"\"\"\n    seen = set()\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            complement = nums[i] + nums[j]\n            if complement in seen:\n                return True\n            seen.add(nums[i])\n            seen.add(nums[j])\n    return False\ndef g(nums = [1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 415, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists three distinct indices i, j, k in the list such that nums[i] + nums[j] == nums[k].\"\"\"\n    seen = set()\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            complement = nums[i] + nums[j]\n            if complement in seen:\n                return True\n            seen.add(nums[i])\n            seen.add(nums[j])\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is present in the list.\"\"\"\n    return n in lst\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst[4]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 415, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is present in the list.\"\"\"\n    return n in lst", "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst[4]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if the given target value exists in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 415, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if the given target value exists in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n: int, t=\"Hello, World!\") -> bool:\n    \"\"\"Check if the given string contains the target string n times.\"\"\"\n    return s.count(t) == n\ndef g(n: int, t=\"Hello, World!\"):\n    return t * n\nassert f(g(), 3)\n", "emb": null, "idx_generation": 415, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int, t=\"Hello, World!\") -> bool:\n    \"\"\"Check if the given string contains the target string n times.\"\"\"\n    return s.count(t) == n", "solution_func": "def g(n: int, t=\"Hello, World!\"):\n    return t * n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(a: int, b: int, c: int, d: int, e: int, f: int, g: int, h: int, i: int, j: int) -> bool:\n    \"\"\"\n    Given 10 integers, return True if the sum of the first 5 integers is equal to the sum of the last 5 integers,\n    and False otherwise.\n    \"\"\"\n    return sum([a, b, c, d, e]) == sum([f, g, h, i, j])\ndef g(a: int, b: int, c: int, d: int, e: int, f: int, g: int, h: int, i: int, j: int):\n    return [a, b, c, d, e, f, g, h, i, j]\nassert f(*g())\n", "emb": null, "idx_generation": 415, "target_skills": null, "problem_func": "from typing import*\ndef f(a: int, b: int, c: int, d: int, e: int, f: int, g: int, h: int, i: int, j: int) -> bool:\n    \"\"\"\n    Given 10 integers, return True if the sum of the first 5 integers is equal to the sum of the last 5 integers,\n    and False otherwise.\n    \"\"\"\n    return sum([a, b, c, d, e]) == sum([f, g, h, i, j])", "solution_func": "def g(a: int, b: int, c: int, d: int, e: int, f: int, g: int, h: int, i: int, j: int):\n    return [a, b, c, d, e, f, g, h, i, j]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find two numbers in a list that sum up to a given target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    return [3, 7, 10, 15, 5]\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 416, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find two numbers in a list that sum up to a given target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=20):\n    return [3, 7, 10, 15, 5]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subset of numbers in a list that sum up to a given target\"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num-1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]\n\ndef g(target=100):\n    return [1, 5, 10, 20, 50]\nassert f(g())\n", "emb": null, "idx_generation": 416, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subset of numbers in a list that sum up to a given target\"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num-1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]", "solution_func": "def g(target=100):\n    return [1, 5, 10, 20, 50]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=16) -> bool:\n    \"\"\"Check if a target number exists in a 2D matrix\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    left = 0\n    right = rows * cols - 1\n    while left <= right:\n        mid = (left + right) // 2\n        row = mid // cols\n        col = mid % cols\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n\ndef g(target=16):\n    return [\n        [1, 3, 5, 7],\n        [10, 11, 16, 20],\n        [23, 30, 34, 60]\n    ]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 416, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=16) -> bool:\n    \"\"\"Check if a target number exists in a 2D matrix\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    left = 0\n    right = rows * cols - 1\n    while left <= right:\n        mid = (left + right) // 2\n        row = mid // cols\n        col = mid % cols\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False", "solution_func": "def g(target=16):\n    return [\n        [1, 3, 5, 7],\n        [10, 11, 16, 20],\n        [23, 30, 34, 60]\n    ]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 416, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=20):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 416, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(target=20):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=30) -> bool:\n    \"\"\"Check if there are four numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                for l in range(k+1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return True\n    return False\ndef g(target=30):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 416, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=30) -> bool:\n    \"\"\"Check if there are four numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                for l in range(k+1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return True\n    return False", "solution_func": "def g(target=30):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=12) -> bool:\n    \"\"\"Check if the sum of any row or column in the matrix equals the target.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    for i in range(rows):\n        row_sum = sum(matrix[i])\n        if row_sum == target:\n            return True\n    \n    for j in range(cols):\n        col_sum = sum(matrix[i][j] for i in range(rows))\n        if col_sum == target:\n            return True\n    \n    return False\n\ndef g(target=12):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 416, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=12) -> bool:\n    \"\"\"Check if the sum of any row or column in the matrix equals the target.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    for i in range(rows):\n        row_sum = sum(matrix[i])\n        if row_sum == target:\n            return True\n    \n    for j in range(cols):\n        col_sum = sum(matrix[i][j] for i in range(rows))\n        if col_sum == target:\n            return True\n    \n    return False", "solution_func": "def g(target=12):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], n=3, target=10) -> bool:\n    \"\"\"Find if there exists a subarray of length n in nums that adds up to the target.\"\"\"\n    for i in range(len(nums) - n + 1):\n        if sum(nums[i:i+n]) == target:\n            return True\n    \n    return False\n\ndef g(n=3, target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": null, "idx_generation": 416, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], n=3, target=10) -> bool:\n    \"\"\"Find if there exists a subarray of length n in nums that adds up to the target.\"\"\"\n    for i in range(len(nums) - n + 1):\n        if sum(nums[i:i+n]) == target:\n            return True\n    \n    return False", "solution_func": "def g(n=3, target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, pattern='abc') -> bool:\n    \"\"\"Check if the given string follows the pattern, where each character in the string corresponds to the character in the pattern at the same index.\"\"\"\n    if len(string) != len(pattern):\n        return False\n    \n    char_map = {}\n    used_chars = set()\n    \n    for i in range(len(string)):\n        if string[i] in char_map:\n            if char_map[string[i]] != pattern[i]:\n                return False\n        else:\n            if pattern[i] in used_chars:\n                return False\n            char_map[string[i]] = pattern[i]\n            used_chars.add(pattern[i])\n    \n    return True\n\ndef g(pattern='abc'):\n    return 'xyz'\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 416, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, pattern='abc') -> bool:\n    \"\"\"Check if the given string follows the pattern, where each character in the string corresponds to the character in the pattern at the same index.\"\"\"\n    if len(string) != len(pattern):\n        return False\n    \n    char_map = {}\n    used_chars = set()\n    \n    for i in range(len(string)):\n        if string[i] in char_map:\n            if char_map[string[i]] != pattern[i]:\n                return False\n        else:\n            if pattern[i] in used_chars:\n                return False\n            char_map[string[i]] = pattern[i]\n            used_chars.add(pattern[i])\n    \n    return True", "solution_func": "def g(pattern='abc'):\n    return 'xyz'", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return s == s[::-1]\ndef g(n=3):\n    import random\n    import string\n    s = ''.join(random.choice(string.ascii_lowercase) for _ in range(n))\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 416, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return s == s[::-1]", "solution_func": "def g(n=3):\n    import random\n    import string\n    s = ''.join(random.choice(string.ascii_lowercase) for _ in range(n))\n    return s", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: str) -> bool:\n    \"\"\"Check if a given string is a palindrome.\"\"\"\n    return x == x[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 417, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str) -> bool:\n    \"\"\"Check if a given string is a palindrome.\"\"\"\n    return x == x[::-1]", "solution_func": "def g():\n    return \"racecar\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int]) -> bool:\n    \"\"\"Check if the elements of a list are in increasing order.\"\"\"\n    return all(x[i] < x[i+1] for i in range(len(x)-1))\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 417, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int]) -> bool:\n    \"\"\"Check if the elements of a list are in increasing order.\"\"\"\n    return all(x[i] < x[i+1] for i in range(len(x)-1))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"Check if n is divisible by k.\"\"\"\n    return n % k == 0\ndef g(k=2):\n    n = 10\n    return n * k\nassert f(g())\n", "emb": null, "idx_generation": 417, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"Check if n is divisible by k.\"\"\"\n    return n % k == 0", "solution_func": "def g(k=2):\n    n = 10\n    return n * k", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(dates: List[str], format='%Y-%m-%d') -> bool:\n    \"\"\"\n    Check if all dates in the list are valid and in the specified format.\n    \"\"\"\n    try:\n        for date_str in dates:\n            datetime.strptime(date_str, format)\n    except ValueError:\n        return False\n    return True\n\ndef g(format='%Y-%m-%d'):\n    return [datetime.now().strftime(format), '2022-01-01', '2022-12-31']\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 417, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(dates: List[str], format='%Y-%m-%d') -> bool:\n    \"\"\"\n    Check if all dates in the list are valid and in the specified format.\n    \"\"\"\n    try:\n        for date_str in dates:\n            datetime.strptime(date_str, format)\n    except ValueError:\n        return False\n    return True", "solution_func": "def g(format='%Y-%m-%d'):\n    return [datetime.now().strftime(format), '2022-01-01', '2022-12-31']", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Check if there are two numbers in the list that sum up to the target.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(target=100):\n    return [1, 2, 3, 4, 5, target-5]\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 417, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Check if there are two numbers in the list that sum up to the target.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False", "solution_func": "def g(target=100):\n    return [1, 2, 3, 4, 5, target-5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='fix') -> bool:\n    \"\"\"\n    Check if all words in the list start with the prefix and end with the suffix.\n    \"\"\"\n    return all((word.startswith(prefix) and word.endswith(suffix) for word in words))\n\ndef g(prefix='pre', suffix='fix'):\n    return ['prefix', 'suffix', 'prefixsuffix']\n\nassert f(g())\n", "emb": null, "idx_generation": 417, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='fix') -> bool:\n    \"\"\"\n    Check if all words in the list start with the prefix and end with the suffix.\n    \"\"\"\n    return all((word.startswith(prefix) and word.endswith(suffix) for word in words))", "solution_func": "def g(prefix='pre', suffix='fix'):\n    return ['prefix', 'suffix', 'prefixsuffix']", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if a given string s contains a substring substr\"\"\"\n    return substr in s\ndef g(substr = 'abc'):\n    return \"xyz\" + substr + \"def\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 417, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if a given string s contains a substring substr\"\"\"\n    return substr in s", "solution_func": "def g(substr = 'abc'):\n    return \"xyz\" + substr + \"def\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there are two elements in a list that sum up to a target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 417, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there are two elements in a list that sum up to a target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, m=3) -> bool:\n    \"\"\"Check if a given number n is divisible by m\"\"\"\n    return n % m == 0\ndef g(m = 3):\n    return m * 10\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 417, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m=3) -> bool:\n    \"\"\"Check if a given number n is divisible by m\"\"\"\n    return n % m == 0", "solution_func": "def g(m = 3):\n    return m * 10", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(points: List[Tuple[float, float]], r=5) -> bool:\n    \"\"\"Check if all points are within a circle with radius r centered at the origin (0, 0)\"\"\"\n    return all(math.sqrt(x**2 + y**2) <= r for x, y in points)\n\ndef g(r=5):\n    return [(x, y) for x in range(-r, r+1) for y in range(-r, r+1)]\n\nassert f(g())\n", "emb": null, "idx_generation": 417, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(points: List[Tuple[float, float]], r=5) -> bool:\n    \"\"\"Check if all points are within a circle with radius r centered at the origin (0, 0)\"\"\"\n    return all(math.sqrt(x**2 + y**2) <= r for x, y in points)", "solution_func": "def g(r=5):\n    return [(x, y) for x in range(-r, r+1) for y in range(-r, r+1)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if a given string contains a target substring.\"\"\"\n    return target in s\ndef g(target='hello'):\n    return 'This is a hello world example.'\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 418, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if a given string contains a target substring.\"\"\"\n    return target in s", "solution_func": "def g(target='hello'):\n    return 'This is a hello world example.'", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10, max_len=3) -> bool:\n    \"\"\"Find a sublist of at most max_len elements whose sum is the target value.\"\"\"\n    for n in nums:\n        assert isinstance(n, int)\n    for l in range(1, max_len + 1):\n        for i in range(len(nums) - l + 1):\n            if sum(nums[i:i+l]) == target:\n                return nums[i:i+l]\n    return []\ndef g(target=10, max_len=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": null, "idx_generation": 418, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10, max_len=3) -> bool:\n    \"\"\"Find a sublist of at most max_len elements whose sum is the target value.\"\"\"\n    for n in nums:\n        assert isinstance(n, int)\n    for l in range(1, max_len + 1):\n        for i in range(len(nums) - l + 1):\n            if sum(nums[i:i+l]) == target:\n                return nums[i:i+l]\n    return []", "solution_func": "def g(target=10, max_len=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=2, b=3, c=5, d=7, e=11) -> bool:\n    \"\"\"Check if a given number is divisible by all of the provided primes.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0 and n % d == 0 and n % e == 0\ndef g(a=2, b=3, c=5, d=7, e=11):\n    return a * b * c * d * e\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 418, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=2, b=3, c=5, d=7, e=11) -> bool:\n    \"\"\"Check if a given number is divisible by all of the provided primes.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0 and n % d == 0 and n % e == 0", "solution_func": "def g(a=2, b=3, c=5, d=7, e=11):\n    return a * b * c * d * e", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that add up to the target value\"\"\"\n    for row in matrix:\n        for num1 in row:\n            for num2 in row:\n                if num1 + num2 == target:\n                    return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 418, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that add up to the target value\"\"\"\n    for row in matrix:\n        for num1 in row:\n            for num2 in row:\n                if num1 + num2 == target:\n                    return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[-1, 2, 3, 4, -5]):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 418, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[-1, 2, 3, 4, -5]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]], origin=(0, 0)) -> bool:\n    \"\"\"Determine if any of the points in the list lie on the given origin\"\"\"\n    for point in points:\n        if point[0] == origin[0] and point[1] == origin[1]:\n            return True\n    return False\n\ndef g(points=[(1, 1), (2, 3), (0, 0), (-1, -1)]):\n    return points\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 418, "target_skills": null, "problem_func": "from typing import*\ndef f(points: List[Tuple[int, int]], origin=(0, 0)) -> bool:\n    \"\"\"Determine if any of the points in the list lie on the given origin\"\"\"\n    for point in points:\n        if point[0] == origin[0] and point[1] == origin[1]:\n            return True\n    return False", "solution_func": "def g(points=[(1, 1), (2, 3), (0, 0), (-1, -1)]):\n    return points", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, chars='abc', count=3) -> bool:\n    \"\"\"Check if the string contains exactly count occurrences of any characters in chars.\"\"\"\n    return sum(s.count(c) for c in chars) == count\ndef g(chars='abc', count=3):\n    return chars * count\nassert f(g())\n", "emb": null, "idx_generation": 418, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, chars='abc', count=3) -> bool:\n    \"\"\"Check if the string contains exactly count occurrences of any characters in chars.\"\"\"\n    return sum(s.count(c) for c in chars) == count", "solution_func": "def g(chars='abc', count=3):\n    return chars * count", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target.\"\"\"\n    return any(target - x in nums for x in nums)\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 418, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target.\"\"\"\n    return any(target - x in nums for x in nums)", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=30) -> bool:\n    \"\"\"Find a submatrix in the matrix that adds up to the target.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            for k in range(i, len(matrix)):\n                for l in range(j, len(matrix[0])):\n                    if sum(matrix[x][y] for x in range(i, k+1) for y in range(j, l+1)) == target:\n                        return True\n    return False\ndef g(target=30):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 418, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=30) -> bool:\n    \"\"\"Find a submatrix in the matrix that adds up to the target.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            for k in range(i, len(matrix)):\n                for l in range(j, len(matrix[0])):\n                    if sum(matrix[x][y] for x in range(i, k+1) for y in range(j, l+1)) == target:\n                        return True\n    return False", "solution_func": "def g(target=30):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=224) -> bool:\n    \"\"\"\n    Given a list of numbers, find a pair of numbers that sum up to the target number\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(nums = [10, 15, 20, 25]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 418, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=224) -> bool:\n    \"\"\"\n    Given a list of numbers, find a pair of numbers that sum up to the target number\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums = [10, 15, 20, 25]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], target = 0) -> bool:\n    \"\"\"Check if a list contains a specific target number\"\"\"\n    return target in lst\n\ndef g(target = 0):\n    lst = random.sample(range(10), 5)\n    return lst\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 419, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: List[int], target = 0) -> bool:\n    \"\"\"Check if a list contains a specific target number\"\"\"\n    return target in lst", "solution_func": "def g(target = 0):\n    lst = random.sample(range(10), 5)\n    return lst", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=10) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return math.sqrt(n) == x\n\ndef g(x = 10):\n    return x**2\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 419, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=10) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return math.sqrt(n) == x", "solution_func": "def g(x = 10):\n    return x**2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, x=5, y=7, z=3) -> bool:\n    \"\"\"Check if the sum of three numbers is equal to a specific target\"\"\"\n    return x + y + z == n\n\ndef g(x = 5, y = 7, z = 3):\n    return x + y + z\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 419, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, x=5, y=7, z=3) -> bool:\n    \"\"\"Check if the sum of three numbers is equal to a specific target\"\"\"\n    return x + y + z == n", "solution_func": "def g(x = 5, y = 7, z = 3):\n    return x + y + z", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=101, max_numbers=5, options=[10, 23, 45, 67, 89]) -> bool:\n    \"\"\"Find a selection of at most max_numbers numbers whose sum is the target value.\"\"\"\n    for n in numbers:\n        assert n in options\n    return len(numbers) <= max_numbers and sum(numbers) == target\ndef g(target=101, max_numbers=5, options=[10, 23, 45, 67, 89]):\n    from itertools import combinations\n    for n in range(max_numbers + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n", "emb": null, "idx_generation": 419, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=101, max_numbers=5, options=[10, 23, 45, 67, 89]) -> bool:\n    \"\"\"Find a selection of at most max_numbers numbers whose sum is the target value.\"\"\"\n    for n in numbers:\n        assert n in options\n    return len(numbers) <= max_numbers and sum(numbers) == target", "solution_func": "def g(target=101, max_numbers=5, options=[10, 23, 45, 67, 89]):\n    from itertools import combinations\n    for n in range(max_numbers + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a three-letter pattern that occurs more than 5 times in the decimal representation of 3^2021.\"\"\"\n    return str(3 ** 2021).count(s) > 5 and len(s) == 3\ndef g():\n    s = str(3 ** 2021)\n    return max({s[i: i + 3] for i in range(len(s) - 2)}, key=lambda t: s.count(t))\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 419, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a three-letter pattern that occurs more than 5 times in the decimal representation of 3^2021.\"\"\"\n    return str(3 ** 2021).count(s) > 5 and len(s) == 3", "solution_func": "def g():\n    s = str(3 ** 2021)\n    return max({s[i: i + 3] for i in range(len(s) - 2)}, key=lambda t: s.count(t))", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(rotations: List[int], target='python', upper=30) -> bool:\n    \"\"\"\n    We begin with the string `\"a...z\"`\n\n    An `r`-rotation of a string means shifting it to the right (positive) or left (negative) by `r` characters and\n    cycling around. Given a target string of length n, find the n rotations that put the consecutive characters\n    of that string at the beginning of the r-rotation, with minimal sum of absolute values of the `r`'s.\n\n    For example if the string was `'java'`, the minimal rotations would be `[9, -7, 5, -4]` with a total of `25`.\n    \"\"\"\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    assert len(rotations) == len(target)\n    for (r, c) in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return sum((abs(r) for r in rotations)) <= upper\ndef g(target='python', upper=30):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans\nassert f(g())\n", "emb": null, "idx_generation": 419, "target_skills": null, "problem_func": "from typing import*\ndef f(rotations: List[int], target='python', upper=30) -> bool:\n    \"\"\"\n    We begin with the string `\"a...z\"`\n\n    An `r`-rotation of a string means shifting it to the right (positive) or left (negative) by `r` characters and\n    cycling around. Given a target string of length n, find the n rotations that put the consecutive characters\n    of that string at the beginning of the r-rotation, with minimal sum of absolute values of the `r`'s.\n\n    For example if the string was `'java'`, the minimal rotations would be `[9, -7, 5, -4]` with a total of `25`.\n    \"\"\"\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    assert len(rotations) == len(target)\n    for (r, c) in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return sum((abs(r) for r in rotations)) <= upper", "solution_func": "def g(target='python', upper=30):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n: int, count=5, check='a') -> bool:\n    \"\"\"Check if a substring appears n times in the string s\"\"\"\n    return s.count(check) == count and s.count(check * n) == count\ndef g(n=4, count=5, check='a'):\n    return check * n * count\nassert f(g())\n", "emb": null, "idx_generation": 419, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int, count=5, check='a') -> bool:\n    \"\"\"Check if a substring appears n times in the string s\"\"\"\n    return s.count(check) == count and s.count(check * n) == count", "solution_func": "def g(n=4, count=5, check='a'):\n    return check * n * count", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], k=3, target=7) -> bool:\n    \"\"\"Check if there is a subarray of length k that sums up to the target\"\"\"\n    for i in range(len(nums) - k + 1):\n        if sum(nums[i:i+k]) == target:\n            return True\n    return False\ndef g(k=3, target=7):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g())\n", "emb": null, "idx_generation": 419, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=3, target=7) -> bool:\n    \"\"\"Check if there is a subarray of length k that sums up to the target\"\"\"\n    for i in range(len(nums) - k + 1):\n        if sum(nums[i:i+k]) == target:\n            return True\n    return False", "solution_func": "def g(k=3, target=7):\n    return [1, 2, 3, 4, 5, 6]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"Check if there is a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        if sum(matrix[i][j] for i in range(n)) == target:\n            return True\n    return False\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 419, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"Check if there is a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        if sum(matrix[i][j] for i in range(n)) == target:\n            return True\n    return False", "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, return True if there exists a pair of numbers in the list\n    whose sum is equal to the target, otherwise return False.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(target - num in nums for num in nums)\ndef g(nums = [1, 2, 3, 4, 5], target = 7):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 419, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, return True if there exists a pair of numbers in the list\n    whose sum is equal to the target, otherwise return False.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(target - num in nums for num in nums)", "solution_func": "def g(nums = [1, 2, 3, 4, 5], target = 7):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given array is a palindrome\"\"\"\n    return arr == arr[::-1]\ndef g():\n    return [1, 2, 3, 2, 1]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 420, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given array is a palindrome\"\"\"\n    return arr == arr[::-1]", "solution_func": "def g():\n    return [1, 2, 3, 2, 1]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"Check if the given number is a perfect square\"\"\"\n    return int(num ** 0.5) ** 2 == num\ndef g():\n    return 144\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 420, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"Check if the given number is a perfect square\"\"\"\n    return int(num ** 0.5) ** 2 == num", "solution_func": "def g():\n    return 144", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate elements\"\"\"\n    return len(nums) != len(set(nums))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": null, "idx_generation": 420, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate elements\"\"\"\n    return len(nums) != len(set(nums))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(num: int, x=50, y=100) -> bool:\n    \"\"\"Check if a number is within a certain range\"\"\"\n    return math.isclose(num, x, rel_tol=y)\ndef g(x = 50, y = 100):\n    return x + y\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 420, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(num: int, x=50, y=100) -> bool:\n    \"\"\"Check if a number is within a certain range\"\"\"\n    return math.isclose(num, x, rel_tol=y)", "solution_func": "def g(x = 50, y = 100):\n    return x + y", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(values: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that adds up to a target value\"\"\"\n    return any((x + y == target for i, x in enumerate(values) for y in values[i+1:]))\ndef g(target = 100):\n    return [0, target]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 420, "target_skills": null, "problem_func": "from typing import*\ndef f(values: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that adds up to a target value\"\"\"\n    return any((x + y == target for i, x in enumerate(values) for y in values[i+1:]))", "solution_func": "def g(target = 100):\n    return [0, target]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], m=3, n=3) -> bool:\n    \"\"\"Check if a given matrix is a magic square\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag_sum1 = sum(matrix[i][i] for i in range(m))\n    diag_sum2 = sum(matrix[i][m-i-1] for i in range(m))\n    return all((s == row_sums[0] for s in row_sums)) and all((s == col_sums[0] for s in col_sums)) and diag_sum1 == diag_sum2 == row_sums[0]\ndef g(m = 3, n = 3):\n    return [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 420, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], m=3, n=3) -> bool:\n    \"\"\"Check if a given matrix is a magic square\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag_sum1 = sum(matrix[i][i] for i in range(m))\n    diag_sum2 = sum(matrix[i][m-i-1] for i in range(m))\n    return all((s == row_sums[0] for s in row_sums)) and all((s == col_sums[0] for s in col_sums)) and diag_sum1 == diag_sum2 == row_sums[0]", "solution_func": "def g(m = 3, n = 3):\n    return [[8, 1, 6], [3, 5, 7], [4, 9, 2]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport itertools\n\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Find a sublist of the given list that adds up to the target value.\"\"\"\n    for r in range(1, len(lst) + 1):\n        for subset in itertools.combinations(lst, r):\n            if sum(subset) == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 420, "target_skills": null, "problem_func": "from typing import*\nimport itertools\n\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Find a sublist of the given list that adds up to the target value.\"\"\"\n    for r in range(1, len(lst) + 1):\n        for subset in itertools.combinations(lst, r):\n            if sum(subset) == target:\n                return True\n    return False", "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50]", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string contains all unique substrings of length n.\"\"\"\n    substrings = set()\n    for i in range(len(s) - n + 1):\n        substrings.add(s[i:i+n])\n    return len(substrings) == len(set(s))\n\ndef g(n=3):\n    return \"abacabadabacaba\"\n\nassert f(g())\n", "emb": null, "idx_generation": 420, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string contains all unique substrings of length n.\"\"\"\n    substrings = set()\n    for i in range(len(s) - n + 1):\n        substrings.add(s[i:i+n])\n    return len(substrings) == len(set(s))", "solution_func": "def g(n=3):\n    return \"abacabadabacaba\"", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, lst=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 23\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 420, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, lst=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g():\n    return 23", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(li: List[int], product=362880) -> bool:\n    \"\"\"Check if the product of all elements in the list is equal to a certain value\"\"\"\n    return math.prod(li) == product\n\ndef g(product = 362880):\n    factors = []\n    for i in range(1, product+1):\n        if product % i == 0:\n            factors.append(i)\n    return factors\nassert f(g())\n", "emb": null, "idx_generation": 420, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(li: List[int], product=362880) -> bool:\n    \"\"\"Check if the product of all elements in the list is equal to a certain value\"\"\"\n    return math.prod(li) == product", "solution_func": "def g(product = 362880):\n    factors = []\n    for i in range(1, product+1):\n        if product % i == 0:\n            factors.append(i)\n    return factors", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, find if the target value exists in the matrix.\n    The matrix is sorted in ascending order from left to right and top to bottom.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    # Starting from the top-right corner\n    row = 0\n    col = cols - 1\n    \n    while row < rows and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] > target:\n            col -= 1\n        else:\n            row += 1\n    \n    return False\n\ndef g(target=10):\n    matrix = [\n        [1, 3, 5, 7],\n        [2, 4, 6, 8],\n        [9, 11, 13, 15],\n        [10, 12, 14, 16]\n    ]\n    return matrix\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 421, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, find if the target value exists in the matrix.\n    The matrix is sorted in ascending order from left to right and top to bottom.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    # Starting from the top-right corner\n    row = 0\n    col = cols - 1\n    \n    while row < rows and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] > target:\n            col -= 1\n        else:\n            row += 1\n    \n    return False", "solution_func": "def g(target=10):\n    matrix = [\n        [1, 3, 5, 7],\n        [2, 4, 6, 8],\n        [9, 11, 13, 15],\n        [10, 12, 14, 16]\n    ]\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, substring='python') -> bool:\n    \"\"\"\n    Given a string and a substring, determine if the substring exists in the string.\n    \"\"\"\n    return substring in string\n\ndef g(substring='python'):\n    string = \"Python is a widely used high-level programming language.\"\n    return string\n\nassert f(g())\n", "emb": null, "idx_generation": 421, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring='python') -> bool:\n    \"\"\"\n    Given a string and a substring, determine if the substring exists in the string.\n    \"\"\"\n    return substring in string", "solution_func": "def g(substring='python'):\n    string = \"Python is a widely used high-level programming language.\"\n    return string", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, find if there exist two numbers in the list\n    such that their sum is equal to the target value.\n    \"\"\"\n    seen = set()\n    \n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    \n    return False\n\ndef g(target=0):\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 421, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, find if there exist two numbers in the list\n    such that their sum is equal to the target value.\n    \"\"\"\n    seen = set()\n    \n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    \n    return False", "solution_func": "def g(target=0):\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nimport random\nfrom typing import*\ndef f(numbers: List[int], target=1000) -> bool:\n    \"\"\"\n    Given a list of numbers, find a combination of numbers that adds up to the target value.\n    Return True if such a combination exists, and False otherwise.\n    \"\"\"\n    import itertools\n    for r in range(1, len(numbers) + 1):\n        for combo in itertools.combinations(numbers, r):\n            if sum(combo) == target:\n                return True\n    return False\n\ndef g(target=1000):\n    \"\"\"\n    Generate a random list of numbers that add up to the target value.\n    \"\"\"\n    import random\n    numbers = []\n    while sum(numbers) < target:\n        num = random.randint(1, target - sum(numbers))\n        numbers.append(num)\n    return numbers\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 421, "target_skills": null, "problem_func": "import itertools\nimport random\nfrom typing import*\ndef f(numbers: List[int], target=1000) -> bool:\n    \"\"\"\n    Given a list of numbers, find a combination of numbers that adds up to the target value.\n    Return True if such a combination exists, and False otherwise.\n    \"\"\"\n    import itertools\n    for r in range(1, len(numbers) + 1):\n        for combo in itertools.combinations(numbers, r):\n            if sum(combo) == target:\n                return True\n    return False", "solution_func": "def g(target=1000):\n    \"\"\"\n    Generate a random list of numbers that add up to the target value.\n    \"\"\"\n    import random\n    numbers = []\n    while sum(numbers) < target:\n        num = random.randint(1, target - sum(numbers))\n        numbers.append(num)\n    return numbers", "map_ix": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is a square matrix.\n    Return True if it is a square matrix, and False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\n\ndef g():\n    \"\"\"\n    Generate a random square matrix.\n    \"\"\"\n    import random\n    size = random.randint(2, 10)\n    matrix = [[random.randint(0, 9) for _ in range(size)] for _ in range(size)]\n    return matrix\n\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 421, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is a square matrix.\n    Return True if it is a square matrix, and False otherwise.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols", "solution_func": "def g():\n    \"\"\"\n    Generate a random square matrix.\n    \"\"\"\n    import random\n    size = random.randint(2, 10)\n    matrix = [[random.randint(0, 9) for _ in range(size)] for _ in range(size)]\n    return matrix", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of numbers, find a pair of numbers that adds up to the target value.\n    Return True if such a pair exists, and False otherwise.\n    \"\"\"\n    for i, num1 in enumerate(numbers):\n        for num2 in numbers[i+1:]:\n            if num1 + num2 == target:\n                return True\n    return False\n\ndef g(target=0):\n    \"\"\"\n    Generate a random list of numbers.\n    \"\"\"\n    import random\n    numbers = []\n    size = random.randint(1, 10)\n    for _ in range(size):\n        numbers.append(random.randint(-10, 10))\n    return numbers\n\nassert f(g())\n", "emb": null, "idx_generation": 421, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of numbers, find a pair of numbers that adds up to the target value.\n    Return True if such a pair exists, and False otherwise.\n    \"\"\"\n    for i, num1 in enumerate(numbers):\n        for num2 in numbers[i+1:]:\n            if num1 + num2 == target:\n                return True\n    return False", "solution_func": "def g(target=0):\n    \"\"\"\n    Generate a random list of numbers.\n    \"\"\"\n    import random\n    numbers = []\n    size = random.randint(1, 10)\n    for _ in range(size):\n        numbers.append(random.randint(-10, 10))\n    return numbers", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom datetime import date\ndef f(d: date, weekday='Monday') -> bool:\n    \"\"\"Check if the given date falls on a specific weekday\"\"\"\n    return d.strftime('%A') == weekday\ndef g(weekday='Monday'):\n    d = date.today()\n    while d.strftime('%A') != weekday:\n        d = d.replace(day=d.day+1)\n    return d\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 421, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import date\ndef f(d: date, weekday='Monday') -> bool:\n    \"\"\"Check if the given date falls on a specific weekday\"\"\"\n    return d.strftime('%A') == weekday", "solution_func": "def g(weekday='Monday'):\n    d = date.today()\n    while d.strftime('%A') != weekday:\n        d = d.replace(day=d.day+1)\n    return d", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport itertools\ndef f(items: List[Union[int, str]], target_sum=42) -> bool:\n    \"\"\"\n    Find a combination of items that sum up to the target sum\n\n    Example:\n    items = [10, 20, 'abc', 'def', 5]\n    target_sum = 35\n    output: True\n    \"\"\"\n    for r in range(len(items)+1):\n        for combination in itertools.combinations(items, r):\n            if sum(combination) == target_sum:\n                return True\n    return False\ndef g(items=[10, 20, 'abc', 'def', 5], target_sum=42):\n    return items\nassert f(g())\n", "emb": null, "idx_generation": 421, "target_skills": null, "problem_func": "from typing import*\nimport itertools\ndef f(items: List[Union[int, str]], target_sum=42) -> bool:\n    \"\"\"\n    Find a combination of items that sum up to the target sum\n\n    Example:\n    items = [10, 20, 'abc', 'def', 5]\n    target_sum = 35\n    output: True\n    \"\"\"\n    for r in range(len(items)+1):\n        for combination in itertools.combinations(items, r):\n            if sum(combination) == target_sum:\n                return True\n    return False", "solution_func": "def g(items=[10, 20, 'abc', 'def', 5], target_sum=42):\n    return items", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\ndef f(n: int, target_count=100) -> bool:\n    \"\"\"Check if a random number generator can generate a specific count of a given number\"\"\"\n    return sum((random.randint(1, 6) == n for _ in range(target_count))) == target_count\ndef g(target_count=100):\n    return random.randint(1, 6)\nassert f(g())\n", "emb": null, "idx_generation": 421, "target_skills": null, "problem_func": "from typing import*\nimport random\ndef f(n: int, target_count=100) -> bool:\n    \"\"\"Check if a random number generator can generate a specific count of a given number\"\"\"\n    return sum((random.randint(1, 6) == n for _ in range(target_count))) == target_count", "solution_func": "def g(target_count=100):\n    return random.randint(1, 6)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=4.5, b=10) -> bool:\n    \"\"\"Check if the square root of the sum of two numbers is equal to n\"\"\"\n    return math.sqrt(a + b) == n\n\ndef g(a=4.5, b=10):\n    return a + b\n\nassert f(g())\n", "emb": null, "idx_generation": 421, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=4.5, b=10) -> bool:\n    \"\"\"Check if the square root of the sum of two numbers is equal to n\"\"\"\n    return math.sqrt(a + b) == n", "solution_func": "def g(a=4.5, b=10):\n    return a + b", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target_val=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    return any((arr[i] + arr[j] == target_val for i in range(len(arr)) for j in range(i + 1, len(arr))))\ndef g(target_val = 10):\n    return [1, target_val - 1]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 422, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target_val=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    return any((arr[i] + arr[j] == target_val for i in range(len(arr)) for j in range(i + 1, len(arr))))", "solution_func": "def g(target_val = 10):\n    return [1, target_val - 1]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    return all((matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[i]))))\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 422, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    return all((matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[i]))))", "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]", "map_ix": [1, 0, 1, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, pattern: str) -> bool:\n    \"\"\"Check if the given pattern is a substring of the given string.\"\"\"\n    return pattern in string\ndef g(pattern = \"abc\"):\n    return \"def\" + pattern + \"ghi\"\nassert f(g())\n", "emb": null, "idx_generation": 422, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, pattern: str) -> bool:\n    \"\"\"Check if the given pattern is a substring of the given string.\"\"\"\n    return pattern in string", "solution_func": "def g(pattern = \"abc\"):\n    return \"def\" + pattern + \"ghi\"", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(arr: List[int], lower_bound=10, upper_bound=100) -> bool:\n    \"\"\"Check if all numbers in the list arr are between lower_bound and upper_bound (inclusive).\"\"\"\n    return all(lower_bound <= num <= upper_bound for num in arr)\ndef g(lower_bound=10, upper_bound=100):\n    from random import randint\n    return [randint(lower_bound, upper_bound) for _ in range(10)]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 422, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(arr: List[int], lower_bound=10, upper_bound=100) -> bool:\n    \"\"\"Check if all numbers in the list arr are between lower_bound and upper_bound (inclusive).\"\"\"\n    return all(lower_bound <= num <= upper_bound for num in arr)", "solution_func": "def g(lower_bound=10, upper_bound=100):\n    from random import randint\n    return [randint(lower_bound, upper_bound) for _ in range(10)]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substring=\"hello\") -> bool:\n    \"\"\"Check if the substring appears in the string.\"\"\"\n    return substring in string\ndef g(substring=\"hello\"):\n    return \"This is a test string and hello is the substring.\" + substring\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 422, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring=\"hello\") -> bool:\n    \"\"\"Check if the substring appears in the string.\"\"\"\n    return substring in string", "solution_func": "def g(substring=\"hello\"):\n    return \"This is a test string and hello is the substring.\" + substring", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the matrix that sum to the target value.\"\"\"\n    return any(target - num in row for row in matrix for num in row)\ndef g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 422, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the matrix that sum to the target value.\"\"\"\n    return any(target - num in row for row in matrix for num in row)", "solution_func": "def g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], target=42) -> bool:\n    \"\"\"Check if a list contains two numbers that add up to the target\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False\ndef g(target=42):\n    return [10, 20, 30, 40, 50]\nassert f(g())\n", "emb": null, "idx_generation": 422, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], target=42) -> bool:\n    \"\"\"Check if a list contains two numbers that add up to the target\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False", "solution_func": "def g(target=42):\n    return [10, 20, 30, 40, 50]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: str, char='a') -> bool:\n    \"\"\"Check if a string starts and ends with the same character\"\"\"\n    return x[0] == x[-1] == char\ndef g(char='a'):\n    return char + 'bc' + char\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 422, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str, char='a') -> bool:\n    \"\"\"Check if a string starts and ends with the same character\"\"\"\n    return x[0] == x[-1] == char", "solution_func": "def g(char='a'):\n    return char + 'bc' + char", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], n=3) -> bool:\n    \"\"\"Check if the sum of any n consecutive numbers in a list is equal to 0\"\"\"\n    for i in range(len(x)-n+1):\n        if sum(x[i:i+n]) == 0:\n            return True\n    return False\ndef g(n=3):\n    return [1, -2, 3, 4, -5, 6]\nassert f(g())\n", "emb": null, "idx_generation": 422, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=3) -> bool:\n    \"\"\"Check if the sum of any n consecutive numbers in a list is equal to 0\"\"\"\n    for i in range(len(x)-n+1):\n        if sum(x[i:i+n]) == 0:\n            return True\n    return False", "solution_func": "def g(n=3):\n    return [1, -2, 3, 4, -5, 6]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Check if the given string can be compressed to the target length\"\"\"\n    compressed = \"\"\n    count = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            count += 1\n        else:\n            compressed += s[i-1] + str(count)\n            count = 1\n        if len(compressed) > target_length:\n            return False\n    compressed += s[-1] + str(count)\n    return len(compressed) <= target_length\n\ndef g(s=\"aabbbccccdd\"):\n    return s\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 422, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Check if the given string can be compressed to the target length\"\"\"\n    compressed = \"\"\n    count = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            count += 1\n        else:\n            compressed += s[i-1] + str(count)\n            count = 1\n        if len(compressed) > target_length:\n            return False\n    compressed += s[-1] + str(count)\n    return len(compressed) <= target_length", "solution_func": "def g(s=\"aabbbccccdd\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr: str = 'abc') -> bool:\n    \"\"\"Check if substr is a substring of s\"\"\"\n    return substr in s\ndef g(substr: str = 'abc'):\n    return 'xyz' + substr + '123'\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 423, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr: str = 'abc') -> bool:\n    \"\"\"Check if substr is a substring of s\"\"\"\n    return substr in s", "solution_func": "def g(substr: str = 'abc'):\n    return 'xyz' + substr + '123'", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains both even and odd numbers\"\"\"\n    return any(x % 2 == 0 for x in nums) and any(x % 2 != 0 for x in nums)\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 423, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains both even and odd numbers\"\"\"\n    return any(x % 2 == 0 for x in nums) and any(x % 2 != 0 for x in nums)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if s is a palindrome\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 423, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if s is a palindrome\"\"\"\n    return s == s[::-1]", "solution_func": "def g():\n    return \"racecar\"", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst: list, k=2) -> bool:\n    \"\"\"Check if the sum of any two numbers in a list is divisible by a given number\"\"\"\n    return any((x + y) % n == 0 for x in lst for y in lst if x != y)\n\ndef g(lst: list, k=2):\n    random.shuffle(lst)\n    return lst\n\nassert f(k=g())\n", "emb": null, "idx_generation": 423, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(n: int, lst: list, k=2) -> bool:\n    \"\"\"Check if the sum of any two numbers in a list is divisible by a given number\"\"\"\n    return any((x + y) % n == 0 for x in lst for y in lst if x != y)", "solution_func": "def g(lst: list, k=2):\n    random.shuffle(lst)\n    return lst", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, num=3) -> bool:\n    \"\"\"Check if a string contains a specified number of consecutive digits\"\"\"\n    for i in range(len(s) - num + 1):\n        if s[i:i+num].isdigit():\n            return True\n    return False\n\ndef g(num=3):\n    return '123456789' * num\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 423, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, num=3) -> bool:\n    \"\"\"Check if a string contains a specified number of consecutive digits\"\"\"\n    for i in range(len(s) - num + 1):\n        if s[i:i+num].isdigit():\n            return True\n    return False", "solution_func": "def g(num=3):\n    return '123456789' * num", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, lst: list, k=2) -> bool:\n    \"\"\"Check if the product of any two numbers in a list is a perfect square\"\"\"\n    return any(math.isqrt(x * y) ** 2 == x * y for x in lst for y in lst if x != y)\n\ndef g(lst: list, k=2):\n    return lst\n\nassert f(k=g())\n", "emb": null, "idx_generation": 423, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, lst: list, k=2) -> bool:\n    \"\"\"Check if the product of any two numbers in a list is a perfect square\"\"\"\n    return any(math.isqrt(x * y) ** 2 == x * y for x in lst for y in lst if x != y)", "solution_func": "def g(lst: list, k=2):\n    return lst", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=1000) -> bool:\n    \"\"\"Find a combination of numbers from the given list that adds up to the target value.\"\"\"\n    return sum(nums) == target\ndef g(target=1000):\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    from itertools import combinations\n    for n in range(1, len(nums) + 1):\n        for c in combinations(nums, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n", "emb": null, "idx_generation": 423, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=1000) -> bool:\n    \"\"\"Find a combination of numbers from the given list that adds up to the target value.\"\"\"\n    return sum(nums) == target", "solution_func": "def g(target=1000):\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    from itertools import combinations\n    for n in range(1, len(nums) + 1):\n        for c in combinations(nums, n):\n            if sum(c) == target:\n                return list(c)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a pair of numbers from the given matrix that adds up to the target value.\"\"\"\n    return any((target in row for row in matrix))\ndef g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 423, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a pair of numbers from the given matrix that adds up to the target value.\"\"\"\n    return any((target in row for row in matrix))", "solution_func": "def g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Find a combination of numbers from the given list that multiplies up to the target value.\"\"\"\n    return all((target % num == 0 for num in nums))\ndef g(target=50):\n    nums = [2, 5, 10, 20, 25]\n    from itertools import combinations\n    for n in range(1, len(nums) + 1):\n        for c in combinations(nums, n):\n            if target == 1:\n                return list(c)\n            if target % (c[0] * c[1]) == 0:\n                return list(c)\nassert f(g())\n", "emb": null, "idx_generation": 423, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Find a combination of numbers from the given list that multiplies up to the target value.\"\"\"\n    return all((target % num == 0 for num in nums))", "solution_func": "def g(target=50):\n    nums = [2, 5, 10, 20, 25]\n    from itertools import combinations\n    for n in range(1, len(nums) + 1):\n        for c in combinations(nums, n):\n            if target == 1:\n                return list(c)\n            if target % (c[0] * c[1]) == 0:\n                return list(c)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find two distinct elements in the list arr that sum up to the target value\"\"\"\n    return any(arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr)))\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 423, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find two distinct elements in the list arr that sum up to the target value\"\"\"\n    return any(arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr)))", "solution_func": "def g(arr=[1, 2, 3, 4, 5]):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n: int, target='abcdefg') -> bool:\n    \"\"\"\n    Given a string s and a target string, check if s contains the target string n times.\n\n    Sample Input:\n    s = 'abcabcabcabc'\n    n = 4\n\n    Sample Output:\n    True\n    \"\"\"\n    return s.count(target) == n\ndef g(s='abcabcabcabc', n=4):\n    return s.count('abcdefg')\nassert f(g())\n", "emb": null, "idx_generation": 424, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int, target='abcdefg') -> bool:\n    \"\"\"\n    Given a string s and a target string, check if s contains the target string n times.\n\n    Sample Input:\n    s = 'abcabcabcabc'\n    n = 4\n\n    Sample Output:\n    True\n    \"\"\"\n    return s.count(target) == n", "solution_func": "def g(s='abcabcabcabc', n=4):\n    return s.count('abcdefg')", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of numbers, find if there are two numbers that sum up to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 424, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of numbers, find if there are two numbers that sum up to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of numbers and a target number, find if there are three numbers in the list that sum up to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 424, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of numbers and a target number, find if there are three numbers in the list that sum up to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring='foo') -> bool:\n    \"\"\"\n    Given a string s, check if the substring is present in s.\n\n    Sample Input:\n    s = \"hello foo bar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return substring in s\ndef g(substring='foo'):\n    return f\"hello {substring} bar\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 424, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring='foo') -> bool:\n    \"\"\"\n    Given a string s, check if the substring is present in s.\n\n    Sample Input:\n    s = \"hello foo bar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return substring in s", "solution_func": "def g(substring='foo'):\n    return f\"hello {substring} bar\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6], k=3) -> bool:\n    \"\"\"\n    Given a list of integers and an integer k, determine if there exists a pair of integers in the list whose sum is k.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5, 6]\n    k = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    return any((nums[i] + nums[j] == k for i in range(n) for j in range(i+1, n)))\ndef g(nums=[1, 2, 3, 4, 5, 6], k=9):\n    return any((nums[i] + nums[j] == k for i in range(len(nums)) for j in range(i+1, len(nums))))\nassert f(g())\n", "emb": null, "idx_generation": 424, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6], k=3) -> bool:\n    \"\"\"\n    Given a list of integers and an integer k, determine if there exists a pair of integers in the list whose sum is k.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5, 6]\n    k = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    return any((nums[i] + nums[j] == k for i in range(n) for j in range(i+1, n)))", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6], k=9):\n    return any((nums[i] + nums[j] == k for i in range(len(nums)) for j in range(i+1, len(nums))))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport pandas as pd\n\ndef f(df: pd.DataFrame, column='A') -> bool:\n    \"\"\"\n    Given a Pandas DataFrame and a column name, check if the values in the column are sorted in ascending order.\n\n    Sample Input:\n    df = pd.DataFrame({'A': [1, 2, 3, 4, 5]})\n\n    Sample Output:\n    True\n    \"\"\"\n    return (df[column].diff() >= 0).all()\ndef g(column='A'):\n    return pd.DataFrame({column: [1, 2, 3, 4, 5]})\nassert f(g())\n", "emb": null, "idx_generation": 424, "target_skills": null, "problem_func": "from typing import*\nimport pandas as pd\n\ndef f(df: pd.DataFrame, column='A') -> bool:\n    \"\"\"\n    Given a Pandas DataFrame and a column name, check if the values in the column are sorted in ascending order.\n\n    Sample Input:\n    df = pd.DataFrame({'A': [1, 2, 3, 4, 5]})\n\n    Sample Output:\n    True\n    \"\"\"\n    return (df[column].diff() >= 0).all()", "solution_func": "def g(column='A'):\n    return pd.DataFrame({column: [1, 2, 3, 4, 5]})", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, word='python', max_len=10) -> bool:\n    \"\"\"\n    Replace all occurrences of a given word with '***' in a string, as long as the resulting string is not longer than\n    a given length.\n    \"\"\"\n    if len(s) <= max_len:\n        return s == word or '***' not in s\n    return len(s.replace(word, '***')) <= max_len\ndef g(word='python', max_len=10):\n    if len(word) <= max_len:\n        return word\n    return word.replace(word, '***')\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 424, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, word='python', max_len=10) -> bool:\n    \"\"\"\n    Replace all occurrences of a given word with '***' in a string, as long as the resulting string is not longer than\n    a given length.\n    \"\"\"\n    if len(s) <= max_len:\n        return s == word or '***' not in s\n    return len(s.replace(word, '***')) <= max_len", "solution_func": "def g(word='python', max_len=10):\n    if len(word) <= max_len:\n        return word\n    return word.replace(word, '***')", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, word='watermelon', max_len=15) -> bool:\n    \"\"\"\n    Check if a word is a substring of a string, as long as the resulting string is not longer than a given length.\n    \"\"\"\n    if len(s) <= max_len:\n        return word in s\n    return len(s) <= max_len\ndef g(word='watermelon', max_len=15):\n    if len(word) <= max_len:\n        return word\n    return word[:max_len]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 424, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, word='watermelon', max_len=15) -> bool:\n    \"\"\"\n    Check if a word is a substring of a string, as long as the resulting string is not longer than a given length.\n    \"\"\"\n    if len(s) <= max_len:\n        return word in s\n    return len(s) <= max_len", "solution_func": "def g(word='watermelon', max_len=15):\n    if len(word) <= max_len:\n        return word\n    return word[:max_len]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, nums=[10, 20, 30, 40, 50], target=150) -> bool:\n    \"\"\"\n    Check if the sum of a list of numbers is equal to a target value.\n    \"\"\"\n    return sum(nums) == target\ndef g(nums=[10, 20, 30, 40, 50], target=150):\n    return sum(nums)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 424, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, nums=[10, 20, 30, 40, 50], target=150) -> bool:\n    \"\"\"\n    Check if the sum of a list of numbers is equal to a target value.\n    \"\"\"\n    return sum(nums) == target", "solution_func": "def g(nums=[10, 20, 30, 40, 50], target=150):\n    return sum(nums)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target = 0):\n    nums = [-1, 2, 3, 5, 7, 9]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 424, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(target = 0):\n    nums = [-1, 2, 3, 5, 7, 9]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=10, b=20, c=30) -> bool:\n    \"\"\"Check if n is divisible by a, b, and c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=10, b=20, c=30):\n    return a * b * c\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 425, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=10, b=20, c=30) -> bool:\n    \"\"\"Check if n is divisible by a, b, and c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0", "solution_func": "def g(a=10, b=20, c=30):\n    return a * b * c", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, t='apple', n=3) -> bool:\n    \"\"\"Check if t appears n times consecutively in s\"\"\"\n    return t*n in s\ndef g(t='apple', n=3):\n    return t * n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 425, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t='apple', n=3) -> bool:\n    \"\"\"Check if t appears n times consecutively in s\"\"\"\n    return t*n in s", "solution_func": "def g(t='apple', n=3):\n    return t * n", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=100, b=200, c=300) -> bool:\n    \"\"\"Check if n is greater than a, b, and c\"\"\"\n    return n > a and n > b and n > c\ndef g(a=100, b=200, c=300):\n    return max(a, b, c) + 1\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 425, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=100, b=200, c=300) -> bool:\n    \"\"\"Check if n is greater than a, b, and c\"\"\"\n    return n > a and n > b and n > c", "solution_func": "def g(a=100, b=200, c=300):\n    return max(a, b, c) + 1", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=999, b=3, c=111) -> bool:\n    \"\"\"Check if a number is divisible by both b and c.\"\"\"\n    return n % b == 0 and n % c == 0\ndef g(a=999, b=3, c=111):\n    return a * b * c\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 425, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=999, b=3, c=111) -> bool:\n    \"\"\"Check if a number is divisible by both b and c.\"\"\"\n    return n % b == 0 and n % c == 0", "solution_func": "def g(a=999, b=3, c=111):\n    return a * b * c", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=10, b=5) -> bool:\n    \"\"\"Check if a number is a perfect square and divisible by b.\"\"\"\n    return math.isqrt(n) ** 2 == n and n % b == 0\ndef g(a=10, b=5):\n    return a ** 2 * b\nassert f(g())\n", "emb": null, "idx_generation": 425, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=10, b=5) -> bool:\n    \"\"\"Check if a number is a perfect square and divisible by b.\"\"\"\n    return math.isqrt(n) ** 2 == n and n % b == 0", "solution_func": "def g(a=10, b=5):\n    return a ** 2 * b", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'orange', 'mango', 'grape', 'pear', 'kiwi', 'pineapple', 'watermelon', 'strawberry']) -> bool:\n    \"\"\"Check if the given string is a palindrome and exists in the list of words.\"\"\"\n    return s == s[::-1] and s in words\ndef g(words=['apple', 'banana', 'orange', 'mango', 'grape', 'pear', 'kiwi', 'pineapple', 'watermelon', 'strawberry']):\n    return words[len(words)//2]\nassert f(g())\n", "emb": null, "idx_generation": 425, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'orange', 'mango', 'grape', 'pear', 'kiwi', 'pineapple', 'watermelon', 'strawberry']) -> bool:\n    \"\"\"Check if the given string is a palindrome and exists in the list of words.\"\"\"\n    return s == s[::-1] and s in words", "solution_func": "def g(words=['apple', 'banana', 'orange', 'mango', 'grape', 'pear', 'kiwi', 'pineapple', 'watermelon', 'strawberry']):\n    return words[len(words)//2]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], n=5, m=9, k=3) -> bool:\n    \"\"\"\n    Given a list of words, find the number of words that have length between n and m (inclusive) and contain k vowels.\n\n    Sample Input:\n    words = ['apple', 'orange', 'banana', 'pear', 'grape', 'kiwi']\n\n    Sample Output:\n    3\n    \"\"\"\n    count = 0\n    for word in words:\n        if n <= len(word) <= m:\n            vowels = sum(1 for c in word if c.lower() in 'aeiou')\n            if vowels == k:\n                count += 1\n    return count\ndef g(n=5, m=9, k=3):\n    words = ['apple', 'orange', 'banana', 'pear', 'grape', 'kiwi']\n    return [word for word in words if n <= len(word) <= m and sum(1 for c in word if c.lower() in 'aeiou') == k]\nassert f(g())\n", "emb": null, "idx_generation": 425, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], n=5, m=9, k=3) -> bool:\n    \"\"\"\n    Given a list of words, find the number of words that have length between n and m (inclusive) and contain k vowels.\n\n    Sample Input:\n    words = ['apple', 'orange', 'banana', 'pear', 'grape', 'kiwi']\n\n    Sample Output:\n    3\n    \"\"\"\n    count = 0\n    for word in words:\n        if n <= len(word) <= m:\n            vowels = sum(1 for c in word if c.lower() in 'aeiou')\n            if vowels == k:\n                count += 1\n    return count", "solution_func": "def g(n=5, m=9, k=3):\n    words = ['apple', 'orange', 'banana', 'pear', 'grape', 'kiwi']\n    return [word for word in words if n <= len(word) <= m and sum(1 for c in word if c.lower() in 'aeiou') == k]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], n=10) -> bool:\n    \"\"\"\n    Given a list of integers, find the number of subarrays whose sum is divisible by n.\n\n    Sample Input:\n    arr = [4, 5, 0, -2, -3, 1]\n\n    Sample Output:\n    5\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            subarr = arr[i:j+1]\n            if sum(subarr) % n == 0:\n                count += 1\n    return count\ndef g(n=10):\n    arr = [4, 5, 0, -2, -3, 1]\n    return [subarr for i in range(len(arr)) for j in range(i, len(arr)) \n            for subarr in [arr[i:j+1]] if sum(subarr) % n == 0]\nassert f(g())\n", "emb": null, "idx_generation": 425, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], n=10) -> bool:\n    \"\"\"\n    Given a list of integers, find the number of subarrays whose sum is divisible by n.\n\n    Sample Input:\n    arr = [4, 5, 0, -2, -3, 1]\n\n    Sample Output:\n    5\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            subarr = arr[i:j+1]\n            if sum(subarr) % n == 0:\n                count += 1\n    return count", "solution_func": "def g(n=10):\n    arr = [4, 5, 0, -2, -3, 1]\n    return [subarr for i in range(len(arr)) for j in range(i, len(arr)) \n            for subarr in [arr[i:j+1]] if sum(subarr) % n == 0]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=18) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number, find if the target exists in the matrix.\n\n    Sample Input:\n    matrix = [\n        [1, 3, 5, 7],\n        [10, 11, 16, 20],\n        [23, 30, 34, 60]\n    ]\n\n    Sample Output:\n    True\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=18):\n    matrix = [\n        [1, 3, 5, 7],\n        [10, 11, 16, 20],\n        [23, 30, 34, 60]\n    ]\n    return any(target in row for row in matrix)\nassert f(g())\n", "emb": null, "idx_generation": 425, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=18) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number, find if the target exists in the matrix.\n\n    Sample Input:\n    matrix = [\n        [1, 3, 5, 7],\n        [10, 11, 16, 20],\n        [23, 30, 34, 60]\n    ]\n\n    Sample Output:\n    True\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(target=18):\n    matrix = [\n        [1, 3, 5, 7],\n        [10, 11, 16, 20],\n        [23, 30, 34, 60]\n    ]\n    return any(target in row for row in matrix)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if two numbers in the list add up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))\n\ndef g(nums: List[int], target: int):\n    return nums, target\nassert f(g([1, 2, 3, 4, 5], 9))\n", "emb": null, "idx_generation": 425, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if two numbers in the list add up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, t: str, substring=\"puzzle\", char=\"z\") -> bool:\n    \"\"\"Check if a string contains a given substring and replace all occurrences of a character.\"\"\"\n    assert substring in s\n    new_s = s.replace(char, \"\")\n    assert new_s == t\n    return True\ndef g(s=\"This is a puzzle\", t=\"This is a zzle\"):\n    return s.replace(\"p\", \"z\")\nassert f(g())\n", "emb": null, "idx_generation": 426, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t: str, substring=\"puzzle\", char=\"z\") -> bool:\n    \"\"\"Check if a string contains a given substring and replace all occurrences of a character.\"\"\"\n    assert substring in s\n    new_s = s.replace(char, \"\")\n    assert new_s == t\n    return True", "solution_func": "def g(s=\"This is a puzzle\", t=\"This is a zzle\"):\n    return s.replace(\"p\", \"z\")", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Determine if there exist two elements in a list that sum up to a given target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(arr=[1, 2, 3, 4, 5]):\n    return [num for num in arr if num < target]\nassert f(g())\n", "emb": null, "idx_generation": 426, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Determine if there exist two elements in a list that sum up to a given target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr=[1, 2, 3, 4, 5]):\n    return [num for num in arr if num < target]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], threshold=10) -> bool:\n    \"\"\"Check if all elements in a matrix are below a given threshold.\"\"\"\n    for row in matrix:\n        for num in row:\n            if num >= threshold:\n                return False\n    return True\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return [[num for num in row if num < threshold] for row in matrix]\nassert f(g())\n", "emb": null, "idx_generation": 426, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], threshold=10) -> bool:\n    \"\"\"Check if all elements in a matrix are below a given threshold.\"\"\"\n    for row in matrix:\n        for num in row:\n            if num >= threshold:\n                return False\n    return True", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return [[num for num in row if num < threshold] for row in matrix]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], n=5, s=100) -> bool:\n    \"\"\"\n    Given a list of integers x, check if there exists a subsequence of length n whose sum is equal to s.\n\n    Sample Input:\n    x = [10, 20, 30, 40, 50, 60]\n    n = 3\n    s = 110\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(x)):\n        for j in range(i + n, len(x) + 1):\n            if sum(x[i:j]) == s:\n                return True\n    return False\n\ndef g(n = 5, s = 100):\n    return list(range(1, n + 1))\n\nassert f(g())\n", "emb": null, "idx_generation": 426, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], n=5, s=100) -> bool:\n    \"\"\"\n    Given a list of integers x, check if there exists a subsequence of length n whose sum is equal to s.\n\n    Sample Input:\n    x = [10, 20, 30, 40, 50, 60]\n    n = 3\n    s = 110\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(x)):\n        for j in range(i + n, len(x) + 1):\n            if sum(x[i:j]) == s:\n                return True\n    return False", "solution_func": "def g(n = 5, s = 100):\n    return list(range(1, n + 1))", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(t: str, s='racecar') -> bool:\n    \"\"\"\n    Given a string s, check if it is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters\n    that reads the same backward as forward.\n\n    Sample Input:\n    s = \"level\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return t == s[::-1]\n\ndef g(s = 'racecar'):\n    return s\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 426, "target_skills": null, "problem_func": "from typing import*\ndef f(t: str, s='racecar') -> bool:\n    \"\"\"\n    Given a string s, check if it is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters\n    that reads the same backward as forward.\n\n    Sample Input:\n    s = \"level\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return t == s[::-1]", "solution_func": "def g(s = 'racecar'):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], k=3) -> bool:\n    \"\"\"\n    Given a list of integers x, find all triplets whose sum is equal to zero.\n\n    Sample Input:\n    x = [-1, 0, 1, 2, -1, -4]\n\n    Sample Output:\n    [[-1, -1, 2], [-1, 0, 1]]\n    \"\"\"\n    x.sort()\n    triplets = []\n    for i in range(len(x) - 2):\n        if i > 0 and x[i] == x[i - 1]:\n            continue\n        left = i + 1\n        right = len(x) - 1\n        while left < right:\n            total = x[i] + x[left] + x[right]\n            if total < k:\n                left += 1\n            elif total > k:\n                right -= 1\n            else:\n                triplets.append([x[i], x[left], x[right]])\n                while left < right and x[left] == x[left + 1]:\n                    left += 1\n                while left < right and x[right] == x[right - 1]:\n                    right -= 1\n                left += 1\n                right -= 1\n    return triplets\n\ndef g():\n    return [-1, 0, 1, 2, -1, -4]\n\nassert f(g())", "emb": null, "idx_generation": 426, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], k=3) -> bool:\n    \"\"\"\n    Given a list of integers x, find all triplets whose sum is equal to zero.\n\n    Sample Input:\n    x = [-1, 0, 1, 2, -1, -4]\n\n    Sample Output:\n    [[-1, -1, 2], [-1, 0, 1]]\n    \"\"\"\n    x.sort()\n    triplets = []\n    for i in range(len(x) - 2):\n        if i > 0 and x[i] == x[i - 1]:\n            continue\n        left = i + 1\n        right = len(x) - 1\n        while left < right:\n            total = x[i] + x[left] + x[right]\n            if total < k:\n                left += 1\n            elif total > k:\n                right -= 1\n            else:\n                triplets.append([x[i], x[left], x[right]])\n                while left < right and x[left] == x[left + 1]:\n                    left += 1\n                while left < right and x[right] == x[right - 1]:\n                    right -= 1\n                left += 1\n                right -= 1\n    return triplets", "solution_func": "def g():\n    return [-1, 0, 1, 2, -1, -4]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sums up to n.\"\"\"\n    return any(n - x in nums for x in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[0], nums[-1]\nassert f(g()[0] + g()[1])\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 426, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sums up to n.\"\"\"\n    return any(n - x in nums for x in nums)", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[0], nums[-1]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if a string is an anagram of any word in a given list.\"\"\"\n    return any(sorted(s) == sorted(w) for w in words)\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return words[0][::-1]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 426, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if a string is an anagram of any word in a given list.\"\"\"\n    return any(sorted(s) == sorted(w) for w in words)", "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return words[0][::-1]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a number is a prime or a product of two primes from a given list.\"\"\"\n    if n in primes:\n        return True\n    for p in primes:\n        if n % p == 0 and n // p in primes:\n            return True\n    return False\n\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return primes[math.isqrt(len(primes) - 1)]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 426, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a number is a prime or a product of two primes from a given list.\"\"\"\n    if n in primes:\n        return True\n    for p in primes:\n        if n % p == 0 and n // p in primes:\n            return True\n    return False", "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return primes[math.isqrt(len(primes) - 1)]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n: int = 5) -> bool:\n    \"\"\"Find a string that, when reversed, is equal to itself multiplied by n\"\"\"\n    return s == s[::-1] * n\ndef g(n: int = 5):\n    return \"madam\" * n\nassert f(g())\n", "emb": null, "idx_generation": 426, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int = 5) -> bool:\n    \"\"\"Find a string that, when reversed, is equal to itself multiplied by n\"\"\"\n    return s == s[::-1] * n", "solution_func": "def g(n: int = 5):\n    return \"madam\" * n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find three numbers in a list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5], target = 0):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 427, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find three numbers in a list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5], target = 0):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, char='a') -> bool:\n    \"\"\"Check if a character is present in a string.\"\"\"\n    return char in string\ndef g(string = \"Hello World\", char = 'a'):\n    return string\nassert f(g())\n", "emb": null, "idx_generation": 427, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, char='a') -> bool:\n    \"\"\"Check if a character is present in a string.\"\"\"\n    return char in string", "solution_func": "def g(string = \"Hello World\", char = 'a'):\n    return string", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find the presence of a target number in a matrix.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == target:\n                return True\n    return False\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 0):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 427, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find the presence of a target number in a matrix.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == target:\n                return True\n    return False", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 0):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Find a subsequence of numbers in the given list that sums up to the target.\n    \"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if len(nums) == 0:\n            return False\n        if nums[0] > target:\n            return subset_sum(nums[1:], target)\n        return subset_sum(nums[1:], target) or subset_sum(nums[1:], target - nums[0])\n    return subset_sum(nums, target)\ndef g(nums = [], target = 0):\n    from itertools import combinations\n    for r in range(1, len(nums) + 1):\n        for subset in combinations(nums, r):\n            if sum(subset) == target:\n                return list(subset)\n    return []\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 427, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Find a subsequence of numbers in the given list that sums up to the target.\n    \"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if len(nums) == 0:\n            return False\n        if nums[0] > target:\n            return subset_sum(nums[1:], target)\n        return subset_sum(nums[1:], target) or subset_sum(nums[1:], target - nums[0])\n    return subset_sum(nums, target)", "solution_func": "def g(nums = [], target = 0):\n    from itertools import combinations\n    for r in range(1, len(nums) + 1):\n        for subset in combinations(nums, r):\n            if sum(subset) == target:\n                return list(subset)\n    return []", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(n: int, primes=[]) -> bool:\n    \"\"\"\n    Determine if a given number is a prime number.\n    \"\"\"\n    if n < 2:\n        return False\n    for p in primes:\n        if n % p == 0:\n            return False\n    return True\ndef g(primes = []):\n    from itertools import count\n    for n in count(2):\n        if f(n, primes):\n            return n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 427, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, primes=[]) -> bool:\n    \"\"\"\n    Determine if a given number is a prime number.\n    \"\"\"\n    if n < 2:\n        return False\n    for p in primes:\n        if n % p == 0:\n            return False\n    return True", "solution_func": "def g(primes = []):\n    from itertools import count\n    for n in count(2):\n        if f(n, primes):\n            return n", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list that sums up to the target.\n    \"\"\"\n    nums.sort()\n    left, right = 0, len(nums) - 1\n    while left < right:\n        if nums[left] + nums[right] == target:\n            return True\n        elif nums[left] + nums[right] < target:\n            left += 1\n        else:\n            right -= 1\n    return False\ndef g(nums = [], target = 0):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 427, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list that sums up to the target.\n    \"\"\"\n    nums.sort()\n    left, right = 0, len(nums) - 1\n    while left < right:\n        if nums[left] + nums[right] == target:\n            return True\n        elif nums[left] + nums[right] < target:\n            left += 1\n        else:\n            right -= 1\n    return False", "solution_func": "def g(nums = [], target = 0):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(grid: List[List[int]], k=10) -> bool:\n    \"\"\"\n    Given a grid of integers, return True if there exists a subgrid of size k x k such that\n    the sum of all the integers in the subgrid is equal to k^2.\n\n    Sample input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample output:\n    True\n    \"\"\"\n    assert len(grid) >= k and len(grid[0]) >= k, 'Hint: The grid must be at least k x k'\n\n    for i in range(len(grid) - k + 1):\n        for j in range(len(grid[0]) - k + 1):\n            subgrid_sum = sum(grid[i + x][j + y] for x in range(k) for y in range(k))\n            if subgrid_sum == k ** 2:\n                return True\n\n    return False\ndef g(k = 10):\n    return [[1] * k] * k\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 427, "target_skills": null, "problem_func": "from typing import*\ndef f(grid: List[List[int]], k=10) -> bool:\n    \"\"\"\n    Given a grid of integers, return True if there exists a subgrid of size k x k such that\n    the sum of all the integers in the subgrid is equal to k^2.\n\n    Sample input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample output:\n    True\n    \"\"\"\n    assert len(grid) >= k and len(grid[0]) >= k, 'Hint: The grid must be at least k x k'\n\n    for i in range(len(grid) - k + 1):\n        for j in range(len(grid[0]) - k + 1):\n            subgrid_sum = sum(grid[i + x][j + y] for x in range(k) for y in range(k))\n            if subgrid_sum == k ** 2:\n                return True\n\n    return False", "solution_func": "def g(k = 10):\n    return [[1] * k] * k", "map_ix": [1, 1, 1, 1, 0, 1, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers, return True if it is possible to select a contiguous subarray such that the\n    sum of the subarray is equal to the target.\n\n    Sample input:\n    [1, 2, 3, 4, 5]\n\n    Sample output:\n    True\n    \"\"\"\n    return any(sum(arr[i:j]) == target for i in range(len(arr)) for j in range(i + 1, len(arr) + 1))\ndef g(target = 0):\n    return [target]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 427, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers, return True if it is possible to select a contiguous subarray such that the\n    sum of the subarray is equal to the target.\n\n    Sample input:\n    [1, 2, 3, 4, 5]\n\n    Sample output:\n    True\n    \"\"\"\n    return any(sum(arr[i:j]) == target for i in range(len(arr)) for j in range(i + 1, len(arr) + 1))", "solution_func": "def g(target = 0):\n    return [target]", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"\n    Given a string s, return True if there exists a substring of length n that contains only unique characters.\n\n    Sample input:\n    'hello world'\n\n    Sample output:\n    True\n    \"\"\"\n    assert n <= len(s), 'Hint: The length of the substring must be less than or equal to the length of the string'\n\n    for i in range(len(s) - n + 1):\n        if len(set(s[i:i+n])) == n:\n            return True\n\n    return False\ndef g(n = 5):\n    return 'a' * n\nassert f(g())\n", "emb": null, "idx_generation": 427, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"\n    Given a string s, return True if there exists a substring of length n that contains only unique characters.\n\n    Sample input:\n    'hello world'\n\n    Sample output:\n    True\n    \"\"\"\n    assert n <= len(s), 'Hint: The length of the substring must be less than or equal to the length of the string'\n\n    for i in range(len(s) - n + 1):\n        if len(set(s[i:i+n])) == n:\n            return True\n\n    return False", "solution_func": "def g(n = 5):\n    return 'a' * n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"Find an integer whose cube root is a perfect square.\"\"\"\n    return math.isqrt(n ** (1/3)) ** 2 == n ** (1/3)\n\ndef g():\n    return int(4 ** 3)\n\nassert f(g())\n", "emb": null, "idx_generation": 427, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"Find an integer whose cube root is a perfect square.\"\"\"\n    return math.isqrt(n ** (1/3)) ** 2 == n ** (1/3)", "solution_func": "def g():\n    return int(4 ** 3)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: int, a=987654321, b=87654321) -> bool:\n    \"\"\"Check if the number is a prime number\"\"\"\n    if x < 2:\n        return False\n    for i in range(2, int(math.sqrt(x))+1):\n        if x % i == 0:\n            return False\n    return True\n\ndef g(a=987654321, b=87654321):\n    return a + b\n\nassert f(g())\n", "emb": null, "idx_generation": 428, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: int, a=987654321, b=87654321) -> bool:\n    \"\"\"Check if the number is a prime number\"\"\"\n    if x < 2:\n        return False\n    for i in range(2, int(math.sqrt(x))+1):\n        if x % i == 0:\n            return False\n    return True", "solution_func": "def g(a=987654321, b=87654321):\n    return a + b", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(x: int, n=10) -> bool:\n    \"\"\"Check if the number is in the sequence generated by random numbers\"\"\"\n    random_list = [random.randint(1, 100) for _ in range(n)]\n    return x in random_list\n\ndef g(n=10):\n    return random.randint(1, 100)\n\nassert f(g())\n", "emb": null, "idx_generation": 428, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(x: int, n=10) -> bool:\n    \"\"\"Check if the number is in the sequence generated by random numbers\"\"\"\n    random_list = [random.randint(1, 100) for _ in range(n)]\n    return x in random_list", "solution_func": "def g(n=10):\n    return random.randint(1, 100)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=1234567) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g(n=1234567):\n    return str(n)\n\nassert f(g())\n", "emb": null, "idx_generation": 428, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=1234567) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == s[::-1]", "solution_func": "def g(n=1234567):\n    return str(n)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(radius: float, height: float, target_volume: float) -> bool:\n    \"\"\"Find the radius and height of a cylinder such that its volume is equal to the target_volume.\"\"\"\n    assert radius > 0 and height > 0\n    volume = math.pi * radius**2 * height\n    return abs(volume - target_volume) < 0.001\n\ndef g(target_volume: float):\n    for radius in range(1, 11):\n        for height in range(1, 11):\n            volume = math.pi * radius**2 * height\n            if abs(volume - target_volume) < 0.001:\n                return (radius, height)\n\nassert f(g())\n", "emb": null, "idx_generation": 428, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(radius: float, height: float, target_volume: float) -> bool:\n    \"\"\"Find the radius and height of a cylinder such that its volume is equal to the target_volume.\"\"\"\n    assert radius > 0 and height > 0\n    volume = math.pi * radius**2 * height\n    return abs(volume - target_volume) < 0.001", "solution_func": "def g(target_volume: float):\n    for radius in range(1, 11):\n        for height in range(1, 11):\n            volume = math.pi * radius**2 * height\n            if abs(volume - target_volume) < 0.001:\n                return (radius, height)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(li: List[int], target_sum: int) -> bool:\n    \"\"\"Find a subset of integers from the list such that their sum is equal to the target_sum.\"\"\"\n    return sum(li) == target_sum\n\ndef g(target_sum: int):\n    li = [random.randint(1, 10) for _ in range(10)]\n    return li\n\nassert f(g(), target_sum=50)\n", "emb": null, "idx_generation": 428, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(li: List[int], target_sum: int) -> bool:\n    \"\"\"Find a subset of integers from the list such that their sum is equal to the target_sum.\"\"\"\n    return sum(li) == target_sum", "solution_func": "def g(target_sum: int):\n    li = [random.randint(1, 10) for _ in range(10)]\n    return li", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, target_length: int) -> bool:\n    \"\"\"Check if the length of the string is equal to the target_length.\"\"\"\n    return len(string) == target_length\n\ndef g(target_length: int):\n    string = \"abcdefghijklmnopqrstuvwxyz\"\n    return string[:target_length]\n\nassert f(g(), target_length=10)\n", "emb": null, "idx_generation": 428, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, target_length: int) -> bool:\n    \"\"\"Check if the length of the string is equal to the target_length.\"\"\"\n    return len(string) == target_length", "solution_func": "def g(target_length: int):\n    string = \"abcdefghijklmnopqrstuvwxyz\"\n    return string[:target_length]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(target=100):\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return lst\nassert f(g())\n", "emb": null, "idx_generation": 428, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False", "solution_func": "def g(target=100):\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return lst", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that add up to the target value.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for m in range(i, len(matrix)):\n                for n in range(len(matrix[m])):\n                    if i == m and j == n:\n                        continue\n                    if matrix[i][j] + matrix[m][n] == target:\n                        return True\n    return False\ndef g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 428, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that add up to the target value.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for m in range(i, len(matrix)):\n                for n in range(len(matrix[m])):\n                    if i == m and j == n:\n                        continue\n                    if matrix[i][j] + matrix[m][n] == target:\n                        return True\n    return False", "solution_func": "def g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"Check if the substring is present in the string.\"\"\"\n    return substr in string\ndef g(substr='abc'):\n    string = 'abcdefg'\n    return string\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 428, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"Check if the substring is present in the string.\"\"\"\n    return substr in string", "solution_func": "def g(substr='abc'):\n    string = 'abcdefg'\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target = 7):\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 428, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(target = 7):\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(result: float, x=1.5, y=-4.2) -> bool:\n    \"\"\"\n    Return True if the result is equal to the square root of the sum of the squares of x and y, rounded to 2 decimal places.\n    \"\"\"\n    return round(result, 2) == round(math.sqrt(x**2 + y**2), 2)\n\ndef g(x=1.5, y=-4.2):\n    return math.sqrt(x**2 + y**2)\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 429, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(result: float, x=1.5, y=-4.2) -> bool:\n    \"\"\"\n    Return True if the result is equal to the square root of the sum of the squares of x and y, rounded to 2 decimal places.\n    \"\"\"\n    return round(result, 2) == round(math.sqrt(x**2 + y**2), 2)", "solution_func": "def g(x=1.5, y=-4.2):\n    return math.sqrt(x**2 + y**2)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(result: str, word=\"Python\", n=3) -> bool:\n    \"\"\"\n    Return True if the result is equal to the concatenation of the word n times.\n    \"\"\"\n    return result == word * n\n\ndef g(word=\"Python\", n=3):\n    return word * n\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 429, "target_skills": null, "problem_func": "from typing import*\ndef f(result: str, word=\"Python\", n=3) -> bool:\n    \"\"\"\n    Return True if the result is equal to the concatenation of the word n times.\n    \"\"\"\n    return result == word * n", "solution_func": "def g(word=\"Python\", n=3):\n    return word * n", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(result: list, lst=[1, 2, 3, 4, 5], x=6) -> bool:\n    \"\"\"\n    Return True if the result is a list that contains all the elements of lst and x in the same order.\n    \"\"\"\n    return result == lst + [x]\n\ndef g(lst=[1, 2, 3, 4, 5], x=6):\n    return lst + [x]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 429, "target_skills": null, "problem_func": "from typing import*\ndef f(result: list, lst=[1, 2, 3, 4, 5], x=6) -> bool:\n    \"\"\"\n    Return True if the result is a list that contains all the elements of lst and x in the same order.\n    \"\"\"\n    return result == lst + [x]", "solution_func": "def g(lst=[1, 2, 3, 4, 5], x=6):\n    return lst + [x]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=0, m=0) -> bool:\n    \"\"\"\n    Given a string s, check if it is a palindrome.\n\n    Sample Input:\n    s = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1] and n >= 0 and m >= 0\ndef g(s=\"racecar\"):\n    n, m = 0, 0\n    for c in s:\n        if c.isnumeric():\n            n += int(c)\n        elif c.isalpha():\n            m += ord(c)\n    return s, n, m\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 429, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=0, m=0) -> bool:\n    \"\"\"\n    Given a string s, check if it is a palindrome.\n\n    Sample Input:\n    s = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1] and n >= 0 and m >= 0", "solution_func": "def g(s=\"racecar\"):\n    n, m = 0, 0\n    for c in s:\n        if c.isnumeric():\n            n += int(c)\n        elif c.isalpha():\n            m += ord(c)\n    return s, n, m", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers nums, find two numbers such that they add up to a specific target.\n\n    Sample Input:\n    nums = [2, 7, 11, 15]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums)))) and target >= 0\ndef g(nums=[2, 7, 11, 15], target=9):\n    return nums, target\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 429, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers nums, find two numbers such that they add up to a specific target.\n\n    Sample Input:\n    nums = [2, 7, 11, 15]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums)))) and target >= 0", "solution_func": "def g(nums=[2, 7, 11, 15], target=9):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=0) -> bool:\n    \"\"\"\n    Given a string s, check if it contains any duplicate characters.\n\n    Sample Input:\n    s = \"hello\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(s) != len(set(s)) and n >= 0\ndef g(s=\"hello\"):\n    n = 0\n    for c in s:\n        if c.isnumeric():\n            n += int(c)\n    return s, n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 429, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=0) -> bool:\n    \"\"\"\n    Given a string s, check if it contains any duplicate characters.\n\n    Sample Input:\n    s = \"hello\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(s) != len(set(s)) and n >= 0", "solution_func": "def g(s=\"hello\"):\n    n = 0\n    for c in s:\n        if c.isnumeric():\n            n += int(c)\n    return s, n", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums, target\n\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 429, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums, target", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = n * (n ** 2 + 1) // 2\n\n    for i in range(n):\n        row_sum = sum(matrix[i])\n        if row_sum != target_sum:\n            return False\n\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n - i - 1] for i in range(n))\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n\n    return True\n\ndef g(matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 429, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = n * (n ** 2 + 1) // 2\n\n    for i in range(n):\n        row_sum = sum(matrix[i])\n        if row_sum != target_sum:\n            return False\n\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n - i - 1] for i in range(n))\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n\n    return True", "solution_func": "def g(matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find the target number using a binary search algorithm.\"\"\"\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return True\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5], target = 3):\n    return nums, target\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 429, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find the target number using a binary search algorithm.\"\"\"\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return True\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5], target = 3):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target = 10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 429, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(target = 10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums, target\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 430, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric.\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(i+1, len(matrix)))\ndef g(matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\nassert f(g())\n", "emb": [1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 430, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric.\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(i+1, len(matrix)))", "solution_func": "def g(matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix", "map_ix": [1, 0, 1, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"Check if there are any two numbers in the list that add up to k.\"\"\"\n    return any(nums[i] + nums[j] == k for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums = [1, 2, 3, 4, 5], k = 7):\n    return nums, k\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 430, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"Check if there are any two numbers in the list that add up to k.\"\"\"\n    return any(nums[i] + nums[j] == k for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(nums = [1, 2, 3, 4, 5], k = 7):\n    return nums, k", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target: int) -> bool:\n    \"\"\"Check if the sum of the elements in a numpy array is equal to the target value.\"\"\"\n    return np.sum(arr) == target\n\ndef g(arr: np.ndarray, target: int):\n    return np.random.choice(arr, size=len(arr))\n\narr = np.array([1, 2, 3, 4, 5])\ntarget = 15\n\nassert f(g(arr, target), target)\n", "emb": null, "idx_generation": 430, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target: int) -> bool:\n    \"\"\"Check if the sum of the elements in a numpy array is equal to the target value.\"\"\"\n    return np.sum(arr) == target", "solution_func": "def g(arr: np.ndarray, target: int):\n    return np.random.choice(arr, size=len(arr))\n\narr = np.array([1, 2, 3, 4, 5])\ntarget = 15", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring: str, n: int) -> bool:\n    \"\"\"Check if a given substring appears exactly n times in a string.\"\"\"\n    return s.count(substring) == n\n\ndef g(substring: str, n: int):\n    return substring * n\n\nsubstring = \"abc\"\nn = 3\n\nassert f(g(substring, n), substring, n)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 430, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring: str, n: int) -> bool:\n    \"\"\"Check if a given substring appears exactly n times in a string.\"\"\"\n    return s.count(substring) == n", "solution_func": "def g(substring: str, n: int):\n    return substring * n\n\nsubstring = \"abc\"\nn = 3", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: list, target: int) -> bool:\n    \"\"\"Check if there are two numbers in a list that sum up to the target value.\"\"\"\n    return any(target - num in arr for num in arr)\n\ndef g(arr: list, target: int):\n    return arr + [target - sum(arr)]\n\narr = [1, 2, 3, 4, 5]\ntarget = 7\n\nassert f(g(arr, target), target)\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 430, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: list, target: int) -> bool:\n    \"\"\"Check if there are two numbers in a list that sum up to the target value.\"\"\"\n    return any(target - num in arr for num in arr)", "solution_func": "def g(arr: list, target: int):\n    return arr + [target - sum(arr)]\n\narr = [1, 2, 3, 4, 5]\ntarget = 7", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(numbers: List[int], target=100, ops=['+', '-', '*', '/']) -> bool:\n    \"\"\"Find a combination of arithmetic operations that can be applied to the given numbers to obtain the target result\"\"\"\n    return eval(''.join(str(numbers[i]) + ops[i] for i in range(len(numbers)))) == target\ndef g(target=100, ops=['+', '-', '*', '/']):\n    return [num for num in range(1, 10)]\nassert f(g())\n", "emb": null, "idx_generation": 430, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target=100, ops=['+', '-', '*', '/']) -> bool:\n    \"\"\"Find a combination of arithmetic operations that can be applied to the given numbers to obtain the target result\"\"\"\n    return eval(''.join(str(numbers[i]) + ops[i] for i in range(len(numbers)))) == target", "solution_func": "def g(target=100, ops=['+', '-', '*', '/']):\n    return [num for num in range(1, 10)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], pattern=\"aaaa\") -> bool:\n    \"\"\"Check if the given words follow the given pattern\"\"\"\n    return all(len(set(word)) == len(set(pattern)) for word in words)\ndef g(pattern=\"aaaa\"):\n    return [chr(ord('a') + i) * len(set(pattern)) for i in range(len(set(pattern)))]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 430, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], pattern=\"aaaa\") -> bool:\n    \"\"\"Check if the given words follow the given pattern\"\"\"\n    return all(len(set(word)) == len(set(pattern)) for word in words)", "solution_func": "def g(pattern=\"aaaa\"):\n    return [chr(ord('a') + i) * len(set(pattern)) for i in range(len(set(pattern)))]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find a combination of numbers in the matrix that can be summed to obtain the target value\"\"\"\n    def dfs(row, col, curr_sum):\n        if curr_sum == target:\n            return True\n        if row >= len(matrix) or col >= len(matrix[0]) or curr_sum > target:\n            return False\n        return dfs(row + 1, col, curr_sum + matrix[row][col]) or dfs(row, col + 1, curr_sum + matrix[row][col])\n    return dfs(0, 0, 0)\ndef g(target=100):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 430, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find a combination of numbers in the matrix that can be summed to obtain the target value\"\"\"\n    def dfs(row, col, curr_sum):\n        if curr_sum == target:\n            return True\n        if row >= len(matrix) or col >= len(matrix[0]) or curr_sum > target:\n            return False\n        return dfs(row + 1, col, curr_sum + matrix[row][col]) or dfs(row, col + 1, curr_sum + matrix[row][col])\n    return dfs(0, 0, 0)", "solution_func": "def g(target=100):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, threshold=75) -> bool:\n    \"\"\"Check if the sum of all elements in the matrix is greater than the threshold value\"\"\"\n    return np.sum(matrix) > threshold\n\ndef g(rows=3, columns=3, values=np.array([[10, 20, 30], [40, 50, 60], [70, 80, 90]])):\n    return np.array([[values[i][j] for j in range(columns)] for i in range(rows)])\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 430, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, threshold=75) -> bool:\n    \"\"\"Check if the sum of all elements in the matrix is greater than the threshold value\"\"\"\n    return np.sum(matrix) > threshold", "solution_func": "def g(rows=3, columns=3, values=np.array([[10, 20, 30], [40, 50, 60], [70, 80, 90]])):\n    return np.array([[values[i][j] for j in range(columns)] for i in range(rows)])", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(l: list, target=100) -> bool:\n    \"\"\"Find a list of integers that sums up to a target number\"\"\"\n    return sum(l) == target\n\ndef g(target=100):\n    l = []\n    while sum(l) < target:\n        l.append(random.randint(1, 10))\n    return l\n\nassert f(g())\n", "emb": null, "idx_generation": 431, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(l: list, target=100) -> bool:\n    \"\"\"Find a list of integers that sums up to a target number\"\"\"\n    return sum(l) == target", "solution_func": "def g(target=100):\n    l = []\n    while sum(l) < target:\n        l.append(random.randint(1, 10))\n    return l", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(n: int, nums=[10, 20, 30, 40, 50], target=100) -> bool:\n    \"\"\"Find a combination of n numbers from the list that adds up to the target\"\"\"\n    from itertools import combinations\n    return any((sum(comb) == target for comb in combinations(nums, n)))\n\ndef g(nums=[10, 20, 30, 40, 50], target=100):\n    n = 0\n    for i in range(1, len(nums) + 1):\n        if sum(nums[:i]) > target:\n            n = i - 1\n            break\n    return n\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 431, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, nums=[10, 20, 30, 40, 50], target=100) -> bool:\n    \"\"\"Find a combination of n numbers from the list that adds up to the target\"\"\"\n    from itertools import combinations\n    return any((sum(comb) == target for comb in combinations(nums, n)))", "solution_func": "def g(nums=[10, 20, 30, 40, 50], target=100):\n    n = 0\n    for i in range(1, len(nums) + 1):\n        if sum(nums[:i]) > target:\n            n = i - 1\n            break\n    return n", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substrings=['hello', 'world', 'python']) -> bool:\n    \"\"\"Find a string that contains all the substrings in order\"\"\"\n    index = 0\n    for sub in substrings:\n        index = s.find(sub, index)\n        if index == -1:\n            return False\n        index += len(sub)\n    return True\n\ndef g(substrings=['hello', 'world', 'python']):\n    return \"\".join(substrings)\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 431, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=['hello', 'world', 'python']) -> bool:\n    \"\"\"Find a string that contains all the substrings in order\"\"\"\n    index = 0\n    for sub in substrings:\n        index = s.find(sub, index)\n        if index == -1:\n            return False\n        index += len(sub)\n    return True", "solution_func": "def g(substrings=['hello', 'world', 'python']):\n    return \"\".join(substrings)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int, start=0, end=None) -> bool:\n    \"\"\"\n    Find if there exists a pair of numbers in the given array that sum up to the target.\n    The start and end parameters define the range of the array to be considered.\n    If end is not specified, the range is from start to the end of the array.\n    \"\"\"\n    if end is None:\n        end = len(arr)\n    for i in range(start, end):\n        for j in range(i+1, end):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr = [2, 4, 6, 8, 10], target = 12, start = 0, end = None):\n    if end is None:\n        end = len(arr)\n    return (arr, target, start, end)\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 431, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int, start=0, end=None) -> bool:\n    \"\"\"\n    Find if there exists a pair of numbers in the given array that sum up to the target.\n    The start and end parameters define the range of the array to be considered.\n    If end is not specified, the range is from start to the end of the array.\n    \"\"\"\n    if end is None:\n        end = len(arr)\n    for i in range(start, end):\n        for j in range(i+1, end):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr = [2, 4, 6, 8, 10], target = 12, start = 0, end = None):\n    if end is None:\n        end = len(arr)\n    return (arr, target, start, end)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"\n    Find if there exists a pair of numbers in the given array that differ by exactly k.\n    \"\"\"\n    diff_set = set()\n    for num in arr:\n        if num - k in diff_set or num + k in diff_set:\n            return True\n        diff_set.add(num)\n    return False\n\ndef g(arr = [1, 5, 3, 7, 9], k = 2):\n    return (arr, k)\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 431, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"\n    Find if there exists a pair of numbers in the given array that differ by exactly k.\n    \"\"\"\n    diff_set = set()\n    for num in arr:\n        if num - k in diff_set or num + k in diff_set:\n            return True\n        diff_set.add(num)\n    return False", "solution_func": "def g(arr = [1, 5, 3, 7, 9], k = 2):\n    return (arr, k)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Find if there exists a subarray in the given array that sums up to the target.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sum_set = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in prefix_sum_set:\n            return True\n        prefix_sum_set.add(prefix_sum)\n    return False\n\ndef g(arr = [4, 2, -3, 1, 6], target = 3):\n    return (arr, target)\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 431, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Find if there exists a subarray in the given array that sums up to the target.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sum_set = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in prefix_sum_set:\n            return True\n        prefix_sum_set.add(prefix_sum)\n    return False", "solution_func": "def g(arr = [4, 2, -3, 1, 6], target = 3):\n    return (arr, target)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if all characters in word are present in s\"\"\"\n    for char in word:\n        if char not in s:\n            return False\n    return True\ndef g(word='python'):\n    return word\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 431, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if all characters in word are present in s\"\"\"\n    for char in word:\n        if char not in s:\n            return False\n    return True", "solution_func": "def g(word='python'):\n    return word", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n: int, t='abc') -> bool:\n    \"\"\"Check if the first n characters of s are equal to t\"\"\"\n    return s[:n] == t\ndef g(n=3, t='abc'):\n    s = t * 2\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 431, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int, t='abc') -> bool:\n    \"\"\"Check if the first n characters of s are equal to t\"\"\"\n    return s[:n] == t", "solution_func": "def g(n=3, t='abc'):\n    s = t * 2\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: list, n: int, k: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in arr whose sum is equal to k\"\"\"\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == k:\n                return True\n    return False\ndef g(n=5, k=10):\n    arr = [1, 2, 3, 4, 5]\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 431, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: list, n: int, k: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in arr whose sum is equal to k\"\"\"\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == k:\n                return True\n    return False", "solution_func": "def g(n=5, k=10):\n    arr = [1, 2, 3, 4, 5]\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=0) -> bool:\n    \"\"\"Check if the sum of any row or column in the matrix is equal to the target sum\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        row_sum = sum(matrix[i])\n        if row_sum == target_sum:\n            return True\n    for j in range(cols):\n        col_sum = sum([matrix[i][j] for i in range(rows)])\n        if col_sum == target_sum:\n            return True\n    return False\n\ndef g(matrix: List[List[int]], target_sum=0):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 431, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=0) -> bool:\n    \"\"\"Check if the sum of any row or column in the matrix is equal to the target sum\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        row_sum = sum(matrix[i])\n        if row_sum == target_sum:\n            return True\n    for j in range(cols):\n        col_sum = sum([matrix[i][j] for i in range(rows)])\n        if col_sum == target_sum:\n            return True\n    return False", "solution_func": "def g(matrix: List[List[int]], target_sum=0):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int], num=10) -> bool:\n    \"\"\"Check if the given number is a multiple of any element in the list\"\"\"\n    for i in lst:\n        if num % i == 0:\n            return True\n    return False\n\ndef g(num=10):\n    return [i for i in range(1, num+1)]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 432, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], num=10) -> bool:\n    \"\"\"Check if the given number is a multiple of any element in the list\"\"\"\n    for i in lst:\n        if num % i == 0:\n            return True\n    return False", "solution_func": "def g(num=10):\n    return [i for i in range(1, num+1)]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s1: str, s2: str, s3: str, separator=' ') -> bool:\n    \"\"\"Check if concatenating the three strings with the separator in between results in a palindrome\"\"\"\n    concat = s1 + separator + s2 + separator + s3\n    return concat == concat[::-1]\n\ndef g(s1: str, s2: str, s3: str, separator=' '):\n    return separator.join([s1, s2, s3])\n\nassert f(g())\n", "emb": null, "idx_generation": 432, "target_skills": null, "problem_func": "from typing import*\ndef f(s1: str, s2: str, s3: str, separator=' ') -> bool:\n    \"\"\"Check if concatenating the three strings with the separator in between results in a palindrome\"\"\"\n    concat = s1 + separator + s2 + separator + s3\n    return concat == concat[::-1]", "solution_func": "def g(s1: str, s2: str, s3: str, separator=' '):\n    return separator.join([s1, s2, s3])", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Check if there are two distinct elements in the list that add up to the target value\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return list(range(target))\n\nassert f(g())\n", "emb": null, "idx_generation": 432, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Check if there are two distinct elements in the list that add up to the target value\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False", "solution_func": "def g(target=0):\n    return list(range(target))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(l: list, n=5, m=10) -> bool:\n    \"\"\"Check if the sum of the first n elements of the list is equal to m\"\"\"\n    return sum(l[:n]) == m\ndef g(n=5, m=10):\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return l\nassert f(g())\n", "emb": null, "idx_generation": 432, "target_skills": null, "problem_func": "from typing import*\ndef f(l: list, n=5, m=10) -> bool:\n    \"\"\"Check if the sum of the first n elements of the list is equal to m\"\"\"\n    return sum(l[:n]) == m", "solution_func": "def g(n=5, m=10):\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return l", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, c='a') -> bool:\n    \"\"\"Check if the character c is present in the string s\"\"\"\n    return c in s\ndef g(c='a'):\n    s = \"Hello, World!\"\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 432, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, c='a') -> bool:\n    \"\"\"Check if the character c is present in the string s\"\"\"\n    return c in s", "solution_func": "def g(c='a'):\n    s = \"Hello, World!\"\n    return s", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(d: dict, k='key', v='value') -> bool:\n    \"\"\"Check if the key-value pair (k, v) is present in the dictionary d\"\"\"\n    return d.get(k) == v\ndef g(k='key', v='value'):\n    d = {'key': 'value', 'name': 'John', 'age': 30}\n    return d\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 432, "target_skills": null, "problem_func": "from typing import*\ndef f(d: dict, k='key', v='value') -> bool:\n    \"\"\"Check if the key-value pair (k, v) is present in the dictionary d\"\"\"\n    return d.get(k) == v", "solution_func": "def g(k='key', v='value'):\n    d = {'key': 'value', 'name': 'John', 'age': 30}\n    return d", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Determine if a string has exactly n vowels.\"\"\"\n    vowels = 'aeiou'\n    count = sum(1 for c in s if c.lower() in vowels)\n    return count == n\ndef g(n=5):\n    import random\n    vowels = 'aeiou'\n    s = ''.join(random.choices(vowels, k=n))\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 432, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Determine if a string has exactly n vowels.\"\"\"\n    vowels = 'aeiou'\n    count = sum(1 for c in s if c.lower() in vowels)\n    return count == n", "solution_func": "def g(n=5):\n    import random\n    vowels = 'aeiou'\n    s = ''.join(random.choices(vowels, k=n))\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if a list contains exactly n unique numbers.\"\"\"\n    return len(set(lst)) == n\ndef g(n=5):\n    import random\n    lst = random.sample(range(10 * n), n)\n    return lst\nassert f(g())\n", "emb": null, "idx_generation": 432, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if a list contains exactly n unique numbers.\"\"\"\n    return len(set(lst)) == n", "solution_func": "def g(n=5):\n    import random\n    lst = random.sample(range(10 * n), n)\n    return lst", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the sum of any two numbers in a list is equal to n.\"\"\"\n    for i, num1 in enumerate(lst):\n        for num2 in lst[i+1:]:\n            if num1 + num2 == n:\n                return True\n    return False\ndef g(n=10):\n    import random\n    lst = random.sample(range(10 * n), 2 * n)\n    return lst\nassert f(g())\n", "emb": null, "idx_generation": 432, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the sum of any two numbers in a list is equal to n.\"\"\"\n    for i, num1 in enumerate(lst):\n        for num2 in lst[i+1:]:\n            if num1 + num2 == n:\n                return True\n    return False", "solution_func": "def g(n=10):\n    import random\n    lst = random.sample(range(10 * n), 2 * n)\n    return lst", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 432, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Find the number of subarrays in a list of integers that sum to a given value k.\"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if sum(nums[i:j+1]) == k:\n                count += 1\n    return count\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5):\n    return len([nums[i:j+1] for i in range(len(nums)) for j in range(i, len(nums)) if sum(nums[i:j+1]) == k])\nassert f(g())\n", "emb": null, "idx_generation": 433, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Find the number of subarrays in a list of integers that sum to a given value k.\"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if sum(nums[i:j+1]) == k:\n                count += 1\n    return count", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5):\n    return len([nums[i:j+1] for i in range(len(nums)) for j in range(i, len(nums)) if sum(nums[i:j+1]) == k])", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, pattern='abc') -> bool:\n    \"\"\"Check if a given pattern is present in a string.\"\"\"\n    return pattern in s\ndef g(pattern = 'abc'):\n    return pattern\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 433, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, pattern='abc') -> bool:\n    \"\"\"Check if a given pattern is present in a string.\"\"\"\n    return pattern in s", "solution_func": "def g(pattern = 'abc'):\n    return pattern", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, x=2, y=5) -> bool:\n    \"\"\"Find the sum of all multiples of x or y below a given number n.\"\"\"\n    return sum(i for i in range(n) if i % x == 0 or i % y == 0)\ndef g(x = 2, y = 5):\n    return sum(i for i in range(max(x, y)) if i % x == 0 or i % y == 0)\nassert f(g())\n", "emb": null, "idx_generation": 433, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, x=2, y=5) -> bool:\n    \"\"\"Find the sum of all multiples of x or y below a given number n.\"\"\"\n    return sum(i for i in range(n) if i % x == 0 or i % y == 0)", "solution_func": "def g(x = 2, y = 5):\n    return sum(i for i in range(max(x, y)) if i % x == 0 or i % y == 0)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], a=2, r=3) -> bool:\n    \"\"\"Check if the given list is a geometric sequence with common ratio r.\"\"\"\n    return all(x[i] * r == x[i + 1] for i in range(len(x) - 1))\ndef g(a=2, r=3, n=5):\n    return [a * r ** i for i in range(n)]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 433, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], a=2, r=3) -> bool:\n    \"\"\"Check if the given list is a geometric sequence with common ratio r.\"\"\"\n    return all(x[i] * r == x[i + 1] for i in range(len(x) - 1))", "solution_func": "def g(a=2, r=3, n=5):\n    return [a * r ** i for i in range(n)]", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi', 'jkl']) -> bool:\n    \"\"\"Check if the given string contains each substring in substrings in order.\"\"\"\n    indices = [s.find(substrings[i]) for i in range(len(substrings))]\n    return all(indices[i] < indices[i + 1] for i in range(len(indices) - 1))\ndef g(substrings=['abc', 'def', 'ghi', 'jkl']):\n    return ''.join(substrings)\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 433, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi', 'jkl']) -> bool:\n    \"\"\"Check if the given string contains each substring in substrings in order.\"\"\"\n    indices = [s.find(substrings[i]) for i in range(len(substrings))]\n    return all(indices[i] < indices[i + 1] for i in range(len(indices) - 1))", "solution_func": "def g(substrings=['abc', 'def', 'ghi', 'jkl']):\n    return ''.join(substrings)", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(graph: Dict[int, List[int]], start=1, end=5) -> bool:\n    \"\"\"Check if there is a path from the start node to the end node in the given graph.\"\"\"\n    visited = set()\n    stack = [start]\n    while stack:\n        node = stack.pop()\n        if node == end:\n            return True\n        visited.add(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                stack.append(neighbor)\n    return False\ndef g(start=1, end=5):\n    return {1: [2, 3], 2: [4, 5], 3: [5], 4: [5], 5: []}\nassert f(g())\n", "emb": [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 433, "target_skills": null, "problem_func": "from typing import*\ndef f(graph: Dict[int, List[int]], start=1, end=5) -> bool:\n    \"\"\"Check if there is a path from the start node to the end node in the given graph.\"\"\"\n    visited = set()\n    stack = [start]\n    while stack:\n        node = stack.pop()\n        if node == end:\n            return True\n        visited.add(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                stack.append(neighbor)\n    return False", "solution_func": "def g(start=1, end=5):\n    return {1: [2, 3], 2: [4, 5], 3: [5], 4: [5], 5: []}", "map_ix": [0, 0, 1, 0, 0, 0, 0, 0, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"\n    Find a string that contains each string in substrings in reverse order, e.g., 'yrrehcnanabelppa' for 'apple' and 'banana'\n    \"\"\"\n    return all((sub[::-1] in s for sub in substrings))\n    \ndef g(substrings = ['apple', 'banana', 'cherry']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[::-1][i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g())\n", "emb": null, "idx_generation": 433, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"\n    Find a string that contains each string in substrings in reverse order, e.g., 'yrrehcnanabelppa' for 'apple' and 'banana'\n    \"\"\"\n    return all((sub[::-1] in s for sub in substrings))", "solution_func": "def g(substrings = ['apple', 'banana', 'cherry']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[::-1][i] if i < len(s) else \" \") for i in range(m) for s in substrings])", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"\n    Find a pair of numbers in the list that add up to the target number\n    \"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\n\ndef g(nums = [10, 5, 7, 15, 3, 8]):\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 433, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"\n    Find a pair of numbers in the list that add up to the target number\n    \"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g(nums = [10, 5, 7, 15, 3, 8]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=5, b=7) -> bool:\n    \"\"\"Find n that when divided by a is b\"\"\"\n    return n // a == b\n\ndef g(a = 5, b = 7):\n    return a * b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 433, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=5, b=7) -> bool:\n    \"\"\"Find n that when divided by a is b\"\"\"\n    return n // a == b", "solution_func": "def g(a = 5, b = 7):\n    return a * b", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], t=10, n=5) -> bool:\n    \"\"\"Check if there are exactly n values in the list that sum up to t\"\"\"\n    if len(x) < n:\n        return False\n    if n == 0 and t == 0:\n        return True\n    if n < 0 or t < 0:\n        return False\n    \n    if x[0] > t:\n        return f(x[1:], t, n)\n    \n    return f(x[1:], t-x[0], n-1) or f(x[1:], t, n)\ndef g(t=10, n=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": null, "idx_generation": 433, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], t=10, n=5) -> bool:\n    \"\"\"Check if there are exactly n values in the list that sum up to t\"\"\"\n    if len(x) < n:\n        return False\n    if n == 0 and t == 0:\n        return True\n    if n < 0 or t < 0:\n        return False\n    \n    if x[0] > t:\n        return f(x[1:], t, n)\n    \n    return f(x[1:], t-x[0], n-1) or f(x[1:], t, n)", "solution_func": "def g(t=10, n=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 434, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]", "solution_func": "def g():\n    return \"racecar\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g():\n    return [2, 4, 6, 8]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 434, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g():\n    return [2, 4, 6, 8]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, k: int, arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if there are exactly k numbers in a list that are divisible by n.\"\"\"\n    count = 0\n    for num in arr:\n        if num % n == 0:\n            count += 1\n    return count == k\ndef g(n=2, k=4, arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return n, k\nassert f(*g())\n", "emb": null, "idx_generation": 434, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k: int, arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if there are exactly k numbers in a list that are divisible by n.\"\"\"\n    count = 0\n    for num in arr:\n        if num % n == 0:\n            count += 1\n    return count == k", "solution_func": "def g(n=2, k=4, arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return n, k", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nimport math\nfrom typing import*\ndef f(numbers: List[int], target=24, operators=['+', '-', '*', '/']) -> bool:\n    \"\"\"Find a combination of numbers and operators that evaluates to the target value.\"\"\"\n    import itertools\n    import math\n\n    def evaluate(expression):\n        stack = []\n        for token in expression:\n            if token in operators:\n                b = stack.pop()\n                a = stack.pop()\n                if token == '+':\n                    stack.append(a + b)\n                elif token == '-':\n                    stack.append(a - b)\n                elif token == '*':\n                    stack.append(a * b)\n                elif token == '/':\n                    stack.append(a / b)\n            else:\n                stack.append(token)\n        return stack[0]\n\n    for combination in itertools.permutations(numbers):\n        for operator_combination in itertools.product(operators, repeat=len(numbers)-1):\n            expression = []\n            for i in range(len(numbers)-1):\n                expression.append(combination[i])\n                expression.append(operator_combination[i])\n            expression.append(combination[-1])\n            if evaluate(expression) == target:\n                return True\n    return False\n\ndef g(numbers=[1, 2, 3, 4, 5, 6]):\n    return numbers\n\nassert f(g())\n", "emb": null, "idx_generation": 434, "target_skills": null, "problem_func": "import itertools\nimport math\nfrom typing import*\ndef f(numbers: List[int], target=24, operators=['+', '-', '*', '/']) -> bool:\n    \"\"\"Find a combination of numbers and operators that evaluates to the target value.\"\"\"\n    import itertools\n    import math\n\n    def evaluate(expression):\n        stack = []\n        for token in expression:\n            if token in operators:\n                b = stack.pop()\n                a = stack.pop()\n                if token == '+':\n                    stack.append(a + b)\n                elif token == '-':\n                    stack.append(a - b)\n                elif token == '*':\n                    stack.append(a * b)\n                elif token == '/':\n                    stack.append(a / b)\n            else:\n                stack.append(token)\n        return stack[0]\n\n    for combination in itertools.permutations(numbers):\n        for operator_combination in itertools.product(operators, repeat=len(numbers)-1):\n            expression = []\n            for i in range(len(numbers)-1):\n                expression.append(combination[i])\n                expression.append(operator_combination[i])\n            expression.append(combination[-1])\n            if evaluate(expression) == target:\n                return True\n    return False", "solution_func": "def g(numbers=[1, 2, 3, 4, 5, 6]):\n    return numbers", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(words: List[str], target='PYTHON') -> bool:\n    \"\"\"Find a combination of words that can be rearranged to form the target word.\"\"\"\n    import itertools\n\n    def is_rearrangeable(words, target):\n        target_freq = {}\n        for char in target:\n            target_freq[char] = target_freq.get(char, 0) + 1\n\n        for combination in itertools.permutations(words):\n            combined_word = \"\".join(combination)\n            if len(combined_word) != len(target):\n                continue\n\n            word_freq = {}\n            for char in combined_word:\n                word_freq[char] = word_freq.get(char, 0) + 1\n\n            if word_freq == target_freq:\n                return True\n\n        return False\n\n    return is_rearrangeable(words, target)\n\ndef g(words=['PYT', 'HON']):\n    return words\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 434, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(words: List[str], target='PYTHON') -> bool:\n    \"\"\"Find a combination of words that can be rearranged to form the target word.\"\"\"\n    import itertools\n\n    def is_rearrangeable(words, target):\n        target_freq = {}\n        for char in target:\n            target_freq[char] = target_freq.get(char, 0) + 1\n\n        for combination in itertools.permutations(words):\n            combined_word = \"\".join(combination)\n            if len(combined_word) != len(target):\n                continue\n\n            word_freq = {}\n            for char in combined_word:\n                word_freq[char] = word_freq.get(char, 0) + 1\n\n            if word_freq == target_freq:\n                return True\n\n        return False\n\n    return is_rearrangeable(words, target)", "solution_func": "def g(words=['PYT', 'HON']):\n    return words", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if a given substring is the longest substring of s that contains all distinct characters.\"\"\"\n    if len(substring) > len(s):\n        return False\n    \n    for i in range(len(s) - len(substring) + 1):\n        if set(substring) == set(s[i:i+len(substring)]):\n            return True\n    \n    return False\n\ndef g(substring='abc'):\n    return substring\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 434, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if a given substring is the longest substring of s that contains all distinct characters.\"\"\"\n    if len(substring) > len(s):\n        return False\n    \n    for i in range(len(s) - len(substring) + 1):\n        if set(substring) == set(s[i:i+len(substring)]):\n            return True\n    \n    return False", "solution_func": "def g(substring='abc'):\n    return substring", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Find a sublist in the given list where the sum of all elements in the sublist is equal to a given target.\n    \"\"\"\n    for sublist in arr:\n        if sum(sublist) == target:\n            return True\n    return False\ndef g(target = 10):\n    return [[1, 2, 3, 4], [5, 6, 7], [8, 9]]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 434, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Find a sublist in the given list where the sum of all elements in the sublist is equal to a given target.\n    \"\"\"\n    for sublist in arr:\n        if sum(sublist) == target:\n            return True\n    return False", "solution_func": "def g(target = 10):\n    return [[1, 2, 3, 4], [5, 6, 7], [8, 9]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Find a pair of numbers in the given list where their sum is equal to a given target.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target = 0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n", "emb": null, "idx_generation": 434, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Find a pair of numbers in the given list where their sum is equal to a given target.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target = 0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\ndef g(target = 'hello'):\n    return target\nassert f(g())\n", "emb": null, "idx_generation": 434, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g(target = 'hello'):\n    return target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(seq: List[int], n=5, length=3) -> bool:\n    \"\"\"Find a sequence of random integers between 1 and 10 (inclusive) of a given length that adds up to n\"\"\"\n    return all((i in range(1, 11) for i in seq)) and sum(seq) == n and (len(seq) == length)\n\ndef g(n=5, length=3):\n    return random.choices(range(1, 11), k=length)\n\nassert f(g())\n", "emb": null, "idx_generation": 434, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(seq: List[int], n=5, length=3) -> bool:\n    \"\"\"Find a sequence of random integers between 1 and 10 (inclusive) of a given length that adds up to n\"\"\"\n    return all((i in range(1, 11) for i in seq)) and sum(seq) == n and (len(seq) == length)", "solution_func": "def g(n=5, length=3):\n    return random.choices(range(1, 11), k=length)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], t=1001, n=5) -> bool:\n    \"\"\"Find the sum of the first n values in the list and check if it is equal to t\"\"\"\n    return sum(x[:n]) == t\n\ndef g(t=1001, n=5):\n    return list(range(1, n+1))\n\nassert f(g())\n", "emb": null, "idx_generation": 435, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], t=1001, n=5) -> bool:\n    \"\"\"Find the sum of the first n values in the list and check if it is equal to t\"\"\"\n    return sum(x[:n]) == t", "solution_func": "def g(t=1001, n=5):\n    return list(range(1, n+1))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[str], t=5, n=3) -> bool:\n    \"\"\"Check if the list contains exactly n occurrences of the string t\"\"\"\n    return x.count(t) == n\n\ndef g(t=\"apple\", n=3):\n    return [t] * n + [\"banana\"]\n\nassert f(g())\n", "emb": null, "idx_generation": 435, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[str], t=5, n=3) -> bool:\n    \"\"\"Check if the list contains exactly n occurrences of the string t\"\"\"\n    return x.count(t) == n", "solution_func": "def g(t=\"apple\", n=3):\n    return [t] * n + [\"banana\"]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], t=20, n=4) -> bool:\n    \"\"\"Find if there exists a sublist of length n whose sum is equal to t\"\"\"\n    for i in range(len(x) - n + 1):\n        if sum(x[i:i+n]) == t:\n            return True\n    return False\n\ndef g(t=20, n=4):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": null, "idx_generation": 435, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], t=20, n=4) -> bool:\n    \"\"\"Find if there exists a sublist of length n whose sum is equal to t\"\"\"\n    for i in range(len(x) - n + 1):\n        if sum(x[i:i+n]) == t:\n            return True\n    return False", "solution_func": "def g(t=20, n=4):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"Find if there exists two numbers in nums that sum up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return nums, target\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 435, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"Find if there exists two numbers in nums that sum up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find if the given string s is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g(s: str = 'racecar'):\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 435, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find if the given string s is a palindrome.\"\"\"\n    return s == s[::-1]", "solution_func": "def g(s: str = 'racecar'):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Find if there exists a duplicate element in the given array arr.\"\"\"\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 5]):\n    return arr\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 435, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Find if there exists a duplicate element in the given array arr.\"\"\"\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5, 5]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, n=3) -> bool:\n    \"\"\"Check if the sum of the elements in each row of a 2D array is equal to n.\"\"\"\n    row_sums = np.sum(arr, axis=1)\n    return np.all(row_sums == n)\n\ndef g(n=3):\n    arr = np.array([[1, 1, 1], [2, 2, 2], [3, 3, 3]])\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 435, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, n=3) -> bool:\n    \"\"\"Check if the sum of the elements in each row of a 2D array is equal to n.\"\"\"\n    row_sums = np.sum(arr, axis=1)\n    return np.all(row_sums == n)", "solution_func": "def g(n=3):\n    arr = np.array([[1, 1, 1], [2, 2, 2], [3, 3, 3]])\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, sub: str=\"hello\") -> bool:\n    \"\"\"Check if a substring is present in a string.\"\"\"\n    return sub in s\n\ndef g(sub=\"hello\"):\n    s = \"Hello, world!\"\n    return s\n\nassert f(g())\n", "emb": null, "idx_generation": 435, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, sub: str=\"hello\") -> bool:\n    \"\"\"Check if a substring is present in a string.\"\"\"\n    return sub in s", "solution_func": "def g(sub=\"hello\"):\n    s = \"Hello, world!\"\n    return s", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: datetime, year=2022, month=1, day=1) -> bool:\n    \"\"\"Check if a date is after a specific year, month, and day.\"\"\"\n    specified_date = datetime(year, month, day)\n    return date > specified_date\n\ndef g(year=2022, month=1, day=1):\n    current_date = datetime.now()\n    return current_date\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 435, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date: datetime, year=2022, month=1, day=1) -> bool:\n    \"\"\"Check if a date is after a specific year, month, and day.\"\"\"\n    specified_date = datetime(year, month, day)\n    return date > specified_date", "solution_func": "def g(year=2022, month=1, day=1):\n    current_date = datetime.now()\n    return current_date", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target_sum=-10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target sum.\"\"\"\n    return any((arr[i] + arr[j] == target_sum for i in range(len(arr)) for j in range(i+1, len(arr))))\ndef g(target_sum=-10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": null, "idx_generation": 435, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=-10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target sum.\"\"\"\n    return any((arr[i] + arr[j] == target_sum for i in range(len(arr)) for j in range(i+1, len(arr))))", "solution_func": "def g(target_sum=-10):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, a=3, b=5) -> bool:\n    \"\"\"Check if the sum of array elements is equal to a*b\"\"\"\n    return np.sum(arr) == a * b\n\ndef g(a=3, b=5):\n    return np.full((a, b), 1)\n\narr = g()\nassert f(arr)\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 436, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, a=3, b=5) -> bool:\n    \"\"\"Check if the sum of array elements is equal to a*b\"\"\"\n    return np.sum(arr) == a * b", "solution_func": "def g(a=3, b=5):\n    return np.full((a, b), 1)\n\narr = g()", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=2.718281828459045, b=1.4142135623730951) -> bool:\n    \"\"\"Check if the product of square root of x and b is equal to a\"\"\"\n    return math.isclose(math.sqrt(x) * b, a)\n\ndef g(a=2.718281828459045, b=1.4142135623730951):\n    return (a / b) ** 2\n\nx = g()\nassert f(x)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 436, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=2.718281828459045, b=1.4142135623730951) -> bool:\n    \"\"\"Check if the product of square root of x and b is equal to a\"\"\"\n    return math.isclose(math.sqrt(x) * b, a)", "solution_func": "def g(a=2.718281828459045, b=1.4142135623730951):\n    return (a / b) ** 2\n\nx = g()", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(arr: list, a=5, b=10) -> bool:\n    \"\"\"Check if all elements in the array are between a and b\"\"\"\n    return all(a <= x <= b for x in arr)\n\ndef g(a=5, b=10):\n    return [random.randint(a, b) for _ in range(10)]\n\narr = g()\nassert f(arr)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 436, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(arr: list, a=5, b=10) -> bool:\n    \"\"\"Check if all elements in the array are between a and b\"\"\"\n    return all(a <= x <= b for x in arr)", "solution_func": "def g(a=5, b=10):\n    return [random.randint(a, b) for _ in range(10)]\n\narr = g()", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find the number of even elements in a list of integers.\"\"\"\n    return x == sum(1 for num in nums if num % 2 == 0)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return sum(1 for num in nums if num % 2 == 0)\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 436, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find the number of even elements in a list of integers.\"\"\"\n    return x == sum(1 for num in nums if num % 2 == 0)", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return sum(1 for num in nums if num % 2 == 0)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'indigo', 'jackfruit']) -> bool:\n    \"\"\"Find the index of the longest word in a list of strings.\"\"\"\n    return x == max(range(len(words)), key=lambda i: len(words[i]))\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'indigo', 'jackfruit']):\n    return max(range(len(words)), key=lambda i: len(words[i]))\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 436, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'indigo', 'jackfruit']) -> bool:\n    \"\"\"Find the index of the longest word in a list of strings.\"\"\"\n    return x == max(range(len(words)), key=lambda i: len(words[i]))", "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'indigo', 'jackfruit']):\n    return max(range(len(words)), key=lambda i: len(words[i]))", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: float, radius=1.0, precision=2) -> bool:\n    \"\"\"Find the area of a circle rounded to a specified decimal place.\"\"\"\n    return x == round(math.pi * radius**2, precision)\ndef g(radius=1.0, precision=2):\n    return round(math.pi * radius**2, precision)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 436, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, radius=1.0, precision=2) -> bool:\n    \"\"\"Find the area of a circle rounded to a specified decimal place.\"\"\"\n    return x == round(math.pi * radius**2, precision)", "solution_func": "def g(radius=1.0, precision=2):\n    return round(math.pi * radius**2, precision)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(xs: List[float], n: int = 5) -> bool:\n    \"\"\"Check if the sum of n smallest numbers in xs is equal to the sum of n largest numbers in xs\"\"\"\n    sorted_xs = sorted(xs)\n    return sum(sorted_xs[:n]) == sum(sorted_xs[-n:])\ndef g(n: int = 5):\n    return [i for i in range(1, 2 * n + 1)]\nassert f(g())\n", "emb": null, "idx_generation": 436, "target_skills": null, "problem_func": "from typing import*\ndef f(xs: List[float], n: int = 5) -> bool:\n    \"\"\"Check if the sum of n smallest numbers in xs is equal to the sum of n largest numbers in xs\"\"\"\n    sorted_xs = sorted(xs)\n    return sum(sorted_xs[:n]) == sum(sorted_xs[-n:])", "solution_func": "def g(n: int = 5):\n    return [i for i in range(1, 2 * n + 1)]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: int, y: int, z: int, a=10, b=20, c=30) -> bool:\n    \"\"\"Check if the sum of x, y, and z is equal to the sum of a, b, and c\"\"\"\n    return x + y + z == a + b + c\ndef g(a: int = 10, b: int = 20, c: int = 30):\n    return a + b + c\nassert f(g())\n", "emb": null, "idx_generation": 436, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, y: int, z: int, a=10, b=20, c=30) -> bool:\n    \"\"\"Check if the sum of x, y, and z is equal to the sum of a, b, and c\"\"\"\n    return x + y + z == a + b + c", "solution_func": "def g(a: int = 10, b: int = 20, c: int = 30):\n    return a + b + c", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], x: int, y: int, n: int = 3) -> bool:\n    \"\"\"Check if the sum of the elements in the nxn submatrix starting from (x, y) is divisible by n\"\"\"\n    submatrix_sum = sum(sum(row[y:y+n]) for row in matrix[x:x+n])\n    return submatrix_sum % n == 0\ndef g(x: int = 0, y: int = 0, n: int = 3):\n    return [[i + j for j in range(5)] for i in range(5)]\nassert f(g())\n", "emb": null, "idx_generation": 436, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], x: int, y: int, n: int = 3) -> bool:\n    \"\"\"Check if the sum of the elements in the nxn submatrix starting from (x, y) is divisible by n\"\"\"\n    submatrix_sum = sum(sum(row[y:y+n]) for row in matrix[x:x+n])\n    return submatrix_sum % n == 0", "solution_func": "def g(x: int = 0, y: int = 0, n: int = 3):\n    return [[i + j for j in range(5)] for i in range(5)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, ops=['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], target=61813) -> bool:\n    \"\"\"\n    Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\n    final value is the target value.\n\n    Sample Input:\n    ops = [\"x++\", \"--x\", \"--x\"]\n    target = 12\n\n    Sample Output:\n    13\n    \"\"\"\n    for op in ops:\n        if op in ['++x', 'x++']:\n            n += 1\n        else:\n            assert op in ['--x', 'x--']\n            n -= 1\n    return n == target\ndef g(ops = ['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], target = 61813):\n    return target - ops.count(\"++x\") - ops.count(\"x++\") + ops.count(\"--x\") + ops.count(\"x--\")\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 436, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, ops=['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], target=61813) -> bool:\n    \"\"\"\n    Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\n    final value is the target value.\n\n    Sample Input:\n    ops = [\"x++\", \"--x\", \"--x\"]\n    target = 12\n\n    Sample Output:\n    13\n    \"\"\"\n    for op in ops:\n        if op in ['++x', 'x++']:\n            n += 1\n        else:\n            assert op in ['--x', 'x--']\n            n -= 1\n    return n == target", "solution_func": "def g(ops = ['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], target = 61813):\n    return target - ops.count(\"++x\") - ops.count(\"x++\") + ops.count(\"--x\") + ops.count(\"x--\")", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig']) -> bool:\n    \"\"\"Check if a string can be constructed by concatenating words from a given list.\"\"\"\n    return all((word in s for word in words))\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig']):\n    s = \"\"\n    for word in words:\n        s += word\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 437, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig']) -> bool:\n    \"\"\"Check if a string can be constructed by concatenating words from a given list.\"\"\"\n    return all((word in s for word in words))", "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig']):\n    s = \"\"\n    for word in words:\n        s += word\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if a target value can be found in a 2D matrix, where each row and column is in ascending order.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    row = 0\n    col = cols - 1\n    while row < rows and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    target = 15\n    return matrix, target\nassert f(*g())\n", "emb": null, "idx_generation": 437, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if a target value can be found in a 2D matrix, where each row and column is in ascending order.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    row = 0\n    col = cols - 1\n    while row < rows and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    target = 15\n    return matrix, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in a list that sum up to a target value.\"\"\"\n    for i in range(len(nums) - 2):\n        for j in range(i + 1, len(nums) - 1):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(nums=[-1, 2, 3, 4, -5, 6, 7, 8, 9]):\n    target = 0\n    return nums, target\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 437, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in a list that sum up to a target value.\"\"\"\n    for i in range(len(nums) - 2):\n        for j in range(i + 1, len(nums) - 1):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums=[-1, 2, 3, 4, -5, 6, 7, 8, 9]):\n    target = 0\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, a = 3, b = 4) -> bool:\n    \"\"\"Check if the sum of the squares of x, y, and z is equal to the square of a plus the square of b.\"\"\"\n    return x**2 + y**2 + z**2 == a**2 + b**2\n\ndef g(a = 3, b = 4):\n    x = math.sqrt(a**2 + b**2)\n    y = math.sqrt(a**2 + b**2)\n    z = math.sqrt(a**2 + b**2)\n    return (x,y,z)\n\nassert f(*g())\n", "emb": null, "idx_generation": 437, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, a = 3, b = 4) -> bool:\n    \"\"\"Check if the sum of the squares of x, y, and z is equal to the square of a plus the square of b.\"\"\"\n    return x**2 + y**2 + z**2 == a**2 + b**2", "solution_func": "def g(a = 3, b = 4):\n    x = math.sqrt(a**2 + b**2)\n    y = math.sqrt(a**2 + b**2)\n    z = math.sqrt(a**2 + b**2)\n    return (x,y,z)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(x: int, y: int, z: int, a: int = random.randint(1,10), b: int = random.randint(1,10)) -> bool:\n    \"\"\"Check if the product of x, y, and z is divisible by the product of a and b.\"\"\"\n    return x * y * z % (a * b) == 0\n\ndef g(a: int = random.randint(1,10), b: int = random.randint(1,10)):\n    x = random.randint(1,10)\n    y = random.randint(1,10)\n    z = random.randint(1,10)\n    return (x,y,z,a,b)\n\nassert f(*g())\n", "emb": null, "idx_generation": 437, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(x: int, y: int, z: int, a: int = random.randint(1,10), b: int = random.randint(1,10)) -> bool:\n    \"\"\"Check if the product of x, y, and z is divisible by the product of a and b.\"\"\"\n    return x * y * z % (a * b) == 0", "solution_func": "def g(a: int = random.randint(1,10), b: int = random.randint(1,10)):\n    x = random.randint(1,10)\n    y = random.randint(1,10)\n    z = random.randint(1,10)\n    return (x,y,z,a,b)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(x: np.ndarray, a: int = 3, b: int = 4) -> bool:\n    \"\"\"Check if the sum of the elements in x is equal to the product of a and b.\"\"\"\n    return np.sum(x) == a * b\n\ndef g(a: int = 3, b: int = 4):\n    x = np.ones((4,4))\n    return x,a,b\n\nassert f(*g())\n", "emb": null, "idx_generation": 437, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(x: np.ndarray, a: int = 3, b: int = 4) -> bool:\n    \"\"\"Check if the sum of the elements in x is equal to the product of a and b.\"\"\"\n    return np.sum(x) == a * b", "solution_func": "def g(a: int = 3, b: int = 4):\n    x = np.ones((4,4))\n    return x,a,b", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float) -> bool:\n    \"\"\"Check if x is a perfect square and y is a perfect cube, and x + y = z.\"\"\"\n    return math.isqrt(x) ** 2 == x and round(y ** (1/3)) ** 3 == y and x + y == z\n\ndef g(x: float = 16, y: float = 27):\n    return x, y, x + y\n\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 437, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float) -> bool:\n    \"\"\"Check if x is a perfect square and y is a perfect cube, and x + y = z.\"\"\"\n    return math.isqrt(x) ** 2 == x and round(y ** (1/3)) ** 3 == y and x + y == z", "solution_func": "def g(x: float = 16, y: float = 27):\n    return x, y, x + y", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if n is a prime number and all elements in lst are divisible by n.\"\"\"\n    return all((i % n == 0 for i in lst)) and all((i != 0 for i in lst)) and all((i != 1 for i in lst))\n\ndef g(lst: List[int] = [4, 8, 12, 16]):\n    n = lst[0]\n    for i in lst:\n        if i == 0:\n            return 0, lst\n        if i != 1 and i % n == 0:\n            continue\n        else:\n            return 0, lst\n    return n, lst\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 437, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if n is a prime number and all elements in lst are divisible by n.\"\"\"\n    return all((i % n == 0 for i in lst)) and all((i != 0 for i in lst)) and all((i != 1 for i in lst))", "solution_func": "def g(lst: List[int] = [4, 8, 12, 16]):\n    n = lst[0]\n    for i in lst:\n        if i == 0:\n            return 0, lst\n        if i != 1 and i % n == 0:\n            continue\n        else:\n            return 0, lst\n    return n, lst", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Check if s and t are anagrams of each other.\"\"\"\n    return sorted(s) == sorted(t)\n\ndef g(s: str = \"listen\", t: str = \"silent\"):\n    return s, t\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 437, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Check if s and t are anagrams of each other.\"\"\"\n    return sorted(s) == sorted(t)", "solution_func": "def g(s: str = \"listen\", t: str = \"silent\"):\n    return s, t", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, s: str, t: str) -> bool:\n    \"\"\"\n    Check if a string t is a rotation of string s by n positions clockwise.\n    \"\"\"\n    rotated = s[-n:] + s[:-n]\n    return rotated == t\ndef g(s: str, t: str):\n    return len(s), s, t\nassert f(g())\n", "emb": null, "idx_generation": 437, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, s: str, t: str) -> bool:\n    \"\"\"\n    Check if a string t is a rotation of string s by n positions clockwise.\n    \"\"\"\n    rotated = s[-n:] + s[:-n]\n    return rotated == t", "solution_func": "def g(s: str, t: str):\n    return len(s), s, t", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=0) -> bool:\n    \"\"\"Check if the sum of any two elements in the array equals the target value\"\"\"\n    return any(arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr)))\n    \ndef g(arr: np.ndarray):\n    return arr\n\narr = np.array([1, 2, 3, 4, 5])\nassert f(g(arr), target=7)\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 438, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=0) -> bool:\n    \"\"\"Check if the sum of any two elements in the array equals the target value\"\"\"\n    return any(arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr)))", "solution_func": "def g(arr: np.ndarray):\n    return arr\n\narr = np.array([1, 2, 3, 4, 5])", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='Python') -> bool:\n    \"\"\"Check if a given substring is present in the given string\"\"\"\n    return substr in s\n\ndef g(s: str):\n    return s\n\nstring = \"Python is a great programming language\"\nassert f(g(string), substr='programming')\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 438, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='Python') -> bool:\n    \"\"\"Check if a given substring is present in the given string\"\"\"\n    return substr in s", "solution_func": "def g(s: str):\n    return s\n\nstring = \"Python is a great programming language\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Find the product of all the elements in the list that are less than the target value\"\"\"\n    return np.prod([num for num in lst if num < target])\n\ndef g(lst: List[int]):\n    return lst\n\nlst = [1, 2, 3, 4, 5]\nassert f(g(lst), target=4)\n", "emb": null, "idx_generation": 438, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Find the product of all the elements in the list that are less than the target value\"\"\"\n    return np.prod([num for num in lst if num < target])", "solution_func": "def g(lst: List[int]):\n    return lst\n\nlst = [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(sequence: List[int], target=100, operators=['+', '-']) -> bool:\n    \"\"\"Find a combination of operators (+ or -) that can be applied to the numbers in the sequence to obtain the target number.\"\"\"\n    return eval(''.join([str(sequence[i]) + random.choice(operators) for i in range(len(sequence))])) == target\ndef g(target=100, operators=['+', '-']):\n    return [random.randint(1, 10) for _ in range(random.randint(2, 5))]\nassert f(g())\n", "emb": null, "idx_generation": 438, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(sequence: List[int], target=100, operators=['+', '-']) -> bool:\n    \"\"\"Find a combination of operators (+ or -) that can be applied to the numbers in the sequence to obtain the target number.\"\"\"\n    return eval(''.join([str(sequence[i]) + random.choice(operators) for i in range(len(sequence))])) == target", "solution_func": "def g(target=100, operators=['+', '-']):\n    return [random.randint(1, 10) for _ in range(random.randint(2, 5))]", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that sum up to the target number.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for m in range(i, len(matrix)):\n                start = j if m == i else 0\n                for n in range(start, len(matrix[m])):\n                    if matrix[i][j] + matrix[m][n] == target:\n                        return True\n    return False\ndef g(target=0):\n    matrix = [[random.randint(-10, 10) for _ in range(random.randint(2, 5))] for _ in range(random.randint(2, 5))]\n    return matrix\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 438, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that sum up to the target number.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for m in range(i, len(matrix)):\n                start = j if m == i else 0\n                for n in range(start, len(matrix[m])):\n                    if matrix[i][j] + matrix[m][n] == target:\n                        return True\n    return False", "solution_func": "def g(target=0):\n    matrix = [[random.randint(-10, 10) for _ in range(random.randint(2, 5))] for _ in range(random.randint(2, 5))]\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nimport random\nfrom typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a combination of numbers in the list that add up to the target number.\"\"\"\n    for i in range(1, len(numbers) + 1):\n        for combination in itertools.combinations(numbers, i):\n            if sum(combination) == target:\n                return True\n    return False\ndef g(target=10):\n    numbers = [random.randint(1, 10) for _ in range(random.randint(2, 5))]\n    return numbers\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 438, "target_skills": null, "problem_func": "import itertools\nimport random\nfrom typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a combination of numbers in the list that add up to the target number.\"\"\"\n    for i in range(1, len(numbers) + 1):\n        for combination in itertools.combinations(numbers, i):\n            if sum(combination) == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    numbers = [random.randint(1, 10) for _ in range(random.randint(2, 5))]\n    return numbers", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, n: int, m: int) -> bool:\n    \"\"\"Check if there exists a row in the array where the sum of its elements is equal to n\"\"\"\n    return any((np.sum(row) == n for row in arr))\n\ndef g(n: int, m: int):\n    \"\"\"Generate a 2D numpy array with random integer values\"\"\"\n    return np.random.randint(0, 10, size=(m, n))\n\narr = g(n=5, m=3)\nassert f(arr, n=15, m=3)\n", "emb": null, "idx_generation": 438, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, n: int, m: int) -> bool:\n    \"\"\"Check if there exists a row in the array where the sum of its elements is equal to n\"\"\"\n    return any((np.sum(row) == n for row in arr))", "solution_func": "def g(n: int, m: int):\n    \"\"\"Generate a 2D numpy array with random integer values\"\"\"\n    return np.random.randint(0, 10, size=(m, n))\n\narr = g(n=5, m=3)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(a: float, b: float, c: float) -> bool:\n    \"\"\"Check if three numbers form a Pythagorean triple\"\"\"\n    return math.isclose(a**2 + b**2, c**2)\n\ndef g():\n    \"\"\"Generate a Pythagorean triple\"\"\"\n    a = 3\n    b = 4\n    c = 5\n    return a, b, c\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 438, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(a: float, b: float, c: float) -> bool:\n    \"\"\"Check if three numbers form a Pythagorean triple\"\"\"\n    return math.isclose(a**2 + b**2, c**2)", "solution_func": "def g():\n    \"\"\"Generate a Pythagorean triple\"\"\"\n    a = 3\n    b = 4\n    c = 5\n    return a, b, c", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport itertools\n\ndef f(lst: list) -> bool:\n    \"\"\"Check if there are two numbers in the list whose sum is equal to 10\"\"\"\n    return any((sum(pair) == 10 for pair in itertools.combinations(lst, 2)))\n\ndef g():\n    \"\"\"Generate a list of integers\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 438, "target_skills": null, "problem_func": "from typing import*\nimport itertools\n\ndef f(lst: list) -> bool:\n    \"\"\"Check if there are two numbers in the list whose sum is equal to 10\"\"\"\n    return any((sum(pair) == 10 for pair in itertools.combinations(lst, 2)))", "solution_func": "def g():\n    \"\"\"Generate a list of integers\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, num=4) -> bool:\n    \"\"\"Check if a string contains a certain number of vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = sum(1 for char in s if char.lower() in vowels)\n    return vowel_count == num\ndef g(num=4):\n    return 'aeiou' * num\nassert f(g())\n", "emb": null, "idx_generation": 438, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, num=4) -> bool:\n    \"\"\"Check if a string contains a certain number of vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = sum(1 for char in s if char.lower() in vowels)\n    return vowel_count == num", "solution_func": "def g(num=4):\n    return 'aeiou' * num", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the array that sum up to the target.\"\"\"\n    return any(target - x in arr for x in arr)\ndef g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return arr\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 439, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the array that sum up to the target.\"\"\"\n    return any(target - x in arr for x in arr)", "solution_func": "def g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there is a subarray in the matrix that sums up to the target.\"\"\"\n    row_count = len(matrix)\n    col_count = len(matrix[0])\n    for i in range(row_count):\n        for j in range(col_count):\n            for k in range(i, row_count):\n                for l in range(j, col_count):\n                    subarray_sum = sum(matrix[x][y] for x in range(i, k+1) for y in range(j, l+1))\n                    if subarray_sum == target:\n                        return True\n    return False\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 439, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there is a subarray in the matrix that sums up to the target.\"\"\"\n    row_count = len(matrix)\n    col_count = len(matrix[0])\n    for i in range(row_count):\n        for j in range(col_count):\n            for k in range(i, row_count):\n                for l in range(j, col_count):\n                    subarray_sum = sum(matrix[x][y] for x in range(i, k+1) for y in range(j, l+1))\n                    if subarray_sum == target:\n                        return True\n    return False", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int], target=5) -> bool:\n    \"\"\"Check if there is a triplet in the list that sums up to the target.\"\"\"\n    return any(a + b + c == target for a in lst for b in lst for c in lst)\ndef g(lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return lst\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 439, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target=5) -> bool:\n    \"\"\"Check if there is a triplet in the list that sums up to the target.\"\"\"\n    return any(a + b + c == target for a in lst for b in lst for c in lst)", "solution_func": "def g(lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return lst", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there is a combination of numbers in the list that adds up to the target\"\"\"\n    return any(sum(comb) == target for r in range(len(nums) + 1) for comb in itertools.combinations(nums, r))\n    \ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(g([2, 4, 6, 8], 10))\n", "emb": null, "idx_generation": 439, "target_skills": null, "problem_func": "from typing import*\nimport itertools\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there is a combination of numbers in the list that adds up to the target\"\"\"\n    return any(sum(comb) == target for r in range(len(nums) + 1) for comb in itertools.combinations(nums, r))", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list of numbers is a palindrome\"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([1, 2, 3, 2, 1]))\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 439, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list of numbers is a palindrome\"\"\"\n    return nums == nums[::-1]", "solution_func": "def g(nums: List[int]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is symmetric\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[0])))\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\nassert f(g([[1, 2, 3], [2, 4, 5], [3, 5, 6]]))\n", "emb": [1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 439, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is symmetric\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[0])))", "solution_func": "def g(matrix: List[List[int]]):\n    return matrix", "map_ix": [1, 0, 1, 1, 0, 1, 1, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target='hello there') -> bool:\n    \"\"\"Check if a given string is a palindrome and equal to the target string.\"\"\"\n    return s == s[::-1] and s == target\ndef g(target='hello there'):\n    return target[::-1]\nassert f(g())\n", "emb": null, "idx_generation": 439, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='hello there') -> bool:\n    \"\"\"Check if a given string is a palindrome and equal to the target string.\"\"\"\n    return s == s[::-1] and s == target", "solution_func": "def g(target='hello there'):\n    return target[::-1]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, x=7, y=3) -> bool:\n    \"\"\"Check if a given number is divisible by both x and y.\"\"\"\n    return n % x == 0 and n % y == 0\ndef g(x=7, y=3):\n    return x * y\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 439, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, x=7, y=3) -> bool:\n    \"\"\"Check if a given number is divisible by both x and y.\"\"\"\n    return n % x == 0 and n % y == 0", "solution_func": "def g(x=7, y=3):\n    return x * y", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a given number is present in a list.\"\"\"\n    return n in lst\ndef g(lst=[1, 2, 3, 4, 5]):\n    return random.choice(lst)\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 439, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a given number is present in a list.\"\"\"\n    return n in lst", "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    return random.choice(lst)", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g():\n    return [1, 2, 3, 4, 5], 9\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 439, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5], 9", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=7) -> bool:\n    \"\"\"Check if a string contains exactly n vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count == n\ndef g(n = 7):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join([vowels[i % 5] for i in range(n)])\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 440, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=7) -> bool:\n    \"\"\"Check if a string contains exactly n vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count == n", "solution_func": "def g(n = 7):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join([vowels[i % 5] for i in range(n)])", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sum up to a target value.\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False\ndef g(target = 100):\n    return [50, 25, 75, 10, 90]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 440, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sum up to a target value.\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False", "solution_func": "def g(target = 100):\n    return [50, 25, 75, 10, 90]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: str, n=3) -> bool:\n    \"\"\"Check if a string contains exactly n consecutive digits.\"\"\"\n    for i in range(len(x)-n):\n        if x[i:i+n].isdigit():\n            return True\n    return False\ndef g(n = 3):\n    return \"abc123xyz\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 440, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str, n=3) -> bool:\n    \"\"\"Check if a string contains exactly n consecutive digits.\"\"\"\n    for i in range(len(x)-n):\n        if x[i:i+n].isdigit():\n            return True\n    return False", "solution_func": "def g(n = 3):\n    return \"abc123xyz\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], g1=[1, 2, 3, 4], g2=[10, 20, 30, 40]) -> bool:\n    \"\"\"\n    You are given two lists which are permutations of one another and the goal is to find the permutation.\n    \"\"\"\n    return lst == [g2[g1.index(e)] for e in lst]\ndef g(g1=[1, 2, 3, 4], g2=[10, 20, 30, 40]):\n    return g2\nassert f(g())\n", "emb": null, "idx_generation": 440, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], g1=[1, 2, 3, 4], g2=[10, 20, 30, 40]) -> bool:\n    \"\"\"\n    You are given two lists which are permutations of one another and the goal is to find the permutation.\n    \"\"\"\n    return lst == [g2[g1.index(e)] for e in lst]", "solution_func": "def g(g1=[1, 2, 3, 4], g2=[10, 20, 30, 40]):\n    return g2", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, g1=[[1, 0], [1, 1], [1, 2], [2, 1]], g2=[[0, 2], [2, 2], [2, 0], [2, 1]]) -> bool:\n    \"\"\"\n    Given a number n, you are given two graphs which are permutations of one another and the goal is to find the permutation.\n    Each graph is specified by a list of edges where each edge is a pair of integer vertex numbers.\n    \"\"\"\n    return n == max(i for g in [g1, g2] for e in g for i in e) + 1\ndef g(g1=[[1, 0], [1, 1], [1, 2], [2, 1]], g2=[[0, 2], [2, 2], [2, 0], [2, 1]]):\n    return max(i for g in [g1, g2] for e in g for i in e) + 1\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 440, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, g1=[[1, 0], [1, 1], [1, 2], [2, 1]], g2=[[0, 2], [2, 2], [2, 0], [2, 1]]) -> bool:\n    \"\"\"\n    Given a number n, you are given two graphs which are permutations of one another and the goal is to find the permutation.\n    Each graph is specified by a list of edges where each edge is a pair of integer vertex numbers.\n    \"\"\"\n    return n == max(i for g in [g1, g2] for e in g for i in e) + 1", "solution_func": "def g(g1=[[1, 0], [1, 1], [1, 2], [2, 1]], g2=[[0, 2], [2, 2], [2, 0], [2, 1]]):\n    return max(i for g in [g1, g2] for e in g for i in e) + 1", "map_ix": [1, 1, 1, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(st: str, a='id', b='xakid') -> bool:\n    \"\"\"Solve simple string multiplication problem.\"\"\"\n    return st * a == b\ndef g(a = 'id', b = 'xakid'):\n    return b[:int(len(b)/len(a))]\nassert f(g())\n", "emb": null, "idx_generation": 440, "target_skills": null, "problem_func": "from typing import*\ndef f(st: str, a='id', b='xakid') -> bool:\n    \"\"\"Solve simple string multiplication problem.\"\"\"\n    return st * a == b", "solution_func": "def g(a = 'id', b = 'xakid'):\n    return b[:int(len(b)/len(a))]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(n: int, nums=[3, 7, 11, 15], target=30) -> bool:\n    \"\"\"\n    Find a combination of numbers from the given list that sums up to the target number.\n    The combination must have exactly n numbers.\n    \"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, n):\n        if sum(combo) == target:\n            return True\n    return False\ndef g(nums=[3, 7, 11, 15], target=30):\n    for i in range(1, len(nums)+1):\n        if f(i, nums, target):\n            return [num for num in nums if num in g()]\n    return []\nassert f(g())\n", "emb": null, "idx_generation": 440, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, nums=[3, 7, 11, 15], target=30) -> bool:\n    \"\"\"\n    Find a combination of numbers from the given list that sums up to the target number.\n    The combination must have exactly n numbers.\n    \"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, n):\n        if sum(combo) == target:\n            return True\n    return False", "solution_func": "def g(nums=[3, 7, 11, 15], target=30):\n    for i in range(1, len(nums)+1):\n        if f(i, nums, target):\n            return [num for num in nums if num in g()]\n    return []", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Find a submatrix in a given matrix where the sum of all elements in the submatrix is equal to the target number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for start_row in range(rows):\n        for start_col in range(cols):\n            for end_row in range(start_row, rows):\n                for end_col in range(start_col, cols):\n                    submatrix_sum = sum(matrix[i][j] for i in range(start_row, end_row+1) for j in range(start_col, end_col+1))\n                    if submatrix_sum == target:\n                        return True\n    return False\ndef g(matrix: List[List[int]], target=0):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 440, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Find a submatrix in a given matrix where the sum of all elements in the submatrix is equal to the target number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for start_row in range(rows):\n        for start_col in range(cols):\n            for end_row in range(start_row, rows):\n                for end_col in range(start_col, cols):\n                    submatrix_sum = sum(matrix[i][j] for i in range(start_row, end_row+1) for j in range(start_col, end_col+1))\n                    if submatrix_sum == target:\n                        return True\n    return False", "solution_func": "def g(matrix: List[List[int]], target=0):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, pattern='abc') -> bool:\n    \"\"\"\n    Find if the given string has any substring that matches a given pattern.\n    \"\"\"\n    return pattern in s\ndef g(pattern='abc'):\n    s = 'defgabchijklmno'\n    return s\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 440, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, pattern='abc') -> bool:\n    \"\"\"\n    Find if the given string has any substring that matches a given pattern.\n    \"\"\"\n    return pattern in s", "solution_func": "def g(pattern='abc'):\n    s = 'defgabchijklmno'\n    return s", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    return any(target - x in arr for x in arr)\ndef g(arr = []):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 440, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    return any(target - x in arr for x in arr)", "solution_func": "def g(arr = []):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=29) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))\n    \ndef g(nums=[10, 15, 7, 22, 12]):\n    return nums\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 441, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=29) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))", "solution_func": "def g(nums=[10, 15, 7, 22, 12]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers in the list that adds up to the target\"\"\"\n    def backtrack(idx, curr_sum):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or idx >= len(nums):\n            return False\n        return backtrack(idx + 1, curr_sum) or backtrack(idx + 1, curr_sum + nums[idx])\n    \n    return backtrack(0, 0)\n\ndef g(nums=[10, 15, 20, 25, 30]):\n    return nums\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 441, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers in the list that adds up to the target\"\"\"\n    def backtrack(idx, curr_sum):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or idx >= len(nums):\n            return False\n        return backtrack(idx + 1, curr_sum) or backtrack(idx + 1, curr_sum + nums[idx])\n    \n    return backtrack(0, 0)", "solution_func": "def g(nums=[10, 15, 20, 25, 30]):\n    return nums", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Find a subarray in the list that adds up to the target\"\"\"\n    curr_sum = nums[0]\n    start = 0\n    \n    for i in range(1, len(nums)):\n        while curr_sum > target and start < i-1:\n            curr_sum -= nums[start]\n            start += 1\n        if curr_sum == target:\n            return True\n        curr_sum += nums[i]\n    \n    return curr_sum == target\n\ndef g(nums=[2, 4, 6, 8, 10]):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 441, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Find a subarray in the list that adds up to the target\"\"\"\n    curr_sum = nums[0]\n    start = 0\n    \n    for i in range(1, len(nums)):\n        while curr_sum > target and start < i-1:\n            curr_sum -= nums[start]\n            start += 1\n        if curr_sum == target:\n            return True\n        curr_sum += nums[i]\n    \n    return curr_sum == target", "solution_func": "def g(nums=[2, 4, 6, 8, 10]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if a target number is in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 5):\n    return matrix, target\nassert f(g()[0], g()[1])\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 441, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if a target number is in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 5):\n    return matrix, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums, target\nassert f(g()[0], g()[1])\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 441, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, target: str) -> bool:\n    \"\"\"Check if the target string is a substring of the given string\"\"\"\n    return target in string\ndef g(string = \"Hello, world!\", target = \"world\"):\n    return string, target\nassert f(g()[0], g()[1])\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 441, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, target: str) -> bool:\n    \"\"\"Check if the target string is a substring of the given string\"\"\"\n    return target in string", "solution_func": "def g(string = \"Hello, world!\", target = \"world\"):\n    return string, target", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Check Anagram\n\n    Given two lowercase alphabetic strings, determine if they are anagrams.\n\n    Example:\n    s = \"listen\"\n    t = \"silent\"\n    output: True\n    \"\"\"\n    return sorted(s) == sorted(t)\ndef g(s = \"listen\", t = \"silent\"):\n    return s, t\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 441, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Check Anagram\n\n    Given two lowercase alphabetic strings, determine if they are anagrams.\n\n    Example:\n    s = \"listen\"\n    t = \"silent\"\n    output: True\n    \"\"\"\n    return sorted(s) == sorted(t)", "solution_func": "def g(s = \"listen\", t = \"silent\"):\n    return s, t", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(a: int, b: int, c: int, d: int) -> bool:\n    \"\"\"\n    Check Coprime Quadruplet\n\n    Given four integers a, b, c, and d, determine if they form a coprime quadruplet.\n    A coprime quadruplet is a set of four integers where the greatest common divisor of any two of the four integers is 1.\n\n    Example:\n    a = 3\n    b = 5\n    c = 7\n    d = 9\n    output: True\n    \"\"\"\n    return gcd(a, b) == gcd(a, c) == gcd(a, d) == gcd(b, c) == gcd(b, d) == gcd(c, d) == 1\ndef g(a = 3, b = 5, c = 7, d = 9):\n    return a, b, c, d\nassert f(*g())\n", "emb": null, "idx_generation": 441, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(a: int, b: int, c: int, d: int) -> bool:\n    \"\"\"\n    Check Coprime Quadruplet\n\n    Given four integers a, b, c, and d, determine if they form a coprime quadruplet.\n    A coprime quadruplet is a set of four integers where the greatest common divisor of any two of the four integers is 1.\n\n    Example:\n    a = 3\n    b = 5\n    c = 7\n    d = 9\n    output: True\n    \"\"\"\n    return gcd(a, b) == gcd(a, c) == gcd(a, d) == gcd(b, c) == gcd(b, d) == gcd(c, d) == 1", "solution_func": "def g(a = 3, b = 5, c = 7, d = 9):\n    return a, b, c, d", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check Palindrome\n\n    Given a string s, determine if it is a palindrome.\n    A palindrome is a string that reads the same forwards and backwards.\n\n    Example:\n    s = \"racecar\"\n    output: True\n    \"\"\"\n    return s == s[::-1]\ndef g(s = \"racecar\"):\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 441, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check Palindrome\n\n    Given a string s, determine if it is a palindrome.\n    A palindrome is a string that reads the same forwards and backwards.\n\n    Example:\n    s = \"racecar\"\n    output: True\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g(s = \"racecar\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, num_elements=3) -> bool:\n    \"\"\"Find num_elements numbers in nums that add up to target\"\"\"\n    from itertools import combinations\n    return any(sum(combination) == target for combination in combinations(nums, num_elements))\ndef g(target = 10, num_elements = 3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 441, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, num_elements=3) -> bool:\n    \"\"\"Find num_elements numbers in nums that add up to target\"\"\"\n    from itertools import combinations\n    return any(sum(combination) == target for combination in combinations(nums, num_elements))", "solution_func": "def g(target = 10, num_elements = 3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, a=\"even\", b=\"odd\") -> bool:\n    \"\"\"Check if the string contains an equal number of even and odd digits\"\"\"\n    even_count = sum(1 for char in string if int(char) % 2 == 0)\n    odd_count = sum(1 for char in string if int(char) % 2 != 0)\n    return even_count == odd_count\ndef g(a = \"even\", b = \"odd\"):\n    return \"246813579\"\nassert f(g())\n", "emb": null, "idx_generation": 442, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, a=\"even\", b=\"odd\") -> bool:\n    \"\"\"Check if the string contains an equal number of even and odd digits\"\"\"\n    even_count = sum(1 for char in string if int(char) % 2 == 0)\n    odd_count = sum(1 for char in string if int(char) % 2 != 0)\n    return even_count == odd_count", "solution_func": "def g(a = \"even\", b = \"odd\"):\n    return \"246813579\"", "map_ix": null}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\ndef f(n: int, a=5, b=7) -> bool:\n    \"\"\"Check if the square root of n is between a and b\"\"\"\n    return a <= sqrt(n) <= b\ndef g(a = 5, b = 7):\n    return 36\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 442, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\ndef f(n: int, a=5, b=7) -> bool:\n    \"\"\"Check if the square root of n is between a and b\"\"\"\n    return a <= sqrt(n) <= b", "solution_func": "def g(a = 5, b = 7):\n    return 36", "map_ix": [0, 0, 0, 1, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], a=10, b=20) -> bool:\n    \"\"\"Check if all numbers in the list are within the range of a and b\"\"\"\n    return all(a <= n <= b for n in nums)\ndef g(a = 10, b = 20):\n    return [12, 15, 18, 21, 24]\nassert f(g())\n", "emb": null, "idx_generation": 442, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], a=10, b=20) -> bool:\n    \"\"\"Check if all numbers in the list are within the range of a and b\"\"\"\n    return all(a <= n <= b for n in nums)", "solution_func": "def g(a = 10, b = 20):\n    return [12, 15, 18, 21, 24]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=20) -> bool:\n    \"\"\"Find a pair of distinct numbers in the list that sum up to the target_sum.\"\"\"\n    return any((nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums))))\n    \ndef g(target_sum=20):\n    return list(range(1, target_sum//2 + 1)) + [target_sum]\n\nassert f(g())\n", "emb": null, "idx_generation": 442, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=20) -> bool:\n    \"\"\"Find a pair of distinct numbers in the list that sum up to the target_sum.\"\"\"\n    return any((nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g(target_sum=20):\n    return list(range(1, target_sum//2 + 1)) + [target_sum]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Find a row in the matrix whose sum is equal to the target_sum.\"\"\"\n    return any((sum(row) == target_sum for row in matrix))\n\ndef g(target_sum=100):\n    return [[target_sum]]\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 442, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Find a row in the matrix whose sum is equal to the target_sum.\"\"\"\n    return any((sum(row) == target_sum for row in matrix))", "solution_func": "def g(target_sum=100):\n    return [[target_sum]]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_num=7) -> bool:\n    \"\"\"Find two distinct numbers in the list whose product is equal to the target_num.\"\"\"\n    return any((nums[i] * nums[j] == target_num for i in range(len(nums)) for j in range(i+1, len(nums))))\n\ndef g(target_num=7):\n    return [1, target_num]\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 442, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_num=7) -> bool:\n    \"\"\"Find two distinct numbers in the list whose product is equal to the target_num.\"\"\"\n    return any((nums[i] * nums[j] == target_num for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g(target_num=7):\n    return [1, target_num]", "map_ix": [1, 1, 0, 0, 1, 1, 1, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0, k=2) -> bool:\n    \"\"\"Find k numbers in nums that sum up to target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))\ndef g(target = 0, k = 2):\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 442, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0, k=2) -> bool:\n    \"\"\"Find k numbers in nums that sum up to target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))", "solution_func": "def g(target = 0, k = 2):\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, target='aeiou', count=2) -> bool:\n    \"\"\"Check if the count of each character in target is present in string\"\"\"\n    from collections import Counter\n    string_count = Counter(string)\n    target_count = Counter(target)\n    return all(string_count[char] >= target_count[char] for char in target)\ndef g(target = 'aeiou', count = 2):\n    string = 'aaeeiioouu'\n    return string\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 442, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, target='aeiou', count=2) -> bool:\n    \"\"\"Check if the count of each character in target is present in string\"\"\"\n    from collections import Counter\n    string_count = Counter(string)\n    target_count = Counter(target)\n    return all(string_count[char] >= target_count[char] for char in target)", "solution_func": "def g(target = 'aeiou', count = 2):\n    string = 'aaeeiioouu'\n    return string", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0, k=2) -> bool:\n    \"\"\"Find k numbers in nums that sum up to target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))\ndef g(target = 0, k = 2):\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 442, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0, k=2) -> bool:\n    \"\"\"Find k numbers in nums that sum up to target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))", "solution_func": "def g(target = 0, k = 2):\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=5, m=3) -> bool:\n    \"\"\"\n    Given a string s, return True if there are exactly n occurrences of the letter 'a' and m occurrences of the letter 'b',\n    and False otherwise.\n    \"\"\"\n    return s.count('a') == n and s.count('b') == m\ndef g(n=5, m=3):\n    return 'a' * n + 'b' * m\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 442, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5, m=3) -> bool:\n    \"\"\"\n    Given a string s, return True if there are exactly n occurrences of the letter 'a' and m occurrences of the letter 'b',\n    and False otherwise.\n    \"\"\"\n    return s.count('a') == n and s.count('b') == m", "solution_func": "def g(n=5, m=3):\n    return 'a' * n + 'b' * m", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"\n    Find a sublist of li whose sum is equal to the target value.\n    \"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)+1):\n            if sum(li[i:j]) == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 443, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"\n    Find a sublist of li whose sum is equal to the target value.\n    \"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)+1):\n            if sum(li[i:j]) == target:\n                return True\n    return False", "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50]", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring=\"abc\") -> bool:\n    \"\"\"\n    Check if a given string contains the specified substring.\n    \"\"\"\n    return substring in s\n\ndef g(substring=\"abc\"):\n    return \"xyz\" + substring + \"def\"\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 443, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring=\"abc\") -> bool:\n    \"\"\"\n    Check if a given string contains the specified substring.\n    \"\"\"\n    return substring in s", "solution_func": "def g(substring=\"abc\"):\n    return \"xyz\" + substring + \"def\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(li: List[int], target=10) -> bool:\n    \"\"\"\n    Find if there are two numbers in the list whose sum is equal to the target.\n    \"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    li = random.sample(range(1, 10), 5)\n    return li\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 443, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(li: List[int], target=10) -> bool:\n    \"\"\"\n    Find if there are two numbers in the list whose sum is equal to the target.\n    \"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    li = random.sample(range(1, 10), 5)\n    return li", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string has exactly n vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = sum([1 for char in s if char.lower() in vowels])\n    return count == n\n\ndef g(n=3):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = ''.join([vowels[i % 5] for i in range(n)])\n    return s\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 443, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string has exactly n vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = sum([1 for char in s if char.lower() in vowels])\n    return count == n", "solution_func": "def g(n=3):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = ''.join([vowels[i % 5] for i in range(n)])\n    return s", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom datetime import datetime, timedelta\n\ndef f(dt: datetime, days=7) -> bool:\n    \"\"\"Check if the given date is exactly n days after the current date\"\"\"\n    current_date = datetime.now().date()\n    target_date = current_date + timedelta(days=days)\n    return dt.date() == target_date\n\ndef g(days=7):\n    current_date = datetime.now().date()\n    target_date = current_date + timedelta(days=days)\n    return datetime.combine(target_date, datetime.min.time())\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 443, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime, timedelta\n\ndef f(dt: datetime, days=7) -> bool:\n    \"\"\"Check if the given date is exactly n days after the current date\"\"\"\n    current_date = datetime.now().date()\n    target_date = current_date + timedelta(days=days)\n    return dt.date() == target_date", "solution_func": "def g(days=7):\n    current_date = datetime.now().date()\n    target_date = current_date + timedelta(days=days)\n    return datetime.combine(target_date, datetime.min.time())", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, a=2, b=11) -> bool:\n    \"\"\"Check if the given number is a perfect square\"\"\"\n    return sqrt(n) == int(sqrt(n))\n\ndef g(a=2, b=11):\n    return int((a + b) / 2) ** 2\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 443, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, a=2, b=11) -> bool:\n    \"\"\"Check if the given number is a perfect square\"\"\"\n    return sqrt(n) == int(sqrt(n))", "solution_func": "def g(a=2, b=11):\n    return int((a + b) / 2) ** 2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in arr that add up to target\"\"\"\n    return any((arr[i] + arr[j] + arr[k] == target for i in range(len(arr)) for j in range(i+1, len(arr)) for k in range(j+1, len(arr))))\ndef g(target=100):\n    return [i for i in range(target-98, target-1)] + [target+1]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 443, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in arr that add up to target\"\"\"\n    return any((arr[i] + arr[j] + arr[k] == target for i in range(len(arr)) for j in range(i+1, len(arr)) for k in range(j+1, len(arr))))", "solution_func": "def g(target=100):\n    return [i for i in range(target-98, target-1)] + [target+1]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Find the k largest numbers in nums\"\"\"\n    return sorted(nums)[-k:] == list(range(max(nums)-k+1, max(nums)+1))\ndef g(k=5):\n    return [i for i in range(k+1)] + [0, 1]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 443, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Find the k largest numbers in nums\"\"\"\n    return sorted(nums)[-k:] == list(range(max(nums)-k+1, max(nums)+1))", "solution_func": "def g(k=5):\n    return [i for i in range(k+1)] + [0, 1]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=1000) -> bool:\n    \"\"\"Find a pair of numbers in nums that add up to target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=1000):\n    return [i for i in range(target-999, target-1)] + [target+1]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 443, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=1000) -> bool:\n    \"\"\"Find a pair of numbers in nums that add up to target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g(target=1000):\n    return [i for i in range(target-999, target-1)] + [target+1]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=0) -> bool:\n    \"\"\"Find two numbers in the array that sum up to the target_sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=0):\n    return [1, 2, 3, 4, 5, 6, 7]\n\nassert f(g())\n", "emb": null, "idx_generation": 443, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=0) -> bool:\n    \"\"\"Find two numbers in the array that sum up to the target_sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(target_sum=0):\n    return [1, 2, 3, 4, 5, 6, 7]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[10, 15, 20, 25, 30], k=3) -> bool:\n    \"\"\"Check if the sum of the first n numbers in a list is greater than or equal to k.\"\"\"\n    return sum(nums[:n]) >= k\ndef g(nums=[10, 15, 20, 25, 30], k=3):\n    return sum(nums)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 444, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[10, 15, 20, 25, 30], k=3) -> bool:\n    \"\"\"Check if the sum of the first n numbers in a list is greater than or equal to k.\"\"\"\n    return sum(nums[:n]) >= k", "solution_func": "def g(nums=[10, 15, 20, 25, 30], k=3):\n    return sum(nums)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5], k=2) -> bool:\n    \"\"\"Check if the product of the first n numbers in a list is divisible by k.\"\"\"\n    product = 1\n    for i in range(n):\n        product *= nums[i]\n    return product % k == 0\ndef g(nums=[1, 2, 3, 4, 5], k=2):\n    return sum(nums)\nassert f(g())\n", "emb": null, "idx_generation": 444, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5], k=2) -> bool:\n    \"\"\"Check if the product of the first n numbers in a list is divisible by k.\"\"\"\n    product = 1\n    for i in range(n):\n        product *= nums[i]\n    return product % k == 0", "solution_func": "def g(nums=[1, 2, 3, 4, 5], k=2):\n    return sum(nums)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: list, k=10) -> bool:\n    \"\"\"Check if there are at least k numbers in a list greater than 0.\"\"\"\n    return len([n for n in nums if n > 0]) >= k\ndef g(nums=[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 444, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: list, k=10) -> bool:\n    \"\"\"Check if there are at least k numbers in a list greater than 0.\"\"\"\n    return len([n for n in nums if n > 0]) >= k", "solution_func": "def g(nums=[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, li=[2, 5, 8, 11, 14, 17, 20], target=33) -> bool:\n    \"\"\"Find the sum of three numbers in a list that equals a target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            for k in range(j+1, len(li)):\n                if li[i] + li[j] + li[k] == target:\n                    return True\n    return False\ndef g(li=[2, 5, 8, 11, 14, 17, 20], target=33):\n    return li\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 444, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, li=[2, 5, 8, 11, 14, 17, 20], target=33) -> bool:\n    \"\"\"Find the sum of three numbers in a list that equals a target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            for k in range(j+1, len(li)):\n                if li[i] + li[j] + li[k] == target:\n                    return True\n    return False", "solution_func": "def g(li=[2, 5, 8, 11, 14, 17, 20], target=33):\n    return li", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, li=[3, 7, 12, 15, 18, 21, 25], target=30) -> bool:\n    \"\"\"Find the product of two numbers in a list that equals a target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] * li[j] == target:\n                return True\n    return False\ndef g(li=[3, 7, 12, 15, 18, 21, 25], target=30):\n    return li\nassert f(g())\n", "emb": null, "idx_generation": 444, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, li=[3, 7, 12, 15, 18, 21, 25], target=30) -> bool:\n    \"\"\"Find the product of two numbers in a list that equals a target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] * li[j] == target:\n                return True\n    return False", "solution_func": "def g(li=[3, 7, 12, 15, 18, 21, 25], target=30):\n    return li", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, li=[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], target=\"banana\") -> bool:\n    \"\"\"Find the index of a string in a list. Any such index is fine.\"\"\"\n    return s in li\ndef g(li=[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], target=\"banana\"):\n    return li.index(target)\nassert f(g())\n", "emb": null, "idx_generation": 444, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, li=[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], target=\"banana\") -> bool:\n    \"\"\"Find the index of a string in a list. Any such index is fine.\"\"\"\n    return s in li", "solution_func": "def g(li=[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], target=\"banana\"):\n    return li.index(target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='abc', k=3) -> bool:\n    \"\"\"\n    Check if a given string contains at least k occurrences of a given substring.\n    \"\"\"\n    count = s.count(substr)\n    return count >= k\n\ndef g(substr='abc', k=3):\n    return substr * k\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 444, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='abc', k=3) -> bool:\n    \"\"\"\n    Check if a given string contains at least k occurrences of a given substring.\n    \"\"\"\n    count = s.count(substr)\n    return count >= k", "solution_func": "def g(substr='abc', k=3):\n    return substr * k", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Find if there exists a subset of a given array with a given sum.\n    \"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = True\n    for i in range(1, n+1):\n        for j in range(1, target+1):\n            if j < nums[i-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]]\n    return dp[n][target]\n\ndef g(nums=[1, 5, 11, 5]):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 444, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Find if there exists a subset of a given array with a given sum.\n    \"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = True\n    for i in range(1, n+1):\n        for j in range(1, target+1):\n            if j < nums[i-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]]\n    return dp[n][target]", "solution_func": "def g(nums=[1, 5, 11, 5]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"\n    Check if a given number is a product of any combination of a given set of prime numbers.\n    \"\"\"\n    prime_set = set(primes)\n    dp = [False] * (n+1)\n    dp[0] = True\n    for i in range(1, n+1):\n        for prime in primes:\n            if i - prime >= 0 and dp[i - prime]:\n                dp[i] = True\n                break\n    return dp[n]\n\ndef g(primes=[2, 3, 5, 7, 11, 13]):\n    return sum(primes)\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 444, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"\n    Check if a given number is a product of any combination of a given set of prime numbers.\n    \"\"\"\n    prime_set = set(primes)\n    dp = [False] * (n+1)\n    dp[0] = True\n    for i in range(1, n+1):\n        for prime in primes:\n            if i - prime >= 0 and dp[i - prime]:\n                dp[i] = True\n                break\n    return dp[n]", "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13]):\n    return sum(primes)", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, s2='abcde') -> bool:\n    \"\"\"Check if s is a substring of s2\"\"\"\n    return s in s2\ndef g(s2 = 'abcde'):\n    return s2[::-1]\nassert f(g())\n", "emb": null, "idx_generation": 444, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, s2='abcde') -> bool:\n    \"\"\"Check if s is a substring of s2\"\"\"\n    return s in s2", "solution_func": "def g(s2 = 'abcde'):\n    return s2[::-1]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"\n    Find if there exists k elements in the list nums that add up to the target.\n    \"\"\"\n    def helper(nums, target, k, start):\n        if k == 0 and target == 0:\n            return True\n        if k < 0 or target < 0:\n            return False\n        for i in range(start, len(nums)):\n            if helper(nums, target - nums[i], k - 1, i + 1):\n                return True\n        return False\n\n    return helper(nums, target, k, 0)\n\ndef g(nums: List[int], target: int, k: int = 3):\n    return nums, target, k\n\nassert f(g())\n", "emb": null, "idx_generation": 445, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"\n    Find if there exists k elements in the list nums that add up to the target.\n    \"\"\"\n    def helper(nums, target, k, start):\n        if k == 0 and target == 0:\n            return True\n        if k < 0 or target < 0:\n            return False\n        for i in range(start, len(nums)):\n            if helper(nums, target - nums[i], k - 1, i + 1):\n                return True\n        return False\n\n    return helper(nums, target, k, 0)", "solution_func": "def g(nums: List[int], target: int, k: int = 3):\n    return nums, target, k", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(nums: List[int], target: int, k: int = 4) -> bool:\n    \"\"\"\n    Find if there exists k elements in the list nums that form a permutation with a sum equal to the target.\n    \"\"\"\n    for perm in permutations(nums, k):\n        if sum(perm) == target:\n            return True\n    return False\n\ndef g(nums: List[int], target: int, k: int = 4):\n    return nums, target, k\n\nassert f(g())\n", "emb": null, "idx_generation": 445, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(nums: List[int], target: int, k: int = 4) -> bool:\n    \"\"\"\n    Find if there exists k elements in the list nums that form a permutation with a sum equal to the target.\n    \"\"\"\n    for perm in permutations(nums, k):\n        if sum(perm) == target:\n            return True\n    return False", "solution_func": "def g(nums: List[int], target: int, k: int = 4):\n    return nums, target, k", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int, k: int = 2) -> bool:\n    \"\"\"\n    Find if there exists k elements in the list nums that form a product equal to the target.\n    \"\"\"\n    def helper(nums, target, k, start):\n        if k == 0 and target == 1:\n            return True\n        if k < 0 or target < 1:\n            return False\n        for i in range(start, len(nums)):\n            if target % nums[i] == 0 and helper(nums, target // nums[i], k - 1, i + 1):\n                return True\n        return False\n\n    return helper(nums, target, k, 0)\n\ndef g(nums: List[int], target: int, k: int = 2):\n    return nums, target, k\n\nassert f(g())\n", "emb": null, "idx_generation": 445, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, k: int = 2) -> bool:\n    \"\"\"\n    Find if there exists k elements in the list nums that form a product equal to the target.\n    \"\"\"\n    def helper(nums, target, k, start):\n        if k == 0 and target == 1:\n            return True\n        if k < 0 or target < 1:\n            return False\n        for i in range(start, len(nums)):\n            if target % nums[i] == 0 and helper(nums, target // nums[i], k - 1, i + 1):\n                return True\n        return False\n\n    return helper(nums, target, k, 0)", "solution_func": "def g(nums: List[int], target: int, k: int = 2):\n    return nums, target, k", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, n=3, m=3) -> bool:\n    \"\"\"Check if matrix is symmetric\"\"\"\n    return np.array_equal(matrix, matrix.T)\n    \ndef g(n=3, m=3):\n    matrix = np.random.randint(0, 10, size=(n, m))\n    return matrix + matrix.T\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 445, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, n=3, m=3) -> bool:\n    \"\"\"Check if matrix is symmetric\"\"\"\n    return np.array_equal(matrix, matrix.T)", "solution_func": "def g(n=3, m=3):\n    matrix = np.random.randint(0, 10, size=(n, m))\n    return matrix + matrix.T", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, p='g') -> bool:\n    \"\"\"Check if the given string ends with the given character\"\"\"\n    return s.endswith(p)\n\ndef g(p='g'):\n    s = 'Hello World'\n    s += p\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 445, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, p='g') -> bool:\n    \"\"\"Check if the given string ends with the given character\"\"\"\n    return s.endswith(p)", "solution_func": "def g(p='g'):\n    s = 'Hello World'\n    s += p\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=3, b=5) -> bool:\n    \"\"\"Check if a number is divisible by both a and b\"\"\"\n    return n % a == 0 and n % b == 0\n\ndef g(a=3, b=5):\n    n = math.lcm(a, b)\n    return n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 445, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=3, b=5) -> bool:\n    \"\"\"Check if a number is divisible by both a and b\"\"\"\n    return n % a == 0 and n % b == 0", "solution_func": "def g(a=3, b=5):\n    n = math.lcm(a, b)\n    return n", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(word: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a word contains all the vowels\"\"\"\n    return all(v in word for v in vowels)\ndef g(word=''):\n    return word\nassert f(g())\n", "emb": null, "idx_generation": 445, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a word contains all the vowels\"\"\"\n    return all(v in word for v in vowels)", "solution_func": "def g(word=''):\n    return word", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], threshold=50) -> bool:\n    \"\"\"Check if all numbers in a list are divisible by a given threshold\"\"\"\n    return all(n % threshold == 0 for n in nums)\ndef g(nums=[]):\n    return nums\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 445, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], threshold=50) -> bool:\n    \"\"\"Check if all numbers in a list are divisible by a given threshold\"\"\"\n    return all(n % threshold == 0 for n in nums)", "solution_func": "def g(nums=[]):\n    return nums", "map_ix": [1, 1, 0, 1, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_max=20, col_max=10) -> bool:\n    \"\"\"Check if all elements in a matrix are less than or equal to the given row and column maximum\"\"\"\n    return all(all(element <= row_max for element in row) for row in matrix) and all(all(element <= col_max for row in matrix) for element in zip(*matrix))\ndef g(matrix=[[]]):\n    return matrix\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 445, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row_max=20, col_max=10) -> bool:\n    \"\"\"Check if all elements in a matrix are less than or equal to the given row and column maximum\"\"\"\n    return all(all(element <= row_max for element in row) for row in matrix) and all(all(element <= col_max for row in matrix) for element in zip(*matrix))", "solution_func": "def g(matrix=[[]]):\n    return matrix", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int, n: int = 2) -> bool:\n    \"\"\"Find n distinct integers from a list that sum up to a target number\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target\ndef g(target: int = 10, n: int = 2):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # A simple brute-force approach to find n distinct integers that sum up to target\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [nums[i], nums[j]]\nassert f(g())\n", "emb": null, "idx_generation": 445, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, n: int = 2) -> bool:\n    \"\"\"Find n distinct integers from a list that sum up to a target number\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target", "solution_func": "def g(target: int = 10, n: int = 2):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # A simple brute-force approach to find n distinct integers that sum up to target\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [nums[i], nums[j]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=10) -> bool:\n    \"\"\"\n    Find an array where the sum of each row is equal to the target value\n    \"\"\"\n    row_sum = np.sum(arr, axis=1)\n    return np.all(row_sum == target)\n\ndef g(target=10):\n    return np.full((3, 4), target // 4)\n\nassert f(g())\n", "emb": null, "idx_generation": 446, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=10) -> bool:\n    \"\"\"\n    Find an array where the sum of each row is equal to the target value\n    \"\"\"\n    row_sum = np.sum(arr, axis=1)\n    return np.all(row_sum == target)", "solution_func": "def g(target=10):\n    return np.full((3, 4), target // 4)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(num: int, digits=3) -> bool:\n    \"\"\"\n    Find a number whose square root has the specified number of digits\n    \"\"\"\n    return len(str(math.isqrt(num))) == digits\n\ndef g(digits=3):\n    return int(\"1\" + \"0\" * (digits - 1)) ** 2\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 446, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(num: int, digits=3) -> bool:\n    \"\"\"\n    Find a number whose square root has the specified number of digits\n    \"\"\"\n    return len(str(math.isqrt(num))) == digits", "solution_func": "def g(digits=3):\n    return int(\"1\" + \"0\" * (digits - 1)) ** 2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Find a list of integers whose sum is equal to the target value\n    \"\"\"\n    return sum(nums) == target\n\ndef g(target=100):\n    nums = []\n    while sum(nums) < target:\n        nums.append(random.randint(1, 10))\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 446, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Find a list of integers whose sum is equal to the target value\n    \"\"\"\n    return sum(nums) == target", "solution_func": "def g(target=100):\n    nums = []\n    while sum(nums) < target:\n        nums.append(random.randint(1, 10))\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the array that sum up to the target\n    \"\"\"\n    return any(target - x in arr for x in arr)\n    \ndef g(length: int = 10, target: int = 8):\n    \"\"\"\n    Generate a list of random integers of given length\n    \"\"\"\n    return random.sample(range(10), length)\n    \nassert f(g(), 8)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 446, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the array that sum up to the target\n    \"\"\"\n    return any(target - x in arr for x in arr)", "solution_func": "def g(length: int = 10, target: int = 8):\n    \"\"\"\n    Generate a list of random integers of given length\n    \"\"\"\n    return random.sample(range(10), length)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Check if a given string is a substring of the target string\n    \"\"\"\n    return s in target\n    \ndef g(target: str = \"Hello, World!\"):\n    \"\"\"\n    Return a random substring of the target string\n    \"\"\"\n    start = random.randint(0, len(target)-1)\n    end = random.randint(start+1, len(target))\n    return target[start:end]\n    \nassert f(g(), \"Hello, World!\")\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 446, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Check if a given string is a substring of the target string\n    \"\"\"\n    return s in target", "solution_func": "def g(target: str = \"Hello, World!\"):\n    \"\"\"\n    Return a random substring of the target string\n    \"\"\"\n    start = random.randint(0, len(target)-1)\n    end = random.randint(start+1, len(target))\n    return target[start:end]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport math\n\ndef f(n: int, target: int) -> bool:\n    \"\"\"\n    Check if a number is a perfect square and its square root is equal to the target\n    \"\"\"\n    return math.isqrt(n)**2 == n and math.isqrt(n) == target\n    \ndef g(target: int = 4):\n    \"\"\"\n    Generate a random perfect square number\n    \"\"\"\n    return random.randint(1, 10)**2\n    \nassert f(g(), 4)\n", "emb": null, "idx_generation": 446, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport math\n\ndef f(n: int, target: int) -> bool:\n    \"\"\"\n    Check if a number is a perfect square and its square root is equal to the target\n    \"\"\"\n    return math.isqrt(n)**2 == n and math.isqrt(n) == target", "solution_func": "def g(target: int = 4):\n    \"\"\"\n    Generate a random perfect square number\n    \"\"\"\n    return random.randint(1, 10)**2", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], k=3, target=7) -> bool:\n    \"\"\"Find a sublist of length k with a sum equal to the target\"\"\"\n    for i in range(len(nums) - k + 1):\n        if sum(nums[i:i+k]) == target:\n            return True\n    return False\ndef g(k=3, target=7):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 446, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=3, target=7) -> bool:\n    \"\"\"Find a sublist of length k with a sum equal to the target\"\"\"\n    for i in range(len(nums) - k + 1):\n        if sum(nums[i:i+k]) == target:\n            return True\n    return False", "solution_func": "def g(k=3, target=7):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"Find the number of occurrences of the target in a given matrix\"\"\"\n    count = 0\n    for row in matrix:\n        count += row.count(target)\n    return count\ndef g(target=8):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 446, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"Find the number of occurrences of the target in a given matrix\"\"\"\n    count = 0\n    for row in matrix:\n        count += row.count(target)\n    return count", "solution_func": "def g(target=8):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Find the indices of pairs of numbers that sum up to the target\"\"\"\n    indices = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                indices.append((i, j))\n    return indices\ndef g(target=0):\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return lst\nassert f(g())\n", "emb": null, "idx_generation": 446, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Find the indices of pairs of numbers that sum up to the target\"\"\"\n    indices = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                indices.append((i, j))\n    return indices", "solution_func": "def g(target=0):\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return lst", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(numbers: List[int], target: int, start=0, end=None) -> bool:\n    \"\"\"Check if a target number can be found by summing a subarray of numbers\"\"\"\n    if end is None:\n        end = len(numbers) - 1\n    if start > end:\n        return False\n    if start == end:\n        return numbers[start] == target\n    mid = (start + end) // 2\n    if numbers[mid] == target:\n        return True\n    if numbers[mid] < target:\n        return f(numbers, target, mid + 1, end)\n    else:\n        return f(numbers, target, start, mid - 1)\ndef g(numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 15):\n    return numbers\nassert f(g(), 15)\n", "emb": null, "idx_generation": 446, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target: int, start=0, end=None) -> bool:\n    \"\"\"Check if a target number can be found by summing a subarray of numbers\"\"\"\n    if end is None:\n        end = len(numbers) - 1\n    if start > end:\n        return False\n    if start == end:\n        return numbers[start] == target\n    mid = (start + end) // 2\n    if numbers[mid] == target:\n        return True\n    if numbers[mid] < target:\n        return f(numbers, target, mid + 1, end)\n    else:\n        return f(numbers, target, start, mid - 1)", "solution_func": "def g(numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 15):\n    return numbers", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, threshold=0.5) -> bool:\n    \"\"\"\n    Check if the average of all elements in the given 2D numpy array is greater than the threshold.\n    \"\"\"\n    return np.mean(arr) > threshold\n\ndef g(arr: np.ndarray, threshold=0.5):\n    \"\"\"\n    Generate a 2D numpy array of shape (5, 5) with random values between 0 and 1.\n    \"\"\"\n    return np.random.rand(5, 5)\n\nassert f(g())\n", "emb": null, "idx_generation": 447, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, threshold=0.5) -> bool:\n    \"\"\"\n    Check if the average of all elements in the given 2D numpy array is greater than the threshold.\n    \"\"\"\n    return np.mean(arr) > threshold", "solution_func": "def g(arr: np.ndarray, threshold=0.5):\n    \"\"\"\n    Generate a 2D numpy array of shape (5, 5) with random values between 0 and 1.\n    \"\"\"\n    return np.random.rand(5, 5)", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport datetime\n\ndef f(year: int, month: int, day: int) -> bool:\n    \"\"\"\n    Check if the given date is a weekend.\n    \"\"\"\n    date = datetime.date(year, month, day)\n    return date.weekday() >= 5\n\ndef g(year=2022, month=10, day=1):\n    \"\"\"\n    Generate a random date within the range of 2000-2022.\n    \"\"\"\n    start_date = datetime.date(2000, 1, 1)\n    end_date = datetime.date(2022, 12, 31)\n    random_date = start_date + datetime.timedelta(days=np.random.randint((end_date - start_date).days + 1))\n    return random_date.year, random_date.month, random_date.day\n\nassert f(*g())\n", "emb": null, "idx_generation": 447, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport datetime\n\ndef f(year: int, month: int, day: int) -> bool:\n    \"\"\"\n    Check if the given date is a weekend.\n    \"\"\"\n    date = datetime.date(year, month, day)\n    return date.weekday() >= 5", "solution_func": "def g(year=2022, month=10, day=1):\n    \"\"\"\n    Generate a random date within the range of 2000-2022.\n    \"\"\"\n    start_date = datetime.date(2000, 1, 1)\n    end_date = datetime.date(2022, 12, 31)\n    random_date = start_date + datetime.timedelta(days=np.random.randint((end_date - start_date).days + 1))\n    return random_date.year, random_date.month, random_date.day", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport math\n\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Check if the given values represent the sides of a right triangle.\n    \"\"\"\n    sides = sorted([a, b, c])\n    return math.isclose(sides[0] ** 2 + sides[1] ** 2, sides[2] ** 2)\n\ndef g(a=3, b=4, c=5):\n    \"\"\"\n    Generate three random integers to represent the sides of a triangle.\n    \"\"\"\n    return np.random.randint(1, 10, size=3)\n\nassert f(*g())\n", "emb": null, "idx_generation": 447, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport math\n\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Check if the given values represent the sides of a right triangle.\n    \"\"\"\n    sides = sorted([a, b, c])\n    return math.isclose(sides[0] ** 2 + sides[1] ** 2, sides[2] ** 2)", "solution_func": "def g(a=3, b=4, c=5):\n    \"\"\"\n    Generate three random integers to represent the sides of a triangle.\n    \"\"\"\n    return np.random.randint(1, 10, size=3)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(num_list: List[int], target=30) -> bool:\n    \"\"\"Check if the sum of any two numbers in num_list is equal to the target\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False\n\ndef g(num_list=[10, 20, 15, 5]):\n    return num_list\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 447, "target_skills": null, "problem_func": "from typing import*\ndef f(num_list: List[int], target=30) -> bool:\n    \"\"\"Check if the sum of any two numbers in num_list is equal to the target\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False", "solution_func": "def g(num_list=[10, 20, 15, 5]):\n    return num_list", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if any row or column in the matrix has a sum equal to the target\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    \n    for col in range(len(matrix[0])):\n        col_sum = 0\n        for row in matrix:\n            col_sum += row[col]\n        if col_sum == target:\n            return True\n    \n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 447, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if any row or column in the matrix has a sum equal to the target\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    \n    for col in range(len(matrix[0])):\n        col_sum = 0\n        for row in matrix:\n            col_sum += row[col]\n        if col_sum == target:\n            return True\n    \n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(num_list: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in num_list that add up to the target\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            for k in range(j+1, len(num_list)):\n                if num_list[i] + num_list[j] + num_list[k] == target:\n                    return True\n    return False\n\ndef g(num_list=[25, 30, 10, 20, 15]):\n    return num_list\n\nassert f(g())\n", "emb": null, "idx_generation": 447, "target_skills": null, "problem_func": "from typing import*\ndef f(num_list: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in num_list that add up to the target\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            for k in range(j+1, len(num_list)):\n                if num_list[i] + num_list[j] + num_list[k] == target:\n                    return True\n    return False", "solution_func": "def g(num_list=[25, 30, 10, 20, 15]):\n    return num_list", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if a given substring exists in a string.\"\"\"\n    return substr in s\n\ndef g(substr='python'):\n    s = \"I love programming in python!\"\n    return s\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 447, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if a given substring exists in a string.\"\"\"\n    return substr in s", "solution_func": "def g(substr='python'):\n    s = \"I love programming in python!\"\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of integers in a given list that sum up to the target value.\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 447, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of integers in a given list that sum up to the target value.\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if a target value exists in a given matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=0):\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 447, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if a target value exists in a given matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(target=0):\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, x: List[int]) -> bool:\n    \"\"\"Check if the list has exactly n elements and all elements are divisible by n\"\"\"\n    return len(x) == n and all([a % n == 0 for a in x])\n    \ndef g(n: int):\n    \"\"\"Generate a list of n elements where each element is n\"\"\"\n    return [n] * n\n\nassert f(n=5, x=g(n=5))\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 447, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(n: int, x: List[int]) -> bool:\n    \"\"\"Check if the list has exactly n elements and all elements are divisible by n\"\"\"\n    return len(x) == n and all([a % n == 0 for a in x])", "solution_func": "def g(n: int):\n    \"\"\"Generate a list of n elements where each element is n\"\"\"\n    return [n] * n", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    from itertools import combinations\n    for pair in combinations(nums, 2):\n        if sum(pair) == target:\n            return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5], target=0):\n    return nums, target\nassert f(g())\n", "emb": null, "idx_generation": 448, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    from itertools import combinations\n    for pair in combinations(nums, 2):\n        if sum(pair) == target:\n            return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=0):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=0):\n    return matrix, target\nassert f(g())\n", "emb": null, "idx_generation": 448, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=0):\n    return matrix, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if the sum of any three numbers in the list is equal to the target\"\"\"\n    from itertools import combinations\n    for triple in combinations(nums, 3):\n        if sum(triple) == target:\n            return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5], target=0):\n    return nums, target\nassert f(g())\n", "emb": null, "idx_generation": 448, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if the sum of any three numbers in the list is equal to the target\"\"\"\n    from itertools import combinations\n    for triple in combinations(nums, 3):\n        if sum(triple) == target:\n            return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=0):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that add up to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 448, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that add up to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"Check if any word in the list has a length equal to the target_length.\"\"\"\n    return any(len(word) == target_length for word in words)\ndef g(words=[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]):\n    return words\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 448, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"Check if any word in the list has a length equal to the target_length.\"\"\"\n    return any(len(word) == target_length for word in words)", "solution_func": "def g(words=[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]):\n    return words", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_num=0) -> bool:\n    \"\"\"Check if the target_num is present in the matrix.\"\"\"\n    for row in matrix:\n        if target_num in row:\n            return True\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 448, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_num=0) -> bool:\n    \"\"\"Check if the target_num is present in the matrix.\"\"\"\n    for row in matrix:\n        if target_num in row:\n            return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=7, b=13, c=19) -> bool:\n    \"\"\"Find n that satisfies the equation n^2 + an + b = c\"\"\"\n    return n**2 + a*n + b == c\ndef g(a=7, b=13, c=19):\n    return c - a*b\nassert f(g())\n", "emb": null, "idx_generation": 448, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=7, b=13, c=19) -> bool:\n    \"\"\"Find n that satisfies the equation n^2 + an + b = c\"\"\"\n    return n**2 + a*n + b == c", "solution_func": "def g(a=7, b=13, c=19):\n    return c - a*b", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=5, b=7, c=11) -> bool:\n    \"\"\"Find n that satisfies the equation (n+a)(n+b) = c\"\"\"\n    return (n+a)*(n+b) == c\ndef g(a=5, b=7, c=11):\n    return c//(a+b)\nassert f(g())\n", "emb": null, "idx_generation": 448, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=5, b=7, c=11) -> bool:\n    \"\"\"Find n that satisfies the equation (n+a)(n+b) = c\"\"\"\n    return (n+a)*(n+b) == c", "solution_func": "def g(a=5, b=7, c=11):\n    return c//(a+b)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=3, b=5) -> bool:\n    \"\"\"Check if n is a perfect square and the square root of n is divisible by a\"\"\"\n    return math.isqrt(n)**2 == n and math.isqrt(n) % a == 0\ndef g(a=3, b=5):\n    return (a * b)**2\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 448, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=3, b=5) -> bool:\n    \"\"\"Check if n is a perfect square and the square root of n is divisible by a\"\"\"\n    return math.isqrt(n)**2 == n and math.isqrt(n) % a == 0", "solution_func": "def g(a=3, b=5):\n    return (a * b)**2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the array that sum up to the target.\"\"\"\n    return any(target - num in arr for num in arr)\ndef g(target = 0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g(), target=15)\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 448, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the array that sum up to the target.\"\"\"\n    return any(target - num in arr for num in arr)", "solution_func": "def g(target = 0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"Determine if there exists a subset that sums up to the target\"\"\"\n    def subsetSum(nums, target):\n        if target == 0:\n            return True\n        if target < 0 or len(nums) == 0:\n            return False\n        return subsetSum(nums[1:], target - nums[0]) or subsetSum(nums[1:], target)\n\n    return subsetSum(nums, target) == n\ndef g(nums=[1, 2, 3, 4, 5], target=10):\n    return int(subsetSum(nums, target))\ndef subsetSum(nums, target):\n    if target == 0:\n        return True\n    if target < 0 or len(nums) == 0:\n        return False\n    return subsetSum(nums[1:], target - nums[0]) or subsetSum(nums[1:], target)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 449, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"Determine if there exists a subset that sums up to the target\"\"\"\n    def subsetSum(nums, target):\n        if target == 0:\n            return True\n        if target < 0 or len(nums) == 0:\n            return False\n        return subsetSum(nums[1:], target - nums[0]) or subsetSum(nums[1:], target)\n\n    return subsetSum(nums, target) == n", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=10):\n    return int(subsetSum(nums, target))\ndef subsetSum(nums, target):\n    if target == 0:\n        return True\n    if target < 0 or len(nums) == 0:\n        return False\n    return subsetSum(nums[1:], target - nums[0]) or subsetSum(nums[1:], target)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"Determine if there exists a subset that sums up to the target\"\"\"\n    def subsetSum(nums, target):\n        if target == 0:\n            return True\n        if target < 0 or len(nums) == 0:\n            return False\n        return subsetSum(nums[1:], target - nums[0]) or subsetSum(nums[1:], target)\n\n    return subsetSum(nums, target) != n\ndef g(nums=[1, 2, 3, 4, 5], target=10):\n    return int(subsetSum(nums, target))\ndef subsetSum(nums, target):\n    if target == 0:\n        return True\n    if target < 0 or len(nums) == 0:\n        return False\n    return subsetSum(nums[1:], target - nums[0]) or subsetSum(nums[1:], target)\nassert f(g())\n", "emb": null, "idx_generation": 449, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"Determine if there exists a subset that sums up to the target\"\"\"\n    def subsetSum(nums, target):\n        if target == 0:\n            return True\n        if target < 0 or len(nums) == 0:\n            return False\n        return subsetSum(nums[1:], target - nums[0]) or subsetSum(nums[1:], target)\n\n    return subsetSum(nums, target) != n", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=10):\n    return int(subsetSum(nums, target))\ndef subsetSum(nums, target):\n    if target == 0:\n        return True\n    if target < 0 or len(nums) == 0:\n        return False\n    return subsetSum(nums[1:], target - nums[0]) or subsetSum(nums[1:], target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"Determine if there exists a subset that sums up to the target\"\"\"\n    def subsetSum(nums, target):\n        if target == 0:\n            return True\n        if target < 0 or len(nums) == 0:\n            return False\n        return subsetSum(nums[1:], target - nums[0]) or subsetSum(nums[1:], target)\n\n    return subsetSum(nums, target) == n\ndef g(nums=[1, 2, 3, 4, 5], target=10):\n    return int(subsetSum(nums, target))\ndef subsetSum(nums, target):\n    if target == 0:\n        return True\n    if target < 0 or len(nums) == 0:\n        return False\n    return subsetSum(nums[1:], target - nums[0]) or subsetSum(nums[1:], target)\nassert not f(g())\n\nassert f(g()) == True", "emb": null, "idx_generation": 449, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"Determine if there exists a subset that sums up to the target\"\"\"\n    def subsetSum(nums, target):\n        if target == 0:\n            return True\n        if target < 0 or len(nums) == 0:\n            return False\n        return subsetSum(nums[1:], target - nums[0]) or subsetSum(nums[1:], target)\n\n    return subsetSum(nums, target) == n", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=10):\n    return int(subsetSum(nums, target))\ndef subsetSum(nums, target):\n    if target == 0:\n        return True\n    if target < 0 or len(nums) == 0:\n        return False\n    return subsetSum(nums[1:], target - nums[0]) or subsetSum(nums[1:], target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"\n    Find if the given string s contains n consecutive digits.\n\n    Example:\n    s = \"abc123def\"\n    n = 3\n    output: True\n    \"\"\"\n    for i in range(len(s) - n + 1):\n        if s[i:i+n].isdigit():\n            return True\n    return False\n    \ndef g(s = \"abc123def\", n = 3):\n    for i in range(len(s) - n + 1):\n        if s[i:i+n].isdigit():\n            return True\n    return False\n    \nassert f(g())\n", "emb": null, "idx_generation": 449, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"\n    Find if the given string s contains n consecutive digits.\n\n    Example:\n    s = \"abc123def\"\n    n = 3\n    output: True\n    \"\"\"\n    for i in range(len(s) - n + 1):\n        if s[i:i+n].isdigit():\n            return True\n    return False", "solution_func": "def g(s = \"abc123def\", n = 3):\n    for i in range(len(s) - n + 1):\n        if s[i:i+n].isdigit():\n            return True\n    return False", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], k=2) -> bool:\n    \"\"\"\n    Find if there exists two numbers in the given array arr that sum up to k.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    k = 7\n    output: True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == k:\n                return True\n    return False\n    \ndef g(arr = [1, 2, 3, 4, 5], k = 7):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == k:\n                return True\n    return False\n    \nassert f(g())\n", "emb": null, "idx_generation": 449, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], k=2) -> bool:\n    \"\"\"\n    Find if there exists two numbers in the given array arr that sum up to k.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    k = 7\n    output: True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == k:\n                return True\n    return False", "solution_func": "def g(arr = [1, 2, 3, 4, 5], k = 7):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == k:\n                return True\n    return False", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"\n    Find if the given number n is divisible by m.\n\n    Example:\n    n = 25\n    m = 5\n    output: True\n    \"\"\"\n    return n % m == 0\n    \ndef g(n = 25, m = 5):\n    return n % m == 0\n    \nassert f(g())\n", "emb": null, "idx_generation": 449, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"\n    Find if the given number n is divisible by m.\n\n    Example:\n    n = 25\n    m = 5\n    output: True\n    \"\"\"\n    return n % m == 0", "solution_func": "def g(n = 25, m = 5):\n    return n % m == 0", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], target_sum=25) -> bool:\n    \"\"\"Check if any two numbers in the list x add up to the target_sum\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target_sum:\n                return True\n    return False\ndef g(x = [10, 15, 5, 8, 12]):\n    return x\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 449, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], target_sum=25) -> bool:\n    \"\"\"Check if any two numbers in the list x add up to the target_sum\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(x = [10, 15, 5, 8, 12]):\n    return x", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, target_num=7) -> bool:\n    \"\"\"Check if x is divisible by the target_num\"\"\"\n    return x % target_num == 0\ndef g(target_num = 7):\n    x = 49\n    return x\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 449, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, target_num=7) -> bool:\n    \"\"\"Check if x is divisible by the target_num\"\"\"\n    return x % target_num == 0", "solution_func": "def g(target_num = 7):\n    x = 49\n    return x", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: str, target_char='e') -> bool:\n    \"\"\"Check if the target_char appears in the string x\"\"\"\n    return target_char in x\ndef g(target_char = 'e'):\n    x = \"Hello, World!\"\n    return x\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 449, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str, target_char='e') -> bool:\n    \"\"\"Check if the target_char appears in the string x\"\"\"\n    return target_char in x", "solution_func": "def g(target_char = 'e'):\n    x = \"Hello, World!\"\n    return x", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(total: int, numbers: List[int]) -> bool:\n    \"\"\"Check if there are three numbers in the list whose sum is equal to the total.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == total:\n                    return True\n    return False\n\ndef g(numbers = [1, 2, 3, 4, 5]):\n    return sum(numbers)\n    \nassert f(g(), g(arg1=[1, 2, 3, 4, 5]))\n", "emb": null, "idx_generation": 449, "target_skills": null, "problem_func": "from typing import*\ndef f(total: int, numbers: List[int]) -> bool:\n    \"\"\"Check if there are three numbers in the list whose sum is equal to the total.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == total:\n                    return True\n    return False", "solution_func": "def g(numbers = [1, 2, 3, 4, 5]):\n    return sum(numbers)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target = 15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 450, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(target = 15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string contains exactly n vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count == n\ndef g(n = 3):\n    return \"aeiou\" * n\nassert f(g())\n", "emb": null, "idx_generation": 450, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string contains exactly n vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count == n", "solution_func": "def g(n = 3):\n    return \"aeiou\" * n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target = 25):\n    return [10, 5, 15, 20]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 450, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target = 25):\n    return [10, 5, 15, 20]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to a given target.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(target=10):\n    return [i for i in range(1, target) if target - i in range(1, target)]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 450, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to a given target.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))", "solution_func": "def g(target=10):\n    return [i for i in range(1, target) if target - i in range(1, target)]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Find the kth smallest number in the list.\"\"\"\n    return sorted(nums)[k - 1] == min(nums)\ndef g(k=3):\n    return [i for i in range(1, k + 1)]\nassert f(g())\n", "emb": null, "idx_generation": 450, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Find the kth smallest number in the list.\"\"\"\n    return sorted(nums)[k - 1] == min(nums)", "solution_func": "def g(k=3):\n    return [i for i in range(1, k + 1)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom collections import Counter\n\ndef f(s: str, n=2) -> bool:\n    \"\"\"Check if a given string contains at least n anagrams of a certain substring.\"\"\"\n    substring = s[:n]\n    substring_counts = Counter(substring)\n    for i in range(n, len(s)):\n        current_substring = s[i - n + 1:i + 1]\n        current_counts = Counter(current_substring)\n        if current_counts == substring_counts:\n            return True\n    return False\n\ndef g(n=2):\n    return \"ab\" * n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 450, "target_skills": null, "problem_func": "from typing import*\nfrom collections import Counter\n\ndef f(s: str, n=2) -> bool:\n    \"\"\"Check if a given string contains at least n anagrams of a certain substring.\"\"\"\n    substring = s[:n]\n    substring_counts = Counter(substring)\n    for i in range(n, len(s)):\n        current_substring = s[i - n + 1:i + 1]\n        current_counts = Counter(current_substring)\n        if current_counts == substring_counts:\n            return True\n    return False", "solution_func": "def g(n=2):\n    return \"ab\" * n", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: str, target='banana') -> bool:\n    \"\"\"Check if x is a palindrome\"\"\"\n    return x == x[::-1]\ndef g(target='banana'):\n    return target[::-1]\nassert f(g())\n", "emb": null, "idx_generation": 450, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str, target='banana') -> bool:\n    \"\"\"Check if x is a palindrome\"\"\"\n    return x == x[::-1]", "solution_func": "def g(target='banana'):\n    return target[::-1]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Check if there is a pair of numbers in x that adds up to the target\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False\ndef g(target=100):\n    return list(range(1, target+1))\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 450, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Check if there is a pair of numbers in x that adds up to the target\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False", "solution_func": "def g(target=100):\n    return list(range(1, target+1))", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='abc', n=3) -> bool:\n    \"\"\"Check if s contains n consecutive occurrences of the target string\"\"\"\n    return s.count(target * n) > 0\ndef g(target='abc', n=3):\n    return target * n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 450, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='abc', n=3) -> bool:\n    \"\"\"Check if s contains n consecutive occurrences of the target string\"\"\"\n    return s.count(target * n) > 0", "solution_func": "def g(target='abc', n=3):\n    return target * n", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum: int) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g(nums: List[int], target_sum: int):\n    return nums, target_sum\n\nassert f(g())\n", "emb": null, "idx_generation": 450, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum: int) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(nums: List[int], target_sum: int):\n    return nums, target_sum", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, axis=0) -> bool:\n    \"\"\"\n    Check if the sum of each column (default) or row in a 2D numpy array is equal to the number of columns (default) or rows.\n    \"\"\"\n    return np.sum(arr, axis=axis) == arr.shape[axis]\ndef g(arr=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), axis=0):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 451, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, axis=0) -> bool:\n    \"\"\"\n    Check if the sum of each column (default) or row in a 2D numpy array is equal to the number of columns (default) or rows.\n    \"\"\"\n    return np.sum(arr, axis=axis) == arr.shape[axis]", "solution_func": "def g(arr=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), axis=0):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"\n    Check if a given string contains a specific substring in a case-insensitive manner.\n    \"\"\"\n    return substring.lower() in s.lower()\ndef g(substring='python'):\n    return 'Python is a programming language'\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 451, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"\n    Check if a given string contains a specific substring in a case-insensitive manner.\n    \"\"\"\n    return substring.lower() in s.lower()", "solution_func": "def g(substring='python'):\n    return 'Python is a programming language'", "map_ix": [0, 0, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exist two elements in a list of integers whose sum equals a given target.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 451, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exist two elements in a list of integers whose sum equals a given target.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that adds up to the target\"\"\"\n    def dfs(nums, target, path, res):\n        if target == 0:\n            res.append(path)\n            return\n        if target < 0:\n            return\n        for i in range(len(nums)):\n            dfs(nums[i+1:], target-nums[i], path+[nums[i]], res)\n    \n    res = []\n    dfs(numbers, target, [], res)\n    return len(res) > 0\n\ndef g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": null, "idx_generation": 451, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that adds up to the target\"\"\"\n    def dfs(nums, target, path, res):\n        if target == 0:\n            res.append(path)\n            return\n        if target < 0:\n            return\n        for i in range(len(nums)):\n            dfs(nums[i+1:], target-nums[i], path+[nums[i]], res)\n    \n    res = []\n    dfs(numbers, target, [], res)\n    return len(res) > 0", "solution_func": "def g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(sentence: str, word='puzzle', k=3) -> bool:\n    \"\"\"Find the kth appearance of word in the sentence\"\"\"\n    appearances = []\n    words = sentence.split()\n    for i in range(len(words)):\n        if words[i] == word:\n            appearances.append(i+1)\n    return len(appearances) >= k and appearances[k-1] % 2 == 0\n\ndef g(word='puzzle', k=3):\n    return \"This puzzle is a good puzzle to solve the puzzle.\"\n\nassert f(g())\n", "emb": null, "idx_generation": 451, "target_skills": null, "problem_func": "from typing import*\ndef f(sentence: str, word='puzzle', k=3) -> bool:\n    \"\"\"Find the kth appearance of word in the sentence\"\"\"\n    appearances = []\n    words = sentence.split()\n    for i in range(len(words)):\n        if words[i] == word:\n            appearances.append(i+1)\n    return len(appearances) >= k and appearances[k-1] % 2 == 0", "solution_func": "def g(word='puzzle', k=3):\n    return \"This puzzle is a good puzzle to solve the puzzle.\"", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a path from the top-left corner to the bottom-right corner of the matrix that sums up to the target\"\"\"\n    def dfs(matrix, row, col, target, path, result):\n        if row == len(matrix) - 1 and col == len(matrix[0]) - 1:\n            if sum(path) == target:\n                result.append(path)\n            return\n        if row < len(matrix) - 1:\n            dfs(matrix, row + 1, col, target, path + [matrix[row+1][col]], result)\n        if col < len(matrix[0]) - 1:\n            dfs(matrix, row, col + 1, target, path + [matrix[row][col+1]], result)\n    \n    result = []\n    dfs(matrix, 0, 0, target, [matrix[0][0]], result)\n    return len(result) > 0\n\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n", "emb": null, "idx_generation": 451, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a path from the top-left corner to the bottom-right corner of the matrix that sums up to the target\"\"\"\n    def dfs(matrix, row, col, target, path, result):\n        if row == len(matrix) - 1 and col == len(matrix[0]) - 1:\n            if sum(path) == target:\n                result.append(path)\n            return\n        if row < len(matrix) - 1:\n            dfs(matrix, row + 1, col, target, path + [matrix[row+1][col]], result)\n        if col < len(matrix[0]) - 1:\n            dfs(matrix, row, col + 1, target, path + [matrix[row][col+1]], result)\n    \n    result = []\n    dfs(matrix, 0, 0, target, [matrix[0][0]], result)\n    return len(result) > 0", "solution_func": "def g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, num=10) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return math.isqrt(n)**2 == n and (0 < n <= num)\n\ndef g(num=10):\n    return num**2\n\nassert f(g())\n", "emb": null, "idx_generation": 451, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, num=10) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return math.isqrt(n)**2 == n and (0 < n <= num)", "solution_func": "def g(num=10):\n    return num**2", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if a word is a palindrome.\"\"\"\n    return s == s[::-1] and word == 'python'\n\ndef g(word='python'):\n    return word[::-1]\n\nassert f(g())\n", "emb": null, "idx_generation": 451, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if a word is a palindrome.\"\"\"\n    return s == s[::-1] and word == 'python'", "solution_func": "def g(word='python'):\n    return word[::-1]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there are three numbers in a list that add up to a target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 451, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there are three numbers in a list that add up to a target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], text=\"Hello world, how are you?\") -> bool:\n    \"\"\"Check if all the words in the given list are present in the given text.\"\"\"\n    return all(word in text for word in words)\ndef g(text=\"Hello world, how are you?\"):\n    return text.split()\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 451, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], text=\"Hello world, how are you?\") -> bool:\n    \"\"\"Check if all the words in the given list are present in the given text.\"\"\"\n    return all(word in text for word in words)", "solution_func": "def g(text=\"Hello world, how are you?\"):\n    return text.split()", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=3, c='a') -> bool:\n    \"\"\"Check if the character c appears n times in the string s\"\"\"\n    return s.count(c) == n\ndef g(n = 3, c = 'a'):\n    return c * n + \"b\" + c * (n - 1)\nassert f(g())\n", "emb": null, "idx_generation": 452, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3, c='a') -> bool:\n    \"\"\"Check if the character c appears n times in the string s\"\"\"\n    return s.count(c) == n", "solution_func": "def g(n = 3, c = 'a'):\n    return c * n + \"b\" + c * (n - 1)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the sum of the digits of n is equal to the number of times 'a' appears in the string s\"\"\"\n    return sum(map(int, str(n))) == s.count('a')\ndef g(n = 5):\n    return str(n) * n\nassert f(g())\n", "emb": null, "idx_generation": 452, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the sum of the digits of n is equal to the number of times 'a' appears in the string s\"\"\"\n    return sum(map(int, str(n))) == s.count('a')", "solution_func": "def g(n = 5):\n    return str(n) * n", "map_ix": null}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(s: str, n=10) -> bool:\n    \"\"\"Check if the sum of the square roots of the first n prime numbers is equal to the length of string s\"\"\"\n    primes = [2]\n    i = 3\n    while len(primes) < n:\n        if all(i % p != 0 for p in primes):\n            primes.append(i)\n        i += 2\n    return sum(map(sqrt, primes)) == len(s)\ndef g(n = 10):\n    return ''.join(str(i) for i in range(n))\nassert f(g())\n", "emb": null, "idx_generation": 452, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(s: str, n=10) -> bool:\n    \"\"\"Check if the sum of the square roots of the first n prime numbers is equal to the length of string s\"\"\"\n    primes = [2]\n    i = 3\n    while len(primes) < n:\n        if all(i % p != 0 for p in primes):\n            primes.append(i)\n        i += 2\n    return sum(map(sqrt, primes)) == len(s)", "solution_func": "def g(n = 10):\n    return ''.join(str(i) for i in range(n))", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if the given string is present in the list and its length is even.\"\"\"\n    return s in strings and len(s) % 2 == 0\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return strings[2]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 452, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if the given string is present in the list and its length is even.\"\"\"\n    return s in strings and len(s) % 2 == 0", "solution_func": "def g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return strings[2]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is divisible by all the elements in the list.\"\"\"\n    return all(n % num == 0 for num in numbers)\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return numbers[3]\nassert f(g())\n", "emb": null, "idx_generation": 452, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is divisible by all the elements in the list.\"\"\"\n    return all(n % num == 0 for num in numbers)", "solution_func": "def g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return numbers[3]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n: int, strings=['apple', 'banana', 'cherry', 'date', 'elderberry'], numbers=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the given string is present in the list and if the given number is divisible by all the elements in the list.\"\"\"\n    return s in strings and all(n % num == 0 for num in numbers)\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry'], numbers=[1, 2, 3, 4, 5]):\n    return strings[4], numbers[2]\nassert f(*g())\n", "emb": null, "idx_generation": 452, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int, strings=['apple', 'banana', 'cherry', 'date', 'elderberry'], numbers=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the given string is present in the list and if the given number is divisible by all the elements in the list.\"\"\"\n    return s in strings and all(n % num == 0 for num in numbers)", "solution_func": "def g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry'], numbers=[1, 2, 3, 4, 5]):\n    return strings[4], numbers[2]", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(n: int, a=12345) -> bool:\n    \"\"\"Check if a number is divisible by a given number.\"\"\"\n    return n % a == 0\ndef g(a = 12345):\n    import random\n    return a * random.randint(1, 100)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 452, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(n: int, a=12345) -> bool:\n    \"\"\"Check if a number is divisible by a given number.\"\"\"\n    return n % a == 0", "solution_func": "def g(a = 12345):\n    import random\n    return a * random.randint(1, 100)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(n: int, a=50, b=100) -> bool:\n    \"\"\"Check if a number is within a specific range.\"\"\"\n    return a <= n <= b\ndef g(a = 50, b = 100):\n    import random\n    return random.randint(a, b)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 452, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(n: int, a=50, b=100) -> bool:\n    \"\"\"Check if a number is within a specific range.\"\"\"\n    return a <= n <= b", "solution_func": "def g(a = 50, b = 100):\n    import random\n    return random.randint(a, b)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(s: str, a='hello') -> bool:\n    \"\"\"Check if a string starts with a specific substring.\"\"\"\n    return s.startswith(a)\ndef g(a = 'hello'):\n    import random\n    words = ['hello', 'world', 'python', 'programming']\n    return random.choice(words)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 452, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(s: str, a='hello') -> bool:\n    \"\"\"Check if a string starts with a specific substring.\"\"\"\n    return s.startswith(a)", "solution_func": "def g(a = 'hello'):\n    import random\n    words = ['hello', 'world', 'python', 'programming']\n    return random.choice(words)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, x: int, y: int, z: int, a=189, b=718, c=394, d=829) -> bool:\n    \"\"\"\n    Given four integers a, b, c, and d, find a sequence of n consecutive integers such that the sum\n    of the first x integers, the sum of the next y integers, and the sum of the last z integers are\n    all divisible by a, b, and c respectively, and the sum of all n integers is divisible by d.\n    \"\"\"\n    seq_sum = sum(range(n))\n    first_sum = sum(range(x))\n    second_sum = sum(range(x, x+y))\n    last_sum = sum(range(x+y, x+y+z))\n\n    return (first_sum % a == 0) and (second_sum % b == 0) and (last_sum % c == 0) and (seq_sum % d == 0)\n\ndef g(n: int, x: int, y: int, z: int, a=189, b=718, c=394, d=829):\n    seq = list(range(n))\n    seq_sum = sum(seq)\n    first_sum = sum(seq[:x])\n    second_sum = sum(seq[x:x+y])\n    last_sum = sum(seq[x+y:x+y+z])\n\n    for i in range(n):\n        if (first_sum + i) % a == 0 and (second_sum + i) % b == 0 and (last_sum + i) % c == 0:\n            seq[i] += i\n\n    return seq\n\nassert f(g())\n", "emb": null, "idx_generation": 452, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, x: int, y: int, z: int, a=189, b=718, c=394, d=829) -> bool:\n    \"\"\"\n    Given four integers a, b, c, and d, find a sequence of n consecutive integers such that the sum\n    of the first x integers, the sum of the next y integers, and the sum of the last z integers are\n    all divisible by a, b, and c respectively, and the sum of all n integers is divisible by d.\n    \"\"\"\n    seq_sum = sum(range(n))\n    first_sum = sum(range(x))\n    second_sum = sum(range(x, x+y))\n    last_sum = sum(range(x+y, x+y+z))\n\n    return (first_sum % a == 0) and (second_sum % b == 0) and (last_sum % c == 0) and (seq_sum % d == 0)", "solution_func": "def g(n: int, x: int, y: int, z: int, a=189, b=718, c=394, d=829):\n    seq = list(range(n))\n    seq_sum = sum(seq)\n    first_sum = sum(seq[:x])\n    second_sum = sum(seq[x:x+y])\n    last_sum = sum(seq[x+y:x+y+z])\n\n    for i in range(n):\n        if (first_sum + i) % a == 0 and (second_sum + i) % b == 0 and (last_sum + i) % c == 0:\n            seq[i] += i\n\n    return seq", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Find if the target number exists in the matrix.\n    \"\"\"\n    return any(target in row for row in matrix)\ndef g(target = 0):\n    \"\"\"\n    Generate a matrix with numbers from 1 to 9.\n    \"\"\"\n    matrix = [[i for i in range(1, 4)] for _ in range(3)]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 453, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Find if the target number exists in the matrix.\n    \"\"\"\n    return any(target in row for row in matrix)", "solution_func": "def g(target = 0):\n    \"\"\"\n    Generate a matrix with numbers from 1 to 9.\n    \"\"\"\n    matrix = [[i for i in range(1, 4)] for _ in range(3)]\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Find if there exists two numbers in the list that sum up to the target.\n    \"\"\"\n    return any(target - num in nums for num in nums)\ndef g(target = 0):\n    \"\"\"\n    Generate a list of numbers from 1 to 10.\n    \"\"\"\n    return [i for i in range(1, 11)]\nassert f(g())\n", "emb": null, "idx_generation": 453, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Find if there exists two numbers in the list that sum up to the target.\n    \"\"\"\n    return any(target - num in nums for num in nums)", "solution_func": "def g(target = 0):\n    \"\"\"\n    Generate a list of numbers from 1 to 10.\n    \"\"\"\n    return [i for i in range(1, 11)]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Find if there exists three numbers in the list that sum up to the target.\n    \"\"\"\n    return any(target - num1 - num2 in nums for num1 in nums for num2 in nums)\ndef g(target = 0):\n    \"\"\"\n    Generate a list of numbers from 1 to 10.\n    \"\"\"\n    return [i for i in range(1, 11)]\nassert f(g())\n", "emb": null, "idx_generation": 453, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Find if there exists three numbers in the list that sum up to the target.\n    \"\"\"\n    return any(target - num1 - num2 in nums for num1 in nums for num2 in nums)", "solution_func": "def g(target = 0):\n    \"\"\"\n    Generate a list of numbers from 1 to 10.\n    \"\"\"\n    return [i for i in range(1, 11)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target_sum=100) -> bool:\n    \"\"\"\n    Given a list of integers, find a subset of the list that sums up to the target_sum.\n    \"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    \n    return subset_sum(li, target_sum)\n    \ndef g(target_sum=100):\n    return list(range(1, target_sum//2 + 1))\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 453, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target_sum=100) -> bool:\n    \"\"\"\n    Given a list of integers, find a subset of the list that sums up to the target_sum.\n    \"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    \n    return subset_sum(li, target_sum)", "solution_func": "def g(target_sum=100):\n    return list(range(1, target_sum//2 + 1))", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Given a list of numbers, find the maximum sum of any contiguous subarray of the list.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for num in li:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum\n\ndef g():\n    return [1, -3, 2, 1, -1, 4, -2, 3]\n\nassert f(g())\n", "emb": null, "idx_generation": 453, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Given a list of numbers, find the maximum sum of any contiguous subarray of the list.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for num in li:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum", "solution_func": "def g():\n    return [1, -3, 2, 1, -1, 4, -2, 3]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, find the length of the longest increasing subsequence in the list.\n    \"\"\"\n    n = len(li)\n    if n == 0:\n        return 0\n\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if li[i] > li[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)\n\ndef g():\n    return [10, 22, 9, 33, 21, 50, 41, 60, 80]\n\nassert f(g())\n", "emb": null, "idx_generation": 453, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, find the length of the longest increasing subsequence in the list.\n    \"\"\"\n    n = len(li)\n    if n == 0:\n        return 0\n\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if li[i] > li[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)", "solution_func": "def g():\n    return [10, 22, 9, 33, 21, 50, 41, 60, 80]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, char='a') -> bool:\n    \"\"\"Check if a given character appears at least twice in a string.\"\"\"\n    return string.count(char) >= 2\ndef g(char='a'):\n    return f'This is a sample string with the character {char}'\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 453, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, char='a') -> bool:\n    \"\"\"Check if a given character appears at least twice in a string.\"\"\"\n    return string.count(char) >= 2", "solution_func": "def g(char='a'):\n    return f'This is a sample string with the character {char}'", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], n=100) -> bool:\n    \"\"\"Find a pair of numbers whose sum is equal to n.\"\"\"\n    return any((nums[i] + nums[j] == n for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(n=100):\n    return list(range(n))\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 453, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], n=100) -> bool:\n    \"\"\"Find a pair of numbers whose sum is equal to n.\"\"\"\n    return any((nums[i] + nums[j] == n for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g(n=100):\n    return list(range(n))", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=5) -> bool:\n    \"\"\"Check if there exists a submatrix of size 2x2 whose sum is equal to n.\"\"\"\n    for i in range(len(matrix)-1):\n        for j in range(len(matrix[0])-1):\n            if matrix[i][j] + matrix[i][j+1] + matrix[i+1][j] + matrix[i+1][j+1] == n:\n                return True\n    return False\ndef g(n=5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 453, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=5) -> bool:\n    \"\"\"Check if there exists a submatrix of size 2x2 whose sum is equal to n.\"\"\"\n    for i in range(len(matrix)-1):\n        for j in range(len(matrix[0])-1):\n            if matrix[i][j] + matrix[i][j+1] + matrix[i+1][j] + matrix[i+1][j+1] == n:\n                return True\n    return False", "solution_func": "def g(n=5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Find Two Numbers\n\n    Given a list of numbers, find two numbers that sum up to a target number.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n    output: True\n    \"\"\"\n    return any((i + j == target for i in nums for j in nums if i != j))\ndef g(nums=[1, 2, 3, 4, 5], target=10):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 453, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Find Two Numbers\n\n    Given a list of numbers, find two numbers that sum up to a target number.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n    output: True\n    \"\"\"\n    return any((i + j == target for i in nums for j in nums if i != j))", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=10):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int], a=10, b=100, count=5) -> bool:\n    \"\"\"Find a list of count or more numbers between a and b that are perfect squares\"\"\"\n    assert all((math.isqrt(n)**2 == n and a <= n <= b for n in nums))\n    return len(nums) >= count\n\ndef g(a=10, b=100, count=5):\n    return [n for n in range(a, b+1) if math.isqrt(n)**2 == n]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 454, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(nums: List[int], a=10, b=100, count=5) -> bool:\n    \"\"\"Find a list of count or more numbers between a and b that are perfect squares\"\"\"\n    assert all((math.isqrt(n)**2 == n and a <= n <= b for n in nums))\n    return len(nums) >= count", "solution_func": "def g(a=10, b=100, count=5):\n    return [n for n in range(a, b+1) if math.isqrt(n)**2 == n]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=42) -> bool:\n    \"\"\"Find a list of numbers that sum up to the target\"\"\"\n    return sum(nums) == target\n\ndef g(target=42):\n    nums = []\n    while sum(nums) < target:\n        nums.append(random.randint(1, 10))\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 454, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target=42) -> bool:\n    \"\"\"Find a list of numbers that sum up to the target\"\"\"\n    return sum(nums) == target", "solution_func": "def g(target=42):\n    nums = []\n    while sum(nums) < target:\n        nums.append(random.randint(1, 10))\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if any row or column in a matrix sums up to the target\"\"\"\n    matrix = np.array(matrix)\n    rows = np.sum(matrix, axis=1)\n    cols = np.sum(matrix, axis=0)\n    return target in rows or target in cols\n\ndef g(target=0):\n    rows = random.randint(2, 5)\n    cols = random.randint(2, 5)\n    matrix = [[random.randint(-10, 10) for _ in range(cols)] for _ in range(rows)]\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 454, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if any row or column in a matrix sums up to the target\"\"\"\n    matrix = np.array(matrix)\n    rows = np.sum(matrix, axis=1)\n    cols = np.sum(matrix, axis=0)\n    return target in rows or target in cols", "solution_func": "def g(target=0):\n    rows = random.randint(2, 5)\n    cols = random.randint(2, 5)\n    matrix = [[random.randint(-10, 10) for _ in range(cols)] for _ in range(rows)]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 13\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 454, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g():\n    return 13", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Check if a string is a rotation of another string.\"\"\"\n    if len(s) != len(t):\n        return False\n    return t in s + s\n\ndef g():\n    return ('abc', 'bca')\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 454, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Check if a string is a rotation of another string.\"\"\"\n    if len(s) != len(t):\n        return False\n    return t in s + s", "solution_func": "def g():\n    return ('abc', 'bca')", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    sqrt = int(n ** 0.5)\n    return sqrt ** 2 == n\n\ndef g():\n    return 16\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 454, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    sqrt = int(n ** 0.5)\n    return sqrt ** 2 == n", "solution_func": "def g():\n    return 16", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 454, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False", "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, t='racecar') -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == t[::-1]\ndef g(t='racecar'):\n    return t\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 454, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t='racecar') -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == t[::-1]", "solution_func": "def g(t='racecar'):\n    return t", "map_ix": [1, 1, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=7) -> bool:\n    \"\"\"Check if the target number is in the matrix\"\"\"\n    for row in matrix:\n        for num in row:\n            if num == target:\n                return True\n    return False\ndef g(target=7):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 454, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=7) -> bool:\n    \"\"\"Check if the target number is in the matrix\"\"\"\n    for row in matrix:\n        for num in row:\n            if num == target:\n                return True\n    return False", "solution_func": "def g(target=7):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(num: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"\n    Check if a given number is divisible by all the numbers in a given list.\n\n    Sample Input:\n    num = 60\n\n    Sample Output:\n    True\n    \"\"\"\n    for n in nums:\n        if num % n != 0:\n            return False\n    return True\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    num = 1\n    for n in nums:\n        num *= n\n    return num\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 454, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"\n    Check if a given number is divisible by all the numbers in a given list.\n\n    Sample Input:\n    num = 60\n\n    Sample Output:\n    True\n    \"\"\"\n    for n in nums:\n        if num % n != 0:\n            return False\n    return True", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    num = 1\n    for n in nums:\n        num *= n\n    return num", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target: str = 'python') -> bool:\n    \"\"\"Check if the given string is a palindrome and contains the target string.\"\"\"\n    return s == s[::-1] and target in s\ndef g(target: str = 'python'):\n    return target + target[::-1]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 455, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: str = 'python') -> bool:\n    \"\"\"Check if the given string is a palindrome and contains the target string.\"\"\"\n    return s == s[::-1] and target in s", "solution_func": "def g(target: str = 'python'):\n    return target + target[::-1]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"Find a subset of numbers whose sum is equal to the target.\"\"\"\n    from itertools import combinations\n    for n in range(len(nums) + 1):\n        for c in combinations(nums, n):\n            if sum(c) == target:\n                return True\n    return False\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 455, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"Find a subset of numbers whose sum is equal to the target.\"\"\"\n    from itertools import combinations\n    for n in range(len(nums) + 1):\n        for c in combinations(nums, n):\n            if sum(c) == target:\n                return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(dic: Dict[str, int]) -> bool:\n    \"\"\"Check if all the values in the dictionary are even numbers.\"\"\"\n    return all(v % 2 == 0 for v in dic.values())\ndef g():\n    return {'a': 2, 'b': 4, 'c': 6}\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 455, "target_skills": null, "problem_func": "from typing import*\ndef f(dic: Dict[str, int]) -> bool:\n    \"\"\"Check if all the values in the dictionary are even numbers.\"\"\"\n    return all(v % 2 == 0 for v in dic.values())", "solution_func": "def g():\n    return {'a': 2, 'b': 4, 'c': 6}", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target = 16):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 455, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g(target = 16):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, word='racecar') -> bool:\n    \"\"\"Check if the given word is a palindrome\"\"\"\n    return s == s[::-1]\ndef g(word = 'racecar'):\n    return word\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 455, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, word='racecar') -> bool:\n    \"\"\"Check if the given word is a palindrome\"\"\"\n    return s == s[::-1]", "solution_func": "def g(word = 'racecar'):\n    return word", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Check if there are exactly n numbers in the list that are divisible by 2\"\"\"\n    return len([num for num in nums if num % 2 == 0]) == n\ndef g(n = 3):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 455, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Check if there are exactly n numbers in the list that are divisible by 2\"\"\"\n    return len([num for num in nums if num % 2 == 0]) == n", "solution_func": "def g(n = 3):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7]) -> bool:\n    \"\"\"\n    Check if a number is present in a list.\n    \"\"\"\n    return n in nums\ndef g(nums=[1, 2, 3, 4, 5, 6, 7]):\n    return nums[0]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 455, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7]) -> bool:\n    \"\"\"\n    Check if a number is present in a list.\n    \"\"\"\n    return n in nums", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7]):\n    return nums[0]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, char='a', count=2) -> bool:\n    \"\"\"\n    Check if a given character appears a certain number of times in a string.\n    \"\"\"\n    return s.count(char) == count\ndef g(char='a', count=2):\n    return char * count\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 455, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, char='a', count=2) -> bool:\n    \"\"\"\n    Check if a given character appears a certain number of times in a string.\n    \"\"\"\n    return s.count(char) == count", "solution_func": "def g(char='a', count=2):\n    return char * count", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7]) -> bool:\n    \"\"\"\n    Check if the sum of any two numbers in a list equals a given number.\n    \"\"\"\n    return any((n - x) in nums for x in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7]):\n    return nums[0] + nums[1]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 455, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7]) -> bool:\n    \"\"\"\n    Check if the sum of any two numbers in a list equals a given number.\n    \"\"\"\n    return any((n - x) in nums for x in nums)", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7]):\n    return nums[0] + nums[1]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 455, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=10, b=5) -> bool:\n    \"\"\"Check if the sum of two numbers is divisible by a third number\"\"\"\n    return (a + b) % n == 0\ndef g(a=10, b=5, n=3):\n    return n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 456, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=10, b=5) -> bool:\n    \"\"\"Check if the sum of two numbers is divisible by a third number\"\"\"\n    return (a + b) % n == 0", "solution_func": "def g(a=10, b=5, n=3):\n    return n", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if a given character is present in a string\"\"\"\n    return char in s\ndef g(s='Hello World', char='o'):\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 456, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if a given character is present in a string\"\"\"\n    return char in s", "solution_func": "def g(s='Hello World', char='o'):\n    return s", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\ndef f(n: int, a=5, b=4) -> bool:\n    \"\"\"Determine if the square root of the sum of two numbers is equal to the given number\"\"\"\n    return math.sqrt(a + b) == n\ndef g(a=5, b=4, n=3):\n    return n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 456, "target_skills": null, "problem_func": "from typing import*\nimport math\ndef f(n: int, a=5, b=4) -> bool:\n    \"\"\"Determine if the square root of the sum of two numbers is equal to the given number\"\"\"\n    return math.sqrt(a + b) == n", "solution_func": "def g(a=5, b=4, n=3):\n    return n", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, m=2, k=3) -> bool:\n    \"\"\"Check if the sum of the first m positive integers raised to the power of k is equal to n\"\"\"\n    return sum([i**k for i in range(1, m+1)]) == n\n\ndef g(m=2, k=3):\n    return int(math.pow(sum(range(1, m+1)), k))\n\nassert f(g())\n", "emb": null, "idx_generation": 456, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, m=2, k=3) -> bool:\n    \"\"\"Check if the sum of the first m positive integers raised to the power of k is equal to n\"\"\"\n    return sum([i**k for i in range(1, m+1)]) == n", "solution_func": "def g(m=2, k=3):\n    return int(math.pow(sum(range(1, m+1)), k))", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: list, target=5) -> bool:\n    \"\"\"Check if there exists two distinct elements in arr whose sum is equal to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=5):\n    return list(range(1, target+1))\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 456, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: list, target=5) -> bool:\n    \"\"\"Check if there exists two distinct elements in arr whose sum is equal to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(target=5):\n    return list(range(1, target+1))", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: list, target=0) -> bool:\n    \"\"\"Check if there exists any three elements in arr whose sum is equal to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=0):\n    return [0]*3\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 456, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: list, target=0) -> bool:\n    \"\"\"Check if there exists any three elements in arr whose sum is equal to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False", "solution_func": "def g(target=0):\n    return [0]*3", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=0.1, b=0.2) -> bool:\n    \"\"\"Check if two circles intersect\"\"\"\n    distance = math.sqrt((x - a) ** 2 + (y - b) ** 2)\n    return distance <= z\ndef g(x=0.1, y=0.2, z=0.3):\n    return x, y, z\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 456, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=0.1, b=0.2) -> bool:\n    \"\"\"Check if two circles intersect\"\"\"\n    distance = math.sqrt((x - a) ** 2 + (y - b) ** 2)\n    return distance <= z", "solution_func": "def g(x=0.1, y=0.2, z=0.3):\n    return x, y, z", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if the target number is in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5):\n    return matrix, target\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 456, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if the target number is in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5):\n    return matrix, target", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, t: str, c=0) -> bool:\n    \"\"\"Check if string s can be transformed into string t by changing exactly one character\"\"\"\n    if len(s) != len(t):\n        return False\n    for i in range(len(s)):\n        if s[i] != t[i]:\n            c += 1\n    return c == 1\ndef g(s=\"abc\", t=\"abd\"):\n    return s, t\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 456, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t: str, c=0) -> bool:\n    \"\"\"Check if string s can be transformed into string t by changing exactly one character\"\"\"\n    if len(s) != len(t):\n        return False\n    for i in range(len(s)):\n        if s[i] != t[i]:\n            c += 1\n    return c == 1", "solution_func": "def g(s=\"abc\", t=\"abd\"):\n    return s, t", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Find a row in the matrix that sums up to the target value\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False\ndef g(n=3, target=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 456, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Find a row in the matrix that sums up to the target value\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False", "solution_func": "def g(n=3, target=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=4, m=7) -> bool:\n    \"\"\"Check if a string has n or more occurrences of a substring of length m\"\"\"\n    return sum(s.count(s[i:i+m]) for i in range(len(s)-m+1)) >= n\ndef g(n=4, m=7):\n    s = \"abababababab\"\n    return s\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 457, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=4, m=7) -> bool:\n    \"\"\"Check if a string has n or more occurrences of a substring of length m\"\"\"\n    return sum(s.count(s[i:i+m]) for i in range(len(s)-m+1)) >= n", "solution_func": "def g(n=4, m=7):\n    s = \"abababababab\"\n    return s", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, n=3) -> bool:\n    \"\"\"Check if a matrix has a diagonal with all elements equal to n\"\"\"\n    return any(np.all(np.diag(matrix) == n)) or any(np.all(np.diag(np.fliplr(matrix)) == n))\ndef g(n=3):\n    matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 457, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, n=3) -> bool:\n    \"\"\"Check if a matrix has a diagonal with all elements equal to n\"\"\"\n    return any(np.all(np.diag(matrix) == n)) or any(np.all(np.diag(np.fliplr(matrix)) == n))", "solution_func": "def g(n=3):\n    matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(d: datetime, weekday=3) -> bool:\n    \"\"\"Check if a given date is on the specified weekday\"\"\"\n    return d.weekday() == weekday\ndef g(weekday=3):\n    d = datetime(2022, 1, 5)\n    return d\nassert f(g())\n", "emb": null, "idx_generation": 457, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(d: datetime, weekday=3) -> bool:\n    \"\"\"Check if a given date is on the specified weekday\"\"\"\n    return d.weekday() == weekday", "solution_func": "def g(weekday=3):\n    d = datetime(2022, 1, 5)\n    return d", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if a string contains k consecutive vowels.\"\"\"\n\n    def is_vowel(c: str) -> bool:\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        return c.lower() in vowels\n\n    count = 0\n    for i in range(len(s)):\n        if is_vowel(s[i]):\n            count += 1\n            if count == k:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(k=3):\n    s = \"aabbceiouuddde\"\n    return s\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 457, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if a string contains k consecutive vowels.\"\"\"\n\n    def is_vowel(c: str) -> bool:\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        return c.lower() in vowels\n\n    count = 0\n    for i in range(len(s)):\n        if is_vowel(s[i]):\n            count += 1\n            if count == k:\n                return True\n        else:\n            count = 0\n    return False", "solution_func": "def g(k=3):\n    s = \"aabbceiouuddde\"\n    return s", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(m: List[List[int]], target=0) -> bool:\n    \"\"\"Check if a target integer is present in a matrix.\"\"\"\n\n    for row in m:\n        if target in row:\n            return True\n    return False\n\ndef g(target=0):\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 457, "target_skills": null, "problem_func": "from typing import*\ndef f(m: List[List[int]], target=0) -> bool:\n    \"\"\"Check if a target integer is present in a matrix.\"\"\"\n\n    for row in m:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(target=0):\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"Check if a string contains at least k consecutive digits.\"\"\"\n\n    count = 0\n    for i in range(len(s)):\n        if s[i].isdigit():\n            count += 1\n            if count == k:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(k=2):\n    s = \"a1b2c3d4\"\n    return s\n\nassert f(g())\n", "emb": null, "idx_generation": 457, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"Check if a string contains at least k consecutive digits.\"\"\"\n\n    count = 0\n    for i in range(len(s)):\n        if s[i].isdigit():\n            count += 1\n            if count == k:\n                return True\n        else:\n            count = 0\n    return False", "solution_func": "def g(k=2):\n    s = \"a1b2c3d4\"\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Check if the sum of the elements in a submatrix is equal to a given number.\"\"\"\n    return sum(sum(row[i:i+m]) for row in matrix[i:i+n]) == 30\ndef g(n=2, m=2, matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return n, m, matrix\nassert f(*g())\n", "emb": null, "idx_generation": 457, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Check if the sum of the elements in a submatrix is equal to a given number.\"\"\"\n    return sum(sum(row[i:i+m]) for row in matrix[i:i+n]) == 30", "solution_func": "def g(n=2, m=2, matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return n, m, matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], value=15) -> bool:\n    \"\"\"Find two numbers in an array that sum up to a given value.\"\"\"\n    return any(value - num in arr for num in arr)\ndef g(value=15):\n    return [1, 2, 3, 4, 5], value\nassert f(*g())\n", "emb": null, "idx_generation": 457, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], value=15) -> bool:\n    \"\"\"Find two numbers in an array that sum up to a given value.\"\"\"\n    return any(value - num in arr for num in arr)", "solution_func": "def g(value=15):\n    return [1, 2, 3, 4, 5], value", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, k: int, arr=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if there is a subarray of length k whose sum is divisible by n.\"\"\"\n    return any(sum(arr[i:i+k]) % n == 0 for i in range(len(arr)-k+1))\ndef g(n=3, k=2, arr=[1, 2, 3, 4, 5]):\n    return n, k, arr\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 457, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k: int, arr=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if there is a subarray of length k whose sum is divisible by n.\"\"\"\n    return any(sum(arr[i:i+k]) % n == 0 for i in range(len(arr)-k+1))", "solution_func": "def g(n=3, k=2, arr=[1, 2, 3, 4, 5]):\n    return n, k, arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, sub: str, n: int) -> bool:\n    \"\"\"\n    Check if a substring appears exactly n times in the given string.\n    \"\"\"\n    return s.count(sub) == n\ndef g(sub: str, n: int):\n    return (sub * n) + \"extra\" + (sub * n)\nassert f(g())\n", "emb": null, "idx_generation": 457, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, sub: str, n: int) -> bool:\n    \"\"\"\n    Check if a substring appears exactly n times in the given string.\n    \"\"\"\n    return s.count(sub) == n", "solution_func": "def g(sub: str, n: int):\n    return (sub * n) + \"extra\" + (sub * n)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=3, m=5) -> bool:\n    \"\"\"Check if a string can be split into equal parts of length n and m.\"\"\"\n    return len(s) % (n + m) == 0 and all([s[i:i+n] == s[i+n:i+n+m] for i in range(0, len(s), n + m)])\ndef g(n=3, m=5):\n    s = \"abcdefghijklmnopqrstuvwxyz\" * 10\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 458, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3, m=5) -> bool:\n    \"\"\"Check if a string can be split into equal parts of length n and m.\"\"\"\n    return len(s) % (n + m) == 0 and all([s[i:i+n] == s[i+n:i+n+m] for i in range(0, len(s), n + m)])", "solution_func": "def g(n=3, m=5):\n    s = \"abcdefghijklmnopqrstuvwxyz\" * 10\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists three numbers in the list that sum up to k.\"\"\"\n    from itertools import combinations\n    return any([sum(comb) == k for comb in combinations(arr, 3)])\ndef g(k=3):\n    arr = [1, 2, 3, 4, 5]\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 458, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists three numbers in the list that sum up to k.\"\"\"\n    from itertools import combinations\n    return any([sum(comb) == k for comb in combinations(arr, 3)])", "solution_func": "def g(k=3):\n    arr = [1, 2, 3, 4, 5]\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the target number is present in the matrix.\"\"\"\n    return any([target in row for row in matrix])\ndef g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 458, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the target number is present in the matrix.\"\"\"\n    return any([target in row for row in matrix])", "solution_func": "def g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    return 'radar'\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 458, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]", "solution_func": "def g():\n    return 'radar'", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list of integers is sorted in ascending order.\"\"\"\n    return arr == sorted(arr)\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 458, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list of integers is sorted in ascending order.\"\"\"\n    return arr == sorted(arr)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 458, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g():\n    return 17", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target.\"\"\"\n    return any(sum(comb) == target for comb in combinations(nums, 3))\ndef g(target=100):\n    return [target-1, target-2, 3]\nassert f(g())\n", "emb": null, "idx_generation": 458, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target.\"\"\"\n    return any(sum(comb) == target for comb in combinations(nums, 3))", "solution_func": "def g(target=100):\n    return [target-1, target-2, 3]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number is in the given matrix.\"\"\"\n    return any(target in row for row in matrix)\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target]]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 458, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number is in the given matrix.\"\"\"\n    return any(target in row for row in matrix)", "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target]]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=5, b=3) -> bool:\n    \"\"\"Check if n can be expressed as the sum of a and b.\"\"\"\n    return any(n == a*i + b*j for i in range(n//a + 1) for j in range(n//b + 1))\ndef g(a=5, b=3):\n    return a + b\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 458, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=5, b=3) -> bool:\n    \"\"\"Check if n can be expressed as the sum of a and b.\"\"\"\n    return any(n == a*i + b*j for i in range(n//a + 1) for j in range(n//b + 1))", "solution_func": "def g(a=5, b=3):\n    return a + b", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], upper_bound=1000) -> bool:\n    \"\"\"Check if a number is a prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], upper_bound=1000):\n    primes = []\n    for n in range(2, upper_bound+1):\n        if all(n % i != 0 for i in nums):\n            primes.append(n)\n    return primes\nassert f(g())\n", "emb": null, "idx_generation": 458, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], upper_bound=1000) -> bool:\n    \"\"\"Check if a number is a prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g(nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], upper_bound=1000):\n    primes = []\n    for n in range(2, upper_bound+1):\n        if all(n % i != 0 for i in nums):\n            primes.append(n)\n    return primes", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there exists a path from top-left to bottom-right in the matrix that sums up to the target\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    dp = [[False] * n for _ in range(m)]\n    dp[0][0] = matrix[0][0] == target\n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] or matrix[i][0] == target\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] or matrix[0][j] == target\n    for i in range(1, m):\n        for j in range(1, n):\n            if matrix[i][j] == target:\n                dp[i][j] = True\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i][j-1]\n    return dp[m-1][n-1]\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=10):\n    m = len(matrix)\n    n = len(matrix[0])\n    dp = [[0] * n for _ in range(m)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    path = []\n    i = m - 1\n    j = n - 1\n    while i > 0 or j > 0:\n        path.append(matrix[i][j])\n        if i == 0:\n            j -= 1\n        elif j == 0:\n            i -= 1\n        elif dp[i-1][j] >= dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    path.append(matrix[0][0])\n    return path[::-1]\nassert f(g())\n", "emb": null, "idx_generation": 459, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there exists a path from top-left to bottom-right in the matrix that sums up to the target\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    dp = [[False] * n for _ in range(m)]\n    dp[0][0] = matrix[0][0] == target\n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] or matrix[i][0] == target\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] or matrix[0][j] == target\n    for i in range(1, m):\n        for j in range(1, n):\n            if matrix[i][j] == target:\n                dp[i][j] = True\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i][j-1]\n    return dp[m-1][n-1]", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=10):\n    m = len(matrix)\n    n = len(matrix[0])\n    dp = [[0] * n for _ in range(m)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    path = []\n    i = m - 1\n    j = n - 1\n    while i > 0 or j > 0:\n        path.append(matrix[i][j])\n        if i == 0:\n            j -= 1\n        elif j == 0:\n            i -= 1\n        elif dp[i-1][j] >= dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    path.append(matrix[0][0])\n    return path[::-1]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray with sum equal to the target\"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\ndef g(arr=[1, 2, 3, 4, 5], target=0):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 459, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray with sum equal to the target\"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False", "solution_func": "def g(arr=[1, 2, 3, 4, 5], target=0):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subsequence of nums that sums up to the target\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]]\n    return dp[n][target]\ndef g(nums=[1, 2, 3, 4, 5], target=10):\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 459, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subsequence of nums that sums up to the target\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]]\n    return dp[n][target]", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=10):\n    return nums", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Find two numbers in the list that sum up to the target value.\n    For example, given the list [1, 2, 3, 4] and target = 5, f(g()) should return True.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target = 0):\n    return [1, 2, 3, 4]\n\nassert f(g())\n", "emb": null, "idx_generation": 459, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Find two numbers in the list that sum up to the target value.\n    For example, given the list [1, 2, 3, 4] and target = 5, f(g()) should return True.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target = 0):\n    return [1, 2, 3, 4]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(radius: float, volume=0) -> bool:\n    \"\"\"\n    Check if the volume of a sphere with the given radius is equal to the provided value.\n    For example, given radius = 2 and volume = 33.51, f(g()) should return True.\n    \"\"\"\n    calculated_volume = (4/3) * math.pi * (radius ** 3)\n    return abs(calculated_volume - volume) < 1e-06\n\ndef g(radius = 2):\n    return 33.51\n\nassert f(g())\n", "emb": null, "idx_generation": 459, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(radius: float, volume=0) -> bool:\n    \"\"\"\n    Check if the volume of a sphere with the given radius is equal to the provided value.\n    For example, given radius = 2 and volume = 33.51, f(g()) should return True.\n    \"\"\"\n    calculated_volume = (4/3) * math.pi * (radius ** 3)\n    return abs(calculated_volume - volume) < 1e-06", "solution_func": "def g(radius = 2):\n    return 33.51", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], rows=0, cols=0) -> bool:\n    \"\"\"\n    Check if the dimensions of the matrix match the provided number of rows and columns.\n    For example, given matrix = [[1, 2, 3], [4, 5, 6]] and rows = 2, cols = 3, f(g()) should return True.\n    \"\"\"\n    return len(matrix) == rows and all(len(row) == cols for row in matrix)\n\ndef g(rows = 2, cols = 3):\n    return [[1, 2, 3], [4, 5, 6]]\n\nassert f(g())\n", "emb": null, "idx_generation": 459, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], rows=0, cols=0) -> bool:\n    \"\"\"\n    Check if the dimensions of the matrix match the provided number of rows and columns.\n    For example, given matrix = [[1, 2, 3], [4, 5, 6]] and rows = 2, cols = 3, f(g()) should return True.\n    \"\"\"\n    return len(matrix) == rows and all(len(row) == cols for row in matrix)", "solution_func": "def g(rows = 2, cols = 3):\n    return [[1, 2, 3], [4, 5, 6]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], n=100) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers that add up to a given target number.\n\n    Sample Input:\n    `[2, 7, 11, 15]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return any((nums[i] + nums[j] == n for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(nums = [2, 7, 11, 15], n = 100):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 459, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], n=100) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers that add up to a given target number.\n\n    Sample Input:\n    `[2, 7, 11, 15]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return any((nums[i] + nums[j] == n for i in range(len(nums)) for j in range(i + 1, len(nums))))", "solution_func": "def g(nums = [2, 7, 11, 15], n = 100):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=10) -> bool:\n    \"\"\"Find the sum of all the elements in a given matrix\"\"\"\n    return sum(sum(row) for row in matrix) == n\ndef g(n = 10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 459, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=10) -> bool:\n    \"\"\"Find the sum of all the elements in a given matrix\"\"\"\n    return sum(sum(row) for row in matrix) == n", "solution_func": "def g(n = 10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if a given string is a palindrome\"\"\"\n    return s == s[::-1] and s == target\ndef g(target = 'hello'):\n    return target[::-1]\nassert f(g())\n", "emb": null, "idx_generation": 459, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if a given string is a palindrome\"\"\"\n    return s == s[::-1] and s == target", "solution_func": "def g(target = 'hello'):\n    return target[::-1]", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, max_nums=4, options=[1, 2, 3, 4]) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose sum is the target value.\"\"\"\n    for n in nums:\n        assert n in options\n    return len(nums) <= max_nums and sum(nums) == target\ndef g(target = 10, max_nums = 4, options = [1, 2, 3, 4]):\n    from itertools import combinations_with_replacement\n    for n in range(max_nums + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 459, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, max_nums=4, options=[1, 2, 3, 4]) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose sum is the target value.\"\"\"\n    for n in nums:\n        assert n in options\n    return len(nums) <= max_nums and sum(nums) == target", "solution_func": "def g(target = 10, max_nums = 4, options = [1, 2, 3, 4]):\n    from itertools import combinations_with_replacement\n    for n in range(max_nums + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist two distinct indices i and j in the list numbers such that numbers[i] + numbers[j] == target.\n    \"\"\"\n    seen = set()\n    for num in numbers:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target: int):\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 8)\n", "emb": null, "idx_generation": 460, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist two distinct indices i and j in the list numbers such that numbers[i] + numbers[j] == target.\n    \"\"\"\n    seen = set()\n    for num in numbers:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target: int):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    \"\"\"\n    Check if all the words in the list start with the same letter.\n    \"\"\"\n    first_letter = words[0][0]\n    for word in words:\n        if word[0] != first_letter:\n            return False\n    return True\n\ndef g():\n    return [\"apple\", \"ant\", \"arrow\"]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 460, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    \"\"\"\n    Check if all the words in the list start with the same letter.\n    \"\"\"\n    first_letter = words[0][0]\n    for word in words:\n        if word[0] != first_letter:\n            return False\n    return True", "solution_func": "def g():\n    return [\"apple\", \"ant\", \"arrow\"]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(word: str) -> bool:\n    \"\"\"\n    Check if the word is a palindrome, meaning it reads the same forwards and backwards.\n    \"\"\"\n    return word == word[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 460, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str) -> bool:\n    \"\"\"\n    Check if the word is a palindrome, meaning it reads the same forwards and backwards.\n    \"\"\"\n    return word == word[::-1]", "solution_func": "def g():\n    return \"racecar\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, x=5, y=10) -> bool:\n    \"\"\"\n    Given a string s, return True if the number of occurrences of 'x' is greater than or equal to x and the number of \n    occurrences of 'y' is less than or equal to y. Return False otherwise.\n\n    Sample Input:\n    s = \"xyxyxy\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s.count('x') >= x and s.count('y') <= y\ndef g(x=5, y=10):\n    return 'xy' * (x + y)\nassert f(g())\n", "emb": null, "idx_generation": 460, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, x=5, y=10) -> bool:\n    \"\"\"\n    Given a string s, return True if the number of occurrences of 'x' is greater than or equal to x and the number of \n    occurrences of 'y' is less than or equal to y. Return False otherwise.\n\n    Sample Input:\n    s = \"xyxyxy\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s.count('x') >= x and s.count('y') <= y", "solution_func": "def g(x=5, y=10):\n    return 'xy' * (x + y)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"\n    Given a string s, return True if the string has at least n consecutive vowels (aeiouy/AEIOUY). Return False otherwise.\n\n    Sample Input:\n    s = \"aeeeiou\"\n\n    Sample Output:\n    True\n    \"\"\"\n    vowels = set('aeiouy')\n    count = 0\n    for c in s.lower():\n        if c in vowels:\n            count += 1\n        else:\n            count = 0\n        if count >= n:\n            return True\n    return False\ndef g(n=3):\n    return 'a' * (n - 1) + 'e' * n + 'o' * (n + 1)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 460, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"\n    Given a string s, return True if the string has at least n consecutive vowels (aeiouy/AEIOUY). Return False otherwise.\n\n    Sample Input:\n    s = \"aeeeiou\"\n\n    Sample Output:\n    True\n    \"\"\"\n    vowels = set('aeiouy')\n    count = 0\n    for c in s.lower():\n        if c in vowels:\n            count += 1\n        else:\n            count = 0\n        if count >= n:\n            return True\n    return False", "solution_func": "def g(n=3):\n    return 'a' * (n - 1) + 'e' * n + 'o' * (n + 1)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, a=100, b=200) -> bool:\n    \"\"\"\n    Given a string s, return True if the number of occurrences of 'a' is less than or equal to a and the number of \n    occurrences of 'b' is greater than or equal to b. Return False otherwise.\n\n    Sample Input:\n    s = \"aabb\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s.count('a') <= a and s.count('b') >= b\ndef g(a=100, b=200):\n    return 'a' * a + 'b' * b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 460, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a=100, b=200) -> bool:\n    \"\"\"\n    Given a string s, return True if the number of occurrences of 'a' is less than or equal to a and the number of \n    occurrences of 'b' is greater than or equal to b. Return False otherwise.\n\n    Sample Input:\n    s = \"aabb\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s.count('a') <= a and s.count('b') >= b", "solution_func": "def g(a=100, b=200):\n    return 'a' * a + 'b' * b", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(a: int, b: int, c: int, d: int) -> bool:\n    \"\"\"\n    Find four integers such that the sum of the first two is equal to the sum of the last two, and the product\n    of the first and the last is equal to the product of the second and the third.\n    \"\"\"\n    return a + b == c + d and a * d == b * c\n\ndef g():\n    for a in range(-100, 101):\n        for b in range(-100, 101):\n            for c in range(-100, 101):\n                for d in range(-100, 101):\n                    if f(a, b, c, d):\n                        return (a, b, c, d)\n    return (0, 0, 0, 0)\n\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 460, "target_skills": null, "problem_func": "from typing import*\ndef f(a: int, b: int, c: int, d: int) -> bool:\n    \"\"\"\n    Find four integers such that the sum of the first two is equal to the sum of the last two, and the product\n    of the first and the last is equal to the product of the second and the third.\n    \"\"\"\n    return a + b == c + d and a * d == b * c", "solution_func": "def g():\n    for a in range(-100, 101):\n        for b in range(-100, 101):\n            for c in range(-100, 101):\n                for d in range(-100, 101):\n                    if f(a, b, c, d):\n                        return (a, b, c, d)\n    return (0, 0, 0, 0)", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Determine if a number n is divisible by k using only the digits of n (in any order) and the operations +, -,\n    *, and /.\n    \"\"\"\n    return n % k == 0\n\ndef g(n: int, k: int):\n    digits = list(str(n))\n    operations = ['+', '-', '*', '/']\n    permutations = set()\n    \n    def dfs(curr, visited):\n        if len(curr) == len(digits):\n            permutations.add(''.join(curr))\n            return\n        \n        for i in range(len(digits)):\n            if not visited[i]:\n                visited[i] = True\n                curr.append(digits[i])\n                \n                for op in operations:\n                    curr.append(op)\n                    dfs(curr, visited)\n                    curr.pop()\n                \n                curr.pop()\n                visited[i] = False\n    \n    dfs([], [False] * len(digits))\n    \n    for perm in permutations:\n        try:\n            if eval(perm) == k:\n                return True\n        except ZeroDivisionError:\n            continue\n    \n    return False\n\nassert f(*g(123, 3))\n", "emb": null, "idx_generation": 460, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Determine if a number n is divisible by k using only the digits of n (in any order) and the operations +, -,\n    *, and /.\n    \"\"\"\n    return n % k == 0", "solution_func": "def g(n: int, k: int):\n    digits = list(str(n))\n    operations = ['+', '-', '*', '/']\n    permutations = set()\n    \n    def dfs(curr, visited):\n        if len(curr) == len(digits):\n            permutations.add(''.join(curr))\n            return\n        \n        for i in range(len(digits)):\n            if not visited[i]:\n                visited[i] = True\n                curr.append(digits[i])\n                \n                for op in operations:\n                    curr.append(op)\n                    dfs(curr, visited)\n                    curr.pop()\n                \n                curr.pop()\n                visited[i] = False\n    \n    dfs([], [False] * len(digits))\n    \n    for perm in permutations:\n        try:\n            if eval(perm) == k:\n                return True\n        except ZeroDivisionError:\n            continue\n    \n    return False", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"\n    Determine if a string s is a palindrome after removing n characters from it.\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s: str, n: int):\n    def dfs(curr, count, start):\n        if count == n:\n            if f(curr, n):\n                return curr\n            return \"\"\n        \n        for i in range(start, len(s)):\n            curr += s[i]\n            result = dfs(curr, count + 1, i + 1)\n            if result:\n                return result\n            curr = curr[:-1]\n        \n        return \"\"\n    \n    return dfs(\"\", 0, 0)\n\nassert f(g(\"racecar\", 2), 2)\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 460, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"\n    Determine if a string s is a palindrome after removing n characters from it.\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g(s: str, n: int):\n    def dfs(curr, count, start):\n        if count == n:\n            if f(curr, n):\n                return curr\n            return \"\"\n        \n        for i in range(start, len(s)):\n            curr += s[i]\n            result = dfs(curr, count + 1, i + 1)\n            if result:\n                return result\n            curr = curr[:-1]\n        \n        return \"\"\n    \n    return dfs(\"\", 0, 0)", "map_ix": [0, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if the sum of the squares of x, y, and z is a perfect square\"\"\"\n    return math.isqrt(x**2 + y**2 + z**2)**2 == (x**2 + y**2 + z**2)\n\ndef g(x: int = 3, y: int = 4, z: int = 5) -> int:\n    \"\"\"Return the product of x, y, and z\"\"\"\n    return x * y * z\n\nassert f(g())\n", "emb": null, "idx_generation": 460, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if the sum of the squares of x, y, and z is a perfect square\"\"\"\n    return math.isqrt(x**2 + y**2 + z**2)**2 == (x**2 + y**2 + z**2)", "solution_func": "def g(x: int = 3, y: int = 4, z: int = 5) -> int:\n    \"\"\"Return the product of x, y, and z\"\"\"\n    return x * y * z", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, seq=[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]) -> bool:\n    \"\"\"Check if a number is in the Fibonacci sequence\"\"\"\n    return n in seq\ndef g(seq=[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]):\n    return seq\nassert f(g())\n", "emb": null, "idx_generation": 461, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, seq=[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]) -> bool:\n    \"\"\"Check if a number is in the Fibonacci sequence\"\"\"\n    return n in seq", "solution_func": "def g(seq=[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]):\n    return seq", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(seq: str, substring='abc') -> bool:\n    \"\"\"Check if a substring exists in a given string\"\"\"\n    return substring in seq\ndef g(substring='abc'):\n    return substring + 'xyz'\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 461, "target_skills": null, "problem_func": "from typing import*\ndef f(seq: str, substring='abc') -> bool:\n    \"\"\"Check if a substring exists in a given string\"\"\"\n    return substring in seq", "solution_func": "def g(substring='abc'):\n    return substring + 'xyz'", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, m=3) -> bool:\n    \"\"\"Check if a number is a prime power\"\"\"\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(math.sqrt(x)) + 1):\n            if x % i == 0:\n                return False\n        return True\n    \n    return is_prime(n) and math.log(n, m).is_integer()\ndef g(m=3):\n    return m**2\nassert f(g())\n", "emb": null, "idx_generation": 461, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, m=3) -> bool:\n    \"\"\"Check if a number is a prime power\"\"\"\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(math.sqrt(x)) + 1):\n            if x % i == 0:\n                return False\n        return True\n    \n    return is_prime(n) and math.log(n, m).is_integer()", "solution_func": "def g(m=3):\n    return m**2", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Find if there are three numbers in the array that sum up to the target.\"\"\"\n    return any(sum(comb) == target for comb in combinations(arr, 3))\ndef g(arr: List[int], target: int):\n    return arr\nassert f(g([1, 2, 3, 4, 5], 9))\n", "emb": null, "idx_generation": 461, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Find if there are three numbers in the array that sum up to the target.\"\"\"\n    return any(sum(comb) == target for comb in combinations(arr, 3))", "solution_func": "def g(arr: List[int], target: int):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(word: str) -> bool:\n    \"\"\"Determine if a word is a palindrome.\"\"\"\n    return word == word[::-1]\ndef g(word: str):\n    return word\nassert f(g(\"racecar\"))\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 461, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str) -> bool:\n    \"\"\"Determine if a word is a palindrome.\"\"\"\n    return word == word[::-1]", "solution_func": "def g(word: str):\n    return word", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are any duplicate numbers in the list.\"\"\"\n    return len(nums) != len(set(nums))\ndef g(nums: List[int]):\n    return nums\nassert f(g([1, 2, 3, 4, 5]))\n", "emb": null, "idx_generation": 461, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are any duplicate numbers in the list.\"\"\"\n    return len(nums) != len(set(nums))", "solution_func": "def g(nums: List[int]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Find Subset Sum\n\n    Given a list of positive integers, determine if there exists a subset whose sum is equal to a target value.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n    output: True (since 4 + 5 = 9)\n    \"\"\"\n    def subset_sum(nums, n, target):\n        if target == 0:\n            return True\n        if n == 0:\n            return False\n        if nums[n-1] > target:\n            return subset_sum(nums, n-1, target)\n        return subset_sum(nums, n-1, target) or subset_sum(nums, n-1, target-nums[n-1])\n    \n    return subset_sum(nums, len(nums), target)\n\ndef g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 461, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Find Subset Sum\n\n    Given a list of positive integers, determine if there exists a subset whose sum is equal to a target value.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n    output: True (since 4 + 5 = 9)\n    \"\"\"\n    def subset_sum(nums, n, target):\n        if target == 0:\n            return True\n        if n == 0:\n            return False\n        if nums[n-1] > target:\n            return subset_sum(nums, n-1, target)\n        return subset_sum(nums, n-1, target) or subset_sum(nums, n-1, target-nums[n-1])\n    \n    return subset_sum(nums, len(nums), target)", "solution_func": "def g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, k: int = 3) -> bool:\n    \"\"\"\n    Find the Kth Smallest Prime Factor\n\n    Given a number n, find the kth smallest prime factor of n. If there are less than k prime factors, return -1.\n\n    Example:\n    n = 30\n    k = 2\n    output: 3 (since the prime factors of 30 are 2, 3, 5, and the 2nd smallest is 3)\n    \"\"\"\n    def smallest_prime_factor(n, k):\n        factors = []\n        while n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        p = 3\n        while p * p <= n:\n            if n % p == 0:\n                factors.append(p)\n                n /= p\n            else:\n                p += 2\n        if n > 1:\n            factors.append(n)\n        if k > len(factors):\n            return -1\n        return factors[k-1]\n    \n    return smallest_prime_factor(n, k)\n\ndef g(n = 30, k = 2):\n    return n\n\nassert f(g())\n", "emb": null, "idx_generation": 461, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k: int = 3) -> bool:\n    \"\"\"\n    Find the Kth Smallest Prime Factor\n\n    Given a number n, find the kth smallest prime factor of n. If there are less than k prime factors, return -1.\n\n    Example:\n    n = 30\n    k = 2\n    output: 3 (since the prime factors of 30 are 2, 3, 5, and the 2nd smallest is 3)\n    \"\"\"\n    def smallest_prime_factor(n, k):\n        factors = []\n        while n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        p = 3\n        while p * p <= n:\n            if n % p == 0:\n                factors.append(p)\n                n /= p\n            else:\n                p += 2\n        if n > 1:\n            factors.append(n)\n        if k > len(factors):\n            return -1\n        return factors[k-1]\n    \n    return smallest_prime_factor(n, k)", "solution_func": "def g(n = 30, k = 2):\n    return n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(num: int, divisor=10) -> bool:\n    \"\"\"\n    Check if a number is divisible by another number.\n\n    Given two integers, num and divisor, check if num is divisible by divisor.\n\n    Example:\n    num = 20\n    divisor = 5\n    output: True (since 20 is divisible by 5)\n    \"\"\"\n    return num % divisor == 0\n\ndef g(num = 20, divisor = 5):\n    return num\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 461, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int, divisor=10) -> bool:\n    \"\"\"\n    Check if a number is divisible by another number.\n\n    Given two integers, num and divisor, check if num is divisible by divisor.\n\n    Example:\n    num = 20\n    divisor = 5\n    output: True (since 20 is divisible by 5)\n    \"\"\"\n    return num % divisor == 0", "solution_func": "def g(num = 20, divisor = 5):\n    return num", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, threshold=0) -> bool:\n    \"\"\"Check if all elements in a matrix are above a given threshold.\"\"\"\n    return np.all(matrix > threshold)\n\ndef g(matrix: np.ndarray, threshold=0):\n    return np.random.randint(low=threshold+1, high=threshold+10, size=matrix.shape)\n\nmatrix = np.random.randint(low=1, high=10, size=(3, 3))\nassert f(g(matrix, threshold=5))\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 461, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, threshold=0) -> bool:\n    \"\"\"Check if all elements in a matrix are above a given threshold.\"\"\"\n    return np.all(matrix > threshold)", "solution_func": "def g(matrix: np.ndarray, threshold=0):\n    return np.random.randint(low=threshold+1, high=threshold+10, size=matrix.shape)\n\nmatrix = np.random.randint(low=1, high=10, size=(3, 3))", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport re\n\ndef f(s: str) -> bool:\n    \"\"\"Check if s is a valid email address.\"\"\"\n    pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n    return re.match(pattern, s) is not None\n\ndef g():\n    return \"test@example.com\"\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 462, "target_skills": null, "problem_func": "from typing import*\nimport re\n\ndef f(s: str) -> bool:\n    \"\"\"Check if s is a valid email address.\"\"\"\n    pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n    return re.match(pattern, s) is not None", "solution_func": "def g():\n    return \"test@example.com\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], n: int) -> bool:\n    \"\"\"Check if n is in the list lst.\"\"\"\n    return n in lst\n\ndef g(lst: List[int]):\n    return random.choice(lst)\n\nlst = [1, 2, 3, 4, 5]\nassert f(g(lst), n=3)\n", "emb": null, "idx_generation": 462, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: List[int], n: int) -> bool:\n    \"\"\"Check if n is in the list lst.\"\"\"\n    return n in lst", "solution_func": "def g(lst: List[int]):\n    return random.choice(lst)\n\nlst = [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(n: int):\n    matrix = []\n    for i in range(n):\n        row = []\n        for j in range(n):\n            row.append(random.randint(0, 1))\n        matrix.append(row)\n    return matrix\n\nn = 3\nassert f(g(n))\n", "emb": null, "idx_generation": 462, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(n: int):\n    matrix = []\n    for i in range(n):\n        row = []\n        for j in range(n):\n            row.append(random.randint(0, 1))\n        matrix.append(row)\n    return matrix\n\nn = 3", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100, n=4) -> bool:\n    \"\"\"Find n distinct positive integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target\ndef g(target=100, n=4):\n    return list(range(1, n+1))\nassert f(g())\n", "emb": null, "idx_generation": 462, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100, n=4) -> bool:\n    \"\"\"Find n distinct positive integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target", "solution_func": "def g(target=100, n=4):\n    return list(range(1, n+1))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], char='a') -> bool:\n    \"\"\"Check if all words in the list contain a specific character\"\"\"\n    return all(char in word for word in words)\ndef g(char='a'):\n    return ['apple', 'banana', 'cherry']\nassert f(g())\n", "emb": null, "idx_generation": 462, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], char='a') -> bool:\n    \"\"\"Check if all words in the list contain a specific character\"\"\"\n    return all(char in word for word in words)", "solution_func": "def g(char='a'):\n    return ['apple', 'banana', 'cherry']", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100, n=4) -> bool:\n    \"\"\"Find n distinct integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target\ndef g(target=100, n=4):\n    return list(range(1, n+1))\nassert f(g())\n", "emb": null, "idx_generation": 462, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100, n=4) -> bool:\n    \"\"\"Find n distinct integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target", "solution_func": "def g(target=100, n=4):\n    return list(range(1, n+1))", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists two numbers in the array that sum up to the target_sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\n\ndef g(arr = [2, 4, 6, 8, 10]):\n    return arr\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 462, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists two numbers in the array that sum up to the target_sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(arr = [2, 4, 6, 8, 10]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_value=0) -> bool:\n    \"\"\"Check if the target value is present in the matrix.\"\"\"\n    for row in matrix:\n        if target_value in row:\n            return True\n    return False\n\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 462, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_value=0) -> bool:\n    \"\"\"Check if the target value is present in the matrix.\"\"\"\n    for row in matrix:\n        if target_value in row:\n            return True\n    return False", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"Check if there is a word in the list with length greater than or equal to the target_length.\"\"\"\n    for word in words:\n        if len(word) >= target_length:\n            return True\n    return False\n\ndef g(words = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]):\n    return words\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 462, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"Check if there is a word in the list with length greater than or equal to the target_length.\"\"\"\n    for word in words:\n        if len(word) >= target_length:\n            return True\n    return False", "solution_func": "def g(words = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]):\n    return words", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substr: str) -> bool:\n    \"\"\"Check if a given substring is present in the string.\"\"\"\n    return substr in s\ndef g(substr: str):\n    return 'Hello, World!'.replace('World', substr)\nassert f(g())\n", "emb": null, "idx_generation": 462, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr: str) -> bool:\n    \"\"\"Check if a given substring is present in the string.\"\"\"\n    return substr in s", "solution_func": "def g(substr: str):\n    return 'Hello, World!'.replace('World', substr)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.array, threshold=0.5) -> bool:\n    \"\"\"Check if all elements in the numpy array are above the threshold\"\"\"\n    return np.all(arr > threshold)\n\ndef g(threshold=0.5):\n    return np.array([0.6, 0.7, 0.8, 0.9])\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 463, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.array, threshold=0.5) -> bool:\n    \"\"\"Check if all elements in the numpy array are above the threshold\"\"\"\n    return np.all(arr > threshold)", "solution_func": "def g(threshold=0.5):\n    return np.array([0.6, 0.7, 0.8, 0.9])", "map_ix": [1, 1, 0, 1, 0, 1, 1, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if the specified character is present in the string\"\"\"\n    return char in s\n\ndef g(char='a'):\n    return \"Hello World!\"\n\nassert f(g())\n", "emb": null, "idx_generation": 463, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if the specified character is present in the string\"\"\"\n    return char in s", "solution_func": "def g(char='a'):\n    return \"Hello World!\"", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if the number is divisible by all elements in the list\"\"\"\n    return all(n % num == 0 for num in lst)\n\ndef g(lst=[2, 4, 6, 8, 10]):\n    return 20\n\nassert f(g())\n", "emb": null, "idx_generation": 463, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if the number is divisible by all elements in the list\"\"\"\n    return all(n % num == 0 for num in lst)", "solution_func": "def g(lst=[2, 4, 6, 8, 10]):\n    return 20", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, target_length=30, target_sum=90) -> bool:\n    \"\"\"Check if a string has the desired length and the sum of its characters' ASCII values is equal to the target sum.\"\"\"\n    return len(string) == target_length and sum(ord(c) for c in string) == target_sum\ndef g(target_length = 30, target_sum = 90):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    string = alphabet * (target_length // len(alphabet))\n    string += alphabet[:target_length % len(alphabet)]\n    return string\nassert f(g())\n", "emb": null, "idx_generation": 463, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, target_length=30, target_sum=90) -> bool:\n    \"\"\"Check if a string has the desired length and the sum of its characters' ASCII values is equal to the target sum.\"\"\"\n    return len(string) == target_length and sum(ord(c) for c in string) == target_sum", "solution_func": "def g(target_length = 30, target_sum = 90):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    string = alphabet * (target_length // len(alphabet))\n    string += alphabet[:target_length % len(alphabet)]\n    return string", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom datetime import date, timedelta\ndef f(date_range: List[date], num_days=7) -> bool:\n    \"\"\"Check if a list of dates spans the desired number of days.\"\"\"\n    return (date_range[-1] - date_range[0]).days + 1 == num_days\ndef g(num_days = 7):\n    start_date = date.today()\n    end_date = start_date + timedelta(days=num_days-1)\n    return [start_date + timedelta(days=i) for i in range(num_days)]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 463, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import date, timedelta\ndef f(date_range: List[date], num_days=7) -> bool:\n    \"\"\"Check if a list of dates spans the desired number of days.\"\"\"\n    return (date_range[-1] - date_range[0]).days + 1 == num_days", "solution_func": "def g(num_days = 7):\n    start_date = date.today()\n    end_date = start_date + timedelta(days=num_days-1)\n    return [start_date + timedelta(days=i) for i in range(num_days)]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Check if the sum of each row in a matrix is equal to the target sum.\"\"\"\n    return all(sum(row) == target_sum for row in matrix)\ndef g(target_sum = 100):\n    matrix_size = 5\n    return [[target_sum // matrix_size] * matrix_size for _ in range(matrix_size)]\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 463, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Check if the sum of each row in a matrix is equal to the target sum.\"\"\"\n    return all(sum(row) == target_sum for row in matrix)", "solution_func": "def g(target_sum = 100):\n    matrix_size = 5\n    return [[target_sum // matrix_size] * matrix_size for _ in range(matrix_size)]", "map_ix": [1, 1, 1, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=12) -> bool:\n    \"\"\"Find if there exists a pair of numbers in a list that sums up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=12):\n    return f(g=nums, target=target)\nassert f(g())\n", "emb": null, "idx_generation": 463, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=12) -> bool:\n    \"\"\"Find if there exists a pair of numbers in a list that sums up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=12):\n    return f(g=nums, target=target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, char_count=2) -> bool:\n    \"\"\"Check if a given character appears a certain number of times in a string\"\"\"\n    return s.count('a') == char_count\ndef g(s='banana', char_count=2):\n    return f(g=s)\nassert f(g())\n", "emb": null, "idx_generation": 463, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, char_count=2) -> bool:\n    \"\"\"Check if a given character appears a certain number of times in a string\"\"\"\n    return s.count('a') == char_count", "solution_func": "def g(s='banana', char_count=2):\n    return f(g=s)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find if there exists a subset of numbers in a list that sums up to a target value\"\"\"\n    def subset_sum(nums, target_sum, n):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, target_sum, n-1)\n\n        return subset_sum(nums, target_sum, n-1) or subset_sum(nums, target_sum-nums[n-1], n-1)\n\n    return subset_sum(nums, target_sum, len(nums))\ndef g(nums=[10, 20, 30, 40, 50], target_sum=100):\n    return f(g=nums, target_sum=target_sum)\nassert f(g())\n", "emb": null, "idx_generation": 463, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find if there exists a subset of numbers in a list that sums up to a target value\"\"\"\n    def subset_sum(nums, target_sum, n):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, target_sum, n-1)\n\n        return subset_sum(nums, target_sum, n-1) or subset_sum(nums, target_sum-nums[n-1], n-1)\n\n    return subset_sum(nums, target_sum, len(nums))", "solution_func": "def g(nums=[10, 20, 30, 40, 50], target_sum=100):\n    return f(g=nums, target_sum=target_sum)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int], target_sum: int = 10) -> bool:\n    \"\"\"Find two numbers in lst that add up to target_sum\"\"\"\n    return any((x + y == target_sum for x in lst for y in lst))\ndef g(lst: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 463, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target_sum: int = 10) -> bool:\n    \"\"\"Find two numbers in lst that add up to target_sum\"\"\"\n    return any((x + y == target_sum for x in lst for y in lst))", "solution_func": "def g(lst: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Find if there exist any three numbers in nums such that their sum is equal to target\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 464, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Find if there exist any three numbers in nums such that their sum is equal to target\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"\n    Find if there exist any two numbers in the matrix such that their product is equal to target\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[k])):\n                    if matrix[i][j] * matrix[k][l] == target:\n                        return True\n    return False\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 464, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"\n    Find if there exist any two numbers in the matrix such that their product is equal to target\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[k])):\n                    if matrix[i][j] * matrix[k][l] == target:\n                        return True\n    return False", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(word: str, target='python') -> bool:\n    \"\"\"\n    Rearrange the letters in word to form target word\n    \"\"\"\n    perms = [''.join(perm) for perm in permutations(word)]\n    return target in perms\ndef g(word = 'thonpy'):\n    return word\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 464, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(word: str, target='python') -> bool:\n    \"\"\"\n    Rearrange the letters in word to form target word\n    \"\"\"\n    perms = [''.join(perm) for perm in permutations(word)]\n    return target in perms", "solution_func": "def g(word = 'thonpy'):\n    return word", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target.\"\"\"\n    n = len(nums)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=16):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 464, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target.\"\"\"\n    n = len(nums)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(target=16):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sum up to the target.\"\"\"\n    n = len(nums)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 464, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sum up to the target.\"\"\"\n    n = len(nums)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target+1) for _ in range(n+1)]\n    dp[0][0] = True\n\n    for i in range(1, n+1):\n        dp[i][0] = True\n        for j in range(1, target+1):\n            if j >= nums[i-1]:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    \n    return dp[n][target]\n\ndef g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": null, "idx_generation": 464, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target+1) for _ in range(n+1)]\n    dp[0][0] = True\n\n    for i in range(1, n+1):\n        dp[i][0] = True\n        for j in range(1, target+1):\n            if j >= nums[i-1]:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    \n    return dp[n][target]", "solution_func": "def g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, x='puzzle', y='easy', z='challenging') -> bool:\n    \"\"\"\n    Given a string s, check if it contains all three substrings 'puzzle', 'easy', and 'challenging' in any order.\n    Return True if all three substrings are present, False otherwise.\n\n    Sample Input:\n    s = \"This puzzle is easy and challenging\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return x in s and y in s and z in s\ndef g(x = 'puzzle', y = 'easy', z = 'challenging'):\n    return x + \" \" + y + \" \" + z\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 464, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, x='puzzle', y='easy', z='challenging') -> bool:\n    \"\"\"\n    Given a string s, check if it contains all three substrings 'puzzle', 'easy', and 'challenging' in any order.\n    Return True if all three substrings are present, False otherwise.\n\n    Sample Input:\n    s = \"This puzzle is easy and challenging\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return x in s and y in s and z in s", "solution_func": "def g(x = 'puzzle', y = 'easy', z = 'challenging'):\n    return x + \" \" + y + \" \" + z", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(a: int, b: int, c: int, x=5, y=10, z=15) -> bool:\n    \"\"\"\n    Given three integers a, b, and c, check if they form a Pythagorean triplet.\n    Return True if they form a Pythagorean triplet, False otherwise.\n\n    Sample Input:\n    a = 3\n    b = 4\n    c = 5\n\n    Sample Output:\n    True\n    \"\"\"\n    return a**2 + b**2 == c**2\ndef g(a = 3, b = 4, c = 5):\n    return a, b, c\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 464, "target_skills": null, "problem_func": "from typing import*\ndef f(a: int, b: int, c: int, x=5, y=10, z=15) -> bool:\n    \"\"\"\n    Given three integers a, b, and c, check if they form a Pythagorean triplet.\n    Return True if they form a Pythagorean triplet, False otherwise.\n\n    Sample Input:\n    a = 3\n    b = 4\n    c = 5\n\n    Sample Output:\n    True\n    \"\"\"\n    return a**2 + b**2 == c**2", "solution_func": "def g(a = 3, b = 4, c = 5):\n    return a, b, c", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"\n    Given a string s, check if it contains exactly n occurrences of the substring 'python'.\n    Return True if it contains exactly n occurrences, False otherwise.\n\n    Sample Input:\n    s = \"python is a programming language. python is easy to learn. python is versatile.\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s.count('python') == n\ndef g(n = 3):\n    return \"python \" * n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 464, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"\n    Given a string s, check if it contains exactly n occurrences of the substring 'python'.\n    Return True if it contains exactly n occurrences, False otherwise.\n\n    Sample Input:\n    s = \"python is a programming language. python is easy to learn. python is versatile.\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s.count('python') == n", "solution_func": "def g(n = 3):\n    return \"python \" * n", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=2.71828, b=3.14159) -> bool:\n    \"\"\"Check if x is the square root of a multiplied by b\"\"\"\n    return math.isclose(x, math.sqrt(a * b))\ndef g(a = 2.71828, b = 3.14159):\n    return math.sqrt(a * b)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 464, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=2.71828, b=3.14159) -> bool:\n    \"\"\"Check if x is the square root of a multiplied by b\"\"\"\n    return math.isclose(x, math.sqrt(a * b))", "solution_func": "def g(a = 2.71828, b = 3.14159):\n    return math.sqrt(a * b)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=10, b=15, c=20) -> bool:\n    \"\"\"Check if a number is divisible by a, b, and c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=10, b=15, c=20):\n    return a * b * c\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 465, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=10, b=15, c=20) -> bool:\n    \"\"\"Check if a number is divisible by a, b, and c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0", "solution_func": "def g(a=10, b=15, c=20):\n    return a * b * c", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains consecutive numbers\"\"\"\n    nums.sort()\n    return all(nums[i] + 1 == nums[i+1] for i in range(len(nums)-1))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 465, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains consecutive numbers\"\"\"\n    nums.sort()\n    return all(nums[i] + 1 == nums[i+1] for i in range(len(nums)-1))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, char: str) -> bool:\n    \"\"\"Check if the string starts and ends with the given character\"\"\"\n    return s[0] == char and s[-1] == char\ndef g(char='a'):\n    return char + 'hello' + char\nassert f(g())\n", "emb": null, "idx_generation": 465, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, char: str) -> bool:\n    \"\"\"Check if the string starts and ends with the given character\"\"\"\n    return s[0] == char and s[-1] == char", "solution_func": "def g(char='a'):\n    return char + 'hello' + char", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, a=5, b=10) -> bool:\n    \"\"\"Check if x is a multiple of a or b.\"\"\"\n    return x % a == 0 or x % b == 0\ndef g(a = 5, b = 10):\n    return a * b\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 465, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=5, b=10) -> bool:\n    \"\"\"Check if x is a multiple of a or b.\"\"\"\n    return x % a == 0 or x % b == 0", "solution_func": "def g(a = 5, b = 10):\n    return a * b", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: str, s=\"Hello, World!\") -> bool:\n    \"\"\"Check if x is a substring of s.\"\"\"\n    return x in s\ndef g(s = \"Hello, World!\"):\n    return s[:5]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 465, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str, s=\"Hello, World!\") -> bool:\n    \"\"\"Check if x is a substring of s.\"\"\"\n    return x in s", "solution_func": "def g(s = \"Hello, World!\"):\n    return s[:5]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, a=100, b=200, c=300) -> bool:\n    \"\"\"Check if x is between a and b, or between b and c.\"\"\"\n    return (a <= x <= b) or (b <= x <= c)\ndef g(a = 100, b = 200, c = 300):\n    return (a + c) // 2\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 465, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=100, b=200, c=300) -> bool:\n    \"\"\"Check if x is between a and b, or between b and c.\"\"\"\n    return (a <= x <= b) or (b <= x <= c)", "solution_func": "def g(a = 100, b = 200, c = 300):\n    return (a + c) // 2", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substrings=['elephant', 'giraffe', 'zebra']) -> bool:\n    \"\"\"\n    Find a string that contains each string in substrings alternating, e.g., 'cdaotg' for 'cat' and 'dog'\n    \"\"\"\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings = ['elephant', 'giraffe', 'zebra']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 465, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=['elephant', 'giraffe', 'zebra']) -> bool:\n    \"\"\"\n    Find a string that contains each string in substrings alternating, e.g., 'cdaotg' for 'cat' and 'dog'\n    \"\"\"\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))", "solution_func": "def g(substrings = ['elephant', 'giraffe', 'zebra']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"\n    Find a string that contains each string in substrings alternating, e.g., 'cdaotg' for 'cat' and 'dog'\n    \"\"\"\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings = ['apple', 'banana', 'cherry']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 465, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"\n    Find a string that contains each string in substrings alternating, e.g., 'cdaotg' for 'cat' and 'dog'\n    \"\"\"\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))", "solution_func": "def g(substrings = ['apple', 'banana', 'cherry']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(indices: List[int], a0=987654321) -> bool:\n    \"\"\"\n    Find a repeating integer in an infinite sequence of integers, specifically the indices for which the same value\n    occurs 1000 times. The sequence is defined by a starting value a_0 and each subsequent term is:\n    a_{n+1} = the square root of a_n if the a_n is a perfect square, and a_n + 3 otherwise.\n\n    For a given a_0 (that is a multiple of 3), the goal is to find 1000 indices where the a_i's are all equal.\n\n    Sample input:\n    9\n\n    Sample output:\n    [0, 3, 6, ..., 2997]\n\n    The sequence starting with a0=9 is [9, 3, 6, 9, 3, 6, 9, ...] thus a_n at where n is a multiple of 3 are\n    all equal in this case.\n    \"\"\"\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)\ndef g(a0 = 987654321):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0], "idx_generation": 465, "target_skills": null, "problem_func": "from typing import*\ndef f(indices: List[int], a0=987654321) -> bool:\n    \"\"\"\n    Find a repeating integer in an infinite sequence of integers, specifically the indices for which the same value\n    occurs 1000 times. The sequence is defined by a starting value a_0 and each subsequent term is:\n    a_{n+1} = the square root of a_n if the a_n is a perfect square, and a_n + 3 otherwise.\n\n    For a given a_0 (that is a multiple of 3), the goal is to find 1000 indices where the a_i's are all equal.\n\n    Sample input:\n    9\n\n    Sample output:\n    [0, 3, 6, ..., 2997]\n\n    The sequence starting with a0=9 is [9, 3, 6, 9, 3, 6, 9, ...] thus a_n at where n is a multiple of 3 are\n    all equal in this case.\n    \"\"\"\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)", "solution_func": "def g(a0 = 987654321):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 0, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, a=16, b=4) -> bool:\n    \"\"\"Determine if x is a perfect square and its square root is equal to the sum of a and b.\"\"\"\n    return x ** 0.5 == a + b and x ** 0.5 == int(x ** 0.5)\ndef g(a = 16, b = 4):\n    return (a + b) ** 2\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 465, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=16, b=4) -> bool:\n    \"\"\"Determine if x is a perfect square and its square root is equal to the sum of a and b.\"\"\"\n    return x ** 0.5 == a + b and x ** 0.5 == int(x ** 0.5)", "solution_func": "def g(a = 16, b = 4):\n    return (a + b) ** 2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"Check if a given substring exists in a given string.\"\"\"\n    return substr in string\ndef g(substr='python'):\n    string = 'I love python programming.'\n    return string\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 466, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"Check if a given substring exists in a given string.\"\"\"\n    return substr in string", "solution_func": "def g(substr='python'):\n    string = 'I love python programming.'\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    for num in nums:\n        if target - num in nums:\n            return True\n    return False\ndef g(target=10):\n    nums = [2, 4, 6, 8, 10]\n    return nums\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 466, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    for num in nums:\n        if target - num in nums:\n            return True\n    return False", "solution_func": "def g(target=10):\n    nums = [2, 4, 6, 8, 10]\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the matrix that sum up to the target value.\"\"\"\n    for row in matrix:\n        for num in row:\n            if target - num in row:\n                return True\n    return False\ndef g(target=50):\n    matrix = [[10, 20, 30], [40, 50, 60], [70, 80, 90]]\n    return matrix\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 466, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the matrix that sum up to the target value.\"\"\"\n    for row in matrix:\n        for num in row:\n            if target - num in row:\n                return True\n    return False", "solution_func": "def g(target=50):\n    matrix = [[10, 20, 30], [40, 50, 60], [70, 80, 90]]\n    return matrix", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subset whose sum is equal to the target sum.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if j < arr[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]\ndef g(arr=[2, 4, 6, 8, 10]):\n    return arr\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 466, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subset whose sum is equal to the target sum.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if j < arr[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]", "solution_func": "def g(arr=[2, 4, 6, 8, 10]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"\n    Given a sorted 2D matrix in ascending order, determine if the target element exists in the matrix.\n    Return True if the target exists, False otherwise.\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    low = 0\n    high = m * n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        row = mid // n\n        col = mid % n\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\ndef g(matrix=[[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]]):\n    return matrix\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 466, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"\n    Given a sorted 2D matrix in ascending order, determine if the target element exists in the matrix.\n    Return True if the target exists, False otherwise.\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    low = 0\n    high = m * n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        row = mid // n\n        col = mid % n\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False", "solution_func": "def g(matrix=[[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]]):\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, determine if there exists a triplet in the list whose sum is equal to the target.\n    Return True if such a triplet exists, False otherwise.\n    \"\"\"\n    n = len(nums)\n    nums.sort()\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\ndef g(nums=[-1, 0, 1, 2, -1, -4]):\n    return nums\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 466, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, determine if there exists a triplet in the list whose sum is equal to the target.\n    Return True if such a triplet exists, False otherwise.\n    \"\"\"\n    n = len(nums)\n    nums.sort()\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False", "solution_func": "def g(nums=[-1, 0, 1, 2, -1, -4]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(num: float, den=3, precision=0.001) -> bool:\n    \"\"\"Check if the given number is within a certain precision of the result of dividing it by a given denominator\"\"\"\n    return abs(num / den - round(num / den)) <= precision\n\ndef g(num=10.5, den=3, precision=0.001):\n    \"\"\"Calculate the result of dividing the given number by the given denominator\"\"\"\n    return num / den\n\nassert f(g())\n", "emb": null, "idx_generation": 466, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(num: float, den=3, precision=0.001) -> bool:\n    \"\"\"Check if the given number is within a certain precision of the result of dividing it by a given denominator\"\"\"\n    return abs(num / den - round(num / den)) <= precision", "solution_func": "def g(num=10.5, den=3, precision=0.001):\n    \"\"\"Calculate the result of dividing the given number by the given denominator\"\"\"\n    return num / den", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(num: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"Check if the given number can be expressed as the product of a set of prime factors\"\"\"\n    for factor in factors:\n        while num % factor == 0:\n            num //= factor\n    return num == 1\n\ndef g(num=60, factors=[2, 3, 5]):\n    \"\"\"Calculate the product of the given factors\"\"\"\n    product = 1\n    for factor in factors:\n        product *= factor\n    return product\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 466, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"Check if the given number can be expressed as the product of a set of prime factors\"\"\"\n    for factor in factors:\n        while num % factor == 0:\n            num //= factor\n    return num == 1", "solution_func": "def g(num=60, factors=[2, 3, 5]):\n    \"\"\"Calculate the product of the given factors\"\"\"\n    product = 1\n    for factor in factors:\n        product *= factor\n    return product", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(num: int, digits=[1, 3, 5, 7, 9]) -> bool:\n    \"\"\"Check if the given number contains only the specified digits\"\"\"\n    return all(digit in str(num) for digit in digits)\n\ndef g(num=13579, digits=[1, 3, 5, 7, 9]):\n    \"\"\"Concatenate the given digits to form a number\"\"\"\n    return int(''.join(str(digit) for digit in digits))\n\nassert f(g())\n", "emb": null, "idx_generation": 466, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int, digits=[1, 3, 5, 7, 9]) -> bool:\n    \"\"\"Check if the given number contains only the specified digits\"\"\"\n    return all(digit in str(num) for digit in digits)", "solution_func": "def g(num=13579, digits=[1, 3, 5, 7, 9]):\n    \"\"\"Concatenate the given digits to form a number\"\"\"\n    return int(''.join(str(digit) for digit in digits))", "map_ix": null}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: int, a=2, b=1) -> bool:\n    \"\"\"Check if the square root of x plus a is equal to b.\"\"\"\n    return sqrt(x + a) == b\n\ndef g(a=2, b=1):\n    return b**2 - a\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 466, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: int, a=2, b=1) -> bool:\n    \"\"\"Check if the square root of x plus a is equal to b.\"\"\"\n    return sqrt(x + a) == b", "solution_func": "def g(a=2, b=1):\n    return b**2 - a", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: int, y: int, z: int, a=5, b=10, c=15) -> bool:\n    \"\"\"Check if the sum of three numbers is equal to the sum of three variables\"\"\"\n    return x + y + z == a + b + c\ndef g(a=5, b=10, c=15):\n    x = a + b + c\n    y = a + b + c\n    z = a + b + c\n    return x, y, z\nassert f(*g())\n", "emb": null, "idx_generation": 467, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, y: int, z: int, a=5, b=10, c=15) -> bool:\n    \"\"\"Check if the sum of three numbers is equal to the sum of three variables\"\"\"\n    return x + y + z == a + b + c", "solution_func": "def g(a=5, b=10, c=15):\n    x = a + b + c\n    y = a + b + c\n    z = a + b + c\n    return x, y, z", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=5.0, b=10.0, c=15.0) -> bool:\n    \"\"\"Check if the sum of the square roots of three numbers is equal to the sum of the square roots of three variables\"\"\"\n    return math.sqrt(x) + math.sqrt(y) + math.sqrt(z) == math.sqrt(a) + math.sqrt(b) + math.sqrt(c)\ndef g(a=5.0, b=10.0, c=15.0):\n    x = a**2\n    y = b**2\n    z = c**2\n    return x, y, z\nassert f(*g())\n", "emb": null, "idx_generation": 467, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=5.0, b=10.0, c=15.0) -> bool:\n    \"\"\"Check if the sum of the square roots of three numbers is equal to the sum of the square roots of three variables\"\"\"\n    return math.sqrt(x) + math.sqrt(y) + math.sqrt(z) == math.sqrt(a) + math.sqrt(b) + math.sqrt(c)", "solution_func": "def g(a=5.0, b=10.0, c=15.0):\n    x = a**2\n    y = b**2\n    z = c**2\n    return x, y, z", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: str, y: str, z: str, a='hello', b='world', c='python') -> bool:\n    \"\"\"Check if the concatenation of three strings is equal to the concatenation of three variables\"\"\"\n    return x + y + z == a + b + c\ndef g(a='hello', b='world', c='python'):\n    x = a\n    y = b\n    z = c\n    return x, y, z\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 467, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str, y: str, z: str, a='hello', b='world', c='python') -> bool:\n    \"\"\"Check if the concatenation of three strings is equal to the concatenation of three variables\"\"\"\n    return x + y + z == a + b + c", "solution_func": "def g(a='hello', b='world', c='python'):\n    x = a\n    y = b\n    z = c\n    return x, y, z", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n: int, target: str) -> bool:\n    \"\"\"Check if a given string has the same number of occurrences of a given character as the target string.\"\"\"\n    return s.count(chr(n)) == target.count(chr(n))\ndef g(n=97, target='apple'):\n    return target.replace('p', chr(n))\nassert f(g())\n", "emb": null, "idx_generation": 467, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int, target: str) -> bool:\n    \"\"\"Check if a given string has the same number of occurrences of a given character as the target string.\"\"\"\n    return s.count(chr(n)) == target.count(chr(n))", "solution_func": "def g(n=97, target='apple'):\n    return target.replace('p', chr(n))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], target: int, method: str) -> bool:\n    \"\"\"Check if a given list of integers can be sorted to obtain a target list using a given method.\"\"\"\n    if method == 'bubble':\n        for i in range(len(lst)):\n            for j in range(len(lst) - 1):\n                if lst[j] > lst[j + 1]:\n                    lst[j], lst[j + 1] = lst[j + 1], lst[j]\n    elif method == 'selection':\n        for i in range(len(lst)):\n            min_idx = i\n            for j in range(i + 1, len(lst)):\n                if lst[j] < lst[min_idx]:\n                    min_idx = j\n            lst[i], lst[min_idx] = lst[min_idx], lst[i]\n    elif method == 'insertion':\n        for i in range(1, len(lst)):\n            key = lst[i]\n            j = i - 1\n            while j >= 0 and lst[j] > key:\n                lst[j + 1] = lst[j]\n                j -= 1\n            lst[j + 1] = key\n    return lst == target\ndef g(lst=[5, 2, 4, 6, 1, 3], target=[1, 2, 3, 4, 5, 6], method='selection'):\n    return lst, target, method\nassert f(g())\n", "emb": null, "idx_generation": 467, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target: int, method: str) -> bool:\n    \"\"\"Check if a given list of integers can be sorted to obtain a target list using a given method.\"\"\"\n    if method == 'bubble':\n        for i in range(len(lst)):\n            for j in range(len(lst) - 1):\n                if lst[j] > lst[j + 1]:\n                    lst[j], lst[j + 1] = lst[j + 1], lst[j]\n    elif method == 'selection':\n        for i in range(len(lst)):\n            min_idx = i\n            for j in range(i + 1, len(lst)):\n                if lst[j] < lst[min_idx]:\n                    min_idx = j\n            lst[i], lst[min_idx] = lst[min_idx], lst[i]\n    elif method == 'insertion':\n        for i in range(1, len(lst)):\n            key = lst[i]\n            j = i - 1\n            while j >= 0 and lst[j] > key:\n                lst[j + 1] = lst[j]\n                j -= 1\n            lst[j + 1] = key\n    return lst == target", "solution_func": "def g(lst=[5, 2, 4, 6, 1, 3], target=[1, 2, 3, 4, 5, 6], method='selection'):\n    return lst, target, method", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int, method: str) -> bool:\n    \"\"\"Check if a given matrix can be transformed to obtain a target matrix using a given method.\"\"\"\n    if method == 'rotate':\n        n = len(matrix)\n        m = len(matrix[0])\n        rotated = [[0] * n for _ in range(m)]\n        for i in range(n):\n            for j in range(m):\n                rotated[j][n - i - 1] = matrix[i][j]\n        return rotated == target\n    elif method == 'flip':\n        flipped = [row[::-1] for row in matrix]\n        return flipped == target\n    elif method == 'transpose':\n        transposed = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n        return transposed == target\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=[[7, 4, 1], [8, 5, 2], [9, 6, 3]], method='rotate'):\n    return matrix, target, method\nassert f(g())\n", "emb": null, "idx_generation": 467, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int, method: str) -> bool:\n    \"\"\"Check if a given matrix can be transformed to obtain a target matrix using a given method.\"\"\"\n    if method == 'rotate':\n        n = len(matrix)\n        m = len(matrix[0])\n        rotated = [[0] * n for _ in range(m)]\n        for i in range(n):\n            for j in range(m):\n                rotated[j][n - i - 1] = matrix[i][j]\n        return rotated == target\n    elif method == 'flip':\n        flipped = [row[::-1] for row in matrix]\n        return flipped == target\n    elif method == 'transpose':\n        transposed = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n        return transposed == target\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=[[7, 4, 1], [8, 5, 2], [9, 6, 3]], method='rotate'):\n    return matrix, target, method", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, d: int, t: int, n: int) -> bool:\n    \"\"\"Check if there is a substring of length n in s that contains exactly d digits and the sum of those digits is divisible by t.\"\"\"\n    substrings = [s[i:i+n] for i in range(len(s)-n+1)]\n    for substr in substrings:\n        if sum(int(digit) for digit in substr if digit.isdigit()) % t == 0 and sum(1 for digit in substr if digit.isdigit()) == d:\n            return True\n    return False\n\ndef g(d: int, t: int, n: int):\n    return str(d) * n + 'a' * (n - d)\n\nassert f(g())\n", "emb": null, "idx_generation": 467, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, d: int, t: int, n: int) -> bool:\n    \"\"\"Check if there is a substring of length n in s that contains exactly d digits and the sum of those digits is divisible by t.\"\"\"\n    substrings = [s[i:i+n] for i in range(len(s)-n+1)]\n    for substr in substrings:\n        if sum(int(digit) for digit in substr if digit.isdigit()) % t == 0 and sum(1 for digit in substr if digit.isdigit()) == d:\n            return True\n    return False", "solution_func": "def g(d: int, t: int, n: int):\n    return str(d) * n + 'a' * (n - d)", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"Check if there exists a subset of nums whose sum is divisible by k.\"\"\"\n    for r in range(1, len(nums) + 1):\n        for subset in combinations(nums, r):\n            if sum(subset) % k == 0:\n                return True\n    return False\n\ndef g(k: int):\n    return list(range(1, k + 1))\n\nassert f(g())\n", "emb": null, "idx_generation": 467, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"Check if there exists a subset of nums whose sum is divisible by k.\"\"\"\n    for r in range(1, len(nums) + 1):\n        for subset in combinations(nums, r):\n            if sum(subset) % k == 0:\n                return True\n    return False", "solution_func": "def g(k: int):\n    return list(range(1, k + 1))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, k: int, nums: List[int]) -> bool:\n    \"\"\"Check if there exists a subarray of nums whose sum is divisible by k and has exactly n elements.\"\"\"\n    prefix_sums = [0]\n    for num in nums:\n        prefix_sums.append((prefix_sums[-1] + num) % k)\n    count = {}\n    for prefix_sum in prefix_sums:\n        count[prefix_sum] = count.get(prefix_sum, 0) + 1\n    for val in count.values():\n        if val >= n:\n            return True\n    return False\n\ndef g(n: int, k: int, nums: List[int]):\n    return nums\n\nassert f(g())", "emb": null, "idx_generation": 467, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k: int, nums: List[int]) -> bool:\n    \"\"\"Check if there exists a subarray of nums whose sum is divisible by k and has exactly n elements.\"\"\"\n    prefix_sums = [0]\n    for num in nums:\n        prefix_sums.append((prefix_sums[-1] + num) % k)\n    count = {}\n    for prefix_sum in prefix_sums:\n        count[prefix_sum] = count.get(prefix_sum, 0) + 1\n    for val in count.values():\n        if val >= n:\n            return True\n    return False", "solution_func": "def g(n: int, k: int, nums: List[int]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"\n    Given a list of integers, find a pair of numbers that sum up to the target value.\n\n    Example:\n    nums = [2, 4, 6, 8]\n    target = 10\n    output: True\n\n    Explanation: The pair of numbers (2, 8) sum up to the target value of 10.\n    \"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target = 7):\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 467, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"\n    Given a list of integers, find a pair of numbers that sum up to the target value.\n\n    Example:\n    nums = [2, 4, 6, 8]\n    target = 10\n    output: True\n\n    Explanation: The pair of numbers (2, 8) sum up to the target value of 10.\n    \"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g(target = 7):\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if two numbers are co-prime.\"\"\"\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return gcd(n, m) == 1\ndef g(n = 15, m = 28):\n    return (n, m)\nassert f(g())\n", "emb": null, "idx_generation": 468, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if two numbers are co-prime.\"\"\"\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return gcd(n, m) == 1", "solution_func": "def g(n = 15, m = 28):\n    return (n, m)", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return n >= 0 and int(n ** 0.5) ** 2 == n\ndef g():\n    import random\n    return random.randint(1, 1000)\nassert f(g())\n", "emb": null, "idx_generation": 468, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return n >= 0 and int(n ** 0.5) ** 2 == n", "solution_func": "def g():\n    import random\n    return random.randint(1, 1000)", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a power of 2.\"\"\"\n    return n > 0 and (n & (n - 1)) == 0\ndef g():\n    import random\n    return random.randint(1, 1000)\nassert f(g())\n", "emb": null, "idx_generation": 468, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a power of 2.\"\"\"\n    return n > 0 and (n & (n - 1)) == 0", "solution_func": "def g():\n    import random\n    return random.randint(1, 1000)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, determine whether there exists a subset of the list\n    whose sum is equal to the target sum.\n    \"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target_sum + 1)] for _ in range(n + 1)]\n    \n    for i in range(n + 1):\n        dp[i][0] = True\n    \n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    \n    return dp[n][target_sum]\n\ndef g(nums: List[int], target_sum: int):\n    return random.sample(nums, random.randint(1, len(nums)))\n\nassert f(g([1, 2, 3, 4, 5], 10), 10)\n", "emb": [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 468, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, determine whether there exists a subset of the list\n    whose sum is equal to the target sum.\n    \"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target_sum + 1)] for _ in range(n + 1)]\n    \n    for i in range(n + 1):\n        dp[i][0] = True\n    \n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    \n    return dp[n][target_sum]", "solution_func": "def g(nums: List[int], target_sum: int):\n    return random.sample(nums, random.randint(1, len(nums)))", "map_ix": [1, 1, 1, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, target_value: int = 100) -> bool:\n    \"\"\"\n    Find the smallest prime number that is greater than or equal to target_value.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    while True:\n        if is_prime(target_value):\n            return target_value\n        target_value += 1\n\ndef g(target_value: int = 100):\n    return target_value\n\nassert f(g(100), 100)\n", "emb": null, "idx_generation": 468, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, target_value: int = 100) -> bool:\n    \"\"\"\n    Find the smallest prime number that is greater than or equal to target_value.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    while True:\n        if is_prime(target_value):\n            return target_value\n        target_value += 1", "solution_func": "def g(target_value: int = 100):\n    return target_value", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string1: str, string2: str) -> bool:\n    \"\"\"\n    Check if two strings are anagrams of each other.\n    \"\"\"\n    return sorted(string1) == sorted(string2)\n\ndef g(string1: str, string2: str):\n    return string1[::-1], string2[::-1]\n\nassert f(*g(\"hello\", \"olleh\"))\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 468, "target_skills": null, "problem_func": "from typing import*\ndef f(string1: str, string2: str) -> bool:\n    \"\"\"\n    Check if two strings are anagrams of each other.\n    \"\"\"\n    return sorted(string1) == sorted(string2)", "solution_func": "def g(string1: str, string2: str):\n    return string1[::-1], string2[::-1]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Find two numbers in the list that add up to the target.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 468, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Find two numbers in the list that add up to the target.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"\n    Check if there exists a path in the matrix that adds up to the target.\n    \"\"\"\n    def dfs(row, col, total):\n        if row < 0 or row >= len(matrix) or col < 0 or col >= len(matrix[0]):\n            return False\n        total += matrix[row][col]\n        if total == target:\n            return True\n        return dfs(row + 1, col, total) or dfs(row, col + 1, total)\n    \n    return dfs(0, 0, 0)\ndef g(target = 15):\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 468, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"\n    Check if there exists a path in the matrix that adds up to the target.\n    \"\"\"\n    def dfs(row, col, total):\n        if row < 0 or row >= len(matrix) or col < 0 or col >= len(matrix[0]):\n            return False\n        total += matrix[row][col]\n        if total == target:\n            return True\n        return dfs(row + 1, col, total) or dfs(row, col + 1, total)\n    \n    return dfs(0, 0, 0)", "solution_func": "def g(target = 15):\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substrings=['cat', 'dog']) -> bool:\n    \"\"\"\n    Find a string that contains each string in substrings concatenated together, e.g., 'catdog' for 'cat' and 'dog'\n    \"\"\"\n    substring_set = set(substrings)\n    i = 0\n    while i < len(s):\n        for j in range(i + 1, len(s) + 1):\n            if s[i:j] in substring_set:\n                substring_set.remove(s[i:j])\n                i = j\n                break\n        else:\n            i += 1\n    return len(substring_set) == 0\ndef g(substrings = ['cat', 'dog']):\n    return \"cadaotg\"\nassert f(g())\n", "emb": null, "idx_generation": 468, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=['cat', 'dog']) -> bool:\n    \"\"\"\n    Find a string that contains each string in substrings concatenated together, e.g., 'catdog' for 'cat' and 'dog'\n    \"\"\"\n    substring_set = set(substrings)\n    i = 0\n    while i < len(s):\n        for j in range(i + 1, len(s) + 1):\n            if s[i:j] in substring_set:\n                substring_set.remove(s[i:j])\n                i = j\n                break\n        else:\n            i += 1\n    return len(substring_set) == 0", "solution_func": "def g(substrings = ['cat', 'dog']):\n    return \"cadaotg\"", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers such that they add up to a specific target number.\n\n    Example:\n    nums = [2, 7, 11, 15]\n    target = 9\n    output: True\n\n    Explanation: 2 + 7 = 9\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums = [2, 7, 11, 15], target = 9):\n    return nums, target\n\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 468, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers such that they add up to a specific target number.\n\n    Example:\n    nums = [2, 7, 11, 15]\n    target = 9\n    output: True\n\n    Explanation: 2 + 7 = 9\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums = [2, 7, 11, 15], target = 9):\n    return nums, target", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n: int, m: int) -> bool:\n    \"\"\"Check if there exists a substring of length n that occurs at least m times in s.\"\"\"\n    count = 0\n    for i in range(len(s) - n + 1):\n        if s[i:i+n] == s[i+n:i+2*n]:\n            count += 1\n            if count == m:\n                return True\n    return False\n\ndef g(s: str = \"abababababab\", n: int = 2, m: int = 3):\n    return s\n\nassert f(g(), n=2, m=3)\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 469, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int, m: int) -> bool:\n    \"\"\"Check if there exists a substring of length n that occurs at least m times in s.\"\"\"\n    count = 0\n    for i in range(len(s) - n + 1):\n        if s[i:i+n] == s[i+n:i+2*n]:\n            count += 1\n            if count == m:\n                return True\n    return False", "solution_func": "def g(s: str = \"abababababab\", n: int = 2, m: int = 3):\n    return s", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return nums, target\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 469, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is symmetric across the main diagonal.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 469, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is symmetric across the main diagonal.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int, mode='sum', threshold=100) -> bool:\n    \"\"\"Check if the sum or product of the list of integers meets the given condition\"\"\"\n    if mode == 'sum':\n        return sum(nums) > threshold and target in nums\n    elif mode == 'product':\n        product = 1\n        for num in nums:\n            product *= num\n        return product > threshold and target in nums\n    else:\n        return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=3, mode='sum', threshold=100):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 469, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, mode='sum', threshold=100) -> bool:\n    \"\"\"Check if the sum or product of the list of integers meets the given condition\"\"\"\n    if mode == 'sum':\n        return sum(nums) > threshold and target in nums\n    elif mode == 'product':\n        product = 1\n        for num in nums:\n            product *= num\n        return product > threshold and target in nums\n    else:\n        return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=3, mode='sum', threshold=100):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(words: List[str], target: str, mode='anagram') -> bool:\n    \"\"\"Check if the target word can be formed from the list of words\"\"\"\n    if mode == 'anagram':\n        perms = [''.join(p) for p in permutations(target)]\n        return any(p in words for p in perms)\n    elif mode == 'substring':\n        return any(target in word for word in words)\n    else:\n        return False\n\ndef g(words=['cat', 'dog', 'tac', 'god'], target='act', mode='anagram'):\n    return words\n\nassert f(g())\n", "emb": null, "idx_generation": 469, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(words: List[str], target: str, mode='anagram') -> bool:\n    \"\"\"Check if the target word can be formed from the list of words\"\"\"\n    if mode == 'anagram':\n        perms = [''.join(p) for p in permutations(target)]\n        return any(p in words for p in perms)\n    elif mode == 'substring':\n        return any(target in word for word in words)\n    else:\n        return False", "solution_func": "def g(words=['cat', 'dog', 'tac', 'god'], target='act', mode='anagram'):\n    return words", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int, mode='row_sum') -> bool:\n    \"\"\"Check if the sum or product of the rows or columns of the matrix meet the given condition\"\"\"\n    if mode == 'row_sum':\n        return any(sum(row) == target for row in matrix)\n    elif mode == 'col_sum':\n        return any(sum(col) == target for col in zip(*matrix))\n    elif mode == 'row_product':\n        return any(prod(row) == target for row in matrix)\n    elif mode == 'col_product':\n        return any(prod(col) == target for col in zip(*matrix))\n    else:\n        return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=15, mode='row_sum'):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 469, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int, mode='row_sum') -> bool:\n    \"\"\"Check if the sum or product of the rows or columns of the matrix meet the given condition\"\"\"\n    if mode == 'row_sum':\n        return any(sum(row) == target for row in matrix)\n    elif mode == 'col_sum':\n        return any(sum(col) == target for col in zip(*matrix))\n    elif mode == 'row_product':\n        return any(prod(row) == target for row in matrix)\n    elif mode == 'col_product':\n        return any(prod(col) == target for col in zip(*matrix))\n    else:\n        return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=15, mode='row_sum'):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(dt: datetime, y=2022, m=12, d=31) -> bool:\n    \"\"\"Check if a given date is in the future\"\"\"\n    return dt > datetime(y, m, d)\n    \ndef g(y=2022, m=12, d=31):\n    return datetime.now()\n    \nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 469, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(dt: datetime, y=2022, m=12, d=31) -> bool:\n    \"\"\"Check if a given date is in the future\"\"\"\n    return dt > datetime(y, m, d)", "solution_func": "def g(y=2022, m=12, d=31):\n    return datetime.now()", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Check if a number is divisible by either a or b\"\"\"\n    return n % a == 0 or n % b == 0\n    \ndef g(a=2, b=3):\n    return a * b\n    \nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 469, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Check if a number is divisible by either a or b\"\"\"\n    return n % a == 0 or n % b == 0", "solution_func": "def g(a=2, b=3):\n    return a * b", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=3, b=5) -> bool:\n    \"\"\"Check if the square root of x is between a and b\"\"\"\n    return a < math.sqrt(x) < b\n    \ndef g(a=3, b=5):\n    return (a + b) ** 2\n    \nassert f(g())\n", "emb": null, "idx_generation": 469, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=3, b=5) -> bool:\n    \"\"\"Check if the square root of x is between a and b\"\"\"\n    return a < math.sqrt(x) < b", "solution_func": "def g(a=3, b=5):\n    return (a + b) ** 2", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, substring='puzzle', count=3, length=15) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'puzzle', count = 3, length = 15):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g())\n", "emb": null, "idx_generation": 469, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring='puzzle', count=3, length=15) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length", "solution_func": "def g(substring = 'puzzle', count = 3, length = 15):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string contains exactly n vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return len([c for c in s if c.lower() in vowels]) == n\ndef g(n = 3):\n    return 'a' * n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 470, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string contains exactly n vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return len([c for c in s if c.lower() in vowels]) == n", "solution_func": "def g(n = 3):\n    return 'a' * n", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(li: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    return any((li[i] + li[j] == target for i in range(len(li)) for j in range(i+1, len(li))))\ndef g(target = 10):\n    return [1, 2, 3]\nassert f(g())\n", "emb": null, "idx_generation": 470, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    return any((li[i] + li[j] == target for i in range(len(li)) for j in range(i+1, len(li))))", "solution_func": "def g(target = 10):\n    return [1, 2, 3]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=10) -> bool:\n    \"\"\"Check if the given number is a perfect square and is divisible by x\"\"\"\n    return math.isqrt(n)**2 == n and n % x == 0\ndef g(x = 10):\n    return x**2\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 470, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=10) -> bool:\n    \"\"\"Check if the given number is a perfect square and is divisible by x\"\"\"\n    return math.isqrt(n)**2 == n and n % x == 0", "solution_func": "def g(x = 10):\n    return x**2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substring=\"abc\", count=3) -> bool:\n    \"\"\"Check if a string contains a certain substring a certain number of times\"\"\"\n    return string.count(substring) == count\ndef g(substring=\"abc\", count=3):\n    string = substring * count\n    return string\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 470, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring=\"abc\", count=3) -> bool:\n    \"\"\"Check if a string contains a certain substring a certain number of times\"\"\"\n    return string.count(substring) == count", "solution_func": "def g(substring=\"abc\", count=3):\n    string = substring * count\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(num: int, nums=[2, 4, 6, 8, 10], target=20) -> bool:\n    \"\"\"Check if a number can be obtained by summing up any combination of numbers in a list\"\"\"\n    return any(sum(combination) == num for r in range(len(nums) + 1) for combination in combinations(nums, r))\ndef g(nums=[2, 4, 6, 8, 10], target=20):\n    for r in range(len(nums) + 1):\n        for combination in combinations(nums, r):\n            if sum(combination) == target:\n                return True\n    return False\nassert f(g())\n", "emb": null, "idx_generation": 470, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int, nums=[2, 4, 6, 8, 10], target=20) -> bool:\n    \"\"\"Check if a number can be obtained by summing up any combination of numbers in a list\"\"\"\n    return any(sum(combination) == num for r in range(len(nums) + 1) for combination in combinations(nums, r))", "solution_func": "def g(nums=[2, 4, 6, 8, 10], target=20):\n    for r in range(len(nums) + 1):\n        for combination in combinations(nums, r):\n            if sum(combination) == target:\n                return True\n    return False", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3, target=6) -> bool:\n    \"\"\"Check if there exists a combination of elements in a matrix that sums up to a target number\"\"\"\n    return any(sum(combination) == target for combination in combinations(chain(*matrix), n))\ndef g(n=3, target=6):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    for combination in combinations(chain(*matrix), n):\n        if sum(combination) == target:\n            return True\n    return False\nassert f(g())\n", "emb": null, "idx_generation": 470, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3, target=6) -> bool:\n    \"\"\"Check if there exists a combination of elements in a matrix that sums up to a target number\"\"\"\n    return any(sum(combination) == target for combination in combinations(chain(*matrix), n))", "solution_func": "def g(n=3, target=6):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    for combination in combinations(chain(*matrix), n):\n        if sum(combination) == target:\n            return True\n    return False", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are three distinct indices i, j, k such that arr[i] + arr[j] + arr[k] = target\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], target=10):\n    return arr\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 470, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are three distinct indices i, j, k such that arr[i] + arr[j] + arr[k] = target\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False", "solution_func": "def g(arr=[1, 2, 3, 4, 5], target=10):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D matrix, determine if it is a symmetric matrix.\n\n    Sample Input:\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 470, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D matrix, determine if it is a symmetric matrix.\n\n    Sample Input:\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Given two integers n and k, find if the binary representation of n can be rearranged such that it forms a number\n    divisible by k.\n\n    Sample Input:\n    n = 110\n    k = 2\n\n    Sample Output:\n    True\n    \"\"\"\n    binary = bin(n)[2:]\n    for perm in permutations(binary):\n        num = int(''.join(perm), 2)\n        if num % k == 0:\n            return True\n    return False\n\ndef g(n=110, k=2):\n    return n, k\n\nassert f(*g())\n", "emb": null, "idx_generation": 470, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Given two integers n and k, find if the binary representation of n can be rearranged such that it forms a number\n    divisible by k.\n\n    Sample Input:\n    n = 110\n    k = 2\n\n    Sample Output:\n    True\n    \"\"\"\n    binary = bin(n)[2:]\n    for perm in permutations(binary):\n        num = int(''.join(perm), 2)\n        if num % k == 0:\n            return True\n    return False", "solution_func": "def g(n=110, k=2):\n    return n, k", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(ans: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers, find the number of integers that are divisible by 3.\n    \"\"\"\n    count = 0\n    for num in ans:\n        if num % 3 == 0:\n            count += 1\n    return count == target\n\ndef g(target = 0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9] * target\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 470, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(ans: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers, find the number of integers that are divisible by 3.\n    \"\"\"\n    count = 0\n    for num in ans:\n        if num % 3 == 0:\n            count += 1\n    return count == target", "solution_func": "def g(target = 0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9] * target", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(arr: list, target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    return any((arr[i] + arr[j] == target) for i in range(len(arr)) for j in range(i+1, len(arr)))\n\ndef g(arr_length = 10, target = 100):\n    arr = [random.randint(1, 100) for _ in range(arr_length)]\n    return arr\n\nassert f(g(), 100)\n", "emb": null, "idx_generation": 471, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(arr: list, target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    return any((arr[i] + arr[j] == target) for i in range(len(arr)) for j in range(i+1, len(arr)))", "solution_func": "def g(arr_length = 10, target = 100):\n    arr = [random.randint(1, 100) for _ in range(arr_length)]\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport math\n\ndef f(n: int, x: int) -> bool:\n    \"\"\"Check if x is a prime factor of n.\"\"\"\n    return n % x == 0 and all(n % i != 0 for i in range(2, int(math.sqrt(x)) + 1))\n\ndef g(n = 100):\n    x = random.randint(2, n)\n    return x\n\nassert f(n=100, x=g())\n", "emb": null, "idx_generation": 471, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport math\n\ndef f(n: int, x: int) -> bool:\n    \"\"\"Check if x is a prime factor of n.\"\"\"\n    return n % x == 0 and all(n % i != 0 for i in range(2, int(math.sqrt(x)) + 1))", "solution_func": "def g(n = 100):\n    x = random.randint(2, n)\n    return x", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if the target string is a substring of s.\"\"\"\n    return target in s\n\ndef g(s_length = 100, target_length = 5):\n    s = ''.join(random.choices(string.ascii_lowercase, k=s_length))\n    target = ''.join(random.choices(string.ascii_lowercase, k=target_length))\n    return s, target\n\nassert f(*g())\n", "emb": null, "idx_generation": 471, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if the target string is a substring of s.\"\"\"\n    return target in s", "solution_func": "def g(s_length = 100, target_length = 5):\n    s = ''.join(random.choices(string.ascii_lowercase, k=s_length))\n    target = ''.join(random.choices(string.ascii_lowercase, k=target_length))\n    return s, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"\n    Determine if a number is a prime number.\n    \"\"\"\n    if n < 2:\n        return False\n    for p in primes:\n        if n % p == 0:\n            return False\n    return True\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    n = primes[-1] + 1\n    while not f(n):\n        n += 1\n    return n\nassert f(g())\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 471, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"\n    Determine if a number is a prime number.\n    \"\"\"\n    if n < 2:\n        return False\n    for p in primes:\n        if n % p == 0:\n            return False\n    return True", "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    n = primes[-1] + 1\n    while not f(n):\n        n += 1\n    return n", "map_ix": [1, 0, 1, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"\n    Determine if a string contains a given substring.\n    \"\"\"\n    return substr in s\ndef g(substr='python'):\n    s = 'I love programming in Python.'\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 471, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"\n    Determine if a string contains a given substring.\n    \"\"\"\n    return substr in s", "solution_func": "def g(substr='python'):\n    s = 'I love programming in Python.'\n    return s", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int], target_sum=12) -> bool:\n    \"\"\"\n    Find if there are two numbers in a list that sum up to a target value.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=12):\n    lst = [1, 5, 7, 9, 11]\n    return lst\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 471, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target_sum=12) -> bool:\n    \"\"\"\n    Find if there are two numbers in a list that sum up to a target value.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(target_sum=12):\n    lst = [1, 5, 7, 9, 11]\n    return lst", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return n in primes\ndef g(n: int):\n    return n\nassert f(g(67))\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 471, "target_skills": null, "problem_func": "from typing import*\nimport math\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return n in primes", "solution_func": "def g(n: int):\n    return n", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if a string contains a specific substring.\"\"\"\n    return substring in s\ndef g(substring='python'):\n    return \"I love \" + substring\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 471, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if a string contains a specific substring.\"\"\"\n    return substring in s", "solution_func": "def g(substring='python'):\n    return \"I love \" + substring", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return math.isqrt(n)**2 == n\ndef g():\n    return 25\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 471, "target_skills": null, "problem_func": "import math\nfrom typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return math.isqrt(n)**2 == n", "solution_func": "def g():\n    return 25", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[8273, 4637, 1269, 632, 316]) -> bool:\n    \"\"\"Check if the sum of the factors of n is equal to n.\"\"\"\n    return sum((i for i in range(1, n+1) if n % i == 0)) == n\ndef g(nums=[8273, 4637, 1269, 632, 316]):\n    n = max(nums)\n    return n\nassert f(g())\n", "emb": null, "idx_generation": 471, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[8273, 4637, 1269, 632, 316]) -> bool:\n    \"\"\"Check if the sum of the factors of n is equal to n.\"\"\"\n    return sum((i for i in range(1, n+1) if n % i == 0)) == n", "solution_func": "def g(nums=[8273, 4637, 1269, 632, 316]):\n    n = max(nums)\n    return n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, threshold=0.5) -> bool:\n    \"\"\"\n    Check if the Euclidean distance between the point (x, y, z) and the origin is greater than the threshold.\n    \"\"\"\n    distance = math.sqrt(x**2 + y**2 + z**2)\n    return distance > threshold\n\ndef g(x=0, y=0, z=0, threshold=0.5):\n    return (x, y, z)\n\nassert f(*g())\n", "emb": null, "idx_generation": 472, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, threshold=0.5) -> bool:\n    \"\"\"\n    Check if the Euclidean distance between the point (x, y, z) and the origin is greater than the threshold.\n    \"\"\"\n    distance = math.sqrt(x**2 + y**2 + z**2)\n    return distance > threshold", "solution_func": "def g(x=0, y=0, z=0, threshold=0.5):\n    return (x, y, z)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst: list, target: int) -> bool:\n    \"\"\"\n    Check if there exist n distinct numbers in the list lst that sum up to the target.\n    \"\"\"\n    combinations = random.sample(lst, n)\n    return sum(combinations) == target\n\ndef g(n=3, lst=[1, 2, 3, 4, 5], target=10):\n    return (n, lst, target)\n\nassert f(*g())\n", "emb": null, "idx_generation": 472, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(n: int, lst: list, target: int) -> bool:\n    \"\"\"\n    Check if there exist n distinct numbers in the list lst that sum up to the target.\n    \"\"\"\n    combinations = random.sample(lst, n)\n    return sum(combinations) == target", "solution_func": "def g(n=3, lst=[1, 2, 3, 4, 5], target=10):\n    return (n, lst, target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substr: str, case_sensitive=True) -> bool:\n    \"\"\"\n    Check if the substring substr is present in the string s.\n    The case_sensitive flag determines whether the search is case sensitive or not.\n    \"\"\"\n    if case_sensitive:\n        return substr in s\n    else:\n        return substr.lower() in s.lower()\n\ndef g(s='Hello, World!', substr='hello', case_sensitive=True):\n    return (s, substr, case_sensitive)\n\nassert f(*g())\n", "emb": null, "idx_generation": 472, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr: str, case_sensitive=True) -> bool:\n    \"\"\"\n    Check if the substring substr is present in the string s.\n    The case_sensitive flag determines whether the search is case sensitive or not.\n    \"\"\"\n    if case_sensitive:\n        return substr in s\n    else:\n        return substr.lower() in s.lower()", "solution_func": "def g(s='Hello, World!', substr='hello', case_sensitive=True):\n    return (s, substr, case_sensitive)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=13, b=5) -> bool:\n    \"\"\"Check if the sum of n and b is equal to a\"\"\"\n    return n + b == a\ndef g(a = 13, b = 5):\n    return a - b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 472, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=13, b=5) -> bool:\n    \"\"\"Check if the sum of n and b is equal to a\"\"\"\n    return n + b == a", "solution_func": "def g(a = 13, b = 5):\n    return a - b", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=100, b=7) -> bool:\n    \"\"\"Check if the product of a and b is equal to n\"\"\"\n    return a * b == n\ndef g(a = 100, b = 7):\n    return a * b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 472, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=100, b=7) -> bool:\n    \"\"\"Check if the product of a and b is equal to n\"\"\"\n    return a * b == n", "solution_func": "def g(a = 100, b = 7):\n    return a * b", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=20, b=6) -> bool:\n    \"\"\"Check if n divided by a is equal to b\"\"\"\n    return n // a == b\ndef g(a = 20, b = 6):\n    return a * b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 472, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=20, b=6) -> bool:\n    \"\"\"Check if n divided by a is equal to b\"\"\"\n    return n // a == b", "solution_func": "def g(a = 20, b = 6):\n    return a * b", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find a combination of numbers that add up to a specific target.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(len(nums)+1) for comb in combinations(nums, r))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 472, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find a combination of numbers that add up to a specific target.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(len(nums)+1) for comb in combinations(nums, r))", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if a target number exists in a given matrix.\"\"\"\n    return any(target in row for row in matrix)\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 472, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if a target number exists in a given matrix.\"\"\"\n    return any(target in row for row in matrix)", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nimport math\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a combination of numbers that multiply to a specific target.\"\"\"\n    from itertools import combinations\n    return any(prod(comb) == target for r in range(len(nums)+1) for comb in combinations(nums, r))\ndef g(nums=[10, 20, 30, 40, 50]):\n    from math import prod\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 472, "target_skills": null, "problem_func": "import itertools\nimport math\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a combination of numbers that multiply to a specific target.\"\"\"\n    from itertools import combinations\n    return any(prod(comb) == target for r in range(len(nums)+1) for comb in combinations(nums, r))", "solution_func": "def g(nums=[10, 20, 30, 40, 50]):\n    from math import prod\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='apple') -> bool:\n    \"\"\"Check if the given string ends with the target string.\"\"\"\n    return s.endswith(target)\ndef g(target='apple'):\n    return 'pineapple'.replace('pine', target)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 472, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='apple') -> bool:\n    \"\"\"Check if the given string ends with the target string.\"\"\"\n    return s.endswith(target)", "solution_func": "def g(target='apple'):\n    return 'pineapple'.replace('pine', target)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, keyword: str = \"python\") -> bool:\n    \"\"\"Check if a given keyword is present in a string\"\"\"\n    return keyword.lower() in string.lower()\ndef g(keyword: str = \"python\"):\n    return f\"This is a string containing the keyword {keyword}\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 473, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, keyword: str = \"python\") -> bool:\n    \"\"\"Check if a given keyword is present in a string\"\"\"\n    return keyword.lower() in string.lower()", "solution_func": "def g(keyword: str = \"python\"):\n    return f\"This is a string containing the keyword {keyword}\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int = 10) -> bool:\n    \"\"\"Check if a target number is present in a given matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target: int = 10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 473, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int = 10) -> bool:\n    \"\"\"Check if a target number is present in a given matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(target: int = 10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], n: int, target: int = 100) -> bool:\n    \"\"\"\n    Find n numbers from a list that sum up to a target number\n    \"\"\"\n    from itertools import combinations\n    for combo in combinations(numbers, n):\n        if sum(combo) == target:\n            return True\n    return False\ndef g(n: int, target: int = 100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n", "emb": null, "idx_generation": 473, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(numbers: List[int], n: int, target: int = 100) -> bool:\n    \"\"\"\n    Find n numbers from a list that sum up to a target number\n    \"\"\"\n    from itertools import combinations\n    for combo in combinations(numbers, n):\n        if sum(combo) == target:\n            return True\n    return False", "solution_func": "def g(n: int, target: int = 100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target number, find a pair of numbers in the list that sum up to the target.\n    Return True if such a pair exists, and False otherwise.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of numbers and a target number, find a pair of numbers in the list that sum up to the target.\n    Return the pair of numbers if such a pair exists, and an empty list otherwise.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return [numbers[i], numbers[j]]\n    return []\n\nassert f(g()) == True", "emb": null, "idx_generation": 473, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target number, find a pair of numbers in the list that sum up to the target.\n    Return True if such a pair exists, and False otherwise.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False", "solution_func": "def g(numbers: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of numbers and a target number, find a pair of numbers in the list that sum up to the target.\n    Return the pair of numbers if such a pair exists, and an empty list otherwise.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return [numbers[i], numbers[j]]\n    return []", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers and a target integer, check if the target exists in the matrix.\n    Return True if the target is found, and False otherwise.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix: List[List[int]], target: int) -> List[int]:\n    \"\"\"\n    Given a 2D matrix of integers and a target integer, find the position of the target in the matrix.\n    Return the row and column indices of the target if it is found, and an empty list otherwise.\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == target:\n                return [i, j]\n    return []\n\nassert f(g()) == True", "emb": null, "idx_generation": 473, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers and a target integer, check if the target exists in the matrix.\n    Return True if the target is found, and False otherwise.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix: List[List[int]], target: int) -> List[int]:\n    \"\"\"\n    Given a 2D matrix of integers and a target integer, find the position of the target in the matrix.\n    Return the row and column indices of the target if it is found, and an empty list otherwise.\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == target:\n                return [i, j]\n    return []", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(sentence: str, word: str) -> bool:\n    \"\"\"\n    Given a sentence and a word, check if the word is present in the sentence.\n    Return True if the word is found, and False otherwise.\n    \"\"\"\n    words = sentence.split()\n    return word in words\n\ndef g(sentence: str, word: str) -> str:\n    \"\"\"\n    Given a sentence and a word, find the first occurrence of the word in the sentence.\n    Return the word if it is found, and an empty string otherwise.\n    \"\"\"\n    words = sentence.split()\n    for w in words:\n        if w == word:\n            return w\n    return \"\"\n\nassert f(g()) == True", "emb": null, "idx_generation": 473, "target_skills": null, "problem_func": "from typing import*\ndef f(sentence: str, word: str) -> bool:\n    \"\"\"\n    Given a sentence and a word, check if the word is present in the sentence.\n    Return True if the word is found, and False otherwise.\n    \"\"\"\n    words = sentence.split()\n    return word in words", "solution_func": "def g(sentence: str, word: str) -> str:\n    \"\"\"\n    Given a sentence and a word, find the first occurrence of the word in the sentence.\n    Return the word if it is found, and an empty string otherwise.\n    \"\"\"\n    words = sentence.split()\n    for w in words:\n        if w == word:\n            return w\n    return \"\"", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, threshold=0.01) -> bool:\n    \"\"\"Check if the absolute difference between the square root of the sum of the squares of x, y, and z is less than a threshold\"\"\"\n    return abs(math.sqrt(x**2 + y**2 + z**2) - math.sqrt(x**2 + y**2 + z**2)) < threshold\n\ndef g(x: float = 2.5, y: float = 3.8, z: float = 1.2, threshold: float = 0.01):\n    return x, y, z\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 473, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, threshold=0.01) -> bool:\n    \"\"\"Check if the absolute difference between the square root of the sum of the squares of x, y, and z is less than a threshold\"\"\"\n    return abs(math.sqrt(x**2 + y**2 + z**2) - math.sqrt(x**2 + y**2 + z**2)) < threshold", "solution_func": "def g(x: float = 2.5, y: float = 3.8, z: float = 1.2, threshold: float = 0.01):\n    return x, y, z", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n: int, m: int) -> bool:\n    \"\"\"Check if a string can be split into two parts such that the difference in length is equal to n and the sum of the ASCII values of the characters in the first part is equal to m\"\"\"\n    first_part = s[:len(s) // 2]\n    second_part = s[len(s) // 2:]\n    return len(second_part) - len(first_part) == n and sum(ord(c) for c in first_part) == m\n\ndef g(s: str = \"hello world\", n: int = 3, m: int = 101):\n    return s, n, m\n\nassert f(*g())\n", "emb": null, "idx_generation": 473, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int, m: int) -> bool:\n    \"\"\"Check if a string can be split into two parts such that the difference in length is equal to n and the sum of the ASCII values of the characters in the first part is equal to m\"\"\"\n    first_part = s[:len(s) // 2]\n    second_part = s[len(s) // 2:]\n    return len(second_part) - len(first_part) == n and sum(ord(c) for c in first_part) == m", "solution_func": "def g(s: str = \"hello world\", n: int = 3, m: int = 101):\n    return s, n, m", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if a target number exists in a matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target: int = 5):\n    return matrix, target\n\nassert f(*g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 473, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if a target number exists in a matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target: int = 5):\n    return matrix, target", "map_ix": [1, 1, 1, 1, 0, 1, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], n=1, x=5) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subarray of length n whose sum is equal to x.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    n = 3\n    x = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(sum(arr[i:i+n]) == x for i in range(len(arr) - n + 1))\ndef g(arr=[1, 2, 3, 4, 5], n=3, x=9):\n    return arr\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 473, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], n=1, x=5) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subarray of length n whose sum is equal to x.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    n = 3\n    x = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(sum(arr[i:i+n]) == x for i in range(len(arr) - n + 1))", "solution_func": "def g(arr=[1, 2, 3, 4, 5], n=3, x=9):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, val=1048576) -> bool:\n    \"\"\"Check if the input string is equal to the binary representation of a given value\"\"\"\n    return int(s, 2) == val\ndef g(val=1048576):\n    return bin(val)[2:]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 474, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, val=1048576) -> bool:\n    \"\"\"Check if the input string is equal to the binary representation of a given value\"\"\"\n    return int(s, 2) == val", "solution_func": "def g(val=1048576):\n    return bin(val)[2:]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if the input string is a valid permutation of a given number\"\"\"\n    perms = [''.join(p) for p in permutations(str(n))]\n    return s in perms\ndef g(n=4):\n    return ''.join(str(n))\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 474, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if the input string is a valid permutation of a given number\"\"\"\n    perms = [''.join(p) for p in permutations(str(n))]\n    return s in perms", "solution_func": "def g(n=4):\n    return ''.join(str(n))", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": null, "idx_generation": 474, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n = 3) -> bool:\n    \"\"\"\n    Check if the given string contains at least n vowels.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n        if count >= n:\n            return True\n    return False\n\ndef g(n = 3):\n    \"\"\"\n    Generate a string with n vowels.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(vowels[:n])\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 474, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n = 3) -> bool:\n    \"\"\"\n    Check if the given string contains at least n vowels.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n        if count >= n:\n            return True\n    return False", "solution_func": "def g(n = 3):\n    \"\"\"\n    Generate a string with n vowels.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(vowels[:n])", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target = 10) -> bool:\n    \"\"\"\n    Check if there exists a pair of elements in the given list that sum up to the target value.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target = 10):\n    \"\"\"\n    Generate a list of integers where the sum of any two elements is equal to the target value.\n    \"\"\"\n    return [target // 2, target // 2]\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 474, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target = 10) -> bool:\n    \"\"\"\n    Check if there exists a pair of elements in the given list that sum up to the target value.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(target = 10):\n    \"\"\"\n    Generate a list of integers where the sum of any two elements is equal to the target value.\n    \"\"\"\n    return [target // 2, target // 2]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n = 3) -> bool:\n    \"\"\"\n    Check if the given string contains at least n alphanumeric characters.\n    \"\"\"\n    count = 0\n    for char in s:\n        if char.isalnum():\n            count += 1\n        if count >= n:\n            return True\n    return False\n\ndef g(n = 3):\n    \"\"\"\n    Generate a string with n alphanumeric characters.\n    \"\"\"\n    import string\n    return string.ascii_letters + string.digits[:n]\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 474, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n = 3) -> bool:\n    \"\"\"\n    Check if the given string contains at least n alphanumeric characters.\n    \"\"\"\n    count = 0\n    for char in s:\n        if char.isalnum():\n            count += 1\n        if count >= n:\n            return True\n    return False", "solution_func": "def g(n = 3):\n    \"\"\"\n    Generate a string with n alphanumeric characters.\n    \"\"\"\n    import string\n    return string.ascii_letters + string.digits[:n]", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, li=[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], target=\"date\") -> bool:\n    \"\"\"Check if a target item is in a list.\"\"\"\n    return target in li and li.index(target) == len(li) - len(s)\ndef g(li=[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], target=\"date\"):\n    return li[len(li) - len(target)]\nassert f(g())\n", "emb": null, "idx_generation": 474, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, li=[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], target=\"date\") -> bool:\n    \"\"\"Check if a target item is in a list.\"\"\"\n    return target in li and li.index(target) == len(li) - len(s)", "solution_func": "def g(li=[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], target=\"date\"):\n    return li[len(li) - len(target)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=2, b=3, c=4) -> bool:\n    \"\"\"Check if a given set of numbers can form a valid triangle.\"\"\"\n    return (a + b > c) and (a + c > b) and (b + c > a) and math.isclose(a * x + b * y, c * z, abs_tol=1e-9)\ndef g(a=2, b=3, c=4):\n    x = b / math.sqrt(2)\n    y = a / math.sqrt(2)\n    z = (a * x + b * y) / c\n    return x, y, z\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 474, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=2, b=3, c=4) -> bool:\n    \"\"\"Check if a given set of numbers can form a valid triangle.\"\"\"\n    return (a + b > c) and (a + c > b) and (b + c > a) and math.isclose(a * x + b * y, c * z, abs_tol=1e-9)", "solution_func": "def g(a=2, b=3, c=4):\n    x = b / math.sqrt(2)\n    y = a / math.sqrt(2)\n    z = (a * x + b * y) / c\n    return x, y, z", "map_ix": [0, 0, 0, 1, 0, 0, 1, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(n: int, m: int, li=[random.randint(1, 100) for _ in range(10)]) -> bool:\n    \"\"\"Check if the sum of the first n elements of a list is greater than m.\"\"\"\n    return sum(li[:n]) > m\ndef g(li=[random.randint(1, 100) for _ in range(10)]):\n    n = random.randint(1, len(li))\n    m = random.randint(1, sum(li))\n    return n, m\nassert f(*g())\n", "emb": null, "idx_generation": 474, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(n: int, m: int, li=[random.randint(1, 100) for _ in range(10)]) -> bool:\n    \"\"\"Check if the sum of the first n elements of a list is greater than m.\"\"\"\n    return sum(li[:n]) > m", "solution_func": "def g(li=[random.randint(1, 100) for _ in range(10)]):\n    n = random.randint(1, len(li))\n    m = random.randint(1, sum(li))\n    return n, m", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(arr: List[int], n=1000) -> bool:\n    \"\"\"Find the smallest number in the array that is greater than n.\"\"\"\n    return min(x for x in arr if x > n) == g(arr)\n\ndef g(arr: List[int]):\n    return random.choice(arr)\n\nassert f(g()) == True", "emb": null, "idx_generation": 474, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(arr: List[int], n=1000) -> bool:\n    \"\"\"Find the smallest number in the array that is greater than n.\"\"\"\n    return min(x for x in arr if x > n) == g(arr)", "solution_func": "def g(arr: List[int]):\n    return random.choice(arr)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is a multiple of any number in the list.\"\"\"\n    return any(n % num == 0 for num in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[-1] * 2\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 475, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is a multiple of any number in the list.\"\"\"\n    return any(n % num == 0 for num in nums)", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[-1] * 2", "map_ix": [1, 1, 1, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is a perfect square and a multiple of any number in the list.\"\"\"\n    return n in [num**2 for num in nums] and any(n % num == 0 for num in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return int(sqrt(nums[-1] * 2))\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 475, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is a perfect square and a multiple of any number in the list.\"\"\"\n    return n in [num**2 for num in nums] and any(n % num == 0 for num in nums)", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return int(sqrt(nums[-1] * 2))", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substrings=[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]) -> bool:\n    \"\"\"Check if the given string is a concatenation of any two strings in the list.\"\"\"\n    return any(substring1 + substring2 == s for substring1 in substrings for substring2 in substrings if substring1 != substring2)\ndef g(substrings=[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]):\n    return substrings[0] + substrings[1]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 475, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]) -> bool:\n    \"\"\"Check if the given string is a concatenation of any two strings in the list.\"\"\"\n    return any(substring1 + substring2 == s for substring1 in substrings for substring2 in substrings if substring1 != substring2)", "solution_func": "def g(substrings=[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]):\n    return substrings[0] + substrings[1]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if n is a multiple of 3 and s is a palindrome\"\"\"\n    return n % 3 == 0 and s == s[::-1]\ndef g(n = 9):\n    return str(n) + (\"0\" if n % 3 == 0 else \"1\")\nassert f(g())\n", "emb": null, "idx_generation": 475, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if n is a multiple of 3 and s is a palindrome\"\"\"\n    return n % 3 == 0 and s == s[::-1]", "solution_func": "def g(n = 9):\n    return str(n) + (\"0\" if n % 3 == 0 else \"1\")", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 475, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string contains the substring 'hello' and the number is a multiple of 2\"\"\"\n    return \"hello\" in s and n % 2 == 0\ndef g(s = \"hello world\", n = 4):\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 475, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string contains the substring 'hello' and the number is a multiple of 2\"\"\"\n    return \"hello\" in s and n % 2 == 0", "solution_func": "def g(s = \"hello world\", n = 4):\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: list, target: int) -> bool:\n    \"\"\"Check if there are three numbers in the array that sum up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 15):\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 475, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: list, target: int) -> bool:\n    \"\"\"Check if there are three numbers in the array that sum up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False", "solution_func": "def g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 15):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(num: int, power: int) -> bool:\n    \"\"\"Check if the integer is a perfect power of another integer\"\"\"\n    if num < 1:\n        return False\n    root = math.isqrt(num)\n    for i in range(2, root+1):\n        if i ** power == num:\n            return True\n    return False\n\ndef g(num = 625, power = 4):\n    return num\n\nassert f(g())\n", "emb": null, "idx_generation": 475, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(num: int, power: int) -> bool:\n    \"\"\"Check if the integer is a perfect power of another integer\"\"\"\n    if num < 1:\n        return False\n    root = math.isqrt(num)\n    for i in range(2, root+1):\n        if i ** power == num:\n            return True\n    return False", "solution_func": "def g(num = 625, power = 4):\n    return num", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: list, target: int) -> bool:\n    \"\"\"Check if there are two numbers in the array that sum up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 10):\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 475, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: list, target: int) -> bool:\n    \"\"\"Check if there are two numbers in the array that sum up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 10):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a positive integer that is a power of 2 and is also a multiple of 10.\"\"\"\n    return n > 0 and n % 2 == 0 and n % 10 == 0 and bin(n).count('1') == 1\ndef g():\n    return 40\nassert f(g())\n", "emb": null, "idx_generation": 475, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a positive integer that is a power of 2 and is also a multiple of 10.\"\"\"\n    return n > 0 and n % 2 == 0 and n % 10 == 0 and bin(n).count('1') == 1", "solution_func": "def g():\n    return 40", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target: int) -> bool:\n    \"\"\"Check if the sum of any two elements in the array equals the target value\"\"\"\n    return any(target - x in arr for x in arr)\n\ndef g(arr: np.ndarray, target: int):\n    return arr + target\n\narr = np.array([1, 2, 3, 4, 5])\ntarget = 9\nassert f(g(arr, target), target)\n", "emb": null, "idx_generation": 476, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target: int) -> bool:\n    \"\"\"Check if the sum of any two elements in the array equals the target value\"\"\"\n    return any(target - x in arr for x in arr)", "solution_func": "def g(arr: np.ndarray, target: int):\n    return arr + target\n\narr = np.array([1, 2, 3, 4, 5])\ntarget = 9", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], k: int, target: int) -> bool:\n    \"\"\"Find if there exists a sublist of length k in the given list that sums up to target value\"\"\"\n    return any(sum(nums[i:i+k]) == target for i in range(len(nums)-k+1))\n\ndef g(nums: List[int], k: int, target: int):\n    return nums, k, target\n\nnums = [1, 2, 3, 4, 5]\nk = 3\ntarget = 9\nassert f(*g(nums, k, target), target)\n", "emb": null, "idx_generation": 476, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k: int, target: int) -> bool:\n    \"\"\"Find if there exists a sublist of length k in the given list that sums up to target value\"\"\"\n    return any(sum(nums[i:i+k]) == target for i in range(len(nums)-k+1))", "solution_func": "def g(nums: List[int], k: int, target: int):\n    return nums, k, target\n\nnums = [1, 2, 3, 4, 5]\nk = 3\ntarget = 9", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value\"\"\"\n    return any(target - x in numbers for x in numbers)\n\ndef g(numbers: List[int], target: int):\n    return numbers, target\n\nnumbers = [1, 2, 3, 4, 5]\ntarget = 9\nassert f(*g(numbers, target), target)\n", "emb": null, "idx_generation": 476, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value\"\"\"\n    return any(target - x in numbers for x in numbers)", "solution_func": "def g(numbers: List[int], target: int):\n    return numbers, target\n\nnumbers = [1, 2, 3, 4, 5]\ntarget = 9", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=15, k=3) -> bool:\n    \"\"\"Find k numbers in the list that sum up to the target\"\"\"\n    import itertools\n    combinations = list(itertools.combinations(nums, k))\n    return any(sum(comb) == target for comb in combinations)\n\ndef g(k=3):\n    return list(range(1, k+1))\n\nassert f(g())\n", "emb": null, "idx_generation": 476, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=15, k=3) -> bool:\n    \"\"\"Find k numbers in the list that sum up to the target\"\"\"\n    import itertools\n    combinations = list(itertools.combinations(nums, k))\n    return any(sum(comb) == target for comb in combinations)", "solution_func": "def g(k=3):\n    return list(range(1, k+1))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(grid: List[List[int]], target=0) -> bool:\n    \"\"\"Find a target value in the grid\"\"\"\n    for row in grid:\n        if target in row:\n            return True\n    return False\n\ndef g(grid=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return grid\n\nassert f(g())\n", "emb": null, "idx_generation": 476, "target_skills": null, "problem_func": "from typing import*\ndef f(grid: List[List[int]], target=0) -> bool:\n    \"\"\"Find a target value in the grid\"\"\"\n    for row in grid:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(grid=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return grid", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 476, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, year=2022, month=7, day=25) -> bool:\n    \"\"\"Check if the given date is in the future\"\"\"\n    given_date = datetime.strptime(date, '%Y-%m-%d').date()\n    current_date = datetime(year, month, day).date()\n    return given_date > current_date\n\ndef g(year=2022, month=7, day=25):\n    return str(year) + '-' + str(month).zfill(2) + '-' + str(day).zfill(2)\n\nassert f(g())\n", "emb": null, "idx_generation": 476, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, year=2022, month=7, day=25) -> bool:\n    \"\"\"Check if the given date is in the future\"\"\"\n    given_date = datetime.strptime(date, '%Y-%m-%d').date()\n    current_date = datetime(year, month, day).date()\n    return given_date > current_date", "solution_func": "def g(year=2022, month=7, day=25):\n    return str(year) + '-' + str(month).zfill(2) + '-' + str(day).zfill(2)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=4, b=5, c=6) -> bool:\n    \"\"\"Check if a, b, and c can form the sides of a right-angled triangle\"\"\"\n    return a**2 + b**2 == c**2\n\ndef g(a=4, b=5):\n    return int((a**2 + b**2)**0.5)\n\nassert f(g())\n", "emb": null, "idx_generation": 476, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=4, b=5, c=6) -> bool:\n    \"\"\"Check if a, b, and c can form the sides of a right-angled triangle\"\"\"\n    return a**2 + b**2 == c**2", "solution_func": "def g(a=4, b=5):\n    return int((a**2 + b**2)**0.5)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Determine if it is possible to add/subtract numbers from the given list to reach the target\"\"\"\n    return random.choice(numbers) == target\n\ndef g(target=100):\n    return [target]\n\nassert f(g())\n", "emb": [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 476, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Determine if it is possible to add/subtract numbers from the given list to reach the target\"\"\"\n    return random.choice(numbers) == target", "solution_func": "def g(target=100):\n    return [target]", "map_ix": [0, 0, 1, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\ndef f(x: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"\n    Check if a number is divisible by all given factors.\n    \n    For example, f(15) with factors [3, 5] should return True, since 15 is divisible by 3 and 5.\n    \"\"\"\n    return all(x % factor == 0 for factor in factors)\n    \ndef g(factors=[2, 3, 5]):\n    \"\"\"\n    Find the smallest number that is divisible by all given factors.\n    \n    For example, g([3, 5]) should return 15, since 15 is divisible by both 3 and 5 and it is the smallest such number.\n    \"\"\"\n    if not factors:\n        return 1\n    \n    smallest_number = factors[0]\n    for factor in factors[1:]:\n        smallest_number *= factor // math.gcd(smallest_number, factor)\n    \n    return smallest_number\n    \nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 476, "target_skills": null, "problem_func": "import math\nfrom typing import*\ndef f(x: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"\n    Check if a number is divisible by all given factors.\n    \n    For example, f(15) with factors [3, 5] should return True, since 15 is divisible by 3 and 5.\n    \"\"\"\n    return all(x % factor == 0 for factor in factors)", "solution_func": "def g(factors=[2, 3, 5]):\n    \"\"\"\n    Find the smallest number that is divisible by all given factors.\n    \n    For example, g([3, 5]) should return 15, since 15 is divisible by both 3 and 5 and it is the smallest such number.\n    \"\"\"\n    if not factors:\n        return 1\n    \n    smallest_number = factors[0]\n    for factor in factors[1:]:\n        smallest_number *= factor // math.gcd(smallest_number, factor)\n    \n    return smallest_number", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list which sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target: int) -> List[int]:\n    \"\"\"Generate a list of numbers with at least one pair that sums up to the target\"\"\"\n    return list(range(target-1)) + [1]\n\nassert f(g(target=10), target=10)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 477, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list which sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target: int) -> List[int]:\n    \"\"\"Generate a list of numbers with at least one pair that sums up to the target\"\"\"\n    return list(range(target-1)) + [1]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"Find if n is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g() -> int:\n    \"\"\"Generate a prime number\"\"\"\n    n = 2\n    while True:\n        if f(n):\n            return n\n        n += 1\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 477, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"Find if n is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g() -> int:\n    \"\"\"Generate a prime number\"\"\"\n    n = 2\n    while True:\n        if f(n):\n            return n\n        n += 1", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there exists a subarray in the list with sum equal to target\"\"\"\n    for i in range(len(nums)):\n        s = 0\n        for j in range(i, len(nums)):\n            s += nums[j]\n            if s == target:\n                return True\n    return False\n\ndef g(target: int) -> List[int]:\n    \"\"\"Generate a list of numbers with a subarray that sums up to the target\"\"\"\n    return list(range(target))\n\nassert f(g(target=10), target=10)\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 477, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there exists a subarray in the list with sum equal to target\"\"\"\n    for i in range(len(nums)):\n        s = 0\n        for j in range(i, len(nums)):\n            s += nums[j]\n            if s == target:\n                return True\n    return False", "solution_func": "def g(target: int) -> List[int]:\n    \"\"\"Generate a list of numbers with a subarray that sums up to the target\"\"\"\n    return list(range(target))", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, max_nums=3, options=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose sum is the target value.\"\"\"\n    for n in nums:\n        assert n in options\n    return len(nums) <= max_nums and sum(nums) == target\ndef g(target = 10, max_nums = 3, options = [1, 2, 3, 4, 5]):\n    from itertools import combinations\n    for n in range(max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 477, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, max_nums=3, options=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose sum is the target value.\"\"\"\n    for n in nums:\n        assert n in options\n    return len(nums) <= max_nums and sum(nums) == target", "solution_func": "def g(target = 10, max_nums = 3, options = [1, 2, 3, 4, 5]):\n    from itertools import combinations\n    for n in range(max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(inds: List[int], string='pytHonPRogram') -> bool:\n    \"\"\"Find increasing indices to make the substring \"PythonProgram\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'PythonProgram'\ndef g(string = 'pytHonPRogram'):\n    target = \"PythonProgram\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g())\n", "emb": null, "idx_generation": 477, "target_skills": null, "problem_func": "from typing import*\ndef f(inds: List[int], string='pytHonPRogram') -> bool:\n    \"\"\"Find increasing indices to make the substring \"PythonProgram\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'PythonProgram'", "solution_func": "def g(string = 'pytHonPRogram'):\n    target = \"PythonProgram\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string with 100 'x's but no three adjacent 'x's.\"\"\"\n    return s.count('x') == 100 and 'xxx' not in s\ndef g():\n    return 'x' * 100\nassert f(g())\n", "emb": null, "idx_generation": 477, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string with 100 'x's but no three adjacent 'x's.\"\"\"\n    return s.count('x') == 100 and 'xxx' not in s", "solution_func": "def g():\n    return 'x' * 100", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(num_list: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the list that sum up to the target sum.\n    \"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target_sum:\n                return True\n    return False\n\ndef g(length: int = 10, target_sum: int = 20, min_value: int = 1, max_value: int = 10):\n    \"\"\"\n    Generate a list of random numbers within a given range.\n    \"\"\"\n    num_list = [random.randint(min_value, max_value) for _ in range(length)]\n    return num_list, target_sum\n\nassert f(*g())\n", "emb": null, "idx_generation": 477, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(num_list: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the list that sum up to the target sum.\n    \"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(length: int = 10, target_sum: int = 20, min_value: int = 1, max_value: int = 10):\n    \"\"\"\n    Generate a list of random numbers within a given range.\n    \"\"\"\n    num_list = [random.randint(min_value, max_value) for _ in range(length)]\n    return num_list, target_sum", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(email: str, domain: str = 'gmail.com') -> bool:\n    \"\"\"\n    Check if the email address has a specific domain.\n    \"\"\"\n    return email.split('@')[-1] == domain\n\ndef g(domain: str = 'gmail.com'):\n    \"\"\"\n    Generate a random email address with a specific domain.\n    \"\"\"\n    username = \"user\" + str(random.randint(1, 100))\n    email = username + \"@\" + domain\n    return email, domain\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 477, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(email: str, domain: str = 'gmail.com') -> bool:\n    \"\"\"\n    Check if the email address has a specific domain.\n    \"\"\"\n    return email.split('@')[-1] == domain", "solution_func": "def g(domain: str = 'gmail.com'):\n    \"\"\"\n    Generate a random email address with a specific domain.\n    \"\"\"\n    username = \"user\" + str(random.randint(1, 100))\n    email = username + \"@\" + domain\n    return email, domain", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if the target number is present in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(rows: int = 3, cols: int = 3, target: int = 5, min_value: int = 1, max_value: int = 10):\n    \"\"\"\n    Generate a random matrix with a specific target number.\n    \"\"\"\n    matrix = [[random.randint(min_value, max_value) for _ in range(cols)] for _ in range(rows)]\n    return matrix, target\n\nassert f(*g())\n", "emb": null, "idx_generation": 477, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if the target number is present in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(rows: int = 3, cols: int = 3, target: int = 5, min_value: int = 1, max_value: int = 10):\n    \"\"\"\n    Generate a random matrix with a specific target number.\n    \"\"\"\n    matrix = [[random.randint(min_value, max_value) for _ in range(cols)] for _ in range(rows)]\n    return matrix, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=20):\n    return [10, 5, 15, 3, 7]\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 477, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=20):\n    return [10, 5, 15, 3, 7]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, n: int) -> bool:\n    \"\"\"\n    Check if x raised to the power of y is equal to n.\n    \"\"\"\n    return math.isclose(math.pow(x, y), n, abs_tol=1e-06)\n\ndef g(x: float, y: float, n: int):\n    return n\n\nassert f(g(2, 3, 8))\n", "emb": null, "idx_generation": 478, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, n: int) -> bool:\n    \"\"\"\n    Check if x raised to the power of y is equal to n.\n    \"\"\"\n    return math.isclose(math.pow(x, y), n, abs_tol=1e-06)", "solution_func": "def g(x: float, y: float, n: int):\n    return n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: list, target: int) -> bool:\n    \"\"\"\n    Check if there are two distinct elements in the list that add up to the target.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g(lst: list, target: int):\n    return lst\n\nassert f(g([1, 2, 3, 4, 5], 6))\n", "emb": null, "idx_generation": 478, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: list, target: int) -> bool:\n    \"\"\"\n    Check if there are two distinct elements in the list that add up to the target.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False", "solution_func": "def g(lst: list, target: int):\n    return lst", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(lst: list, n: int) -> bool:\n    \"\"\"\n    Check if the list contains the number n.\n    \"\"\"\n    return n in lst\n\ndef g(lst: list, n: int):\n    return random.choice(lst)\n\nassert f(g([1, 2, 3, 4, 5], 3))\n", "emb": null, "idx_generation": 478, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: list, n: int) -> bool:\n    \"\"\"\n    Check if the list contains the number n.\n    \"\"\"\n    return n in lst", "solution_func": "def g(lst: list, n: int):\n    return random.choice(lst)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, p=7, q=11) -> bool:\n    \"\"\"\n    Determine if n is a product of two prime numbers p and q.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return n == p * q\ndef g(p=7, q=11):\n    return p * q\nassert f(g())\n", "emb": null, "idx_generation": 478, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, p=7, q=11) -> bool:\n    \"\"\"\n    Determine if n is a product of two prime numbers p and q.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return n == p * q", "solution_func": "def g(p=7, q=11):\n    return p * q", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, t='reverse') -> bool:\n    \"\"\"\n    Determine if s is equal to its reverse.\n    \"\"\"\n    if t == 'reverse':\n        return s == s[::-1]\n    elif t == 'mirror':\n        return s == s[::-1] and s == s.upper()\n    else:\n        return False\ndef g(t='reverse'):\n    if t == 'reverse':\n        return 'racecar'\n    elif t == 'mirror':\n        return 'RADAR'\n    else:\n        return 'word'\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 478, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t='reverse') -> bool:\n    \"\"\"\n    Determine if s is equal to its reverse.\n    \"\"\"\n    if t == 'reverse':\n        return s == s[::-1]\n    elif t == 'mirror':\n        return s == s[::-1] and s == s.upper()\n    else:\n        return False", "solution_func": "def g(t='reverse'):\n    if t == 'reverse':\n        return 'racecar'\n    elif t == 'mirror':\n        return 'RADAR'\n    else:\n        return 'word'", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport datetime\n\ndef f(d: datetime.date) -> bool:\n    \"\"\"\n    Determine if the given date is a weekday.\n    \"\"\"\n    return d.weekday() < 5\ndef g():\n    return datetime.date.today()\nassert f(g())\n", "emb": null, "idx_generation": 478, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(d: datetime.date) -> bool:\n    \"\"\"\n    Determine if the given date is a weekday.\n    \"\"\"\n    return d.weekday() < 5", "solution_func": "def g():\n    return datetime.date.today()", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Given two strings, check if the first string can be rearranged to form the second string.\n    \"\"\"\n    return sorted(s) == sorted(t)\n\ndef g(s: str, t: str):\n    return s, t\n\nassert f(g(\"abc\", \"cab\"))\n", "emb": null, "idx_generation": 478, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Given two strings, check if the first string can be rearranged to form the second string.\n    \"\"\"\n    return sorted(s) == sorted(t)", "solution_func": "def g(s: str, t: str):\n    return s, t", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, x: int, y: int) -> bool:\n    \"\"\"\n    Given three integers, determine if it is possible to divide all the numbers from 1 to n (inclusive) into two sets\n    such that the sum of the first set is equal to x and the sum of the second set is equal to y.\n    \"\"\"\n    total_sum = x + y\n    if total_sum > n * (n + 1) // 2:\n        return False\n    if (n * (n + 1) // 2) % 2 != total_sum % 2:\n        return False\n    target_sum = total_sum // 2\n    dp = [False] * (target_sum + 1)\n    dp[0] = True\n    for i in range(1, n + 1):\n        for j in range(target_sum, i - 1, -1):\n            dp[j] = dp[j] or dp[j - i]\n    return dp[target_sum]\n\ndef g(n: int, x: int, y: int):\n    return n, x, y\n\nassert f(g(7, 10, 9))\n", "emb": null, "idx_generation": 478, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x: int, y: int) -> bool:\n    \"\"\"\n    Given three integers, determine if it is possible to divide all the numbers from 1 to n (inclusive) into two sets\n    such that the sum of the first set is equal to x and the sum of the second set is equal to y.\n    \"\"\"\n    total_sum = x + y\n    if total_sum > n * (n + 1) // 2:\n        return False\n    if (n * (n + 1) // 2) % 2 != total_sum % 2:\n        return False\n    target_sum = total_sum // 2\n    dp = [False] * (target_sum + 1)\n    dp[0] = True\n    for i in range(1, n + 1):\n        for j in range(target_sum, i - 1, -1):\n            dp[j] = dp[j] or dp[j - i]\n    return dp[target_sum]", "solution_func": "def g(n: int, x: int, y: int):\n    return n, x, y", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Given two integers n and k, determine if k can be produced by adding or subtracting the digits of n.\n    \"\"\"\n    if n == k:\n        return True\n    if n < k:\n        return False\n    if k == 0:\n        return n % 2 == 0\n    return (k % 2 == 0 and n % 2 == 0) or (k % 2 != 0 and n % 2 != 0)\n\ndef g(n: int, k: int):\n    return n, k\n\nassert f(g(123, 0))\n", "emb": null, "idx_generation": 478, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Given two integers n and k, determine if k can be produced by adding or subtracting the digits of n.\n    \"\"\"\n    if n == k:\n        return True\n    if n < k:\n        return False\n    if k == 0:\n        return n % 2 == 0\n    return (k % 2 == 0 and n % 2 == 0) or (k % 2 != 0 and n % 2 != 0)", "solution_func": "def g(n: int, k: int):\n    return n, k", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(arr: list[int], target_sum: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array that sum up to the target_sum\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\n\ndef g(arr_length: int, target_sum: int):\n    \"\"\"Generate an array of random numbers\"\"\"\n    arr = [random.randint(1, 100) for _ in range(arr_length)]\n    return arr\n\nassert f(g(arr_length=10, target_sum=50), target_sum=50)\n", "emb": null, "idx_generation": 478, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(arr: list[int], target_sum: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array that sum up to the target_sum\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(arr_length: int, target_sum: int):\n    \"\"\"Generate an array of random numbers\"\"\"\n    arr = [random.randint(1, 100) for _ in range(arr_length)]\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substring='a', count=10, length=100) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'a', count = 10, length = 100):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 479, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring='a', count=10, length=100) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length", "solution_func": "def g(substring = 'a', count = 10, length = 100):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the input list that sum up to the target value\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(nums=[1, 2, 3, 4, 5], target=0):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 479, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the input list that sum up to the target value\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=0):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], k=0) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the input list that sum up to a multiple of k\"\"\"\n    return any((nums[i] + nums[j]) % k == 0 for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(nums=[1, 2, 3, 4, 5], k=2):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 479, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=0) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the input list that sum up to a multiple of k\"\"\"\n    return any((nums[i] + nums[j]) % k == 0 for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(nums=[1, 2, 3, 4, 5], k=2):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, nums=[27, 64, 125]) -> bool:\n    \"\"\"Check if the given number is a perfect cube and is present in the list.\"\"\"\n    return n in nums and math.isqrt(n) ** 3 == n\ndef g(nums = [27, 64, 125]):\n    for num in nums:\n        if math.isqrt(num) ** 3 == num:\n            return num\n    return 0\nassert f(g())\n", "emb": null, "idx_generation": 479, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, nums=[27, 64, 125]) -> bool:\n    \"\"\"Check if the given number is a perfect cube and is present in the list.\"\"\"\n    return n in nums and math.isqrt(n) ** 3 == n", "solution_func": "def g(nums = [27, 64, 125]):\n    for num in nums:\n        if math.isqrt(num) ** 3 == num:\n            return num\n    return 0", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substrings=[\"apple\", \"banana\", \"cherry\"]) -> bool:\n    \"\"\"Check if the given string starts with any of the provided substrings.\"\"\"\n    return any(s.startswith(substring) for substring in substrings)\ndef g(substrings = [\"apple\", \"banana\", \"cherry\"]):\n    return substrings[0]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 479, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=[\"apple\", \"banana\", \"cherry\"]) -> bool:\n    \"\"\"Check if the given string starts with any of the provided substrings.\"\"\"\n    return any(s.startswith(substring) for substring in substrings)", "solution_func": "def g(substrings = [\"apple\", \"banana\", \"cherry\"]):\n    return substrings[0]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\ndef f(n: int, nums=[3, 6, 9]) -> bool:\n    \"\"\"Check if the given number is divisible by all the numbers in the list.\"\"\"\n    return all(n % num == 0 for num in nums)\ndef g(nums = [3, 6, 9]):\n    lcm = nums[0]\n    for num in nums[1:]:\n        lcm = lcm * num // math.gcd(lcm, num)\n    return lcm\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 479, "target_skills": null, "problem_func": "import math\nfrom typing import*\ndef f(n: int, nums=[3, 6, 9]) -> bool:\n    \"\"\"Check if the given number is divisible by all the numbers in the list.\"\"\"\n    return all(n % num == 0 for num in nums)", "solution_func": "def g(nums = [3, 6, 9]):\n    lcm = nums[0]\n    for num in nums[1:]:\n        lcm = lcm * num // math.gcd(lcm, num)\n    return lcm", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target = 0):\n    return [2, 4, 6, 8, 10]\nassert f(g())\n", "emb": null, "idx_generation": 479, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target = 0):\n    return [2, 4, 6, 8, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], length=5) -> bool:\n    \"\"\"Check if there is a word in the list that has length greater than a specified value.\"\"\"\n    for word in words:\n        if len(word) > length:\n            return True\n    return False\ndef g(length = 5):\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 479, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], length=5) -> bool:\n    \"\"\"Check if there is a word in the list that has length greater than a specified value.\"\"\"\n    for word in words:\n        if len(word) > length:\n            return True\n    return False", "solution_func": "def g(length = 5):\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(points: List[Tuple[float, float]], radius=5) -> bool:\n    \"\"\"Check if any of the points are outside a circle with a specified radius centered at the origin.\"\"\"\n    for point in points:\n        distance = math.sqrt(point[0]**2 + point[1]**2)\n        if distance > radius:\n            return True\n    return False\ndef g(radius = 5):\n    return [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 479, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(points: List[Tuple[float, float]], radius=5) -> bool:\n    \"\"\"Check if any of the points are outside a circle with a specified radius centered at the origin.\"\"\"\n    for point in points:\n        distance = math.sqrt(point[0]**2 + point[1]**2)\n        if distance > radius:\n            return True\n    return False", "solution_func": "def g(radius = 5):\n    return [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(num_list: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers that sum up to the target_sum.\n    Return True if such numbers exist, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in num_list:\n        complement = target_sum - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(num_list: List[int], target_sum: int):\n    return num_list, target_sum\n\nassert f(*g())\n", "emb": null, "idx_generation": 479, "target_skills": null, "problem_func": "from typing import*\ndef f(num_list: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers that sum up to the target_sum.\n    Return True if such numbers exist, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in num_list:\n        complement = target_sum - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(num_list: List[int], target_sum: int):\n    return num_list, target_sum", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if the given string is a palindrome and contains the target string as a substring.\"\"\"\n    return s == s[::-1] and target in s\ndef g(target = 'hello'):\n    return target + target[::-1]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 480, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if the given string is a palindrome and contains the target string as a substring.\"\"\"\n    return s == s[::-1] and target in s", "solution_func": "def g(target = 'hello'):\n    return target + target[::-1]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, target=10) -> bool:\n    \"\"\"Check if the given number is divisible by the sum of its digits.\"\"\"\n    return n % sum(int(d) for d in str(n)) == 0\ndef g(target=10):\n    return int('1' * target)\nassert f(g())\n", "emb": null, "idx_generation": 480, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, target=10) -> bool:\n    \"\"\"Check if the given number is divisible by the sum of its digits.\"\"\"\n    return n % sum(int(d) for d in str(n)) == 0", "solution_func": "def g(target=10):\n    return int('1' * target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the given string is a palindrome and contains all the characters in the target string.\"\"\"\n    return s == s[::-1] and all(c in s for c in target)\ndef g(target='python'):\n    return target + target[::-1]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 480, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the given string is a palindrome and contains all the characters in the target string.\"\"\"\n    return s == s[::-1] and all(c in s for c in target)", "solution_func": "def g(target='python'):\n    return target + target[::-1]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=38) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target = 38):\n    nums = [1, 2, 5, 10, 20, 50]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 480, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=38) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target = 38):\n    nums = [1, 2, 5, 10, 20, 50]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=12) -> bool:\n    \"\"\"Find if the target number exists in the matrix\"\"\"\n    for row in matrix:\n        for num in row:\n            if num == target:\n                return True\n    return False\ndef g(target = 12):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 480, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=12) -> bool:\n    \"\"\"Find if the target number exists in the matrix\"\"\"\n    for row in matrix:\n        for num in row:\n            if num == target:\n                return True\n    return False", "solution_func": "def g(target = 12):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=3) -> bool:\n    \"\"\"Find if there exists a subarray in the list whose sum is equal to the target\"\"\"\n    left = right = 0\n    curr_sum = 0\n    while right < len(nums):\n        curr_sum += nums[right]\n        while curr_sum > target:\n            curr_sum -= nums[left]\n            left += 1\n        if curr_sum == target:\n            return True\n        right += 1\n    return False\ndef g(target = 3):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 480, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=3) -> bool:\n    \"\"\"Find if there exists a subarray in the list whose sum is equal to the target\"\"\"\n    left = right = 0\n    curr_sum = 0\n    while right < len(nums):\n        curr_sum += nums[right]\n        while curr_sum > target:\n            curr_sum -= nums[left]\n            left += 1\n        if curr_sum == target:\n            return True\n        right += 1\n    return False", "solution_func": "def g(target = 3):\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int, k=2) -> bool:\n    \"\"\"Find k distinct integers from nums that sum to target\"\"\"\n    return len(nums) == len(set(nums)) and sum(nums) == target and len(set(nums[:k])) == k\ndef g(target: int, k=2):\n    nums = [i for i in range(1, target+1)]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 480, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, k=2) -> bool:\n    \"\"\"Find k distinct integers from nums that sum to target\"\"\"\n    return len(nums) == len(set(nums)) and sum(nums) == target and len(set(nums[:k])) == k", "solution_func": "def g(target: int, k=2):\n    nums = [i for i in range(1, target+1)]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=3, b=5, c=7, d=9) -> bool:\n    \"\"\"Check if n is divisible by a, b, c, and d\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0 and n % d == 0\ndef g(a=3, b=5, c=7, d=9):\n    n = a * b * c * d\n    return n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 480, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=3, b=5, c=7, d=9) -> bool:\n    \"\"\"Check if n is divisible by a, b, c, and d\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0 and n % d == 0", "solution_func": "def g(a=3, b=5, c=7, d=9):\n    n = a * b * c * d\n    return n", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int, row=0, col=0) -> bool:\n    \"\"\"Check if target is present in the matrix\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    if row >= m or col >= n:\n        return False\n    if matrix[row][col] == target:\n        return True\n    if matrix[row][col] < target:\n        return f(matrix, target, row+1, col) or f(matrix, target, row, col+1)\n    return False\ndef g(matrix: List[List[int]], target: int):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 480, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int, row=0, col=0) -> bool:\n    \"\"\"Check if target is present in the matrix\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    if row >= m or col >= n:\n        return False\n    if matrix[row][col] == target:\n        return True\n    if matrix[row][col] < target:\n        return f(matrix, target, row+1, col) or f(matrix, target, row, col+1)\n    return False", "solution_func": "def g(matrix: List[List[int]], target: int):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, num_elements=3) -> bool:\n    \"\"\"\n    Find a list of num_elements integers from nums that add up to the target value.\n    \"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(nums, num_elements))\ndef g(target=100, num_elements=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": null, "idx_generation": 480, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, num_elements=3) -> bool:\n    \"\"\"\n    Find a list of num_elements integers from nums that add up to the target value.\n    \"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(nums, num_elements))", "solution_func": "def g(target=100, num_elements=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subset whose sum is equal to the target value.\n    \"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]\n\ndef g(nums=[1, 5, 11, 5]):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 481, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subset whose sum is equal to the target value.\n    \"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]", "solution_func": "def g(nums=[1, 5, 11, 5]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='abcabcabc') -> bool:\n    \"\"\"\n    Given a string s, determine if it can be formed by concatenating the same string target multiple times.\n    \"\"\"\n    n = len(s)\n    m = len(target)\n    if n % m != 0:\n        return False\n    k = n // m\n    return s == target * k\n\ndef g(target='abcabcabc'):\n    return target\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 481, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='abcabcabc') -> bool:\n    \"\"\"\n    Given a string s, determine if it can be formed by concatenating the same string target multiple times.\n    \"\"\"\n    n = len(s)\n    m = len(target)\n    if n % m != 0:\n        return False\n    k = n // m\n    return s == target * k", "solution_func": "def g(target='abcabcabc'):\n    return target", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"\n    Given a list of 4 numbers, can you find a way to calculate 24 by using the four basic arithmetic operations (+, -, *, /) \n    and parentheses?\n\n    Example Input:\n    [4, 1, 8, 7]\n\n    Example Output:\n    True\n\n    Explanation:\n    (8 - (4 / (1 + 7))) = 24\n    \"\"\"\n    def helper(nums):\n        if len(nums) == 1:\n            return nums[0] == target\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                a = nums[i]\n                b = nums[j]\n                remaining = [nums[k] for k in range(len(nums)) if k != i and k != j]\n                if helper(remaining + [a + b]) or helper(remaining + [a - b]) or helper(remaining + [a * b]) or (b != 0 and helper(remaining + [a / b])):\n                    return True\n        return False\n    return helper(nums)\n\ndef g(nums=[4, 1, 8, 7]):\n    return nums\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 481, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"\n    Given a list of 4 numbers, can you find a way to calculate 24 by using the four basic arithmetic operations (+, -, *, /) \n    and parentheses?\n\n    Example Input:\n    [4, 1, 8, 7]\n\n    Example Output:\n    True\n\n    Explanation:\n    (8 - (4 / (1 + 7))) = 24\n    \"\"\"\n    def helper(nums):\n        if len(nums) == 1:\n            return nums[0] == target\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                a = nums[i]\n                b = nums[j]\n                remaining = [nums[k] for k in range(len(nums)) if k != i and k != j]\n                if helper(remaining + [a + b]) or helper(remaining + [a - b]) or helper(remaining + [a * b]) or (b != 0 and helper(remaining + [a / b])):\n                    return True\n        return False\n    return helper(nums)", "solution_func": "def g(nums=[4, 1, 8, 7]):\n    return nums", "map_ix": [0, 1, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10, threshold=5) -> bool:\n    \"\"\"Check if the sum of all numbers in the list is greater than the target value multiplied by the threshold.\"\"\"\n    return sum(nums) > target * threshold\n\ndef g(target=10, threshold=5):\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 481, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10, threshold=5) -> bool:\n    \"\"\"Check if the sum of all numbers in the list is greater than the target value multiplied by the threshold.\"\"\"\n    return sum(nums) > target * threshold", "solution_func": "def g(target=10, threshold=5):\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=5, length=3) -> bool:\n    \"\"\"Check if there exists a sublist of the given length whose sum is equal to the target value.\"\"\"\n    for i in range(len(arr) - length + 1):\n        if sum(arr[i:i+length]) == target:\n            return True\n    return False\n\ndef g(target=5, length=3):\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 481, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=5, length=3) -> bool:\n    \"\"\"Check if there exists a sublist of the given length whose sum is equal to the target value.\"\"\"\n    for i in range(len(arr) - length + 1):\n        if sum(arr[i:i+length]) == target:\n            return True\n    return False", "solution_func": "def g(target=5, length=3):\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(num: int, n=5) -> bool:\n    \"\"\"Check if the given number is present in a randomly generated list of length n.\"\"\"\n    lst = [random.randint(1, 10) for _ in range(n)]\n    return num in lst\n\ndef g(n=5):\n    num = random.randint(1, 10)\n    return num\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 481, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(num: int, n=5) -> bool:\n    \"\"\"Check if the given number is present in a randomly generated list of length n.\"\"\"\n    lst = [random.randint(1, 10) for _ in range(n)]\n    return num in lst", "solution_func": "def g(n=5):\n    num = random.randint(1, 10)\n    return num", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    return any((target - x) in nums for x in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 481, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    return any((target - x) in nums for x in nums)", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if the target number is present in the matrix.\"\"\"\n    return any(target in row for row in matrix)\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 481, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if the target number is present in the matrix.\"\"\"\n    return any(target in row for row in matrix)", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(text: str, char='a') -> bool:\n    \"\"\"Check if the given character is the first letter of every word in the text.\"\"\"\n    return all(word.startswith(char) for word in text.split())\ndef g(text=\"apple and ant are friends\"):\n    return text\nassert f(g())\n", "emb": null, "idx_generation": 481, "target_skills": null, "problem_func": "from typing import*\ndef f(text: str, char='a') -> bool:\n    \"\"\"Check if the given character is the first letter of every word in the text.\"\"\"\n    return all(word.startswith(char) for word in text.split())", "solution_func": "def g(text=\"apple and ant are friends\"):\n    return text", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(n: int, nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exist n distinct integers in the list nums, such that their sum is equal to target.\n    \"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, n))\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 15):\n    from itertools import combinations\n    for n in range(1, len(nums) + 1):\n        for comb in combinations(nums, n):\n            if sum(comb) == target:\n                return n, comb, target\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 481, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exist n distinct integers in the list nums, such that their sum is equal to target.\n    \"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, n))", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 15):\n    from itertools import combinations\n    for n in range(1, len(nums) + 1):\n        for comb in combinations(nums, n):\n            if sum(comb) == target:\n                return n, comb, target", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(num: float, num1=8.5, num2=3.2) -> bool:\n    \"\"\"Check if the given number is a perfect square and has a square root less than num1 and greater than num2\"\"\"\n    return num == math.isqrt(num)**2 and num2 < math.isqrt(num) < num1\n\ndef g(num1=8.5, num2=3.2):\n    num = num2**2 + 1\n    return num\n\nassert f(g())\n", "emb": null, "idx_generation": 482, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(num: float, num1=8.5, num2=3.2) -> bool:\n    \"\"\"Check if the given number is a perfect square and has a square root less than num1 and greater than num2\"\"\"\n    return num == math.isqrt(num)**2 and num2 < math.isqrt(num) < num1", "solution_func": "def g(num1=8.5, num2=3.2):\n    num = num2**2 + 1\n    return num", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(word: str, char='e') -> bool:\n    \"\"\"Check if the given character is the most frequent letter in the word\"\"\"\n    return word.count(char) == max([word.count(c) for c in word])\n\ndef g(char='e'):\n    word = 'elephant'\n    return word\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 482, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str, char='e') -> bool:\n    \"\"\"Check if the given character is the most frequent letter in the word\"\"\"\n    return word.count(char) == max([word.count(c) for c in word])", "solution_func": "def g(char='e'):\n    word = 'elephant'\n    return word", "map_ix": [0, 0, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], num1=5, num2=10) -> bool:\n    \"\"\"Check if all the numbers in the list are between num1 and num2 (inclusive)\"\"\"\n    return all([num1 <= num <= num2 for num in lst])\n\ndef g(num1=5, num2=10):\n    lst = [random.randint(1, 15) for _ in range(10)]\n    return lst\n\nassert f(g())\n", "emb": null, "idx_generation": 482, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: List[int], num1=5, num2=10) -> bool:\n    \"\"\"Check if all the numbers in the list are between num1 and num2 (inclusive)\"\"\"\n    return all([num1 <= num <= num2 for num in lst])", "solution_func": "def g(num1=5, num2=10):\n    lst = [random.randint(1, 15) for _ in range(10)]\n    return lst", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(area: float, r = 7.5) -> bool:\n    \"\"\"Check if the given area is equal to the area of a circle with radius r\"\"\"\n    circle_area = math.pi * r**2\n    return abs(area - circle_area) < 0.001\n\ndef g(r = 7.5):\n    return math.pi * r**2\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 482, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(area: float, r = 7.5) -> bool:\n    \"\"\"Check if the given area is equal to the area of a circle with radius r\"\"\"\n    circle_area = math.pi * r**2\n    return abs(area - circle_area) < 0.001", "solution_func": "def g(r = 7.5):\n    return math.pi * r**2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if the given string has exactly n consecutive vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(n=4):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(vowels * n)\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 482, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if the given string has exactly n consecutive vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False", "solution_func": "def g(n=4):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(vowels * n)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport datetime\n\ndef f(year: int, month: int, day: int) -> bool:\n    \"\"\"Check if the given date is a Monday\"\"\"\n    date = datetime.date(year, month, day)\n    return date.weekday() == 0\n\ndef g():\n    today = datetime.date.today()\n    while today.weekday() != 0:\n        today += datetime.timedelta(days=1)\n    return today.year, today.month, today.day\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 482, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(year: int, month: int, day: int) -> bool:\n    \"\"\"Check if the given date is a Monday\"\"\"\n    date = datetime.date(year, month, day)\n    return date.weekday() == 0", "solution_func": "def g():\n    today = datetime.date.today()\n    while today.weekday() != 0:\n        today += datetime.timedelta(days=1)\n    return today.year, today.month, today.day", "map_ix": [1, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Matrix Search\n\n    Given a matrix of integers and a target value, determine if the target value exists in the matrix.\n\n    Example:\n    matrix = [\n        [1, 3, 5, 7],\n        [10, 11, 16, 20],\n        [23, 30, 34, 60]\n    ]\n    target = 3\n    output: True\n    \"\"\"\n    m = len(matrix)\n    if m == 0:\n        return False\n    n = len(matrix[0])\n    left, right = 0, m * n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        num = matrix[mid // n][mid % n]\n        if num == target:\n            return True\n        elif num < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\ndef g(matrix=[[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 60]], target=0):\n    return matrix, target\nassert f(*g())\n", "emb": null, "idx_generation": 482, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Matrix Search\n\n    Given a matrix of integers and a target value, determine if the target value exists in the matrix.\n\n    Example:\n    matrix = [\n        [1, 3, 5, 7],\n        [10, 11, 16, 20],\n        [23, 30, 34, 60]\n    ]\n    target = 3\n    output: True\n    \"\"\"\n    m = len(matrix)\n    if m == 0:\n        return False\n    n = len(matrix[0])\n    left, right = 0, m * n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        num = matrix[mid // n][mid % n]\n        if num == target:\n            return True\n        elif num < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False", "solution_func": "def g(matrix=[[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 60]], target=0):\n    return matrix, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Two Sum\n\n    Given an array of integers, return True if there exist two numbers such that their sum is equal to the target.\n\n    Example:\n    nums = [2, 7, 11, 15]\n    target = 9\n    output: True\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\ndef g(nums=[2, 7, 11, 15], target=0):\n    return nums, target\nassert f(*g())\n", "emb": null, "idx_generation": 482, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Two Sum\n\n    Given an array of integers, return True if there exist two numbers such that their sum is equal to the target.\n\n    Example:\n    nums = [2, 7, 11, 15]\n    target = 9\n    output: True\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums=[2, 7, 11, 15], target=0):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Prime Power Triples\n\n    Given an integer n, find if there exists a triple (p, q, r) such that p^a + q^b = r^c, where 1 \u2264 p, q, r \u2264 n.\n\n    Example:\n    n = 5\n    k = 2\n    output: True\n    \"\"\"\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n + 1, i):\n                primes[j] = False\n    prime_list = [i for i in range(2, n + 1) if primes[i]]\n    for p in prime_list:\n        for q in prime_list:\n            for r in prime_list:\n                if p ** k + q ** k == r ** k:\n                    return True\n    return False\ndef g(n=5, k=2):\n    return n, k\nassert f(*g())\n", "emb": null, "idx_generation": 482, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Prime Power Triples\n\n    Given an integer n, find if there exists a triple (p, q, r) such that p^a + q^b = r^c, where 1 \u2264 p, q, r \u2264 n.\n\n    Example:\n    n = 5\n    k = 2\n    output: True\n    \"\"\"\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n + 1, i):\n                primes[j] = False\n    prime_list = [i for i in range(2, n + 1) if primes[i]]\n    for p in prime_list:\n        for q in prime_list:\n            for r in prime_list:\n                if p ** k + q ** k == r ** k:\n                    return True\n    return False", "solution_func": "def g(n=5, k=2):\n    return n, k", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='aeiou') -> bool:\n    \"\"\"Check if a string contains all vowels in order\"\"\"\n    vowels = iter(target)\n    for c in s:\n        if c == next(vowels, ''):\n            if c == 'u':\n                return True\n    return False\ndef g(target = 'aeiou'):\n    vowels = iter(target)\n    return ''.join(next(vowels) for _ in range(len(target)))\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 482, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='aeiou') -> bool:\n    \"\"\"Check if a string contains all vowels in order\"\"\"\n    vowels = iter(target)\n    for c in s:\n        if c == next(vowels, ''):\n            if c == 'u':\n                return True\n    return False", "solution_func": "def g(target = 'aeiou'):\n    vowels = iter(target)\n    return ''.join(next(vowels) for _ in range(len(target)))", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0, count=3) -> bool:\n    \"\"\"Find a list of count or more numbers that add up to the target\"\"\"\n    assert sum(nums) == target\n    return len(nums) >= count\ndef g(target = 0, count = 3):\n    nums = [1, 2, 3, 4, 5]\n    return [n for n in nums if n <= target]\nassert f(g())\n", "emb": null, "idx_generation": 483, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0, count=3) -> bool:\n    \"\"\"Find a list of count or more numbers that add up to the target\"\"\"\n    assert sum(nums) == target\n    return len(nums) >= count", "solution_func": "def g(target = 0, count = 3):\n    nums = [1, 2, 3, 4, 5]\n    return [n for n in nums if n <= target]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\ndef f(nums: List[int], target=10, count=2) -> bool:\n    \"\"\"Find a list of count or more numbers that multiply to the target\"\"\"\n    assert math.prod(nums) == target\n    return len(nums) >= count\ndef g(target = 10, count = 2):\n    nums = [1, 2, 3, 4, 5]\n    return [n for n in nums if n <= target]\nassert f(g())\n", "emb": null, "idx_generation": 483, "target_skills": null, "problem_func": "import math\nfrom typing import*\ndef f(nums: List[int], target=10, count=2) -> bool:\n    \"\"\"Find a list of count or more numbers that multiply to the target\"\"\"\n    assert math.prod(nums) == target\n    return len(nums) >= count", "solution_func": "def g(target = 10, count = 2):\n    nums = [1, 2, 3, 4, 5]\n    return [n for n in nums if n <= target]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0, count=4) -> bool:\n    \"\"\"Find a list of count or more numbers that subtract from the target\"\"\"\n    assert target - sum(nums) == 0\n    return len(nums) >= count\ndef g(target = 0, count = 4):\n    nums = [1, 2, 3, 4, 5]\n    return [n for n in nums if n <= target]\nassert f(g())\n", "emb": null, "idx_generation": 483, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0, count=4) -> bool:\n    \"\"\"Find a list of count or more numbers that subtract from the target\"\"\"\n    assert target - sum(nums) == 0\n    return len(nums) >= count", "solution_func": "def g(target = 0, count = 4):\n    nums = [1, 2, 3, 4, 5]\n    return [n for n in nums if n <= target]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, k: int, nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of integers that sum up to a given number k.\n    - n is the length of the list\n    - nums is the list of integers\n    \"\"\"\n\n    def pair_exists() -> bool:\n        seen = set()\n        for num in nums:\n            if k - num in seen:\n                return True\n            seen.add(num)\n        return False\n\n    return pair_exists()\ndef g(k = 10, nums = [2, 4, 6, 8]):\n    return len(nums), k, nums\nassert f(g())\n", "emb": null, "idx_generation": 483, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k: int, nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of integers that sum up to a given number k.\n    - n is the length of the list\n    - nums is the list of integers\n    \"\"\"\n\n    def pair_exists() -> bool:\n        seen = set()\n        for num in nums:\n            if k - num in seen:\n                return True\n            seen.add(num)\n        return False\n\n    return pair_exists()", "solution_func": "def g(k = 10, nums = [2, 4, 6, 8]):\n    return len(nums), k, nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, substr: str) -> bool:\n    \"\"\"Check if a substring exists in a given string.\"\"\"\n    return substr in string\ndef g(substr = \"world\", string = \"hello world\"):\n    return string, substr\nassert f(g())\n", "emb": null, "idx_generation": 483, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substr: str) -> bool:\n    \"\"\"Check if a substring exists in a given string.\"\"\"\n    return substr in string", "solution_func": "def g(substr = \"world\", string = \"hello world\"):\n    return string, substr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subsequence of length 3 that is in increasing order.\n    - n is the length of the list\n    - nums is the list of integers\n    \"\"\"\n\n    def increasing_subsequence() -> bool:\n        for i in range(n - 2):\n            if nums[i] < nums[i + 1] < nums[i + 2]:\n                return True\n        return False\n\n    return increasing_subsequence()\ndef g(nums = [3, 2, 4, 1, 5]):\n    return len(nums), nums\nassert f(g())\n", "emb": null, "idx_generation": 483, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subsequence of length 3 that is in increasing order.\n    - n is the length of the list\n    - nums is the list of integers\n    \"\"\"\n\n    def increasing_subsequence() -> bool:\n        for i in range(n - 2):\n            if nums[i] < nums[i + 1] < nums[i + 2]:\n                return True\n        return False\n\n    return increasing_subsequence()", "solution_func": "def g(nums = [3, 2, 4, 1, 5]):\n    return len(nums), nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=24) -> bool:\n    \"\"\"Check if it is possible to obtain the target number using all the elements of the array and the operators +, -, *, /\"\"\"\n    from itertools import permutations\n    ops = ['+', '-', '*', '/']\n    for p in permutations(arr):\n        for o1 in ops:\n            for o2 in ops:\n                for o3 in ops:\n                    expr = f\"({p[0]} {o1} {p[1]}) {o2} {p[2]} {o3} {p[3]}\"\n                    try:\n                        if eval(expr) == target:\n                            return True\n                    except ZeroDivisionError:\n                        pass\n    return False\n\ndef g(arr=[4, 6, 8, 2], target=24):\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 483, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=24) -> bool:\n    \"\"\"Check if it is possible to obtain the target number using all the elements of the array and the operators +, -, *, /\"\"\"\n    from itertools import permutations\n    ops = ['+', '-', '*', '/']\n    for p in permutations(arr):\n        for o1 in ops:\n            for o2 in ops:\n                for o3 in ops:\n                    expr = f\"({p[0]} {o1} {p[1]}) {o2} {p[2]} {o3} {p[3]}\"\n                    try:\n                        if eval(expr) == target:\n                            return True\n                    except ZeroDivisionError:\n                        pass\n    return False", "solution_func": "def g(arr=[4, 6, 8, 2], target=24):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, words: List[str], k=0) -> bool:\n    \"\"\"Check if it is possible to form the string s using the given list of words, where each word is used only once\"\"\"\n    if k == len(s):\n        return True\n    for i in range(len(words)):\n        if words[i] != \"\" and s[k:].startswith(words[i]):\n            if f(s, words[:i] + words[i+1:], k + len(words[i])):\n                return True\n    return False\n\ndef g(words=[\"quick\", \"brown\", \"the\", \"fox\"], s=\"thequickbrownfox\"):\n    return s, words\n\nassert f(g())\n", "emb": null, "idx_generation": 483, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, words: List[str], k=0) -> bool:\n    \"\"\"Check if it is possible to form the string s using the given list of words, where each word is used only once\"\"\"\n    if k == len(s):\n        return True\n    for i in range(len(words)):\n        if words[i] != \"\" and s[k:].startswith(words[i]):\n            if f(s, words[:i] + words[i+1:], k + len(words[i])):\n                return True\n    return False", "solution_func": "def g(words=[\"quick\", \"brown\", \"the\", \"fox\"], s=\"thequickbrownfox\"):\n    return s, words", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if it is possible to obtain the target number using all the elements of the array and the operators +, -, *, /\"\"\"\n    from itertools import permutations\n    ops = ['+', '-', '*', '/']\n    for p in permutations(nums):\n        for o1 in ops:\n            for o2 in ops:\n                for o3 in ops:\n                    expr = f\"({p[0]} {o1} {p[1]}) {o2} {p[2]} {o3} {p[3]}\"\n                    try:\n                        if eval(expr) == target:\n                            return True\n                    except ZeroDivisionError:\n                        pass\n    return False\n\ndef g(nums=[1, 2, 3, 4], target=0):\n    return nums, target\n\nassert f(g())\n", "emb": null, "idx_generation": 483, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if it is possible to obtain the target number using all the elements of the array and the operators +, -, *, /\"\"\"\n    from itertools import permutations\n    ops = ['+', '-', '*', '/']\n    for p in permutations(nums):\n        for o1 in ops:\n            for o2 in ops:\n                for o3 in ops:\n                    expr = f\"({p[0]} {o1} {p[1]}) {o2} {p[2]} {o3} {p[3]}\"\n                    try:\n                        if eval(expr) == target:\n                            return True\n                    except ZeroDivisionError:\n                        pass\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4], target=0):\n    return nums, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring=\"hello\") -> bool:\n    \"\"\"Check if a given substring is present in the string\"\"\"\n    return substring in s\ndef g(substring=\"hello\"):\n    return \"This is a hello world!\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 483, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring=\"hello\") -> bool:\n    \"\"\"Check if a given substring is present in the string\"\"\"\n    return substring in s", "solution_func": "def g(substring=\"hello\"):\n    return \"This is a hello world!\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exist three integers in the list that sum up to the target.\n    \"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, 3))\ndef g(nums: List[int], target: int):\n    return nums, target\nassert f(g())\n", "emb": null, "idx_generation": 484, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exist three integers in the list that sum up to the target.\n    \"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, 3))", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string s, determine if it is a palindrome.\n    \"\"\"\n    return s == s[::-1]\ndef g(s: str):\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 484, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string s, determine if it is a palindrome.\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g(s: str):\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, find the longest increasing subsequence.\n    \"\"\"\n    dp = [1] * len(nums)\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\ndef g(nums: List[int]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 484, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, find the longest increasing subsequence.\n    \"\"\"\n    dp = [1] * len(nums)\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "solution_func": "def g(nums: List[int]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find if there exist two numbers in the given list that add up to the target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums: List[int], target: int):\n    return nums\n\nassert f(g()) == True", "emb": null, "idx_generation": 484, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find if there exist two numbers in the given list that add up to the target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Find if the given matrix is symmetric.\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\nassert f(g()) == True", "emb": null, "idx_generation": 484, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Find if the given matrix is symmetric.\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(matrix: List[List[int]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(sentence: str) -> bool:\n    \"\"\"\n    Find if the given sentence is a palindrome (reads the same forwards and backwards).\n    \"\"\"\n    sentence = sentence.lower().replace(\" \", \"\")\n    return sentence == sentence[::-1]\n\ndef g(sentence: str):\n    return sentence\n\nassert f(g()) == True", "emb": null, "idx_generation": 484, "target_skills": null, "problem_func": "from typing import*\ndef f(sentence: str) -> bool:\n    \"\"\"\n    Find if the given sentence is a palindrome (reads the same forwards and backwards).\n    \"\"\"\n    sentence = sentence.lower().replace(\" \", \"\")\n    return sentence == sentence[::-1]", "solution_func": "def g(sentence: str):\n    return sentence", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], target=10) -> bool:\n    \"\"\"Check if any two numbers in the list sum up to the target\"\"\"\n    for i in range(len(x)):\n        for j in range(i + 1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, target - 4]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 484, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], target=10) -> bool:\n    \"\"\"Check if any two numbers in the list sum up to the target\"\"\"\n    for i in range(len(x)):\n        for j in range(i + 1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, target - 4]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string contains at least n consecutive vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\ndef g(n=3):\n    return \"aeiou\" * n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 484, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string contains at least n consecutive vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False", "solution_func": "def g(n=3):\n    return \"aeiou\" * n", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a subset of the list whose sum is equal to the target\"\"\"\n    def subset_sum(nums, target, index, current_sum):\n        if current_sum == target:\n            return True\n        if current_sum > target or index >= len(nums):\n            return False\n        return subset_sum(nums, target, index + 1, current_sum + nums[index]) or subset_sum(nums, target, index + 1, current_sum)\n    return subset_sum(nums, target, 0, 0)\ndef g(target=20):\n    return [10, 5, 3, target - 18]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 484, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a subset of the list whose sum is equal to the target\"\"\"\n    def subset_sum(nums, target, index, current_sum):\n        if current_sum == target:\n            return True\n        if current_sum > target or index >= len(nums):\n            return False\n        return subset_sum(nums, target, index + 1, current_sum + nums[index]) or subset_sum(nums, target, index + 1, current_sum)\n    return subset_sum(nums, target, 0, 0)", "solution_func": "def g(target=20):\n    return [10, 5, 3, target - 18]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=3.14, b=2.718) -> bool:\n    \"\"\"Check if the given values satisfy a mathematical equation\"\"\"\n    return math.sin(x) + math.cos(y) + math.exp(z) == a + b\n\ndef g(a=3.14, b=2.718):\n    x = math.asin(a - b)\n    y = math.acos(a - b)\n    z = math.log(a + b)\n    return x, y, z\n\nassert f(*g())\n", "emb": null, "idx_generation": 484, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=3.14, b=2.718) -> bool:\n    \"\"\"Check if the given values satisfy a mathematical equation\"\"\"\n    return math.sin(x) + math.cos(y) + math.exp(z) == a + b", "solution_func": "def g(a=3.14, b=2.718):\n    x = math.asin(a - b)\n    y = math.acos(a - b)\n    z = math.log(a + b)\n    return x, y, z", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int, d: int, e: int, f: int, x: int) -> bool:\n    \"\"\"\n    Given six integers a, b, c, d, e, and f, determine if there exists an integer x such that the equation\n    ax^2 + bx + c = dx^2 + ex + f is satisfied.\n    \"\"\"\n    return a * x**2 + b * x + c == d * x**2 + e * x + f\n\ndef g(a: int, b: int, c: int, d: int, e: int, f: int) -> int:\n    \"\"\"\n    Given six integers a, b, c, d, e, and f, find an integer x such that the equation ax^2 + bx + c = dx^2 + ex + f is satisfied.\n    \"\"\"\n    if a == d and b == e and c == f:\n        return 0\n    elif a == d and b == e:\n        return math.inf\n    else:\n        return (c - f) / (e - b)\n\nassert f(g())\n", "emb": null, "idx_generation": 485, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int, d: int, e: int, f: int, x: int) -> bool:\n    \"\"\"\n    Given six integers a, b, c, d, e, and f, determine if there exists an integer x such that the equation\n    ax^2 + bx + c = dx^2 + ex + f is satisfied.\n    \"\"\"\n    return a * x**2 + b * x + c == d * x**2 + e * x + f", "solution_func": "def g(a: int, b: int, c: int, d: int, e: int, f: int) -> int:\n    \"\"\"\n    Given six integers a, b, c, d, e, and f, find an integer x such that the equation ax^2 + bx + c = dx^2 + ex + f is satisfied.\n    \"\"\"\n    if a == d and b == e and c == f:\n        return 0\n    elif a == d and b == e:\n        return math.inf\n    else:\n        return (c - f) / (e - b)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport itertools\n\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers lst and a positive integer n, determine if there exists a sublist of lst that sums to n.\n    \"\"\"\n    for i in range(1, len(lst) + 1):\n        for comb in itertools.combinations(lst, i):\n            if sum(comb) == n:\n                return True\n    return False\n\ndef g(lst: List[int], n: int) -> List[int]:\n    \"\"\"\n    Given a list of integers lst and a positive integer n, find a sublist of lst that sums to n.\n    \"\"\"\n    for i in range(1, len(lst) + 1):\n        for comb in itertools.combinations(lst, i):\n            if sum(comb) == n:\n                return list(comb)\n    return []\n\nassert f(g())\n", "emb": null, "idx_generation": 485, "target_skills": null, "problem_func": "from typing import*\nimport itertools\n\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers lst and a positive integer n, determine if there exists a sublist of lst that sums to n.\n    \"\"\"\n    for i in range(1, len(lst) + 1):\n        for comb in itertools.combinations(lst, i):\n            if sum(comb) == n:\n                return True\n    return False", "solution_func": "def g(lst: List[int], n: int) -> List[int]:\n    \"\"\"\n    Given a list of integers lst and a positive integer n, find a sublist of lst that sums to n.\n    \"\"\"\n    for i in range(1, len(lst) + 1):\n        for comb in itertools.combinations(lst, i):\n            if sum(comb) == n:\n                return list(comb)\n    return []", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string s, determine if it is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s: str) -> str:\n    \"\"\"\n    Given a string s, return its reverse.\n    \"\"\"\n    return s[::-1]\n\nassert f(g())\n", "emb": null, "idx_generation": 485, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string s, determine if it is a palindrome.\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g(s: str) -> str:\n    \"\"\"\n    Given a string s, return its reverse.\n    \"\"\"\n    return s[::-1]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, k: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list nums whose sum is equal to k.\"\"\"\n    return any((True if k - x in nums else False for x in nums))\ndef g(k=11, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return k\nassert f(g(), g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 485, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list nums whose sum is equal to k.\"\"\"\n    return any((True if k - x in nums else False for x in nums))", "solution_func": "def g(k=11, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return k", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], k: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list lst whose sum is equal to k.\"\"\"\n    return any((True if k - x in lst else False for x in lst))\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=11):\n    return lst\nassert f(g(), g())\n", "emb": null, "idx_generation": 485, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], k: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list lst whose sum is equal to k.\"\"\"\n    return any((True if k - x in lst else False for x in lst))", "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=11):\n    return lst", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(dt: datetime, days=7) -> bool:\n    \"\"\"Check if the given datetime is within the last 'days' number of days.\"\"\"\n    return (datetime.now() - dt).days <= days\ndef g(days=7):\n    return datetime.now() - timedelta(days=days)\nassert f(g())\n", "emb": null, "idx_generation": 485, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(dt: datetime, days=7) -> bool:\n    \"\"\"Check if the given datetime is within the last 'days' number of days.\"\"\"\n    return (datetime.now() - dt).days <= days", "solution_func": "def g(days=7):\n    return datetime.now() - timedelta(days=days)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[2, 5, 10, 15, 20]) -> bool:\n    \"\"\"Check if n is divisible by any number in nums\"\"\"\n    for num in nums:\n        if n % num == 0:\n            return True\n    return False\ndef g(nums=[2, 5, 10, 15, 20]):\n    i = 1\n    while True:\n        if all(i % num != 0 for num in nums):\n            return i\n        i += 1\nassert f(g())\n", "emb": null, "idx_generation": 485, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[2, 5, 10, 15, 20]) -> bool:\n    \"\"\"Check if n is divisible by any number in nums\"\"\"\n    for num in nums:\n        if n % num == 0:\n            return True\n    return False", "solution_func": "def g(nums=[2, 5, 10, 15, 20]):\n    i = 1\n    while True:\n        if all(i % num != 0 for num in nums):\n            return i\n        i += 1", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, sub_str='puzzle', start=0) -> bool:\n    \"\"\"Check if sub_str appears in s starting at index start\"\"\"\n    return s.find(sub_str, start) == start\ndef g(sub_str='puzzle', start=0):\n    return 'puzzle' + sub_str + 'puzzle' * start\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 485, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, sub_str='puzzle', start=0) -> bool:\n    \"\"\"Check if sub_str appears in s starting at index start\"\"\"\n    return s.find(sub_str, start) == start", "solution_func": "def g(sub_str='puzzle', start=0):\n    return 'puzzle' + sub_str + 'puzzle' * start", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there are two distinct numbers in nums that sum to target_sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=100):\n    nums = [i for i in range(1, target_sum+1)]\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 485, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there are two distinct numbers in nums that sum to target_sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(target_sum=100):\n    nums = [i for i in range(1, target_sum+1)]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(text: str, char='a', count=3) -> bool:\n    \"\"\"Check if a certain character appears a certain number of times in a given text\"\"\"\n    return text.count(char) == count\ndef g(char = 'a', count = 3):\n    text = ''\n    for i in range(count):\n        text += char\n    return text\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 485, "target_skills": null, "problem_func": "from typing import*\ndef f(text: str, char='a', count=3) -> bool:\n    \"\"\"Check if a certain character appears a certain number of times in a given text\"\"\"\n    return text.count(char) == count", "solution_func": "def g(char = 'a', count = 3):\n    text = ''\n    for i in range(count):\n        text += char\n    return text", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int, rows=4, cols=4) -> bool:\n    \"\"\"\n    Check if the target number exists in the matrix.\n    \"\"\"\n    for i in range(rows):\n        if target in matrix[i]:\n            return True\n    return False\n\ndef g(target=7, rows=4, cols=4):\n    return [[1, 2, 3, 4],\n            [5, 6, 7, 8],\n            [9, 10, 11, 12],\n            [13, 14, 15, 16]]\n\nassert f(g())\n", "emb": null, "idx_generation": 486, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int, rows=4, cols=4) -> bool:\n    \"\"\"\n    Check if the target number exists in the matrix.\n    \"\"\"\n    for i in range(rows):\n        if target in matrix[i]:\n            return True\n    return False", "solution_func": "def g(target=7, rows=4, cols=4):\n    return [[1, 2, 3, 4],\n            [5, 6, 7, 8],\n            [9, 10, 11, 12],\n            [13, 14, 15, 16]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find if there exists a pair of numbers in the list that sum up to the target.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        diff = target - num\n        if diff in num_set:\n            return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": null, "idx_generation": 486, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find if there exists a pair of numbers in the list that sum up to the target.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        diff = target - num\n        if diff in num_set:\n            return True\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int, rows=3, cols=3) -> bool:\n    \"\"\"\n    Check if the target number exists in the matrix, considering only the elements in the upper triangle.\n    \"\"\"\n    for i in range(rows):\n        for j in range(i, cols):\n            if matrix[i][j] == target:\n                return True\n    return False\n\ndef g(target=7, rows=3, cols=3):\n    return [[1, 2, 3],\n            [0, 4, 5],\n            [0, 0, 6]]\n\nassert f(g())\n", "emb": null, "idx_generation": 486, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int, rows=3, cols=3) -> bool:\n    \"\"\"\n    Check if the target number exists in the matrix, considering only the elements in the upper triangle.\n    \"\"\"\n    for i in range(rows):\n        for j in range(i, cols):\n            if matrix[i][j] == target:\n                return True\n    return False", "solution_func": "def g(target=7, rows=3, cols=3):\n    return [[1, 2, 3],\n            [0, 4, 5],\n            [0, 0, 6]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=5, strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig']) -> bool:\n    \"\"\"Check if the given string is present in a list of strings, and if it appears exactly n times.\"\"\"\n    return strings.count(s) == n\ndef g(n = 5, strings = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig']):\n    return strings[n]\nassert f(g())\n", "emb": null, "idx_generation": 486, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5, strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig']) -> bool:\n    \"\"\"Check if the given string is present in a list of strings, and if it appears exactly n times.\"\"\"\n    return strings.count(s) == n", "solution_func": "def g(n = 5, strings = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig']):\n    return strings[n]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(start: int, k=3, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find a sequence of k consecutive numbers whose sum is equal to the starting number.\"\"\"\n    return any(sum(seq[i:i+k]) == start for i in range(len(seq)-k+1))\ndef g(k = 3, seq = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return sum(seq[:k])\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 486, "target_skills": null, "problem_func": "from typing import*\ndef f(start: int, k=3, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find a sequence of k consecutive numbers whose sum is equal to the starting number.\"\"\"\n    return any(sum(seq[i:i+k]) == start for i in range(len(seq)-k+1))", "solution_func": "def g(k = 3, seq = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return sum(seq[:k])", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=1, b=1, c=2, d=3) -> bool:\n    \"\"\"Check if the given number is the product of a, b, c, and d.\"\"\"\n    return n == a * b * c * d\ndef g(a = 1, b = 1, c = 2, d = 3):\n    return a * b * c * d\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 486, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=1, b=1, c=2, d=3) -> bool:\n    \"\"\"Check if the given number is the product of a, b, c, and d.\"\"\"\n    return n == a * b * c * d", "solution_func": "def g(a = 1, b = 1, c = 2, d = 3):\n    return a * b * c * d", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, k=2) -> bool:\n    \"\"\"Check if there are any two elements in the array that sum up to k.\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == k:\n                return True\n    return False\n\ndef g(k=2):\n    return np.array([1, 2, 3, 4, 5])\n\nassert f(g())\n", "emb": null, "idx_generation": 486, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, k=2) -> bool:\n    \"\"\"Check if there are any two elements in the array that sum up to k.\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == k:\n                return True\n    return False", "solution_func": "def g(k=2):\n    return np.array([1, 2, 3, 4, 5])", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport re\n\ndef f(s: str, pattern=r'\\d{3}-\\d{3}-\\d{4}') -> bool:\n    \"\"\"Check if a given pattern matches the format of a phone number.\"\"\"\n    return bool(re.match(pattern, s))\n\ndef g(pattern=r'\\d{3}-\\d{3}-\\d{4}'):\n    return \"123-456-7890\"\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0], "idx_generation": 486, "target_skills": null, "problem_func": "from typing import*\nimport re\n\ndef f(s: str, pattern=r'\\d{3}-\\d{3}-\\d{4}') -> bool:\n    \"\"\"Check if a given pattern matches the format of a phone number.\"\"\"\n    return bool(re.match(pattern, s))", "solution_func": "def g(pattern=r'\\d{3}-\\d{3}-\\d{4}'):\n    return \"123-456-7890\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom datetime import date\n\ndef f(dates: list, year=2022) -> bool:\n    \"\"\"Check if all the dates in the list are from the given year.\"\"\"\n    return all(date.year == year for date in dates)\n\ndef g(year=2022):\n    return [date(2022, 1, 1), date(2022, 2, 2), date(2022, 3, 3)]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 486, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import date\n\ndef f(dates: list, year=2022) -> bool:\n    \"\"\"Check if all the dates in the list are from the given year.\"\"\"\n    return all(date.year == year for date in dates)", "solution_func": "def g(year=2022):\n    return [date(2022, 1, 1), date(2022, 2, 2), date(2022, 3, 3)]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k=3, upper=15) -> bool:\n    \"\"\"Find a combination of k numbers from the list that sums up to the target.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k)) and sum(nums) <= upper\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=15, k=3, upper=15):\n    \"\"\"Return a combination of k numbers from the list that sums up to the target.\"\"\"\n    from itertools import combinations\n    for comb in combinations(nums, k):\n        if sum(comb) == target:\n            return comb\n    return []\nassert f(g())\n", "emb": null, "idx_generation": 486, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k=3, upper=15) -> bool:\n    \"\"\"Find a combination of k numbers from the list that sums up to the target.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k)) and sum(nums) <= upper", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=15, k=3, upper=15):\n    \"\"\"Return a combination of k numbers from the list that sums up to the target.\"\"\"\n    from itertools import combinations\n    for comb in combinations(nums, k):\n        if sum(comb) == target:\n            return comb\n    return []", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(x: np.ndarray, a: int = 5, b: int = 10) -> bool:\n    \"\"\"Check if the sum of the elements in the array is divisible by a and the maximum element is greater than b.\"\"\"\n    return np.sum(x) % a == 0 and np.max(x) > b\n\ndef g(a: int = 5, b: int = 10):\n    return np.array([1, 2, 3, 4, 5])\n\nassert f(g())\n", "emb": null, "idx_generation": 487, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(x: np.ndarray, a: int = 5, b: int = 10) -> bool:\n    \"\"\"Check if the sum of the elements in the array is divisible by a and the maximum element is greater than b.\"\"\"\n    return np.sum(x) % a == 0 and np.max(x) > b", "solution_func": "def g(a: int = 5, b: int = 10):\n    return np.array([1, 2, 3, 4, 5])", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(x: int, a: int = 10, b: int = 20) -> bool:\n    \"\"\"Check if x is divisible by a and if a random number between 1 and b is equal to x.\"\"\"\n    return x % a == 0 and random.randint(1, b) == x\n\ndef g(a: int = 10, b: int = 20):\n    return random.randint(1, b)\n\nassert f(g())\n", "emb": null, "idx_generation": 487, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(x: int, a: int = 10, b: int = 20) -> bool:\n    \"\"\"Check if x is divisible by a and if a random number between 1 and b is equal to x.\"\"\"\n    return x % a == 0 and random.randint(1, b) == x", "solution_func": "def g(a: int = 10, b: int = 20):\n    return random.randint(1, b)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(x: int, a: int = 100, b: int = 5) -> bool:\n    \"\"\"Check if the current year modulo a is equal to x and if the current month is less than b.\"\"\"\n    now = datetime.now()\n    return now.year % a == x and now.month < b\n\ndef g(a: int = 100, b: int = 5):\n    now = datetime.now()\n    return now.year % a\n\nassert f(g())\n", "emb": null, "idx_generation": 487, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(x: int, a: int = 100, b: int = 5) -> bool:\n    \"\"\"Check if the current year modulo a is equal to x and if the current month is less than b.\"\"\"\n    now = datetime.now()\n    return now.year % a == x and now.month < b", "solution_func": "def g(a: int = 100, b: int = 5):\n    now = datetime.now()\n    return now.year % a", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[List[int]], target=10):\n    \"\"\"\n    Given a list of lists of integers, return True if there exists a sublist whose sum is equal to the target, and False otherwise.\n\n    Example:\n    Input: [[1, 2, 3], [4, 5], [6, 7, 8]]\n    Output: True\n\n    Input: [[1, 2, 3], [4, 5], [6, 7, 8]]\n    Output: False\n    \"\"\"\n    return any((sum(sub) == target for sub in lst))\ndef g(target=10):\n    return [[1, 2, 3], [4, 5], [6, 7, 8]]\nassert f(g())\n", "emb": null, "idx_generation": 487, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[List[int]], target=10):\n    \"\"\"\n    Given a list of lists of integers, return True if there exists a sublist whose sum is equal to the target, and False otherwise.\n\n    Example:\n    Input: [[1, 2, 3], [4, 5], [6, 7, 8]]\n    Output: True\n\n    Input: [[1, 2, 3], [4, 5], [6, 7, 8]]\n    Output: False\n    \"\"\"\n    return any((sum(sub) == target for sub in lst))", "solution_func": "def g(target=10):\n    return [[1, 2, 3], [4, 5], [6, 7, 8]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(word: str, letters='aeiou') -> bool:\n    \"\"\"\n    Given a word and a string of letters, return True if all the letters in the word are present in the string, and False otherwise.\n\n    Example:\n    Input: 'hello', 'helo'\n    Output: True\n\n    Input: 'world', 'wrd'\n    Output: False\n    \"\"\"\n    return all((char in letters for char in word))\ndef g(letters='aeiou'):\n    return 'hello'\nassert f(g())\n", "emb": null, "idx_generation": 487, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str, letters='aeiou') -> bool:\n    \"\"\"\n    Given a word and a string of letters, return True if all the letters in the word are present in the string, and False otherwise.\n\n    Example:\n    Input: 'hello', 'helo'\n    Output: True\n\n    Input: 'world', 'wrd'\n    Output: False\n    \"\"\"\n    return all((char in letters for char in word))", "solution_func": "def g(letters='aeiou'):\n    return 'hello'", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Given a matrix (list of lists) of integers and a target integer, return True if there exists a row or a column whose sum is equal to the target, and False otherwise.\n\n    Example:\n    Input: [[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10\n    Output: True\n\n    Input: [[1, 2, 3], [4, 5, 6], [7, 8, 9]], 20\n    Output: False\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(cols):\n        if sum(matrix[k][j] for k in range(rows)) == target:\n            return True\n    return False\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 487, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Given a matrix (list of lists) of integers and a target integer, return True if there exists a row or a column whose sum is equal to the target, and False otherwise.\n\n    Example:\n    Input: [[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10\n    Output: True\n\n    Input: [[1, 2, 3], [4, 5, 6], [7, 8, 9]], 20\n    Output: False\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(cols):\n        if sum(matrix[k][j] for k in range(rows)) == target:\n            return True\n    return False", "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Find if there exists two distinct indices i and j in the given list such that nums[i] + nums[j] == k.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5], k = 7\n\n    Sample output:\n    True\n\n    Explanation:\n    nums[2] + nums[4] = 3 + 4 = 7\n    \"\"\"\n    return any(nums[i] + nums[j] == k for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums = [1, 2, 3, 4, 5], k = 7):\n    return nums, k\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 487, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Find if there exists two distinct indices i and j in the given list such that nums[i] + nums[j] == k.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5], k = 7\n\n    Sample output:\n    True\n\n    Explanation:\n    nums[2] + nums[4] = 3 + 4 = 7\n    \"\"\"\n    return any(nums[i] + nums[j] == k for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(nums = [1, 2, 3, 4, 5], k = 7):\n    return nums, k", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, determine if it is symmetric along its main diagonal.\n\n    Sample input:\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n\n    Sample output:\n    False\n\n    Explanation:\n    The diagonal elements are [1, 4, 6], which are not equal to the corresponding elements on the other side of the diagonal.\n    \"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(i+1, len(matrix)))\ndef g(matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\nassert f(*g())\n", "emb": null, "idx_generation": 487, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, determine if it is symmetric along its main diagonal.\n\n    Sample input:\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n\n    Sample output:\n    False\n\n    Explanation:\n    The diagonal elements are [1, 4, 6], which are not equal to the corresponding elements on the other side of the diagonal.\n    \"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(i+1, len(matrix)))", "solution_func": "def g(matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, find if it contains a duplicate number.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 1]\n\n    Sample output:\n    True\n\n    Explanation:\n    The number 1 appears twice in the list.\n    \"\"\"\n    return len(nums) != len(set(nums))\ndef g(nums = [1, 2, 3, 4, 1]):\n    return nums\nassert f(*g())\n", "emb": null, "idx_generation": 487, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, find if it contains a duplicate number.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 1]\n\n    Sample output:\n    True\n\n    Explanation:\n    The number 1 appears twice in the list.\n    \"\"\"\n    return len(nums) != len(set(nums))", "solution_func": "def g(nums = [1, 2, 3, 4, 1]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=2, b=8) -> bool:\n    \"\"\"Check if a number is the result of adding two other numbers\"\"\"\n    return any(((x + y) == n) for x in range(a) for y in range(b))\ndef g(a=2, b=8):\n    return a + b\nassert f(g())\n", "emb": null, "idx_generation": 487, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=2, b=8) -> bool:\n    \"\"\"Check if a number is the result of adding two other numbers\"\"\"\n    return any(((x + y) == n) for x in range(a) for y in range(b))", "solution_func": "def g(a=2, b=8):\n    return a + b", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"\n    Check if string s contains at least n consecutive vowels (a, e, i, o, u).\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(n=5):\n    s = \"aeiou\" * n\n    return s\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 488, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"\n    Check if string s contains at least n consecutive vowels (a, e, i, o, u).\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False", "solution_func": "def g(n=5):\n    s = \"aeiou\" * n\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], n=12) -> bool:\n    \"\"\"\n    Check if there are exactly n pairs of elements in arr that sum up to 10.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == 10:\n                count += 1\n    return count == n\n\ndef g(n=12):\n    arr = [1, 9] * (n // 2)\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 488, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], n=12) -> bool:\n    \"\"\"\n    Check if there are exactly n pairs of elements in arr that sum up to 10.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == 10:\n                count += 1\n    return count == n", "solution_func": "def g(n=12):\n    arr = [1, 9] * (n // 2)\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(arr: List[int], n=10) -> bool:\n    \"\"\"\n    Check if there are exactly n distinct even numbers in arr.\n    \"\"\"\n    evens = set()\n    for num in arr:\n        if num % 2 == 0:\n            evens.add(num)\n            if len(evens) == n:\n                return True\n    return False\n\ndef g(n=10):\n    arr = random.sample(range(100), n)\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 488, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(arr: List[int], n=10) -> bool:\n    \"\"\"\n    Check if there are exactly n distinct even numbers in arr.\n    \"\"\"\n    evens = set()\n    for num in arr:\n        if num % 2 == 0:\n            evens.add(num)\n            if len(evens) == n:\n                return True\n    return False", "solution_func": "def g(n=10):\n    arr = random.sample(range(100), n)\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target_sum=20) -> bool:\n    \"\"\"Check if the sum of all elements in the list is equal to the target sum.\"\"\"\n    return sum(x) == target_sum\n\ndef g(target_sum=20):\n    \"\"\"Generate a list of numbers from 1 to 10.\"\"\"\n    return list(range(1, 11))\n\nassert f(g())\n", "emb": null, "idx_generation": 488, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target_sum=20) -> bool:\n    \"\"\"Check if the sum of all elements in the list is equal to the target sum.\"\"\"\n    return sum(x) == target_sum", "solution_func": "def g(target_sum=20):\n    \"\"\"Generate a list of numbers from 1 to 10.\"\"\"\n    return list(range(1, 11))", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: str, target_char='a') -> bool:\n    \"\"\"Check if the target character is present in the given string.\"\"\"\n    return target_char in x\n\ndef g(target_char='a'):\n    \"\"\"Generate a string consisting of alternating characters 'a' and 'b'.\"\"\"\n    return ''.join([target_char if i % 2 == 0 else 'b' for i in range(10)])\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 488, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str, target_char='a') -> bool:\n    \"\"\"Check if the target character is present in the given string.\"\"\"\n    return target_char in x", "solution_func": "def g(target_char='a'):\n    \"\"\"Generate a string consisting of alternating characters 'a' and 'b'.\"\"\"\n    return ''.join([target_char if i % 2 == 0 else 'b' for i in range(10)])", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, a=5, b=10) -> bool:\n    \"\"\"Check if the given number is divisible by either a or b.\"\"\"\n    return x % a == 0 or x % b == 0\n\ndef g(a=5, b=10):\n    \"\"\"Generate a number that is divisible by both a and b.\"\"\"\n    return a * b\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 488, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=5, b=10) -> bool:\n    \"\"\"Check if the given number is divisible by either a or b.\"\"\"\n    return x % a == 0 or x % b == 0", "solution_func": "def g(a=5, b=10):\n    \"\"\"Generate a number that is divisible by both a and b.\"\"\"\n    return a * b", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(s: str, target='abcdefghijklmnopqrstuvwxyz', length=3) -> bool:\n    \"\"\"Check if the given string is a substring of the target string\"\"\"\n    return s in target\ndef g(target = 'abcdefghijklmnopqrstuvwxyz', length = 3):\n    return random.choice(target)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 488, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(s: str, target='abcdefghijklmnopqrstuvwxyz', length=3) -> bool:\n    \"\"\"Check if the given string is a substring of the target string\"\"\"\n    return s in target", "solution_func": "def g(target = 'abcdefghijklmnopqrstuvwxyz', length = 3):\n    return random.choice(target)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=10, y=2) -> bool:\n    \"\"\"Check if the given number is divisible by both x and y\"\"\"\n    return n % x == 0 and n % y == 0\ndef g(x = 10, y = 2):\n    return math.lcm(x, y)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 488, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=10, y=2) -> bool:\n    \"\"\"Check if the given number is divisible by both x and y\"\"\"\n    return n % x == 0 and n % y == 0", "solution_func": "def g(x = 10, y = 2):\n    return math.lcm(x, y)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport re\n\ndef f(s: str, pattern='[0-9]+') -> bool:\n    \"\"\"Check if the given string matches the specified regex pattern\"\"\"\n    return re.match(pattern, s) is not None\ndef g(pattern = '[0-9]+'):\n    return re.compile(pattern)\nassert f(g())\n", "emb": null, "idx_generation": 488, "target_skills": null, "problem_func": "from typing import*\nimport re\n\ndef f(s: str, pattern='[0-9]+') -> bool:\n    \"\"\"Check if the given string matches the specified regex pattern\"\"\"\n    return re.match(pattern, s) is not None", "solution_func": "def g(pattern = '[0-9]+'):\n    return re.compile(pattern)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a string has exactly n characters and ends with a number.\"\"\"\n    return len(s) == n and s[-1].isdigit()\ndef g(n = 5):\n    return \"abcde\" + str(n)\nassert f(g())\n", "emb": null, "idx_generation": 488, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a string has exactly n characters and ends with a number.\"\"\"\n    return len(s) == n and s[-1].isdigit()", "solution_func": "def g(n = 5):\n    return \"abcde\" + str(n)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, threshold=0.5) -> bool:\n    \"\"\"Check if all elements in the array are greater than a threshold\"\"\"\n    return np.all(arr > threshold)\n\ndef g(threshold=0.5):\n    return np.array([0.6, 0.7, 0.8, 0.9])\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 489, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, threshold=0.5) -> bool:\n    \"\"\"Check if all elements in the array are greater than a threshold\"\"\"\n    return np.all(arr > threshold)", "solution_func": "def g(threshold=0.5):\n    return np.array([0.6, 0.7, 0.8, 0.9])", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom collections import Counter\n\ndef f(s: str, min_count=3) -> bool:\n    \"\"\"Check if there are at least 'min_count' occurrences of any character in the string\"\"\"\n    return any(count >= min_count for count in Counter(s).values())\n\ndef g(min_count=3):\n    return \"abcccdefggg\"\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 489, "target_skills": null, "problem_func": "from typing import*\nfrom collections import Counter\n\ndef f(s: str, min_count=3) -> bool:\n    \"\"\"Check if there are at least 'min_count' occurrences of any character in the string\"\"\"\n    return any(count >= min_count for count in Counter(s).values())", "solution_func": "def g(min_count=3):\n    return \"abcccdefggg\"", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(li: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there are two distinct numbers in the list that sum up to the target sum\"\"\"\n    for i, num1 in enumerate(li):\n        for j, num2 in enumerate(li):\n            if i != j and num1 + num2 == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 489, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there are two distinct numbers in the list that sum up to the target sum\"\"\"\n    for i, num1 in enumerate(li):\n        for j, num2 in enumerate(li):\n            if i != j and num1 + num2 == target_sum:\n                return True\n    return False", "solution_func": "def g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, n=3) -> bool:\n    \"\"\"Find n numbers in nums that add up to the target\"\"\"\n    from itertools import combinations\n    for c in combinations(nums, n):\n        if sum(c) == target:\n            return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5], target=9, n=3):\n    return nums, target, n\nassert f(g())\n", "emb": null, "idx_generation": 489, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, n=3) -> bool:\n    \"\"\"Find n numbers in nums that add up to the target\"\"\"\n    from itertools import combinations\n    for c in combinations(nums, n):\n        if sum(c) == target:\n            return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=9, n=3):\n    return nums, target, n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, sub: str, n=2) -> bool:\n    \"\"\"Check if sub appears n times in s\"\"\"\n    return s.count(sub) == n\ndef g(s=\"programmingpuzzle\", sub=\"mm\", n=2):\n    return s, sub, n\nassert f(g())\n", "emb": null, "idx_generation": 489, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, sub: str, n=2) -> bool:\n    \"\"\"Check if sub appears n times in s\"\"\"\n    return s.count(sub) == n", "solution_func": "def g(s=\"programmingpuzzle\", sub=\"mm\", n=2):\n    return s, sub, n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], prefix: str, n=4) -> bool:\n    \"\"\"Find n words in words that start with prefix\"\"\"\n    return len([word for word in words if word.startswith(prefix)]) == n\ndef g(words=[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], prefix=\"b\", n=4):\n    return words, prefix, n\nassert f(g())\n", "emb": null, "idx_generation": 489, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], prefix: str, n=4) -> bool:\n    \"\"\"Find n words in words that start with prefix\"\"\"\n    return len([word for word in words if word.startswith(prefix)]) == n", "solution_func": "def g(words=[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], prefix=\"b\", n=4):\n    return words, prefix, n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if any two numbers in the array add up to the target number\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(arr = [1, 5, 7, 3, 9, 2, 6]):\n    return arr\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 489, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if any two numbers in the array add up to the target number\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr = [1, 5, 7, 3, 9, 2, 6]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if any character in the string repeats exactly n times\"\"\"\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for count in char_count.values():\n        if count == n:\n            return True\n    return False\ndef g(s = \"hello world\"):\n    return s\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 489, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if any character in the string repeats exactly n times\"\"\"\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for count in char_count.values():\n        if count == n:\n            return True\n    return False", "solution_func": "def g(s = \"hello world\"):\n    return s", "map_ix": [0, 1, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 489, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a combination of k numbers in the list that sums up to the target value.\n    \"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))\ndef g(nums = [1, 2, 3, 4, 5, 6], target = 10, k = 3):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 489, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a combination of k numbers in the list that sums up to the target value.\n    \"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6], target = 10, k = 3):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists two elements such that their sum is equal to the target.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr = [1, 5, 3, 8, 6]):\n    \"\"\"\n    Generate a list of integers with the given length.\n    \"\"\"\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 490, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists two elements such that their sum is equal to the target.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr = [1, 5, 3, 8, 6]):\n    \"\"\"\n    Generate a list of integers with the given length.\n    \"\"\"\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, target=90) -> bool:\n    \"\"\"\n    Check if a triangle with sides x, y, and z is a right triangle.\n    \"\"\"\n    if x <= 0 or y <= 0 or z <= 0:\n        return False\n    if x == y == z:\n        return False\n    if x > y and x > z:\n        return math.isclose(x**2, y**2 + z**2, rel_tol=1e-9)\n    elif y > x and y > z:\n        return math.isclose(y**2, x**2 + z**2, rel_tol=1e-9)\n    else:\n        return math.isclose(z**2, x**2 + y**2, rel_tol=1e-9)\n\ndef g(x = 3, y = 4, z = 5):\n    \"\"\"\n    Generate three floats representing the sides of a triangle.\n    \"\"\"\n    return x, y, z\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 490, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, target=90) -> bool:\n    \"\"\"\n    Check if a triangle with sides x, y, and z is a right triangle.\n    \"\"\"\n    if x <= 0 or y <= 0 or z <= 0:\n        return False\n    if x == y == z:\n        return False\n    if x > y and x > z:\n        return math.isclose(x**2, y**2 + z**2, rel_tol=1e-9)\n    elif y > x and y > z:\n        return math.isclose(y**2, x**2 + z**2, rel_tol=1e-9)\n    else:\n        return math.isclose(z**2, x**2 + y**2, rel_tol=1e-9)", "solution_func": "def g(x = 3, y = 4, z = 5):\n    \"\"\"\n    Generate three floats representing the sides of a triangle.\n    \"\"\"\n    return x, y, z", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target_length=5) -> bool:\n    \"\"\"\n    Check if a string has the target length and starts with the letter 'A'.\n    \"\"\"\n    return len(s) == target_length and s[0] == 'A'\n\ndef g(target_length = 5):\n    \"\"\"\n    Generate a string with the target length.\n    \"\"\"\n    return 'A' + 'B'*(target_length-1)\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 490, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target_length=5) -> bool:\n    \"\"\"\n    Check if a string has the target length and starts with the letter 'A'.\n    \"\"\"\n    return len(s) == target_length and s[0] == 'A'", "solution_func": "def g(target_length = 5):\n    \"\"\"\n    Generate a string with the target length.\n    \"\"\"\n    return 'A' + 'B'*(target_length-1)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, k: int, target=1) -> bool:\n    \"\"\"\n    Find a number where the sum of its digits equals a given target,\n    and the number of digits divisible by k is equal to n.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    digit_sum = sum(digits)\n    divisible_count = sum([1 for d in digits if d % k == 0])\n    return digit_sum == target and divisible_count == n\ndef g(target=1, k=2):\n    for n in range(10 ** 5):\n        if sum([int(d) for d in str(n)]) == target and sum([1 for d in str(n) if int(d) % k == 0]) == k:\n            return n\nassert f(g())\n", "emb": null, "idx_generation": 490, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k: int, target=1) -> bool:\n    \"\"\"\n    Find a number where the sum of its digits equals a given target,\n    and the number of digits divisible by k is equal to n.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    digit_sum = sum(digits)\n    divisible_count = sum([1 for d in digits if d % k == 0])\n    return digit_sum == target and divisible_count == n", "solution_func": "def g(target=1, k=2):\n    for n in range(10 ** 5):\n        if sum([int(d) for d in str(n)]) == target and sum([1 for d in str(n) if int(d) % k == 0]) == k:\n            return n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport datetime\n\ndef f(year: int, month: int, day: int, weekday: str) -> bool:\n    \"\"\"\n    Find a date where the weekday matches a given input.\n    \"\"\"\n    input_date = datetime.date(year, month, day)\n    weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    return weekdays[input_date.weekday()] == weekday\ndef g(weekday: str):\n    for year in range(2000, 2100):\n        for month in range(1, 13):\n            for day in range(1, 32):\n                try:\n                    date = datetime.date(year, month, day)\n                    if weekdays[date.weekday()] == weekday:\n                        return (year, month, day)\n                except ValueError:\n                    continue\nassert f(*g())\n", "emb": null, "idx_generation": 490, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(year: int, month: int, day: int, weekday: str) -> bool:\n    \"\"\"\n    Find a date where the weekday matches a given input.\n    \"\"\"\n    input_date = datetime.date(year, month, day)\n    weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    return weekdays[input_date.weekday()] == weekday", "solution_func": "def g(weekday: str):\n    for year in range(2000, 2100):\n        for month in range(1, 13):\n            for day in range(1, 32):\n                try:\n                    date = datetime.date(year, month, day)\n                    if weekdays[date.weekday()] == weekday:\n                        return (year, month, day)\n                except ValueError:\n                    continue", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, k: int, target=1) -> bool:\n    \"\"\"\n    Find a list of integers where the sum of its elements equals a given target,\n    and the number of elements divisible by k is equal to n.\n    \"\"\"\n    elements = list(range(1, n+1))\n    divisible_count = sum([1 for num in elements if num % k == 0])\n    return sum(elements) == target and divisible_count == n\ndef g(target=1, k=2):\n    elements = []\n    for n in range(1, 100):\n        elements.append(n)\n        if sum(elements) == target and sum([1 for num in elements if num % k == 0]) == k:\n            return elements\nassert f(g())\n", "emb": null, "idx_generation": 490, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k: int, target=1) -> bool:\n    \"\"\"\n    Find a list of integers where the sum of its elements equals a given target,\n    and the number of elements divisible by k is equal to n.\n    \"\"\"\n    elements = list(range(1, n+1))\n    divisible_count = sum([1 for num in elements if num % k == 0])\n    return sum(elements) == target and divisible_count == n", "solution_func": "def g(target=1, k=2):\n    elements = []\n    for n in range(1, 100):\n        elements.append(n)\n        if sum(elements) == target and sum([1 for num in elements if num % k == 0]) == k:\n            return elements", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n: int = 3, m: int = 6) -> bool:\n    \"\"\"Check if a string contains a substring with a specific length range.\"\"\"\n    return any((len(s[i:j]) >= n and len(s[i:j]) <= m for i in range(len(s)) for j in range(i+1, len(s)+1)))\ndef g(n = 3, m = 6):\n    return n, m\nassert f(g())\n", "emb": null, "idx_generation": 490, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int = 3, m: int = 6) -> bool:\n    \"\"\"Check if a string contains a substring with a specific length range.\"\"\"\n    return any((len(s[i:j]) >= n and len(s[i:j]) <= m for i in range(len(s)) for j in range(i+1, len(s)+1)))", "solution_func": "def g(n = 3, m = 6):\n    return n, m", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], k: int = 3, target: int = 10) -> bool:\n    \"\"\"Find the first k elements in the list that sum up to a target number.\"\"\"\n    return sum(arr[:k]) == target\ndef g(k = 3, target = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k, target\nassert f(g())\n", "emb": null, "idx_generation": 490, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], k: int = 3, target: int = 10) -> bool:\n    \"\"\"Find the first k elements in the list that sum up to a target number.\"\"\"\n    return sum(arr[:k]) == target", "solution_func": "def g(k = 3, target = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(arr: List[int], n: int, target: int = 10) -> bool:\n    \"\"\"Check if there exists a combination of n elements in the list that sums up to a target number.\"\"\"\n    return any((sum(c) == target for c in combinations(arr, n)))\ndef g(n = 3, target = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n, target\nassert f(g())\n", "emb": null, "idx_generation": 490, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(arr: List[int], n: int, target: int = 10) -> bool:\n    \"\"\"Check if there exists a combination of n elements in the list that sums up to a target number.\"\"\"\n    return any((sum(c) == target for c in combinations(arr, n)))", "solution_func": "def g(n = 3, target = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Determine if a target value exists in a 2D matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix: List[List[int]], target: int):\n    return f(matrix, target)\n\nassert f(g()) == True", "emb": null, "idx_generation": 490, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Determine if a target value exists in a 2D matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix: List[List[int]], target: int):\n    return f(matrix, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, s1='py', s2='thon', count1=5, count2=3) -> bool:\n    \"\"\"\n    Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\n    the same 3 characters\n    \"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:3] == s[-3:])\ndef g(s1 = 'py', s2 = 'thon', count1 = 5, count2 = 3):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 3 + ans + \"?\" * 3\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 491, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, s1='py', s2='thon', count1=5, count2=3) -> bool:\n    \"\"\"\n    Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\n    the same 3 characters\n    \"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:3] == s[-3:])", "solution_func": "def g(s1 = 'py', s2 = 'thon', count1 = 5, count2 = 3):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 3 + ans + \"?\" * 3", "map_ix": [0, 1, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=123456789, b=987654321) -> bool:\n    \"\"\"Check if n is a power of a\"\"\"\n    return n ** (1 / b) == a\ndef g(a = 123456789, b = 987654321):\n    return a ** b\nassert f(g())\n", "emb": null, "idx_generation": 491, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=123456789, b=987654321) -> bool:\n    \"\"\"Check if n is a power of a\"\"\"\n    return n ** (1 / b) == a", "solution_func": "def g(a = 123456789, b = 987654321):\n    return a ** b", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, s1='abc', s2='def', count1=2, count2=3) -> bool:\n    \"\"\"\n    Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\n    the same 2 characters\n    \"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:2] == s[-2:])\ndef g(s1 = 'abc', s2 = 'def', count1 = 2, count2 = 3):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 2 + ans + \"?\" * 2\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 491, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, s1='abc', s2='def', count1=2, count2=3) -> bool:\n    \"\"\"\n    Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\n    the same 2 characters\n    \"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:2] == s[-2:])", "solution_func": "def g(s1 = 'abc', s2 = 'def', count1 = 2, count2 = 3):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 2 + ans + \"?\" * 2", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"\n    Given a list of numbers, check if there exist two numbers such that their sum is equal to the given target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 8\n\n    Sample Output:\n    True\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = n - num\n        if complement in nums_set:\n            return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5]):\n    return sum(nums)\nassert f(g())\n", "emb": null, "idx_generation": 491, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"\n    Given a list of numbers, check if there exist two numbers such that their sum is equal to the given target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 8\n\n    Sample Output:\n    True\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = n - num\n        if complement in nums_set:\n            return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5]):\n    return sum(nums)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=1) -> bool:\n    \"\"\"\n    Given a string, determine if it is a palindrome after removing exactly n characters from it.\n\n    Sample Input:\n    s = \"racecar\"\n    n = 1\n\n    Sample Output:\n    True\n    \"\"\"\n    if s == s[::-1]:\n        return True\n    if n == 0:\n        return False\n    if len(s) == 1:\n        return True\n    if s[0] == s[-1]:\n        return f(s[1:-1], n)\n    else:\n        return f(s[:-1], n-1) or f(s[1:], n-1)\ndef g(s = \"racecar\", n = 1):\n    return s[:n] + s[n+1:]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 491, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=1) -> bool:\n    \"\"\"\n    Given a string, determine if it is a palindrome after removing exactly n characters from it.\n\n    Sample Input:\n    s = \"racecar\"\n    n = 1\n\n    Sample Output:\n    True\n    \"\"\"\n    if s == s[::-1]:\n        return True\n    if n == 0:\n        return False\n    if len(s) == 1:\n        return True\n    if s[0] == s[-1]:\n        return f(s[1:-1], n)\n    else:\n        return f(s[:-1], n-1) or f(s[1:], n-1)", "solution_func": "def g(s = \"racecar\", n = 1):\n    return s[:n] + s[n+1:]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of numbers, find all the pairs of numbers that sum up to the target value.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 5\n\n    Sample Output:\n    [(1, 4), (2, 3)]\n    \"\"\"\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                pairs.append((nums[i], nums[j]))\n    return pairs\ndef g(nums = [1, 2, 3, 4, 5], target = 10):\n    return nums\nassert f(g())", "emb": null, "idx_generation": 491, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of numbers, find all the pairs of numbers that sum up to the target value.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 5\n\n    Sample Output:\n    [(1, 4), (2, 3)]\n    \"\"\"\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                pairs.append((nums[i], nums[j]))\n    return pairs", "solution_func": "def g(nums = [1, 2, 3, 4, 5], target = 10):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(password: str, username='admin', password_list=['password', 'admin123', 'qwerty', '123456']) -> bool:\n    \"\"\"Check if the given password is in the list of common passwords\"\"\"\n    return password in password_list\ndef g(username='admin', password_list=['password', 'admin123', 'qwerty', '123456']):\n    password = input(\"Enter your password: \")\n    return password\nassert f(g())\n", "emb": null, "idx_generation": 491, "target_skills": null, "problem_func": "from typing import*\ndef f(password: str, username='admin', password_list=['password', 'admin123', 'qwerty', '123456']) -> bool:\n    \"\"\"Check if the given password is in the list of common passwords\"\"\"\n    return password in password_list", "solution_func": "def g(username='admin', password_list=['password', 'admin123', 'qwerty', '123456']):\n    password = input(\"Enter your password: \")\n    return password", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the sum of the digits of a number is divisible by m\"\"\"\n    digits = [int(d) for d in str(n)]\n    return sum(digits) % m == 0\ndef g(m=10):\n    n = int(input(\"Enter a number: \"))\n    return n\nassert f(g())\n", "emb": null, "idx_generation": 491, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the sum of the digits of a number is divisible by m\"\"\"\n    digits = [int(d) for d in str(n)]\n    return sum(digits) % m == 0", "solution_func": "def g(m=10):\n    n = int(input(\"Enter a number: \"))\n    return n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(radius: float, area=50) -> bool:\n    \"\"\"Check if the area of a circle with the given radius is equal to the provided area\"\"\"\n    circle_area = math.pi * radius ** 2\n    return math.isclose(circle_area, area, rel_tol=1e-9)\ndef g(area=50):\n    radius = float(input(\"Enter the radius of the circle: \"))\n    return radius\nassert f(g())\n", "emb": null, "idx_generation": 491, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(radius: float, area=50) -> bool:\n    \"\"\"Check if the area of a circle with the given radius is equal to the provided area\"\"\"\n    circle_area = math.pi * radius ** 2\n    return math.isclose(circle_area, area, rel_tol=1e-9)", "solution_func": "def g(area=50):\n    radius = float(input(\"Enter the radius of the circle: \"))\n    return radius", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, separator=',', length=5) -> bool:\n    \"\"\"Check if the string contains a sequence of length consecutive characters separated by the separator\"\"\"\n    return separator.join(string.split(separator)[:length]) in string\ndef g(separator=',', length=5):\n    return separator.join(['a'] * length)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 491, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, separator=',', length=5) -> bool:\n    \"\"\"Check if the string contains a sequence of length consecutive characters separated by the separator\"\"\"\n    return separator.join(string.split(separator)[:length]) in string", "solution_func": "def g(separator=',', length=5):\n    return separator.join(['a'] * length)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], m=3, n=3, target=15) -> bool:\n    \"\"\"Find a magic square in a matrix with an m x n grid, where each row, column, and diagonal adds up to the same target.\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag_sum1 = sum(matrix[i][i] for i in range(min(m, n)))\n    diag_sum2 = sum(matrix[i][n - i - 1] for i in range(min(m, n)))\n    return all(sum == target for sum in row_sums + col_sums + [diag_sum1, diag_sum2])\ndef g(m=3, n=3, target=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 492, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], m=3, n=3, target=15) -> bool:\n    \"\"\"Find a magic square in a matrix with an m x n grid, where each row, column, and diagonal adds up to the same target.\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag_sum1 = sum(matrix[i][i] for i in range(min(m, n)))\n    diag_sum2 = sum(matrix[i][n - i - 1] for i in range(min(m, n)))\n    return all(sum == target for sum in row_sums + col_sums + [diag_sum1, diag_sum2])", "solution_func": "def g(m=3, n=3, target=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(words: List[str], target=\"silent\") -> bool:\n    \"\"\"Check if the letters in the words can be rearranged to form the target word.\"\"\"\n    word_perms = list(permutations(target))\n    return any(\"\".join(perm) in words for perm in word_perms)\ndef g(target=\"silent\"):\n    return [\"listen\", \"enlist\", \"tinsel\"]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 492, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(words: List[str], target=\"silent\") -> bool:\n    \"\"\"Check if the letters in the words can be rearranged to form the target word.\"\"\"\n    word_perms = list(permutations(target))\n    return any(\"\".join(perm) in words for perm in word_perms)", "solution_func": "def g(target=\"silent\"):\n    return [\"listen\", \"enlist\", \"tinsel\"]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set and complement != num:\n            return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": null, "idx_generation": 492, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set and complement != num:\n            return True\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"\n    Find two distinct elements in the list 'arr' that add up to the 'target_sum'.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum=10):\n    return arr\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 492, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"\n    Find two distinct elements in the list 'arr' that add up to the 'target_sum'.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum=10):\n    return arr", "map_ix": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, m=100) -> bool:\n    \"\"\"\n    Check if the number 'n' is a multiple of 'm'.\n    \"\"\"\n    return n % m == 0\ndef g(n=100, m=100):\n    return n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 492, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m=100) -> bool:\n    \"\"\"\n    Check if the number 'n' is a multiple of 'm'.\n    \"\"\"\n    return n % m == 0", "solution_func": "def g(n=100, m=100):\n    return n", "map_ix": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"\n    Find three distinct elements in the list 'arr' that add up to the 'target_sum'.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target_sum:\n                    return True\n    return False\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum=100):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 492, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"\n    Find three distinct elements in the list 'arr' that add up to the 'target_sum'.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target_sum:\n                    return True\n    return False", "solution_func": "def g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum=100):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, days=7) -> bool:\n    \"\"\"Check if the given date is exactly 'days' days from today\"\"\"\n    current_date = datetime.date.today()\n    given_date = datetime.datetime.strptime(date, \"%Y-%m-%d\").date()\n    target_date = current_date + datetime.timedelta(days=days)\n    return given_date == target_date\n\ndef g(days=7):\n    current_date = datetime.date.today()\n    target_date = current_date + datetime.timedelta(days=days)\n    return target_date.strftime(\"%Y-%m-%d\")\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 492, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(date: str, days=7) -> bool:\n    \"\"\"Check if the given date is exactly 'days' days from today\"\"\"\n    current_date = datetime.date.today()\n    given_date = datetime.datetime.strptime(date, \"%Y-%m-%d\").date()\n    target_date = current_date + datetime.timedelta(days=days)\n    return given_date == target_date", "solution_func": "def g(days=7):\n    current_date = datetime.date.today()\n    target_date = current_date + datetime.timedelta(days=days)\n    return target_date.strftime(\"%Y-%m-%d\")", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if 'n' is a perfect square and its square root is divisible by 'k'\"\"\"\n    return math.isqrt(n)**2 == n and math.isqrt(n) % k == 0\n\ndef g(k=3):\n    n = k**2\n    return n\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 492, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if 'n' is a perfect square and its square root is divisible by 'k'\"\"\"\n    return math.isqrt(n)**2 == n and math.isqrt(n) % k == 0", "solution_func": "def g(k=3):\n    n = k**2\n    return n", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=range(1,10)):\n    nums = random.sample(nums, len(nums))\n    return nums\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 492, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums=range(1,10)):\n    nums = random.sample(nums, len(nums))\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, find three integers in the list that sum up to the target.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample output:\n    True\n\n    Explanation: The integers 2, 4, and 5 in the list sum up to the target 9.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums, target\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 492, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, find three integers in the list that sum up to the target.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample output:\n    True\n\n    Explanation: The integers 2, 4, and 5 in the list sum up to the target 9.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[173261568, 4270662976], upper_bound=17025943527197098) -> bool:\n    \"\"\"Check if the given number is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\ndef g(n):\n    return n\nassert f(g(17))\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 493, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[173261568, 4270662976], upper_bound=17025943527197098) -> bool:\n    \"\"\"Check if the given number is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g(n):\n    return n", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, word='silon') -> bool:\n    \"\"\"Check if the given word is a palindrome\"\"\"\n    return s == s[::-1]\ndef g(word='silon'):\n    return word\nassert f(g('racecar'))\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 493, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, word='silon') -> bool:\n    \"\"\"Check if the given word is a palindrome\"\"\"\n    return s == s[::-1]", "solution_func": "def g(word='silon'):\n    return word", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=-646156, b=-63) -> bool:\n    \"\"\"Check if a number is divisible by both a and b\"\"\"\n    return n % a == 0 and n % b == 0\ndef g(a=-646156, b=-63):\n    return a * b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 493, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=-646156, b=-63) -> bool:\n    \"\"\"Check if a number is divisible by both a and b\"\"\"\n    return n % a == 0 and n % b == 0", "solution_func": "def g(a=-646156, b=-63):\n    return a * b", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Check if the values of x, y, and z satisfy the Pythagorean theorem.\n    \"\"\"\n    return math.isclose(math.sqrt(x**2 + y**2), z)\n\ndef g(x: float, y: float):\n    \"\"\"\n    Given the values of x and y, calculate z such that it satisfies the Pythagorean theorem.\n    \"\"\"\n    return math.sqrt(x**2 + y**2)\n\nassert f(g(x=3, y=4), 3, 4)\n", "emb": null, "idx_generation": 493, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Check if the values of x, y, and z satisfy the Pythagorean theorem.\n    \"\"\"\n    return math.isclose(math.sqrt(x**2 + y**2), z)", "solution_func": "def g(x: float, y: float):\n    \"\"\"\n    Given the values of x and y, calculate z such that it satisfies the Pythagorean theorem.\n    \"\"\"\n    return math.sqrt(x**2 + y**2)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport re\n\ndef f(s: str, pattern: str) -> bool:\n    \"\"\"\n    Check if the string matches the given regular expression pattern.\n    \"\"\"\n    return bool(re.match(pattern, s))\n\ndef g(pattern: str) -> str:\n    \"\"\"\n    Generate a string that matches the given regular expression pattern.\n    \"\"\"\n    if pattern == r'\\d{3}-\\d{3}-\\d{4}':\n        return '123-456-7890'\n    elif pattern == r'[A-Za-z]+\\d{2}':\n        return 'hello42'\n    elif pattern == r'[A-Za-z]+\\s\\d+':\n        return 'world 123'\n    else:\n        return ''\n\nassert f(g(pattern=r'\\d{3}-\\d{3}-\\d{4}'), r'\\d{3}-\\d{3}-\\d{4}')\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 493, "target_skills": null, "problem_func": "from typing import*\nimport re\n\ndef f(s: str, pattern: str) -> bool:\n    \"\"\"\n    Check if the string matches the given regular expression pattern.\n    \"\"\"\n    return bool(re.match(pattern, s))", "solution_func": "def g(pattern: str) -> str:\n    \"\"\"\n    Generate a string that matches the given regular expression pattern.\n    \"\"\"\n    if pattern == r'\\d{3}-\\d{3}-\\d{4}':\n        return '123-456-7890'\n    elif pattern == r'[A-Za-z]+\\d{2}':\n        return 'hello42'\n    elif pattern == r'[A-Za-z]+\\s\\d+':\n        return 'world 123'\n    else:\n        return ''", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(nums: list, target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the list that sum up to the target.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums: list, target: int) -> list:\n    \"\"\"\n    Generate a list of random numbers and set the target.\n    \"\"\"\n    random.seed(42)\n    nums = random.sample(range(1, 100), 10)\n    target = random.randint(1, 100)\n    return nums, target\n\nassert f(*g())\n", "emb": null, "idx_generation": 493, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: list, target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the list that sum up to the target.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums: list, target: int) -> list:\n    \"\"\"\n    Generate a list of random numbers and set the target.\n    \"\"\"\n    random.seed(42)\n    nums = random.sample(range(1, 100), 10)\n    target = random.randint(1, 100)\n    return nums, target", "map_ix": null}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, x=3, y=5) -> bool:\n    \"\"\"Check if a number is a perfect square or a multiple of x and y.\"\"\"\n    return sqrt(n).is_integer() or (n % x == 0 and n % y == 0)\n\ndef g(x=3, y=5):\n    num = x * y\n    while num % x != 0 or num % y != 0:\n        num += 1\n    return num\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 493, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, x=3, y=5) -> bool:\n    \"\"\"Check if a number is a perfect square or a multiple of x and y.\"\"\"\n    return sqrt(n).is_integer() or (n % x == 0 and n % y == 0)", "solution_func": "def g(x=3, y=5):\n    num = x * y\n    while num % x != 0 or num % y != 0:\n        num += 1\n    return num", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: list, target_sum=20) -> bool:\n    \"\"\"Check if any two numbers in a list add up to a target sum.\"\"\"\n    for i, num1 in enumerate(lst):\n        for j, num2 in enumerate(lst[i+1:]):\n            if num1 + num2 == target_sum:\n                return True\n    return False\n\ndef g(lst=[5, 10, 15, 20, 25]):\n    return lst\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 493, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: list, target_sum=20) -> bool:\n    \"\"\"Check if any two numbers in a list add up to a target sum.\"\"\"\n    for i, num1 in enumerate(lst):\n        for j, num2 in enumerate(lst[i+1:]):\n            if num1 + num2 == target_sum:\n                return True\n    return False", "solution_func": "def g(lst=[5, 10, 15, 20, 25]):\n    return lst", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, char='e', count=3) -> bool:\n    \"\"\"Check if a character appears a certain number of times in a string.\"\"\"\n    return s.count(char) == count\n\ndef g(char='e', count=3):\n    return char * count + 'abcde' + char * count\n\nassert f(g())\n", "emb": null, "idx_generation": 493, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, char='e', count=3) -> bool:\n    \"\"\"Check if a character appears a certain number of times in a string.\"\"\"\n    return s.count(char) == count", "solution_func": "def g(char='e', count=3):\n    return char * count + 'abcde' + char * count", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"\n    Check if x is a square number from the given list of numbers.\n    \"\"\"\n    return x in [num ** 2 for num in nums]\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums[2] ** 2\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 493, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"\n    Check if x is a square number from the given list of numbers.\n    \"\"\"\n    return x in [num ** 2 for num in nums]", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums[2] ** 2", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substrings=['sraeb', 'sredoc', 'srehtom', 'sredaeh', 'srettel']) -> bool:\n    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"\n    return all((sub in s and sub[::-1] in s for sub in substrings))\ndef g(substrings = ['sraeb', 'sredoc', 'srehtom', 'sredaeh', 'srettel']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 494, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=['sraeb', 'sredoc', 'srehtom', 'sredaeh', 'srettel']) -> bool:\n    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"\n    return all((sub in s and sub[::-1] in s for sub in substrings))", "solution_func": "def g(substrings = ['sraeb', 'sredoc', 'srehtom', 'sredaeh', 'srettel']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substring='elbatsniam', count=5, length=1000) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'elbatsniam', count = 5, length = 1000):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 494, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring='elbatsniam', count=5, length=1000) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length", "solution_func": "def g(substring = 'elbatsniam', count = 5, length = 1000):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'", "map_ix": [0, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(t: str, s='yllaer') -> bool:\n    \"\"\"\n    Given an alphabetic string s, remove all vowels (aeiouy/AEIOUY), insert a \".\" before each remaining letter\n    (consonant), and make everything lowercase.\n\n    Sample Input:\n    s = \"Reverse\"\n\n    Sample Output:\n    .r.v.r.s\n    \"\"\"\n    i = 0\n    for c in s.lower():\n        if c in 'aeiouy':\n            continue\n        assert t[i] == '.', f'expecting `.` at position {i}'\n        i += 1\n        assert t[i] == c, f'expecting `{c}`'\n        i += 1\n    return i == len(t)\ndef g(s = 'yllaer'):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 494, "target_skills": null, "problem_func": "from typing import*\ndef f(t: str, s='yllaer') -> bool:\n    \"\"\"\n    Given an alphabetic string s, remove all vowels (aeiouy/AEIOUY), insert a \".\" before each remaining letter\n    (consonant), and make everything lowercase.\n\n    Sample Input:\n    s = \"Reverse\"\n\n    Sample Output:\n    .r.v.r.s\n    \"\"\"\n    i = 0\n    for c in s.lower():\n        if c in 'aeiouy':\n            continue\n        assert t[i] == '.', f'expecting `.` at position {i}'\n        i += 1\n        assert t[i] == c, f'expecting `{c}`'\n        i += 1\n    return i == len(t)", "solution_func": "def g(s = 'yllaer'):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two distinct numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 494, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two distinct numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 494, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(target=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], prefix='pyth', suffix='on') -> bool:\n    \"\"\"Check if any word in the list starts with the given prefix and ends with the given suffix.\"\"\"\n    for word in words:\n        if word.startswith(prefix) and word.endswith(suffix):\n            return True\n    return False\n\ndef g(prefix='pyth', suffix='on'):\n    words = ['python', 'jupyter', 'programming', 'pycharm']\n    return words\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 494, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], prefix='pyth', suffix='on') -> bool:\n    \"\"\"Check if any word in the list starts with the given prefix and ends with the given suffix.\"\"\"\n    for word in words:\n        if word.startswith(prefix) and word.endswith(suffix):\n            return True\n    return False", "solution_func": "def g(prefix='pyth', suffix='on'):\n    words = ['python', 'jupyter', 'programming', 'pycharm']\n    return words", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"Check if string s contains at least k vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n            if count >= k:\n                return True\n    return False\n\ndef g(k=2):\n    return 'aeiou' * k\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 494, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"Check if string s contains at least k vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n            if count >= k:\n                return True\n    return False", "solution_func": "def g(k=2):\n    return 'aeiou' * k", "map_ix": [0, 1, 0, 1, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, k=3) -> bool:\n    \"\"\"Check if there are k elements in the list that sum up to the target\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, k):\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g(target=100, k=3):\n    return [i for i in range(1, target + 1)]\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 494, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, k=3) -> bool:\n    \"\"\"Check if there are k elements in the list that sum up to the target\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, k):\n        if sum(combo) == target:\n            return True\n    return False", "solution_func": "def g(target=100, k=3):\n    return [i for i in range(1, target + 1)]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], target=100, k=2) -> bool:\n    \"\"\"Check if there are k elements in the matrix that sum up to the target\"\"\"\n    from itertools import combinations\n    for combo in combinations([item for sublist in matrix for item in sublist], k):\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g(target=100, k=2):\n    return [[i for i in range(1, target + 1)] for _ in range(target)]\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 494, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], target=100, k=2) -> bool:\n    \"\"\"Check if there are k elements in the matrix that sum up to the target\"\"\"\n    from itertools import combinations\n    for combo in combinations([item for sublist in matrix for item in sublist], k):\n        if sum(combo) == target:\n            return True\n    return False", "solution_func": "def g(target=100, k=2):\n    return [[i for i in range(1, target + 1)] for _ in range(target)]", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=55) -> bool:\n    \"\"\"\n    Given a list of integers arr, find two numbers such that they add up to a specific target number. \n    Return True if any two numbers in the list add up to the target, and False otherwise.\n\n    Sample Input:\n    arr = [10, 15, 3, 7]\n    target = 17\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr=[10, 15, 3, 7], target=17):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 494, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=55) -> bool:\n    \"\"\"\n    Given a list of integers arr, find two numbers such that they add up to a specific target number. \n    Return True if any two numbers in the list add up to the target, and False otherwise.\n\n    Sample Input:\n    arr = [10, 15, 3, 7]\n    target = 17\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr=[10, 15, 3, 7], target=17):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"\n    Given a list of 4 integers, determine if it is possible to obtain the target value of 24 using basic arithmetic operations (+, -, *, /).\n    Each integer can be used exactly once and parentheses can be used to change the order of operations.\n    \"\"\"\n    def helper(nums):\n        if len(nums) == 1:\n            return abs(nums[0] - target) < 1e-6\n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                if i != j:\n                    new_nums = [nums[k] for k in range(len(nums)) if k != i and k != j]\n                    if helper(new_nums + [nums[i] + nums[j]]):\n                        return True\n                    if helper(new_nums + [nums[i] - nums[j]]):\n                        return True\n                    if helper(new_nums + [nums[i] * nums[j]]):\n                        return True\n                    if nums[j] != 0 and helper(new_nums + [nums[i] / nums[j]]):\n                        return True\n        return False\n    return helper(nums)\ndef g(nums):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 495, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"\n    Given a list of 4 integers, determine if it is possible to obtain the target value of 24 using basic arithmetic operations (+, -, *, /).\n    Each integer can be used exactly once and parentheses can be used to change the order of operations.\n    \"\"\"\n    def helper(nums):\n        if len(nums) == 1:\n            return abs(nums[0] - target) < 1e-6\n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                if i != j:\n                    new_nums = [nums[k] for k in range(len(nums)) if k != i and k != j]\n                    if helper(new_nums + [nums[i] + nums[j]]):\n                        return True\n                    if helper(new_nums + [nums[i] - nums[j]]):\n                        return True\n                    if helper(new_nums + [nums[i] * nums[j]]):\n                        return True\n                    if nums[j] != 0 and helper(new_nums + [nums[i] / nums[j]]):\n                        return True\n        return False\n    return helper(nums)", "solution_func": "def g(nums):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]) -> bool:\n    \"\"\"\n    Determine if the given number n is present in the list lst.\n    \"\"\"\n    return n in lst\ndef g(lst):\n    return lst\nassert f(g())\n", "emb": null, "idx_generation": 495, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]) -> bool:\n    \"\"\"\n    Determine if the given number n is present in the list lst.\n    \"\"\"\n    return n in lst", "solution_func": "def g(lst):\n    return lst", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst=[random.randint(0, 100) for _ in range(100)]) -> bool:\n    \"\"\"\n    Determine if the given number n is present in the list lst.\n    \"\"\"\n    return n in lst\ndef g(lst):\n    return lst\nassert f(g())\n", "emb": null, "idx_generation": 495, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(n: int, lst=[random.randint(0, 100) for _ in range(100)]) -> bool:\n    \"\"\"\n    Determine if the given number n is present in the list lst.\n    \"\"\"\n    return n in lst", "solution_func": "def g(lst):\n    return lst", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in a list such that their sum is equal to a target number.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == 10:\n                return True\n    return False\nassert f(g())\n", "emb": null, "idx_generation": 495, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in a list such that their sum is equal to a target number.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == 10:\n                return True\n    return False", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, pattern='abcde', max_len=10) -> bool:\n    \"\"\"\n    Check if a given string matches a pattern by replacing each character in the pattern with a substring of the\n    same length in the given string.\n    \"\"\"\n    if len(s) <= max_len:\n        return s == pattern\n    pattern_len = len(pattern)\n    for i in range(len(s) - pattern_len + 1):\n        substring = s[i:i+pattern_len]\n        if all(p == s[i] for p in pattern):\n            return True\n    return False\ndef g(pattern='abcde', max_len=10):\n    if len(pattern) <= max_len:\n        return pattern\n    return pattern[0]*max_len\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 495, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, pattern='abcde', max_len=10) -> bool:\n    \"\"\"\n    Check if a given string matches a pattern by replacing each character in the pattern with a substring of the\n    same length in the given string.\n    \"\"\"\n    if len(s) <= max_len:\n        return s == pattern\n    pattern_len = len(pattern)\n    for i in range(len(s) - pattern_len + 1):\n        substring = s[i:i+pattern_len]\n        if all(p == s[i] for p in pattern):\n            return True\n    return False", "solution_func": "def g(pattern='abcde', max_len=10):\n    if len(pattern) <= max_len:\n        return pattern\n    return pattern[0]*max_len", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6], target=10) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in a list such that their sum is equal to a target number.\n    \"\"\"\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        dp[i][0] = True\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]\ndef g(nums=[1, 2, 3, 4, 5, 6], target=10):\n    n = len(nums)\n    def backtrack(i, curr_sum):\n        if curr_sum == target:\n            return True\n        if i == n or curr_sum > target:\n            return False\n        if backtrack(i + 1, curr_sum + nums[i]):\n            return True\n        return backtrack(i + 1, curr_sum)\n    return backtrack(0, 0)\nassert f(g())\n", "emb": null, "idx_generation": 495, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6], target=10) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in a list such that their sum is equal to a target number.\n    \"\"\"\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        dp[i][0] = True\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6], target=10):\n    n = len(nums)\n    def backtrack(i, curr_sum):\n        if curr_sum == target:\n            return True\n        if i == n or curr_sum > target:\n            return False\n        if backtrack(i + 1, curr_sum + nums[i]):\n            return True\n        return backtrack(i + 1, curr_sum)\n    return backtrack(0, 0)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three integers in the list whose sum is equal to the target\"\"\"\n    return any(sum(comb) == target for comb in combinations(nums, 3))\ndef g(target=100):\n    return [i for i in range(target + 1)]\nassert f(g())\n", "emb": null, "idx_generation": 495, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three integers in the list whose sum is equal to the target\"\"\"\n    return any(sum(comb) == target for comb in combinations(nums, 3))", "solution_func": "def g(target=100):\n    return [i for i in range(target + 1)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='python', length=6) -> bool:\n    \"\"\"Check if the target string appears as a substring of s with the given length\"\"\"\n    return any(s[i:i+length] == target for i in range(len(s)-length+1))\ndef g(target='python', length=6):\n    return target\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 495, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='python', length=6) -> bool:\n    \"\"\"Check if the target string appears as a substring of s with the given length\"\"\"\n    return any(s[i:i+length] == target for i in range(len(s)-length+1))", "solution_func": "def g(target='python', length=6):\n    return target", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two integers in the list whose sum is equal to the target\"\"\"\n    return any(a + b == target for a, b in combinations(nums, 2))\ndef g(target=0):\n    return [i for i in range(target + 1)]\nassert f(g())\n", "emb": null, "idx_generation": 495, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two integers in the list whose sum is equal to the target\"\"\"\n    return any(a + b == target for a, b in combinations(nums, 2))", "solution_func": "def g(target=0):\n    return [i for i in range(target + 1)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, a=\"python\", b=\"programming\") -> bool:\n    \"\"\"Check if the string contains both words 'python' and 'programming'.\"\"\"\n    return a in s and b in s\ndef g(a=\"python\", b=\"programming\"):\n    return a + \" \" + b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 495, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a=\"python\", b=\"programming\") -> bool:\n    \"\"\"Check if the string contains both words 'python' and 'programming'.\"\"\"\n    return a in s and b in s", "solution_func": "def g(a=\"python\", b=\"programming\"):\n    return a + \" \" + b", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10, length=3) -> bool:\n    \"\"\"Find a subarray of length 'length' in the given list 'nums' that sums up to 'target'.\"\"\"\n    for i in range(len(nums)-length+1):\n        if sum(nums[i:i+length]) == target:\n            return True\n    return False\ndef g(target = 10, length = 3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": null, "idx_generation": 496, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10, length=3) -> bool:\n    \"\"\"Find a subarray of length 'length' in the given list 'nums' that sums up to 'target'.\"\"\"\n    for i in range(len(nums)-length+1):\n        if sum(nums[i:i+length]) == target:\n            return True\n    return False", "solution_func": "def g(target = 10, length = 3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, target='hello', num_occurrences=2) -> bool:\n    \"\"\"Check if the given string contains 'num_occurrences' occurrences of the target string.\"\"\"\n    return string.count(target) == num_occurrences\ndef g(target = 'hello', num_occurrences = 2):\n    return target * num_occurrences\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 496, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, target='hello', num_occurrences=2) -> bool:\n    \"\"\"Check if the given string contains 'num_occurrences' occurrences of the target string.\"\"\"\n    return string.count(target) == num_occurrences", "solution_func": "def g(target = 'hello', num_occurrences = 2):\n    return target * num_occurrences", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='python', num_repeats=3) -> bool:\n    \"\"\"Check if the given string is equal to 'target' repeated 'num_repeats' times.\"\"\"\n    return s * num_repeats == target * num_repeats\ndef g(target = 'python', num_repeats = 3):\n    return target\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 496, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='python', num_repeats=3) -> bool:\n    \"\"\"Check if the given string is equal to 'target' repeated 'num_repeats' times.\"\"\"\n    return s * num_repeats == target * num_repeats", "solution_func": "def g(target = 'python', num_repeats = 3):\n    return target", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers in the list that sums up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target = 0):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 496, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers in the list that sums up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target = 0):\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that sums up to the target value.\"\"\"\n    for row in matrix:\n        for col in row:\n            if target - col in row:\n                return True\n    return False\ndef g(target = 10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 496, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that sums up to the target value.\"\"\"\n    for row in matrix:\n        for col in row:\n            if target - col in row:\n                return True\n    return False", "solution_func": "def g(target = 10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string.\"\"\"\n    return substr in s\ndef g(substr = 'abc'):\n    s = 'abcdefg'\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 496, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string.\"\"\"\n    return substr in s", "solution_func": "def g(substr = 'abc'):\n    s = 'abcdefg'\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\ndef f(n: int, num=10, power=2) -> bool:\n    \"\"\"Check if the logarithm of n to the base of num is equal to power.\"\"\"\n    return math.log(n, num) == power\ndef g(num=10, power=2):\n    return num ** power\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 496, "target_skills": null, "problem_func": "from typing import*\nimport math\ndef f(n: int, num=10, power=2) -> bool:\n    \"\"\"Check if the logarithm of n to the base of num is equal to power.\"\"\"\n    return math.log(n, num) == power", "solution_func": "def g(num=10, power=2):\n    return num ** power", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, substring='hello') -> bool:\n    \"\"\"Check if the given string ends with the given substring.\"\"\"\n    return string.endswith(substring)\ndef g(substring='hello'):\n    return substring + ' world'\nassert f(g())\n", "emb": null, "idx_generation": 496, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring='hello') -> bool:\n    \"\"\"Check if the given string ends with the given substring.\"\"\"\n    return string.endswith(substring)", "solution_func": "def g(substring='hello'):\n    return substring + ' world'", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": null, "idx_generation": 496, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, s='Puzzle', t='puzzle') -> bool:\n    \"\"\"Compare s and t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.\"\"\"\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'Puzzle', t = 'puzzle'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 496, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, s='Puzzle', t='puzzle') -> bool:\n    \"\"\"Compare s and t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.\"\"\"\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False", "solution_func": "def g(s = 'Puzzle', t = 'puzzle'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1", "map_ix": [0, 0, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], k=3, target=9) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a sublist of length k whose sum is equal to the target.\n    \"\"\"\n    for i in range(len(arr) - k + 1):\n        if sum(arr[i:i+k]) == target:\n            return True\n    return False\n\ndef g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return arr\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 497, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], k=3, target=9) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a sublist of length k whose sum is equal to the target.\n    \"\"\"\n    for i in range(len(arr) - k + 1):\n        if sum(arr[i:i+k]) == target:\n            return True\n    return False", "solution_func": "def g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return arr", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"\n    Given a string, check if the given substring appears in the string in a non-overlapping way.\n    \"\"\"\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count == 1\n\ndef g(substring = 'abc'):\n    s = 'abca'\n    return s\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 497, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"\n    Given a string, check if the given substring appears in the string in a non-overlapping way.\n    \"\"\"\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count == 1", "solution_func": "def g(substring = 'abc'):\n    s = 'abca'\n    return s", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is a symmetric matrix.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix\n\nassert f(g())\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 497, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is a symmetric matrix.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix", "map_ix": [1, 0, 1, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[2, 8, 5, 3, 10]):\n    return nums\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 497, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[2, 8, 5, 3, 10]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exists a row and column in the matrix whose sum is equal to the target\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return target in row_sums or target in col_sums\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 497, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exists a row and column in the matrix whose sum is equal to the target\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return target in row_sums or target in col_sums", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        curr_sum = nums[i]\n        j = i + 1\n        while curr_sum < target and j < len(nums):\n            curr_sum += nums[j]\n            j += 1\n        if curr_sum == target:\n            return True\n    return False\ndef g(nums=[4, 3, 2, 1, 5]):\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 497, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        curr_sum = nums[i]\n        j = i + 1\n        while curr_sum < target and j < len(nums):\n            curr_sum += nums[j]\n            j += 1\n        if curr_sum == target:\n            return True\n    return False", "solution_func": "def g(nums=[4, 3, 2, 1, 5]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return numbers\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 497, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False", "solution_func": "def g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return numbers", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sums=[6, 15, 24], col_sums=[5, 7, 9]) -> bool:\n    \"\"\"Check if the given matrix satisfies the given row and column sums.\"\"\"\n    for i in range(len(matrix)):\n        if sum(matrix[i]) != row_sums[i]:\n            return False\n    for j in range(len(matrix[0])):\n        if sum(row[j] for row in matrix) != col_sums[j]:\n            return False\n    return True\ndef g(row_sums=[6, 15, 24], col_sums=[5, 7, 9]):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 497, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row_sums=[6, 15, 24], col_sums=[5, 7, 9]) -> bool:\n    \"\"\"Check if the given matrix satisfies the given row and column sums.\"\"\"\n    for i in range(len(matrix)):\n        if sum(matrix[i]) != row_sums[i]:\n            return False\n    for j in range(len(matrix[0])):\n        if sum(row[j] for row in matrix) != col_sums[j]:\n            return False\n    return True", "solution_func": "def g(row_sums=[6, 15, 24], col_sums=[5, 7, 9]):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(radius: float, area=50.26548245743669) -> bool:\n    \"\"\"Check if the area of a circle with the given radius is equal to the target area.\"\"\"\n    return math.pi * radius**2 == area\ndef g(area=50.26548245743669):\n    return math.sqrt(area / math.pi)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 497, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(radius: float, area=50.26548245743669) -> bool:\n    \"\"\"Check if the area of a circle with the given radius is equal to the target area.\"\"\"\n    return math.pi * radius**2 == area", "solution_func": "def g(area=50.26548245743669):\n    return math.sqrt(area / math.pi)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=20, length=3) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find the length of a sublist such that:\n        * The sum of the sublist equals the target number\n        * The sublist has the given length\n    \"\"\"\n    assert len(nums) >= length\n    for i in range(len(nums) - length + 1):\n        if sum(nums[i:i+length]) == target:\n            return True\n    return False\ndef g(target = 20, length = 3):\n    return [10, 5, 2, 3, 4, 6]\nassert f(g())\n", "emb": null, "idx_generation": 497, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=20, length=3) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find the length of a sublist such that:\n        * The sum of the sublist equals the target number\n        * The sublist has the given length\n    \"\"\"\n    assert len(nums) >= length\n    for i in range(len(nums) - length + 1):\n        if sum(nums[i:i+length]) == target:\n            return True\n    return False", "solution_func": "def g(target = 20, length = 3):\n    return [10, 5, 2, 3, 4, 6]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[5, 10, 15], lower_bound=1) -> bool:\n    \"\"\"Check if all numbers in a list are divisible by a given number.\"\"\"\n    return all((i % n == 0 for i in nums)) and n >= lower_bound\ndef g(nums=[5, 10, 15], lower_bound=1):\n    ans = 1\n    for i in nums:\n        ans *= i\n    return ans\nassert f(g())\n", "emb": null, "idx_generation": 498, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[5, 10, 15], lower_bound=1) -> bool:\n    \"\"\"Check if all numbers in a list are divisible by a given number.\"\"\"\n    return all((i % n == 0 for i in nums)) and n >= lower_bound", "solution_func": "def g(nums=[5, 10, 15], lower_bound=1):\n    ans = 1\n    for i in nums:\n        ans *= i\n    return ans", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[3, 6, 9], upper_limit=100) -> bool:\n    \"\"\"Check if the sum of a list of numbers is equal to a given number.\"\"\"\n    return sum(nums) == n and n <= upper_limit\ndef g(nums=[3, 6, 9], upper_limit=100):\n    return sum(nums)\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 498, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[3, 6, 9], upper_limit=100) -> bool:\n    \"\"\"Check if the sum of a list of numbers is equal to a given number.\"\"\"\n    return sum(nums) == n and n <= upper_limit", "solution_func": "def g(nums=[3, 6, 9], upper_limit=100):\n    return sum(nums)", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(st: str, a='hello', b='hello world') -> bool:\n    \"\"\"Check if a string is a substring of another string.\"\"\"\n    return st in b and a in b\ndef g(a='hello', b='hello world'):\n    return b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 498, "target_skills": null, "problem_func": "from typing import*\ndef f(st: str, a='hello', b='hello world') -> bool:\n    \"\"\"Check if a string is a substring of another string.\"\"\"\n    return st in b and a in b", "solution_func": "def g(a='hello', b='hello world'):\n    return b", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, x=3, y=5) -> bool:\n    \"\"\"Check if n is divisible by both x and y\"\"\"\n    return n % x == 0 and n % y == 0\ndef g(x = 3, y = 5):\n    return x * y\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 498, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, x=3, y=5) -> bool:\n    \"\"\"Check if n is divisible by both x and y\"\"\"\n    return n % x == 0 and n % y == 0", "solution_func": "def g(x = 3, y = 5):\n    return x * y", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=22) -> bool:\n    \"\"\"Check if the target value is present in the matrix\"\"\"\n    return any(target in row for row in matrix)\ndef g(target = 22):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 498, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=22) -> bool:\n    \"\"\"Check if the target value is present in the matrix\"\"\"\n    return any(target in row for row in matrix)", "solution_func": "def g(target = 22):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if the substring is present in the string\"\"\"\n    return substring in string\ndef g(substring='abc'):\n    return \"def\" + substring + \"ghi\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 498, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if the substring is present in the string\"\"\"\n    return substring in string", "solution_func": "def g(substring='abc'):\n    return \"def\" + substring + \"ghi\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], t=0, a=0, e=0, s=1) -> bool:\n    \"\"\"Check if the sum of the sublist is equal to t\"\"\"\n    sublist = x[a:e:s]\n    return sum(sublist) == t\ndef g(t=0, a=0, e=0, s=1):\n    x = list(range(1, e+1))\n    return x\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 498, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], t=0, a=0, e=0, s=1) -> bool:\n    \"\"\"Check if the sum of the sublist is equal to t\"\"\"\n    sublist = x[a:e:s]\n    return sum(sublist) == t", "solution_func": "def g(t=0, a=0, e=0, s=1):\n    x = list(range(1, e+1))\n    return x", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=0) -> bool:\n    \"\"\"Check if the string is a palindrome\"\"\"\n    return s[:n] == s[:n][::-1]\ndef g(n=0):\n    s = \"racecar\"\n    return s[:n]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 498, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=0) -> bool:\n    \"\"\"Check if the string is a palindrome\"\"\"\n    return s[:n] == s[:n][::-1]", "solution_func": "def g(n=0):\n    s = \"racecar\"\n    return s[:n]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], t=0, a=0, e=0, s=1) -> bool:\n    \"\"\"Check if the sum of the sublist is equal to t\"\"\"\n    sublist = x[a:e:s]\n    return sum(sublist) == t\ndef g(t=0, a=0, e=0, s=1):\n    x = list(range(1, e+1))\n    return x\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 498, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], t=0, a=0, e=0, s=1) -> bool:\n    \"\"\"Check if the sum of the sublist is equal to t\"\"\"\n    sublist = x[a:e:s]\n    return sum(sublist) == t", "solution_func": "def g(t=0, a=0, e=0, s=1):\n    x = list(range(1, e+1))\n    return x", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 498, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of integers, find a combination of numbers that adds up to the target value.\n    Each number can be used multiple times.\n    \"\"\"\n    def helper(nums, curr_sum):\n        if curr_sum == target:\n            return True\n        if curr_sum > target:\n            return False\n        for i in range(len(nums)):\n            if helper(nums[i:], curr_sum + nums[i]):\n                return True\n        return False\n    \n    return helper(numbers, 0)\n\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return numbers\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 499, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of integers, find a combination of numbers that adds up to the target value.\n    Each number can be used multiple times.\n    \"\"\"\n    def helper(nums, curr_sum):\n        if curr_sum == target:\n            return True\n        if curr_sum > target:\n            return False\n        for i in range(len(nums)):\n            if helper(nums[i:], curr_sum + nums[i]):\n                return True\n        return False\n    \n    return helper(numbers, 0)", "solution_func": "def g(numbers=[1, 2, 3, 4, 5]):\n    return numbers", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], target_word=\"python\") -> bool:\n    \"\"\"\n    Given a list of words, check if the target word can be constructed by concatenating the words in the list.\n    Each word in the list can be used multiple times.\n    \"\"\"\n    def helper(word, word_list):\n        if word == \"\":\n            return True\n        for w in word_list:\n            if word.startswith(w):\n                if helper(word[len(w):], word_list):\n                    return True\n        return False\n    \n    return helper(target_word, words)\n\ndef g(words=[\"py\", \"th\", \"on\"]):\n    return words\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 499, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target_word=\"python\") -> bool:\n    \"\"\"\n    Given a list of words, check if the target word can be constructed by concatenating the words in the list.\n    Each word in the list can be used multiple times.\n    \"\"\"\n    def helper(word, word_list):\n        if word == \"\":\n            return True\n        for w in word_list:\n            if word.startswith(w):\n                if helper(word[len(w):], word_list):\n                    return True\n        return False\n    \n    return helper(target_word, words)", "solution_func": "def g(words=[\"py\", \"th\", \"on\"]):\n    return words", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if there is a path from the top-left cell to the bottom-right cell\n    that adds up to the target value.\n    You can only move down or right.\n    \"\"\"\n    def helper(row, col, curr_sum):\n        if row == len(matrix) - 1 and col == len(matrix[0]) - 1:\n            return curr_sum == target\n        if row < len(matrix) - 1 and helper(row + 1, col, curr_sum + matrix[row + 1][col]):\n            return True\n        if col < len(matrix[0]) - 1 and helper(row, col + 1, curr_sum + matrix[row][col + 1]):\n            return True\n        return False\n    \n    return helper(0, 0, matrix[0][0])\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 499, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if there is a path from the top-left cell to the bottom-right cell\n    that adds up to the target value.\n    You can only move down or right.\n    \"\"\"\n    def helper(row, col, curr_sum):\n        if row == len(matrix) - 1 and col == len(matrix[0]) - 1:\n            return curr_sum == target\n        if row < len(matrix) - 1 and helper(row + 1, col, curr_sum + matrix[row + 1][col]):\n            return True\n        if col < len(matrix[0]) - 1 and helper(row, col + 1, curr_sum + matrix[row][col + 1]):\n            return True\n        return False\n    \n    return helper(0, 0, matrix[0][0])", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, year=2022) -> bool:\n    \"\"\"Check if the given date is a leap year.\"\"\"\n    return date.year == year and datetime.date(year, 2, 29) == date\ndef g(year=2022):\n    return datetime.date(year, 2, 29)\nassert f(g())\n", "emb": null, "idx_generation": 499, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, year=2022) -> bool:\n    \"\"\"Check if the given date is a leap year.\"\"\"\n    return date.year == year and datetime.date(year, 2, 29) == date", "solution_func": "def g(year=2022):\n    return datetime.date(year, 2, 29)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is sorted in ascending order.\"\"\"\n    return nums == sorted(nums)\ndef g():\n    return random.sample(range(1, 10), 5)\nassert f(g())\n", "emb": null, "idx_generation": 499, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is sorted in ascending order.\"\"\"\n    return nums == sorted(nums)", "solution_func": "def g():\n    return random.sample(range(1, 10), 5)", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\nimport math\n\ndef f(x: float, y: float, r=1) -> bool:\n    \"\"\"Check if the given point (x, y) lies within the unit circle centered at the origin.\"\"\"\n    return math.sqrt(x ** 2 + y ** 2) <= r\ndef g():\n    return random.uniform(-1, 1), random.uniform(-1, 1)\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 499, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport math\n\ndef f(x: float, y: float, r=1) -> bool:\n    \"\"\"Check if the given point (x, y) lies within the unit circle centered at the origin.\"\"\"\n    return math.sqrt(x ** 2 + y ** 2) <= r", "solution_func": "def g():\n    return random.uniform(-1, 1), random.uniform(-1, 1)", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, m: int, result=0) -> bool:\n    \"\"\"\n    Check if the product of two numbers is equal to a given result\n    \"\"\"\n    return n * m == result\n\ndef g(result = 0):\n    n = math.isqrt(result)\n    return (n, result // n)\n\nassert f(g())\n", "emb": null, "idx_generation": 499, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, m: int, result=0) -> bool:\n    \"\"\"\n    Check if the product of two numbers is equal to a given result\n    \"\"\"\n    return n * m == result", "solution_func": "def g(result = 0):\n    n = math.isqrt(result)\n    return (n, result // n)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: int, y: int, z: int, result=0) -> bool:\n    \"\"\"\n    Check if the sum of three numbers is equal to a given result\n    \"\"\"\n    return x + y + z == result\n\ndef g(result = 0):\n    return (result // 3, result // 3, result // 3)\n\nassert f(g())\n", "emb": null, "idx_generation": 499, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, y: int, z: int, result=0) -> bool:\n    \"\"\"\n    Check if the sum of three numbers is equal to a given result\n    \"\"\"\n    return x + y + z == result", "solution_func": "def g(result = 0):\n    return (result // 3, result // 3, result // 3)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if the sum of three numbers is equal to a given result\n    \"\"\"\n    return x + y + z == 100\n\ndef g():\n    return random.choices(range(101), k=3)\n\nassert f(*g())\n", "emb": null, "idx_generation": 499, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Check if the sum of three numbers is equal to a given result\n    \"\"\"\n    return x + y + z == 100", "solution_func": "def g():\n    return random.choices(range(101), k=3)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[342, 567, 987], upper_bound=1000000) -> bool:\n    \"\"\"Find a number that is divisible by all the elements in the given list.\"\"\"\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums=[342, 567, 987], upper_bound=1000000):\n    ans = 1\n    for i in nums:\n        ans *= i\n    return ans\nassert f(g())\n", "emb": null, "idx_generation": 499, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[342, 567, 987], upper_bound=1000000) -> bool:\n    \"\"\"Find a number that is divisible by all the elements in the given list.\"\"\"\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound", "solution_func": "def g(nums=[342, 567, 987], upper_bound=1000000):\n    ans = 1\n    for i in nums:\n        ans *= i\n    return ans", "map_ix": null}]