[
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='Hello, World!') -> bool:\n    \"\"\"Check if the given string is equal to the target string\"\"\"\n    return s == target\n\ndef g(target='Hello, World!'):\n    return target\n\nassert f(g())\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_row=1, target_col=2, value=5) -> bool:\n    \"\"\"Find a path in the matrix that starts at (0, 0) and ends at (target_row, target_col) without passing through any cell with the value.\"\"\"\n    def dfs(row, col, visited):\n        if row == target_row and col == target_col:\n            return True\n        if row < 0 or row >= len(matrix) or col < 0 or col >= len(matrix[0]) or matrix[row][col] == value or visited[row][col]:\n            return False\n        visited[row][col] = True\n        if dfs(row+1, col, visited) or dfs(row-1, col, visited) or dfs(row, col+1, visited) or dfs(row, col-1, visited):\n            return True\n        visited[row][col] = False\n        return False\n    \n    visited = [[False for _ in range(len(matrix[0]))] for _ in range(len(matrix))]\n    return dfs(0, 0, visited)\ndef g(target_row=1, target_col=2, value=5):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if a list of words contains the target word\"\"\"\n    return target in words\ndef g(target='python'):\n    return ['java', 'c++', 'python', 'javascript']\nassert f(g())\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=999999) -> bool:\n    \"\"\"Find a number bigger than m whose binary representation has a string of k consecutive 1's\"\"\"\n    return n > m and '111' in bin(n)\n\ndef g(m=999999):\n    return m + 1\n\nassert f(g())\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n=3) -> bool:\n    \"\"\"Given a list of integers and a number n, determine if the sum of the first n elements of the list is equal to the given result\"\"\"\n    return sum(lst[:n]) == result\n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n=3):\n    return sum(lst[:n])\n\nassert f(g(), lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n=3)\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(n: int, nums=[12, 24, 36, 48]) -> bool:\n    \"\"\"Check if the greatest common divisor of all numbers in the list is equal to n.\"\"\"\n    return all((gcd(i, n) == n for i in nums))\n    \ndef g(nums=[12, 24, 36, 48]):\n    return gcd(*nums)\n\nassert f(g())\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=np.array([[1,2,3],[4,5,6],[7,8,9]])) -> bool:\n    \"\"\"Check if a given matrix is a magic square by ensuring that the sums of every row, column, and diagonal are equal to each other.\"\"\"\n    n = matrix.shape[0]\n    magic_sum = n * (n**2 + 1) // 2\n    \n    row_sums = np.sum(matrix, axis=1)\n    col_sums = np.sum(matrix, axis=0)\n    diag_sum = np.trace(matrix)\n    anti_diag_sum = np.trace(np.fliplr(matrix))\n    \n    return all((row_sum == magic_sum for row_sum in row_sums)) and \\\n           all((col_sum == magic_sum for col_sum in col_sums)) and \\\n           diag_sum == magic_sum and \\\n           anti_diag_sum == magic_sum\n\ndef g(target=np.array([[1,2,3],[4,5,6],[7,8,9]])):\n    n = target.shape[0]\n    magic_sum = n * (n**2 + 1) // 2\n    \n    # Generate a magic square\n    magic_square = np.zeros((n, n), dtype=int)\n    i = n // 2\n    j = n - 1\n    \n    num = 1\n    while num <= n**2:\n        if i == -1 and j == n:\n            i = 0\n            j = n - 2\n        else:\n            if i == -1:\n                i = n - 1\n            if j == n:\n                j = 0\n        \n        if magic_square[i][j]:\n            i += 1\n            j -= 2\n            continue\n        \n        magic_square[i][j] = num\n        num += 1\n        i -= 1\n        j += 1\n    \n    return magic_square\n\nassert f(g())\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, target=153) -> bool:\n    \"\"\"Find a number that is equal to the sum of the cubes of its digits.\n    The goal is to find a number that satisfies f(num) == True, where num is an integer and target is the desired sum.\"\"\"\n    return sum(int(digit) ** 3 for digit in str(num)) == target\ndef g(target=153):\n    num = 100\n    while not f(num, target):\n        num += 1\n    return num\nassert f(g())\n",
        "idx_generation": 127,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, m=17, n=4) -> bool:\n    \"\"\"Find the result of applying the following operation to integer m, n times: multiply m by 2 if it is odd,\notherwise divide m by 2.\"\"\"\n    for i in range(n):\n        m = m * 2 if m % 2 else m // 2\n    return result == m\ndef g(m=17, n=4):\n    for i in range(n):\n        m = m * 2 if m % 2 else m // 2\n    return m\nassert f(g())\n",
        "idx_generation": 81,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, factors=[2, 3]) -> bool:\n    \"\"\"Given an integer n and a list of factors, determine if n can be expressed as a product of two or more\nnumbers in the factors list.\"\"\"\n    def dfs(n, factors, product, level):\n        if level >= 2 and n == product:\n            return True\n        if product > n:\n            return False\n        for factor in factors:\n            if dfs(n, factors, product * factor, level + 1):\n                return True\n        return False\n    \n    return dfs(n, factors, 1, 0)\n\ndef g(factors=[2, 3]):\n    return factors\n\nassert f(6, g())\n",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=-12345678, b=-87654321, c=-98765432, d=123456789) -> bool:\n    \"\"\"Find the intersection of two lines.\nSolution should be a list of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-4)\ndef g(a=-12345678, b=-87654321, c=-98765432, d=123456789):\n    return [d - b, a - c]\nassert f(g())\n",
        "idx_generation": 108,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target=[-1000000, -1000000, -1000000], n=3) -> bool:\n    \"\"\"Find a list that when multiplied n times gives the target list\"\"\"\n    return li * n == target\n\ndef g(target=[-1000000, -1000000, -1000000], n=3):\n    if n == 0:\n        return []\n    return target[:len(target) // n]\n\nassert f(g())\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if a string contains exactly n vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count == n\ndef g(n=4):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(vowels[:n])\nassert f(g())\n",
        "idx_generation": 369,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: list) -> bool:\n    \"\"\"Check if the given list is sorted in non-decreasing order.\"\"\"\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))\n\ndef g():\n    arr = [random.randint(0, 100) for _ in range(10)]\n    arr.sort()\n    return arr\n\nassert f(g())\n",
        "idx_generation": 107,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=0) -> bool:\n    \"\"\"Check if the sum of the elements in the array is equal to the target value\"\"\"\n    return np.sum(arr) == target\n\ndef g(target=0):\n    return np.zeros(10) + target\n\nassert f(g())\n",
        "idx_generation": 37,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=1, b=10, c=100) -> bool:\n    \"\"\"Check if a number is divisible by a, b, and c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=1, b=10, c=100):\n    return a * b * c\nassert f(g())\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the list\"\"\"\n    return any(nums[i:i+k] == list(range(nums[i], nums[i]+k)) for i in range(len(nums)-k+1))\ndef g(k=3):\n    nums = [1, 2, 3, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n",
        "idx_generation": 79,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(num: int, target=5) -> bool:\n    \"\"\"Check if the given number is within a certain range\"\"\"\n    return target - 2 <= num <= target + 2\n\ndef g(target=5):\n    return random.randint(target-2, target+2)\n\nassert f(g())\n",
        "idx_generation": 154,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]], n=4) -> bool:\n    \"\"\"Check if a grid contains a certain number of rows and each row contains a certain number of elements\"\"\"\n    return len(grid) == n and all(len(row) == n for row in grid)\ndef g(n=4):\n    return [[1] * n] * n\nassert f(g())\n",
        "idx_generation": 83,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, arr=[1, 2, 4, 8, 16], n=5) -> bool:\n    \"\"\"Check if x is a power of 2 and present in arr\"\"\"\n    return x in arr and x & (x-1) == 0\ndef g(arr=[1, 2, 4, 8, 16], n=5):\n    return arr[2]\nassert f(g())\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n=100) -> bool:\n    \"\"\"Find whether all numbers in the list are divisible by n.\"\"\"\n    return all((x % n == 0 for x in lst))\ndef g(n=100):\n    return [x * n for x in range(10)]\nassert f(g())\n",
        "idx_generation": 42,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find three numbers in a list that add up to the target value.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n    return (nums, target)\nassert f(*g())\n",
        "idx_generation": 166,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, nums=[5, 8, 3, 10, 2, 6, 1], target=25) -> bool:\n    \"\"\"Check if the product of two numbers in a list equals a target value\"\"\"\n    return result == any((nums[i] * nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums=[5, 8, 3, 10, 2, 6, 1], target=25):\n    return any((nums[i] * nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\nassert f(g())\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a given number exists in a sorted array of integers.\nSample Input:\n`5`\nSample Output:\n`True`\"\"\"\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == n:\n            return True\n        elif arr[mid] < n:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr[0]\n\nassert f(g())\n",
        "idx_generation": 290,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(points: List[Tuple[int, int]], distance=5) -> bool:\n    \"\"\"Find if there exists a pair of points in the list where the distance between them is less than or equal to the given distance\"\"\"\n    from itertools import combinations\n    for pair in combinations(points, 2):\n        if ((pair[0][0] - pair[1][0]) ** 2 + (pair[0][1] - pair[1][1]) ** 2) <= distance ** 2:\n            return True\n    return False\ndef g(distance=5):\n    return [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)]\nassert f(g())\n",
        "idx_generation": 375,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    return any((target - x) in nums for x in nums)\n    \ndef g(target=15):\n    return [1, 5, 10, 12, 3, 7]\n    \nassert f(g())\n",
        "idx_generation": 428,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(perm: tuple, n=4) -> bool:\n    \"\"\"Given a permutation of numbers from 1 to n, check if the difference between any two adjacent numbers is greater than 1\"\"\"\n    return all((abs(perm[i] - perm[i+1]) > 1 for i in range(n-1)))\n\ndef g(n=4):\n    perms = list(permutations(range(1, n+1)))\n    for perm in perms:\n        if f(perm):\n            return perm\n    assert False\n\nassert f(g())\n",
        "idx_generation": 217,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"Given a matrix of integers, find if the target value exists in the matrix\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    row = 0\n    col = cols - 1\n    while row < rows and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] > target:\n            col -= 1\n        else:\n            row += 1\n    return False\ndef g(target=8):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 449,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: int, y: int, z: int, limit=100) -> bool:\n    \"\"\"Find three integers that are divisible by x, y, and z respectively, and their sum is less than or equal to the limit.\"\"\"\n    return (x % x == 0) and (y % y == 0) and (z % z == 0) and (x + y + z <= limit)\n\ndef g(limit=100):\n    x = random.randint(1, limit)\n    y = random.randint(1, limit)\n    z = random.randint(1, limit)\n    while (x % x != 0) or (y % y != 0) or (z % z != 0) or (x + y + z > limit):\n        x = random.randint(1, limit)\n        y = random.randint(1, limit)\n        z = random.randint(1, limit)\n    return x, y, z\n\nassert f(*g())\n",
        "idx_generation": 16,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, c=3) -> bool:\n    \"\"\"Check if the sum of each column in a 2D array is divisible by a given number c.\nSample Input:\narr = np.array([[1, 2, 3],\n                [4, 5, 6],\n                [7, 8, 9]])\nc = 3\nSample Output:\nTrue\"\"\"\n    column_sums = np.sum(arr, axis=0)\n    return all(column_sums % c == 0)\ndef g(c=3):\n    return np.array([[i*j for j in range(1, 4)] for i in range(1, 4)])\nassert f(g())\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, num1=6, num2=9) -> bool:\n    \"\"\"Check if a number is divisible by both num1 and num2.\"\"\"\n    return n % num1 == 0 and n % num2 == 0\n\ndef g(num1=6, num2=9):\n    return num1 * num2\nassert f(g())\n",
        "idx_generation": 40,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there exists a pair of numbers in a list that sums up to a target\"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set:\n            return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\nassert f(*g())\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a='hello', b=5) -> bool:\n    \"\"\"Check if a string contains a certain character a certain number of times\"\"\"\n    return x.count(a) == b\ndef g(a='hello', b=5):\n    return a * b\nassert f(g())\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find three numbers in a list that add up to the target value.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums))))\ndef g(target=20):\n    nums = [2, 8, 4, 6, 12]\n    return nums\nassert f(g())\n",
        "idx_generation": 45,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[12, 15, 18], upper_bound=1000) -> bool:\n    \"\"\"Find a number that is divisible by all the numbers in the list.\"\"\"\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums=[12, 15, 18], upper_bound=1000):\n    ans = max(nums)\n    while True:\n        if all((ans % i == 0 for i in nums)):\n            return ans\n        ans += 1\nassert f(g())\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list that add up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g())\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if n is divisible by any of the numbers in the list.\"\"\"\n    return any((n % num == 0 for num in nums))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums[-1] + 1\nassert f(g())\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"Check if the given number is divisible by all the factors\"\"\"\n    for factor in factors:\n        if n % factor != 0:\n            return False\n    return True\n\ndef g(factors=[2, 3, 5]):\n    n = 1\n    for factor in factors:\n        n *= factor\n    return n\n\nassert f(g())\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=3, target=20) -> bool:\n    \"\"\"Find a number that is a multiple of a given number and is greater than a target number\"\"\"\n    return n % m == 0 and n > target\ndef g(m=3, target=20):\n    return m * (target // m + 1)\nassert f(g())\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, numbers=[2, 3, 5, 7, 11, 13, 17]) -> bool:\n    \"\"\"Check if n is divisible by all the numbers in the list\"\"\"\n    for num in numbers:\n        if n % num != 0:\n            return False\n    return True\n\ndef g(numbers=[2, 3, 5, 7, 11, 13, 17]):\n    n = 1\n    for num in numbers:\n        n *= num\n    return n\n\nassert f(g())\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, num1=3, num2=5) -> bool:\n    \"\"\"Check if n is divisible by either num1 or num2\"\"\"\n    return n % num1 == 0 or n % num2 == 0\n\ndef g(num1=3, num2=5):\n    n = 1\n    while True:\n        if n % num1 == 0 or n % num2 == 0:\n            return n\n        n += 1\nassert f(g())\n",
        "idx_generation": 45,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Given an array of integers and a target number, find if there exists a subarray with a sum equal to the target.\nSample Input:\n`[1, 2, 3, 4, 5]`\nSample Output:\n`True`\"\"\"\n    prefixSum = 0\n    prefixSums = set()\n    for num in arr:\n        prefixSum += num\n        if prefixSum == target or prefixSum - target in prefixSums:\n            return True\n        prefixSums.add(prefixSum)\n    return False\ndef g(target=0):\n    return [1, 2, 3, 4, target]\nassert f(g())\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]], target_distance=10) -> bool:\n    \"\"\"Given a list of 2D points, find two points that have a Euclidean distance of target_distance.\n    The goal is to determine if there exists a pair of points that satisfies the condition.\"\"\"\n    n = len(points)\n    for i in range(n):\n        for j in range(i + 1, n):\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n            if abs(distance - target_distance) < 1e-06:\n                return True\n    return False\ndef g(target_distance=10):\n    return [(0, 0), (3, 4), (5, 12), (8, 15), (9, 12), (10, 6)]\nassert f(g())\n",
        "idx_generation": 190,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int, factor=2) -> bool:\n    \"\"\"Check if a number is a power of a given factor\"\"\"\n    return math.log(num, factor).is_integer()\n\ndef g(factor=2):\n    return factor ** 3\n\nassert f(g())\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if the target number is the sum of any two numbers in the matrix.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[k])):\n                    if i == k and j == l:\n                        continue\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return True\n    return False\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 384,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"You are given a list of integers and a target sum. Find any two numbers in the list that add up to the target sum.\nSample Input:\n`[2, 4, 6, 8]`, `10`\nSample Output:\n`(2, 8)`\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=7):\n    return [1, 2, 3, 4, 5, 6, 8, 9]\nassert f(g())\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_length=5) -> bool:\n    \"\"\"Check if a string has a length equal to the target_length.\"\"\"\n    return len(s) == target_length\ndef g(target_length=5):\n    return \"hello\"[:target_length]\nassert f(g())\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Given a 3x3 matrix of integers, find a row, column, or diagonal whose sum is equal to the target\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    for col in zip(*matrix):\n        if sum(col) == target:\n            return True\n    diagonal1 = [matrix[i][i] for i in range(3)]\n    if sum(diagonal1) == target:\n        return True\n    diagonal2 = [matrix[i][2-i] for i in range(3)]\n    if sum(diagonal2) == target:\n        return True\n    return False\ndef g(target=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target-15]]\nassert f(g())\n",
        "idx_generation": 40,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Check if there exists a row in the matrix whose sum is equal to the target sum.\"\"\"\n    return any((sum(row) == target_sum for row in matrix))\ndef g(target_sum=100):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target_sum - 15]]\nassert f(g())\n",
        "idx_generation": 6,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=6, s=21) -> bool:\n    \"\"\"Find a subset of a list that sums up to a target value\"\"\"\n    subsets = [[x[j] for j in range(n) if (i & (1 << j))] for i in range(1, 2**n)]\n    return any([sum(subset) == s for subset in subsets])\ndef g(n=6, s=21):\n    return [1, 2, 3, 4, 5, s - 15]\nassert f(g())\n",
        "idx_generation": 162,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a number that is a multiple of n and a power of 2.\"\"\"\n    return n % 2 == 0 and n != 0 and (n & (n - 1)) == 0\ndef g():\n    return 16\nassert f(g())\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(result: int, lst=[1,2,3,4,5,6,7,8,9,10]) -> bool:\n    \"\"\"Find a random element from the given list\"\"\"\n    return result in lst\n\ndef g(lst=[1,2,3,4,5,6,7,8,9,10]):\n    return random.choice(lst)\n\nassert f(g())\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=8, index=3) -> bool:\n    \"\"\"Find a number in a list whose index is equal to the target\"\"\"\n    return nums[index] == target\ndef g(target=8, index=3):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums[:index] + [target] + nums[index+1:]\nassert f(g())\n",
        "idx_generation": 354,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Find a matrix where each element is the sum of its row and column index\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != i + j:\n                return False\n    return True\n\ndef g():\n    return [[i + j for j in range(5)] for i in range(5)]\n\nassert f(g())\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, a=5, b=20) -> bool:\n    \"\"\"Find n such that n is a random number between a and b (inclusive)\"\"\"\n    return n >= a and n <= b\n\ndef g(a=5, b=20):\n    return random.randint(a, b)\n\nassert f(g())\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if x is in the list lst\"\"\"\n    return x in lst\n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return random.choice(lst)\n\nassert f(g())\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]], origin=(0, 0)) -> bool:\n    \"\"\"Check if all points lie on a given line passing through the origin\"\"\"\n    x1, y1 = origin\n    for x2, y2 in points:\n        if x1 * y2 != x2 * y1:\n            return False\n    return True\ndef g(origin=(0, 0)):\n    points = [(0, 0), (1, 2), (2, 4), (3, 6)] # Points on the line y = 2x passing through the origin\n    return points\nassert f(g())\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=5) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by n\"\"\"\n    return all(num % n == 0 for num in x)\ndef g(n=5):\n    return [n] * 10\nassert f(g())\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: float, a=5, b=3) -> bool:\n    \"\"\"Check if the given number is the result of raising a to the power of b.\"\"\"\n    return math.isclose(a ** b, n)\ndef g(a=5, b=3):\n    return a ** b\nassert f(g())\n",
        "idx_generation": 19,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Find a subset of the given array that adds up to the target value.\"\"\"\n    n = len(arr)\n    dp = [[False] * (target + 1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = True\n    for i in range(1, n+1):\n        for j in range(1, target+1):\n            if j < arr[i-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]]\n    return dp[n][target]\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target=\"python\") -> bool:\n    \"\"\"Check if a target word is present in a list of words\"\"\"\n    return target in words\ndef g(target=\"python\"):\n    return [target]\nassert f(g())\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if all words in the list start with the given prefix\"\"\"\n    return all(word.startswith(prefix) for word in words)\ndef g(prefix='pre'):\n    return ['prefix', 'preference', 'prepare']\nassert f(g())\n",
        "idx_generation": 32,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(x: int, y: int, z: int, d=gcd(10, 5)) -> bool:\n    \"\"\"Check if given three numbers have a common divisor that is equal to d.\"\"\"\n    return all((num % d == 0 for num in [x, y, z]))\n\ndef g(d=gcd(10, 5)):\n    return d\n\nassert f(10, 20, 30, g())\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(year: int, is_leap_year=False) -> bool:\n    \"\"\"Check if a given year is a leap year.\"\"\"\n    return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0) == is_leap_year\ndef g(is_leap_year=False):\n    year = 2000\n    while True:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0) == is_leap_year:\n            return year\n        year += 1\nassert f(g())\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a subset of the list that sums up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if len(nums) == 0:\n            return False\n        if nums[0] > target:\n            return subset_sum(nums[1:], target)\n        return subset_sum(nums[1:], target) or subset_sum(nums[1:], target - nums[0])\n    return subset_sum(nums, target)\ndef g(target=5):\n    return [1, 2, 3, 4, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, r: float, center=(0, 0)) -> bool:\n    \"\"\"Check if the point (x, y) lies inside the circle with radius r and center at the given center point\"\"\"\n    distance = math.sqrt((x - center[0])**2 + (y - center[1])**2)\n    return distance < r\n\ndef g(center=(0, 0)):\n    return 1.5, 2.5, 3.0\n\nassert f(*g())\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_length=5) -> bool:\n    \"\"\"Find if the string s has target_length number of vowels\"\"\"\n    vowels = set('aeiou')\n    return sum(1 for char in s if char.lower() in vowels) == target_length\ndef g(target_length=5):\n    return 'aeiou' + 'x'*(target_length-5)\nassert f(g())\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Find a string that has the same hash value as s and is n characters long\"\"\"\n    return hash(s) == hash('a' * n)\ndef g(n=10):\n    return 'a' * n\nassert f(g())\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=50, s=2500) -> bool:\n    \"\"\"Construct a list of n distinct integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n=50, s=2500):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n    x = x + [s - sum(x)]\n    return x\nassert f(g())\n",
        "idx_generation": 187,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Check if a string contains at least n vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count >= n\ndef g(n=10):\n    return \"aeiou\" * n\nassert f(g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: list) -> bool:\n    \"\"\"Check if lst is sorted in non-decreasing order.\"\"\"\n    return lst == sorted(lst)\n\ndef g(lst: list = [random.randint(1, 100) for _ in range(10)]):\n    \"\"\"Return a list that is sorted in non-decreasing order.\"\"\"\n    return sorted(lst)\n\nassert f(g())\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[23, 56, 78, 12], upper_bound=1000) -> bool:\n    \"\"\"Check if the sum of n and any two numbers from the list nums is equal to the upper_bound.\"\"\"\n    return any((n + i + j == upper_bound for i in nums for j in nums))\ndef g(nums=[23, 56, 78, 12], upper_bound=1000):\n    return upper_bound - max(nums) - max(nums)\nassert f(g())\n",
        "idx_generation": 120,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers in the given list such that their sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [target, -target]\n\nassert f(g())\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=10) -> bool:\n    \"\"\"Check if target is present in the array\"\"\"\n    return target in arr\n\ndef g(target=10):\n    return np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\nassert f(g())\n",
        "idx_generation": 15,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[-3, -6, -9, -12, -15, -18, -21, -24, -27, -30, -33, -36, -39, -42, -45, -48, -51, -54, -57, -60], target=-39) -> bool:\n    \"\"\"Determine if a target number is in a list and if it is at an even index.\"\"\"\n    return target in nums and nums.index(target) % 2 == 0\n\ndef g(nums=[-3, -6, -9, -12, -15, -18, -21, -24, -27, -30, -33, -36, -39, -42, -45, -48, -51, -54, -57, -60], target=-39):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if x^y is divisible by z\"\"\"\n    return (x ** y) % z == 0\n\ndef g(y: int, z: int):\n    return y + z\n\nassert f(g(y=2, z=4), y=2, z=4)\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find if a target number exists in a matrix.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    row = 0\n    col = n - 1\n    while row < m and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] > target:\n            col -= 1\n        else:\n            row += 1\n    return False\ndef g(target=10):\n    matrix = [\n        [1, 4, 7, 11, 15],\n        [2, 5, 8, 12, 19],\n        [3, 6, 9, 16, 22],\n        [10, 13, 14, 17, 24],\n        [18, 21, 23, 26, 30]\n    ]\n    return matrix\nassert f(g())\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) -> bool:\n    \"\"\"Given a number num, determine if it is a prime number.\"\"\"\n    if num < 2:\n        return False\n    for prime in primes:\n        if num % prime == 0:\n            return False\n    return True\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]):\n    num = max(primes)\n    for i in range(num + 1, num * num):\n        is_prime = True\n        for prime in primes:\n            if i % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n            if f(i):\n                return i\n    return None\nassert f(g())\n",
        "idx_generation": 67,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], rows=3, cols=3) -> bool:\n    \"\"\"Check if a given matrix is symmetric\"\"\"\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(rows=3, cols=3):\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 19,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square\"\"\"\n    n = len(matrix)\n    magic_sum = (n * (n ** 2 + 1)) // 2\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum_1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum_2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sum == magic_sum for row_sum in row_sums)) and all((col_sum == magic_sum for col_sum in col_sums)) and diagonal_sum_1 == magic_sum and diagonal_sum_2 == magic_sum\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nassert f(g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of integers contains any duplicate numbers.\"\"\"\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return True\n        num_set.add(num)\n    return False\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\nassert f(g())\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Given a list of integers, find if there exists two numbers such that their sum is equal to a target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=7):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, nums=[4, 8, 15, 16, 23, 42]) -> bool:\n    \"\"\"Check if the given number is a product of two distinct numbers in the list\"\"\"\n    return any(num == nums[i] * nums[j] for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums=[4, 8, 15, 16, 23, 42]):\n    return nums[0] * nums[1]\nassert f(g())\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[10, 15, 20]) -> bool:\n    \"\"\"Check if a number is divisible by all the numbers in a list.\"\"\"\n    return all((n % i == 0 for i in nums))\ndef g(nums=[10, 15, 20]):\n    max_num = max(nums)\n    while True:\n        if f(max_num, nums):\n            return max_num\n        max_num += 1\nassert f(g())\n",
        "idx_generation": 101,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, num1=14, num2=36) -> bool:\n    \"\"\"Check if the given number is a multiple of either num1 or num2.\"\"\"\n    return n % num1 == 0 or n % num2 == 0\ndef g(num1=14, num2=36):\n    ans = 1\n    while True:\n        if ans % num1 == 0 or ans % num2 == 0:\n            return ans\n        ans += 1\nassert f(g())\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the matrix is a magic square of order n\"\"\"\n    target_sum = n * (n**2 + 1) // 2\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag_sum = sum(matrix[i][i] for i in range(n))\n    anti_diag_sum = sum(matrix[i][n - i - 1] for i in range(n))\n    return all(s == target_sum for s in row_sums + col_sums + [diag_sum, anti_diag_sum])\ndef g(n=3):\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nassert f(g())\n",
        "idx_generation": 114,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: datetime) -> bool:\n    \"\"\"Check if the given date is a weekday.\"\"\"\n    return date.weekday() < 5\n\ndef g():\n    \"\"\"Return the current date and time.\"\"\"\n    return datetime.now()\n\nassert f(g())\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"Find a number that is equal to the sum of the cubes of its digits\"\"\"\n    return num == sum(int(digit)**3 for digit in str(num))\ndef g():\n    return 153\nassert f(g())\n",
        "idx_generation": 68,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=3.14159, b=5) -> bool:\n    \"\"\"Find the absolute value of x and check if it is greater than the square root of a.\"\"\"\n    return abs(x) > math.sqrt(a) and x < b\n\ndef g(a=3.14159, b=5):\n    return -math.sqrt(a) - 1\n\nassert f(g())\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\ndef f(arr: np.ndarray, n=5) -> bool:\n    \"\"\"Check if the sum of the elements in arr is divisible by n\"\"\"\n    return np.sum(arr) % n == 0\ndef g(n=5):\n    return np.array([i for i in range(1, n+1)])\nassert f(g())\n",
        "idx_generation": 20,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, lst1=['cat', 'dog', 'bird'], lst2=['tree', 'fly', 'cat']) -> bool:\n    \"\"\"Check if a string is present in both lists lst1 and lst2\"\"\"\n    return s in lst1 and s in lst2\ndef g(lst1=['cat', 'dog', 'bird'], lst2=['tree', 'fly', 'cat']):\n    return next((s for s in lst2 if s in lst1))\nassert f(g())\n",
        "idx_generation": 364,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the sum of any row or column in the matrix is equal to the target value\"\"\"\n    return any((sum(row) == target for row in matrix)) or any((sum(column) == target for column in zip(*matrix)))\ndef g(target=0):\n    return [[target]] * 3\nassert f(g())\n",
        "idx_generation": 92,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=9, b=8) -> bool:\n    \"\"\"Check if n is a perfect square and a multiple of b\"\"\"\n    return n ** 0.5 % 1 == 0 and n % b == 0\n\ndef g(a=9, b=8):\n    return a * b * b\n\nassert f(g())\n",
        "idx_generation": 168,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Find a row and column in the matrix such that the sum of the elements in that row and column is equal to the target_sum\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return any((row_sum == target_sum or col_sum == target_sum for row_sum in row_sums for col_sum in col_sums))\ndef g(target_sum=100):\n    return [[target_sum - i, i] for i in range(target_sum)]\nassert f(g())\n",
        "idx_generation": 74,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, c='a') -> bool:\n    \"\"\"Check if character c is the first character of string s\"\"\"\n    return s[0] == c\ndef g(c='a'):\n    return c + 'bcdefghijklmnopqrstuvwxyz'\nassert f(g())\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: list, target_count=3, target_sum=10) -> bool:\n    \"\"\"Check if there exists a subset of 'target_count' elements in the list that sum up to the target_sum\"\"\"\n    subsets = []\n    n = len(arr)\n    for i in range(2**n):\n        subset = [arr[j] for j in range(n) if (i & (1 << j)) != 0]\n        if len(subset) == target_count and sum(subset) == target_sum:\n            return True\n    return False\n\ndef g(target_count=3, target_sum=10):\n    return random.sample(range(1, 10), 5)\n\nassert f(g())\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=9.81, b=10) -> bool:\n    \"\"\"Check if the square root of a number is within a given range.\"\"\"\n    return math.isclose(math.sqrt(x), a, rel_tol=b)\ndef g(a=9.81, b=10):\n    return a ** 2\nassert f(g())\n",
        "idx_generation": 205,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, r=5) -> bool:\n    \"\"\"Check if a given number is a perfect square and a multiple of a given number\"\"\"\n    return math.isqrt(n)**2 == n and n % r == 0\ndef g(r=5):\n    return r**2\nassert f(g())\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=2, y=3) -> bool:\n    \"\"\"Check if n is a perfect square and its square root is divisible by x and y.\"\"\"\n    return math.isqrt(n) ** 2 == n and math.isqrt(n) % x == 0 and math.isqrt(n) % y == 0\n\ndef g(x=2, y=3):\n    return x**2 * y**2\nassert f(g())\n",
        "idx_generation": 209,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, threshold=0.5) -> bool:\n    \"\"\"Check if the average of the elements in the numpy array is above the given threshold\"\"\"\n    return np.mean(arr) > threshold\n\ndef g(threshold=0.5):\n    return np.array([0.6, 0.7, 0.8, 0.9, 1.0])\n\nassert f(g())\n",
        "idx_generation": 429,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a number n such that the sum of its digits is equal to the product of its digits.\"\"\"\n    digits = [int(digit) for digit in str(n)]\n    return sum(digits) == 1 if 0 in digits else 1  # Exclude numbers with zero digits\ndef g():\n    return 111\nassert f(g())\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    \"\"\"Find a path from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == 1 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    paths = [[0]]\n    while paths:\n        current_path = paths.pop(0)\n        current_node = current_path[-1]\n        if current_node == 1:\n            return current_path\n        for (i, j) in edges:\n            if i == current_node:\n                new_path = current_path + [j]\n                paths.append(new_path)\nassert f(g())\n",
        "idx_generation": 218,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if the target word can be formed by concatenating the words in order\"\"\"\n    formed_word = ''\n    for word in words:\n        formed_word += word\n        if formed_word == target:\n            return True\n    return False\ndef g(target='python'):\n    words = ['p', 'yt', 'h', 'on']\n    return words\nassert f(g())\n",
        "idx_generation": 265,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a subset of numbers in the list that add up to the target value\"\"\"\n    from itertools import combinations\n    for r in range(len(nums) + 1):\n        for subset in combinations(nums, r):\n            if sum(subset) == target:\n                return True\n    return False\ndef g():\n    return [10, 20, 30, 40, 50]\nassert f(g())\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='python') -> bool:\n    \"\"\"Check if a given substring appears at least twice in a string.\"\"\"\n    return string.count(substring) >= 2\ndef g(substring='python'):\n    string = substring * 2\n    return string\nassert f(g())\n",
        "idx_generation": 116,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find if there exist two numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [2, 8]\nassert f(g())\n",
        "idx_generation": 177,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if a target number is present in a list, after shuffling the list.\"\"\"\n    random.shuffle(nums)\n    return target in nums\n\ndef g(target=5):\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 20,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from a list that sum up to a target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target - 9]\nassert f(g())\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=2) -> bool:\n    \"\"\"Check if the given number is a power of x\"\"\"\n    return math.log(n, x).is_integer()\ndef g(x=2):\n    return x ** 5\nassert f(g())\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, r=4, k=2) -> bool:\n    \"\"\"Given a positive integer n, check if it is divisible by r and the sum of its digits is divisible by k.\"\"\"\n    return n % r == 0 and sum(int(digit) for digit in str(n)) % k == 0\n\ndef g(r=4, k=2):\n    import random\n    n = random.randint(1, 1000)\n    while n % r != 0 or sum(int(digit) for digit in str(n)) % k != 0:\n        n = random.randint(1, 1000)\n    return n\n\nassert f(g())\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exists a path in the matrix that adds up to the target value\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    visited = [[False] * n for _ in range(m)]\n\n    def dfs(i, j, curr_sum):\n        if i < 0 or i >= m or j < 0 or j >= n or visited[i][j]:\n            return False\n        curr_sum += matrix[i][j]\n        if curr_sum == target:\n            return True\n        visited[i][j] = True\n        result = dfs(i+1, j, curr_sum) or dfs(i-1, j, curr_sum) or dfs(i, j+1, curr_sum) or dfs(i, j-1, curr_sum)\n        visited[i][j] = False\n        return result\n\n    for i in range(m):\n        for j in range(n):\n            if dfs(i, j, 0):\n                return True\n    return False\n\ndef g(m=3, n=3, target=20):\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 212,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Find if there exists a subarray of numbers whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\ndef g(k=3):\n    return [5, 10, 15, 20, 25]\nassert f(g())\n",
        "idx_generation": 212,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]], target_slope=2) -> bool:\n    \"\"\"Given a list of points, find a line (represented by its slope) that passes through at least 3 points.\n    The goal is to find the slope that is closest to the target_slope.\"\"\"\n    def calculate_slope(point1, point2):\n        x1, y1 = point1\n        x2, y2 = point2\n        return (y2 - y1) / (x2 - x1)\n\n    def is_valid_slope(slope, points):\n        count = 0\n        for point in points:\n            x, y = point\n            if y == slope * x:\n                count += 1\n        return count >= 3\n\n    slopes = set()\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            slope = calculate_slope(points[i], points[j])\n            slopes.add(slope)\n\n    closest_slope = min(slopes, key=lambda x: abs(x - target_slope))\n    return is_valid_slope(closest_slope, points)\n\ndef g(target_slope=2):\n    points = [(1, 2), (3, 6), (5, 10), (7, 14), (9, 18), (11, 22)]\n    return points\n\nassert f(g())\n",
        "idx_generation": 29,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target_sum=150) -> bool:\n    \"\"\"Check if there exists a subset of 'arr' that sums up to 'target_sum'\"\"\"\n    subset_sums = set([0])\n    for num in arr:\n        new_sums = set()\n        for subset_sum in subset_sums:\n            new_sums.add(subset_sum + num)\n            if subset_sum + num == target_sum:\n                return True\n        subset_sums.update(new_sums)\n    return False\n\ndef g(target_sum=150):\n    return np.array([10, 20, 30, 40, 50, 60])\n\nassert f(g())\n",
        "idx_generation": 16,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]], rows=3, cols=3) -> bool:\n    \"\"\"Magic Square\nGiven a grid of integers, determine if it forms a magic square. A magic square is a square grid\nwhere the sums of the numbers in each row, each column, and both main diagonals are the same.\n\"\"\"\n    target_sum = sum(grid[0])\n    for row in grid:\n        if sum(row) != target_sum:\n            return False\n    for col in range(cols):\n        if sum(grid[row][col] for row in range(rows)) != target_sum:\n            return False\n    if sum(grid[i][i] for i in range(rows)) != target_sum:\n        return False\n    if sum(grid[i][cols-1-i] for i in range(rows)) != target_sum:\n        return False\n    return True\ndef g(rows=3, cols=3):\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nassert f(g())\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Check if there are n consecutive numbers in the list\"\"\"\n    return any((nums[i:i+n] == list(range(nums[i], nums[i]+n)) for i in range(len(nums)-n+1)))\ndef g(n=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='cat', n=2) -> bool:\n    \"\"\"Find the count of a substring within a larger string.\"\"\"\n    return s.count(substr) == n\ndef g(substr='cat', n=2):\n    s = substr * n\n    return s\nassert f(g())\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers in a list that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums: List[int], target=0):\n    random.shuffle(nums)\n    return nums\n\nnums = [1, 2, 3, 4, 5]\nassert f(g(nums), target=7)\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, factors=[2, 3, 5, 7]) -> bool:\n    \"\"\"Check if a number is divisible by all the factors\"\"\"\n    return all((n % f == 0 for f in factors))\ndef g(factors=[2, 3, 5, 7]):\n    n = 1\n    for f in factors:\n        n *= f\n    return n\nassert f(g())\n",
        "idx_generation": 250,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Check if n can be written as a sum of a and b, where a and b are positive integers.\"\"\"\n    return any((i * a + j * b == n for i in range(n // a + 1) for j in range(n // b + 1)))\ndef g(a=2, b=3):\n    return a + b\nassert f(g(), g())\n",
        "idx_generation": 141,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, ops=['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], target=61813) -> bool:\n    \"\"\"Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\nfinal value is the target value.\nSample Input:\nops = [\"x++\", \"--x\", \"--x\"]\ntarget = 12\nSample Output:\n13\"\"\"\n    for op in ops:\n        if op in ['++x', 'x++']:\n            n += 1\n        else:\n            assert op in ['--x', 'x--']\n            n -= 1\n    return n == target\ndef g(ops=['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], target=61813):\n    return target - ops.count('++x') - ops.count('x++') + ops.count('--x') + ops.count('x--')\nassert f(g())\n",
        "idx_generation": 71,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=5) -> bool:\n    \"\"\"Check if a string is a palindrome.\nSample Input:\n`\"racecar\"`\nSample Output:\n`True`\"\"\"\n    return s == s[::-1] and len(s) >= target\ndef g(target=5):\n    return \"racecar\"\nassert f(g())\n",
        "idx_generation": 58,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Given an array of integers arr, find a subarray of length k that has the highest sum.\"\"\"\n    return sum(arr[:k]) == max([sum(arr[i:i+k]) for i in range(len(arr)-k+1)])\ndef g(k=3):\n    return [1] * k\nassert f(g())\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the given matrix is a magic square, where the sum of each row, column, and diagonal is equal.\"\"\"\n    target_sum = n * (n**2 + 1) // 2\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag_sum_1 = sum(matrix[i][i] for i in range(n))\n    diag_sum_2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sum == target_sum for row_sum in row_sums)) and all((col_sum == target_sum for col_sum in col_sums)) and diag_sum_1 == diag_sum_2 == target_sum\ndef g(n=3):\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nassert f(g())\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=5) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return s == s[::-1] and len(s) >= target\ndef g(target=5):\n    return 'racecar'\nassert f(g())\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subset of the given list whose sum is equal to the target\"\"\"\n    n = len(nums)\n    for i in range(2 ** n):\n        subset_sum = sum([nums[j] for j in range(n) if (i & (1 << j))])\n        if subset_sum == target:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 391,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(dt: datetime, year=2022) -> bool:\n    \"\"\"Check if the year of the datetime object 'dt' is greater than or equal to 'year'.\"\"\"\n    return dt.year >= year\ndef g(year=2022):\n    return datetime(year, 1, 1)\nassert f(g())\n",
        "idx_generation": 225,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=7, c=10) -> bool:\n    \"\"\"Find n such that n + a == b * c\"\"\"\n    return n + a == b * c\ndef g(a=5, b=7, c=10):\n    return b * c - a\nassert f(g())\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=10) -> bool:\n    \"\"\"Find if the sum of the digits in the string is equal to the target.\"\"\"\n    return sum(map(int, s)) == target\ndef g(target=10):\n    return str(target) * target\nassert f(g())\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], t=100, n=5) -> bool:\n    \"\"\"Find how many values are equal to target\"\"\"\n    return x.count(t) == n\ndef g(t=100, n=5):\n    return [t] * n\nassert f(g())\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=200, k=3) -> bool:\n    \"\"\"Find k numbers in the list that sum up to target\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, k):\n        if sum(combo) == target:\n            return True\n    return False\ndef g(target=200, k=3):\n    return [i for i in range(1, target+1)]\nassert f(g())\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, m='hello', n=3) -> bool:\n    \"\"\"Check if the string s contains the substring m repeated n times.\"\"\"\n    return s.count(m) == n\ndef g(m='hello', n=3):\n    return m * n\nassert f(g())\n",
        "idx_generation": 38,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], n=4, target=16) -> bool:\n    \"\"\"Find a combination of n numbers from the given list that sum up to the target\"\"\"\n    combinations = itertools.combinations(x, n)\n    for combo in combinations:\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g(n=4, target=16):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if any element in the matrix equals the target\"\"\"\n    return any([(element == target) for row in matrix for element in row])\ndef g(target=5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 40,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(word: str, vowels='aeiou') -> bool:\n    \"\"\"Check if all the vowels in the word are in alphabetical order\"\"\"\n    vowels_in_word = [c for c in word if c in vowels]\n    return vowels_in_word == sorted(vowels_in_word)\ndef g(vowels='aeiou'):\n    import random\n    word = ''.join(random.choices(vowels, k=10))\n    while not f(word, vowels):\n        word = ''.join(random.choices(vowels, k=10))\n    return word\nassert f(g())\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: int, a=100) -> bool:\n    \"\"\"Check if the given number is even\"\"\"\n    return x % 2 == 0\n\ndef g(a=100):\n    return random.choice(range(a))\n\nassert f(g())\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=5) -> bool:\n    \"\"\"Check if the given number is a multiple of either a or b\"\"\"\n    return n % a == 0 or n % b == 0\ndef g(a=3, b=5):\n    return a * b\nassert f(g())\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray in the given list such that the sum of elements is divisible by k.\"\"\"\n    n = len(li)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + li[i - 1]\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if (prefix_sum[j] - prefix_sum[i]) % k == 0:\n                return True\n    return False\n\ndef g(k=3):\n    li = [4, 2, 6, 1, 7, 3]\n    return li\n\nassert f(g())\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if a given matrix is symmetric or not.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g(target=0):\n    return [[0, target], [target, 0]]\nassert f(g())\n",
        "idx_generation": 59,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=9):\n    nums = [random.randint(1, 10) for _ in range(10)]\n    return nums\nassert f(g())\n",
        "idx_generation": 103,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to a target number.\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Given a list of integers, find a subarray of length k that has the maximum sum\"\"\"\n    return max(sum(nums[i:i+k]) for i in range(len(nums)-k+1)) > 10\ndef g(k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=5) -> bool:\n    \"\"\"Determine if n is divisible by both a and b\"\"\"\n    return n % a == 0 and n % b == 0\ndef g(a=3, b=5):\n    return a * b\nassert f(g())\n",
        "idx_generation": 254,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=7, c=3) -> bool:\n    \"\"\"Check if a number is divisible by a, b, and c.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=5, b=7, c=3):\n    return a * b * c\nassert f(g())\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=6, m=3) -> bool:\n    \"\"\"Find a string with a given pattern of repeating substrings.\"\"\"\n    pattern = s[:n] * m\n    return s == pattern\n\ndef g(n=6, m=3):\n    s = 'abc' * n\n    return s\n\nassert f(g())\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, p=3) -> bool:\n    \"\"\"Check if a number is a palindrome in base p\"\"\"\n    return str(num) == str(num)[::-1]\ndef g(p=3):\n    return int(str(p) + str(p))\nassert f(g())\n",
        "idx_generation": 71,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, nums=[5, 10, 15, 20, 25, 30], n=3) -> bool:\n    \"\"\"Check if there exists a subarray in a list where the sum of its elements is divisible by a given number\"\"\"\n    return any(sum(nums[i:j]) % n == 0 for i in range(len(nums)) for j in range(i+1, len(nums)+1))\ndef g(nums=[5, 10, 15, 20, 25, 30], n=3):\n    return nums\nassert f(g())\n",
        "idx_generation": 0,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: int, a=10, b=20) -> bool:\n    \"\"\"Check if x is between a and b (inclusive)\"\"\"\n    return a <= x <= b\n\ndef g(a=10, b=20):\n    return random.randint(a, b)\n\nassert f(g())\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, value=0) -> bool:\n    \"\"\"Check if the given array contains the specified value\"\"\"\n    return np.any(arr == value)\n\ndef g(value=0):\n    arr = np.random.randint(10, size=(5, 5))\n    return arr\n\nassert f(g())\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target=27) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target\"\"\"\n    return sum(num_list) == target\ndef g(target=27):\n    return [9, 9, 9]\nassert f(g())\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=3) -> bool:\n    \"\"\"Check if the remainder of a divided by b is equal to n\"\"\"\n    return a % b == n\ndef g(a=10, b=3):\n    return a % b\nassert f(g())\n",
        "idx_generation": 18,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(password: str, secret_key='ABC123') -> bool:\n    \"\"\"Check if the password matches the secret key\"\"\"\n    return password == secret_key\ndef g(secret_key='ABC123'):\n    return secret_key\nassert f(g())\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a subset of numbers that sums up to the target.\"\"\"\n    n = len(numbers)\n    for i in range(1 << n):\n        subset_sum = sum(numbers[j] for j in range(n) if (i & (1 << j)) > 0)\n        if subset_sum == target:\n            return True\n    return False\n\ndef g(target=100):\n    numbers = [10, 20, 30, 40, 50]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 435,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int, digits=2) -> bool:\n    \"\"\"Check if a number has the given number of digits after the decimal point\"\"\"\n    return math.isclose(num, round(num, digits), rel_tol=10**(-digits))\ndef g(digits=2):\n    return round(math.pi, digits)\nassert f(g())\n",
        "idx_generation": 264,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=4, b=5) -> bool:\n    \"\"\"Check if n is divisible by both a and b\"\"\"\n    return n % a == 0 and n % b == 0\n\ndef g(a=4, b=5):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, c='a', n=3) -> bool:\n    \"\"\"Check if a character appears n times in a string.\"\"\"\n    return s.count(c) == n\ndef g(c='a', n=3):\n    return c * n\nassert f(g())\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(p: List[int], edges=[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]) -> bool:\n    \"\"\"Determine if there exists a path from node 1 to node 6 in the given directed graph\"\"\"\n    return p[0] == 1 and p[-1] == 6 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges=[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]):\n    paths = {1: [1]}\n    for (i, j) in edges:\n        if i in paths and j not in paths:\n            paths[j] = paths[i] + [j]\n    return paths.get(6)\nassert f(g())\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, target=\"Python\", num=3) -> bool:\n    \"\"\"Check if a word appears a certain number of times in a sentence\"\"\"\n    words = sentence.split()\n    count = words.count(target)\n    return count == num\ndef g(target=\"Python\", num=3):\n    return \"I love Python and Python is awesome. Python is the best language.\"\nassert f(g()) == True",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(word: str, n=5) -> bool:\n    \"\"\"Find a word that contains n vowels in it.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in word:\n        if char.lower() in vowels:\n            count += 1\n    return count == n\ndef g(n=5):\n    import random\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    word = \"\"\n    for _ in range(n):\n        word += random.choice(vowels)\n    return word\nassert f(g())\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"Find a combination of words from the list that can be concatenated to form the target_word.\"\"\"\n    from itertools import permutations\n    for p in permutations(words):\n        if ''.join(p) == target_word:\n            return True\n    return False\ndef g(target_word='python'):\n    return ['py', 'th', 'on']\nassert f(g())\n",
        "idx_generation": 56,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string s contains exactly n vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = sum([1 for char in s if char.lower() in vowels])\n    return count == n\ndef g(n=3):\n    return 'aeiou'[:n]\nassert f(g())\n",
        "idx_generation": 193,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: list, target=9) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=9):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum=100, length=4) -> bool:\n    \"\"\"Find a list of length integers from nums that add up to target_sum\"\"\"\n    from itertools import combinations\n    return any((sum(comb) == target_sum for comb in combinations(nums, length)))\ndef g(target_sum=100, length=4):\n    return list(range(1, target_sum+1))\nassert f(g())\n",
        "idx_generation": 265,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if n is divisible by any prime number less than m\"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return any(n % prime == 0 for prime in primes if prime < m)\ndef g(m=5):\n    return 100\nassert f(g())\n",
        "idx_generation": 64,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"Find if a subset of a list adds up to a target number.\"\"\"\n    def subset_sum(arr, n, target):\n        if target == 0:\n            return True\n        if n == 0 and target != 0:\n            return False\n        if arr[n - 1] > target:\n            return subset_sum(arr, n - 1, target)\n        return subset_sum(arr, n - 1, target) or subset_sum(arr, n - 1, target - arr[n - 1])\n    return subset_sum(arr, len(arr), target)\ndef g(arr=[1, 2, 3, 4, 5], target=10):\n    return arr\nassert f(g())\n",
        "idx_generation": 495,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix, determine if it is symmetric. A matrix is symmetric if it is equal to its transpose.\nSample Input:\n[[1, 2, 3],\n [2, 4, 5],\n [3, 5, 6]]\nSample Output:\nFalse\"\"\"\n    return all((matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(i+1, len(matrix))))\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target_sum=100) -> bool:\n    \"\"\"Check if there exists a subset of the array that sums up to the target sum.\"\"\"\n    n = arr.shape[0]\n    memo = np.zeros((n + 1, target_sum + 1), dtype=bool)\n    memo[0, 0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target_sum + 1):\n            if j >= arr[i - 1]:\n                memo[i, j] = memo[i - 1, j] or memo[i - 1, j - arr[i - 1]]\n            else:\n                memo[i, j] = memo[i - 1, j]\n    \n    return memo[n, target_sum]\n\ndef g(arr=np.array([10, 20, 30, 40, 50]), target_sum=100):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 117,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a', n=3) -> bool:\n    \"\"\"Check if the nth occurrence of a character is at the end of the string.\"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] == char:\n            count += 1\n            if count == n:\n                return i == len(s) - 1\n    return False\ndef g(char='a', n=3):\n    return 'banana'\nassert f(g())\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target_sum=0) -> bool:\n    \"\"\"Find two integers in the list that add up to the target sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=0):\n    import random\n    nums = random.sample(range(-100, 101), 50)\n    return nums\n\nassert f(g())\n",
        "idx_generation": 8,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Find two numbers in a list that add up to a target value\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(target=16):\n    return [4, 12, 8]\nassert f(g())\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(num: int, seed=42) -> bool:\n    \"\"\"Check if a given number is divisible by a randomly generated number.\"\"\"\n    random.seed(seed)\n    divisor = random.randint(1, 10)\n    return num % divisor == 0\n\ndef g(seed=42):\n    random.seed(seed)\n    return random.randint(1, 100)\n\nassert f(g())\n",
        "idx_generation": 313,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a number n that is divisible by all numbers from 1 to 10 (inclusive).\"\"\"\n    return all(n % i == 0 for i in range(1, 11))\n\ndef g():\n    return 2520\n\nassert f(g())\n",
        "idx_generation": 30,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=5, k=3) -> bool:\n    \"\"\"Check if a number is divisible by both m and k.\"\"\"\n    return n % m == n % k == 0\n\ndef g(m=5, k=3):\n    return m * k\n\nassert f(g())\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub: str = 'abc') -> bool:\n    \"\"\"Check if a string contains a specific substring.\"\"\"\n    return sub in s\ndef g(sub: str = 'abc'):\n    return 'abc' + sub + 'xyz'\nassert f(g())\n",
        "idx_generation": 209,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, target=153) -> bool:\n    \"\"\"Find a number that can be expressed as the sum of the cubes of its digits\"\"\"\n    return sum(int(x) ** 3 for x in str(num)) == target\ndef g(target=153):\n    num = 0\n    while True:\n        if sum(int(x) ** 3 for x in str(num)) == target:\n            return num\n        num += 1\nassert f(g())\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=1000, b=2000, c=3000) -> bool:\n    \"\"\"Check if a number is a multiple of three given numbers.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=1000, b=2000, c=3000):\n    return a * b * c\nassert f(g())\n",
        "idx_generation": 18,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=100) -> bool:\n    \"\"\"Determine if a number is a perfect square\"\"\"\n    return n**0.5 == a\ndef g(a=10, b=100):\n    return a**2\nassert f(g())\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that add up to the target value.\"\"\"\n    return any((matrix[i][j] + matrix[k][l] == target) for i in range(len(matrix)) for j in range(len(matrix[i])) for k in range(len(matrix)) for l in range(len(matrix[k])) if (i != k or j != l))\ndef g(target=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 150,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a given number n is divisible by all specified divisors.\"\"\"\n    return all(n % divisor == 0 for divisor in divisors)\n    \ndef g(divisors=[2, 3, 5]):\n    n = 1\n    for divisor in divisors:\n        n *= divisor\n    return n\n\nassert f(g())\n",
        "idx_generation": 21,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(points: List[Tuple[float, float]], x1=2, y1=4, x2=8, y2=6) -> bool:\n    \"\"\"Check if all points lie within the rectangle defined by the bottom-left point (x1, y1) and the top-right point (x2, y2)\"\"\"\n    return all(x1 <= x <= x2 and y1 <= y <= y2 for x, y in points)\n\ndef g(x1=2, y1=4, x2=8, y2=6):\n    points = [(3, 5), (6, 5), (7, 4)]\n    return points\n\nassert f(g())\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, word='elephant') -> bool:\n    \"\"\"Find a sentence that contains a specific word.\"\"\"\n    return word in sentence\ndef g(word='elephant'):\n    return 'I have seen an ' + word + ' at the zoo.'\nassert f(g())\n",
        "idx_generation": 495,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_number=15) -> bool:\n    \"\"\"Find a combination of numbers from the given list that adds up to the target_number.\"\"\"\n    n = len(numbers)\n    for i in range(1, 2**n):\n        subset = [numbers[j] for j in range(n) if (i >> j) & 1]\n        if sum(subset) == target_number:\n            return True\n    return False\n    \ndef g(target_number=15):\n    numbers = [1, 2, 3, 4, 5]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=5, b=20) -> bool:\n    \"\"\"Check if x lies within a specific range\"\"\"\n    return a <= x <= b and math.isclose(x, math.sqrt(a * b), rel_tol=1e-5)\n\ndef g(a=5, b=20):\n    return math.sqrt(a * b)\n\nassert f(g())\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, pattern='ABC') -> bool:\n    \"\"\"Check if a given string matches a given pattern, where each letter in the pattern represents a unique character in the string\"\"\"\n    def is_match(string, pattern, mapping, used):\n        if len(string) == 0 and len(pattern) == 0:\n            return True\n        if len(string) == 0 or len(pattern) == 0:\n            return False\n        char = pattern[0]\n        if char in mapping:\n            if string[:len(mapping[char])] != mapping[char]:\n                return False\n            return is_match(string[len(mapping[char]):], pattern[1:], mapping, used)\n        else:\n            for i in range(1, len(string) - len(pattern) + 2):\n                if string[:i] in used:\n                    continue\n                mapping[char] = string[:i]\n                used.add(string[:i])\n                if is_match(string[i:], pattern[1:], mapping, used):\n                    return True\n                del mapping[char]\n                used.remove(string[:i])\n            return False\n    return is_match(string, pattern, {}, set())\ndef g(pattern='ABC'):\n    return pattern\nassert f(g())\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a list that add up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(target=10):\n    nums = [1, 5, 3, 7, 9]\n    return nums\nassert f(g())\n",
        "idx_generation": 45,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if a string contains exactly n vowels.\"\"\"\n    vowel_count = sum(ch in 'aeiou' for ch in s)\n    return vowel_count == n\ndef g(n=4):\n    return 'aeiou' * (n // 5) + 'aeiou'[:n%5]\nassert f(g())\n",
        "idx_generation": 216,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n=3) -> bool:\n    \"\"\"Given a list of integers and a number n, determine if the sum of the first n elements of the list is equal to the given result\"\"\"\n    return sum(lst[:n]) == result\n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n=3):\n    return sum(lst[:n])\n\nassert f(g(), lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n=3)\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Check if it is possible to form the given string by concatenating words from the given list.\"\"\"\n    def helper(s, words):\n        if not s:\n            return True\n        for word in words:\n            if s.startswith(word) and helper(s[len(word):], words):\n                return True\n        return False\n    return helper(s, words)\ndef g(words=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(words)\nassert f(g())\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Determine if there exists a subset of a given list of integers that adds up to a target sum.\"\"\"\n    dp = [False] * (target_sum + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target_sum, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target_sum]\n\ndef g(target_sum=100):\n    random.seed(0)\n    nums = random.choices(range(1, 101), k=10)\n    return nums\n\nassert f(g())\n",
        "idx_generation": 194,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target number.\"\"\"\n    return any((num_list[i] + num_list[j] == target for i in range(len(num_list)) for j in range(i+1, len(num_list))))\ndef g(target=100):\n    return [i for i in range(1, target)]\nassert f(g())\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if a list is a palindrome.\"\"\"\n    return lst == lst[::-1]\n\ndef g(size: int = 5):\n    return [i for i in range(size)] + [i for i in range(size-1, -1, -1)]\n\nassert f(g())\n",
        "idx_generation": 9,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray in nums that sums up to k\"\"\"\n    return any((sum(nums[i:j]) == k for i in range(len(nums)) for j in range(i+1, len(nums)+1)))\ndef g(k=3):\n    return [k]\nassert f(g())\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, c=8, d=2) -> bool:\n    \"\"\"Check if a number is divisible by both c and d\"\"\"\n    return (n % c == 0) and (n % d == 0)\n\ndef g(c=8, d=2):\n    return c * d\n\nassert f(g())\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=7, b=2, c=3) -> bool:\n    \"\"\"Check if n is a prime number and a^b + c is divisible by n.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return (a ** b + c) % n == 0\n\ndef g(a=7, b=2, c=3):\n    for i in range(2, 100):\n        if f(i, a, b, c):\n            return i\n    return None\n\nassert f(g(), a=7, b=2, c=3)\n",
        "idx_generation": 72,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, chars=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a string contains all the specified characters.\"\"\"\n    return all((c in s for c in chars))\n\ndef g(chars=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(chars)\n\nassert f(g())\n",
        "idx_generation": 215,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(ans: List[str], target=3) -> bool:\n    \"\"\"Find a list of target or more strings that are palindromes\"\"\"\n    return all([s == s[::-1] for s in ans])\ndef g(target=3):\n    return ['racecar'] * target\nassert f(g())\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=7) -> bool:\n    \"\"\"Check if the given number n is divisible by a and b\"\"\"\n    return n % a == 0 and n % b == 0\ndef g(a=3, b=7):\n    return 21\nassert f(g())\n",
        "idx_generation": 60,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from the given list that add up to the target value\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [2, 8]\nassert f(g())\n",
        "idx_generation": 180,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=5, y=2) -> bool:\n    \"\"\"Find the smallest positive integer n such that when it is divided by x, the result is y.\"\"\"\n    return n % x == y\ndef g(x=5, y=2):\n    n = y\n    while n % x != y:\n        n += 1\n    return n\nassert f(g())\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int, n=0) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to the power of a third number\"\"\"\n    return x + y == n ** 2\ndef g(n=0):\n    return n, n ** 2 - n\nassert f(*g())\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]], target_sum=20) -> bool:\n    \"\"\"Find a 2x2 subgrid in the grid whose sum is equal to the target_sum.\"\"\"\n    for row in grid:\n        assert len(row) == len(grid[0])\n    for i in range(len(grid)-1):\n        for j in range(len(grid[0])-1):\n            if sum([grid[i][j], grid[i+1][j], grid[i][j+1], grid[i+1][j+1]]) == target_sum:\n                return True\n    return False\ndef g():\n    return [[4, 2, 6, 8], [1, 5, 3, 7], [9, 2, 4, 6]]\nassert f(g())\n",
        "idx_generation": 80,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(x: int, n=5) -> bool:\n    \"\"\"Check if the current year is equal to the given number\"\"\"\n    year = datetime.datetime.now().year\n    return x == year\ndef g(n=5):\n    return datetime.datetime.now().year\nassert f(g())\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, x=4, y=7) -> bool:\n    \"\"\"Check if a number can be formed using only x and y.\nThe number can be formed by repeating x and y any number of times, in any order.\n\"\"\"\n    if num == 0:\n        return True\n    if num < 0:\n        return False\n    return f(num-x) or f(num-y)\ndef g(x=4, y=7):\n    return x + y\nassert f(g())\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5, target=3) -> bool:\n    \"\"\"Find a string that has exactly n characters and contains the letter 'a' as the target-th character.\"\"\"\n    return len(s) == n and s[target - 1] == 'a'\ndef g(n=5, target=3):\n    return 'b' * (target - 1) + 'a' + 'b' * (n - target)\nassert f(g())\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exist three numbers in the list that add up to the target.\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(nums=[25, 50, 75, 10, 30, 40]):\n    return nums\nassert f(g())\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='text', count=3) -> bool:\n    \"\"\"Count the number of occurrences of a substring in a string and check if it is equal to count\"\"\"\n    return s.count(substring) == count\ndef g(substring='text', count=3):\n    return 'text' * count\nassert f(g())\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=10):\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, target]\n    ]\n\nassert f(g())\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Find a substring in the given string\"\"\"\n    return substr in s\ndef g(substr='python'):\n    s = \"I love python programming\"\n    return s\nassert f(g())\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(m: int, n: int) -> bool:\n    \"\"\"Check if two positive integers are coprime (i.e. their greatest common divisor is 1).\"\"\"\n    return gcd(m, n) == 1\n\ndef g():\n    return 17, 23\n\nassert f(*g())\n",
        "idx_generation": 150,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, result=5) -> bool:\n    \"\"\"Determine whether a number is a perfect square\"\"\"\n    return n ** 0.5 == result\n\ndef g(result=5):\n    return int(result) ** 2\nassert f(g())\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=24, max_depth=4) -> bool:\n    \"\"\"Find a combination of numbers that results in the target value using the four basic arithmetic operations.\"\"\"\n    def helper(nums, target, max_depth):\n        if target == 0:\n            return True\n        if max_depth == 0:\n            return False\n        for i in range(len(nums)):\n            remaining_nums = nums[:i] + nums[i+1:]\n            if helper(remaining_nums, target-nums[i], max_depth-1):\n                return True\n            if helper(remaining_nums, target+nums[i], max_depth-1):\n                return True\n            if helper(remaining_nums, target*nums[i], max_depth-1):\n                return True\n            if nums[i] != 0 and target % nums[i] == 0:\n                if helper(remaining_nums, target//nums[i], max_depth-1):\n                    return True\n        return False\n    \n    return helper(nums, target, max_depth)\n\ndef g(target=24, max_depth=4):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Find two numbers in a list that add up to a given target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums=[2, 5, 6, 1, 4]):\n    return nums\nassert f(g())\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 10,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nimport math\nfrom typing import*\ndef f(arr: List[int], target=10, max_length=3) -> bool:\n    \"\"\"Given a list of integers, find a subsequence of at most max_length elements whose product is equal to the target value.\"\"\"\n    from itertools import combinations\n    return any(math.prod(c) == target for n in range(1, max_length + 1) for c in combinations(arr, n))\ndef g(target=10, max_length=3):\n    return [1, 2, 5]\nassert f(g())\n",
        "idx_generation": 31,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=8, b=3, c=2) -> bool:\n    \"\"\"Find a number n such that n is a multiple of a, n is a multiple of b, and n is a multiple of c.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=8, b=3, c=2):\n    return a * b * c\nassert f(g())\n",
        "idx_generation": 439,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=5, p=3) -> bool:\n    \"\"\"Find n such that the sum of the first m multiples of p is equal to n\"\"\"\n    return n == sum([i * p for i in range(1, m+1)])\ndef g(m=5, p=3):\n    return sum([i * p for i in range(1, m+1)])\nassert f(g())\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=5, k=2) -> bool:\n    \"\"\"Check if n is a multiple of m and divisible by k\"\"\"\n    return n % m == 0 and n % k == 0\n\ndef g(m=5, k=2):\n    n = m * k\n    return n\n\nassert f(g())\n",
        "idx_generation": 262,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Check if any combination of four numbers from the list can be used to achieve the target value of 24 using addition, subtraction, multiplication, and division\"\"\"\n    def helper(nums):\n        if len(nums) == 1:\n            return abs(nums[0] - target) < 1e-6\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                a, b = nums[i], nums[j]\n                rest = [nums[k] for k in range(len(nums)) if k != i and k != j]\n                if helper([a+b]+rest) or helper([a-b]+rest) or helper([a*b]+rest) or (b != 0 and helper([a/b]+rest)):\n                    return True\n        return False\n    \n    return helper(nums)\n\ndef g(target=24):\n    return [4, 5, 6, 7]\nassert f(g())\n",
        "idx_generation": 294,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if all characters in the string are alphanumeric\"\"\"\n    return all([c.isalnum() for c in s]) and len(s) == n\ndef g(n=3):\n    return 'a' * n\nassert f(g())\n",
        "idx_generation": 60,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x=3, y=5) -> bool:\n    \"\"\"Check if n is divisible by both x and y\"\"\"\n    return n % x == 0 and n % y == 0\ndef g(x=3, y=5):\n    return x * y\nassert f(g())\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the given array that sums up to the target\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 204,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, y=2, z=10) -> bool:\n    \"\"\"Check if the given number x is divisible evenly by y and z\"\"\"\n    return x % y == 0 and x % z == 0\n\ndef g(y=2, z=10):\n    return math.lcm(y, z)\nassert f(g())\n",
        "idx_generation": 28,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, num_rows=2, num_cols=2) -> bool:\n    \"\"\"Check if the given array is a 2D array with a specific number of rows and columns\"\"\"\n    return arr.shape == (num_rows, num_cols)\n    \ndef g(num_rows=2, num_cols=2):\n    return np.zeros((num_rows, num_cols))\n    \nassert f(g())\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, a=10) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return math.sqrt(x) == int(math.sqrt(x)) and x != 0\ndef g(a=10):\n    return a ** 2\nassert f(g())\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    \"\"\"Find a path with an odd number of nodes from nodes 0 to n in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 1\ndef g(edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max((max(e) for e in edges))\n    for _ in range(n + 1):\n        for (i, j) in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g())\n",
        "idx_generation": 283,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20, k=3) -> bool:\n    \"\"\"Find if there are k numbers in nums that sum up to target.\"\"\"\n    def find_combinations(nums, target, k, current_sum, start):\n        if k == 0 and current_sum == target:\n            return True\n        if k < 0 or current_sum > target:\n            return False\n        for i in range(start, len(nums)):\n            if find_combinations(nums, target, k-1, current_sum+nums[i], i+1):\n                return True\n        return False\n    \n    return find_combinations(nums, target, k, 0, 0)\n\ndef g(target=20, k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Given a string s and an integer n, determine if there exists a substring of s that contains exactly n distinct characters.\"\"\"\n    return any((len(set(s[i:i+n])) == n for i in range(len(s) - n + 1)))\ndef g(n: int):\n    return \"abcdefghijklmnopqrstuvwxyz\" * n\nassert f(g(10), 10)\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=10, max_numbers=5, options=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find a selection of at most max_numbers numbers whose sum is the target value.\"\"\"\n    for num in numbers:\n        assert num in options\n    return len(numbers) <= max_numbers and sum(numbers) == target\ndef g(target=10, max_numbers=5, options=[1, 2, 3, 4, 5]):\n    from itertools import combinations_with_replacement\n    for n in range(max_numbers + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 80,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Given a list of numbers and a target, find two numbers in the list that add up to the target.\"\"\"\n    num_set = set(nums)\n    return any(target - num in num_set for num in nums)\ndef g(target=9):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 258,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, prefix='hello') -> bool:\n    \"\"\"Check if the given string starts with the specified prefix\"\"\"\n    return s.startswith(prefix)\n\ndef g(prefix='hello'):\n    return prefix + \"world\"\n\nassert f(g())\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(n: float, x=2.5) -> bool:\n    \"\"\"Check if the square root of n is greater than x.\"\"\"\n    return math.sqrt(n) > x\ndef g(n=9, x=2.5):\n    return n\nassert f(g())\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, num_list=[2, 4, 6, 8, 10], target_prod=40) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to the target\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] * num_list[j] == target_prod:\n                return s == (num_list[i], num_list[j])\n    return False\ndef g(num_list=[2, 4, 6, 8, 10], target_prod=40):\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] * num_list[j] == target_prod:\n                return (num_list[i], num_list[j])\n    return None\nassert f(g())\n",
        "idx_generation": 3,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers that add up to the target_sum.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target_sum - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target_sum=10):\n    return [1, 9, 3, 7]\nassert f(g())\n",
        "idx_generation": 432,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=15) -> bool:\n    \"\"\"Check if there are any two numbers in the list that add up to the target number\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Find two numbers in a list that add up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8]):\n    return nums\nassert f(g())\n",
        "idx_generation": 42,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, divisors=[1,2,3,4,5,6,7,8,9,10]) -> bool:\n    \"\"\"Check if the given number n is divisible by all the numbers in the list of divisors (default: [1,2,3,4,5,6,7,8,9,10]).\"\"\"\n    return all(n % divisor == 0 for divisor in divisors)\n\ndef g(divisors=[1,2,3,4,5,6,7,8,9,10]):\n    return math.lcm(*divisors)\n\nassert f(g())\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, n=5, m=7) -> bool:\n    \"\"\"Check if x is divisible by both n and m\"\"\"\n    return x % n == 0 and x % m == 0\ndef g(n=5, m=7):\n    return n * m\nassert f(g())\n",
        "idx_generation": 213,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"Check if a number is divisible by the sum of its digits\"\"\"\n    return n % sum(int(digit) for digit in str(n)) == 0\ndef g(target=100):\n    return target * 2\nassert f(g())\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, max_length=10) -> bool:\n    \"\"\"Check if the given string s is a palindrome and has a length less than or equal to max_length.\"\"\"\n    return s == s[::-1] and len(s) <= max_length\ndef g(max_length=10):\n    palindrome = 'racecar'\n    while len(palindrome) <= max_length:\n        return palindrome\n    return ''\nassert f(g())\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, target=50) -> bool:\n    \"\"\"Check if the given number is divisible by the target number\"\"\"\n    return n % target == 0\ndef g(target=50):\n    return random.randint(1, 100) * target\nassert f(g())\n",
        "idx_generation": 63,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if a list contains only even numbers.\"\"\"\n    return all(num % 2 == 0 for num in lst)\ndef g():\n    return [2, 4, 6, 8, 10]\nassert f(g())\n",
        "idx_generation": 330,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Given a matrix of integers, find a row such that the sum of its elements is equal to the target\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False\ndef g():\n    return [[1, 5, 7], [2, 3, 10], [4, 6, 10]]\nassert f(g())\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Determine if n is a perfect square.\"\"\"\n    return n ** 0.5 == int(n ** 0.5)\ndef g():\n    return 49\nassert f(g())\n",
        "idx_generation": 33,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if it is possible to get the target number by adding/subtracting the numbers in the given list nums (can use each number only once).\"\"\"\n    def dfs(nums, target, index):\n        if target == 0:\n            return True\n        if index >= len(nums):\n            return False\n        return dfs(nums, target - nums[index], index + 1) or dfs(nums, target + nums[index], index + 1)\n\n    return dfs(nums, target, 0)\n\ndef g(nums_length=10, target_range=(-50, 50)):\n    nums = random.sample(range(*target_range), nums_length)\n    target = random.randint(*target_range)\n    return (nums, target)\n\nassert f(*g())",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, m=4) -> bool:\n    \"\"\"Check if there exists a subgrid of size n x m in the grid s where all elements are the same\"\"\"\n    for i in range(len(s) - n + 1):\n        for j in range(len(s[0]) - m + 1):\n            subgrid = [row[j:j+m] for row in s[i:i+n]]\n            if all(all(cell == subgrid[0][0] for cell in row) for row in subgrid):\n                return True\n    return False\ndef g(n=3, m=4):\n    grid = [['A', 'A', 'A', 'A', 'B'],\n            ['A', 'A', 'A', 'A', 'B'],\n            ['A', 'A', 'A', 'A', 'B'],\n            ['A', 'A', 'A', 'A', 'B'],\n            ['C', 'C', 'C', 'C', 'D']]\n    return grid\nassert f(g())\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if n is divisible by m\"\"\"\n    return n % m == 0\ndef g(m=5):\n    return m * 10\nassert f(g())\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, parts=['abcd'], string='abcd') -> bool:\n    \"\"\"Find a separator that when used to join a given string gives a certain result.\nThis is related to the previous problem but there are some edge cases that differ.\"\"\"\n    return x.join(parts) == string\n\ndef g(parts=['abcd'], string='abcd'):\n    if len(parts) <= 1:\n        return ''\n    length = (len(string) - len(''.join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\n\nassert f(g())\n",
        "idx_generation": 1,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(numbers: list, target_sum=100) -> bool:\n    \"\"\"Determine if it is possible to obtain the target sum by selecting a subset of numbers from the list.\"\"\"\n    for r in range(1, len(numbers) + 1):\n        for combination in itertools.combinations(numbers, r):\n            if sum(combination) == target_sum:\n                return True\n    return False\n\ndef g(numbers=[10, 20, 30, 40, 50]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 166,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, substring='abc') -> bool:\n    \"\"\"Determine if the given string contains the specified substring exactly twice.\"\"\"\n    return x.count(substring) == 2\ndef g(substring='abc'):\n    return substring * 2 + 'xyz'\nassert f(g())\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, num_values=3) -> bool:\n    \"\"\"Find if there exists a combination of num_values numbers in the list nums that sum up to target.\"\"\"\n    import itertools\n    for combination in itertools.combinations(nums, num_values):\n        if sum(combination) == target:\n            return True\n    return False\ndef g(target=100, num_values=3):\n    nums = [10, 20, 30, 40, 50, 60]\n    return nums\nassert f(g())\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int]) -> bool:\n    \"\"\"Find a list of three integers whose sum is 10.\"\"\"\n    return len(x) == 3 and sum(x) == 10\ndef g():\n    return [1, 2, 7]\nassert f(g())\n",
        "idx_generation": 12,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a random number is in a list.\"\"\"\n    return n in lst\ndef g(lst=[1, 2, 3, 4, 5]):\n    return random.choice(lst)\nassert f(g())\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=15) -> bool:\n    \"\"\"Check if any row or column in the matrix sums up to the target value\"\"\"\n    row_sums = np.sum(matrix, axis=1)\n    col_sums = np.sum(matrix, axis=0)\n    return any((row == target or col == target for row, col in zip(row_sums, col_sums)))\n\ndef g(target=15):\n    matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 177,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int]) -> bool:\n    \"\"\"Find a list of five integers whose sum is 25.\"\"\"\n    return len(x) == 5 and sum(x) == 25\ndef g():\n    return [5, 5, 5, 5, 5]\nassert f(g())\n",
        "idx_generation": 12,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=15) -> bool:\n    \"\"\"Find three numbers in a list that sum up to a target value\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=15):\n    return nums\nassert f(g())\n",
        "idx_generation": 0,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[str], prefix='abc', suffix='xyz') -> bool:\n    \"\"\"Check if a given list contains strings that start with the prefix and end with the suffix\"\"\"\n    return any([s.startswith(prefix) and s.endswith(suffix) for s in x])\ndef g(prefix='abc', suffix='xyz'):\n    return ['abc123xyz', 'def456', 'ghi789xyz']\nassert f(g())\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find two numbers that sum up to a specific target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, target-1]\nassert f(g())\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a list of numbers where each number is divisible by the previous number.\"\"\"\n    return all(nums[i] % nums[i-1] == 0 for i in range(1, len(nums)))\n\ndef g():\n    return [2, 4, 8, 16, 32]\n\nassert f(g())\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(start: datetime, end: datetime, minutes=30) -> bool:\n    \"\"\"Check if the given time difference is greater than or equal to the specified minutes.\"\"\"\n    return (end - start).total_seconds() >= minutes * 60\ndef g(minutes=30):\n    start = datetime(2022, 1, 1, 12, 0, 0)\n    end = datetime(2022, 1, 1, 12, minutes, 0)\n    return start, end\nassert f(*g())\n",
        "idx_generation": 221,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Find a number in the given list, nums, that is divisible by n.\"\"\"\n    return any((num % n == 0 for num in nums))\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return next((num for num in nums if num % 2 == 0))\nassert f(g())\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=7, c=15, d=20) -> bool:\n    \"\"\"Check if a number is divisible by any of the given values.\"\"\"\n    return n % a == 0 or n % b == 0 or n % c == 0 or n % d == 0\ndef g(a=3, b=7, c=15, d=20):\n    return max(a, b, c, d)\nassert f(g())\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=6) -> bool:\n    \"\"\"Check if a string has a certain number of characters\"\"\"\n    return len(s) == n\ndef g(n=6):\n    return \"abcdefg\"[:n]\nassert f(g())\n",
        "idx_generation": 76,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], n=5) -> bool:\n    \"\"\"Check if the list contains a number divisible by n\"\"\"\n    for num in li:\n        if num % n == 0:\n            return True\n    return False\ndef g(n=5):\n    return [1, 2, 3, 4, 5 * n]\nassert f(g())\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=30) -> bool:\n    \"\"\"Find a path from the top-left corner to the bottom-right corner of the matrix that sums up to the target value\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = matrix[i - 1][j - 1] + max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n] == target\ndef g(matrix=[[1, 3, 4], [5, 2, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(d: dict, key='name') -> bool:\n    \"\"\"Check if a key exists in a dictionary.\"\"\"\n    return key in d.keys()\ndef g(key='name'):\n    return {'name': 'John', 'age': 25, 'city': 'New York'}\nassert f(g())\n",
        "idx_generation": 58,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Find a combination of 4 numbers that can be used with the operations +, -, *, / to reach the target value\"\"\"\n    def helper(nums: List[float]) -> bool:\n        if len(nums) == 1:\n            return abs(nums[0] - target) < 1e-6\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                a, b = nums[i], nums[j]\n                remaining = [nums[k] for k in range(len(nums)) if k != i and k != j]\n                if helper([a + b] + remaining) or helper([a - b] + remaining) or helper([b - a] + remaining) or helper([a * b] + remaining) or (b != 0 and helper([a / b] + remaining)) or (a != 0 and helper([b / a] + remaining)):\n                    return True\n        return False\n\n    return helper(nums)\n\ndef g(nums=[1, 2, 3, 4]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]], target=50) -> bool:\n    \"\"\"Find if there is a subgrid within the grid that sums up to the target\"\"\"\n    m, n = len(grid), len(grid[0])\n    for i in range(m):\n        for j in range(n):\n            for k in range(i, m):\n                for l in range(j, n):\n                    subgrid_sum = sum(grid[x][y] for x in range(i, k+1) for y in range(j, l+1))\n                    if subgrid_sum == target:\n                        return True\n    return False\ndef g(target=50):\n    return [[i+j for j in range(10)] for i in range(10)]\nassert f(g())\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi', 'jkl']) -> bool:\n    \"\"\"Determine if a specific substring is present in the given string.\"\"\"\n    return any(sub in s for sub in substrings)\ndef g(substrings=['abc', 'def', 'ghi', 'jkl']):\n    s = \"xyzabcdefghiuvwdefghijklmnop\"\n    return s\nassert f(g())\n",
        "idx_generation": 2,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, letter='a', count=3) -> bool:\n    \"\"\"Check if a given letter appears a certain number of times in a string\"\"\"\n    return s.count(letter) == count\ndef g(letter='a', count=3):\n    return letter * count\nassert f(g())\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(counts: List[int], target_prob=0.0625) -> bool:\n    \"\"\"Suppose a list of m 2's and n -1's are permuted at random.\n    What is the probability that all of the cumulative sums are positive?\n    The goal is to find counts = [m, n] that make the probability of the ballot problem close to target_prob.\"\"\"\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob=0.0625):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-06:\n            return [m, n]\nassert f(g())\n",
        "idx_generation": 283,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(permutations: List[List[int]], length=3) -> bool:\n    \"\"\"Check if the given list of permutations contains all possible permutations of length n.\"\"\"\n    all_permutations = list(itertools.permutations(range(length)))\n    return set(permutations) == set(all_permutations)\n\ndef g(length=3):\n    return list(itertools.permutations(range(length)))\n\nassert f(g())\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that, when multiplied together, equals the target value.\"\"\"\n    return math.prod(numbers) == target\n\ndef g(target=100):\n    return [1, target]\nassert f(g())\n",
        "idx_generation": 106,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given an array of integers nums and an integer target, determine if a combination of four elements in the array exists such that their sum is equal to target.\"\"\"\n    def k_sum(nums, target, k):\n        if k == 2:\n            return two_sum(nums, target)\n        for i in range(len(nums)):\n            if i == 0 or nums[i] != nums[i-1]:\n                if k_sum(nums[i+1:], target-nums[i], k-1):\n                    return True\n        return False\n\n    def two_sum(nums, target):\n        seen = set()\n        for i in range(len(nums)):\n            if target - nums[i] in seen:\n                return True\n            seen.add(nums[i])\n        return False\n\n    nums.sort()\n    return k_sum(nums, target, 4)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 20\n\nassert f(*g())\n",
        "idx_generation": 81,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport pandas as pd\n\ndef f(df: pd.DataFrame, column='A', value=0) -> bool:\n    \"\"\"Check if all values in the specified column are equal to the given value\"\"\"\n    return (df[column] == value).all()\n\ndef g(column='A', value=0):\n    return pd.DataFrame({column: [value, value, value]})\n\nassert f(g())\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, days=7) -> bool:\n    \"\"\"Check if the given datetime is exactly one week (7 days) after the current date.\"\"\"\n    current_date = datetime.datetime.now().date()\n    return (dt.date() - current_date).days == days\n\ndef g(days=7):\n    current_date = datetime.datetime.now().date()\n    target_date = current_date + datetime.timedelta(days=days)\n    return datetime.datetime.combine(target_date, datetime.datetime.min.time())\n    \nassert f(g())\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Find a pair of numbers from the list that sums up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=50):\n    return [10, 20, 30, 40]\nassert f(g())\n",
        "idx_generation": 15,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subset of the given list that sums up to the target.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80]\nassert f(g())\n",
        "idx_generation": 17,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Find a pair of distinct elements in the array that sum up to the target sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 9]\n\nassert f(g())\n",
        "idx_generation": 56,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = n * (n**2 + 1) // 2\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n\n    # Check diagonals\n    diagonal_sum_1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum_2 = sum(matrix[i][n-i-1] for i in range(n))\n    if diagonal_sum_1 != target_sum or diagonal_sum_2 != target_sum:\n        return False\n\n    return True\n\ndef g():\n    matrix = [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a given number is a prime number in a list\"\"\"\n    return n in nums and all(n % i != 0 for i in range(2, int(n ** 0.5) + 1))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return next((n for n in nums if all(n % i != 0 for i in range(2, int(n ** 0.5) + 1))))\nassert f(g())\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=\"python\") -> bool:\n    \"\"\"Check if the string s is a palindrome and contains the target substring.\"\"\"\n    return s == s[::-1] and target in s\n\ndef g(target=\"python\"):\n    return target + target[::-1]\n\nassert f(g())\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, vowels='aeiou', target=3) -> bool:\n    \"\"\"Check if a string contains at least 'target' number of vowels.\"\"\"\n    return sum(1 for char in s if char.lower() in vowels) >= target\ndef g(vowels='aeiou', target=3):\n    return vowels * target\nassert f(g())\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: datetime, year=2022, month=12, day=25) -> bool:\n    \"\"\"Check if the given date is Christmas\"\"\"\n    return date.year == year and date.month == month and date.day == day\n\ndef g(year=2022, month=12, day=25):\n    return datetime(year, month, day)\n\nassert f(g())\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: list) -> bool:\n    \"\"\"Check if the list contains at least one odd number and one even number.\"\"\"\n    return any(x % 2 == 0 for x in lst) and any(x % 2 != 0 for x in lst)\n\ndef g():\n    \"\"\"Generate a list of 10 random integers between 1 and 20.\"\"\"\n    return random.sample(range(1, 21), 10)\n\nassert f(g())\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Find a square submatrix of size nxn in the given matrix that consists only of zeros\"\"\"\n    return any([all([matrix[i][j] == 0 for j in range(len(matrix[i]))]) for i in range(len(matrix))]) and n <= len(matrix) and n <= len(matrix[0])\ndef g(n=3):\n    return [[0]*n]*n\nassert f(g())\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if n is a perfect square and is also present in the list lst\"\"\"\n    return n in lst and int(n ** 0.5) ** 2 == n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return [x ** 2 for x in lst if int(x ** 0.5) ** 2 == x][0]\nassert f(g())\n",
        "idx_generation": 63,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if a string can be formed by concatenating words from a list\"\"\"\n    def dfs(s, words):\n        if len(s) == 0:\n            return True\n        for word in words:\n            if s.startswith(word):\n                if dfs(s[len(word):], words):\n                    return True\n        return False\n\n    return dfs(s, words)\n\ndef g(words=['apple', 'banana', 'cherry']):\n    return ''.join(words)\n\nassert f(g())\n",
        "idx_generation": 2,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=4, d=2) -> bool:\n    \"\"\"Check if the sum of the digits of a number is divisible by d\"\"\"\n    return sum(int(d) for d in str(n)) % d == 0\ndef g(m=4, d=2):\n    return int('1' * m)\nassert f(g())\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of nums whose product is equal to target\"\"\"\n    def find_combination(nums, target):\n        if target == 1:\n            return True\n        if len(nums) == 0:\n            return False\n        if nums[0] > target:\n            return find_combination(nums[1:], target)\n        return find_combination(nums[1:], target // nums[0]) or find_combination(nums[1:], target)\n    \n    return find_combination(nums, target)\n\ndef g(target=100):\n    return [2, 4, 5, 10, 20, 25, 50]\n\nassert f(g())\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=7, b=4, c=9) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c even integers)\"\"\"\n    return n + a == sum([b * (2*i) for i in range(c)])\ndef g(a=7, b=4, c=9):\n    return -a + sum([b * (2*i) for i in range(c)])\nassert f(g())\n",
        "idx_generation": 108,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value\"\"\"\n    return any((a + b == target for a in numbers for b in numbers))\ndef g(target=10):\n    return [1, target-1]\nassert f(g())\n",
        "idx_generation": 92,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find two numbers in a list that add up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=15):\n    nums = [3, 5, 10, 8, 2]\n    return nums\nassert f(g())\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: list) -> bool:\n    \"\"\"Check if the list contains both the minimum and maximum values\"\"\"\n    return min(lst) in lst and max(lst) in lst\n\ndef g(lst=[3, 5, 1, 7, 2]):\n    return lst\nassert f(g())\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, num_list=[2, 4, 6, 8, 10], target_sum=20) -> bool:\n    \"\"\"Find n such that there exists a subset of num_list that sums up to target_sum\"\"\"\n    return any(sum(subset) == target_sum for i in range(len(num_list) + 1) for subset in itertools.combinations(num_list, i))\ndef g(num_list=[2, 4, 6, 8, 10], target_sum=20):\n    return sum(num_list)\nassert f(g())\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(lst: list, n=2) -> bool:\n    \"\"\"Check if there exists a subset of the list whose sum is divisible by n.\"\"\"\n    return any(sum(subset) % n == 0 for k in range(len(lst)+1) for subset in itertools.combinations(lst, k))\n\ndef g(n=2):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 39,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=42) -> bool:\n    \"\"\"Check if a pair of integers in the list sums up to the target value.\"\"\"\n    return any(lst[i] + lst[j] == target for i in range(len(lst)) for j in range(i+1, len(lst)))\n\ndef g(target=42):\n    return list(range(1, target))\n\nassert f(g())\n",
        "idx_generation": 1,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=100, n=3) -> bool:\n    \"\"\"Find n numbers that sum up to the target value.\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(numbers, n))\ndef g(target=100, n=3):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "idx_generation": 70,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]) -> bool:\n    \"\"\"Determine if the given number n is a prime number.\"\"\"\n    return n in nums\ndef g(nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]):\n    return max(nums)\nassert f(g())\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Given a positive integer n, check if it is a power of k.\"\"\"\n    while n > 1:\n        if n % k != 0:\n            return False\n        n //= k\n    return True\ndef g(k=3):\n    i = 1\n    while True:\n        if f(i, k):\n            return i\n        i += 1\nassert f(g())\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=7, b=3) -> bool:\n    \"\"\"Check if x is a multiple of a and b.\"\"\"\n    return x % a == 0 and x % b == 0\ndef g(a=7, b=3):\n    return a * b\nassert f(g())\n",
        "idx_generation": 151,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if n % prime == 0:\n            return False\n    for i in range(31, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef g():\n    return 37\nassert f(g())\n",
        "idx_generation": 85,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subset of a list that adds up to the target value\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if len(nums) == 0:\n            return False\n        if nums[0] > target:\n            return subset_sum(nums[1:], target)\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\ndef g(target=0):\n    return [i for i in range(1, target+1)]\nassert f(g())\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(res: int, string=\"SolvingPuzzles\", n=7) -> bool:\n    \"\"\"Find the result of applying the following operation to string, n times: if the last letter is 's', remove\nthe 's', otherwise capitalize the last letter.\"\"\"\n    for i in range(n):\n        if string[-1] == 's':\n            string = string[:-1]\n        else:\n            string = string[:-1] + string[-1].capitalize()\n    return res == string\ndef g(string=\"SolvingPuzzles\", n=7):\n    for i in range(n):\n        if string[-1] == 's':\n            string = string[:-1]\n        else:\n            string = string[:-1] + string[-1].capitalize()\n    return string\nassert f(g())\n",
        "idx_generation": 7,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, string_len=5) -> bool:\n    \"\"\"Find a string of length n such that it is a palindrome\"\"\"\n    return str(n) == str(n)[::-1]\ndef g(string_len=5):\n    return int(\"9\" * string_len)\nassert f(g())\n",
        "idx_generation": 94,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(ans: List[List[int]], target=100) -> bool:\n    \"\"\"Find a list of pairs of integers where the sum of the pairs is equal to a given target number\"\"\"\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if a + b != target:\n            return False\n    return True\ndef g(target=100):\n    return [[i, target-i] for i in range(target//2)]\nassert f(g())\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that adds up to the given number n.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == n for r in range(len(nums)+1) for comb in combinations(nums, r))\ndef g(nums=[1, 2, 3, 4, 5]):\n    return sum(nums) // 2\nassert f(g())\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int, total=100) -> bool:\n    \"\"\"Find two numbers n and m such that their sum is equal to total.\"\"\"\n    return n + m == total\ndef g(total=100):\n    return (total - 50, 50)\nassert f(*g())\n",
        "idx_generation": 120,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=100):\n    return [50, 50]\nassert f(g())\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_len=3) -> bool:\n    \"\"\"Check if each row in a matrix has the same length as specified.\"\"\"\n    return all((len(row) == row_len for row in matrix))\ndef g(row_len=3):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\nassert f(g())\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers, find three numbers that sum up to a specific target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=100):\n    return [1, 2, target-3]\nassert f(g())\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there are two elements in a list that sum up to a given target.\"\"\"\n    return any((x + y == target_sum for x in lst for y in lst))\ndef g(target_sum=10):\n    return [1, target_sum - 1]\nassert f(g())\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, digits_sum=10) -> bool:\n    \"\"\"Check if a given number n has the sum of its digits equal to a specified value.\"\"\"\n    return sum(int(digit) for digit in str(n)) == digits_sum\n    \ndef g(digits_sum=10):\n    n = 0\n    while True:\n        digits = [int(digit) for digit in str(n)]\n        if sum(digits) == digits_sum:\n            return n\n        n += 1\n\nassert f(g())\n",
        "idx_generation": 21,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10, k=2) -> bool:\n    \"\"\"Given a list of integers and a target number, find if there exists a pair of numbers\n    in the list whose sum is equal to the target number.\n    \"\"\"\n    num_set = set(nums)\n    \n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    \n    return False\n\ndef g(target=10, k=2):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=15, b=25, c=10, d=20) -> bool:\n    \"\"\"Check if the given number is divisible by a, b, c, and d\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0 and n % d == 0\ndef g(a=15, b=25, c=10, d=20):\n    return a * b * c * d\nassert f(g())\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=15, b=10) -> bool:\n    \"\"\"Find the smallest n such that the sum of the first n terms of the arithmetic sequence is greater than or equal to 1000.\n    The arithmetic sequence starts with a and each subsequent term is increased by b.\n    Sample input:\n    a = 15, b = 10\n    Sample output:\n    45\n    The arithmetic sequence is: 15, 25, 35, 45, ...\n    The sum of the first 4 terms is 120, which is greater than 1000.\n    Therefore, n = 4 is the solution.\"\"\"\n    sum_of_sequence = (n/2)*(2*a + (n-1)*b)\n    return sum_of_sequence >= 1000\n\ndef g(a=15, b=10):\n    n = 1\n    while True:\n        sum_of_sequence = (n/2)*(2*a + (n-1)*b)\n        if sum_of_sequence >= 1000:\n            return n\n        n += 1\n\nassert f(g())\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=15) -> bool:\n    \"\"\"Check if there are two elements in arr that add up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nassert f(g())\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(number: int, a=50, b=60, c=70) -> bool:\n    \"\"\"Find a number that is divisible by a, b, and c.\"\"\"\n    return number % a == 0 and number % b == 0 and number % c == 0\ndef g(a=50, b=60, c=70):\n    return a * b * c\nassert f(g())\n",
        "idx_generation": 105,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: float, a=987654321) -> bool:\n    \"\"\"Find a positive number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** (-4) and x > 0\ndef g(a=987654321):\n    return a ** 0.5\nassert f(g())\n",
        "idx_generation": 108,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='world') -> bool:\n    \"\"\"Check if the substring is present in the given string\"\"\"\n    return substring in s\ndef g(substring='world'):\n    return 'Hello, {}'.format(substring)\nassert f(g())\n",
        "idx_generation": 30,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=4) -> bool:\n    \"\"\"Check if n is a Pythagorean triple (a^2 + b^2 = c^2)\"\"\"\n    return n ** 2 == a ** 2 + b ** 2\n\ndef g(a=3, b=4):\n    return (a ** 2 + b ** 2) ** 0.5\n\nassert f(g())\n",
        "idx_generation": 37,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int, target=10, operation='multiply') -> bool:\n    \"\"\"Perform a mathematical operation on the target number and return True if the result matches the given number.\"\"\"\n    if operation == 'multiply':\n        return target * target == num\n    elif operation == 'divide':\n        return target / target == num\n    elif operation == 'add':\n        return target + target == num\n    elif operation == 'subtract':\n        return target - target == num\n    elif operation == 'power':\n        return target ** target == num\n    elif operation == 'root':\n        return math.sqrt(target) == num\n    else:\n        return False\n\ndef g(target=10, operation='multiply'):\n    if operation == 'multiply':\n        return target * target\n    elif operation == 'divide':\n        return target / target\n    elif operation == 'add':\n        return target + target\n    elif operation == 'subtract':\n        return target - target\n    elif operation == 'power':\n        return target ** target\n    elif operation == 'root':\n        return math.sqrt(target)\n    else:\n        return 0\n\nassert f(g())\n",
        "idx_generation": 109,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=15, k=3) -> bool:\n    \"\"\"Find if there exists a combination of k numbers in nums that sum to target.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))\ndef g(target=15, k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(n: int, arr: list) -> bool:\n    \"\"\"Find if there exists a subset of the given list with sum equal to n.\"\"\"\n    for r in range(1, len(arr)+1):\n        for subset in itertools.combinations(arr, r):\n            if sum(subset) == n:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return 6\n\nassert f(g(), [1, 2, 3, 4, 5])\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=0) -> bool:\n    \"\"\"Check if the sum of all elements in the array equals the target value\"\"\"\n    return np.sum(arr) == target\n\ndef g(target=0):\n    return np.zeros((5, 5))\n\nassert f(g())\n",
        "idx_generation": 121,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers, find if there exists a triplet of numbers that sum up to the target\"\"\"\n    return any((a + b + c == target for i, a in enumerate(lst) for j, b in enumerate(lst[i+1:]) for c in lst[i+j+2:]))\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: list, target=50) -> bool:\n    \"\"\"Find two numbers in a list that add up to a target value\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(target=50):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9]\nassert f(g())\n",
        "idx_generation": 59,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in nums that sum up to target\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 64,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is present in the given string.\"\"\"\n    return substring in s\ndef g(substring='abc'):\n    return \"defghi\" + substring + \"jklmno\"\nassert f(g())\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains any duplicate numbers\"\"\"\n    return len(nums) == len(set(nums))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 115,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], a=10, b=100, count=5) -> bool:\n    \"\"\"Find a list of count or more different numbers each between a and b that are perfect squares\"\"\"\n    assert all((int(n**0.5)**2 == n and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a=10, b=100, count=5):\n    return [n for n in range(a, b + 1) if int(n**0.5)**2 == n]\nassert f(g())\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=100, b=200, c=300) -> bool:\n    \"\"\"Find n such that n is divisible by a, b, and c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=100, b=200, c=300):\n    return a * b * c\nassert f(g())\n",
        "idx_generation": 391,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by all given divisors\"\"\"\n    return all((n % d == 0 for d in divisors))\ndef g(divisors=[2, 3, 5]):\n    n = 1\n    for d in divisors:\n        n *= d\n    return n\nassert f(g())\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Given a list of numbers, find if there exists a pair of numbers whose sum is equal to the target sum.\"\"\"\n    return any(target_sum - num in numbers for num in numbers)\ndef g(target_sum=100):\n    return [50, 60, 70, 80]\nassert f(g())\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Given a matrix, find if there exists a path from top-left to bottom-right whose sum is equal to the target value\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    dp = [[False] * (target + 1) for _ in range(m + 1)]\n    dp[0][0] = True\n    for i in range(1, m + 1):\n        dp[i][0] = True\n    for j in range(1, n + 1):\n        dp[0][j] = True\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = dp[i - 1][j] or dp[i][j - 1]\n    return dp[m][n]\ndef g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())",
        "idx_generation": 143,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string contains a substring of length n that is a palindrome.\"\"\"\n    return any(s[i:i+n] == s[i:i+n][::-1] for i in range(len(s)-n+1))\n\ndef g(n=3):\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 39,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport math\n\ndef f(num: int) -> bool:\n    \"\"\"Check if the given number is a perfect square and divisible by 3.\"\"\"\n    return math.isqrt(num)**2 == num and num % 3 == 0\n\ndef g():\n    \"\"\"Generate a perfect square number divisible by 3.\"\"\"\n    num = random.randint(3, 10) * 3\n    return num**2\n\nassert f(g())\n",
        "idx_generation": 55,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Find s such that s concatenated with itself n times is a palindrome\"\"\"\n    return (s * n) == (s * n)[::-1]\ndef g(n=3):\n    return \"a\" * (2 * n - 1)\nassert f(g())\n",
        "idx_generation": 162,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, n=3) -> bool:\n    \"\"\"Find if there exists a combination of n numbers in the list that sum up to the target\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, n):\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=15):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 282,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=5, c=7) -> bool:\n    \"\"\"Check if a number is divisible by three different integers\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=3, b=5, c=7):\n    return a * b * c\nassert f(g())\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: int, a=5, b=10) -> bool:\n    \"\"\"Check if x is within the range of a and b (inclusive).\"\"\"\n    return x >= a and x <= b\n\ndef g(a=5, b=10):\n    return random.randint(a, b)\n\nassert f(g())\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=5) -> bool:\n    \"\"\"Check if a list contains n consecutive integers\"\"\"\n    return sorted(x) == list(range(min(x), min(x)+n))\ndef g(n=5):\n    return list(range(n, 2*n))\nassert f(g())\n",
        "idx_generation": 68,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=0):\n    return [-1, 3, 5, 2, -4, 0]\n\nassert f(g())\n",
        "idx_generation": 80,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=100) -> bool:\n    \"\"\"Find two distinct numbers in the range from 1 to m whose sum is equal to n\"\"\"\n    nums = set()\n    for i in range(1, m+1):\n        if n - i in nums:\n            return True\n        else:\n            nums.add(i)\n    return False\ndef g(m=100):\n    return m + 1\nassert f(g())\n",
        "idx_generation": 57,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=42) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=42):\n    return [1, target_sum - 1]\n\nassert f(g())\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, days=7, hours=0, minutes=0, seconds=0) -> bool:\n    \"\"\"Check if a datetime is exactly a certain number of days, hours, minutes, and seconds away from a given reference datetime\"\"\"\n    reference_dt = datetime.datetime(2022, 1, 1, 0, 0, 0)\n    target_dt = reference_dt + datetime.timedelta(days=days, hours=hours, minutes=minutes, seconds=seconds)\n    return dt == target_dt\ndef g(days=7, hours=0, minutes=0, seconds=0):\n    reference_dt = datetime.datetime(2022, 1, 1, 0, 0, 0)\n    return reference_dt + datetime.timedelta(days=days, hours=hours, minutes=minutes, seconds=seconds)\nassert f(g())\n",
        "idx_generation": 76,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr: list, k: int) -> bool:\n    \"\"\"Given a list of integers, find if there exists a subarray of length k in the list whose sum is equal to n.\"\"\"\n    for i in range(len(arr) - k + 1):\n        sum = 0\n        for j in range(i, i+k):\n            sum += arr[j]\n        if sum == n:\n            return True\n    return False\n\ndef g(arr=[2, 4, -2, 1, 3], k=3):\n    return arr\n\nassert f(3, g(), 3)\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, li=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if the product of n and any element in the list is divisible by 12.\"\"\"\n    for num in li:\n        if n * num % 12 == 0:\n            return True\n    return False\ndef g(li=[2, 4, 6, 8, 10]):\n    return 12 // li[0]\nassert f(g())\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target=10) -> bool:\n    \"\"\"Check if the sum of all elements in the list is equal to the target value\"\"\"\n    return sum(x) == target\ndef g(target=10):\n    return [2, 3, 5]\nassert f(g())\n",
        "idx_generation": 115,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if it is possible to form the given target number by combining the given list of numbers using addition or subtraction.\n    Each number in the list can be used only once.\n    Sample input:\n    [4, 5, 6, 7, 8]\n    Sample output:\n    True\n    It is possible to form the target number 20 by adding 4, 5, 6, and 5 and subtracting 7 and 8.\"\"\"\n    def backtrack(nums, target, curr_sum, index):\n        if curr_sum == target:\n            return True\n        if index >= len(nums):\n            return False\n        return backtrack(nums, target, curr_sum + nums[index], index + 1) or backtrack(nums, target, curr_sum - nums[index], index + 1)\n\n    return backtrack(nums, target, 0, 0)\n\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 194,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if a given character is present in the string\"\"\"\n    return char in s\ndef g(char='a'):\n    return char\nassert f(g())\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, target=2) -> bool:\n    \"\"\"Check if the given number is a power of the target number\"\"\"\n    return math.log(n, target).is_integer()\ndef g(target=2):\n    return target ** 10\nassert f(g())\n",
        "idx_generation": 63,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: float, digits=3) -> bool:\n    \"\"\"Check if the given number has the same first 'digits' digits after squaring it.\"\"\"\n    return str(int(num**2))[:digits] == str(int(num))[:digits]\n\ndef g(digits=3):\n    num = 10 ** (digits - 1)\n    return num\n\nassert f(g())\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(num: int, nums=[4, 3, 2, 1], target=10) -> bool:\n    \"\"\"Determine if it is possible to find a combination of numbers from the given list that adds up to the target number.\"\"\"\n    from itertools import combinations\n    for r in range(1, len(nums) + 1):\n        for combination in combinations(nums, r):\n            if sum(combination) == target:\n                return True\n    return False\ndef g(nums=[4, 3, 2, 1], target=10):\n    from itertools import combinations\n    for r in range(1, len(nums) + 1):\n        for combination in combinations(nums, r):\n            if sum(combination) == target:\n                return combination\n    return []\nassert f(g())\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: list) -> bool:\n    \"\"\"Find a list of numbers where every element is divisible by 3.\"\"\"\n    return all(num % 3 == 0 for num in nums)\n\ndef g():\n    return [3, 6, 9, 12]\n\nassert f(g())\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, prime_factors=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a number is a product of any two prime factors in the list.\"\"\"\n    for i in range(len(prime_factors)):\n        for j in range(i, len(prime_factors)):\n            if prime_factors[i] * prime_factors[j] == n:\n                return True\n    return False\ndef g(prime_factors=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return prime_factors[5] * prime_factors[7]\nassert f(g())\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g(target=100):\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return nums\nassert f(g())\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=0) -> bool:\n    \"\"\"Find a subarray in the given list such that the sum of its elements is equal to k\"\"\"\n    return any(sum(arr[i:j]) == k for i in range(len(arr)) for j in range(i+1, len(arr)+1))\ndef g(k=0):\n    return [k]\nassert f(g())\n",
        "idx_generation": 99,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Given a string s, check if the last n characters are a repetition of the first n characters.\nSample Input:\ns = \"abcabcabc\"\nSample Output:\nTrue\"\"\"\n    return s[-n:] == s[:n]\ndef g(n=3):\n    s = \"abcabcabc\"\n    return s\nassert f(g())\n",
        "idx_generation": 4,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Find a list of numbers where the sum of the numbers is equal to a target value\"\"\"\n    return sum(lst) == target\n\ndef g(target=100):\n    return [1, 2, 3, 4, 5, target-15]\n\nassert f(g())\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there are k consecutive odd numbers in a list\"\"\"\n    for i in range(len(nums)-k+1):\n        if all(x % 2 != 0 for x in nums[i:i+k]):\n            return True\n    return False\ndef g(k=3):\n    nums = [1, 3, 5, 7, 9, 2, 4, 6]\n    return nums\nassert f(g())\n",
        "idx_generation": 134,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if the given number is the product of any two distinct prime numbers in the list.\"\"\"\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if primes[i] * primes[j] == num:\n                return True\n    return False\n\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return primes[3] * primes[7]\n\nassert f(g())\n",
        "idx_generation": 83,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, li=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if n is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(li=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    for num in li:\n        if f(num):\n            return num\n\nassert f(g())\n",
        "idx_generation": 420,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if the number n is a multiple of m.\"\"\"\n    return n % m == 0\n\ndef g(n: int, m: int):\n    return n, m\n\nassert f(*g(15, 3))\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=123456789, b=987654321, c=111111111, d=999999999, e=1000000000) -> bool:\n    \"\"\"Find the number from the given list which is divisible by n\"\"\"\n    return any([num % n == 0 for num in [a, b, c, d, e]])\ndef g(a=123456789, b=987654321, c=111111111, d=999999999, e=1000000000):\n    numbers = [a, b, c, d, e]\n    for num in numbers:\n        if num % 2 == 0:\n            return num\n    return None\nassert f(g())\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str, s3: str) -> bool:\n    \"\"\"Check if the characters in s3 can be formed by interleaving characters from s1 and s2\"\"\"\n    if len(s1) + len(s2) != len(s3):\n        return False\n    dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n    dp[0][0] = True\n    for i in range(len(s1) + 1):\n        for j in range(len(s2) + 1):\n            if i > 0 and s1[i-1] == s3[i+j-1]:\n                dp[i][j] |= dp[i-1][j]\n            if j > 0 and s2[j-1] == s3[i+j-1]:\n                dp[i][j] |= dp[i][j-1]\n    return dp[-1][-1]\ndef g(s1='abc', s2='def', s3='adbecf'):\n    return s1, s2, s3\nassert f(*g())\n",
        "idx_generation": 202,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(result: int, num=123456789) -> bool:\n    \"\"\"Check if a number is a palindrome\"\"\"\n    return result == int(str(num)[::-1])\ndef g(num=123456789):\n    return int(str(num)[::-1])\nassert f(g())\n",
        "idx_generation": 59,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find the nth Fibonacci number.\"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a == 55\ndef g():\n    return 10\nassert f(g())\n",
        "idx_generation": 64,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Find a string that contains n consecutive occurrences of the letter 'a'.\"\"\"\n    return 'a' * n in s\ndef g(n=3):\n    import random\n    return 'a' * (random.randint(1, 10) * n)\nassert f(g())\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(arr: list, n=3, target=10) -> bool:\n    \"\"\"Find n numbers in an array that sum up to a target number\"\"\"\n    from itertools import combinations\n    for combo in combinations(arr, n):\n        if sum(combo) == target:\n            return True\n    return False\ndef g(n=3, target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, nums=[9, 2, 6, 8, 7, 5, 1, 4, 3], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sum up to a target value\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums=[9, 2, 6, 8, 7, 5, 1, 4, 3], target=10):\n    return nums\nassert f(g())\n",
        "idx_generation": 0,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10, length=4) -> bool:\n    \"\"\"Find a subarray of length 'length' whose sum is equal to the target value\"\"\"\n    return any(sum(nums[i:i+length]) == target for i in range(len(nums)-length+1))\ndef g(target=10, length=4):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=10) -> bool:\n    \"\"\"Find two numbers in the matrix that sum up to the target_sum\"\"\"\n    for row in matrix:\n        for num in row:\n            if target_sum - num in row:\n                return True\n    return False\n\ndef g(target_sum=10):\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find the three numbers in the list that multiply to the target value\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 3):\n        if combo[0] * combo[1] * combo[2] == target:\n            return True\n    return False\ndef g(nums=[10, 5, 2, 4, 20]):\n    return nums\nassert f(g())\n",
        "idx_generation": 168,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Find a subsequence in the list that sums up to the target value\"\"\"\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if sum(lst[i:j+1]) == target:\n                return True\n    return False\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 99,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='apple') -> bool:\n    \"\"\"Check if any of the words in the list is a permutation of the target word.\"\"\"\n    return any(sorted(word) == sorted(target) for word in words)\ndef g(target='apple'):\n    return ['papel', 'banana', 'orange']\nassert f(g())\n",
        "idx_generation": 13,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(items: List[str], target_length=5) -> bool:\n    \"\"\"Find a combination of items whose combined length is equal to target_length.\"\"\"\n    from itertools import combinations\n    return any(len(''.join(c)) == target_length for r in range(1, len(items) + 1) for c in combinations(items, r))\ndef g(target_length=5):\n    return ['apple', 'banana', 'cherry', 'date']\nassert f(g())\n",
        "idx_generation": 70,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Given a list of words, return True if all words start with the specified prefix, False otherwise.\"\"\"\n    return all((word.startswith(prefix) for word in words))\ndef g(prefix='pre'):\n    return ['prefix', 'preparation', 'prejudice', 'present']\nassert f(g())\n",
        "idx_generation": 134,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=5, y=10) -> bool:\n    \"\"\"Find the smallest integer n such that x^n is greater than y! (y factorial)\"\"\"\n    return math.pow(x, n) > math.factorial(y)\n\ndef g(x=5, y=10):\n    n = 0\n    while math.pow(x, n) <= math.factorial(y):\n        n += 1\n    return n\n\nassert f(g())\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(number: int, prime=True) -> bool:\n    \"\"\"Check if a number is prime or not.\"\"\"\n    if number < 2:\n        return False\n    if number == 2:\n        return True\n    if number % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(number)) + 1, 2):\n        if number % i == 0:\n            return False\n    return True\n\ndef g(number=7, prime=True):\n    return number\n\nassert f(g())\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_len=10) -> bool:\n    \"\"\"Check if the given string has length equal to the target_len\"\"\"\n    return len(s) == target_len\n\ndef g(target_len=10):\n    return \"HelloWorld\"\n\nassert f(g())\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_rows=3, target_cols=3) -> bool:\n    \"\"\"Check if there exists a target submatrix of size target_rows x target_cols in the given matrix\"\"\"\n    for i in range(len(matrix) - target_rows + 1):\n        for j in range(len(matrix[0]) - target_cols + 1):\n            submatrix = [row[j:j+target_cols] for row in matrix[i:i+target_rows]]\n            if all(all(subrow) for subrow in submatrix):\n                return True\n    return False\n\ndef g(target_rows=3, target_cols=3):\n    return [[1] * target_cols] * target_rows\n\nassert f(g())\n",
        "idx_generation": 141,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Check if it is possible to obtain the target number using all four numbers in nums\"\"\"\n    ops = ['+', '-', '*', '/']\n\n    def dfs(nums):\n        if len(nums) == 1:\n            return abs(nums[0] - target) < 1e-6\n\n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                if i != j:\n                    new_nums = [nums[k] for k in range(len(nums)) if k != i and k != j]\n\n                    for op in ops:\n                        if op == '+':\n                            new_nums.append(nums[i] + nums[j])\n                        elif op == '-':\n                            new_nums.append(nums[i] - nums[j])\n                        elif op == '*':\n                            new_nums.append(nums[i] * nums[j])\n                        elif op == '/':\n                            if nums[j] != 0:\n                                new_nums.append(nums[i] / nums[j])\n\n                        if dfs(new_nums):\n                            return True\n                        new_nums.pop()\n\n        return False\n\n    return dfs(nums)\n\n\ndef g(nums=[4, 7, 8, 12]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 220,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(str_list: List[str], target='python') -> bool:\n    \"\"\"Find the index of the target string in the list\"\"\"\n    return str_list.index(target) >= 0\ndef g(target='python'):\n    return ['java', 'c++', 'python', 'javascript']\nassert f(g())\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, target=10) -> bool:\n    \"\"\"Find a number whose square root is equal to the target value\"\"\"\n    return math.isclose(math.sqrt(n), target)\n    \ndef g(target=10):\n    return target ** 2\n\nassert f(g())\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, char='a', count=3) -> bool:\n    \"\"\"Check if the given character appears at least the specified number of times in the string\"\"\"\n    return string.count(char) >= count\ndef g(string=\"banana\", char='a', count=3):\n    return string\nassert f(g())\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Find a combination of four numbers from the list that can be used with basic arithmetic operations (+, -, *, /) to make the target number\"\"\"\n    from itertools import permutations, product\n    def operate(a, b, op):\n        if op == '+':\n            return a + b\n        elif op == '-':\n            return a - b\n        elif op == '*':\n            return a * b\n        elif op == '/':\n            return a / b\n    for perm in permutations(nums, 4):\n        for ops in product(['+', '-', '*', '/'], repeat=3):\n            try:\n                result = operate(operate(operate(perm[0], perm[1], ops[0]), perm[2], ops[1]), perm[3], ops[2])\n                if result == target:\n                    return True\n            except ZeroDivisionError:\n                continue\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6]):\n    return nums\nassert f(g())\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"Check if a string has at least k distinct characters.\"\"\"\n    return len(set(s)) >= k\n\ndef g(k=2):\n    return \"abcdefghijklmnopqrstuvwxyz\"[:k]\n\nassert f(g()) == True",
        "idx_generation": 4,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n: int = 3) -> bool:\n    \"\"\"Check if the given list contains a subsequence of length n that is sorted in non-decreasing order.\"\"\"\n    for i in range(len(lst) - n + 1):\n        if lst[i:i+n] == sorted(lst[i:i+n]):\n            return True\n    return False\ndef g(n: int = 3):\n    return list(range(1, n+1))\nassert f(g(4))\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, days=7) -> bool:\n    \"\"\"Given a date and an integer representing the number of days, determine if the resulting date after adding the number of days is in the future.\"\"\"\n    return date + datetime.timedelta(days=days) > datetime.date.today()\ndef g(days=7):\n    return datetime.date.today() + datetime.timedelta(days=days)\nassert f(g())\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find a pair of distinct numbers in the given array that sums up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=100):\n    return [1, target-1]\nassert f(g())\n",
        "idx_generation": 261,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=5, s=100) -> bool:\n    \"\"\"Construct a list of n consecutive integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n=5, s=100):\n    start = (s - (n-1)*n//2) // n\n    return [start + i for i in range(n)]\nassert f(g())\n",
        "idx_generation": 101,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, chars=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a string contains all vowels in a given list.\"\"\"\n    return all((c in s for c in chars))\ndef g(chars=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(chars)\nassert f(g())\n",
        "idx_generation": 14,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc', n=3) -> bool:\n    \"\"\"Check if the substring appears exactly n times in the string\"\"\"\n    return s.count(substr) == n\ndef g(substr='abc', n=3):\n    return substr * n\nassert f(g())\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exist two numbers in the list that sum up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 147,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=10, y=20) -> bool:\n    \"\"\"Check if a number is a perfect square and lies within a given range\"\"\"\n    return math.isqrt(n)**2 == n and x <= n <= y\n\ndef g(x=10, y=20):\n    for i in range(x, y+1):\n        if math.isqrt(i)**2 == i:\n            return i\n\nassert f(g()) == True",
        "idx_generation": 94,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a matrix where the sum of each row and column is equal to the target\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return all(row_sum == target for row_sum in row_sums) and all(col_sum == target for col_sum in col_sums)\ndef g(target=10):\n    matrix = [[1] * target for _ in range(target)]\n    return matrix\nassert f(g())\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], x=250, y=500, count=10) -> bool:\n    \"\"\"Find a list of count or more numbers between x and y that are divisible by both 3 and 5\"\"\"\n    assert all((n % 3 == 0 and n % 5 == 0 for n in nums))\n    return len(nums) >= count\ndef g(x=250, y=500, count=10):\n    return [n for n in range(x, y + 1) if n % 3 == 0 and n % 5 == 0]\nassert f(g())\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in a list that add up to a specific target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=10):\n    return [3, 7, 5, 2, 8, 4]\nassert f(g())\n",
        "idx_generation": 170,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: list, target=10) -> bool:\n    \"\"\"Given a list x with integers, find a subset of x that sums up to the target value.\n    Sample Input:\n    x = [1, 2, 3, 4, 5]\n    Sample Output:\n    [3, 5]\"\"\"\n    def subset_sum(numbers, target, partial=[]):\n        s = sum(partial)\n\n        if s == target:\n            return partial\n\n        if s > target:\n            return None\n\n        for i in range(len(numbers)):\n            n = numbers[i]\n            remaining = numbers[i+1:]\n            result = subset_sum(remaining, target, partial + [n])\n            if result:\n                return result\n\n        return None\n\n    return subset_sum(x, target) is not None\n\ndef g(x=[1, 2, 3, 4, 5], target=10):\n    return random.sample(x, random.randint(1, len(x)))\n\nassert f(g())",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, dictionary={'a': 1, 'b': 2, 'c': 3}) -> bool:\n    \"\"\"Check if all characters in the string are keys in the dictionary\"\"\"\n    return all(char in dictionary for char in x)\ndef g(dictionary={'a': 1, 'b': 2, 'c': 3}):\n    return \"\".join(dictionary.keys())\nassert f(g())\n",
        "idx_generation": 71,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=5) -> bool:\n    \"\"\"Check if the sum of the first n terms of the arithmetic sequence with first term a and common difference b is divisible by n\"\"\"\n    return (n / 2) * (2 * a + (n - 1) * b) % n == 0\n\ndef g(a=2, b=5):\n    n = 1\n    while True:\n        sum_terms = ((n / 2) * (2 * a + (n - 1) * b))\n        if sum_terms % n == 0:\n            break\n        n += 1\n    return n\n\nassert f(g())\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the length of s is greater than n\"\"\"\n    return len(s) > n\ndef g(n=3):\n    s = \"Hello World!\"\n    return s\nassert f(g())\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport itertools\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subset of k elements in the given array where the sum of the elements is divisible by k\"\"\"\n    n = len(arr)\n    for i in range(1, n+1):\n        subsets = itertools.combinations(arr, i)\n        for subset in subsets:\n            if sum(subset) % k == 0:\n                return True\n    return False\n\ndef g(size=5, k=3):\n    arr = [random.randint(1, 10) for _ in range(size)]\n    return arr, k\n\nassert f(*g())\n",
        "idx_generation": 497,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, even_count=50) -> bool:\n    \"\"\"Check if the count of even numbers up to a given number is equal to a specific value\"\"\"\n    return len([num for num in range(1, n + 1) if num % 2 == 0]) == even_count\n\ndef g(n=100, even_count=50):\n    return n\nassert f(g())\n",
        "idx_generation": 5,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=0) -> bool:\n    \"\"\"Check if there exists a subset of numbers that adds up to the target_sum\"\"\"\n    def helper(numbers, target_sum, i):\n        if target_sum == 0:\n            return True\n        if i >= len(numbers):\n            return False\n        if numbers[i] > target_sum:\n            return helper(numbers, target_sum, i+1)\n        return helper(numbers, target_sum - numbers[i], i+1) or helper(numbers, target_sum, i+1)\n    return helper(numbers, target_sum, 0)\ndef g(numbers=[1, 2, 3, 4, 5], target_sum=14):\n    return numbers, target_sum\nassert f(g())\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray) -> bool:\n    \"\"\"Check if a given matrix is symmetric.\"\"\"\n    return np.array_equal(matrix, matrix.T)\n    \ndef g():\n    return np.array([[1, 2, 3], [2, 4, 5], [3, 5, 6]])\nassert f(g())\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target_sum=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array that sum up to the target_sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=50):\n    return np.array([10, 20, 30, 40, target_sum - 100])\n\nassert f(g())\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(stamps: List[int], target=10, max_stamps=4, options=[1, 2, 5, 10, 20]) -> bool:\n    \"\"\"Find a selection of at most max_stamps stamps whose total worth is the target value.\"\"\"\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target=10, max_stamps=4, options=[1, 2, 5, 10, 20]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 101,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='fix') -> bool:\n    \"\"\"Find a word in the list that starts with the prefix and ends with the suffix\"\"\"\n    for word in words:\n        if word.startswith(prefix) and word.endswith(suffix):\n            return True\n    return False\n\ndef g(prefix='pre', suffix='fix'):\n    words = ['prefix', 'suffix', 'infix', 'postfix']\n    return words\n\nassert f(g())\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], threshold=100) -> bool:\n    \"\"\"Check if the sum of any three numbers in the list is greater than the threshold\"\"\"\n    from itertools import combinations\n    return any(sum(comb) > threshold for comb in combinations(arr, 3))\ndef g(threshold=100):\n    arr = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return arr\nassert f(g())\n",
        "idx_generation": 80,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Find two numbers in the array that add up to the target sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=10):\n    return [2, 8, 5, 3, 1, 6, 9]\nassert f(g())\n",
        "idx_generation": 154,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10**9+7) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    return all(n % i != 0 for i in range(2, int(n**0.5) + 1))\ndef g():\n    return 997\nassert f(g())\n",
        "idx_generation": 115,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=5, b=10) -> bool:\n    \"\"\"Find n such that n is a prime number between a and b\"\"\"\n    if n < a or n > b:\n        return False\n    return all(n % i != 0 for i in range(2, int(math.sqrt(n)) + 1))\n    \ndef g(a=5, b=10):\n    for n in range(a, b+1):\n        if f(n):\n            return n\n    return -1\n\nassert f(g())\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=5, b=10) -> bool:\n    \"\"\"Check if x is within the range of a and b (inclusive)\"\"\"\n    return a <= x <= b\ndef g(a=5, b=10):\n    return (a + b) // 2\nassert f(g())\n",
        "idx_generation": 260,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Check if the given number is present in the list.\"\"\"\n    return n in nums\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return nums[0]\nassert f(g())\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there exists a path in the matrix that sums up to the target value.\"\"\"\n    def dfs(row, col, curr_sum):\n        if row < 0 or row >= len(matrix) or col < 0 or col >= len(matrix[0]):\n            return False\n        if curr_sum + matrix[row][col] == target:\n            return True\n        return dfs(row + 1, col, curr_sum + matrix[row][col]) or dfs(row, col + 1, curr_sum + matrix[row][col])\n    \n    return dfs(0, 0, 0)\n\ndef g(target=10):\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 248,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Given a string, return True if the string contains at least n consecutive vowels (a, e, i, o, u), and False otherwise.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    max_count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 0\n    return max_count >= n\ndef g(n=5):\n    s = \"aeiou\" * (n-1) + \"b\"\n    return s\nassert f(g())\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, year=2022, month=1, day=1) -> bool:\n    \"\"\"Check if the given date is in the future.\"\"\"\n    return dt > datetime.datetime(year, month, day)\n    \ndef g(year=2022, month=1, day=1):\n    return datetime.datetime(year + 1, month, day)\n\nassert f(g())\n",
        "idx_generation": 108,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(dates: List[datetime], format_string='%Y-%m-%d') -> bool:\n    \"\"\"Check if all dates in the list have the same day of the week\"\"\"\n    weekdays = {date.strftime(format_string): date.weekday() for date in dates}\n    return len(set(weekdays.values())) == 1\ndef g(format_string='%Y-%m-%d'):\n    return [datetime.strptime('2023-01-01', format_string), \n            datetime.strptime('2023-01-08', format_string), \n            datetime.strptime('2023-01-15', format_string)]\nassert f(g())\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(dates: list, target_date=datetime.datetime(2022, 1, 1)) -> bool:\n    \"\"\"Check if the target_date is in the list of dates\"\"\"\n    return target_date in dates\n\ndef g(target_date=datetime.datetime(2022, 1, 1)):\n    dates = [target_date - datetime.timedelta(days=i) for i in range(10)]\n    dates.append(target_date)\n    dates.extend([target_date + datetime.timedelta(days=i) for i in range(10)])\n    return dates\n\nassert f(g())\n",
        "idx_generation": 44,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Given a list of integers, find two numbers that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    return [10, 15, 5]\n\nassert f(g())\n",
        "idx_generation": 5,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subset of numbers in the array whose sum is equal to the target\"\"\"\n    n = len(arr)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < arr[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target]\ndef g(target=10):\n    return [2, 3, 5, 6, 8]\nassert f(g())\n",
        "idx_generation": 407,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find a combination of elements that adds up to the target value.\"\"\"\n    for r in range(1, len(lst)+1):\n        for combo in combinations(lst, r):\n            if sum(combo) == target:\n                return True\n    return False\n\ndef g(target=10):\n    lst = [1, 2, 3, 4, 5]\n    return lst\n\nassert f(g())\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100, k=3) -> bool:\n    \"\"\"Given a list of integers and a target number, find if there exists a k-length subsequence\n    of the list whose sum is equal to the target number.\n    \"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    \n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    \n    return dp[n][target]\n\ndef g(target=100, k=3):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, max_length=3) -> bool:\n    \"\"\"Given a list of integers, find a subsequence of at most max_length elements whose sum is equal to the target value.\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for n in range(1, max_length + 1) for c in combinations(nums, n))\ndef g(target=10, max_length=3):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 31,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[List[int]], target=5) -> bool:\n    \"\"\"Given a list of lists of integers, find any sublist of length 3 where the sum of the first two integers is equal to the third integer.\nSample Input:\n`[[1,2,3],[4,5,9],[6,7,13]]`\nSample Output:\n`[4,5,9]`\"\"\"\n    return any((lst[i][0] + lst[i][1] == lst[i][2] for i in range(len(lst))))\ndef g(target=5):\n    return [[1, 2, 3], [4, 5, 9], [6, 7, 13]]\nassert f(g())\n",
        "idx_generation": 107,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: list, y: list, a=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if x and y have the same elements, regardless of order\"\"\"\n    return set(x) == set(y)\n\ndef g(a=[1, 2, 3, 4, 5, 6]):\n    return a\n\nassert f(g(), [3, 2, 1, 6, 5, 4])\n",
        "idx_generation": 187,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if num < 2:\n        return False\n    for prime in primes:\n        if num % prime == 0:\n            return False\n    return True\ndef g():\n    num = 31\n    return num\nassert f(g())\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], x=10) -> bool:\n    \"\"\"Check if all elements of a list are divisible by a number\"\"\"\n    return all(num % x == 0 for num in lst)\ndef g(x=10):\n    return [num * x for num in range(1, 11)]\nassert f(g())\n",
        "idx_generation": 474,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=20, b=30, c=40) -> bool:\n    \"\"\"Check if x is a multiple of a or b or c\"\"\"\n    return x % a == 0 or x % b == 0 or x % c == 0\ndef g(a=20, b=30, c=40):\n    return a * b * c\nassert f(g())\n",
        "idx_generation": 268,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers nums and an integer target, find two distinct indices i and j in the list such that\nnums[i] + nums[j] == target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[2, 4, 6, 8, 10], target=14):\n    return nums, target\nassert f(*g())\n",
        "idx_generation": 178,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=30) -> bool:\n    \"\"\"Given a list of integers, find a subset of the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, target_sum, i, curr_sum):\n        if curr_sum == target_sum:\n            return True\n        if i == len(nums):\n            return False\n        include = subset_sum(nums, target_sum, i+1, curr_sum+nums[i])\n        exclude = subset_sum(nums, target_sum, i+1, curr_sum)\n        return include or exclude\n    \n    return subset_sum(nums, target_sum, 0, 0)\n\ndef g(target_sum=30):\n    return [10, 5, 15, 20, 25]\n\nassert f(g())\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t='python') -> bool:\n    \"\"\"Find s such that s is a rotation of t\"\"\"\n    return len(s) == len(t) and s in (t + t)\ndef g(t='python'):\n    return t[-1] + t[:-1]\nassert f(g())\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int, divisor=3, power=2) -> bool:\n    \"\"\"Check if the square of a number is divisible by another number\"\"\"\n    return (num**power) % divisor == 0\n\ndef g(divisor=3, power=2):\n    num = int(math.sqrt(divisor)) + 1\n    while True:\n        if f(num, divisor, power):\n            return num\n        num += 1\nassert f(g())\n",
        "idx_generation": 110,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=456, x=3, y=5) -> bool:\n    \"\"\"Check if s contains the same number of occurrences of x and y\"\"\"\n    return s.count(str(x)) == s.count(str(y))\ndef g(n=456, x=3, y=5):\n    s = str(x) * n + str(y) * n\n    return s\nassert f(g())\n",
        "idx_generation": 355,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, count=3, length=10) -> bool:\n    \"\"\"Check if a string has at least a certain number of substrings of a certain length.\"\"\"\n    return s.count('a'*length) >= count\ndef g(count=3, length=10):\n    return 'a'*count*length\nassert f(g())\n",
        "idx_generation": 60,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='abc') -> bool:\n    \"\"\"Check if the given string is a permutation of the target string.\"\"\"\n    return sorted(list(s)) == sorted(list(target))\n\ndef g(target='abc'):\n    return 'cba'\n\nassert f(g())\n",
        "idx_generation": 5,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that adds up to a target value.\"\"\"\n    def find_combination(idx, current_sum):\n        if current_sum == target:\n            return True\n        if idx >= len(nums) or current_sum > target:\n            return False\n        if find_combination(idx+1, current_sum + nums[idx]):\n            return True\n        if find_combination(idx+1, current_sum):\n            return True\n        return False\n    return find_combination(0, 0)\ndef g(nums=[20, 30, 40, 50, 60]):\n    return nums\nassert f(g())\n",
        "idx_generation": 420,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(nums=[10, 20, 30, 40, 50]):\n    return nums\nassert f(g())\n",
        "idx_generation": 277,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: list, target_sum=100) -> bool:\n    \"\"\"Check if there is a subset in the list that sums up to the target_sum\"\"\"\n    n = len(lst)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if j < lst[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - lst[i - 1]]\n    return dp[n][target_sum]\n\ndef g(target_sum=100):\n    lst = [random.randint(1, 50) for _ in range(20)]\n    return lst\n\nassert f(g())\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char_count=5, word_count=3) -> bool:\n    \"\"\"Check if a string contains at least char_count number of a specific character and word_count number of a specific word.\"\"\"\n    return s.count('a') >= char_count and s.count('hello') >= word_count\ndef g(char_count=5, word_count=3):\n    return 'a' * char_count + ' hello' * word_count\nassert f(g())\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, m=2) -> bool:\n    \"\"\"Check if a given string contains a substring that appears at least n times.\"\"\"\n    count = 0\n    for i in range(len(s)-m+1):\n        if s[i:i+m] == s[i+m:i+2*m]:\n            count += 1\n            if count >= n:\n                return True\n    return False\ndef g(n=3, m=2):\n    return \"abababab\"\nassert f(g())\n",
        "idx_generation": 115,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if all words in the list have the given prefix.\"\"\"\n    return all(word.startswith(prefix) for word in words)\ndef g(prefix='pre'):\n    return [prefix + str(i) for i in range(1, 6)]\nassert f(g(), prefix='pre')\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a given number n can be expressed as a sum of two prime numbers.\"\"\"\n    return any((n - p in primes for p in primes))\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return sum(primes[:2])\nassert f(g())\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=8, c=2) -> bool:\n    \"\"\"Determine if n is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if (n % i) == 0:\n            return False\n    return True\ndef g(a=3, b=8, c=2):\n    return a\nassert f(g())\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a number n is divisible by all elements in nums\"\"\"\n    return all(n % num == 0 for num in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    n = 2520\n    return n\nassert f(g())\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: int, y: int, z: int, target: int = 10) -> bool:\n    \"\"\"Check if the sum of three numbers is equal to the target\"\"\"\n    return x + y + z == target\n\ndef g(target: int = 10):\n    x = random.randint(1, 10)\n    y = random.randint(1, 10)\n    z = target - x - y\n    return x, y, z\n\nassert f(*g())\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, x=3, y=5, z=8) -> bool:\n    \"\"\"Check if a number can be formed using only x, y, and z.\nThe number can be formed by repeating x, y, and z any number of times, in any order.\n\"\"\"\n    if num == 0:\n        return True\n    if num < 0:\n        return False\n    return f(num-x) or f(num-y) or f(num-z)\ndef g(x=3, y=5, z=8):\n    return x + y + z\nassert f(g())\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g(s: str):\n    return s[::-1]\n\nassert f(g(\"racecar\"))\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=15) -> bool:\n    \"\"\"Given a list of integers and a target sum, find if there exists a subset of the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if target < 0 or len(nums) == 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=15):\n    return nums\nassert f(g())\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='hello', count=3) -> bool:\n    \"\"\"Find a string that has count occurrences of a given substring\"\"\"\n    return s.count(substr) == count\ndef g(substr='hello', count=3):\n    return substr * count\nassert f(g())\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target=13) -> bool:\n    \"\"\"Find a combination of three distinct integers in the list that sum up to the target.\"\"\"\n    return any(sum(comb) == target for comb in combinations(nums, 3))\ndef g(target=13):\n    return [1, 2, 10]\nassert f(g())\n",
        "idx_generation": 67,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: list, target=5) -> bool:\n    \"\"\"Check if the target value exists in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 7,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import date\n\ndef f(dates: List[date], year=2022) -> bool:\n    \"\"\"Find a date in the list that matches the given year.\"\"\"\n    for d in dates:\n        if d.year == year:\n            return True\n    return False\n\ndef g(year=2022):\n    dates = [date(2021, 10, 10),\n             date(2022, 1, 1),\n             date(2023, 5, 5)]\n    return dates\n\nassert f(g())\n",
        "idx_generation": 435,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20, k=3) -> bool:\n    \"\"\"Find if there exists three integers in the given list such that their sum is equal to the target\"\"\"\n    return any((nums[i] + nums[j] + nums[z] == target) for i in range(len(nums)) for j in range(i+1, len(nums)) for z in range(j+1, len(nums)))\ndef g(target=20, k=3):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n",
        "idx_generation": 279,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(target - num in arr for num in arr)\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g(), target=9)\n",
        "idx_generation": 119,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a=7, b=3) -> bool:\n    \"\"\"Check if the string has a certain number of 'a's and 'b's\"\"\"\n    return s.count('a') == a and s.count('b') == b and (len(s) == a + b)\ndef g(a=7, b=3):\n    return 'a' * a + 'b' * b\nassert f(g())\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nimport random\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to select a combination of numbers from the given list that add up to a specific target\"\"\"\n    return any(sum(comb) == target for r in range(len(nums) + 1) for comb in itertools.combinations(nums, r))\n\ndef g(target=100):\n    nums = list(range(1, 101))\n    random.shuffle(nums)\n    return nums\n\nassert f(g())\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers in the list such that their sum is equal to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9]\nassert f(g())\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=5, y=12) -> bool:\n    \"\"\"Find n that is a perfect square and is divisible by both x and y\"\"\"\n    return math.isqrt(n)**2 == n and n % x == 0 and n % y == 0\n\ndef g(x=5, y=12):\n    return x * y * (x * y)\n\nassert f(g())\n",
        "idx_generation": 147,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=4, b=4, c=2) -> bool:\n    \"\"\"Determine if n is a multiple of a and b and divisible by c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=4, b=4, c=2):\n    return a * b * c\nassert f(g())\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if it is possible to find two numbers in the list that add up to the target\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, target-5]\nassert f(g())\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find two numbers in a list that add up to a target value.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subset of the list that sums up to the target value\"\"\"\n    def helper(nums, target, index):\n        if target == 0:\n            return True\n        if target < 0 or index >= len(nums):\n            return False\n        return helper(nums, target-nums[index], index+1) or helper(nums, target, index+1)\n    \n    return helper(nums, target, 0)\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 294,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abcdefghijklmnopqrstuvwxyz') -> bool:\n    \"\"\"Check if the given substring is a subsequence of the given string.\"\"\"\n    substring_index = 0\n    for char in s:\n        if char == substring[substring_index]:\n            substring_index += 1\n        if substring_index == len(substring):\n            return True\n    return False\n\ndef g(substring='abcdefghijklmnopqrstuvwxyz'):\n    \"\"\"Return a string s that contains the given substring as a subsequence.\"\"\"\n    return substring + 'extra_chars'\n\nassert f(g())\n",
        "idx_generation": 119,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, prime_factor=2) -> bool:\n    \"\"\"Check if a number is a power of a given prime factor.\"\"\"\n    while num % prime_factor == 0:\n        num //= prime_factor\n    return num == 1\ndef g(prime_factor=2):\n    return prime_factor ** 3\nassert f(g())\n",
        "idx_generation": 127,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, days=7) -> bool:\n    \"\"\"Check if a given date is 'days' days ahead of the current date\"\"\"\n    current_date = datetime.date.today()\n    given_date = datetime.datetime.strptime(date, \"%Y-%m-%d\").date()\n    return given_date == current_date + datetime.timedelta(days=days)\ndef g(days=7):\n    current_date = datetime.date.today()\n    future_date = current_date + datetime.timedelta(days=days)\n    return future_date.strftime(\"%Y-%m-%d\")\nassert f(g())\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, n=3) -> bool:\n    \"\"\"Find n numbers in the list that sum up to the target value.\"\"\"\n    from itertools import combinations\n\n    for comb in combinations(nums, n):\n        if sum(comb) == target:\n            return True\n    return False\n\ndef g(target=10, n=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 72,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, divisors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number can be expressed as the product of the given divisors\"\"\"\n    return all((n % d == 0 for d in divisors))\ndef g(divisors=[2, 3, 5]):\n    n = 1\n    for d in divisors:\n        n *= d\n    return n\nassert f(g())\n",
        "idx_generation": 9,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: list, target_sum=100) -> bool:\n    \"\"\"Check if there are any two numbers in the list that add up to the target sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=100):\n    return [25, 75, 50]\nassert f(g())\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(li: List[int]) -> bool:\n    \"\"\"Find if the list contains any duplicate values\"\"\"\n    return len(li) == len(set(li))\n\ndef g(n: int):\n    return random.sample(range(n), n)\n\nassert f(g(n=100))\n",
        "idx_generation": 282,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Given a list of integers, find three numbers whose sum is equal to target_sum\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums))))\ndef g(target_sum=100):\n    return [25, 25, 50]\nassert f(g())\n",
        "idx_generation": 125,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    return any((a + b == target_sum for i, a in enumerate(nums) for b in nums[i+1:]))\n\ndef g(target_sum=100):\n    return [n for n in range(1, target_sum) if target_sum - n in range(1, target_sum)]\n\nassert f(g())\n",
        "idx_generation": 56,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target\"\"\"\n    from itertools import combinations\n    for combination in combinations(nums, 3):\n        if sum(combination) == target:\n            return True\n    return False\ndef g(target=0):\n    return [1, 2, -3]\nassert f(g())\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, c='a', n=3) -> bool:\n    \"\"\"Check if a specific character appears n times in a string.\"\"\"\n    return s.count(c) == n\ndef g(c='a', n=3):\n    return c * n\nassert f(g())\n",
        "idx_generation": 204,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, prime_factors=[2, 3, 5]) -> bool:\n    \"\"\"Check if n is divisible by all prime factors in prime_factors list\"\"\"\n    for factor in prime_factors:\n        if n % factor != 0:\n            return False\n    return True\ndef g(prime_factors=[2, 3, 5]):\n    return prime_factors[0] * prime_factors[1] * prime_factors[2]\nassert f(g())\n",
        "idx_generation": 153,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, n=3) -> bool:\n    \"\"\"Check if the sum of each row and each column in a square matrix is equal to n.\"\"\"\n    rows_sum = np.sum(matrix, axis=1)\n    cols_sum = np.sum(matrix, axis=0)\n    return all(rows_sum == n) and all(cols_sum == n)\n\ndef g(n=3):\n    return np.full((n, n), 1)\n\nassert f(g())\n",
        "idx_generation": 285,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    num_set = set(nums)\n    return any(target - num in num_set for num in nums)\ndef g(target=20):\n    return [10, target - 10]\nassert f(g())\n",
        "idx_generation": 216,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=150) -> bool:\n    \"\"\"Find a subset of nums whose sum is equal to target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if len(nums) == 0:\n            return False\n        if nums[0] > target:\n            return subset_sum(nums[1:], target)\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    \n    return subset_sum(nums, target)\n\ndef g(target=150):\n    return [50, 60, 40, 70, 30, 80, 20, 90, 10]\n\nassert f(g())\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target='python') -> bool:\n    \"\"\"Check if the target string is present in the given string\"\"\"\n    return target in string.lower()\ndef g(target='python'):\n    return \"I love Python programming\"\nassert f(g())\n",
        "idx_generation": 136,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=14) -> bool:\n    \"\"\"Given a list of numbers, find if there exists a subset whose sum is equal to the target value\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]\ndef g(target=14):\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums\nassert f(g())\n",
        "idx_generation": 143,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=5) -> bool:\n    \"\"\"Check if the given number is a prime and a palindrome\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    return is_prime(n) and is_palindrome(n)\ndef g(k=5):\n    n = 101\n    while True:\n        if f(n):\n            return n\n        n += 1\nassert f(g())\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(ans: List[str], target=3) -> bool:\n    \"\"\"Given a list of strings, check if at least a target number of strings have the same length\"\"\"\n    lengths = [len(s) for s in ans]\n    counts = Counter(lengths)\n    return any(count >= target for count in counts.values())\ndef g(target=3):\n    return ['apple', 'banana', 'orange', 'kiwi', 'pear', 'mango', 'grape', 'melon']\nassert f(g())\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array whose difference is exactly k.\"\"\"\n    return any(abs(a - b) == k for i, a in enumerate(arr) for j, b in enumerate(arr) if i != j)\ndef g(k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 17,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=20, c=30) -> bool:\n    \"\"\"Check if a number is a multiple of all three given integers.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=10, b=20, c=30):\n    return a * b * c\nassert f(g())\n",
        "idx_generation": 455,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi']) -> bool:\n    \"\"\"Check if a string contains all the given substrings\"\"\"\n    return all((substring in s for substring in substrings))\ndef g(substrings=['abc', 'def', 'ghi']):\n    return ''.join(substrings)\nassert f(g())\n",
        "idx_generation": 9,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=42) -> bool:\n    \"\"\"Given a list of integers, find two numbers that sum up to a target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=42):\n    return [10, 32, 5, 17, 23, 7, 9, 13, 15, 20, 25]\nassert f(g())\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Determine if there is a row or column in the matrix that sums up to the target value\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for row in range(rows):\n        if sum(matrix[row]) == target:\n            return True\n    for col in range(cols):\n        col_sum = 0\n        for row in range(rows):\n            col_sum += matrix[row][col]\n        if col_sum == target:\n            return True\n    return False\n    \ndef g(rows=3, cols=3, target=15):\n    import random\n    matrix = [[random.randint(1, 10) for _ in range(cols)] for _ in range(rows)]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, k=3) -> bool:\n    \"\"\"Find if there exist k numbers in nums that add up to target\"\"\"\n    from itertools import combinations\n    for comb in combinations(nums, k):\n        if sum(comb) == target:\n            return True\n    return False\ndef g(target=10, k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 65,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target sum\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 3):\n        if sum(combo) == target_sum:\n            return True\n    return False\n\ndef g(target_sum=100):\n    return [25, 50, target_sum-75]\n\nassert f(g())\n",
        "idx_generation": 148,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10, k=2) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    return any([nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))]) and len(nums) >= k\ndef g(target=10, k=2):\n    return list(range(1, target-k+1)) + [target]\nassert f(g())\n",
        "idx_generation": 212,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date_str: str, format_str='%Y-%m-%d %H:%M:%S') -> bool:\n    \"\"\"Check if the given date string matches the specified format.\"\"\"\n    try:\n        datetime.strptime(date_str, format_str)\n        return True\n    except ValueError:\n        return False\n\ndef g(format_str='%Y-%m-%d %H:%M:%S'):\n    return datetime.now().strftime(format_str)\n\nassert f(g())\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target=\"racecar\") -> bool:\n    \"\"\"Given a string, determine if it is a palindrome and if it matches the target string.\nSample Input:\nstring = \"radar\"\ntarget = \"racecar\"\nSample Output:\nFalse\"\"\"\n    return string == string[::-1] and string == target\n\ndef g(string=\"radar\", target=\"racecar\"):\n    return target\n\nassert f(g())",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=5) -> bool:\n    \"\"\"Check if the target value is present in the array.\"\"\"\n    return target in arr\ndef g(target=5):\n    return np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nassert f(g())\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if a subset of the given list can be found whose sum is equal to the target sum\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if target < 0 or not nums:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n\n    return subset_sum(nums, target_sum)\n\ndef g(target_sum=100):\n    nums = random.sample(range(1, 101), 20)\n    return nums\n\nassert f(g())\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(d: datetime.date, weekday='Monday') -> bool:\n    \"\"\"Check if the given date is on the specified weekday\"\"\"\n    return d.strftime('%A') == weekday\n\ndef g(weekday='Monday'):\n    today = datetime.date.today()\n    while today.strftime('%A') != weekday:\n        today += datetime.timedelta(days=1)\n    return today\n\nassert f(g())\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=3, c=2) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\ndef g(a=5, b=3, c=2):\n    return -a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "idx_generation": 150,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=6, target='abc') -> bool:\n    \"\"\"Check if the string contains at least n occurrences of the target substring\"\"\"\n    count = s.count(target)\n    return count >= n\ndef g(n=6, target='abc'):\n    s = target * n\n    return s\nassert f(g())\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=50, num_values=2) -> bool:\n    \"\"\"Find if there exists a combination of num_values numbers in the list nums that multiply up to target.\"\"\"\n    import itertools\n    for combination in itertools.combinations(nums, num_values):\n        if combination[0] * combination[1] == target:\n            return True\n    return False\ndef g(target=50, num_values=2):\n    nums = [5, 10, 15, 20]\n    return nums\nassert f(g())\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Find if there exists a row in the matrix that contains the target number\"\"\"\n    return any(target in row for row in matrix)\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 19,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: list, target=50) -> bool:\n    \"\"\"Check if the sum of any two numbers in lst is equal to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(target=50):\n    return [10, 20, 30, 40, target-100]\nassert f(g())\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, word_list=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Find a word that can be formed by rearranging the letters of a given word.\"\"\"\n    sorted_x = ''.join(sorted(x))\n    return any((sorted_x == ''.join(sorted(word)) for word in word_list))\ndef g(word_list=['apple', 'banana', 'cherry', 'date']):\n    return word_list[0]\nassert f(g())\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=10, subset_len=3) -> bool:\n    \"\"\"Find a subset of numbers from the list whose sum is equal to the target.\"\"\"\n    from itertools import combinations\n    for subset in combinations(lst, subset_len):\n        if sum(subset) == target:\n            return True\n    return False\ndef g(target=10, subset_len=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Find if there exist three numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=5):\n    return [1, 2, 2]\nassert f(g())\n",
        "idx_generation": 177,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, target='abc') -> bool:\n    \"\"\"Given a string and a target substring, find if the target substring appears n times in the string.\nSample Input:\ns = 'ababcabcabc'\nn = 3\ntarget = 'abc'\nSample Output:\nTrue\"\"\"\n    return s.count(target) == n\ndef g(n=3, target='abc'):\n    return target * n\nassert f(g())",
        "idx_generation": 71,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(numbers: List[int], target=12) -> bool:\n    \"\"\"Find two numbers in the list that multiply to the target value\"\"\"\n    return any(a * b == target for a in numbers for b in numbers if a != b)\n\ndef g(target=12):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 167,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that adds up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [1, target-1]\n\nassert f(g())\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = n * (n ** 2 + 1) // 2\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag_sum1 = sum(matrix[i][i] for i in range(n))\n    diag_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(s == target_sum for s in row_sums + col_sums + [diag_sum1, diag_sum2])\ndef g():\n    matrix = [\n        [2, 7, 6],\n        [9, 5, 1],\n        [4, 3, 8]\n    ]\n    return matrix\nassert f(g())\n",
        "idx_generation": 171,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(l: List[int]) -> bool:\n    \"\"\"Given a list of integers, return True if all the numbers in the list are positive, and False otherwise.\"\"\"\n    return all(x > 0 for x in l)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix of integers, determine if there exists a row where the sum of the elements is even.\"\"\"\n    return any(sum(row) % 2 == 0 for row in matrix)\n\ndef g(n=3, m=3, min_val=0, max_val=10):\n    matrix = [[random.randint(min_val, max_val) for _ in range(m)] for _ in range(n)]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], target=100) -> bool:\n    \"\"\"Given a sequence of positive integers, find if there exist a subset whose sum is equal to the target value.\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if len(nums) == 0:\n            return False\n        if nums[0] > target:\n            return subset_sum(nums[1:], target)\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    \n    return subset_sum(seq, target)\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\nassert f(g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Given a string s and a list of words, determine if it is possible to form the string s using the given words.\n    Each word can be used multiple times and the words can be rearranged in any order.\"\"\"\n    def dfs(s, words, memo):\n        if not s:\n            return True\n        if s in memo:\n            return memo[s]\n        for word in words:\n            if s.startswith(word) and dfs(s[len(word):], words, memo):\n                memo[s] = True\n                return True\n        memo[s] = False\n        return False\n    return dfs(s, words, {})\ndef g(words=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(words)\nassert f(g())\n",
        "idx_generation": 205,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=100) -> bool:\n    \"\"\"Check if a number is a perfect square within a given range.\"\"\"\n    return a <= n <= b and int(n**0.5)**2 == n\ndef g(a=10, b=100):\n    for i in range(a, b+1):\n        if int(i**0.5)**2 == i:\n            return i\nassert f(g())\n",
        "idx_generation": 152,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(x: str, fmt=\"%Y-%m-%d\") -> bool:\n    \"\"\"Check if the given date string matches the specified format\"\"\"\n    try:\n        datetime.datetime.strptime(x, fmt)\n        return True\n    except ValueError:\n        return False\n\ndef g(fmt=\"%Y-%m-%d\"):\n    return datetime.datetime.now().strftime(fmt)\n\nassert f(g())\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(li: List[int], target=10) -> bool:\n    \"\"\"Find a combination of numbers in the list such that their sum equals the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(1, len(li) + 1) for comb in combinations(li, r))\ndef g(target=10):\n    return [1, 2, 3, 4]\nassert f(g())\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Check if there are two numbers in a list that sum up to a given target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=9):\n    nums = [4, 5, 2, 3, 1]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 20,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello world') -> bool:\n    \"\"\"Check if a string can be transformed into the target string by rearranging the characters\"\"\"\n    return sorted(s) == sorted(target)\ndef g(target='hello world'):\n    return ''.join(sorted(target))\nassert f(g())\n",
        "idx_generation": 30,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists two numbers in the list such that their sum is equal to the target.\"\"\"\n    return any(((nums[i] + nums[j]) == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Given a list of positive integers, find a subset of numbers that sum up to a target sum.\"\"\"\n    def subset_sum(arr, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if arr[n-1] > target_sum:\n            return subset_sum(arr, n-1, target_sum)\n        return subset_sum(arr, n-1, target_sum) or subset_sum(arr, n-1, target_sum-arr[n-1])\n\n    return subset_sum(arr, len(arr), target_sum)\n\ndef g():\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char1='a', char2='z', count1=3, count2=5) -> bool:\n    \"\"\"Check if the given string has count1 occurrences of char1 and count2 occurrences of char2.\"\"\"\n    return s.count(char1) == count1 and s.count(char2) == count2\n\ndef g(char1='a', char2='z', count1=3, count2=5):\n    return char1 * count1 + char2 * count2\n\nassert f(g())\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the string is a palindrome and has length n\"\"\"\n    return len(s) == n and s == s[::-1]\ndef g(n=5):\n    return \"radar\"\nassert f(g())\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Find a substring of length n that appears twice in the string\"\"\"\n    for i in range(len(s)-n):\n        if s[i:i+n] in s[i+n:]:\n            return True\n    return False\n\ndef g(n=4):\n    return \"a\" * (2*n)\n\nassert f(g())\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by all the given divisors\"\"\"\n    for divisor in divisors:\n        if n % divisor != 0:\n            return False\n    return True\ndef g(divisors=[2, 3, 5]):\n    return 30\nassert f(g())\n",
        "idx_generation": 178,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if a number is divisible by k\"\"\"\n    return n % k == 0\ndef g(k=3):\n    return k * 2\nassert f(g())\n",
        "idx_generation": 362,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 5, 10, 20, 50], target=250) -> bool:\n    \"\"\"Find a combination of denominations that adds up to a given target value.\"\"\"\n    return sum((num * count for num, count in zip(nums, n))) == target\ndef g(nums=[2, 5, 10, 20, 50], target=250):\n    count = [0] * len(nums)\n    for i in range(len(nums)):\n        while target >= nums[i]:\n            target -= nums[i]\n            count[i] += 1\n    return tuple(count)\nassert f(g())\n",
        "idx_generation": 233,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, days=30) -> bool:\n    \"\"\"Check if a given date is exactly n days after the current date.\"\"\"\n    current_date = datetime.date.today()\n    given_date = datetime.datetime.strptime(date, \"%Y-%m-%d\").date()\n    return (given_date - current_date).days == days\n\ndef g(days=30):\n    return (datetime.date.today() + datetime.timedelta(days=days)).strftime(\"%Y-%m-%d\")\n\nassert f(g())\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a', n=5) -> bool:\n    \"\"\"Check if the given character appears exactly n times in the string.\"\"\"\n    return s.count(char) == n\n\ndef g(char='a', n=5):\n    return char * n\nassert f(g())\n",
        "idx_generation": 209,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, target: int=20) -> bool:\n    \"\"\"Determine if a number is a perfect square and if its square root is equal to the target.\"\"\"\n    return n > 0 and sqrt(n) == target\ndef g(target: int=20):\n    return target ** 2\nassert f(g())\n",
        "idx_generation": 225,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, days=7) -> bool:\n    \"\"\"Check if the given date is exactly one week (7 days) after the current date.\"\"\"\n    current_date = datetime.date.today()\n    given_date = datetime.datetime.strptime(date, \"%Y-%m-%d\").date()\n    difference = given_date - current_date\n    return difference.days == days\n\ndef g(days=7):\n    current_date = datetime.date.today()\n    new_date = current_date + datetime.timedelta(days=days)\n    return new_date.strftime(\"%Y-%m-%d\")\n    \nassert f(g())\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: list, target_sum=10, num_elements=3) -> bool:\n    \"\"\"Find a list of numbers where the sum of a certain number of elements equals a target sum\"\"\"\n    import itertools\n    combinations = list(itertools.combinations(numbers, num_elements))\n    sums = [sum(combination) for combination in combinations]\n    return target_sum in sums\ndef g(target_sum=10, num_elements=3):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target: int=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\n\ndef g(length: int=10, target: int=10):\n    \"\"\"Generate a list of random numbers\"\"\"\n    return [random.randint(1, 10) for _ in range(length)]\n\nassert f(g())\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the given string is an anagram of the target string\"\"\"\n    return sorted(s.lower()) == sorted(target.lower())\n\ndef g(target='python'):\n    return ''.join(sorted(target.lower()))\n\nassert f(g())\n",
        "idx_generation": 32,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"Find a pair of numbers in the list that adds up to the target value.\"\"\"\n    return any(arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr)))\ndef g(target=50):\n    return [10, 20, 30, 40]\nassert f(g())\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find a pair of numbers in a list that sum up to a given target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))\n\ndef g(target=20):\n    return [5, 10, 15]\n\nassert f(g())\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, pattern='abc') -> bool:\n    \"\"\"Check if a given word follows a specific pattern. Each letter in the word should correspond to a character in the pattern\"\"\"\n    if len(word) != len(pattern):\n        return False\n    mapping = {}\n    for i in range(len(word)):\n        if pattern[i] in mapping:\n            if mapping[pattern[i]] != word[i]:\n                return False\n        else:\n            mapping[pattern[i]] = word[i]\n    return True\ndef g(pattern='abc'):\n    return ''.join([chr(ord('a') + i) for i in range(len(pattern))])\nassert f(g())\n",
        "idx_generation": 92,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if the target word can be formed by concatenating words in the list, without any duplicates.\"\"\"\n    def dfs(curr_word, remaining_words):\n        if curr_word == target:\n            return True\n        for word in remaining_words:\n            if target.startswith(curr_word+word):\n                if dfs(curr_word+word, remaining_words.difference({word})):\n                    return True\n        return False\n    return dfs('', set(words))\ndef g(target='python'):\n    return ['py', 'th', 'on']\nassert f(g())\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Given a matrix (list of lists) of integers, check if there exists a row such that the sum of its elements is equal to target.\n    Sample Input:\n    `[[1, 2, 3], [4, 5, 6], [7, 8, 9]]`\n    Sample Output:\n    `True`\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(x: int, n=10) -> bool:\n    \"\"\"Check if the number is a perfect square and its square root is divisible by n\"\"\"\n    import math\n    if math.isqrt(x)**2 == x and math.isqrt(x) % n == 0:\n        return True\n    return False\n\ndef g(n=10):\n    return n**2\n\nassert f(g())\n",
        "idx_generation": 185,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string has at least n vowels\"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = sum(1 for char in s if char.lower() in vowels)\n    return count >= n\ndef g(n=3):\n    return 'aeiou' * n\nassert f(g())\n",
        "idx_generation": 375,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the number n is in the list of nums\"\"\"\n    return n in nums\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[0]\nassert f(g())\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=3, target=10) -> bool:\n    \"\"\"Find n numbers in the list that sum up to the target value\"\"\"\n    if n == 0:\n        return target == 0\n    if len(nums) == 0:\n        return False\n    return f(nums[1:], n-1, target-nums[0]) or f(nums[1:], n, target)\ndef g(n=3, target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=\"Python\") -> bool:\n    \"\"\"Check if a given string contains the target substring.\"\"\"\n    return target in s\ndef g(target=\"Python\"):\n    return f\"This is a Python programming puzzle. The target is {target}.\"\nassert f(g())\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(p: int, q=3, r=7) -> bool:\n    \"\"\"Find p such that q^p is congruent to 1 modulo r\"\"\"\n    return q**p % r == 1\ndef g(q=3, r=7):\n    p = r - 1\n    while True:\n        if f(p, q, r):\n            return p\n        p += r - 1\nassert f(g())\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a', count=2) -> bool:\n    \"\"\"Check if a specific character appears a certain number of times in a string\"\"\"\n    return s.count(char) == count\n\ndef g(char='a', count=2):\n    return char * count\n\nassert f(g())\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(num_list: list, target_sum=100) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that sums up to the target_sum.\"\"\"\n    from itertools import combinations\n    \n    for r in range(1, len(num_list) + 1):\n        for combination in combinations(num_list, r):\n            if sum(combination) == target_sum:\n                return True\n    return False\n\ndef g(target_sum=100):\n    return [10, 20, 30, 40]\n\nassert f(g())\n",
        "idx_generation": 89,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a='ABC', b='DEF', c='GHI') -> bool:\n    \"\"\"Check if x is a rearrangement of the strings a, b, and c\"\"\"\n    sorted_x = ''.join(sorted(x))\n    sorted_abc = ''.join(sorted(a + b + c))\n    return sorted_x == sorted_abc\ndef g(a='ABC', b='DEF', c='GHI'):\n    x = a + b + c\n    return x\nassert f(g())\n",
        "idx_generation": 26,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if s is a palindrome\"\"\"\n    return s == s[::-1]\ndef g():\n    return 'radar'\nassert f(g())\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Find if there exist two distinct indices i and j in nums such that nums[i] - nums[j] == k\"\"\"\n    seen = set()\n    for num in nums:\n        if num + k in seen or num - k in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(k=3):\n    return [1, 2, 4, 5, 7]\n\nassert f(g())\n",
        "idx_generation": 388,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(array: list) -> bool:\n    \"\"\"Check if an array can be partitioned into two subsets with equal sum.\"\"\"\n    total_sum = sum(array)\n    if total_sum % 2 != 0:\n        return False\n    target_sum = total_sum // 2\n    n = len(array)\n\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if array[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - array[i - 1]]\n\n    return dp[n][target_sum]\n\ndef g(array=[1, 5, 11, 5]):\n    return array\nassert f(g())\n",
        "idx_generation": 221,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=4, substrings=['abcd', 'efgh', 'ijkl', 'mnop']) -> bool:\n    \"\"\"Check if a string contains all the given substrings.\"\"\"\n    return all(substring in s for substring in substrings)\ndef g(n=4, substrings=['abcd', 'efgh', 'ijkl', 'mnop']):\n    return ''.join(substrings)\nassert f(g())\n",
        "idx_generation": 98,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char_count=5) -> bool:\n    \"\"\"Check if the string has at least 'char_count' number of unique characters.\"\"\"\n    return len(set(s)) >= char_count\ndef g(char_count=5):\n    return \"pythonprogramming\"\nassert f(g())\n",
        "idx_generation": 234,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], length=5) -> bool:\n    \"\"\"Check if the sum of the first 'length' numbers in the list is greater than 100.\"\"\"\n    return sum(num_list[:length]) > 100\n\ndef g(length=5):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\nassert f(g())\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=4, b=5, c=6) -> bool:\n    \"\"\"Check if n is a Pythagorean triple, i.e., if it satisfies the equation a^2 + b^2 = c^2.\"\"\"\n    return n == math.sqrt(a**2 + b**2) or n == math.sqrt(b**2 + c**2) or n == math.sqrt(a**2 + c**2)\n\ndef g(a=4, b=5, c=6):\n    return math.sqrt(a**2 + b**2)\nassert f(g())\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k=3) -> bool:\n    \"\"\"Given a list of integers and an integer k, determine if there exists a pair of integers in the list that sum up to k.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == k:\n                return True\n    return False\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k=3):\n    return lst\nassert f(g())\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(matrix: list, num_rows=3, num_cols=3) -> bool:\n    \"\"\"Find a matrix (nested list) that has the specified number of rows and columns.\"\"\"\n    return len(matrix) == num_rows and all(len(row) == num_cols for row in matrix)\n\ndef g(num_rows=3, num_cols=3):\n    matrix = []\n    for _ in range(num_rows):\n        row = [random.randint(1, 10) for _ in range(num_cols)]\n        matrix.append(row)\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 260,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a subset of numbers that sum up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if target < 0 or len(nums) == 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\ndef g(target=100):\n    return [i for i in range(target + 1)]\nassert f(g())\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(text: str, target='world') -> bool:\n    \"\"\"Check if the target string is present in the given text.\"\"\"\n    return target in text\ndef g(target='world'):\n    return 'Hello ' + target\nassert f(g())\n",
        "idx_generation": 217,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target_sum=150, length=5) -> bool:\n    \"\"\"Find a list of integers with a certain sum and length\"\"\"\n    return sum(lst) == target_sum and len(lst) == length\ndef g(target_sum=150, length=5):\n    return [target_sum // length] * length\nassert f(g())\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, c='abc', n=3) -> bool:\n    \"\"\"Check if a string contains a certain number of a given character.\"\"\"\n    return s.count(c) == n\ndef g(c='abc', n=3):\n    return c * n\nassert f(g())\n",
        "idx_generation": 495,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a combination of numbers in a list that add up to a given target\"\"\"\n    from itertools import combinations\n    return any((sum(comb) == target for r in range(1, len(nums)+1) for comb in combinations(nums, r)))\ndef g(target=100):\n    return [10, 20, 30, 40]\nassert f(g())\n",
        "idx_generation": 109,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t='123') -> bool:\n    \"\"\"Rearrange the characters in s to form t.\"\"\"\n    return sorted(s) == sorted(t)\ndef g(t='123'):\n    return t[::-1]\nassert f(g())\n",
        "idx_generation": 26,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Find if s2 is a rotation of s1\"\"\"\n    if len(s1) != len(s2):\n        return False\n    s = s1 + s1\n    return s2 in s\n\ndef g():\n    return \"hello\", \"ohell\"\n\nassert f(*g())\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=42) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers such that their sum is equal to the target value\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(length=10, target=42):\n    nums = random.sample(range(1, 100), length)\n    return nums, target\nassert f(*g())\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, limit=100) -> bool:\n    \"\"\"Find n such that the sum of all numbers divisible by 3 or 5 below n is equal to or greater than the limit.\"\"\"\n    return sum(i for i in range(n) if i % 3 == 0 or i % 5 == 0) >= limit\ndef g(limit=100):\n    n = 1\n    while True:\n        if sum(i for i in range(n) if i % 3 == 0 or i % 5 == 0) >= limit:\n            return n\n        n += 1\nassert f(g())\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a', count=3) -> bool:\n    \"\"\"Given a string and a character, return True if the character appears exactly 'count' times in the string,\n    and False otherwise.\"\"\"\n    return s.count(char) == count\ndef g(char='a', count=3):\n    return f'{\"a\" * count}bc'\nassert f(g())\n",
        "idx_generation": 100,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string contains exactly n vowels.\"\"\"\n    vowels = 'aeiou'\n    return sum((1 for c in s if c.lower() in vowels)) == n\ndef g(n=3):\n    return 'a' * n\nassert f(g())\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list that sum up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 242,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: list, target=20) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\n    \ndef g(target=20):\n    return [10, 8, 12, 5, 15, -2, 7]\n    \nassert f(g())\n",
        "idx_generation": 204,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int, a=2, b=3) -> bool:\n    \"\"\"Check if x raised to the power of y is divisible by z.\"\"\"\n    return x ** y % z == 0\n\ndef g(a=2, b=3):\n    return a * b, a, b\n\nassert f(*g())\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a number in the matrix that is equal to the target\"\"\"\n    return any((target in row for row in matrix))\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\nassert f(g())\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', n=3) -> bool:\n    \"\"\"Find the number of times the substring appears in the string, where the substring is repeated n times\"\"\"\n    return string.count(substring * n)\ndef g(substring='abc', n=3):\n    string = 'abcabcabcabcabc'\n    return string\nassert f(g())\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello', length=5) -> bool:\n    \"\"\"Check if the given string contains a substring of the given length that matches the target string.\"\"\"\n    return any(s[i:i+length] == target for i in range(len(s)-length+1))\ndef g(target='hello', length=5):\n    return target\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if n is a perfect square and its square root is a multiple of m\"\"\"\n    if math.isqrt(n) ** 2 == n:\n        return math.isqrt(n) % m == 0\n    return False\n\ndef g(m=5):\n    i = 1\n    while True:\n        if (i ** 2) % m == 0:\n            return i ** 2\n        i += 1\n\nassert f(g())\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, k=3) -> bool:\n    \"\"\"Find if there are k numbers in nums that sum up to target\"\"\"\n    combinations = itertools.combinations(nums, k)\n    for combo in combinations:\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g(target=100, k=3):\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 125,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target number.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(target: int):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(13), 13)\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if the given string contains all the substrings in the given list, in any order\"\"\"\n    return all((sub in s for sub in substrings))\ndef g(substrings=['apple', 'banana', 'cherry']):\n    return ''.join(substrings)\nassert f(g())\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: list, target=5) -> bool:\n    \"\"\"Determine if a target number is in a list\"\"\"\n    return target in arr\n\ndef g(target=5):\n    arr = random.sample(range(10), 10)\n    return arr\n\nassert f(g())\n",
        "idx_generation": 419,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to obtain the target number by combining the numbers using addition and subtraction.\"\"\"\n    return any((sum(numbers[:i]) + sum(numbers[i:]) == target for i in range(len(numbers) + 1)))\ndef g(numbers=[10, 20, 30, 40]):\n    return numbers\nassert f(g())\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc', count=2) -> bool:\n    \"\"\"Given a string and a substring, return True if the substring appears exactly 'count' times in the string,\n    and False otherwise.\"\"\"\n    return s.count(substr) == count\ndef g(substr='abc', count=2):\n    return substr * count + 'xyz'\nassert f(g())\n",
        "idx_generation": 100,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string has exactly n consecutive vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(n=3):\n    vowel_string = 'aeiou'\n    return vowel_string * n\n\nassert f(g())\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], pivot=10) -> bool:\n    \"\"\"Check if a list can be divided into two sublists, where the sum of the first sublist is equal to the sum of the second sublist\"\"\"\n    total_sum = sum(nums)\n    prefix_sum = 0\n    for i in range(len(nums)):\n        prefix_sum += nums[i]\n        if prefix_sum == total_sum - prefix_sum:\n            pivot = i+1\n            break\n    return pivot != 10\ndef g():\n    return [1, 2, 3, 4, 5, 5, 4, 3, 2, 1]\nassert f(g())\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(number: int, limit=1000) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if number < 2:\n        return False\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\ndef g(number=997):\n    return number\nassert f(g())\n",
        "idx_generation": 217,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target_length=10) -> bool:\n    \"\"\"Check if the string length is equal to the target length\"\"\"\n    return len(string) == target_length\ndef g(target_length=10):\n    return \"abcdefghij\"[:target_length]\nassert f(g())\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a number in the list that is equal to the target number\"\"\"\n    return target in nums\n\ndef g(target=0):\n    return [target]\n\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Find if it is possible to use the four basic arithmetic operations (+, -, *, /) on the numbers in nums to obtain the target number.\n    Each number in nums must be used exactly once, and the operations can be performed in any order.\n    \"\"\"\n    def helper(nums):\n        if len(nums) == 1:\n            return abs(nums[0] - target) < 1e-6\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                a, b = nums[i], nums[j]\n                nums_new = [nums[k] for k in range(len(nums)) if k != i and k != j]\n                if helper(nums_new + [a + b]) or helper(nums_new + [a - b]) or helper(nums_new + [b - a]) or helper(nums_new + [a * b]):\n                    return True\n                if b != 0 and (helper(nums_new + [a / b]) or helper(nums_new + [b / a])):\n                    return True\n        return False\n    \n    return helper(nums)\n\ndef g(nums=[4, 6, 8, 12]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, s1='hello', s2='world') -> bool:\n    \"\"\"Check if a string starts with s1 and ends with s2\"\"\"\n    return s.startswith(s1) and s.endswith(s2)\ndef g(s1='hello', s2='world'):\n    return s1 + ' some random text ' + s2\nassert f(g())\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=0) -> bool:\n    \"\"\"Find a subset of integers in the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, target_sum, index):\n        if target_sum == 0:\n            return True\n        if index < 0:\n            return False\n        if nums[index] > target_sum:\n            return subset_sum(nums, target_sum, index - 1)\n        return subset_sum(nums, target_sum, index - 1) or subset_sum(nums, target_sum - nums[index], index - 1)\n    \n    return subset_sum(nums, target_sum, len(nums) - 1)\n\ndef g(target_sum=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=10, count=3) -> bool:\n    \"\"\"Find if there are count numbers in the list that add up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(combo) == target for combo in combinations(numbers, count))\ndef g(target=10, count=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=42) -> bool:\n    \"\"\"Check if the target number is the sum of any two distinct numbers in the list\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=42):\n    return [i for i in range(target-1)]\nassert f(g())\n",
        "idx_generation": 30,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, target='apple', n=3) -> bool:\n    \"\"\"Check if the first n characters of x are equal to the target string\"\"\"\n    return x[:n] == target[:n]\n\ndef g(target='apple', n=3):\n    return target\n\nassert f(g())\n",
        "idx_generation": 76,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n    \ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    \nassert f(g())\n",
        "idx_generation": 434,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists three distinct indices i, j, k in the given list such that nums[i] + nums[j] + nums[k] is divisible by k.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if (nums[i] + nums[j] + nums[k]) % k == 0:\n                    return True\n    return False\ndef g(k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nassert f(g())\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, x='x', y='y', z='z') -> bool:\n    \"\"\"Check if the number of occurrences of characters x, y, and z in the string are all equal\"\"\"\n    return string.count(x) == string.count(y) == string.count(z)\n\ndef g(x='x', y='y', z='z'):\n    return x * 3 + y * 3 + z * 3\n\nassert f(g())\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string contains all the letters of the alphabet at least n times\"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    letter_counts = {letter: 0 for letter in alphabet}\n    for char in s:\n        if char.lower() in alphabet:\n            letter_counts[char.lower()] += 1\n    return all(value >= n for value in letter_counts.values())\n\ndef g(n=3):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return alphabet * n\n\nassert f(g())\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, nums=[2, 4, 6, 8]) -> bool:\n    \"\"\"Check if there exists a subset of nums whose sum is equal to n\"\"\"\n    from itertools import combinations\n    return any(sum(subset) == n for r in range(len(nums) + 1) for subset in combinations(nums, r))\ndef g(nums=[2, 4, 6, 8]):\n    return sum(nums) // 2\nassert f(g())\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square (a square matrix where the sums of each row, each column, and both diagonals are the same).\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    for i in range(1, n):\n        if sum(matrix[i]) != target_sum:\n            return False\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) != target_sum:\n            return False\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n    return True\ndef g():\n    matrix = [[2, 9, 4], [7, 5, 3], [6, 1, 8]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 217,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, num1=10, num2=20) -> bool:\n    \"\"\"Check if a number is divisible by both num1 and num2\"\"\"\n    return n % num1 == 0 and n % num2 == 0\ndef g(num1=10, num2=20):\n    return num1 * num2\nassert f(g())\n",
        "idx_generation": 403,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return lst[1]\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\ndef f(date: datetime.date, year=2022, month=2, day=14) -> bool:\n    \"\"\"Check if the given date is Valentine's day in the specified year\"\"\"\n    return date.year == year and date.month == month and date.day == day\ndef g(year=2022, month=2, day=14):\n    return datetime.date(year, month, day)\nassert f(g())\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='apple') -> bool:\n    \"\"\"Check if the given string contains the given substring.\"\"\"\n    return substr in s\n\ndef g(substr='apple'):\n    s = \"I have an apple and a banana.\"\n    return s\n\nassert f(g())\n",
        "idx_generation": 274,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=120) -> bool:\n    \"\"\"Find the smallest positive integer n such that the sum of the first n positive integers is equal to the target value.\"\"\"\n    return (n * (n + 1) // 2) == target\ndef g(target=120):\n    n = 1\n    while (n * (n + 1) // 2) < target:\n        n += 1\n    return n\nassert f(g())\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a combination of numbers from the list that adds up to the target\"\"\"\n    for r in range(1, len(nums) + 1):\n        for combination in combinations(nums, r):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if the target number is the sum of any three distinct numbers in the list\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(target=100):\n    return [i for i in range(target-2)]\nassert f(g())\n",
        "idx_generation": 30,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, words=['banana', 'apple', 'orange', 'grape', 'kiwi', 'mango', 'pineapple']) -> bool:\n    \"\"\"Check if the given word is an anagram of any word in the list.\"\"\"\n    sorted_word = ''.join(sorted(word))\n    for w in words:\n        if ''.join(sorted(w)) == sorted_word:\n            return True\n    return False\n\ndef g(words=['banana', 'apple', 'orange', 'grape', 'kiwi', 'mango', 'pineapple']):\n    return ''.join(sorted(words[2]))\n\nassert f(g())\n",
        "idx_generation": 83,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=1000) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(target - x in lst for x in lst)\ndef g(target=1000):\n    return [target // 2, target // 2]\nassert f(g())\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subsequence of numbers in the list that sums up to the target\"\"\"\n    n = len(arr)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < arr[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target]\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\nassert f(g())\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"Check if there is a substring of length k that contains all unique characters\"\"\"\n    for i in range(len(s) - k + 1):\n        if len(set(s[i:i+k])) == k:\n            return True\n    return False\ndef g(s=\"abcdefgh\", k=2):\n    return s\nassert f(g())\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=16):\n    return [5, 3, 1, 8, 10, 6, 14]\nassert f(g())\n",
        "idx_generation": 266,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], t=10, n=2) -> bool:\n    \"\"\"Check if the count of values in the list is less than the target\"\"\"\n    assert all([v > 0 for v in x])\n    return len(x) < t\n\ndef g(t=10, n=2):\n    return [5] * n + [t]\n\nassert f(g())\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a given number n is divisible by any of the prime numbers in the list primes\"\"\"\n    for prime in primes:\n        if n % prime == 0:\n            return True\n    return False\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    n = 1\n    while True:\n        if f(n, primes):\n            return n\n        n += 1\nassert f(g())\n",
        "idx_generation": 242,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=20) -> bool:\n    \"\"\"Check if a number is divisible by any number in a given range\"\"\"\n    return any(n % i == 0 for i in range(1, target+1))\ndef g(target=20):\n    return target * 10\nassert f(g())\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target_length=5) -> bool:\n    \"\"\"Given a list of integers, find if the length of the list is equal to the target_length.\nSample Input:\n[1, 2, 3, 4, 5]\nSample Output:\nTrue\"\"\"\n    return len(lst) == target_length\n\ndef g(target_length=5):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 321,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, year=2022, month=1, day=1) -> bool:\n    \"\"\"Check if the given datetime is equal to the specified year, month, and day.\"\"\"\n    return dt == datetime.datetime(year, month, day)\n    \ndef g(year=2022, month=1, day=1):\n    return datetime.datetime(year, month, day)\n    \nassert f(g())\n",
        "idx_generation": 406,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g(n=5):\n    return str(n) + str(n)[::-1]\n\nassert f(g())\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, n=5) -> bool:\n    \"\"\"Find the nth Fibonacci number\"\"\"\n    fib = [0, 1]\n    while len(fib) < n:\n        fib.append(fib[-1] + fib[-2])\n    return fib[-1] == result\ndef g(n=5):\n    fib = [0, 1]\n    while len(fib) < n:\n        fib.append(fib[-1] + fib[-2])\n    return fib[-1]\nassert f(g())\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Find a combination of numbers that add up to a specific target.\"\"\"\n    return any(sum(comb) == target for r in range(1, len(nums) + 1) for comb in combinations(nums, r))\n\ndef g(target=12):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a number is in a list.\"\"\"\n    return n in lst\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst[0]\nassert f(g())\n",
        "idx_generation": 31,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, pattern='ABAB') -> bool:\n    \"\"\"Check if the given string follows the given pattern\"\"\"\n    return ''.join([pattern[i % len(pattern)] for i in range(len(x))]) == x\ndef g(pattern='ABAB'):\n    return 'ABABABAB'\nassert f(g())\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[List[int]], target=0) -> bool:\n    \"\"\"Find a pair of elements (one from each sublist) such that their sum is equal to target\"\"\"\n    for i in range(len(lst[0])):\n        for j in range(len(lst[1])):\n            if lst[0][i] + lst[1][j] == target:\n                return True\n    return False\ndef g(target=0):\n    return [[0], [0]]\nassert f(g())\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=100, k=3) -> bool:\n    \"\"\"Given a list of numbers, find a subset of k numbers whose sum is equal to the target value.\"\"\"\n    assert len(numbers) >= k, 'Not enough numbers to form a subset'\n    combinations = itertools.combinations(numbers, k)\n    for c in combinations:\n        if sum(c) == target:\n            return True\n    return False\ndef g(target=100, k=3):\n    numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    return numbers\nassert f(g())\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15, length=3) -> bool:\n    \"\"\"Find a sublist of length 'length' in 'nums' whose sum is equal to 'target'\"\"\"\n    return any(sum(nums[i:i+length]) == target for i in range(len(nums)-length+1))\ndef g(target=15, length=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nassert f(g())\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello world', length=5) -> bool:\n    \"\"\"Find a substring of the given length from the target string that starts with a vowel.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(target) - length + 1):\n        if target[i] in vowels:\n            return target[i:i+length] == s\n    return False\ndef g(target='hello world', length=5):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(target) - length + 1):\n        if target[i] in vowels:\n            return target[i:i+length]\n    return \"\"\nassert f(g())\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Find a pair of numbers from a given list that sums up to a target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\ndef g(target=20):\n    numbers = [1, 5, 10, 15]\n    return numbers\nassert f(g())\n",
        "idx_generation": 319,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, y: int, r=5) -> bool:\n    \"\"\"Check if a point (x, y) is inside a circle with radius r\"\"\"\n    return math.sqrt(x**2 + y**2) <= r\ndef g(x=3, y=4, r=5):\n    return x, y, r\nassert f(*g())\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in a list that sum up to the target number\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Find a pair of numbers from the list that sum up to the target_sum.\"\"\"\n    num_set = set()\n    for num in numbers:\n        complement = target_sum - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if a target number can be obtained by adding or subtracting any combination of numbers from a given list.\"\"\"\n    def helper(i, curr_sum):\n        if i == len(nums):\n            return curr_sum == target\n        return helper(i+1, curr_sum + nums[i]) or helper(i+1, curr_sum - nums[i])\n    return helper(0, 0)\ndef g(nums=[5, 10, 15]):\n    return nums\nassert f(g())\n",
        "idx_generation": 437,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if the given string is equal to the target string\"\"\"\n    return s == target\ndef g(target='hello'):\n    return target\nassert f(g())\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=2) -> bool:\n    \"\"\"Check if a number is a power of another number.\"\"\"\n    return n == a ** b\ndef g(a=10, b=2):\n    return a ** b\nassert f(g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find a number that can be formed by adding three distinct numbers from the list lst\"\"\"\n    import itertools\n    combinations = itertools.combinations(lst, 3)\n    for combo in combinations:\n        if sum(combo) == n:\n            return True\n    return False\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return sum(lst[:3])\nassert f(g())\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub='abc') -> bool:\n    \"\"\"Check if a given substring exists in the given string.\"\"\"\n    return sub in s\n\ndef g(sub='abc'):\n    s = 'defghijklmnopqrstuvwxyzabc'\n    return s\n\nassert f(g())\n",
        "idx_generation": 6,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, divisors=[2, 3, 5]) -> bool:\n    \"\"\"Check if the given number is divisible by all the divisors\"\"\"\n    return all((n % d == 0 for d in divisors))\n\ndef g(divisors=[2, 3, 5]):\n    n = math.prod(divisors)\n    return n\nassert f(g())\n",
        "idx_generation": 34,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t: str, sub: str) -> bool:\n    \"\"\"Check if it is possible to obtain string t by replacing a substring in string s with string sub\"\"\"\n    return t in s.replace(sub, '')\ndef g(s='abcdefg', t='cdef', sub='ab'):\n    return s, t, sub\nassert f(*g())\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=5, s=100) -> bool:\n    \"\"\"Find a list of n integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s\ndef g(n=5, s=100):\n    x = []\n    for i in range(n-1):\n        x.append(i+1)\n    x.append(s - sum(x))\n    return x\nassert f(g())\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if n is a prime number or not.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\ndef g(lst=[1, 2, 3, 4, 5]):\n    return max(lst)\nassert f(g())\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if there exists a substring of length n in s that consists only of unique characters.\"\"\"\n    return any(len(set(s[i:i+n])) == n for i in range(len(s)-n+1))\ndef g(n=3):\n    return \"abacabadabacaba\"\nassert f(g())\n",
        "idx_generation": 133,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(years: List[int], target=5) -> bool:\n    \"\"\"Check if the difference between the current year and any of the years in the list is equal to the target.\"\"\"\n    current_year = datetime.datetime.now().year\n    for year in years:\n        if abs(current_year - year) == target:\n            return True\n    return False\n\ndef g():\n    current_year = datetime.datetime.now().year\n    years = [current_year - i for i in range(10)]\n    return years\n\nassert f(g())\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if n is divisible by k\"\"\"\n    return n % k == 0\ndef g(k=3):\n    return k**2, k\nassert f(*g())\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x=3, y=7) -> bool:\n    \"\"\"Check if n is a perfect square and can be divided by x and y\"\"\"\n    return n % x == 0 and n % y == 0 and int(n ** 0.5) ** 2 == n\ndef g(x=3, y=7):\n    n = 0\n    while True:\n        n += 1\n        if n % x == 0 and n % y == 0 and int(n ** 0.5) ** 2 == n:\n            return n\nassert f(g())\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if any row in the matrix contains all even numbers\"\"\"\n    return any(all(num % 2 == 0 for num in row) for row in matrix)\ndef g():\n    return [[2, 4, 6], [1, 3, 5], [8, 10, 12]]\nassert f(g())\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subset of numbers in the list that sums up to the target\"\"\"\n    def helper(i, total):\n        if total == target:\n            return True\n        if i == len(nums) or total > target:\n            return False\n        return helper(i + 1, total + nums[i]) or helper(i + 1, total)\n    return helper(0, 0)\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\nassert f(g())\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='racecar') -> bool:\n    \"\"\"Check if the string is a palindrome and equal to the target.\"\"\"\n    return s == target and s == s[::-1]\ndef g(target='racecar'):\n    return target\nassert f(g())\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime, timedelta\n\ndef f(d: datetime, days=7) -> bool:\n    \"\"\"Check if the given date is exactly one week (7 days) after the current date\"\"\"\n    current_date = datetime.now().date()\n    return d.date() == current_date + timedelta(days=days)\ndef g(days=7):\n    return datetime.now() + timedelta(days=days)\nassert f(g())\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: list, target=100, k=3) -> bool:\n    \"\"\"Find if there exists a combination of k numbers that sum up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))\ndef g(target=100, k=3):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if the given character is present in the string\"\"\"\n    return char in s\ndef g(char='a'):\n    return 'Hello, World!' + char\nassert f(g())\n",
        "idx_generation": 9,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, num_list=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Check if a given number is present in the list [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]. Return True if it is,\notherwise return False.\"\"\"\n    return n in num_list\ndef g(num_list=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return num_list[2]\nassert f(g())\n",
        "idx_generation": 36,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str, s3: str, s4: str) -> bool:\n    \"\"\"Check if any two strings are anagrams of each other\"\"\"\n    strings = [s1, s2, s3, s4]\n    return any((sorted(strings[i]) == sorted(strings[j]) for i in range(len(strings)) for j in range(i+1, len(strings))))\ndef g():\n    return \"abcd\", \"dcba\", \"efgh\", \"hgef\"\nassert f(*g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=17, b=23, c=15, d=2) -> bool:\n    \"\"\"Check if n is a multiple of a, b, c, and d.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0 and n % d == 0\n\ndef g(a=17, b=23, c=15, d=2):\n    i = max(a, b, c, d)\n    while True:\n        if i % a == 0 and i % b == 0 and i % c == 0 and i % d == 0:\n            return i\n        i += 1\n\nassert f(g())\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the given number n is divisible by m and the sum of its digits is equal to m.\"\"\"\n    return n % m == 0 and sum(int(digit) for digit in str(n)) == m\ndef g(m=10):\n    for n in range(m, 1000, m):\n        if sum(int(digit) for digit in str(n)) == m:\n            return n\nassert f(g())\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=16, max_elements=4) -> bool:\n    \"\"\"Find a combination of max_elements elements from the array such that their sum is equal to the target.\"\"\"\n    assert len(arr) >= max_elements\n    from itertools import combinations\n    for comb in combinations(arr, max_elements):\n        if sum(comb) == target:\n            return True\n    return False\ndef g(target=16, max_elements=4):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 306,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Find a list of k consecutive numbers in arr\"\"\"\n    return any([arr[i:i+k] == list(range(arr[i], arr[i]+k)) for i in range(len(arr)-k+1)])\ndef g(k=3):\n    return list(range(1, 10001))\nassert f(g())\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a number is divisible by any of the prime numbers in the list.\"\"\"\n    return any((n % p == 0 for p in primes))\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return primes[-1] + 1\nassert f(g())\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=10) -> bool:\n    \"\"\"Find a number in the list that is divisible by n.\"\"\"\n    return any(num % n == 0 for num in nums)\ndef g(n=10):\n    return list(range(1, n + 1))\nassert f(g())\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(m: List[List[int]], k=2) -> bool:\n    \"\"\"Determine if the sum of each row in the matrix is at least k.\"\"\"\n    return all((sum(row) >= k for row in m))\ndef g(m=[[1, 2], [3, 4], [5, 6], [7, 8]]):\n    return m\nassert f(g())\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=7) -> bool:\n    \"\"\"Check if there is a subsequence in the list that adds up to n\"\"\"\n    def isSubsetSum(nums, n, target):\n        if target == 0:\n            return True\n        if n == 0 and target != 0:\n            return False\n        if nums[n-1] > target:\n            return isSubsetSum(nums, n-1, target)\n        return isSubsetSum(nums, n-1, target) or isSubsetSum(nums, n-1, target-nums[n-1])\n    return isSubsetSum(nums, len(nums), n)\ndef g(n=7):\n    return [2, 3, 1, 4, 5]\nassert f(g())\n",
        "idx_generation": 457,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int=2) -> bool:\n    \"\"\"Check if a string contains at least n occurrences of the letter 'a'.\"\"\"\n    return s.count('a') >= n\ndef g(n: int=2):\n    return 'banana' * n\nassert f(g(), n=2)\n",
        "idx_generation": 332,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Partition Equal Subset Sum\nGiven a list of non-negative integers, find if it can be partitioned into two subsets such that the sum of elements in both subsets is equal.\n\"\"\"\n    total_sum = sum(nums)\n    if total_sum % 2 != 0:\n        return False\n    target = total_sum // 2\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j >= nums[i - 1]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\ndef g(target_sum=100):\n    return [25, 25, 25, 25]\nassert f(g())\n",
        "idx_generation": 368,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, length=5) -> bool:\n    \"\"\"Given a list of integers, find a subsequence of length `length` that sums up to `target`.\"\"\"\n    from itertools import combinations\n    for comb in combinations(nums, length):\n        if sum(comb) == target:\n            return True\n    return False\ndef g(length=5):\n    return length\nassert f([1, 2, 3, 4, 5, 6, 7, 8, 9], 15, g())\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string contains exactly n vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count == n\n\ndef g(n=3):\n    s = 'Hello, world!'\n    return s\n\nassert f(g())\n",
        "idx_generation": 12,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9]\n\nassert f(g())\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']) -> bool:\n    \"\"\"Check if a string contains all the words in a given list\"\"\"\n    return all((word in s for word in words))\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']):\n    return ' '.join(words)\nassert f(g())\n",
        "idx_generation": 103,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if it is possible to select three elements from the array such that their sum is equal to the target.\n    - arr is a list of integers\n    - target is the desired sum\"\"\"\n    def helper(curr_sum: int, count: int) -> bool:\n        if count == 3:\n            return curr_sum == target\n        for i in range(len(arr)):\n            if helper(curr_sum + arr[i], count + 1):\n                return True\n        return False\n    return helper(0, 0)\ndef g(arr: List[int], target=0):\n    random.shuffle(arr)\n    return arr\nassert f(g([1, 2, 3, 4, 5, 6, 7, 8, 9]), target=15)\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_len=6, max_reps=2) -> bool:\n    \"\"\"Check if there is a substring of length target_len that appears at least max_reps times in s.\"\"\"\n    n = len(s)\n    for i in range(n - target_len + 1):\n        substring = s[i:i + target_len]\n        if s.count(substring) >= max_reps:\n            return True\n    return False\ndef g(target_len=6, max_reps=2):\n    return 'abcdefg' * max_reps\nassert f(g())\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a subset of numbers in the list that add up to the target value.\"\"\"\n    from itertools import combinations\n    for i in range(len(nums)):\n        for comb in combinations(nums, i):\n            if sum(comb) == target:\n                return True\n    return False\ndef g(target=100):\n    return [23, 7, 12, 45, 9, 55, 17]\nassert f(g())\n",
        "idx_generation": 306,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: list) -> bool:\n    \"\"\"Check if a list contains any duplicate elements\"\"\"\n    return len(nums) != len(set(nums))\ndef g():\n    return [1, 2, 3, 4, 5, 5]\nassert f(g())\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Find a list of numbers that can be multiplied together to reach the target number\"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product == target\ndef g(target=50):\n    return [2, 5, 5]\nassert f(g())\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(p: str, q='aieoubcdfghjklmnprstvwxyz', r='aieou') -> bool:\n    \"\"\"Check if string p contains only consonants and at least one vowel\"\"\"\n    return all(c in q for c in p) and any(c in r for c in p)\ndef g(q='aieoubcdfghjklmnprstvwxyz', r='aieou'):\n    return q\nassert f(g())\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(num: int) -> bool:\n    \"\"\"Check if num is a perfect square\"\"\"\n    return sqrt(num).is_integer()\n\ndef g():\n    return 144\n\nassert f(g())\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a subsequence in the list where the sum of the elements is equal to the target.\"\"\"\n    def dfs(i, curr_sum):\n        if curr_sum == target:\n            return True\n        if i == len(nums) or curr_sum > target:\n            return False\n        return dfs(i + 1, curr_sum + nums[i]) or dfs(i + 1, curr_sum)\n\n    return dfs(0, 0)\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    \"\"\"Generate a palindrome string with length between 5 and 10.\"\"\"\n    import random\n    import string\n    length = random.randint(5, 10)\n    letters = string.ascii_lowercase\n    half_length = length // 2\n    first_half = ''.join(random.choice(letters) for _ in range(half_length))\n    second_half = first_half[::-1] if length % 2 == 0 else first_half[:-1][::-1]\n    return first_half + second_half\n\nassert f(g())\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, m=4, target=24) -> bool:\n    \"\"\"Check if it is possible to obtain the target value by combining the numbers n, m, and any of the four basic arithmetic operations (+, -, *, /).\"\"\"\n    return target in [n + m, n - m, n * m, n / m, m - n, m / n, m + n, m * n]\n\ndef g(m=4, target=24):\n    n = math.ceil(target / m)\n    return n\n\nassert f(g())\n",
        "idx_generation": 371,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(words: List[str], target_length=10, max_words=3, options=['cat', 'dog', 'bird', 'elephant', 'tiger']) -> bool:\n    \"\"\"Find a combination of at most max_words words whose concatenated length is the target_length value.\"\"\"\n    for w in words:\n        assert w in options\n    return len(words) <= max_words and len(''.join(words)) == target_length\ndef g(target_length=10, max_words=3, options=['cat', 'dog', 'bird', 'elephant', 'tiger']):\n    from itertools import combinations\n    for n in range(max_words + 1):\n        for c in combinations(options, n):\n            if len(''.join(c)) == target_length:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], n=3, prefix='a') -> bool:\n    \"\"\"Count the number of words in the list that start with a specific prefix, and check if the count is equal to n.\"\"\"\n    return sum(w.startswith(prefix) for w in words) == n\ndef g(n=3, prefix='a'):\n    return ['apple', 'banana', 'avocado', 'apricot', 'kiwi', 'pineapple']\nassert f(g())\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that multiply to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] * numbers[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target//9]\n\nassert f(g())\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date_str: str, format_str: str) -> bool:\n    \"\"\"Check if the given date string matches the specified format string.\"\"\"\n    try:\n        datetime.strptime(date_str, format_str)\n        return True\n    except ValueError:\n        return False\n\ndef g(format_str: str):\n    return datetime.now().strftime(format_str)\n\nassert f(g(\"%Y-%m-%d %H:%M:%S\"), \"%Y-%m-%d %H:%M:%S\")\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Given a list of integers, determine if there exists a subset whose sum is divisible by 3.\"\"\"\n    n = len(li)\n    dp = [[False] * 3 for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        for j in range(3):\n            dp[i][j] = dp[i - 1][j] or dp[i - 1][(j - li[i - 1] % 3) % 3]\n    return dp[n][0]\ndef g():\n    return [3, 1, 2, 4, 3]\nassert f(g())\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(cipher: str, target=3) -> bool:\n    \"\"\"Find a string where the number of distinct characters is a given constant\"\"\"\n    unique_chars = set(cipher)\n    return len(unique_chars) == target\ndef g(target=3):\n    return \"abc\" * target\nassert f(g())\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], k=3, target=7) -> bool:\n    \"\"\"Find if there are k numbers in the list that sum up to the target value.\"\"\"\n    from itertools import combinations\n    for combo in combinations(numbers, k):\n        if sum(combo) == target:\n            return True\n    return False\ndef g(k=3, target=7):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g())\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target_sum=10) -> bool:\n    \"\"\"Check if any two numbers in a list add up to a target sum\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7]\nassert f(g())\n",
        "idx_generation": 357,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=3) -> bool:\n    \"\"\"Check if the remainder of dividing a by b is equal to n\"\"\"\n    return a % b == n\ndef g(a=10, b=3):\n    return a % b\nassert f(g())\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    return any(target - x in lst for x in lst)\ndef g(target=10):\n    return [2, 8]\nassert f(g())\n",
        "idx_generation": 369,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=1000) -> bool:\n    \"\"\"Find a subset of numbers whose sum is equal to the target sum.\"\"\"\n    def helper(nums, target_sum, curr_sum, index):\n        if curr_sum == target_sum:\n            return True\n        if index >= len(nums):\n            return False\n        include = helper(nums, target_sum, curr_sum + nums[index], index + 1)\n        exclude = helper(nums, target_sum, curr_sum, index + 1)\n        return include or exclude\n    \n    return helper(nums, target_sum, 0, 0)\n\ndef g(target_sum=1000):\n    return [100, 200, 300, 400, 500]\n\nassert f(g())\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='racecar', reverse=False) -> bool:\n    \"\"\"Either reverse a string or don't based on the reverse flag\"\"\"\n    return (s[::-1] == target) == reverse\ndef g(target='racecar', reverse=False):\n    return target[::-1] if reverse else target + 'x'\nassert f(g())\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], n=10, s=100) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])\ndef g(n=10, s=100):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g())\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, n=3) -> bool:\n    \"\"\"Find a combination of n numbers from a list that adds up to the target.\"\"\"\n    from itertools import combinations\n    for c in combinations(nums, n):\n        if sum(c) == target:\n            return True\n    return False\ndef g(target=10, n=3):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 204,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int, k: int) -> bool:\n    \"\"\"Check if the string s has exactly n occurrences of the character 'a' and k occurrences of the character 'b'.\"\"\"\n    return s.count('a') == n and s.count('b') == k\n\ndef g(n: int, k: int):\n    return 'a' * n + 'b' * k\n\nassert f(g(3, 2), 3, 2)\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find four numbers in a list that add up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                for l in range(k + 1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return True\n    return False\ndef g(nums: List[int] = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    return nums\nassert f(g())\n",
        "idx_generation": 42,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word=\"python\") -> bool:\n    \"\"\"Given a list of words, check if the target word is an anagram of any word in the list.\"\"\"\n    return any(sorted(word) == sorted(target_word) for word in words)\ndef g(target_word=\"python\"):\n    return ['typhon', 'phyton', 'phtyon', 'pyhton', 'pyhton']\nassert f(g())\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\ndef f(num_list: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there is a subset of num_list that sums up to the target_sum.\"\"\"\n    n = len(num_list)\n    dp = [[False for _ in range(target_sum + 1)] for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if num_list[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - num_list[i - 1]]\n    return dp[n][target_sum]\n\ndef g(target_sum=100):\n    num_list = [random.randint(1, 50) for _ in range(10)]\n    return num_list\n\nassert f(g())\n",
        "idx_generation": 415,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Given a string s, find a substring of length k that contains all unique characters.\"\"\"\n    return len(set(s[:k])) == k\ndef g(k=3):\n    return 'abc' * k\nassert f(g())\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the given string is a palindrome when reversed and repeated n times.\"\"\"\n    return s == s[::-1] and s * n == s[::-1] * n\ndef g(n=5):\n    return \"racecar\"\nassert f(g())\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers in the list that add up to the target\"\"\"\n    from itertools import combinations\n    return any((sum(comb) == target for comb in combinations(nums, 3)))\ndef g(target=100):\n    return [x for x in range(1, target)]\nassert f(g())\n",
        "idx_generation": 367,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(t: int, s=5) -> bool:\n    \"\"\"Given an integer t, determine if it is a prime number.\nSample Input:\nt = 7\nSample Output:\nTrue\"\"\"\n    if t < 2:\n        return False\n    for i in range(2, int(t**0.5) + 1):\n        if t % i == 0:\n            return False\n    return True\ndef g(s=5):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return random.choice(primes)\nassert f(g())\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number n is present in the array arr\"\"\"\n    return n in arr\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr[5]\nassert f(g())\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find a path in the matrix that sums up to the target value.\"\"\"\n    def helper(matrix, target, curr_sum, row, col):\n        if curr_sum == target:\n            return True\n        if row >= len(matrix) or col >= len(matrix[0]):\n            return False\n        include = helper(matrix, target, curr_sum + matrix[row][col], row + 1, col)\n        exclude = helper(matrix, target, curr_sum + matrix[row][col], row, col + 1)\n        return include or exclude\n    \n    return helper(matrix, target, 0, 0, 0)\n\ndef g(target=0):\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, -15]]\n\nassert f(g())\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, pattern=\"abc\") -> bool:\n    \"\"\"Check if the given string matches the pattern\"\"\"\n    return s == pattern\ndef g(pattern=\"abc\"):\n    return pattern\nassert f(g())\n",
        "idx_generation": 369,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=0) -> bool:\n    \"\"\"Check if there exists a subset of numbers that adds up to the target_sum\"\"\"\n    def helper(numbers, target_sum, i):\n        if target_sum == 0:\n            return True\n        if i >= len(numbers):\n            return False\n        if numbers[i] > target_sum:\n            return helper(numbers, target_sum, i+1)\n        return helper(numbers, target_sum - numbers[i], i+1) or helper(numbers, target_sum, i+1)\n    return helper(numbers, target_sum, 0)\ndef g(numbers=[1, 2, 3, 4, 5], target_sum=9):\n    return numbers, target_sum\nassert f(g())\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two distinct numbers from the list that sum up to the target\"\"\"\n    return any(sum(comb) == target for comb in combinations(nums, 2))\ndef g(target=10):\n    return [1, target-1]\nassert f(g())\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, length=0, num_vowels=0) -> bool:\n    \"\"\"Check if a string contains exactly num_vowels vowels and has length equal to length.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = sum(1 for char in s if char in vowels)\n    return len(s) == length and vowel_count == num_vowels\ndef g(length=0, num_vowels=0):\n    import random\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = ''.join(random.choices(vowels + ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'], k=length))\n    vowel_count = sum(1 for char in s if char in vowels)\n    while vowel_count != num_vowels:\n        s = ''.join(random.choices(vowels + ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'], k=length))\n        vowel_count = sum(1 for char in s if char in vowels)\n    return s\nassert f(g())\n",
        "idx_generation": 29,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17]) -> bool:\n    \"\"\"Given a number n, return True if n is a prime number, otherwise return False.\"\"\"\n    return n > 1 and all(n % p != 0 for p in primes)\ndef g(primes=[2, 3, 5, 7, 11, 13, 17]):\n    return primes[-1] + 2\nassert f(g())\n",
        "idx_generation": 42,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, strings=['vekykothumygochuth', 'xujatajazisiqu', 'vapyvymobymethotexto', 'tygope', 'g', 'ripalotextaj', 'tecehuthojodogucivaj', 'xyjulecometihesej', 'ribo', 'gutachowagexatoset'], c='o') -> bool:\n    \"\"\"Check if the character c appears in the alphabetically last string in the list.\"\"\"\n    return c in strings[-1]\ndef g(strings=['vekykothumygochuth', 'xujatajazisiqu', 'vapyvymobymethotexto', 'tygope', 'g', 'ripalotextaj', 'tecehuthojodogucivaj', 'xyjulecometihesej', 'ribo', 'gutachowagexatoset'], c='o'):\n    return sorted(strings)[-1]\nassert f(g())\n",
        "idx_generation": 127,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a sublist of numbers whose sum is equal to the target\"\"\"\n    return any((sum(nums[i:j]) == target for i in range(len(nums)) for j in range(i + 1, len(nums) + 1)))\ndef g(target=100):\n    return [30, 10, 20, 40, 50, 15] if target == 115 else [10, 20, 30, 40, 50]\nassert f(g())\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], a=1, b=100, target=50) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target number\"\"\"\n    return any(target - n in nums for n in nums)\ndef g(a=1, b=100, target=50):\n    return [n for n in range(a, b + 1)]\nassert f(g())\n",
        "idx_generation": 142,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target_sum\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target_sum) for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(target_sum=10):\n    return [1, 2, target_sum - 3]\nassert f(g())\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    return any((target - num) in nums for num in nums)\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(x: List[int], n=10, s=100) -> bool:\n    \"\"\"Find a list of n distinct integers that sum up to s and the product of all elements is greater than 1000\"\"\"\n    return len(x) == n and sum(x) == s and (len(set(x)) == n) and (math.prod(x) > 1000)\ndef g(n=10, s=100):\n    x = [i for i in range(1, n)]\n    x.append(s - sum(x))\n    return x\nassert f(g())\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100, length=10) -> bool:\n    \"\"\"Given a list of numbers, find a subsequence of a given length that adds up to a target number.\"\"\"\n    return sum(nums) == target and len(nums) == length\ndef g(target=100, length=10):\n    return [target // length] * length\nassert f(g())\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if a given string contains all the characters of the target string in the same order.\"\"\"\n    i = 0\n    for char in s:\n        if char == target[i]:\n            i += 1\n        if i == len(target):\n            return True\n    return False\ndef g(target='python'):\n    return 'pythoon'\nassert f(g())\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='Hello, World!') -> bool:\n    \"\"\"Given a string, check if it is equal to the target string\"\"\"\n    return s == target\ndef g(target='Hello, World!'):\n    return 'Hello, World!'\nassert f(g())\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=0) -> bool:\n    \"\"\"Check if there exists a subset of numbers that adds up to the target_sum\"\"\"\n    def helper(numbers, target_sum, i):\n        if target_sum == 0:\n            return True\n        if i >= len(numbers):\n            return False\n        if numbers[i] > target_sum:\n            return helper(numbers, target_sum, i+1)\n        return helper(numbers, target_sum - numbers[i], i+1) or helper(numbers, target_sum, i+1)\n    return helper(numbers, target_sum, 0)\ndef g(numbers=[1, 2, 3, 4, 5], target_sum=7):\n    return numbers, target_sum\nassert f(g())\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(num: int, target=8, factors=[2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if a number can be expressed as the sum of any combination of the given factors.\"\"\"\n    from itertools import combinations_with_replacement\n    for n in range(len(factors) + 1):\n        for c in combinations_with_replacement(factors, n):\n            if sum(c) == target:\n                return True\n    return False\ndef g(target=8, factors=[2, 3, 4, 5, 6]):\n    return target\nassert f(g())\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='e') -> bool:\n    \"\"\"Count the number of occurrences of a given character in the string 's' and check if it is greater than or\nequal to 3. Return True if it is, otherwise return False.\"\"\"\n    count = 0\n    for c in s:\n        if c == char:\n            count += 1\n    return count >= 3\ndef g(char='e'):\n    return f'Spell the word with the letter \"{char}\" three times'\nassert f(g())\n",
        "idx_generation": 36,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, li=[1, 2, 3, 4, 5], target=6) -> bool:\n    \"\"\"Find a pair of numbers in a list that add up to a given target\"\"\"\n    for i in range(len(li)):\n        for j in range(i + 1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False\ndef g(li=[1, 2, 3, 4, 5], target=6):\n    return li[0], li[3]\nassert f(g())\n",
        "idx_generation": 47,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='apple') -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substr in s\ndef g(substr='apple'):\n    s = \"I have an apple\"\n    return s\nassert f(g())\n",
        "idx_generation": 134,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(numbers: list, target=100) -> bool:\n    \"\"\"Given a list of numbers, find a subset of numbers that adds up to the target value.\"\"\"\n    n = len(numbers)\n    subset_sum = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n    for i in range(n + 1):\n        subset_sum[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < numbers[i - 1]:\n                subset_sum[i][j] = subset_sum[i - 1][j]\n            else:\n                subset_sum[i][j] = subset_sum[i - 1][j] or subset_sum[i - 1][j - numbers[i - 1]]\n    return subset_sum[n][target]\n\ndef g(target=100):\n    return random.choices(range(1, 101), k=10)\n\nassert f(g())\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target=5) -> bool:\n    \"\"\"Find the number of elements in the list that are greater than the target number.\"\"\"\n    return len([num for num in x if num > target]) > 0\ndef g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 146,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if the given string s contains at least n consecutive vowels\"\"\"\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(n=4):\n    return 'ae' * n + 'cde'\n\nassert f(g())\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"Find the words in the list that have a length greater than or equal to the target_length.\"\"\"\n    return all((len(word) >= target_length for word in words))\ndef g(target_length=5):\n    words = [\"apple\", \"banana\", \"cat\", \"dog\", \"elephant\"]\n    return [word for word in words if len(word) >= target_length]\nassert f(g())\n",
        "idx_generation": 378,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], a=100, b=10) -> bool:\n    \"\"\"Check if all numbers in a list are divisible by a given number\"\"\"\n    return all(num % a == 0 for num in x)\ndef g(a=100, b=10):\n    return [a * b, a * b * 2, a * b * 3, a * b * 4, a * b * 5]\nassert f(g())\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=\"Python\") -> bool:\n    \"\"\"Check if the given string contains the target substring\"\"\"\n    return target in s\n\ndef g(target=\"Python\"):\n    return \"I love Python programming\"\n\nassert f(g())\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if n is a Fibonacci number.\"\"\"\n    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b\n    return b == n\ndef g():\n    return 34\nassert f(g())\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if a string contains a specific substring\"\"\"\n    return substring in s\n\ndef g(substring='python'):\n    return \"I love python programming\"\n\nassert f(g())\n",
        "idx_generation": 378,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(numbers: List[int], target=25, tolerance=0.01) -> bool:\n    \"\"\"Find a list of numbers whose product is closest to a target number,\n    within a given tolerance.\"\"\"\n    \n    product = math.prod(numbers)\n    return math.isclose(product, target, rel_tol=tolerance)\n\ndef g(target=25, tolerance=0.01):\n    numbers = [1, target]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, char='a') -> bool:\n    \"\"\"Check if a specific character appears n times in a string.\"\"\"\n    return s.count(char) == n\ndef g(n=3, char='a'):\n    return char * n\nassert f(g())\n",
        "idx_generation": 231,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(string: str, target=\"python\") -> bool:\n    \"\"\"Check if a given string can be formed by rearranging the letters of a target string\"\"\"\n    target_list = list(target)\n    for perm in itertools.permutations(target_list):\n        if ''.join(perm) == string:\n            return True\n    return False\n\ndef g(target=\"python\"):\n    return target\n\nassert f(g())\n",
        "idx_generation": 45,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if any two numbers in the list sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word_list: List[str], prefix='pre') -> bool:\n    \"\"\"Find a word in the word_list that starts with the given prefix\"\"\"\n    for word in word_list:\n        if word.startswith(prefix):\n            return True\n    return False\n\ndef g(prefix='pre'):\n    word_list = ['prefix', 'preparation', 'post', 'suffix']\n    return word_list\n\nassert f(g())\n",
        "idx_generation": 134,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find three different integers in the array that sum up to the target.\"\"\"\n    return any([arr[i] + arr[j] + arr[k] == target for i in range(len(arr)) for j in range(i+1, len(arr)) for k in range(j+1, len(arr))])\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char_count=3) -> bool:\n    \"\"\"Check if the given string has exactly char_count occurrences of a specific character\"\"\"\n    return s.count('a') == char_count\ndef g(char_count=3):\n    return 'a' * char_count + 'b'\nassert f(g())\n",
        "idx_generation": 153,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that add up to the target value.\"\"\"\n    from itertools import combinations\n    for row in matrix:\n        for c in combinations(row, 2):\n            if sum(c) == target:\n                return True\n    return False\ndef g(target=5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Find if there exist two distinct indices i and j in nums such that nums[i] + nums[j] == target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=9):\n    return [2, 3, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 388,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the matrix that sums up to the target value.\"\"\"\n    return any((x + y == target) for row in matrix for x in row for y in row)\ndef g():\n    return [[10, 5], [6, 8]]\nassert f(g())\n",
        "idx_generation": 380,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if the target number exists in the given matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5):\n    return matrix\nassert f(g())\n",
        "idx_generation": 473,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Given a list of 4 integers, determine if it is possible to combine them using the operations +, -, *, and / to obtain the target value of 24.\"\"\"\n    assert len(nums) == 4, 'The list must have exactly 4 integers'\n    def helper(nums):\n        if len(nums) == 1:\n            return nums[0] == target\n        else:\n            for i in range(len(nums)):\n                for j in range(i+1, len(nums)):\n                    a, b = nums[i], nums[j]\n                    remaining = [x for x in nums if x != a and x != b]\n                    if helper(remaining + [a + b]):\n                        return True\n                    if helper(remaining + [a - b]):\n                        return True\n                    if helper(remaining + [b - a]):\n                        return True\n                    if helper(remaining + [a * b]):\n                        return True\n                    if b != 0 and helper(remaining + [a / b]):\n                        return True\n                    if a != 0 and helper(remaining + [b / a]):\n                        return True\n            return False\n    return helper(nums)\ndef g(target=24):\n    return [4, 6, 7, 5]\nassert f(g())\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a given string repeats itself exactly n times.\"\"\"\n    return s * n == s + s + s\ndef g(n=3):\n    return 'abc'\nassert f(g())\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='hello', count=3) -> bool:\n    \"\"\"Find a string that contains at least count copies of the given substring\"\"\"\n    return string.count(substring) >= count\ndef g(substring='hello', count=3):\n    return substring * count\nassert f(g())\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, lst=['apple', 'banana', 'orange', 'grapefruit', 'watermelon', 'mango'], num=2) -> bool:\n    \"\"\"Check if the string s contains at least num fruit names from the list lst\"\"\"\n    count = 0\n    for fruit in lst:\n        if fruit in s:\n            count += 1\n            if count >= num:\n                return True\n    return False\ndef g(lst=['apple', 'banana', 'orange', 'grapefruit', 'watermelon', 'mango'], num=2):\n    return ''.join(lst)\nassert f(g())\n",
        "idx_generation": 54,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst: list) -> bool:\n    \"\"\"Check if n is in the list\"\"\"\n    return n in lst\n\ndef g(lst):\n    random.shuffle(lst)\n    return lst\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(5, g(lst))\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(year: int, month: int, day: int, day_of_week='Sunday') -> bool:\n    \"\"\"Check if a given date falls on a specific day of the week.\"\"\"\n    given_date = datetime.date(year, month, day)\n    return given_date.strftime(\"%A\") == day_of_week\n\ndef g(year=2022, month=1, day=1, day_of_week='Saturday'):\n    return year, month, day, day_of_week\n\nassert f(*g())\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target_sum=100) -> bool:\n    \"\"\"Find a combination of n positive integers that add up to the target sum\"\"\"\n    def find_combination(current_sum, current_nums, remaining_nums):\n        if current_sum == target_sum and len(current_nums) == n:\n            return True\n        if current_sum > target_sum or len(current_nums) > n:\n            return False\n        for num in remaining_nums:\n            if find_combination(current_sum + num, current_nums + [num], remaining_nums):\n                return True\n        return False\n    return find_combination(0, [], list(range(1, target_sum + 1)))\ndef g(target_sum=100):\n    return target_sum // 2\nassert f(g())\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target_sum=10, num_elements=3) -> bool:\n    \"\"\"Find if there exists a combination of a given number of elements in a list that adds up to a target sum\"\"\"\n    from itertools import combinations\n    for combination in combinations(numbers, num_elements):\n        if sum(combination) == target_sum:\n            return True\n    return False\n\ndef g(target_sum=10, num_elements=3):\n    numbers = [1, 2, 3, 4, 5]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 155,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(arr: list, target=10, n=3) -> bool:\n    \"\"\"Given a list of integers, find if there exists a subset of the list such that the sum of its elements is equal to the target.\n       The subset should have exactly n elements.\"\"\"\n    from itertools import combinations\n    for subset in combinations(arr, n):\n        if sum(subset) == target:\n            return True\n    return False\n\ndef g(target=10, n=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there is a pair of numbers in the list that add up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n    \nassert f(g())\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x=2, y=3, z=4) -> bool:\n    \"\"\"Find a number that is divisible by x, y, and z\"\"\"\n    return n % x == 0 and n % y == 0 and n % z == 0\ndef g(x=2, y=3, z=4):\n    return x * y * z\nassert f(g())\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, a=5, b=12) -> bool:\n    \"\"\"Check if x is a factor of a and if b is a multiple of x\"\"\"\n    return a % x == 0 and b % x == 0\n\ndef g(a=5, b=12):\n    return math.gcd(a, b)\n\nassert f(g())\n",
        "idx_generation": 473,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], rows=3, cols=3) -> bool:\n    \"\"\"Given a 2D matrix and dimensions (rows and cols), determine if it is possible to find a path from the top-left corner to the bottom-right corner by moving only right or down. The path should only pass through cells that contain a 1.\"\"\"\n    assert len(matrix) == rows, 'The number of rows in the matrix should match the specified value'\n    assert all(len(row) == cols for row in matrix), 'All rows in the matrix should have the same number of columns'\n    def helper(row, col):\n        if row == rows - 1 and col == cols - 1:\n            return matrix[row][col] == 1\n        if row >= rows or col >= cols:\n            return False\n        if matrix[row][col] == 0:\n            return False\n        return helper(row + 1, col) or helper(row, col + 1)\n    return helper(0, 0)\ndef g(rows=3, cols=3):\n    return [[1, 1, 0], [1, 0, 1], [1, 1, 1]]\nassert f(g())\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if all words in the list start with the given prefix\"\"\"\n    return all(word.startswith(prefix) for word in words)\n    \ndef g(prefix='pre'):\n    return ['prefix', 'preposition', 'preview', 'preference']\n    \nassert f(g())\n",
        "idx_generation": 428,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target_length=3) -> bool:\n    \"\"\"Find a combination of target_length numbers from the list that adds up to 100.\"\"\"\n    for comb in combinations(nums, target_length):\n        if sum(comb) == 100:\n            return True\n    return False\n\ndef g(target_length=3):\n    return [i for i in range(1, 101)]\n\nassert f(g())\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, c='e') -> bool:\n    \"\"\"Check if the string contains exactly n occurrences of the character c\"\"\"\n    count = 0\n    for char in s:\n        if char == c:\n            count += 1\n    return count == n\n\ndef g(n=3, c='e'):\n    return c * n\n\nassert f(g())\n",
        "idx_generation": 91,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Find a list of integers that when multiplied by 2 and sorted in ascending order gives [2, 4, 6, 8, 10].\"\"\"\n    return sorted([x * 2 for x in lst]) == [2, 4, 6, 8, 10]\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, pattern='abc') -> bool:\n    \"\"\"Find a string that contains a given pattern\"\"\"\n    return pattern in string\ndef g(pattern='abc'):\n    return 'xyz' + pattern + 'def'\nassert f(g())\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(array: list, num=10) -> bool:\n    \"\"\"Check if the sum of any three numbers in the array is equal to the given number\"\"\"\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            for k in range(j+1, len(array)):\n                if array[i] + array[j] + array[k] == num:\n                    return True\n    return False\ndef g(num=10):\n    return [1, 3, 4, 6, 8, 9]\nassert f(g())\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=1000) -> bool:\n    \"\"\"Find a subset of numbers that add up to a target value\"\"\"\n    return sum(nums) == target\ndef g(target=1000):\n    return [target]\nassert f(g())\n",
        "idx_generation": 157,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Check if the string s is a palindrome\"\"\"\n    return s == s[::-1]\ndef g(n=10):\n    s = \"racecar\"\n    return s\nassert f(g())\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport itertools\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers, find a combination of numbers that adds up to the target value\"\"\"\n    for r in range(1, len(nums) + 1):\n        for combination in itertools.combinations(nums, r):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(length=10, target=100):\n    nums = random.sample(range(1, 100), length)\n    return nums, target\nassert f(*g())\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17]) -> bool:\n    \"\"\"Check if the given number n is divisible by all prime numbers in the list primes.\"\"\"\n    for prime in primes:\n        if n % prime != 0:\n            return False\n    return True\ndef g(primes=[2, 3, 5, 7, 11, 13, 17]):\n    n = 1\n    for prime in primes:\n        n *= prime\n    return n\nassert f(g())\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if the target value is present in the matrix.\"\"\"\n    for row in matrix:\n        assert len(row) == len(matrix[0])\n    return any(target in row for row in matrix)\ndef g(target=5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers, determine if it is possible to find a subset of the list that sums up to the target value.\"\"\"\n    def helper(nums, target, index, current_sum):\n        if current_sum == target:\n            return True\n        if current_sum > target or index >= len(nums):\n            return False\n        return helper(nums, target, index + 1, current_sum + nums[index]) or helper(nums, target, index + 1, current_sum)\n    return helper(nums, target, 0, 0)\ndef g(target=0):\n    return [2, 4, 6, 8]\nassert f(g())\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc', strings=['abccba', 'bacabc', 'aabbcc', 'abcabc', 'ababab']) -> bool:\n    \"\"\"Check if a string is a substring of any string in the list.\"\"\"\n    return any(substr in string for string in strings) and s == substr\ndef g(substr='abc', strings=['abccba', 'bacabc', 'aabbcc', 'abcabc', 'ababab']):\n    return substr\nassert f(g())\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5, m=3) -> bool:\n    \"\"\"Given a string s, find a substring of length n that contains at least m distinct characters.\"\"\"\n    return any(len(set(s[i:i+n])) >= m for i in range(len(s) - n + 1))\ndef g(n=5, m=3):\n    return \"abccba\"*m\nassert f(g())\n",
        "idx_generation": 258,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=0) -> bool:\n    \"\"\"Find a string that is a palindrome of s and has n extra characters in the middle\"\"\"\n    return s + s[::-1] == s[:len(s)//2+n] + s[len(s)//2:len(s)//2+n] + s[len(s)//2+n:][::-1]\ndef g(n=0):\n    return 'a' * n\nassert f(g())\n",
        "idx_generation": 99,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, prime=False) -> bool:\n    \"\"\"Check if a given number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 13\n\nassert f(g(), prime=True)\n",
        "idx_generation": 56,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, lst=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Check if a given string s is a substring of any of the strings in the list lst.\"\"\"\n    return any(s in word for word in lst)\ndef g(lst=['apple', 'banana', 'cherry', 'date']):\n    return lst[2][:3]\nassert f(g())\n",
        "idx_generation": 144,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi', 'jkl']) -> bool:\n    \"\"\"Check if all substrings are present in the given string\"\"\"\n    return all(sub in s for sub in substrings)\ndef g(substrings=['abc', 'def', 'ghi', 'jkl']):\n    return ''.join(substrings)\nassert f(g())\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string is a palindrome of length n.\"\"\"\n    return len(s) == n and s == s[::-1]\ndef g(n=3):\n    from itertools import product\n    for chars in product(\"abcdefghijklmnopqrstuvwxyz\", repeat=n):\n        word = \"\".join(chars)\n        if word == word[::-1]:\n            return word\nassert f(g())\n",
        "idx_generation": 415,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=4, substr='abc') -> bool:\n    \"\"\"Find the number of occurrences of a substring in a string, up to a given limit.\"\"\"\n    return string.count(substr) <= n\ndef g(n=4, substr='abc'):\n    return substr * n\nassert f(g())\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\ndef f(x: int, a=10, b=100) -> bool:\n    \"\"\"Check if the given number is a prime number\"\"\"\n    if x < 2:\n        return False\n    for i in range(2, int(x ** 0.5) + 1):\n        if x % i == 0:\n            return False\n    return True\ndef g(a=10, b=100):\n    return random.choice([i for i in range(a, b + 1) if f(i)])\nassert f(g())\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target='python') -> bool:\n    \"\"\"Check if the target string is a subsequence of the given string.\"\"\"\n    def is_subsequence(string, target):\n        if len(target) == 0:\n            return True\n        if len(string) == 0:\n            return False\n        if string[0] == target[0]:\n            return is_subsequence(string[1:], target[1:])\n        return is_subsequence(string[1:], target)\n\n    return is_subsequence(string, target)\n\ndef g(string='pythonic'):\n    return string\n\nassert f(g())\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a subset of numbers that adds up to the target value.\"\"\"\n    def subset_sum(numbers, target):\n        if target == 0:\n            return True\n        if not numbers or target < 0:\n            return False\n        return subset_sum(numbers[1:], target - numbers[0]) or subset_sum(numbers[1:], target)\n\n    return subset_sum(numbers, target)\n\ndef g(numbers=[10, 20, 30, 40, 50]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0, num_elements=2) -> bool:\n    \"\"\"Find num_elements elements in nums that sum up to the target.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, num_elements))\ndef g(target=0, num_elements=2):\n    return [target] * num_elements\nassert f(g())\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc', count=5) -> bool:\n    \"\"\"Count the number of occurrences of a substring in a string\"\"\"\n    return s.count(substr) == count\ndef g(substr='abc', count=5):\n    ans = substr * count\n    return ans\nassert f(g())\n",
        "idx_generation": 99,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by all the given factors.\"\"\"\n    return all(n % factor == 0 for factor in factors)\ndef g(factors=[2, 3, 5]):\n    n = 1\n    for factor in factors:\n        n *= factor\n    return n\nassert f(g())\n",
        "idx_generation": 60,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n=50) -> bool:\n    \"\"\"Check if there exists two numbers in the list lst whose sum is equal to n.\"\"\"\n    return any(n - num in lst for num in lst)\ndef g(n=50):\n    return [20, 30, 40, 10, 25, 35]\nassert f(g())\n",
        "idx_generation": 144,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word_list: List[str], letter='a') -> bool:\n    \"\"\"Check if all words in the list start with the given letter\"\"\"\n    for word in word_list:\n        if word[0] != letter:\n            return False\n    return True\n\ndef g(letter='a'):\n    return ['apple', 'ant', 'avocado']\n\nassert f(g())\n",
        "idx_generation": 168,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if there exists a substring of length n in s that contains only unique characters\"\"\"\n    substrings = [s[i:i+n] for i in range(len(s)-n+1)]\n    for sub in substrings:\n        if len(set(sub)) == n:\n            return True\n    return False\n\ndef g(n=3):\n    s = \"abracadabra\"\n    return s\n\nassert f(g())\n",
        "idx_generation": 433,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"Check if there is a row or column in the matrix that contains exactly n number of zeros.\"\"\"\n    rows = [sum(1 for num in row if num == 0) == n for row in matrix]\n    cols = [sum(1 for row in matrix if row[i] == 0) == n for i in range(len(matrix[0]))]\n    return any(rows) or any(cols)\ndef g(n=4):\n    return [[0] * n] * n\nassert f(g())\n",
        "idx_generation": 409,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisors=[2, 3, 5, 7]) -> bool:\n    \"\"\"Find a number that is divisible by all the divisors\"\"\"\n    return all(n % divisor == 0 for divisor in divisors)\n\ndef g(divisors=[2, 3, 5, 7]):\n    n = 1\n    while not all(n % divisor == 0 for divisor in divisors):\n        n += 1\n    return n\n\nassert f(g())\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, prime_factors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by all prime factors\"\"\"\n    return all(n % p == 0 for p in prime_factors)\ndef g(prime_factors=[2, 3, 5]):\n    \"\"\"\n    This solution multiplies all prime factors together.\n    \"\"\"\n    result = 1\n    for p in prime_factors:\n        result *= p\n    return result\nassert f(g())\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find if there exists a path in the matrix that adds up to the target value.\"\"\"\n    def find_path(matrix, target, i, j):\n        if i < 0 or i >= len(matrix) or j < 0 or j >= len(matrix[0]):\n            return False\n        if matrix[i][j] == target:\n            return True\n        return find_path(matrix, target - matrix[i][j], i + 1, j) or find_path(matrix, target - matrix[i][j], i, j + 1)\n\n    return find_path(matrix, target, 0, 0)\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, divisors=[3, 5], num_divisors=2) -> bool:\n    \"\"\"Find an integer that has num_divisors different divisors from the list divisors.\"\"\"\n    return sum(n % d == 0 for d in divisors) == num_divisors\ndef g(divisors=[3, 5], num_divisors=2):\n    from itertools import count\n    return next(n for n in count(1) if sum(n % d == 0 for d in divisors) == num_divisors)\nassert f(g())\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is a subsequence of the given string.\"\"\"\n    i = 0  # pointer for string\n    j = 0  # pointer for substring\n    while i < len(string) and j < len(substring):\n        if string[i] == substring[j]:\n            j += 1\n        i += 1\n    return j == len(substring)\ndef g(substring='abc'):\n    string = \"\"\n    for _ in range(len(substring) + 5):\n        string += chr(random.randint(97, 122))\n    string += substring\n    for _ in range(len(substring) + 5):\n        string += chr(random.randint(97, 122))\n    return string\nassert f(g())\n",
        "idx_generation": 103,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"Given a list of integers, find if there are two elements whose sum is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=5):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return arr\nassert f(g())\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['python', 'programming', 'puzzle', 'code', 'challenge']) -> bool:\n    \"\"\"Check if a word is an anagram of any word in the given list.\"\"\"\n    sorted_s = ''.join(sorted(s))\n    return any(''.join(sorted(word)) == sorted_s for word in words)\ndef g(words=['python', 'programming', 'puzzle', 'code', 'challenge']):\n    return words[0]\nassert f(g())\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, character='a', count=3) -> bool:\n    \"\"\"Find if a given character appears count or more times in the given string\"\"\"\n    return string.count(character) >= count\ndef g(character='a', count=3):\n    return character * count\nassert f(g())\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Given a string s, find a substring of length n such that the sum of the ASCII values of its characters is even.\nSample input:\n\"hello\"\nSample output:\n\"ell\"\n(Sample output hidden because showing sample output would give away too much information.)\"\"\"\n    return any(sum(ord(c) for c in s[i:i+n]) % 2 == 0 for i in range(len(s)-n+1))\ndef g(n=3):\n    return \"abc\" * (n // 3)\nassert f(g())\n",
        "idx_generation": 442,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: list, num_elements=6, step=3) -> bool:\n    \"\"\"Generate a list of numbers starting from 0 with `num_elements` number of elements, with a step size of `step`\"\"\"\n    return result == list(range(0, num_elements * step, step))\ndef g(num_elements=6, step=3):\n    return list(range(0, num_elements * step, step))\nassert f(g())\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=10) -> bool:\n    \"\"\"Check if the sum of the elements in a numpy array matches the target value\"\"\"\n    return np.sum(arr) == target\n\ndef g(target=10):\n    return np.array([1, 2, 3, 4])\n\nassert f(g())\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int, n=2, m=3) -> bool:\n    \"\"\"Check if the sum of x, y, and z is divisible by n and the product of x, y, and z is divisible by m\"\"\"\n    return (x + y + z) % n == 0 and (x * y * z) % m == 0\ndef g(n=2, m=3):\n    return 1, 2, 3\nassert f(*g())\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, num_elements=3) -> bool:\n    \"\"\"Find num_elements numbers in nums that adds up to target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, num_elements))\ndef g(target=10, num_elements=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc', count=3) -> bool:\n    \"\"\"Check if a given substring occurs count number of times in a string\"\"\"\n    return s.count(substring) == count\ndef g(substring='abc', count=3):\n    return substring * count\nassert f(g())\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a given number exists in a sorted list\"\"\"\n    return n in arr\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr[len(arr)//2]\nassert f(g())\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, s=\"programming\", n=11) -> bool:\n    \"\"\"Check if the string x is an anagram of the string s\"\"\"\n    return len(x) == n and sorted(x.lower()) == sorted(s.lower())\ndef g(s=\"programming\", n=11):\n    return ''.join(sorted(s.lower()))\nassert f(g())\n",
        "idx_generation": 147,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Given a string s, determine if it can be rearranged to form a palindrome.\nExample:\ns = \"aab\"\nOutput: True\nExplanation: \"aab\" can be rearranged to \"aba\", which is a palindrome.\n\"\"\"\n    freq = {}\n    for c in s:\n        freq[c] = freq.get(c, 0) + 1\n\n    odd_count = 0\n    for val in freq.values():\n        if val % 2 != 0:\n            odd_count += 1\n\n    return odd_count <= 1\n\ndef g(s=\"aab\"):\n    return s\n\nassert f(g())\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=100, substring='abc') -> bool:\n    \"\"\"Find the number of occurrences of a substring in a string and check if it is greater than or equal to n\"\"\"\n    count = s.count(substring)\n    return count >= n\ndef g(n=100, substring='abc'):\n    return 'abc' * n\nassert f(g())\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if Two Numbers Add Up to Target\nGiven a list of numbers, check if there are two numbers in the list that add up to the target value.\n\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(target=0):\n    return [1, -1, 2, -2, 3, -3]\n\nassert f(g())\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by all the given factors.\"\"\"\n    return all(num % factor == 0 for factor in factors)\ndef g(factors=[2, 3, 5]):\n    return factors[0] * factors[1] * factors[2]\nassert f(g())\n",
        "idx_generation": 437,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Find a combination of n elements from the list that sums up to 10.\"\"\"\n    combinations = itertools.combinations(nums, n)\n    for combination in combinations:\n        if sum(combination) == 10:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    n = 1\n    while True:\n        combinations = itertools.combinations(nums, n)\n        for combination in combinations:\n            if sum(combination) == 10:\n                return n\n        n += 1\nassert f(g())\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(word: str) -> bool:\n    \"\"\"Check if any permutation of the word is a palindrome\"\"\"\n    return any(word == word[::-1] for word in permutations(word))\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Determine if the target number exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target]]\n    \nassert f(g())\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport pandas as pd\n\ndef f(df: pd.DataFrame, col_name='age', min_age=18, max_age=30) -> bool:\n    \"\"\"Check if there are any values in a specific column of a dataframe that are outside the specified age range\"\"\"\n    return any((val < min_age or val > max_age for val in df[col_name]))\n\ndef g(col_name='age', min_age=18, max_age=30):\n    data = {'name': ['Alice', 'Bob', 'Charlie'],\n            'age': [25, 32, 20]}\n    df = pd.DataFrame(data)\n    return df\n\nassert f(g())\n",
        "idx_generation": 151,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, start='Py', end='on') -> bool:\n    \"\"\"Check if the given string starts with the start string and ends with the end string.\"\"\"\n    return s.startswith(start) and s.endswith(end)\ndef g(start='Py', end='on'):\n    return start + 'th' + end\nassert f(g())\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=5) -> bool:\n    \"\"\"Check if the string can be divided into k equal parts.\"\"\"\n    return len(s) % k == 0 and all(s[i:i+len(s)//k] == s[:len(s)//k] for i in range(0, len(s), len(s)//k))\ndef g(k=5):\n    s = 'ab' * k\n    return s\nassert f(g())\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of two numbers in a list that sums up to a given target\"\"\"\n    return any([nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))])\ndef g(target=100):\n    nums = list(range(1, 100))\n    return nums\nassert f(g())\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 3, 5, 7, 9]) -> bool:\n    \"\"\"Check if the given number is divisible by any number in the list\"\"\"\n    return any(n % num == 0 for num in lst)\ndef g(lst=[1, 3, 5, 7, 9]):\n    return lst[-1]\nassert f(g())\n",
        "idx_generation": 442,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: list, p=0.5) -> bool:\n    \"\"\"Check if the probability of a specific element in the list is greater than or equal to a given threshold\"\"\"\n    count = x.count(\"a\")\n    return count / len(x) >= p\n\ndef g(p=0.5):\n    x = [\"a\"] * random.randint(10, 20) + [\"b\"] * random.randint(0, 10)\n    random.shuffle(x)\n    return x\n\nassert f(g())\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, chars={'a', 'b', 'c'}) -> bool:\n    \"\"\"Check if all characters in the string s are present in the given set of characters.\"\"\"\n    return set(s).issubset(chars)\ndef g(chars={'a', 'b', 'c'}):\n    return ''.join(chars)\nassert f(g())\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if the target number appears more than once in the list\"\"\"\n    return nums.count(target) > 1\n\ndef g(target=5):\n    return [1, 2, 3, 4, target, target]\n    \nassert f(g())\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, y: str) -> bool:\n    \"\"\"Check if x and y are anagrams of each other.\"\"\"\n    return sorted(x.lower()) == sorted(y.lower())\ndef g():\n    return 'listen', 'silent'\nassert f(*g())\n",
        "idx_generation": 153,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string contains at least n distinct vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for vowel in vowels:\n        if vowel in s:\n            count += 1\n        if count == n:\n            return True\n    return False\n\ndef g(n=3):\n    return \"aeiou\" * n\n\nassert f(g())\n",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the list\"\"\"\n    return any(nums[i:i+k] == list(range(nums[i], nums[i]+k)) for i in range(len(nums)-k+1))\ndef g(k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 497,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target_sum=100) -> bool:\n    \"\"\"Find a pair of numbers in a list that add up to a given target sum.\"\"\"\n    for i in range(len(li)):\n        for j in range(i + 1, len(li)):\n            if li[i] + li[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=100):\n    return [50, 50]\nassert f(g())\n",
        "idx_generation": 434,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int, threshold=10) -> bool:\n    \"\"\"Check if a number is divisible by all numbers from 1 to a given threshold\"\"\"\n    return all(num % i == 0 for i in range(1, threshold+1))\ndef g(threshold=10):\n    return math.factorial(threshold)\nassert f(g())\n",
        "idx_generation": 455,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers from the list that sums up to the target value\"\"\"\n    from itertools import combinations\n    return any(sum(combo) == target for r in range(1, len(nums) + 1) for combo in combinations(nums, r))\ndef g():\n    return [10, 20, 30, 40, 50]\nassert f(g())\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring=\"world\") -> bool:\n    \"\"\"Check if a given substring exists in the input string\"\"\"\n    return substring in s\ndef g(substring=\"world\"):\n    return \"Hello, world!\"\nassert f(g())\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Given a matrix of integers sorted in ascending order from left to right and top to bottom, find the target\nnumber.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    i, j = rows - 1, 0\n    while i >= 0 and j < cols:\n        if matrix[i][j] == target:\n            return True\n        elif matrix[i][j] < target:\n            j += 1\n        else:\n            i -= 1\n    return False\ndef g(target=5):\n    return [\n        [1, 4, 7, 11, 15],\n        [2, 5, 8, 12, 19],\n        [3, 6, 9, 16, 22],\n        [10, 13, 14, 17, 24],\n        [18, 21, 23, 26, 30]\n    ]\nassert f(g())\n",
        "idx_generation": 67,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word='Python') -> bool:\n    \"\"\"Check if target_word is an anagram of any word in words list\"\"\"\n    sorted_target = ''.join(sorted(target_word.lower()))\n    for word in words:\n        sorted_word = ''.join(sorted(word.lower()))\n        if sorted_word == sorted_target:\n            return True\n    return False\n\ndef g(target_word='Python'):\n    return ['Python', 'Java', 'Ruby', 'C++', 'PHP']\n\nassert f(g())\n",
        "idx_generation": 157,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k: int, n=2) -> bool:\n    \"\"\"Check if there exists a subarray of length n in the array arr such that the sum of the subarray is divisible by k\"\"\"\n    for i in range(len(arr)-n+1):\n        subarray = arr[i:i+n]\n        if sum(subarray) % k == 0:\n            return True\n    return False\ndef g():\n    return [1, 2, 3, 4, 5], 3\nassert f(*g())\n",
        "idx_generation": 220,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str = 'python', n: int = 3) -> bool:\n    \"\"\"Check if the target string appears at least n times in the given string.\"\"\"\n    return s.count(target) >= n\n\ndef g(target: str = 'python', n: int = 3):\n    return target * n\n\nassert f(g())\n",
        "idx_generation": 435,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number n is divisible by exactly three numbers in the list of numbers.\"\"\"\n    return sum((n % num == 0 for num in nums)) == 3\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return next((n for n in range(1, 101) if sum((n % num == 0 for num in nums)) == 3), None)\nassert f(g())\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, char_count=5, char='a') -> bool:\n    \"\"\"Find a string that contains exactly char_count occurrences of char.\"\"\"\n    return string.count(char) == char_count\ndef g(char_count=5, char='a'):\n    return char * char_count\nassert f(g())\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='python', count=3) -> bool:\n    \"\"\"Check if a given string contains a substring a specified number of times\"\"\"\n    return string.count(substr) == count\ndef g(substr='python', count=3):\n    return substr * count\nassert f(g())\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in a list that adds up to a target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False\ndef g(li: List[int], target=0):\n    return li\nassert f(g([1, 2, 3, 4, 5]), target=9)\n",
        "idx_generation": 68,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a word contains all the vowels\"\"\"\n    word = word.lower()\n    for vowel in vowels:\n        if vowel not in word:\n            return False\n    return True\ndef g(vowels=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(vowels)\nassert f(g())\n",
        "idx_generation": 162,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"Check if there are exactly k distinct characters in the string s\"\"\"\n    return len(set(s)) == k\n\ndef g(k=2):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return alphabet[:k]\n\nassert f(g())\n",
        "idx_generation": 220,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a given list that multiply to a target value\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] * lst[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [i for i in range(1, target//2)] + [target//2]\nassert f(g())\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list nums that add up to the target value.\n    Sample Input:\n    nums = [4, 6, 8, 2, 5]\n    target = 10\n    Sample Output:\n    True\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\ndef g(nums=[4, 6, 8, 2, 5], target=10):\n    return nums\nassert f(g())\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=25, k=3) -> bool:\n    \"\"\"Find if there exists a combination of k numbers in the list that sum up to the target\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, k):\n        if sum(combo) == target:\n            return True\n    return False\ndef g(target=25, k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 375,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport itertools\n\ndef f(letters: str, word='apple') -> bool:\n    \"\"\"Check if the word can be formed using the letters in any order.\"\"\"\n    letter_combinations = itertools.permutations(letters, len(word))\n    for combination in letter_combinations:\n        if ''.join(combination) == word:\n            return True\n    return False\n\ndef g(word='apple'):\n    return ''.join(random.sample(word, len(word)))\n\nassert f(g())\n",
        "idx_generation": 133,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Find a list of numbers where the target number is present in the list\"\"\"\n    return target in lst\n\ndef g(target=10):\n    lst = random.sample(range(1, 20), 5)\n    lst.append(target)\n    random.shuffle(lst)\n    return lst\n\nassert f(g())\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=15) -> bool:\n    \"\"\"Find two numbers in a list that add up to a specific target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, target - 14]\nassert f(g())\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc', n=2) -> bool:\n    \"\"\"Check if a substring appears at least n times in the given string.\"\"\"\n    count = s.count(substring)\n    return count >= n\ndef g(substring='abc', n=2):\n    return \"abcabcabc\"\nassert f(g())\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Find a string that contains all the words in the list\"\"\"\n    return all((word in s for word in words))\ndef g(words=['apple', 'banana', 'cherry']):\n    return ' '.join(words)\nassert f(g())\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray) -> bool:\n    \"\"\"Check if a given matrix is a magic square, where the sum of each row, column, and diagonal is the same.\"\"\"\n    n = matrix.shape[0]\n    target_sum = n * (n**2 + 1) // 2\n    \n    # Check rows\n    if not all(np.sum(matrix, axis=1) == target_sum):\n        return False\n    \n    # Check columns\n    if not all(np.sum(matrix, axis=0) == target_sum):\n        return False\n    \n    # Check diagonals\n    if np.trace(matrix) != target_sum or np.trace(np.flip(matrix, axis=0)) != target_sum:\n        return False\n    \n    return True\n\ndef g():\n    matrix = np.array([[2, 7, 6], [9, 5, 1], [4, 3, 8]])\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 474,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=21, num_count=3) -> bool:\n    \"\"\"Find a combination of num_count numbers from nums that add up to the target\"\"\"\n    return any((sum(comb) == target for comb in itertools.combinations(nums, num_count)))\ndef g(target=21, num_count=3):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(res: str, s='alphabet', target='a') -> bool:\n    \"\"\"You are given a string and a target character. Find the first occurrence of the target character in the string.\n    Sample Input:\n    `'alphabet', 'a'`\n    Sample Output:\n    `'a'`\"\"\"\n    for c in s:\n        if c == target:\n            return c == res\n    return False\n\ndef g(s='alphabet', target='a'):\n    for c in s:\n        if c == target:\n            return c\n    return None\n\nassert f(g())\n",
        "idx_generation": 151,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_product=24) -> bool:\n    \"\"\"Find three numbers in the list that multiply to the target_product.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] * numbers[j] * numbers[k] == target_product:\n                    return True\n    return False\ndef g(target_product=24):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"Check if a number is a palindrome and greater than the target number\"\"\"\n    return str(n) == str(n)[::-1] and n > target\n\ndef g(target=100):\n    i = target + 1\n    while True:\n        if f(i, target):\n            return i\n        i += 1\n\nassert f(g())\n",
        "idx_generation": 167,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if the word 'python' can be formed from the characters in the string s by rearranging them.\nSample Input:\ns = \"thpyno\"\nSample Output:\nTrue\"\"\"\n    count_s = {c: s.count(c) for c in set(s)}\n    count_word = {c: word.count(c) for c in set(word)}\n    return count_s == count_word\n\ndef g(word='python'):\n    return ''.join(sorted(word))\n\nassert f(g(), word='python')\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x=5, y=2) -> bool:\n    \"\"\"Check if n is divisible by either x or y\"\"\"\n    return n % x == 0 or n % y == 0\ndef g(x=5, y=2):\n    return x * y * (x - y)\nassert f(g())\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, li=[2, 3]) -> bool:\n    \"\"\"Determine if the given number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g():\n    return 5\nassert f(g())\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, n=3) -> bool:\n    \"\"\"Check if there are n distinct elements in nums that sum up to target.\"\"\"\n    return len(set(nums)) >= n and sum(sorted(set(nums))[:n]) == target\n\ndef g(n=3):\n    return [1, 2, 3, 4, 5, 6], n * (n + 1) // 2\n\nassert f(*g())\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, max_length=4) -> bool:\n    \"\"\"Find a combination of at most max_length numbers from the list nums that adds up to the target value.\"\"\"\n    return sum(nums) == target and len(nums) <= max_length\ndef g(target=10, max_length=4):\n    from itertools import combinations\n    for n in range(1, max_length + 1):\n        for c in combinations(nums, n):\n            if sum(c) == target:\n                return list(c)\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 171,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if x is divisible by any number in the list\"\"\"\n    return any(x % num == 0 for num in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[-1]\nassert f(g())\n",
        "idx_generation": 71,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='abc', t='cba') -> bool:\n    \"\"\"Check if s and t are anagrams of each other.\"\"\"\n    return sorted(s.lower()) == sorted(t.lower())\n\ndef g(s='abc', t='cba'):\n    return sorted(s.lower()) == sorted(t.lower())\n\nassert f(g())\n",
        "idx_generation": 169,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='ca') -> bool:\n    \"\"\"Check if any word in the list starts with the given prefix.\"\"\"\n    return any(word.startswith(prefix) for word in words)\ndef g(prefix='ca'):\n    words = ['cat', 'car', 'bat', 'dog']\n    return words\nassert f(g())\n",
        "idx_generation": 231,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 3, 5, 7, 9], target=10) -> bool:\n    \"\"\"Determine if there are two numbers in the list that add up to the target number.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g(lst=[1, 3, 5, 7, 9], target=10):\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\nassert f(g())\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Find a row in the matrix that has a sum equal to the target value\"\"\"\n    return any(sum(row) == target for row in matrix)\ndef g(target=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr=\"python\", k=3) -> bool:\n    \"\"\"Find if the given substring appears k times in the string s\"\"\"\n    return s.count(substr) == k\ndef g(substr=\"python\", k=3):\n    s = substr * k\n    return s\nassert f(g())\n",
        "idx_generation": 420,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['Python', 'programming'], count=2) -> bool:\n    \"\"\"Find a count number of substrings in the given string\"\"\"\n    return sum(sub in s for sub in substrings) == count\ndef g(substrings=['Python', 'programming'], count=2):\n    return ' '.join(substrings) + ' is fun! ' * count\nassert f(g())\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: list, target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sums up to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(year: int) -> bool:\n    \"\"\"Check if the given year is a leap year\"\"\"\n    return datetime.datetime(year, 2, 29).strftime(\"%Y\") == str(year)\n\ndef g():\n    return 2020\n\nassert f(g())\n",
        "idx_generation": 170,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if there exists a substring of length k that appears exactly twice in the string s\"\"\"\n    def count_substring(sub, string) -> int:\n        count = 0\n        index = string.find(sub)\n        while index != -1:\n            count += 1\n            index = string.find(sub, index + 1)\n        return count\n    return any(count_substring(s[i:i+k], s) == 2 for i in range(len(s)-k+1))\ndef g(k=3):\n    s = \"ababcabcde\"\n    return s\nassert f(g())\n",
        "idx_generation": 233,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, m=3) -> bool:\n    \"\"\"Given an integer n and a target value m, find the closest multiple of m to n.\n    If there are two multiples equidistant from n, return the larger one.\n    Sample Input:\n    n = 7\n    m = 5\n    Sample Output:\n    10\"\"\"\n    return n % m <= m/2\ndef g(m=3):\n    import random\n    n = random.randint(1, 100)\n    if n % m <= m/2:\n        return n\n    else:\n        return n + m - (n % m)\nassert f(g())\n",
        "idx_generation": 468,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Find a subarray of length k in the given list of integers that sums to zero.\"\"\"\n    for i in range(len(nums) - k + 1):\n        if sum(nums[i:i+k]) == 0:\n            return True\n    return False\ndef g(k=3):\n    return [1, 2, 3, -1, -2, -3, 4, 5, 6]\nassert f(g())\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5], k=3) -> bool:\n    \"\"\"Check if the sum of any k numbers in the list is equal to n\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == n for comb in combinations(lst, k))\ndef g(lst=[1, 2, 3, 4, 5], k=3):\n    return sum(lst[:k])\nassert f(g())\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], prefix='Dr.') -> bool:\n    \"\"\"Check if all names in a list have a specific prefix.\"\"\"\n    return all(name.startswith(prefix) for name in names)\ndef g(prefix='Dr.'):\n    return ['Dr. John', 'Dr. Jane', 'Dr. David']\nassert f(g())\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=3) -> bool:\n    \"\"\"Check if the string has a length greater than n\"\"\"\n    return len(string) > n\ndef g(n=3):\n    return \"Hello World!\"\nassert f(g())\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], length=5) -> bool:\n    \"\"\"Check if there is a word in the list with the given length.\"\"\"\n    for word in words:\n        if len(word) == length:\n            return True\n    return False\ndef g(length=5):\n    return ['apple', 'banana', 'cherry', 'date', 'elderberry']\nassert f(g())\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the given list that add up to the target number.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [3, 5, 2, 7, 4]\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    return any((x + y == target for x in lst for y in lst))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, a=3, b=5) -> bool:\n    \"\"\"Given a positive integer n, check if it is divisible by both a and b.\"\"\"\n    return n % a == 0 and n % b == 0\n\ndef g(a=3, b=5):\n    import random\n    n = random.randint(1, 1000)\n    while n % a != 0 or n % b != 0:\n        n = random.randint(1, 1000)\n    return n\n\nassert f(g())\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, total_sum=100, num_list=[10, 20, 30, 40]) -> bool:\n    \"\"\"Find a list of n numbers such that the sum of the numbers is equal to total_sum.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == total_sum for comb in combinations(num_list, n))\ndef g(total_sum=100, num_list=[10, 20, 30, 40]):\n    n = 1\n    while True:\n        if f(n, total_sum, num_list):\n            return n\n        n += 1\nassert f(g())\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=2) -> bool:\n    \"\"\"Find a substring with a certain count in a given string\"\"\"\n    return string.count(substring) == count\ndef g(substring='abc', count=2):\n    string = substring * count\n    return string\nassert f(g())\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[3, 9, 12, 18], upper_bound=100) -> bool:\n    \"\"\"Determine if a number n can be expressed as the sum of two numbers in a list of integers.\"\"\"\n    return any(((n - i) in nums for i in nums)) and 0 < n <= upper_bound\ndef g(nums=[3, 9, 12, 18], upper_bound=100):\n    return nums[0] + nums[1]\nassert f(g())\n",
        "idx_generation": 90,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if s1 and s2 are anagrams of each other.\"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g(s1: str = \"listen\", s2: str = \"silent\"):\n    \"\"\"Return values for s1 and s2 that are anagrams of each other.\"\"\"\n    return s1, s2\n\nassert f(*g())\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom collections import Counter\n\ndef f(s: str, target='racecar') -> bool:\n    \"\"\"Check if the given string is an anagram of the target string.\"\"\"\n    return Counter(s) == Counter(target)\ndef g(target='racecar'):\n    return 'racecar'\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(count: int, a=10, b=20, c=30) -> bool:\n    \"\"\"Check if count random numbers are all within a given range\"\"\"\n    numbers = [random.randint(a, b) for _ in range(count)]\n    return all(a <= num <= b for num in numbers)\ndef g(a=10, b=20, c=30):\n    return random.randint(a, b)\nassert f(g())\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers, find a subset of the list such that the sum of its elements equals the target number.\"\"\"\n    return sum(nums) == target\ndef g(target=100):\n    return [target]\nassert f(g())\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=150) -> bool:\n    \"\"\"Find three numbers in a list that add up to a target value.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, 3))\ndef g(target=150):\n    return [50, 70, 30, 20, 40, 60]\nassert f(g())\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if all vowels in the word are in the list\"\"\"\n    for char in word:\n        if char.lower() in vowels:\n            return False\n    return True\ndef g(vowels=['a', 'e', 'i', 'o', 'u']):\n    return \"bcdfghjklmnpqrstvwxyz\"\nassert f(g())\n",
        "idx_generation": 183,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the given list that add up to the target number.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 90,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word_list=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Find the longest word in a list and check if it matches the given string.\"\"\"\n    return s == max(word_list, key=len)\ndef g(word_list=['apple', 'banana', 'cherry', 'date']):\n    return max(word_list, key=len)\nassert f(g())\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, vowels='aeiou') -> bool:\n    \"\"\"Check if the given string contains all the vowels\"\"\"\n    for vowel in vowels:\n        if vowel not in s:\n            return False\n    return True\ndef g(vowels='aeiou'):\n    return 'The quick brown fox jumps over the lazy dog.'\nassert f(g())\n",
        "idx_generation": 264,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=31, count=4) -> bool:\n    \"\"\"Given a list of integers, find if there exists a sublist of count or more numbers whose sum is equal to the target\"\"\"\n    combinations = itertools.combinations(nums, count)\n    return any(sum(comb) == target for comb in combinations)\ndef g(target=31, count=4):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, k=5) -> bool:\n    \"\"\"Find a string that contains at least k vowels.\"\"\"\n    vowels = 'aeiou'\n    return sum(1 for c in s if c.lower() in vowels) >= k\ndef g(k=5):\n    import random\n    vowels = 'aeiou'\n    return ''.join(random.choice(vowels) for _ in range(k))\nassert f(g())\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a number is present in a list and is not in the first half of the list\"\"\"\n    return n in lst and n not in lst[:len(lst)//2]\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    random.shuffle(lst)\n    return lst[random.randint(0, len(lst)-1)]\n\nassert f(g()) == True",
        "idx_generation": 94,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"Check if the substring is present in the string\"\"\"\n    return substr in string\ndef g(substr='abc'):\n    return 'xyz' + substr\nassert f(g())\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=1000) -> bool:\n    \"\"\"Check if a string contains exactly n occurrences of a specific substring.\"\"\"\n    return s.count('abc') == n\ndef g(n=1000):\n    return 'abc' * n\nassert f(g())\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if s has every character repeated at least n times\"\"\"\n    return all(s.count(c) >= n for c in set(s))\ndef g(n=3):\n    return \"a\" * n + \"b\" * n + \"c\" * n\nassert f(g())\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='xyz', count=10, length=30) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring='xyz', count=10, length=30):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g())\n",
        "idx_generation": 187,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(result: int, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the result is a random number from the given list\"\"\"\n    return result in num_list\n\ndef g(num_list=[1, 2, 3, 4, 5]):\n    return random.choice(num_list)\n\nassert f(g())\n",
        "idx_generation": 95,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k: int) -> bool:\n    \"\"\"Given a string s and an integer k, determine if there exists a substring of s of length k that contains\nexactly three distinct characters.\"\"\"\n    if len(s) < k:\n        return False\n    for i in range(len(s)-k+1):\n        substring = s[i:i+k]\n        distinct_chars = len(set(substring))\n        if distinct_chars == 3:\n            return True\n    return False\ndef g(s=\"abcaabca\", k=4):\n    return s\nassert f(g(), k=4)\n",
        "idx_generation": 178,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string contains the same character repeated n times.\"\"\"\n    return any([s[i:i+n] == s[i]*n for i in range(len(s)-n+1)])\ndef g(n=3):\n    return 'aaaaaabbbcccdddeeeffggghhh'\nassert f(g())\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers in the list that add up to the target value\"\"\"\n    from itertools import combinations\n    return any((sum(comb) == target for r in range(1, len(nums)+1) for comb in combinations(nums, r)))\ndef g(target=100):\n    return [20, 50, 10, 30, 40, 5, 15]\nassert f(g())\n",
        "idx_generation": 457,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str = 'python', n: int = 3) -> bool:\n    \"\"\"Given a string s and a target string, find if there are n occurrences of the target string in s\"\"\"\n    count = s.count(target)\n    return count == n\ndef g(target: str = 'python', n: int = 3):\n    s = target * n\n    return s\nassert f(g())\n",
        "idx_generation": 193,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 7, 11, 15], target=13) -> bool:\n    \"\"\"Given a list of numbers and a target value, find two numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[2, 7, 11, 15], target=13):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return nums[i], nums[j]\n    return None\nassert f(g())\n",
        "idx_generation": 98,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['python', 'coding', 'puzzle', 'challenge']) -> bool:\n    \"\"\"Check if a string contains all the substrings in a specific order\"\"\"\n    indices = [s.find(sub) for sub in substrings]\n    return all(i != -1 for i in indices) and sorted(indices) == indices\ndef g(substrings=['python', 'coding', 'puzzle', 'challenge']):\n    return ''.join(substrings)\nassert f(g())\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Check if the given string can be rearranged to form a palindrome with the target length\"\"\"\n    char_count = {}\n    odd_count = 0\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n        if char_count[char] % 2:\n            odd_count += 1\n        else:\n            odd_count -= 1\n    return odd_count <= target_length\ndef g(target_length=10):\n    return 'aabbccddee' + 'a' * (target_length - 10)\nassert f(g())\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=20, n=3) -> bool:\n    \"\"\"Find n numbers from the list that sum up to the target.\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(nums, n))\n\ndef g(target=20, n=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(words: List[str], substring='ing') -> bool:\n    \"\"\"Find a word in the list that contains the given substring\"\"\"\n    return any(substring in word for word in words)\ndef g(substring='ing'):\n    words = ['programming', 'mathematics', 'science', 'history', 'geography']\n    return words\nassert f(g())\n",
        "idx_generation": 198,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport pandas as pd\n\ndef f(df: pd.DataFrame, column='A') -> bool:\n    \"\"\"Check if the given column in the dataframe contains only unique values.\"\"\"\n    return df[column].is_unique\n\ndef g():\n    data = {'A': [1, 2, 3, 4], 'B': ['a', 'b', 'c', 'd']}\n    df = pd.DataFrame(data)\n    return df\n\nassert f(g())\n",
        "idx_generation": 100,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, lst=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig']) -> bool:\n    \"\"\"Check if a string is present in the list and contains the same letters as the first element in the list.\"\"\"\n    return s in lst and sorted(s.lower()) == sorted(lst[0].lower())\ndef g(lst=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig']):\n    return lst[0]\nassert f(g())\n",
        "idx_generation": 190,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7]) -> bool:\n    \"\"\"Find if the given number is a prime number.\"\"\"\n    return n in primes\ndef g(primes=[2, 3, 5, 7]):\n    return 7\nassert f(g())\n",
        "idx_generation": 281,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[2, 5, 9, 12, 15, 18, 21, 24, 27, 30]) -> bool:\n    \"\"\"Check if n is present in the list and is divisible by 3\"\"\"\n    return n in lst and n % 3 == 0\n\ndef g(lst=[2, 5, 9, 12, 15, 18, 21, 24, 27, 30]):\n    for num in lst:\n        if num % 3 == 0:\n            return num\n    return None\n\nassert f(g())\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if the string contains all the substrings.\"\"\"\n    return all(sub in string for sub in substrings)\ndef g(substrings=['apple', 'banana', 'cherry']):\n    return ''.join(substrings)\nassert f(g())\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if a given string is an anagram of the target string.\"\"\"\n    return sorted(s.lower()) == sorted(target.lower())\ndef g(target='hello'):\n    return ''.join(sorted(target.lower()))\nassert f(g())\n",
        "idx_generation": 105,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, vowels='aeiou') -> bool:\n    \"\"\"Check if all the vowels in the word are in the specified set of vowels\"\"\"\n    return all((c in vowels for c in word if c.lower() in vowels))\ndef g(vowels='aeiou'):\n    word = \"Hello, World!\"\n    return word\nassert f(g())\n",
        "idx_generation": 193,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target='python', num_repeats=3) -> bool:\n    \"\"\"Check if a string contains the target substring repeated num_repeats times\"\"\"\n    return string.count(target) >= num_repeats\ndef g(target='python', num_repeats=3):\n    return target * num_repeats\nassert f(g())\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], n=100, target_sum=100) -> bool:\n    \"\"\"Find a subset of elements from a list that sum up to a target value.\"\"\"\n    import itertools\n    return any(sum(subset) == target_sum for r in range(len(arr) + 1) for subset in itertools.combinations(arr, r))\ndef g(n=100, target_sum=100):\n    return list(range(1, n+1))\nassert f(g())\n",
        "idx_generation": 473,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char_count={}) -> bool:\n    \"\"\"Check if the given string contains at least one occurrence of each character in char_count dictionary.\"\"\"\n    return all((s.count(c) >= count for c, count in char_count.items()))\n\ndef g(char_count={'a': 2, 'b': 1, 'c': 1}):\n    \"\"\"Return a string that contains the characters and their counts as specified in char_count dictionary.\"\"\"\n    return ''.join([c * count for c, count in char_count.items()])\n\nassert f(g())\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Find two numbers in a list that add up to a given target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=50):\n    return [10, 20, 30, 40]\nassert f(g())\n",
        "idx_generation": 109,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if a given string is an anagram of the target string\"\"\"\n    return sorted(s.lower()) == sorted(target.lower())\ndef g(target='hello'):\n    import random\n    letters = list(target)\n    random.shuffle(letters)\n    return ''.join(letters)\nassert f(g())\n",
        "idx_generation": 198,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(numbers: list, n=5) -> bool:\n    \"\"\"Check if a given list contains at least n unique random numbers.\"\"\"\n    return len(set(numbers)) >= n\n\ndef g(n=5):\n    return random.sample(range(1, 11), n)\n\nassert f(g())\n",
        "idx_generation": 285,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Find the three numbers in x that sum up to the target value.\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(x, 3))\ndef g():\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nassert f(g())\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='python', count=3) -> bool:\n    \"\"\"Check if a given substring appears a certain number of times in a string\"\"\"\n    return s.count(substr) == count\ndef g(substr='python', count=3):\n    return substr * count\nassert f(g())\n",
        "idx_generation": 219,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: bool, a=True, b=False) -> bool:\n    \"\"\"Check if a boolean value matches a certain pattern\"\"\"\n    return x == (a and not b)\ndef g(a=True, b=False):\n    return a or b\nassert f(g())\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry', 'date'], k=2) -> bool:\n    \"\"\"Check if a string can be formed by concatenating k distinct substrings from a given list of substrings.\"\"\"\n    return len(s) == sum(len(sub) for sub in substrings) * k and all(s.count(sub) == k for sub in substrings)\ndef g(substrings=['apple', 'banana', 'cherry', 'date'], k=2):\n    return ''.join(sub for sub in substrings for _ in range(k))\nassert f(g())\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Find a pair of numbers from a list that adds up to a given target.\nReturn True if such a pair exists, False otherwise.\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(target=12):\n    return [2, 10, 5, 7, 3, 1, 9, 4]\nassert f(g())\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], n=5, l=3) -> bool:\n    \"\"\"Find a list of n words, each with length l\"\"\"\n    return len(words) == n and all(len(word) == l for word in words)\ndef g(n=5, l=3):\n    words = []\n    for i in range(n):\n        word = chr(97+i) * l\n        words.append(word)\n    return words\nassert f(g())\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(s: str, pattern='a*b*c*') -> bool:\n    \"\"\"Check if string s matches the given pattern\"\"\"\n    return bool(re.fullmatch(pattern, s))\ndef g(pattern='a*b*c*'):\n    return pattern.replace('*', '')\nassert f(g())\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Given a matrix of integers and a target value, determine if the target value is present in the matrix.\n    The matrix is sorted row-wise and column-wise in non-decreasing order.\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    \n    i = 0\n    j = n-1\n    \n    while i < m and j >= 0:\n        if matrix[i][j] == target:\n            return True\n        elif matrix[i][j] < target:\n            i += 1\n        else:\n            j -= 1\n    \n    return False\n\ndef g(matrix: List[List[int]], target=10):\n    return matrix\n\n# Test case\nmatrix = [\n    [1, 4, 7, 11, 15],\n    [2, 5, 8, 12, 19],\n    [3, 6, 9, 16, 22],\n    [10, 13, 14, 17, 24],\n    [18, 21, 23, 26, 30]\n]\ntarget = 9\nassert f(g(matrix, target))\n",
        "idx_generation": 114,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if n is divisible by any of the prime numbers in the list.\"\"\"\n    return any(n % num == 0 for num in primes)\ndef g(primes=[2, 3, 5, 7, 11, 13]):\n    return primes[0] * primes[1]\nassert f(g())\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, target='python', case_sensitive=False) -> bool:\n    \"\"\"Check if a target word is present in a given sentence.\"\"\"\n    if not case_sensitive:\n        sentence = sentence.lower()\n        target = target.lower()\n    return target in sentence\ndef g(target='python', case_sensitive=False):\n    if not case_sensitive:\n        target = target.lower()\n    return f\"This sentence contains the word {target}.\"\nassert f(g())\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='python', num_repeats=3) -> bool:\n    \"\"\"Check if a specific substring appears multiple times in a string.\"\"\"\n    return string.count(substr) >= num_repeats\ndef g(substr='python', num_repeats=3):\n    return substr * num_repeats\nassert f(g())\n",
        "idx_generation": 2,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a string s contains all vowels at least n times.\"\"\"\n    vowels = 'aeiou'\n    return all((s.count(vowel) >= n for vowel in vowels))\ndef g(n=5):\n    vowels = 'aeiou'\n    return ''.join([vowel * n for vowel in vowels])\nassert f(g())\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Given an array of integers and a target value, determine if there are two integers in the array that sum up to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums: List[int], target=16):\n    return nums\n\n# Test case\nnums = [2, 7, 11, 15, 3, 9, 5]\ntarget = 14\nassert f(g(nums, target))\n",
        "idx_generation": 114,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if there exist n consecutive letters in s that are in alphabetical order\"\"\"\n    for i in range(len(s)-n+1):\n        if s[i:i+n] == ''.join(sorted(s[i:i+n])):\n            return True\n    return False\n\ndef g(n=3):\n    return 'abc' + 'def' * (n-1)\n\nassert f(g())\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n=10) -> bool:\n    \"\"\"Find a list of n consecutive numbers\"\"\"\n    return len(lst) == n and max(lst) - min(lst) == n - 1\ndef g(n=10):\n    return [i for i in range(1, n + 1)]\nassert f(g())\n",
        "idx_generation": 311,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, text='Hello, World!', letter='l') -> bool:\n    \"\"\"Check if the given letter is present in the text\"\"\"\n    return letter in text and s == letter\ndef g(text='Hello, World!', letter='l'):\n    if letter in text:\n        return letter\n    return None\nassert f(g())\n",
        "idx_generation": 3,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='hello', count=3, length=48) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring='hello', count=3, length=48):\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g())\n",
        "idx_generation": 233,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: list, target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target value.\"\"\"\n    return any((x + y == target for x in lst for y in lst))\n\ndef g(target=0, length=10):\n    random.seed(0)\n    return random.sample(range(-10, 11), length)\n\nassert f(g())\n",
        "idx_generation": 119,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Find the first index where the given substring is found\"\"\"\n    return s.find(substr) >= 0\ndef g(substr='abc'):\n    return substr + 'def'\nassert f(g())\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a', num_chars=3) -> bool:\n    \"\"\"Check if s contains exactly num_chars occurrences of char\"\"\"\n    return s.count(char) == num_chars\ndef g(char='a', num_chars=3):\n    return \"banana\"\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='racecar') -> bool:\n    \"\"\"Check if the string is a palindrome and if it matches the target\"\"\"\n    return s == s[::-1] and s == target\n\ndef g(target='racecar'):\n    return target\nassert f(g())\n",
        "idx_generation": 3,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(d: datetime, year=2022) -> bool:\n    \"\"\"Check if the given date is in the future.\"\"\"\n    return d > datetime(year, 1, 1)\n    \ndef g(year=2022):\n    return datetime(year + 1, 1, 1)\n    \nassert f(g())\n",
        "idx_generation": 0,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a', n=3) -> bool:\n    \"\"\"Check if a specific character appears n times in a string\"\"\"\n    return s.count(char) == n\ndef g(char='a', n=3):\n    return char * n\nassert f(g())\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: list, target=10) -> bool:\n    \"\"\"Check if there are two numbers in a list that sum up to a specific target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n    \ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 120,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='palindrome') -> bool:\n    \"\"\"Check if the string s can be rearranged to form the target string\"\"\"\n    return sorted(s) == sorted(target)\ndef g(target='palindrome'):\n    return ''.join(sorted(target))\nassert f(g())\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, pattern='abcabc') -> bool:\n    \"\"\"Check if a given string follows a specific pattern\"\"\"\n    pattern_dict = {}\n    i = 0\n    for char in s:\n        if char not in pattern_dict:\n            if pattern[i] in pattern_dict.values():\n                return False\n            pattern_dict[char] = pattern[i]\n        else:\n            if pattern_dict[char] != pattern[i]:\n                return False\n        i = (i + 1) % len(pattern)\n    return True\n\ndef g(pattern='abcabc'):\n    return 'abcabcabcabc'\n\nassert f(g())\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Given a string s, check if it is a palindrome when the first n characters are removed.\nSample Input:\ns = \"racecar\"\nSample Output:\nTrue\"\"\"\n    return s[n:] == s[n:][::-1]\ndef g(n=4):\n    s = \"racecar\"\n    return s[:n] + s\nassert f(g())\n",
        "idx_generation": 4,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, n=10) -> bool:\n    \"\"\"Find three integers x, y, and z such that x^2 + y^2 = z^2 and x, y, and z are less than or equal to n\"\"\"\n    return x**2 + y**2 == z**2 and x <= n and y <= n and z <= n\ndef g(n=10):\n    x = 3\n    y = 4\n    z = 5\n    return x, y, z\nassert f(*g())\n",
        "idx_generation": 1,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Find a word in a list of words that is an anagram of the target word\"\"\"\n    from collections import Counter\n    target_counter = Counter(target)\n    for word in words:\n        if Counter(word) == target_counter:\n            return True\n    return False\ndef g(target='python'):\n    return ['typhon', 'nothy', 'thonpy', 'notpyh']\nassert f(g())\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))\n\ndef g(target=0):\n    nums = list(range(-100, 101))\n    random.shuffle(nums)\n    return nums\n\nassert f(g())\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, pattern='abc') -> bool:\n    \"\"\"Given a string and a pattern, determine if the pattern can be formed by rearranging the characters of the string.\nReturn True if the pattern can be formed, False otherwise.\"\"\"\n    return sorted(s) == sorted(pattern)\ndef g(pattern='abc'):\n    return 'cab'\nassert f(g())\n",
        "idx_generation": 226,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(text: str, char='a') -> bool:\n    \"\"\"Check if the given character is the most frequent character in the given text.\"\"\"\n    return text.count(char) == max(text.count(c) for c in set(text))\ndef g(char='a'):\n    text = \"abracadabra\"\n    return text\nassert f(g())\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if the given character appears at least twice in the string\"\"\"\n    return s.count(char) >= 2\ndef g(char='a'):\n    s = char * 2\n    return s\nassert f(g())\n",
        "idx_generation": 4,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, target=9.5) -> bool:\n    \"\"\"Check if the square root of n is equal to the target\"\"\"\n    return math.isclose(math.sqrt(n), target)\n    \ndef g(target=9.5):\n    return target ** 2\nassert f(g())\n",
        "idx_generation": 3,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, c=\"a\") -> bool:\n    \"\"\"Check if a character appears n times in a string\"\"\"\n    return s.count(c) == n\ndef g(n=3, c=\"a\"):\n    s = c * n\n    return s\nassert f(g())\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in a list that sum up to a target value\"\"\"\n    return any(target - x in arr for x in arr)\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, weekday: int = 4) -> bool:\n    \"\"\"Check if a given date falls on a specific weekday.\"\"\"\n    return date.weekday() == weekday\n\ndef g(weekday: int = 4):\n    date = datetime.date.today()\n    while date.weekday() != weekday:\n        date += datetime.timedelta(days=1)\n    return date\n\nassert f(g())\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target_sum=100) -> bool:\n    \"\"\"Find a sublist of num_list such that the sum of its elements is equal to the target_sum.\"\"\"\n    return any(sum(sublist) == target_sum for sublist in itertools.combinations(num_list, 2))\ndef g(target_sum=100):\n    num_list = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    return num_list\nassert f(g())\n",
        "idx_generation": 332,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a list of numbers containing at least one pair of consecutive numbers that sum to 10.\"\"\"\n    return any(nums[i] + nums[i+1] == 10 for i in range(len(nums)-1))\ndef g():\n    return [1, 9, 2, 8, 3, 7, 4, 6, 5]\nassert f(g())\n",
        "idx_generation": 0,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int, d: dict) -> bool:\n    \"\"\"Check if the given string s contains all the keys in the dictionary d, and that the values associated with those keys are equal to n\"\"\"\n    return all([key in s and d[key] == n for key in d.keys()])\ndef g(n=5, d={'a': 5, 'b': 5, 'c': 5}):\n    s = ''\n    for key in d.keys():\n        s += key\n    return s\nassert f(g(), n=5, d={'a': 5, 'b': 5, 'c': 5})\n",
        "idx_generation": 5,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, n=3) -> bool:\n    \"\"\"Check if x is a perfect square\"\"\"\n    return math.isqrt(x)**2 == x\ndef g(n=3):\n    return n**2\nassert f(g())\n",
        "idx_generation": 4,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=2) -> bool:\n    \"\"\"Find a string with a certain number of occurrences of a given substring\"\"\"\n    return string.count(substring) == count\ndef g(substring='abc', count=2):\n    return substring * count\nassert f(g())\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the given list that sum up to the target\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 8]\n\nassert f(g())\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, d='abcdefghijklmnopqrstuvwxyz') -> bool:\n    \"\"\"Check if the given string contains all the letters of the alphabet.\"\"\"\n    return set(s.lower()) == set(d)\ndef g(d='abcdefghijklmnopqrstuvwxyz'):\n    return ''.join(d)\nassert f(g())\n",
        "idx_generation": 231,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, word_count=0) -> bool:\n    \"\"\"Find a sentence containing a certain number of words.\"\"\"\n    return len(sentence.split()) == word_count\ndef g(word_count=0):\n    return ' '.join(['word'] * word_count)\nassert f(g())\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10, num_pairs=2) -> bool:\n    \"\"\"Check if there are a specific number of pairs of integers in a list that sum up to a target value.\"\"\"\n    pairs = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                pairs += 1\n    return pairs == num_pairs\ndef g(target=10, num_pairs=2):\n    return [2, 3, 5, 7, 8, 9, 10, 12]\nassert f(g())\n",
        "idx_generation": 2,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, letters=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if all letters in the given string are vowels.\"\"\"\n    return all((letter in letters for letter in string.lower()))\ndef g(letters=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(letters)\nassert f(g())\n",
        "idx_generation": 6,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, result=10, precision=0.001) -> bool:\n    \"\"\"Check if the square root of a number is within a certain precision of a given result\"\"\"\n    return math.isclose(math.sqrt(n), result, rel_tol=precision)\n    \ndef g(n=100, result=10, precision=0.001):\n    return result ** 2\nassert f(g())\n",
        "idx_generation": 5,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a', count=3) -> bool:\n    \"\"\"Check if the character 'char' appears 'count' number of times in the string\"\"\"\n    return s.count(char) == count\ndef g(char='a', count=3):\n    return char * count + 'b' * count\nassert f(g())\n",
        "idx_generation": 260,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    return any((target - num) in nums for num in nums)\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Find a string that has a specific number of occurrences of a character.\"\"\"\n    return s.count('a') == n\ndef g(n=3):\n    return 'a' * n\nassert f(g())\n",
        "idx_generation": 250,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Find a string that repeats n times to form s\"\"\"\n    return s == s[:n] * (len(s) // n)\ndef g(n=4):\n    return 'abcd' * n\nassert f(g())\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a number is present in a list of numbers\"\"\"\n    return n in nums\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[0]\n\nassert f(g())\n",
        "idx_generation": 2,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substring in s\ndef g(substring='python'):\n    return \"I love python programming\"\nassert f(g())\n",
        "idx_generation": 8,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=8, c=13) -> bool:\n    \"\"\"Check if the sum of three numbers is equal to n\"\"\"\n    return a + b + c == n\ndef g(a=5, b=8, c=13):\n    return a + b + c\nassert f(g())\n",
        "idx_generation": 7,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, char='a', count=3) -> bool:\n    \"\"\"Count the number of occurrences of a specific character in a string.\"\"\"\n    return x.count(char) == count\ndef g(char='a', count=3):\n    return char * count\nassert f(g())\n",
        "idx_generation": 261,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list such that their sum is equal to 10.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == 10:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7]\n\nassert f(g())\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(color_list: list, color='blue') -> bool:\n    \"\"\"Check if the given color exists in the list of colors\"\"\"\n    return color in color_list\ndef g(color='blue'):\n    return ['red', 'green', 'yellow', color]\nassert f(g())\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if the given string s is a palindrome when reversed and repeated n times.\"\"\"\n    return s == s[::-1] and len(s) * n >= 2\n\ndef g(n: int):\n    return 'racecar'\n\nassert f(g(n=3), n=3)\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a sublist of nums that sums up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False\ndef g(target=100):\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    return nums\nassert f(g())\n",
        "idx_generation": 4,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if a string contains all the characters in the target string\"\"\"\n    return all((c in s for c in target))\ndef g(target='python'):\n    return target\nassert f(g())\n",
        "idx_generation": 9,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(area: float, r=5, pi=math.pi) -> bool:\n    \"\"\"Find the area of a circle with radius r\"\"\"\n    return abs(area - pi * r ** 2) < 10 ** (-3)\ndef g(r=5, pi=math.pi):\n    return pi * r ** 2\nassert f(g())\n",
        "idx_generation": 9,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='python', count=5, length=100) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring='python', count=5, length=100):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g())\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10, max_len=5) -> bool:\n    \"\"\"Find if there exists a sublist of arr with a length less than or equal to max_len that sums up to target.\"\"\"\n    n = len(arr)\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, min(i + max_len, n)):\n            curr_sum += arr[j]\n            if curr_sum == target:\n                return True\n    return False\ndef g(target=10, max_len=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']) -> bool:\n    \"\"\"Check if the nth element in the list is a fruit\"\"\"\n    fruits = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']\n    return lst[n] in fruits\ndef g(lst=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']):\n    n = 2\n    return n, lst\nassert f(*g())\n",
        "idx_generation": 258,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='abcdefghijklmnopqrstuvwxyz') -> bool:\n    \"\"\"Check if string s contains all the letters of the alphabet.\"\"\"\n    return set(a).issubset(set(s))\n\ndef g(a='abcdefghijklmnopqrstuvwxyz'):\n    return a\nassert f(g())\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: list) -> bool:\n    \"\"\"Check if the list contains at least one negative number\"\"\"\n    return any(num < 0 for num in lst)\ndef g():\n    lst = [random.randint(-10, 10) for _ in range(5)]\n    return lst\nassert f(g())\n",
        "idx_generation": 4,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='abc') -> bool:\n    \"\"\"Check if the target string is a substring of the given string.\"\"\"\n    return target in s\ndef g(target='abc'):\n    return 'defghijklm' + target + 'nopqrstuvwxyz'\nassert f(g())\n",
        "idx_generation": 10,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(d: datetime.date, days=365) -> bool:\n    \"\"\"Check if the given date is exactly one year from today.\"\"\"\n    today = datetime.date.today()\n    one_year_later = today + datetime.timedelta(days=days)\n    return d == one_year_later\n\ndef g(days=365):\n    today = datetime.date.today()\n    one_year_later = today + datetime.timedelta(days=days)\n    return one_year_later\n\nassert f(g())\n",
        "idx_generation": 11,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='@', count=11) -> bool:\n    \"\"\"Check if a string has exactly count occurrences of a specific character\"\"\"\n    return s.count(char) == count\ndef g(char='@', count=11):\n    return char * count\nassert f(g())\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    return n in primes\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19]):\n    return 17\nassert f(g())\n",
        "idx_generation": 136,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in nums whose sum is equal to the target.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=10):\n    return [5, 7, 2, 3, 1]\nassert f(g())\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, s1='cat', s2='1', count1=10, count2=5) -> bool:\n    \"\"\"Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and contains s1 and s2 in alternating order\"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s.find(s1) < s.find(s2) < s.find(s1, s.find(s2) + 1) < s.find(s2, s.find(s1, s.find(s2) + 1) + 1))\ndef g(s1='cat', s2='1', count1=10, count2=5):\n    ans = s1 + s2\n    ans += s1 * (count1 - 1)\n    ans += s2 * (count2 - 1)\n    return ans\nassert f(g())\n",
        "idx_generation": 370,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, n: int, m: int, d: dict) -> bool:\n    \"\"\"Check if the given integer x is divisible by n and m, and if all the keys in the dictionary d are factors of x\"\"\"\n    return x % n == 0 and x % m == 0 and all([x % key == 0 for key in d.keys()])\ndef g(n=3, m=4, d={2: 'a', 5: 'b', 7: 'c'}):\n    x = n * m\n    for key in d.keys():\n        x *= key\n    return x\nassert f(g(), n=3, m=4, d={2: 'a', 5: 'b', 7: 'c'})\n",
        "idx_generation": 5,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, vowels='aeiou') -> bool:\n    \"\"\"Check if a string contains all vowels.\"\"\"\n    return all(v in s for v in vowels)\ndef g(vowels='aeiou'):\n    return ''.join(vowels)\nassert f(g())\n",
        "idx_generation": 10,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, a=5, b=7) -> bool:\n    \"\"\"Find the smallest positive integer that is divisible by both a and b.\"\"\"\n    i = 1\n    while True:\n        if i % a == 0 and i % b == 0:\n            return i == result\n        i += 1\ndef g(a=5, b=7):\n    i = 1\n    while True:\n        if i % a == 0 and i % b == 0:\n            return i\n        i += 1\nassert f(g())\n",
        "idx_generation": 11,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='python', count=3) -> bool:\n    \"\"\"Check if a given substring appears count number of times in a string.\"\"\"\n    return string.count(substr) == count\ndef g(substr='python', count=3):\n    string = substr * count\n    return string\nassert f(g())\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60]\nassert f(g())\n",
        "idx_generation": 136,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=7) -> bool:\n    \"\"\"Given a matrix of integers, find if a specific target value exists in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=7):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a=\"abcdefg\", b=\"hijklmnopqrstuvwxyz\") -> bool:\n    \"\"\"Find the smallest s such that it contains all the characters in both strings a and b.\n    Sample input:\n    a = \"abcdefg\", b = \"hijklmnopqrstuvwxyz\"\n    Sample output:\n    \"abcdefghijklmnopqrstuvwxyz\"\n    The solution is the concatenation of both strings a and b.\"\"\"\n    return set(s) == set(a + b)\n\ndef g(a=\"abcdefg\", b=\"hijklmnopqrstuvwxyz\"):\n    return a + b\n\nassert f(g())\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find n such that the sum of all numbers in nums is equal to n.\"\"\"\n    return sum(nums) == n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return sum(nums)\nassert f(g())\n",
        "idx_generation": 5,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Determine if a target word can be formed by concatenating the given list of words\"\"\"\n    return target == ''.join(words)\ndef g(target='python'):\n    return [target]\nassert f(g())\n",
        "idx_generation": 11,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Find a list of integers where the sum of the cubes of the digits of each number in the list is equal to the number itself.\n    Sample input:\n    [_, _, _, _, _, _]\n    Sample output:\n    [_, _, _, _, _, _]\n    (Sample output hidden because showing sample output would give away too much information.)\"\"\"\n    return all(sum(int(digit) ** 3 for digit in str(num)) == num for num in li)\n\ndef g():\n    return [i for i in range(100, 100000) if sum(int(digit) ** 3 for digit in str(i)) == i]\n\nassert f(g())\n",
        "idx_generation": 12,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Given a list of numbers, find a subset that sums up to the target number.\"\"\"\n    import itertools\n    for r in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            if sum(subset) == target:\n                return True\n    return False\ndef g():\n    nums = [10, 5, 8, 3, 2, 7]\n    return nums\nassert f(g())\n",
        "idx_generation": 281,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[4, 6, 2, 8, 5, 7, 9]) -> bool:\n    \"\"\"Check if a given number n exists in the list lst.\"\"\"\n    return n in lst\ndef g(lst=[4, 6, 2, 8, 5, 7, 9]):\n    return lst[3]\nassert f(g())\n",
        "idx_generation": 144,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=3) -> bool:\n    \"\"\"Check if a given number is present in a numpy array\"\"\"\n    return target in arr\ndef g(target=3):\n    return np.array([1, 2, 3, 4, 5])\nassert f(g())\n",
        "idx_generation": 285,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, m=2) -> bool:\n    \"\"\"Check if a string has a specific pattern\"\"\"\n    pattern = 'ab' * m\n    return s.count(pattern) >= n\ndef g(n=3, m=2):\n    return 'ab' * n * m\nassert f(g())\n",
        "idx_generation": 378,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, day=1, month=1, year=2022) -> bool:\n    \"\"\"Check if a given date is the first day of a certain month and year.\"\"\"\n    return date.day == day and date.month == month and date.year == year\n\ndef g(day=1, month=1, year=2022):\n    return datetime.date(year, month, day)\n\nassert f(g())\n",
        "idx_generation": 6,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, s='hello') -> bool:\n    \"\"\"Count the number of vowels in a given string.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count == result\ndef g(s='hello'):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count\nassert f(g())\n",
        "idx_generation": 11,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a number that is a perfect square and a perfect cube at the same time.\"\"\"\n    return n ** (1/2) == int(n ** (1/2)) and n ** (1/3) == int(n ** (1/3))\ndef g():\n    n = 1\n    while True:\n        if n ** (1/2) == int(n ** (1/2)) and n ** (1/3) == int(n ** (1/3)):\n            return n\n        n += 1\nassert f(g())\n",
        "idx_generation": 12,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(words: List[str], target='python', count=3) -> bool:\n    \"\"\"Find count number of distinct words that can be formed using the letters of target\"\"\"\n    return len(words) == len(set(words)) >= count and all((set(w).issubset(set(target)) for w in words))\ndef g(target='python', count=3):\n    from itertools import permutations\n    result = []\n    for i in range(1, len(target)+1):\n        for p in permutations(target, i):\n            result.append(''.join(p))\n            if len(result) == count:\n                return result\n    return result\nassert f(g())\n",
        "idx_generation": 290,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the array that sum up to the target value\"\"\"\n    return any([(arr[i] + arr[j] == target) for i in range(len(arr)) for j in range(i+1, len(arr))])\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9]\nassert f(g())\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if a given string is an anagram of any word in a list.\"\"\"\n    return sorted(s) in [sorted(w) for w in words]\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return ''.join(sorted(words[0]))\nassert f(g())\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, sub_word='abc', count=2) -> bool:\n    \"\"\"Find a word that contains the sub_word repeated count times\"\"\"\n    return word.count(sub_word) == count\ndef g(sub_word='abc', count=2):\n    return sub_word * count + 'def'\nassert f(g())\n",
        "idx_generation": 388,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target number.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=10):\n    return list(range(1, target//2)) + [target - 1]\nassert f(g())\n",
        "idx_generation": 6,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, words=['quick', 'brown', 'fox']) -> bool:\n    \"\"\"Check if all words in the sentence are present\"\"\"\n    sentence = sentence.lower()\n    for word in words:\n        if word not in sentence:\n            return False\n    return True\n\ndef g(words=['quick', 'brown', 'fox']):\n    sentence = 'The quick brown fox jumps over the lazy dog.'\n    return sentence\n\nassert f(g())\n",
        "idx_generation": 12,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport math\n\ndef f(x: float, y: float, z: float, tolerance=0.01) -> bool:\n    \"\"\"Find three numbers that are approximately equal to x, y, and z respectively within the given tolerance.\"\"\"\n    return math.isclose(x, y, rel_tol=tolerance) and math.isclose(y, z, rel_tol=tolerance)\n\ndef g(tolerance=0.01):\n    x = random.uniform(0, 1)\n    y = random.uniform(0, 1)\n    z = random.uniform(0, 1)\n    while not math.isclose(x, y, rel_tol=tolerance) or not math.isclose(y, z, rel_tol=tolerance):\n        x = random.uniform(0, 1)\n        y = random.uniform(0, 1)\n        z = random.uniform(0, 1)\n    return x, y, z\n\nassert f(*g())\n",
        "idx_generation": 16,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, char_count=3, char='a') -> bool:\n    \"\"\"Check if the given character appears the given number of times in the string\"\"\"\n    return string.count(char) == char_count\ndef g(char_count=3, char='a'):\n    return char * char_count + 'b'\nassert f(g())\n",
        "idx_generation": 295,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a number in the list that is equal to the target\"\"\"\n    return target in nums\n    \ndef g(nums=[10, 20, 30, 40, 50]):\n    return nums\n    \nassert f(g())\n",
        "idx_generation": 152,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[str], target='apple') -> bool:\n    \"\"\"Given a list of strings, find the index of the target string\"\"\"\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1\n\ndef g(target='apple'):\n    return ['orange', 'banana', 'apple', 'grape', 'mango']\n\nassert f(g()) == 2\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc', count=3) -> bool:\n    \"\"\"Find if the given string contains the given substring at least the given number of times\"\"\"\n    return s.count(substr) >= count\n\ndef g(substr='abc', count=3):\n    return substr * count + 'def'\n    \nassert f(g())\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(ans: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate elements\"\"\"\n    return len(ans) == len(set(ans))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 6,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='pythonista', max_len=10) -> bool:\n    \"\"\"Check if a given word is a substring of a longer string, and if it is, return the index of the first occurrence\nof the word in the longer string.\"\"\"\n    if len(word) > max_len:\n        return False\n    return s.find(word) != -1\ndef g(word='pythonista', max_len=10):\n    return f'This is a pythonista example string'\nassert f(g())\n",
        "idx_generation": 15,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=5, b=6, c=7) -> bool:\n    \"\"\"Determine if a number x can be expressed as a^2 + b^2 + c^2\"\"\"\n    return x == a**2 + b**2 + c**2\n\ndef g(a=5, b=6, c=7):\n    return a**2 + b**2 + c**2\n\nassert f(g())\n",
        "idx_generation": 16,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(t: str, s='aBcDefG') -> bool:\n    \"\"\"Given a string s, convert it to a string t by capitalizing the first letter and adding a random lowercase letter\n    after each uppercase letter. Ignore any non-alphabetic characters in s.\n    Sample Input:\n    s = \"aBcDefG\"\n    Sample Output:\n    t = \"AbcDfGh\"\n    \"\"\"\n    i = 0\n    for c in s:\n        if c.isalpha() and c.isupper():\n            assert t[i] == c.upper(), f'expecting `{c.upper()}` at position {i}'\n            i += 1\n            assert t[i] == chr(ord(c.lower()) + 1), f'expecting `{chr(ord(c.lower()) + 1)}`'\n            i += 1\n        else:\n            assert t[i] == c, f'expecting `{c}` at position {i}'\n            i += 1\n    return i == len(t)\ndef g(s='aBcDefG'):\n    t = \"\"\n    for c in s:\n        if c.isalpha() and c.isupper():\n            t += c.upper() + chr(ord(c.lower()) + 1)\n        else:\n            t += c\n    return t\nassert f(g())\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=100, a=5, b=10) -> bool:\n    \"\"\"Check if the list contains a subsequence that sums up to a given value.\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if sum(x[i:j+1]) == n:\n                return True\n    return False\n\ndef g(n=100, a=5, b=10):\n    return list(range(a, b+1)) * (n//(b-a+1)) + list(range(a, a+(n%(b-a+1))))\n\nassert f(g())\n",
        "idx_generation": 153,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if a string is an anagram of any word in the list.\"\"\"\n    sorted_s = sorted(s)\n    return any(sorted_s == sorted(w) for w in words)\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return 'leppa'\nassert f(g())\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k: int) -> bool:\n    \"\"\"Check if the string contains exactly k occurrences of the letter 'a'.\"\"\"\n    return s.count('a') == k\n\ndef g(k=3):\n    \"\"\"Generate a string with exactly k occurrences of the letter 'a'.\"\"\"\n    return 'a' * k\n\nassert f(g(), k=3)\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: list, target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 9, 3, 7]\nassert f(g())\n",
        "idx_generation": 7,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Given a string and a number, check if the string can be split into n equal parts.\"\"\"\n    return len(s) % n == 0 and all(s[i:i + len(s) // n] == s[:len(s) // n] for i in range(0, len(s), len(s) // n))\ndef g(n=3):\n    return 'abcabcabc'\nassert f(g())\n",
        "idx_generation": 15,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, a=8, b=6, c=10) -> bool:\n    \"\"\"Check if three numbers form a Pythagorean triple\"\"\"\n    return x ** 2 + y ** 2 == z ** 2 and x == a and y == b and z == c\n\ndef g(a=8, b=6, c=10):\n    return a, b, math.sqrt(a ** 2 + b ** 2)\n\nassert f(*g())\n",
        "idx_generation": 20,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words_list: List[str], letters='aeiou') -> bool:\n    \"\"\"Check if all words in the list contain at least one of the letters\"\"\"\n    return all(any(letter in word for letter in letters) for word in words_list)\n\ndef g(letters='aeiou'):\n    return ['apple', 'banana', 'orange', 'grapefruit']\n\nassert f(g())\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, determine if there exists a pair of numbers whose sum is equal to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n",
        "idx_generation": 154,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, min_length=5, max_length=10) -> bool:\n    \"\"\"Check if the string is a valid password, which satisfies the length requirements and contains at least one uppercase letter.\"\"\"\n    return len(s) >= min_length and len(s) <= max_length and any(c.isupper() for c in s)\ndef g(min_length=5, max_length=10):\n    import random\n    import string\n    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(random.randint(min_length, max_length)))\nassert f(g())\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(contains_duplicates: bool, items=['apple', 'banana', 'cherry', 'apple', 'kiwi']) -> bool:\n    \"\"\"Check if a list contains any duplicates\"\"\"\n    return contains_duplicates == (len(items) != len(set(items)))\ndef g(items=['apple', 'banana', 'cherry', 'apple', 'kiwi']):\n    return len(items) != len(set(items))\nassert f(g())\n",
        "idx_generation": 409,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=20) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target sum\"\"\"\n    return any((x + y == target_sum) for x in numbers for y in numbers if x != y)\ndef g(target_sum=20):\n    return [5, 15]\nassert f(g())\n",
        "idx_generation": 8,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(x: str, y: str, z: str) -> bool:\n    \"\"\"Check if all three strings have the same length and contain only alphabetical characters.\"\"\"\n    return len(x) == len(y) == len(z) and x.isalpha() and y.isalpha() and z.isalpha()\n\ndef g():\n    x = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(random.randint(1, 10)))\n    y = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(len(x)))\n    z = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(len(x)))\n    return x, y, z\n\nassert f(*g())\n",
        "idx_generation": 16,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: list, n=3) -> bool:\n    \"\"\"Check if a list contains a sublist that sums up to n\"\"\"\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if sum(lst[i:j+1]) == n:\n                return True\n    return False\n\ndef g():\n    return [1, 7, 3, 2, 5, 4]\n\nassert f(g())\n",
        "idx_generation": 20,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if a substring is present in the given string\"\"\"\n    return substring in s.lower()\n\ndef g(substring='python'):\n    s = 'Python is a powerful programming language.'\n    return s\n\nassert f(g())\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Given a list of integers, determine if there exists a pair of numbers whose difference is equal to the given value k.\"\"\"\n    return any((abs(nums[i] - nums[j]) == k for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums=[1, 5, 3, 8, 2, 7, 4]):\n    return nums\nassert f(g())\n",
        "idx_generation": 154,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(l: List[int], k = 3) -> bool:\n    \"\"\"Given a list of integers and a value k, return True if there are exactly k even numbers in the list, and False otherwise.\"\"\"\n    return len([x for x in l if x % 2 == 0]) == k\n\ndef g(k = 3):\n    return [2*i for i in range(k)]\n\nassert f(g())\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='o') -> bool:\n    \"\"\"Check if the character 'o' appears an odd number of times in the given string.\"\"\"\n    return s.count(char) % 2 == 1\ndef g(char='o'):\n    return char * 5\nassert f(g())\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target_sum=2021) -> bool:\n    \"\"\"Find three integers in the list that add up to the target sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target_sum:\n                    return True\n    return False\n\ndef g(target_sum=2021):\n    import random\n    nums = random.sample(range(1, 10000), 100)\n    return nums\n\nassert f(g())\n",
        "idx_generation": 8,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=\"olleh\") -> bool:\n    \"\"\"Reverse the given string and check if it matches the target.\"\"\"\n    return s[::-1] == target\ndef g(target=\"olleh\"):\n    return \"hello\"\nassert f(g())\n",
        "idx_generation": 17,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=10) -> bool:\n    \"\"\"Find a subarray in arr whose sum is equal to target\"\"\"\n    return np.sum(arr) == target\n\ndef g(target=10):\n    return np.array([target])\n\nassert f(g())\n",
        "idx_generation": 20,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='code') -> bool:\n    \"\"\"Check if the substring 'code' appears at least twice in the string.\"\"\"\n    return string.count(substring) >= 2\ndef g(substring='code'):\n    return substring * 2\nassert f(g())\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix of integers, determine if it is a toeplitz matrix. A Toeplitz matrix is one where every\n    diagonal from top-left to bottom-right has the same element.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    for i in range(rows - 1):\n        for j in range(cols - 1):\n            if matrix[i][j] != matrix[i+1][j+1]:\n                return False\n    return True\n\ndef g():\n    matrix = [[1, 2, 3, 4],\n              [5, 1, 2, 3],\n              [9, 5, 1, 2]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 156,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"Check if a given number is a palindrome.\"\"\"\n    num_str = str(num)\n    return num_str == num_str[::-1]\n\ndef g():\n    return 12321\n\nassert f(g())\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"Find a word in the list that has the target length.\"\"\"\n    for word in words:\n        if len(word) == target_length:\n            return True\n    return False\ndef g(target_length=5):\n    return [\"hello\", \"world\", \"python\", \"code\", \"puzzle\"]\nassert f(g())\n",
        "idx_generation": 422,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target_sum=0) -> bool:\n    \"\"\"Find a pair of integers in the list that add up to the target sum.\"\"\"\n    complements = set()\n    for num in nums:\n        complement = target_sum - num\n        if complement in complements:\n            return True\n        complements.add(num)\n    return False\n\ndef g(target_sum=0):\n    import random\n    nums = random.sample(range(-100, 101), 50)\n    return nums\n\nassert f(g())\n",
        "idx_generation": 8,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: str, string='racecar') -> bool:\n    \"\"\"Check if a given string is a palindrome\"\"\"\n    return result == string[::-1]\ndef g(string='racecar'):\n    return string\nassert f(g())\n",
        "idx_generation": 17,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, area=78.5) -> bool:\n    \"\"\"Check if the area of a circle with the given radius is equal to the target area\"\"\"\n    return math.pi * radius**2 == area\n\ndef g(area=78.5):\n    radius = math.sqrt(area / math.pi)\n    return radius\n\nassert f(g())\n",
        "idx_generation": 28,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='abcdefg', b='hijklmn') -> bool:\n    \"\"\"Find a string s such that it contains all characters from a and b\"\"\"\n    return all(char in s for char in a) and all(char in s for char in b)\ndef g(a='abcdefg', b='hijklmn'):\n    s = a + b\n    return s\nassert f(g())\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Determine if a number is a perfect square.\"\"\"\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    left = 1\n    right = n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n\ndef g():\n    return 16\n\nassert f(g())\n",
        "idx_generation": 156,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"Check if a number is a palindrome.\"\"\"\n    return str(num) == str(num)[::-1]\ndef g():\n    return 12321\nassert f(g())\n",
        "idx_generation": 330,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char_count={}, min_count=2) -> bool:\n    \"\"\"Check if a string contains at least 'min_count' occurrences of each character\"\"\"\n    return all(count >= min_count for count in char_count.values())\ndef g(char_count={'a': 3, 'b': 2, 'c': 4}, min_count=2):\n    return ''.join(char * count for char, count in char_count.items())\nassert f(g())\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 10,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['cat', 'dog', 'bird', 'fish', 'rabbit']) -> bool:\n    \"\"\"Check if a given string is a concatenation of two words from a list of words.\"\"\"\n    for i in range(len(s)):\n        if s[:i] in words and s[i:] in words:\n            return True\n    return False\ndef g(words=['cat', 'dog', 'bird', 'fish', 'rabbit']):\n    for i in range(len(words)):\n        for j in range(len(words)):\n            if i != j:\n                return words[i] + words[j]\nassert f(g())\n",
        "idx_generation": 17,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, divisor=7) -> bool:\n    \"\"\"Check if the given number is divisible by the specified divisor\"\"\"\n    return num % divisor == 0\n\ndef g(divisor=7):\n    return divisor * 10\n\nassert f(g())\n",
        "idx_generation": 32,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='fix') -> bool:\n    \"\"\"Check if any word in the list starts with a specific prefix and ends with a specific suffix\"\"\"\n    return any((word.startswith(prefix) and word.endswith(suffix) for word in words))\ndef g(prefix='pre', suffix='fix'):\n    return [prefix + str(i) + suffix for i in range(10)]\nassert f(g())\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there are exactly k consecutive numbers in the given list.\"\"\"\n    return any(all(nums[i+j] == nums[i]+j for j in range(k)) for i in range(len(nums)-k+1))\ndef g(k=3):\n    return list(range(1, 10))\nassert f(g())\n",
        "idx_generation": 156,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Find a word that can be formed by rearranging the letters of the given string.\"\"\"\n    return any(sorted(word) == sorted(s) for word in words)\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return words[0]\nassert f(g())\n",
        "idx_generation": 354,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, c='a', r=7) -> bool:\n    \"\"\"Check if a character appears a specific number of times in a string.\"\"\"\n    return s.count(c) == r\ndef g(c='a', r=7):\n    return c * r\nassert f(g())\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 10,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='hello', b='world') -> bool:\n    \"\"\"Check if a string contains two given words.\"\"\"\n    return a in s and b in s\ndef g(a='hello', b='world'):\n    return a + ' ' + b\nassert f(g())\n",
        "idx_generation": 18,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a sublist of nums such that the sum of its elements is equal to the target\"\"\"\n    return sum(nums) == target\ndef g(target=10):\n    return [1, 2, 3, 4]\nassert f(g())\n",
        "idx_generation": 32,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(t: str, s='abcdefghij', target=4) -> bool:\n    \"\"\"Given a string consisting of lowercase letters, find any longest substring containing no more than n distinct characters.\nSample Input:\nt = \"abcdefghij\"\nSample Output:\n\"abcd\" or \"bcde\" or \"cdef\" or \"defg\" or \"efgh\" or \"fghi\" or \"ghij\" \"\"\"\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all((t[i] != t[i + 1] for i in range(len(t) - 1)))\ndef g(s='abcdefghij', target=4):\n    return s[:target]\nassert f(g())",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target_sum=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in num_list that sum up to target_sum\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 157,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t: str, p=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'isabella', 'jackfruit']) -> bool:\n    \"\"\"Determine if string s comes before string t alphabetically in the given list.\"\"\"\n    return all(x < y for x, y in zip(p, p[1:])) and s < t\ndef g(p=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'isabella', 'jackfruit']):\n    return sorted(p)\nassert f(g()[0], g()[1])\n",
        "idx_generation": 358,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=8, n=3) -> bool:\n    \"\"\"Find a combination of n numbers from the list that sums up to the target\"\"\"\n    import itertools\n    combinations = itertools.combinations(nums, n)\n    for combo in combinations:\n        if sum(combo) == target:\n            return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=8, n=3):\n    return nums\nassert f(g())\n",
        "idx_generation": 473,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=20, c=30, d=40) -> bool:\n    \"\"\"Check if a number is divisible by all given numbers.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0 and n % d == 0\ndef g(a=10, b=20, c=30, d=40):\n    return a * b * c * d\nassert f(g())\n",
        "idx_generation": 10,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Find if there exists a word in the list that starts with the given prefix\"\"\"\n    return any(word.startswith(prefix) for word in words)\ndef g():\n    return [\"prefix\", \"suffix\", \"word\"]\nassert f(g())\n",
        "idx_generation": 19,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: float, num_list=[3.4, 2.2, 1.8, 4.6]) -> bool:\n    \"\"\"Find the result by taking the square root of each number in the list and summing them\"\"\"\n    sum_sqrt = 0\n    for num in num_list:\n        sum_sqrt += num ** 0.5\n    return abs(result - sum_sqrt) < 1e-06\n\ndef g(num_list=[3.4, 2.2, 1.8, 4.6]):\n    sum_sqrt = 0\n    for num in num_list:\n        sum_sqrt += num ** 0.5\n    return sum_sqrt\n\nassert f(g())\n",
        "idx_generation": 38,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[str], c=\"apple\", l=5, e=10) -> bool:\n    \"\"\"Create a list that contains a specific word and its length is within a given range.\"\"\"\n    return c in x and l <= len(x) <= e\ndef g(c=\"apple\", l=5, e=10):\n    return [c] * l\nassert f(g())\n",
        "idx_generation": 309,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(items: List[str], target='python') -> bool:\n    \"\"\"Check if a specific item is present in a list.\"\"\"\n    return target in items\ndef g(target='python'):\n    return [target]\nassert f(g())\n",
        "idx_generation": 157,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Find the n-th most frequent character in the string.\"\"\"\n    from collections import Counter\n    counts = Counter(s)\n    sorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)\n    return sorted_counts[n-1][0]\n\ndef g(n=3):\n    return \"pneumonoultramicroscopicsilicovolcanoconiosis\"\n\nassert f(g()) == \"c\"\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t: str, k=3) -> bool:\n    \"\"\"Find a substring of s that appears at least k times in t\"\"\"\n    return t.count(s) >= k\ndef g(s='abc', t='abcabcabc', k=3):\n    return s\nassert f(g(), t='abcabcabc', k=3)\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, target=5) -> bool:\n    \"\"\"Determine if a given number is divisible by the sum of its digits\"\"\"\n    return num % sum(int(digit) for digit in str(num)) == 0 and num != 0\ndef g(target=5):\n    return target * 111\nassert f(g())\n",
        "idx_generation": 11,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: str, s='apple', t='ple') -> bool:\n    \"\"\"Check if a certain substring is present in a given string\"\"\"\n    return result in s and result in t\ndef g(s='apple', t='ple'):\n    return t\nassert f(g())\n",
        "idx_generation": 21,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=5) -> bool:\n    \"\"\"Check if a number is divisible by either a or b.\"\"\"\n    return n % a == 0 or n % b == 0\n\ndef g(a=3, b=5):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 39,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a string contains all the vowels in order.\"\"\"\n    return all((v in s for v in vowels)) and s.index('a') < s.index('e') < s.index('i') < s.index('o') < s.index('u')\ndef g():\n    return 'abecidofugih'  # Random string containing all the vowels in order\nassert f(g())\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"Check if a target word is an anagram of any of the given words\"\"\"\n    sorted_target = sorted(target_word)\n    for word in words:\n        if sorted(word) == sorted_target:\n            return True\n    return False\ndef g(target_word='python'):\n    return ['typhon', 'jython', 'notanagram']\nassert f(g())\n",
        "idx_generation": 157,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"Given a list of words, check if any of the words starts with a given letter.\"\"\"\n    for word in words:\n        if word.startswith(letter):\n            return True\n    return False\n\ndef g():\n    return ['apple', 'banana', 'cherry', 'durian']\n\nassert f(g())\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, n=10) -> bool:\n    \"\"\"Find the sum of all numbers from 1 to n (inclusive) that are divisible by either 3 or 5.\"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        if i % 3 == 0 or i % 5 == 0:\n            total += i\n    return total == result\ndef g(n=10):\n    total = 0\n    for i in range(1, n + 1):\n        if i % 3 == 0 or i % 5 == 0:\n            total += i\n    return total\nassert f(g())\n",
        "idx_generation": 11,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, c='a') -> bool:\n    \"\"\"Check if a character is in a string\"\"\"\n    return c in s\n\ndef g(c='a'):\n    return c + \"bcdefg\"\nassert f(g())\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=5, b=3) -> bool:\n    \"\"\"Check if a number is a perfect square and divisible by another number.\"\"\"\n    return math.isqrt(n)**2 == n and n % b == 0\n\ndef g(a=5, b=3):\n    return b**2\nassert f(g())\n",
        "idx_generation": 40,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(word: str, num_vowels=2, num_consonants=3) -> bool:\n    \"\"\"Determine if a word contains a specific number of vowels and consonants.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    consonant_count = 0\n    for char in word:\n        if char.lower() in vowels:\n            vowel_count += 1\n        else:\n            consonant_count += 1\n    return vowel_count == num_vowels and consonant_count == num_consonants\ndef g(num_vowels=2, num_consonants=3):\n    from random import randint\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    word = ''\n    for _ in range(num_vowels):\n        word += vowels[randint(0, len(vowels)-1)]\n    for _ in range(num_consonants):\n        word += consonants[randint(0, len(consonants)-1)]\n    return word\nassert f(g())\n",
        "idx_generation": 355,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Find two numbers in a list that add up to a target sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=10):\n    return [1, target_sum - 1]\nassert f(g())\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if a string contains all the letters in the target word\"\"\"\n    return all(letter in s for letter in target)\ndef g(target='python'):\n    return ''.join(sorted(target))\nassert f(g())\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, days_difference=5, weekday='Monday') -> bool:\n    \"\"\"Check if the date after a certain number of days is a specific weekday\"\"\"\n    new_date = date + datetime.timedelta(days=days_difference)\n    return new_date.strftime('%A') == weekday\n\ndef g(days_difference=5, weekday='Monday'):\n    today = datetime.date.today()\n    return today + datetime.timedelta(days=days_difference)\nassert f(g())\n",
        "idx_generation": 11,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string.\"\"\"\n    return substring in s\ndef g():\n    return 'xyzabcw'\nassert f(g())\n",
        "idx_generation": 23,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: list, x=5, y=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to a certain value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == x + y:\n                return True\n    return False\n\ndef g(x=5, y=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(names: List[str], name_length=4, num_vowels=2) -> bool:\n    \"\"\"Determine if a list of names contains a specific number of names with a specific name length and number of vowels.\"\"\"\n    vowel_count = 0\n    name_count = 0\n    for name in names:\n        if len(name) == name_length:\n            name_count += 1\n            for char in name:\n                if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                    vowel_count += 1\n                    break\n    return name_count == num_vowels and vowel_count == num_vowels\ndef g(name_length=4, num_vowels=2):\n    from random import choice\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    names = []\n    for _ in range(num_vowels):\n        name = ''\n        for _ in range(name_length):\n            if choice([True, False]):\n                name += choice(vowels)\n            else:\n                name += choice(consonants)\n        names.append(name)\n    return names\nassert f(g())\n",
        "idx_generation": 355,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Find a pair of numbers in the list that when squared and added together, give the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i]**2 + nums[j]**2 == target:\n                return True\n    return False\ndef g(nums=[3, 4, 5, 6, 7]):\n    return nums\nassert f(g())\n",
        "idx_generation": 168,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a string is a palindrome and has a length greater than or equal to n\"\"\"\n    return s == s[::-1] and len(s) >= n\ndef g(n=5):\n    return \"racecar\" * n\nassert f(g())\n",
        "idx_generation": 392,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"Check if a number is divisible by any of the given primes\"\"\"\n    for prime in primes:\n        if n % prime == 0:\n            return True\n    return False\n\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19]):\n    n = 1\n    while True:\n        if f(n, primes):\n            return n\n        n += 1\n\nassert f(g())\n",
        "idx_generation": 12,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, char='a') -> bool:\n    \"\"\"Given a string and a character, check if the character is present in the string\"\"\"\n    return char in string\ndef g(char='a'):\n    return char\nassert f(g())\n",
        "idx_generation": 23,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=10) -> bool:\n    \"\"\"Check if the square root of x is close to a certain value\"\"\"\n    return abs(math.sqrt(x) - a) < 0.01\n\ndef g(a=10):\n    return a ** 2\n\nassert f(g())\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"Check if there is a word in the list that has the length equal to the target_length\"\"\"\n    return any((len(word) == target_length for word in words))\ndef g():\n    return ['apple', 'banana', 'cherry', 'date']\nassert f(g())\n",
        "idx_generation": 357,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Given a matrix of integers, check if a target number exists in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\nassert f(g())\n",
        "idx_generation": 169,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date_str: str, format_str='%Y-%m-%d') -> bool:\n    \"\"\"Check if a given date string matches a specific format\"\"\"\n    try:\n        datetime.strptime(date_str, format_str)\n        return True\n    except ValueError:\n        return False\n\ndef g(format_str='%Y-%m-%d'):\n    return datetime.now().strftime(format_str)\n\nassert f(g())\n",
        "idx_generation": 403,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"Check if n is divisible by all the primes in the list\"\"\"\n    return all(n % p == 0 for p in primes)\n\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19]):\n    n = math.prod(primes)\n    return n\n\nassert f(g())\n",
        "idx_generation": 13,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\ndef f(s: str, target='abcde', seed=0) -> bool:\n    \"\"\"Check if the given string is equal to the target string\"\"\"\n    random.seed(seed)\n    shuffled = list(target)\n    random.shuffle(shuffled)\n    return ''.join(shuffled) == s\ndef g(target='abcde', seed=0):\n    random.seed(seed)\n    shuffled = list(target)\n    random.shuffle(shuffled)\n    return ''.join(shuffled)\nassert f(g())\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisors=[2, 3, 5, 7]) -> bool:\n    \"\"\"Check if a number is divisible by all given divisors\"\"\"\n    return all(n % d == 0 for d in divisors)\ndef g(divisors=[2, 3, 5, 7]):\n    return divisors[0] * divisors[1] * divisors[2] * divisors[3]\nassert f(g())\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s: str, t: str, sep=' ') -> bool:\n    \"\"\"Check if the string 's' contains exactly 'n' occurrences of the string 't', separated by 'sep'\"\"\"\n    return s.count(t + sep) == n\ndef g(n=2, s='apples, bananas, apples, oranges', t='apples', sep=', '):\n    return n, s, t, sep\nassert f(*g())\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers in the list whose sum is equal to target\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 171,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return sqrt(n) == int(sqrt(n))\n\ndef g():\n    return 16\n\nassert f(g())\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=20):\n    return [10, 15, 5]\nassert f(g())\n",
        "idx_generation": 13,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(timestamp: str, format='%Y-%m-%d %H:%M:%S') -> bool:\n    \"\"\"Check if a given timestamp is in the specified format\"\"\"\n    try:\n        datetime.strptime(timestamp, format)\n        return True\n    except ValueError:\n        return False\n\ndef g(format='%Y-%m-%d %H:%M:%S'):\n    return datetime.now().strftime(format)\n\nassert f(g())\n",
        "idx_generation": 25,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport math\n\ndef f(n: int, m=2) -> bool:\n    \"\"\"Check if n is a power of m\"\"\"\n    return math.log(n, m).is_integer()\n\ndef g(m=2):\n    return m**random.randint(1, 10)\n\nassert f(g())\n",
        "idx_generation": 44,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit', 'honeydew', 'kiwi', 'lemon']) -> bool:\n    \"\"\"Check if the given string is a substring of any string in the list.\"\"\"\n    return any(s in string for string in strings)\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit', 'honeydew', 'kiwi', 'lemon']):\n    return strings[2]\nassert f(g())\n",
        "idx_generation": 380,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport itertools\n\ndef f(perm: tuple, n=4) -> bool:\n    \"\"\"Find a permutation of numbers from 1 to n\"\"\"\n    return perm == tuple(range(1, n+1))\n\ndef g(n=4):\n    perms = list(itertools.permutations(range(1, n+1)))\n    return random.choice(perms)\n\nassert f(g())\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"Check if a string contains a repeated substring of length k\"\"\"\n    return any(s[i:i+k] in s[i+k:] for i in range(len(s)-k))\ndef g(k=2):\n    return \"abcd\" * (k+1)\nassert f(g())\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome.\"\"\"\n    return nums == nums[::-1]\ndef g():\n    return [1, 2, 3, 2, 1]\nassert f(g())\n",
        "idx_generation": 14,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(is_palindrome: bool, word=\"racecar\") -> bool:\n    \"\"\"Check if a word is a palindrome\"\"\"\n    return is_palindrome == (word == word[::-1])\ndef g(word=\"racecar\"):\n    return word == word[::-1]\nassert f(g())\n",
        "idx_generation": 28,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=0.6931471805599453, b=0.5) -> bool:\n    \"\"\"Check if the value of x is equal to the logarithm of b with base a.\"\"\"\n    return math.isclose(math.log(b, a), x)\n    \ndef g(a=0.6931471805599453, b=0.5):\n    return math.log(b, a)\n\nassert f(g())\n",
        "idx_generation": 45,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=3) -> bool:\n    \"\"\"Check if the given string contains exactly n number of vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = sum(1 for char in string if char.lower() in vowels)\n    return count == n\ndef g(n=3):\n    return 'a' + 'e' * (n - 1)\nassert f(g())\n",
        "idx_generation": 409,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: list, n=5) -> bool:\n    \"\"\"Check if x is a list containing n elements\"\"\"\n    return len(x) == n\n\ndef g(n=5):\n    return [None] * n\n\nassert f(g())\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, target=\"Hello, World!\") -> bool:\n    \"\"\"Check if a given string is an anagram of the target string\"\"\"\n    return sorted(s.lower()) == sorted(target.lower())\ndef g(target=\"Hello, World!\"):\n    import random\n    return ''.join(random.sample(target, len(target)))\nassert f(g())\n",
        "idx_generation": 433,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub: str) -> bool:\n    \"\"\"Check if the given substring is a palindrome within the string.\"\"\"\n    return sub == sub[::-1] and sub in s\ndef g(sub='madam'):\n    return 'racecar' + sub + 'hello'\nassert f(g(), sub='madam')\n",
        "idx_generation": 14,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if the given string contains the given substring.\"\"\"\n    return substr in s\ndef g(substr='python'):\n    import random\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    return random.choice(s) + substr + random.choice(s)\nassert f(g())\n",
        "idx_generation": 29,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: float, a=10, b=5) -> bool:\n    \"\"\"Check if the given number is the square root of a multiplied by b.\"\"\"\n    return math.isclose(math.sqrt(a * b), n)\n\ndef g(a=10, b=5):\n    return math.sqrt(a * b)\n\nassert f(g())\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(words: List[str], n=3, m=3) -> bool:\n    \"\"\"Find a list of n distinct words of length m\"\"\"\n    return len(words) == n and all((len(word) == m for word in words)) and len(set(words)) == n\ndef g(n=3, m=3):\n    import string\n    import random\n    return [''.join(random.choices(string.ascii_lowercase, k=m)) for _ in range(n)]\nassert f(g())\n",
        "idx_generation": 422,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the given number is in the list.\"\"\"\n    return n in lst\n\ndef g(lst: List[int]):\n    return random.choice(lst)\n\nassert f(g(lst=[1, 2, 3, 4, 5]), lst=[1, 2, 3, 4, 5])\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a=3, b=2, c=1) -> bool:\n    \"\"\"Check if the string has a specific pattern of characters\"\"\"\n    return s == 'abc' * a + 'def' * b + 'ghi' * c\n\ndef g(a=3, b=2, c=1):\n    return 'abc' * a + 'def' * b + 'ghi' * c\n\nassert f(g())\n",
        "idx_generation": 442,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"Check if the given number can be expressed as the sum of two prime numbers.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    for i in range(2, n//2 + 1):\n        if is_prime(i) and is_prime(n - i):\n            return True\n    return False\ndef g(n=20):\n    return n\nassert f(g(), k=2)\n",
        "idx_generation": 14,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring=\"abc\") -> bool:\n    \"\"\"Check if a given string s contains a specified substring.\"\"\"\n    return substring in s\ndef g(substring=\"abc\"):\n    return \"def\" + substring + \"ghi\"\nassert f(g())\n",
        "idx_generation": 31,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisor=7) -> bool:\n    \"\"\"Check if the given number is divisible by the divisor\"\"\"\n    return n % divisor == 0\ndef g(divisor=7):\n    return divisor * 10\nassert f(g())\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, s1='abc', s2='def', count1=10, count2=5) -> bool:\n    \"\"\"Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\nthe same 3 characters\"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:3] == s[-3:])\ndef g(s1='abc', s2='def', count1=10, count2=5):\n    if s1 == s2:\n        ans = (s1 + '?') * count1\n    elif s1.count(s2):\n        ans = (s1 + '?') * count1\n        ans += (s2 + '?') * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + '?') * count2\n        ans += (s1 + '?') * (count1 - ans.count(s1))\n    return '?' * 3 + ans + '?' * 3\nassert f(g())\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Find a pair of numbers in the array that sums up to the target\"\"\"\n    return any(x + y == target for x in arr for y in arr if x != y)\ndef g(target=20):\n    arr = random.sample(range(1, 30), 10)\n    return arr\nassert f(g())\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, letters=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Find a string that contains all the letters in the list in alphabetical order\"\"\"\n    return all((s.find(letter) < s.find(letters[i+1]) for i, letter in enumerate(letters[:-1])))\ndef g(letters=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(sorted(letters))\nassert f(g())\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if the list is a palindrome, meaning it reads the same forwards and backwards.\"\"\"\n    return li == li[::-1]\ndef g():\n    return [1, 2, 3, 2, 1]\nassert f(g())\n",
        "idx_generation": 15,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(dt: datetime, year=2022, month=1, day=1, hour=0, minute=0, second=0) -> bool:\n    \"\"\"Check if the given datetime is on the specified date and time\"\"\"\n    return dt == datetime(year, month, day, hour, minute, second)\n\ndef g(year=2022, month=1, day=1, hour=0, minute=0, second=0):\n    return datetime(year, month, day, hour, minute, second)\n\nassert f(g())\n",
        "idx_generation": 32,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=2, b=3, c=5, d=7) -> bool:\n    \"\"\"Find the solution to the system of equations x + y = a and x - y = b\"\"\"\n    x = (a + b) / 2\n    y = (a - b) / 2\n    return x == e[0] and y == e[1]\ndef g(a=2, b=3, c=5, d=7):\n    return [(a + b) / 2, (a - b) / 2]\nassert f(g())\n",
        "idx_generation": 54,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=3, max_length=5) -> bool:\n    \"\"\"Find a substring of a given string s that has a length of at most max_length and contains target number of vowels.\"\"\"\n    vowels = 'aeiou'\n    count = 0\n    for c in s:\n        if c.lower() in vowels:\n            count += 1\n    return count == target and len(s) <= max_length\ndef g(target=3, max_length=5):\n    s = 'Hello World'\n    vowels = 'aeiou'\n    substring = ''\n    for c in s:\n        if c.lower() in vowels:\n            substring += c\n            if len(substring) == target:\n                return substring\n    return substring\nassert f(g())\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, upper=100) -> bool:\n    \"\"\"Check if a randomly generated number is greater than the upper limit\"\"\"\n    return n > upper\n\ndef g(upper=100):\n    return random.randint(1, 1000)\n\nassert f(g())\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, nums=[4, 2, 9, 5, 1, 7, 6, 3, 8]) -> bool:\n    \"\"\"Find the product of the first 5 numbers in the list.\"\"\"\n    return s == nums[0] * nums[1] * nums[2] * nums[3] * nums[4]\ndef g(nums=[4, 2, 9, 5, 1, 7, 6, 3, 8]):\n    return nums[0] * nums[1] * nums[2] * nums[3] * nums[4]\nassert f(g())\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, num_list=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Find the sum of all even numbers in a given list\"\"\"\n    return result == sum([num for num in num_list if num % 2 == 0])\ndef g(num_list=[1, 2, 3, 4, 5, 6]):\n    return sum([num for num in num_list if num % 2 == 0])\nassert f(g())\n",
        "idx_generation": 17,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if s is a valid email address\"\"\"\n    import re\n    pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n    return bool(re.match(pattern, s))\ndef g():\n    return 'test@example.com'\nassert f(g())\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=24) -> bool:\n    \"\"\"Find a combination of four numbers from the list that can be calculated to equal the target value of 24.\"\"\"\n    from itertools import permutations\n    for p in permutations(numbers, 4):\n        a, b, c, d = p\n        if a + b + c + d == target:\n            return True\n        if a + b + c - d == target:\n            return True\n        if a + b + c * d == target:\n            return True\n        if a + b + c / d == target:\n            return True\n    return False\ndef g(target=24):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g())\n",
        "idx_generation": 56,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the string s contains exactly n consecutive vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\ndef g(n=5):\n    import random\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = ''\n    for _ in range(n):\n        s += random.choice(vowels)\n    return s\nassert f(g())\n",
        "idx_generation": 429,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 5, 7, 8, 10, 11, 13, 14]) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to n\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == n:\n                return True\n    return False\ndef g(nums=[2, 4, 5, 7, 8, 10, 11, 13, 14]):\n    return nums[0] + nums[1]\nassert f(g())\n",
        "idx_generation": 183,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string contains the same character repeated consecutively n times.\"\"\"\n    return any(s[i] == s[i+1] == s[i+2] for i in range(len(s)-2))\ndef g(n=3):\n    return \"a\" * n\nassert f(g())\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: List[int], num_list=[1, 2, 3, 4, 5, 6], threshold=3) -> bool:\n    \"\"\"Find all numbers in a given list that are greater than a threshold value\"\"\"\n    return result == [num for num in num_list if num > threshold]\ndef g(num_list=[1, 2, 3, 4, 5, 6], threshold=3):\n    return [num for num in num_list if num > threshold]\nassert f(g())\n",
        "idx_generation": 17,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_len=7) -> bool:\n    \"\"\"Check if the given string is a palindrome and its length is less than or equal to a target length.\"\"\"\n    return s == s[::-1] and len(s) <= target_len\n\ndef g(target_len=7):\n    return 'racecar'\n\nassert f(g())\n",
        "idx_generation": 36,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    return n in primes\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]):\n    return primes[-1]\nassert f(g())\n",
        "idx_generation": 58,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if any of the substrings is present in the string\"\"\"\n    return any((sub in s for sub in substrings))\n\ndef g(substrings=['apple', 'banana', 'cherry']):\n    return ''.join(substrings)\n\nassert f(g())\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: List[int], target=20) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target\"\"\"\n    return any((s[i] + s[j] + s[k] == target) for i in range(len(s)) for j in range(i+1, len(s)) for k in range(j+1, len(s)))\ndef g(target=20):\n    return [5, 10, 2, 8, 15]\nassert f(g())\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, n=5, m=8) -> bool:\n    \"\"\"Check if a number is within a range.\"\"\"\n    return n <= x <= m\ndef g(n=5, m=8):\n    return (n + m) // 2\nassert f(g())\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there are two numbers in a list that add up to a given target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=50):\n    return [30, 20, 10, 40]\nassert f(g())\n",
        "idx_generation": 17,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, substr='python', count=5) -> bool:\n    \"\"\"Find a string 'x' that contains 'count' number of occurrences of the substring 'substr'\"\"\"\n    return x.count(substr) == count\n\ndef g(substr='python', count=5):\n    x = substr * count\n    return x\n\nassert f(g())\n",
        "idx_generation": 37,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square and its square root is divisible by 3\"\"\"\n    return math.isqrt(n)**2 == n and math.isqrt(n) % 3 == 0\ndef g():\n    return 9\nassert f(g())\n",
        "idx_generation": 59,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello world', num_repeats=5) -> bool:\n    \"\"\"Check if a given string can be obtained by repeating a target string a certain number of times\"\"\"\n    return s == target * num_repeats\ndef g(target='hello world', num_repeats=5):\n    return target * num_repeats\nassert f(g())\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50], target=36) -> bool:\n    \"\"\"Determine if a target number is in a list and if it is at an odd index.\"\"\"\n    return target in nums and nums.index(target) % 2 == 1\n\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50], target=36):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Given a string s and a target string, return True if the target string can be formed by\n    rearranging the characters of s, and False otherwise.\n    Sample Input:\n    s = 'ythonpt'\n    target = 'python'\n    Sample Output:\n    True\"\"\"\n    return sorted(s) == sorted(target)\ndef g(target='python'):\n    import random\n    s = list(target)\n    random.shuffle(s)\n    return ''.join(s)\nassert f(g())\n",
        "idx_generation": 468,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3141592653, b=2718281828, c=1234567890) -> bool:\n    \"\"\"Find a number that is divisible by all given integers.\"\"\"\n    return all(n % i == 0 for i in [a, b, c])\ndef g(a=3141592653, b=2718281828, c=1234567890):\n    return a * b * c\nassert f(g())\n",
        "idx_generation": 18,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: str, word_list=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Find the result by concatenating all words in the list in reverse order\"\"\"\n    reverse_concat = ''\n    for word in reversed(word_list):\n        reverse_concat += word\n    return result == reverse_concat\n\ndef g(word_list=['apple', 'banana', 'cherry']):\n    reverse_concat = ''\n    for word in reversed(word_list):\n        reverse_concat += word\n    return reverse_concat\n\nassert f(g())\n",
        "idx_generation": 38,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(x: float, y=2.5) -> bool:\n    \"\"\"Check if the square root of x is equal to y\"\"\"\n    return math.isclose(math.sqrt(x), y)\ndef g(y=2.5):\n    return y ** 2\nassert f(g())\n",
        "idx_generation": 60,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Find if a string contains exactly n vowels (case-insensitive).\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count == n\ndef g(n=3):\n    import random\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = ''.join(random.choice(vowels) for _ in range(n))\n    return s\nassert f(g())\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are any two numbers in the list that sum up to the target.\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 187,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, chars=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a word contains all the specified characters\"\"\"\n    return all(char in word for char in chars)\n\ndef g(chars=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(chars[::-1])\n\nassert f(g())\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if n is a multiple of any number in the list.\"\"\"\n    return any(n % num == 0 for num in lst)\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst[0] * lst[1] * lst[2]\nassert f(g())\n",
        "idx_generation": 18,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if any word in the list starts with the given prefix\"\"\"\n    return any([(word.startswith(prefix)) for word in words])\ndef g(prefix='pre'):\n    return ['prefix', 'preparation', 'word']\nassert f(g())\n",
        "idx_generation": 40,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if n is divisible by the length of the longest string in lst\"\"\"\n    max_len = max(len(s) for s in lst)\n    return n % max_len == 0\ndef g(lst=['apple', 'banana', 'cherry']):\n    max_len = max(len(s) for s in lst)\n    return max_len * 2\nassert f(g())\n",
        "idx_generation": 63,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], a=100, b=999, count=50) -> bool:\n    \"\"\"Find a list of count or more different numbers each between a and b that are palindromic\"\"\"\n    assert all((str(n) == str(n)[::-1] and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a=100, b=999, count=50):\n    return [n for n in range(a, b + 1) if str(n) == str(n)[::-1]]\nassert f(g())\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in a list that sums up to a target value.\"\"\"\n    return any(x + y == target for x in nums for y in nums if x != y)\ndef g(target=100):\n    return [1, target - 1]\nassert f(g())\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='puzzle') -> bool:\n    \"\"\"Check if all the letters in the word are present in the string\"\"\"\n    for char in word:\n        if char not in s:\n            return False\n    return True\n\ndef g(word='puzzle'):\n    return ''.join(sorted(word))\n\nassert f(g())\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 19,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string.\"\"\"\n    return substring in s\ndef g(substring='abc'):\n    return f\"def{substring}ghi\"\nassert f(g())\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, a=3, b=5, c=6) -> bool:\n    \"\"\"Find the result of multiplying three numbers together\"\"\"\n    return result == a * b * c\ndef g(a=3, b=5, c=6):\n    return a * b * c\nassert f(g())\n",
        "idx_generation": 65,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: str, char_count={'a': 2, 'b': 3}) -> bool:\n    \"\"\"Check if the given string contains at least the required count of each character\"\"\"\n    for char, count in char_count.items():\n        if arr.count(char) < count:\n            return False\n    return True\n\ndef g(char_count={'a': 2, 'b': 3}):\n    return 'aabbb'\n\nassert f(g())\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, lst=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) -> bool:\n    \"\"\"Check if x is in the list lst\"\"\"\n    return x in lst\ndef g(lst=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]):\n    return lst[0]\nassert f(g())\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is present in the list.\"\"\"\n    return n in lst\n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    random.shuffle(lst)\n    number = random.choice(lst)\n    return number\n\nassert f(g())\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Given a list of integers and a target number, find three numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 19,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='foo') -> bool:\n    \"\"\"Find the number of occurrences of the substring in the string\"\"\"\n    return string.count(substring) > 0\n\ndef g(substring='foo'):\n    return \"bar\" + substring + \"baz\"\n\nassert f(g())\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(result: float, angle=45) -> bool:\n    \"\"\"Find the result of calculating the sine of an angle in radians\"\"\"\n    return math.isclose(result, math.sin(math.radians(angle)))\ndef g(angle=45):\n    return math.sin(math.radians(angle))\nassert f(g())\n",
        "idx_generation": 65,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a', count=5) -> bool:\n    \"\"\"Check if a string has a specific character repeated a certain number of times.\"\"\"\n    return s.count(char) == count\n\ndef g(char='a', count=5):\n    return char * count\n\nassert f(g())\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=20) -> bool:\n    \"\"\"Check if there exists two numbers in the list whose sum is equal to the target sum\"\"\"\n    return any((n1 + n2 == target_sum for i, n1 in enumerate(numbers) for n2 in numbers[i+1:]))\ndef g(target_sum=20):\n    return [5, 10, 15, 20, 25]\nassert f(g())\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a given string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    return 'racecar'\nassert f(g())\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, prime_factors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a given number n has only prime factors from a specified list.\"\"\"\n    return all(n % factor == 0 for factor in prime_factors)\n    \ndef g(prime_factors=[2, 3, 5]):\n    n = 1\n    for factor in prime_factors:\n        n *= factor\n    return n\n\nassert f(g())\n",
        "idx_generation": 21,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, palindrome=True) -> bool:\n    \"\"\"Check if the word is a palindrome\"\"\"\n    return word == word[::-1] if palindrome else word != word[::-1]\n\ndef g(palindrome=True):\n    return \"racecar\" if palindrome else \"python\"\n\nassert f(g())\n",
        "idx_generation": 42,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=0) -> bool:\n    \"\"\"Check if the sum of the elements in a list is equal to a target value\"\"\"\n    return sum(li) == target\ndef g(li: List[int], target=0):\n    return li\nassert f(g([1, 2, 3, 4, 5]), target=15)\n",
        "idx_generation": 68,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, word=\"python\", char=\"t\") -> bool:\n    \"\"\"Check if the given character is present in the word at least n times.\"\"\"\n    return word.count(char) >= n\n\ndef g(word=\"python\", char=\"t\"):\n    return word.count(char)\n\nassert f(g())\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a given number is present in a list of numbers\"\"\"\n    return n in nums\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return random.choice(nums)\nassert f(g())\n",
        "idx_generation": 192,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, k=3) -> bool:\n    \"\"\"Determine if a word can be formed by combining exactly k consecutive letters in the English alphabet\"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    n = len(word)\n    for i in range(n - k + 1):\n        subword = word[i:i+k]\n        if subword.lower() not in alphabet:\n            return False\n    return True\ndef g(k=3):\n    return 'DEF'\nassert f(g())\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=3, y=5) -> bool:\n    \"\"\"Check if a number is divisible by both x and y\"\"\"\n    return n % x == 0 and n % y == 0\n\ndef g(x=3, y=5):\n    return x * y\nassert f(g())\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Find the number of occurrences of the first character of s in the string multiplied by n.\"\"\"\n    return s.count(s[0]) == n\ndef g(n=10):\n    return str(n) * n\nassert f(g())\n",
        "idx_generation": 42,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if x, y, and z are Pythagorean triples.\"\"\"\n    return x ** 2 + y ** 2 == z ** 2\ndef g():\n    return 3, 4, 5\nassert f(*g())\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char_count={'a': 2, 'b': 3, 'c': 1}) -> bool:\n    \"\"\"Check if a given string contains the specified number of each character\"\"\"\n    for char in char_count:\n        if s.count(char) != char_count[char]:\n            return False\n    return True\ndef g(char_count={'a': 2, 'b': 3, 'c': 1}):\n    return ''.join([char * char_count[char] for char in char_count])\nassert f(g())\n",
        "idx_generation": 473,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Given a list of numbers, find a pair of numbers that adds up to a target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=5):\n    return [1, target - 1]\nassert f(g())\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, words=['hello', 'world', 'python'], min_length=5) -> bool:\n    \"\"\"Check if a string is a substring of any word in a list\"\"\"\n    return any((x in word for word in words)) and len(x) >= min_length\ndef g(words=['hello', 'world', 'python'], min_length=5):\n    return words[1]\nassert f(g())\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], n=5) -> bool:\n    \"\"\"Check if a number is in a list\"\"\"\n    return n in lst\n\ndef g(n=5):\n    return random.sample(range(10), 5)\nassert f(g())\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int, chars=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']) -> bool:\n    \"\"\"Check if a string contains all the characters from a given list\"\"\"\n    return all((c in s for c in chars)) and len(s) == n\ndef g(n=10, chars=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']):\n    return ''.join(chars[:n])\nassert f(g(), n=10)\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(area: float, radius=2) -> bool:\n    \"\"\"Given the radius of a circle, find the area of the circle and check if it matches the given area.\"\"\"\n    circle_area = math.pi * radius**2\n    return math.isclose(area, circle_area)\n\ndef g(radius=2):\n    circle_area = math.pi * 2**2\n    return circle_area\n\nassert f(g())\n",
        "idx_generation": 70,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry'], target_count=2) -> bool:\n    \"\"\"Find a string that contains at least target_count occurrences of each substring\"\"\"\n    return all((s.count(sub) >= target_count for sub in substrings))\ndef g(substrings=['apple', 'banana', 'cherry'], target_count=2):\n    return ''.join(substrings * target_count)\nassert f(g())\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: list, a=[1, 2, 3], b=[4, 5, 6]) -> bool:\n    \"\"\"Check if the input list is a combination of a and b\"\"\"\n    return sorted(x) == sorted(a + b)\ndef g(a=[1, 2, 3], b=[4, 5, 6]):\n    return a + b\nassert f(g())\n",
        "idx_generation": 202,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Find a submatrix in the given matrix such that the sum of all its elements is equal to the target value.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == target:\n                return True\n    return False\n\ndef g(target=15):\n    return [[target]]\n\nassert f(g())\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, num_list=[4, 8, 15, 16, 23, 42]) -> bool:\n    \"\"\"Find a number that can be obtained by multiplying any two distinct numbers from the given list.\"\"\"\n    return any((x == num_list[i] * num_list[j] for i in range(len(num_list)) for j in range(i+1, len(num_list))))\ndef g(num_list=[4, 8, 15, 16, 23, 42]):\n    return num_list[0] * num_list[1]\nassert f(g())\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if the given character appears in the string at least twice.\"\"\"\n    return s.count(char) >= 2\n\ndef g(s='banana'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 44,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, angle=45) -> bool:\n    \"\"\"Check if the sine of the angle is equal to the given value.\"\"\"\n    return math.sin(math.radians(angle)) == x\n\ndef g(angle=45):\n    return math.sin(math.radians(angle))\n\nassert f(g())\n",
        "idx_generation": 71,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if all words in the list start with the given prefix\"\"\"\n    return all(word.startswith(prefix) for word in words)\ndef g(prefix='pre'):\n    return ['prefix', 'preposition', 'precaution', 'premature']\nassert f(g())\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='apple', b='banana') -> bool:\n    \"\"\"Check if s contains both strings a and b in any order\"\"\"\n    return a in s and b in s\ndef g(a='apple', b='banana'):\n    return a + ' ' + b\nassert f(g())\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(dates: List[datetime.date], year=2022) -> bool:\n    \"\"\"Find a list of dates that are all in the same year\"\"\"\n    return all(date.year == year for date in dates)\ndef g(year=2022):\n    dates = [datetime.date(year, 1, 1), datetime.date(year, 6, 15), datetime.date(year, 12, 31)]\n    return dates\nassert f(g())\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='apple') -> bool:\n    \"\"\"Check if a given substring is present in the string\"\"\"\n    return substr in s\ndef g(substr='apple'):\n    return \"I love eating \" + substr + \"s\"\nassert f(g())\n",
        "idx_generation": 44,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if the number n is divisible by all the primes in the list\"\"\"\n    return all(n % p == 0 for p in primes)\n\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    n = math.prod(primes)\n    return n\n\nassert f(g())\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find three integers that sum up to the target number.\"\"\"\n    return any((i + j + k == target for i in nums for j in nums for k in nums))\ndef g(target=10):\n    return [1, 2, target - 3]\nassert f(g())\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value.\"\"\"\n    return any((x + y == target) for x in arr for y in arr if x != y)\ndef g():\n    return [1, 2, 3, 4]\nassert f(g())\n",
        "idx_generation": 23,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the target string is a substring of the given string s\"\"\"\n    return target in s\n\ndef g(s='Hello, I love Python!'):\n    return 'python' if 'python' in s.lower() else 'not found'\nassert f(g())\n",
        "idx_generation": 45,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int, k: int, x: int = 2, y: int = 5) -> bool:\n    \"\"\"Check if n, m, k are divisible by both x and y\"\"\"\n    return n % x == 0 and n % y == 0 and m % x == 0 and m % y == 0 and k % x == 0 and k % y == 0\ndef g(x: int = 2, y: int = 5):\n    n = x * y\n    m = x * y * 2\n    k = x * y * 3\n    return n, m, k\nassert f(*g())\n",
        "idx_generation": 76,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target number can be obtained by adding any two numbers from the given list\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    random.shuffle(nums)\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 209,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target value.\"\"\"\n    return any((x + y + z == target) for x in arr for y in arr for z in arr if x != y and y != z and x != z)\ndef g():\n    return [1, 2, 3, 4, 5, 6]\nassert f(g())\n",
        "idx_generation": 23,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=\"Hello, World!\") -> bool:\n    \"\"\"Check if a given string is the reverse of a target string\"\"\"\n    return s[::-1] == target\ndef g(target=\"Hello, World!\"):\n    return target[::-1]\nassert f(g())\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=3.14) -> bool:\n    \"\"\"Check if the square root of x is equal to a\"\"\"\n    return math.sqrt(x) == a\n\ndef g(a=3.14):\n    return a ** 2\n\nassert f(g())\n",
        "idx_generation": 76,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, num_list=[5, 10, 15, 20, 25]) -> bool:\n    \"\"\"Check if the given integer is divisible by any number in the list.\"\"\"\n    for num in num_list:\n        if x % num == 0:\n            return True\n    return False\ndef g(num_list=[5, 10, 15, 20, 25]):\n    x = max(num_list) * 2\n    return x\nassert f(g())\n",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find if there exists a triplet in the list whose sum is equal to the target value\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n",
        "idx_generation": 23,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr_list=['cat', 'dog', 'bat']) -> bool:\n    \"\"\"Find s such that s contains all the substrings in substr_list\"\"\"\n    return all(substr in s for substr in substr_list)\ndef g(substr_list=['cat', 'dog', 'bat']):\n    return ''.join(substr_list)\nassert f(g())\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=5) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return x == a ** 2\ndef g(a=5):\n    return a * a\nassert f(g())\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array that add up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(n=10, target=15):\n    arr = np.random.randint(1, 10, n)\n    return arr\n\nassert f(g())\n",
        "idx_generation": 212,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=12) -> bool:\n    \"\"\"Given an array of integers, find a subarray that sums up to a target value.\"\"\"\n    subarray_sum = [arr[i:j].sum() for i in range(len(arr)) for j in range(i + 1, len(arr) + 1)]\n    return target in subarray_sum\n\ndef g(target=12):\n    return np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\nassert f(g())\n",
        "idx_generation": 25,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=\"apple\") -> bool:\n    \"\"\"Check if a target string is present in a given string\"\"\"\n    return target in s\ndef g(target=\"apple\"):\n    return \"I love eating \" + target + \"s\"\nassert f(g())\n",
        "idx_generation": 47,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=9, b=16, max_diff=3) -> bool:\n    \"\"\"Find a number that is within a certain range and has a certain difference between its square root and its cube root.\"\"\"\n    return a <= n <= b and abs(math.sqrt(n) - math.pow(n, 1/3)) <= max_diff\ndef g(a=9, b=16, max_diff=3):\n    return a + max_diff\nassert f(g())\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    return any(target - num in nums for num in nums)\ndef g():\n    return [1, 2, 3, 4, 5], 9\nassert f(*g())\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='abcde', count=2) -> bool:\n    \"\"\"Given a string s, find if there are at least `count` occurrences of each character in `target`.\"\"\"\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    return all((char_count.get(char, 0) >= count for char in target))\n\ndef g(target='abcde', count=2):\n    return target * count\n\nassert f(g())\n",
        "idx_generation": 25,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, min_len=5, max_len=10) -> bool:\n    \"\"\"Check if a string is a palindrome and its length is within a specified range.\"\"\"\n    return s == s[::-1] and min_len <= len(s) <= max_len\ndef g(min_len=5, max_len=10):\n    return 'racecar'\nassert f(g())\n",
        "idx_generation": 47,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix, determine if it has a symmetric diagonal, meaning that the elements on the main diagonal\nand its symmetric diagonal are the same.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 79,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(year: int, month=12, day=25) -> bool:\n    \"\"\"Check if the given date is a weekend\"\"\"\n    date = datetime.date(year, month, day)\n    return date.weekday() >= 5\n\ndef g(year=2022, month=12, day=25):\n    return year\n\nassert f(g())",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], a=5, b=10, c=15) -> bool:\n    \"\"\"Check if the sum of all elements in x is a multiple of a, b, and c\"\"\"\n    sum_x = sum(x)\n    is_multiple = sum_x % a == 0 and sum_x % b == 0 and sum_x % c == 0\n    return is_multiple\ndef g(a=5, b=10, c=15):\n    x = [a, b, c]\n    return x\nassert f(g())\n",
        "idx_generation": 26,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='Hello', b='World') -> bool:\n    \"\"\"Check if the given string is a concatenation of two words.\"\"\"\n    return s == a + b\n\ndef g(a='Hello', b='World'):\n    return a + b\n\nassert f(g())\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=2, y=5) -> bool:\n    \"\"\"Find two numbers x and y that satisfy the equation n = x^2 + y^2.\"\"\"\n    return any((math.sqrt(n - num**2).is_integer() for num in range(1, int(math.sqrt(n)) + 1)))\ndef g(x=2, y=5):\n    return x**2 + y**2\nassert f(g())\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Find if there is a saddle point in the given matrix, where the element is the minimum in its row and maximum in its column.\"\"\"\n    for row in matrix:\n        min_val = min(row)\n        col_idx = row.index(min_val)\n        column = [row[col_idx] for row in matrix]\n        max_val = max(column)\n        if min_val == max_val:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 215,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Find a square matrix where the sum of each row, column, and diagonal is the same\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    # Check rows\n    for i in range(n):\n        if sum(matrix[i]) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        column_sum = 0\n        for i in range(n):\n            column_sum += matrix[i][j]\n        if column_sum != target_sum:\n            return False\n    # Check diagonals\n    diagonal_sum1 = 0\n    diagonal_sum2 = 0\n    for i in range(n):\n        diagonal_sum1 += matrix[i][i]\n        diagonal_sum2 += matrix[i][n-i-1]\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n    return True\n\ndef g():\n    matrix = [[4, 9, 2],\n              [3, 5, 7],\n              [8, 1, 6]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Check if a string can be transformed into a target string by removing characters.\n    - s: the original string\n    - target_length: the length of the target string\"\"\"\n    \n    return len(s) == target_length\ndef g(target_length=10):\n    return \"Hello World\"[:target_length]\nassert f(g())\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: float, target=0.5) -> bool:\n    \"\"\"Find the natural logarithm (base e) of a given number such that it is close to a given target value.\"\"\"\n    return abs(math.log(num) - target) < 1e-06\n\ndef g(target=0.5):\n    return math.exp(target)\n\nassert f(g())\n",
        "idx_generation": 83,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list 'nums' contains at least one pair of numbers that add up to 10.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = 10 - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n",
        "idx_generation": 217,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, x=10, y=5) -> bool:\n    \"\"\"Find the result of dividing x by y and adding 1\"\"\"\n    return result == x//y + 1\ndef g(x=10, y=5):\n    return x//y + 1\nassert f(g())\n",
        "idx_generation": 28,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python', case_sensitive=True) -> bool:\n    \"\"\"Check if the target string is present in the given string with or without case sensitivity\"\"\"\n    if case_sensitive:\n        return target in s\n    else:\n        return target.lower() in s.lower()\ndef g(target='python', case_sensitive=True):\n    return target.upper() if not case_sensitive else target\nassert f(g())\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric along the diagonal.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of integers in the array that sums up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=10):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr\nassert f(g())\n",
        "idx_generation": 218,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(d: datetime.date, y=2022, m=10) -> bool:\n    \"\"\"Check if the given date is in the future, specifically in the month of October of the year 2022\"\"\"\n    return d > datetime.date(y, m, 1)\n\ndef g(y=2022, m=10):\n    return datetime.date.today() + datetime.timedelta(days=1)\nassert f(g())\n",
        "idx_generation": 28,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\n    - s: a string\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s: str):\n    return s\n\nassert f(g(\"racecar\"))\n",
        "idx_generation": 52,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=987654321, b=-123456789) -> bool:\n    \"\"\"Solve a division problem\"\"\"\n    return a / n == b\ndef g(a=987654321, b=-123456789):\n    return a / b\nassert f(g())\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list that sums up to the target value.\"\"\"\n    return any((True for i in range(len(arr)) for j in range(i+1, len(arr)) if arr[i] + arr[j] == target))\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return arr\nassert f(g())\n",
        "idx_generation": 221,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(l: list, n=7) -> bool:\n    \"\"\"Check if the given list contains exactly n unique elements\"\"\"\n    return len(set(l)) == n\n\ndef g(n=7):\n    return random.sample(range(1, 11), n)\nassert f(g())\n",
        "idx_generation": 28,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, pattern='abc') -> bool:\n    \"\"\"Find a string s that contains the given pattern as a substring\"\"\"\n    return pattern in s\n\ndef g(pattern='abc'):\n    return pattern * 10\n\nassert f(g())\n",
        "idx_generation": 52,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, target_area=50) -> bool:\n    \"\"\"Check if the area of a circle with the given radius is equal to the target area.\"\"\"\n    area = math.pi * radius ** 2\n    return area == target_area\n\ndef g(target_area=50):\n    radius = math.sqrt(target_area / math.pi)\n    return radius\n\nassert f(g())\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers, find any pair of numbers that adds up to the target.\n    Sample Input:\n    [1, 2, 3, 4, 5]\n    Sample Output:\n    (2, 3)\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums) - 1) for j in range(i + 1, len(nums))))\n    \ndef g(nums: List[int], target=100):\n    random.shuffle(nums)\n    return (nums[0], target - nums[0])\nassert f(g([1, 2, 3, 4, 5]))\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that sum up to the target\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for x in range(i, len(matrix)):\n                for y in range(len(matrix[x])):\n                    if matrix[i][j] + matrix[x][y] == target:\n                        return True\n    return False\ndef g(target=10):\n    return [[2, 4, 6], [1, 3, 5], [7, 9, 8]]\nassert f(g())\n",
        "idx_generation": 30,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string contains a substring of a specific length.\"\"\"\n    return any(len(s[i:i+n]) == n for i in range(len(s)-n+1))\ndef g(n=3):\n    return 'abcdefghi'*n\nassert f(g())\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=7) -> bool:\n    \"\"\"Check if n is divisible by the sum of a and b\"\"\"\n    return n % (a + b) == 0\ndef g(a=3, b=7):\n    return (a + b) * 5\nassert f(g())\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[3, 5, 7, 11, 13, 17]) -> bool:\n    \"\"\"Check if a number is in a sorted list\"\"\"\n    return n in lst\ndef g(lst=[3, 5, 7, 11, 13, 17]):\n    return lst[len(lst) // 2]\nassert f(g())\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, num_list=[1, 3, 5, 7, 9]) -> bool:\n    \"\"\"Check if n is present in num_list\"\"\"\n    return n in num_list\n\ndef g(num_list=[1, 3, 5, 7, 9]):\n    return random.choice(num_list)\n\nassert f(g())\n",
        "idx_generation": 30,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport string\n\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if the given string contains all the lowercase letters of the English alphabet in order, with each letter repeated n times.\"\"\"\n    lowercase_alphabet = string.ascii_lowercase\n    repeated_letters = lowercase_alphabet * n\n    return repeated_letters in s\n\ndef g(n: int):\n    \"\"\"Generate a string that contains all lowercase letters of the English alphabet in order, with each letter repeated n times.\"\"\"\n    lowercase_alphabet = string.ascii_lowercase\n    repeated_letters = lowercase_alphabet * n\n    return repeated_letters\n\nassert f(g(2), 2)\n",
        "idx_generation": 55,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, n=3, m=7) -> bool:\n    \"\"\"Check if x is a multiple of n and m\"\"\"\n    return x % n == 0 and x % m == 0\ndef g(n=3, m=7):\n    return n * m\nassert f(g())\n",
        "idx_generation": 90,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any((x + y == target for x in numbers for y in numbers if x != y))\ndef g(target=50):\n    return [10, 20, 30, 40, 50]\nassert f(g())\n",
        "idx_generation": 225,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list whose sum is equal to a target value.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 31,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring=\"Python\") -> bool:\n    \"\"\"Check if the substring is found in the given string.\"\"\"\n    return substring in string\n    \ndef g(substring=\"Python\"):\n    return \"I love Python programming\"\n\nassert f(g())\n",
        "idx_generation": 57,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(area: float, radius=5) -> bool:\n    \"\"\"Find the radius of a circle given its area.\"\"\"\n    circle_area = math.pi * radius**2\n    return circle_area == area\ndef g(radius=5):\n    circle_area = math.pi * radius**2\n    return circle_area\nassert f(g())\n",
        "idx_generation": 91,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target value, find a pair of numbers in the list whose sum is equal to the target value.\nReturn True if such a pair exists, False otherwise.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [2, 8, 4, 6]\nassert f(g())\n",
        "idx_generation": 226,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=5, c=7) -> bool:\n    \"\"\"Check if a number is divisible by three different integers.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=3, b=5, c=7):\n    return a * b * c\nassert f(g())\n",
        "idx_generation": 31,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(target: str, words=['hello', 'world', 'python', 'programming']) -> bool:\n    \"\"\"Find the word in the list that contains all the characters of the target word in the same order\"\"\"\n    for word in words:\n        target_index = 0\n        for char in word:\n            if target_index < len(target) and char == target[target_index]:\n                target_index += 1\n        if target_index == len(target):\n            return True\n    return False\ndef g(words=['hello', 'world', 'python', 'programming']):\n    for word in words:\n        if all(char in word for char in set(word)):\n            return word\nassert f(g())\n",
        "idx_generation": 57,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=2) -> bool:\n    \"\"\"Determine if n is a power of x\"\"\"\n    return math.log(n, x).is_integer()\ndef g(x=2):\n    return 64\nassert f(g())\n",
        "idx_generation": 92,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Check if the given list contains two elements that add up to 10.\"\"\"\n    return any((li[i] + li[j] == 10 for i in range(len(li)) for j in range(i+1, len(li))))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if a given number n is present in the matrix\"\"\"\n    for row in matrix:\n        if n in row:\n            return True\n    return False\ndef g(n=3):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 32,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, y: str, z: str, target=\"rhinoceros\") -> bool:\n    \"\"\"Check if the concatenation of x, y, and z forms the target string\"\"\"\n    return x + y + z == target\ndef g(target=\"rhinoceros\"):\n    x = target[0]\n    y = target[1:4]\n    z = target[4:]\n    return x, y, z\nassert f(*g())\n",
        "idx_generation": 58,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(result: float, x=2, y=3) -> bool:\n    \"\"\"Check if the result is equal to the square root of the sum of x and y\"\"\"\n    return result == math.sqrt(x + y)\n\ndef g(x=2, y=3):\n    return math.sqrt(x + y)\n\nassert f(g())\n",
        "idx_generation": 95,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=13, pairs=[(4, 9), (7, 2), (10, 3), (5, 8), (6, 1)]) -> bool:\n    \"\"\"Check if there exist two numbers in a given list that sum up to a target value\"\"\"\n    return any((pair[0] + pair[1] == target for pair in pairs))\ndef g(target=13, pairs=[(4, 9), (7, 2), (10, 3), (5, 8), (6, 1)]):\n    return [num for pair in pairs for num in pair if pair[0] + pair[1] == target]\nassert f(g())\n",
        "idx_generation": 32,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: str, p='abcde', q='vwxyz') -> bool:\n    \"\"\"Check if a string contains all the characters in p and q in any order\"\"\"\n    return all((c in n for c in p)) and all((c in n for c in q))\ndef g(p='abcde', q='vwxyz'):\n    return p + q\nassert f(g())\n",
        "idx_generation": 59,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a number that is a perfect square.\"\"\"\n    import math\n    return math.isqrt(n)**2 == n\ndef g():\n    return 16\nassert f(g())\n",
        "idx_generation": 97,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exist two numbers in the list nums whose sum is equal to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=20):\n    nums = [10, 5, 7, 12, 3, 8]\n    return nums\nassert f(g())\n",
        "idx_generation": 233,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, limit=1000000) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(limit=1000000):\n    for n in range(limit):\n        if f(n):\n            return n\nassert f(g())\n",
        "idx_generation": 33,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target='') -> bool:\n    \"\"\"Check if a given string is a palindrome or not.\"\"\"\n    return string == target or string[::-1] == target\ndef g(target=''):\n    return target\nassert f(g())\n",
        "idx_generation": 59,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=10) -> bool:\n    \"\"\"Check if the sum of the first n elements of x is equal to n * (n + 1) / 2.\"\"\"\n    return sum(x[:n]) == n * (n + 1) // 2\n\ndef g(n=10):\n    return list(range(1, n + 1))\n\nassert f(g())\n",
        "idx_generation": 97,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 4, 9, 16, 25, 36, 49, 64, 81, 100], k=3) -> bool:\n    \"\"\"Given a list of non-decreasing integers and given an integer k, determine if the kth element is a perfect square.\"\"\"\n    assert all((nums[i] <= nums[i + 1] for i in range(len(nums) - 1))), 'Hint: nums are non-decreasing'\n    return nums[k] == int(nums[k] ** 0.5) ** 2\ndef g(nums=[1, 4, 9, 16, 25, 36, 49, 64, 81, 100], k=3):\n    return nums[k]\nassert f(g())\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if n is divisible by m\"\"\"\n    return n % m == 0\ndef g(m=10):\n    n = m * 2\n    while not f(n):\n        n += m\n    return n\nassert f(g())\n",
        "idx_generation": 33,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(st: str, substr='python', replace='java') -> bool:\n    \"\"\"Check if a substring exists in a string and replace it with a given value.\"\"\"\n    return substr in st and st.replace(substr, replace) != st\ndef g(substr='python', replace='java'):\n    return substr + ' is awesome!'\nassert f(g())\n",
        "idx_generation": 60,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=6, c=9) -> bool:\n    \"\"\"Check if the given number is a multiple of a, b, and c.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0 and a * b * c == n\ndef g(a=3, b=6, c=9):\n    return a * b * c\nassert f(g())\n",
        "idx_generation": 98,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in a list that add up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 9, 2, 8, 3, 7, 4, 6, 5]\nassert f(g())\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(dates: List[datetime.date], year=2022) -> bool:\n    \"\"\"Check if all the dates in the list are from the specified year\"\"\"\n    return all((date.year == year for date in dates))\n\ndef g(year=2022):\n    dates = [datetime.date(year, month, 1) for month in range(1, 13)]\n    return dates\nassert f(g())\n",
        "idx_generation": 34,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='python') -> bool:\n    \"\"\"Given a string, determine if it contains a specified substring.\"\"\"\n    return substring in string\ndef g(substring='python'):\n    string = \"Hello, I love python programming!\"\n    return string\nassert f(g())\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=17, b=23) -> bool:\n    \"\"\"Check if the sum of a and x is equal to b\"\"\"\n    return a + x == b\ndef g(a=17, b=23):\n    return b - a\nassert f(g())\n",
        "idx_generation": 101,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a number n is present in the given array.\"\"\"\n    return n in arr\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr[0]\nassert f(g())\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr: List[int], target=5) -> bool:\n    \"\"\"Find a subarray of arr whose sum is equal to target\"\"\"\n    return any(sum(arr[i:j]) == target for i in range(n) for j in range(i+1, n+1))\ndef g(arr=[1, 2, 3, 4, 5]):\n    return len(arr), arr\nassert f(g()[0], g()[1])\n",
        "idx_generation": 34,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python', count=3) -> bool:\n    \"\"\"Find the number of occurrences of a target string in a given string\"\"\"\n    return s.count(target) == count\ndef g(target='python', count=3):\n    return target * count\nassert f(g())\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"Check if the given number n is a perfect square and is divisible by all the factors\"\"\"\n    return sqrt(n) % 1 == 0 and all(n % f == 0 for f in factors)\n\ndef g(factors=[2, 3, 5]):\n    n = 1\n    for f in factors:\n        n *= f\n    return n ** 2\n\nassert f(g())\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], num=5) -> bool:\n    \"\"\"Check if the number 'num' appears in the given list.\"\"\"\n    return num in lst\ndef g(num=5):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 248,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a list that sum up to a target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 34,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if the given string is a substring of any of the strings in the list.\"\"\"\n    return any(s in string for string in strings)\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return strings[2][1:4]\nassert f(g())\n",
        "idx_generation": 64,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(numbers: List[int], target=24) -> bool:\n    \"\"\"Check if it is possible to obtain the target number using the given list of numbers and the operations +, -, *, /\"\"\"\n    for perm in permutations(numbers):\n        a, b, c, d = perm\n        if a + b + c + d == target:\n            return True\n        elif a - b - c - d == target:\n            return True\n        elif a * b * c * d == target:\n            return True\n        elif a / b / c / d == target:\n            return True\n    return False\ndef g(target=24):\n    return [1, 2, 3, 4]\nassert f(g())\n",
        "idx_generation": 104,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(pairs: List[Tuple[int, int]], target=100) -> bool:\n    \"\"\"Find a pair of numbers whose sum is equal to the target value.\"\"\"\n    return any(a + b == target for (a, b) in pairs)\ndef g(target=100):\n    from random import randint\n    pairs = [(randint(1, target), randint(1, target)) for _ in range(100)]\n    return pairs\nassert f(g())\n",
        "idx_generation": 249,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a submatrix with a specific sum\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(j, cols):\n                    submatrix_sum = sum(matrix[x][y] for x in range(i, k+1) for y in range(j, l+1))\n                    if submatrix_sum == target:\n                        return True\n    return False\n\ndef g(target=20):\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, target-15]]\n\nassert f(g())\n",
        "idx_generation": 36,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"Find if substr is a substring of string\"\"\"\n    return substr in string\ndef g(substr='abc'):\n    return \"abcdefg\"\nassert f(g())\n",
        "idx_generation": 65,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(result: float, x=5, y=3) -> bool:\n    \"\"\"Check if the result is equal to the square root of the sum of x and y\"\"\"\n    return result == math.sqrt(x + y)\n\ndef g(x=5, y=3):\n    return math.sqrt(x + y)\n\nassert f(g())\n",
        "idx_generation": 105,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [3, 7, 2, 5, 6, 4]\nassert f(g())\n",
        "idx_generation": 249,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10, k=5) -> bool:\n    \"\"\"Check if n is a multiple of m and divisible by k.\"\"\"\n    return n % m == 0 and n % k == 0\ndef g(m=10, k=5):\n    return m * k\nassert f(g())\n",
        "idx_generation": 38,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if the substring is present in the string\"\"\"\n    return substring in string\ndef g(substring='abc'):\n    string = 'xyzabc123'\n    return string\nassert f(g())\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if n is a perfect square and m is a perfect cube.\"\"\"\n    return math.isqrt(n)**2 == n and round(m**(1/3))**3 == m\n\ndef g():\n    return 16, 27\n\nassert f(*g())\n",
        "idx_generation": 107,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    return n in primes\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19]):\n    return primes[-1]\nassert f(g())\n",
        "idx_generation": 250,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, m=10) -> bool:\n    \"\"\"Find a random integer between 0 and n (inclusive) that is divisible by m.\"\"\"\n    return random.randint(0, n) % m == 0\ndef g(m=10):\n    return random.randint(0, m)\nassert f(g())\n",
        "idx_generation": 39,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[str], target='') -> bool:\n    \"\"\"Check if the concatenation of the strings in a list is equal to a target string\"\"\"\n    return ''.join(li) == target\ndef g(li: List[str], target=''):\n    return li\nassert f(g(['Hello', ' ', 'World']), target='Hello World')\n",
        "idx_generation": 68,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=1.5, b=3.8) -> bool:\n    \"\"\"Check if the given number is within the specified range\"\"\"\n    return math.floor(a) <= x <= math.ceil(b)\n    \ndef g(a=1.5, b=3.8):\n    return (a + b) / 2\n\nassert f(g())\n",
        "idx_generation": 108,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order.\"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 250,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    return any([(nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums))])\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g())\n",
        "idx_generation": 40,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Convert the given date string to a datetime object and check if it matches the given format.\"\"\"\n    try:\n        datetime.datetime.strptime(date, format)\n        return True\n    except ValueError:\n        return False\n\ndef g(format='%Y-%m-%d'):\n    return datetime.datetime.now().strftime(format)\n\nassert f(g())\n",
        "idx_generation": 70,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, year=2023, month=12, day=31) -> bool:\n    \"\"\"Check if a given date is the last day of the year\"\"\"\n    return date.year == year and date.month == month and date.day == day\n\ndef g(year=2023, month=12, day=31):\n    return datetime.date(year, month, day)\n\nassert f(g())\n",
        "idx_generation": 109,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: list, target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target number\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9]\nassert f(g())\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers that sums up to the target\"\"\"\n    numSet = set()\n    for num in nums:\n        if target - num in numSet:\n            return True\n        numSet.add(num)\n    return False\ndef g(target=7):\n    return [1, 2, 3, 4, target-10]\nassert f(g())\n",
        "idx_generation": 40,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Given a list of words, check if any word has the given prefix.\"\"\"\n    for word in words:\n        if word.startswith(prefix):\n            return True\n    return False\n\ndef g(words=['prefix', 'suffix', 'word']):\n    return words\n\nassert f(g())\n",
        "idx_generation": 70,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, prime_factors=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if a given number is divisible by all the provided prime factors.\nThe number is divisible if the remainder of the division is 0.\"\"\"\n    return all(n % p == 0 for p in prime_factors)\n\ndef g(prime_factors=[2, 3, 5, 7, 11, 13]):\n    return math.prod(prime_factors)\n    \nassert f(g())\n",
        "idx_generation": 110,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(sides: list) -> bool:\n    \"\"\"Check if the given list of side lengths can form a valid triangle.\"\"\"\n    a, b, c = sides\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if a + b <= c or b + c <= a or c + a <= b:\n        return False\n    return True\n\ndef g():\n    return [3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list whose sum is equal to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 42,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if there are exactly n occurrences of a character in a string\"\"\"\n    return s.count('a') == n\ndef g(n=3):\n    return 'a' * n + 'b'\nassert f(g())\n",
        "idx_generation": 71,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return num >= 0 and int(num**0.5)**2 == num\ndef g():\n    return 25**2\nassert f(g())\n",
        "idx_generation": 111,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sum up to a given value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == n:\n                return True\n    return False\ndef g(n=5):\n    arr = [1, 2, 3, 4, 5]\n    return arr\nassert f(g())\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Find three numbers in a list that add up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(nums: List[int] = [2, 4, 6, 8, 10, 12, 14, 16]):\n    return nums\nassert f(g())\n",
        "idx_generation": 42,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, word=\"Python\", num=3) -> bool:\n    \"\"\"Check if the given word appears num times in the sentence.\"\"\"\n    return sentence.count(word) == num\n\ndef g(word=\"Python\", num=3):\n    return \"I love Python and Python loves me. Python is the best.\"\n\nassert f(g())\n",
        "idx_generation": 72,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=123456789, b=987654321) -> bool:\n    \"\"\"Check if the sum of the squares of two integers is equal to a given number\"\"\"\n    return (math.sqrt(n - a**2) == b) or (math.sqrt(n - b**2) == a)\n    \ndef g(a=123456789, b=987654321):\n    return a**2 + b**2\n\nassert f(g())\n",
        "idx_generation": 111,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the given list that sum up to the target value\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[2, 4, 6, 8]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 260,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=2) -> bool:\n    \"\"\"Check if a given number is present in a matrix\"\"\"\n    for row in matrix:\n        if n in row:\n            return True\n    return False\ndef g(n=2):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 44,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"Check if the substring is present in the string\"\"\"\n    return substr in string\ndef g(substr='python'):\n    return \"I love python programming\"\nassert f(g())\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return math.isqrt(n)**2 == n\n\ndef g():\n    return 100\n\nassert f(g())\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(nums: List[float], target=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum of squares is equal to the target value.\"\"\"\n    return any((sqrt(a ** 2 + b ** 2) == target for a in nums for b in nums))\ndef g(target=5):\n    return [sqrt(target ** 2 / 2), sqrt(target ** 2 / 2)]\nassert f(g())\n",
        "idx_generation": 262,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find four numbers in a list that add up to the target value.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] + nums[l] == target for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums)) for l in range(k + 1, len(nums))))\ndef g(target=100):\n    nums = [10, 20, 30, 40, 50]\n    return nums\nassert f(g())\n",
        "idx_generation": 45,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='python', index=5) -> bool:\n    \"\"\"Check if the substring occurs at the given index in the string.\"\"\"\n    return string[index:index+len(substr)] == substr\ndef g(substr='python', index=5):\n    string = 'I love programming in python!'\n    return string[:index] + substr + string[index+len(substr):]\nassert f(g())\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, volume=523.6) -> bool:\n    \"\"\"Find the radius of a sphere whose volume is close to the target volume.\"\"\"\n    return abs(4/3 * math.pi * radius**3 - volume) < 1e-03\ndef g(volume=523.6):\n    return (3 * volume / (4 * math.pi))**(1/3)\nassert f(g())\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: list, target=99, length=10) -> bool:\n    \"\"\"Check if a list contains a target value and has a certain length\"\"\"\n    return target in arr and len(arr) == length\ndef g(target=99, length=10):\n    return [target] * length\nassert f(g())\n",
        "idx_generation": 262,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Find three numbers in the array that add up to the target sum\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target_sum:\n                    return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], target_sum=10):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target_sum:\n                    return [arr[i], arr[j], arr[k]]\n    return []\nassert f(g())\n",
        "idx_generation": 45,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='programming') -> bool:\n    \"\"\"Check if the word 'programming' is a substring of s\"\"\"\n    return word in s\ndef g(word='programming'):\n    return word\nassert f(g())\n",
        "idx_generation": 76,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, year=2022, month=7, day=15) -> bool:\n    \"\"\"Check if a given date matches a specific year, month, and day.\"\"\"\n    return date.year == year and date.month == month and date.day == day\n\ndef g(year=2022, month=7, day=15):\n    return datetime.date(year, month, day)\n\nassert f(g())\n",
        "idx_generation": 116,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(array: list, target=9) -> bool:\n    \"\"\"Find if there are two numbers in the array that add up to the target\"\"\"\n    for i in range(len(array)):\n        for j in range(i + 1, len(array)):\n            if array[i] + array[j] == target:\n                return True\n    return False\ndef g(target=9):\n    return [2, 7, 1, 5]\nassert f(g())\n",
        "idx_generation": 266,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=10) -> bool:\n    \"\"\"Check if a given number is divisible by the target number\"\"\"\n    return n % target == 0\ndef g(target=10):\n    return target * 2\nassert f(g())\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, m=2) -> bool:\n    \"\"\"Check if a string can be divided into n substrings of equal length, where each substring is a palindrome.\"\"\"\n    length = len(s)\n    if length % n != 0 or length < n * m:\n        return False\n    substr_len = length // n\n    substrings = [s[i:i+substr_len] for i in range(0, length, substr_len)]\n    return all(substring == substring[::-1] for substring in substrings)\ndef g(n=3, m=2):\n    s = \"abcbaabcbaabcba\"\n    return s\nassert f(g())\n",
        "idx_generation": 76,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=2, y=3) -> bool:\n    \"\"\"Check if n is a perfect power of x raised to the y-th power\"\"\"\n    return math.isqrt(n) ** y == n\ndef g(x=2, y=3):\n    return x ** y\nassert f(g())\n",
        "idx_generation": 117,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list that sum up to the target\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if target - num in num_set:\n            return True\n    return False\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of the numbers in a given list is equal to the target number\"\"\"\n    return sum(li) == target\ndef g(target=100):\n    return [10, 20, 30, 40]\nassert f(g())\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string\"\"\"\n    return substr in s\n\ndef g(substr='abc'):\n    return 'xyz' + substr + 'def'\n\nassert f(g())\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=7, c=9) -> bool:\n    \"\"\"Check if n is a solution to the equation (a + b) / c\"\"\"\n    return (a + b) / c == n\ndef g(a=5, b=7, c=9):\n    return (a + b) / c\nassert f(g())\n",
        "idx_generation": 117,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: list, n=5, m=10) -> bool:\n    \"\"\"Check if the sum of the first n elements of lst is greater than m\"\"\"\n    return sum(lst[:n]) > m\ndef g(n=5, m=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, li=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if a number is present in a list\"\"\"\n    return n in li\ndef g(li=[2, 4, 6, 8, 10]):\n    return li[2]\nassert f(g())\n",
        "idx_generation": 47,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome (ignoring spaces and case)\"\"\"\n    clean_str = ''.join(s.lower().split())\n    return clean_str == clean_str[::-1]\ndef g():\n    return 'A man a plan a canal Panama'\nassert f(g())\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisor=3) -> bool:\n    \"\"\"Check if n is divisible by the divisor\"\"\"\n    return n % divisor == 0\n\ndef g(divisor=3):\n    return divisor * 5\n\nassert f(g())\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target\"\"\"\n    return any(num1 + num2 == target for i, num1 in enumerate(numbers) for num2 in numbers[i+1:])\ndef g(target=10):\n    numbers = [2, 5, 8, 3, 7, 4]\n    return numbers\nassert f(g())\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date_str: str, year=2022, month=1, day=1) -> bool:\n    \"\"\"Check if the given date is in the future.\"\"\"\n    given_date = datetime.datetime.strptime(date_str, \"%Y-%m-%d\")\n    target_date = datetime.datetime(year, month, day)\n    return given_date > target_date\n\ndef g(year=2022, month=1, day=1):\n    current_date = datetime.datetime.now()\n    future_date = current_date + datetime.timedelta(days=365)\n    return future_date.strftime(\"%Y-%m-%d\")\n\nassert f(g())\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, num_vowels=2, num_consonants=3) -> bool:\n    \"\"\"Check if a string s contains the specified number of vowels and consonants\"\"\"\n    vowels = \"aeiou\"\n    vowel_count = 0\n    consonant_count = 0\n    for char in s:\n        if char.lower() in vowels:\n            vowel_count += 1\n        else:\n            consonant_count += 1\n    return vowel_count == num_vowels and consonant_count == num_consonants\n\ndef g(num_vowels=2, num_consonants=3):\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    vowels_list = [vowels[i%len(vowels)] for i in range(num_vowels)]\n    consonants_list = [consonants[i%len(consonants)] for i in range(num_consonants)]\n    return \"\".join(vowels_list + consonants_list)\n\nassert f(g())\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=1000) -> bool:\n    \"\"\"Check if a number is divisible by m\"\"\"\n    return n % m == 0\n\ndef g(m=1000):\n    return 5000\n\nassert f(g())\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"Check if a target number is present in a matrix\"\"\"\n    return any((target in row for row in matrix))\ndef g(target=8):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 274,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target.\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(nums=[2, 4, 6, 8]):\n    return nums\nassert f(g())\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if the reversed word is equal to s\"\"\"\n    return word[::-1] == s\ndef g(word='python'):\n    return word[::-1]\nassert f(g())\n",
        "idx_generation": 79,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, threshold=0.5) -> bool:\n    \"\"\"Check if the sum of all elements in the array is greater than a given threshold.\"\"\"\n    return np.sum(arr) > threshold\n\ndef g(threshold=0.5, shape=(3,3)):\n    return np.random.rand(*shape)\n\nassert f(g())\n",
        "idx_generation": 119,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10, count=2) -> bool:\n    \"\"\"Find if there exists a pair of numbers in a list whose sum is equal to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=10, count=2):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 8, 5, 4, 6, 1]\n\nassert f(g())\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Given two strings s and t, determine if they are isomorphic. Two strings are isomorphic if the characters in s can be replaced to get t.\"\"\"\n    if len(s) != len(t):\n        return False\n    char_map = {}\n    for i in range(len(s)):\n        if s[i] in char_map:\n            if char_map[s[i]] != t[i]:\n                return False\n        else:\n            if t[i] in char_map.values():\n                return False\n            char_map[s[i]] = t[i]\n    return True\n\ndef g():\n    return \"egg\", \"add\"\n\nassert f(*g())\n",
        "idx_generation": 81,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=4, b=2) -> bool:\n    \"\"\"Check if the square root of n, when rounded to the nearest integer, is equal to a raised to the power of b.\"\"\"\n    return round(math.sqrt(n)) == a ** b\n\ndef g(a=4, b=2):\n    \"\"\"Return a number n such that the square root of n, when rounded to the nearest integer, is equal to a raised to the power of b.\"\"\"\n    return (a ** b) ** 2\n\nassert f(g())\n",
        "idx_generation": 119,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10, k=2) -> bool:\n    \"\"\"Find if there exists two integers in the given list such that their sum is equal to the target\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10, k=2):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n",
        "idx_generation": 279,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=7) -> bool:\n    \"\"\"Find a number in the matrix that equals the target\"\"\"\n    for row in matrix:\n        for num in row:\n            if num == target:\n                return True\n    return False\n\ndef g(target=7):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(res: int, m=123456789, n=5) -> bool:\n    \"\"\"Find the result of applying the following operation to integer m, n times: reverse the digits of m.\"\"\"\n    m = int(str(m)[::-1])\n    return res == m\ndef g(m=123456789, n=5):\n    m = int(str(m)[::-1])\n    return m\nassert f(g())\n",
        "idx_generation": 81,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(d: datetime.datetime) -> bool:\n    \"\"\"Check if the year of a given date is a leap year.\"\"\"\n    return d.year % 4 == 0 and (d.year % 100 != 0 or d.year % 400 == 0)\n\ndef g(year=2000, month=2, day=29, hour=0, minute=0, second=0):\n    return datetime.datetime(year, month, day, hour, minute, second)\n\nassert f(g())\n",
        "idx_generation": 121,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Return True if two numbers in the list add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=9):\n    return [2, 7, 11, 15]\n\nassert f(g())\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target=25) -> bool:\n    \"\"\"Check if there are two numbers in a list that add up to a given target\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False\ndef g(target=25):\n    return [10, 15, 7, 3, 8]  # Example list of numbers\nassert f(g())\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(is_palindrome: bool, s='racecar') -> bool:\n    \"\"\"Check if a given string s is a palindrome.\"\"\"\n    return is_palindrome == (s == s[::-1])\ndef g(s='racecar'):\n    return s == s[::-1]\nassert f(g())\n",
        "idx_generation": 81,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return math.isqrt(n)**2 == n\n\ndef g(n=49):\n    return n**2\n\nassert f(g())\n",
        "idx_generation": 121,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=16) -> bool:\n    \"\"\"Check if there are two numbers in a list that add up to the target number.\"\"\"\n    return any((x + y == target for i, x in enumerate(lst) for y in lst[i+1:]))\ndef g(target=16):\n    return [2, 4, 6, 8, 10, 12]\nassert f(g())\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find a number in the list that is divisible by n.\"\"\"\n    return any(num % n == 0 for num in num_list)\ndef g(num_list=[1, 2, 3, 4, 5]):\n    return num_list[1]\nassert f(g())\n",
        "idx_generation": 52,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if the given string contains the specified substring\"\"\"\n    return substr in s\ndef g(substr='abc'):\n    return \"def\" + substr + \"ghi\"\nassert f(g())\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=20) -> bool:\n    \"\"\"Find the value of n that is a perfect square and divisible by x\"\"\"\n    return math.isqrt(n) ** 2 == n and n % x == 0\n\ndef g(x=20):\n    return x ** 2\n\nassert f(g())\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], t=50, n=3) -> bool:\n    \"\"\"Check if the maximum value in the list is greater than or equal to the target\"\"\"\n    assert all([v > 0 for v in x])\n    return max(x) >= t\n\ndef g(t=50, n=3):\n    return [10] * n + [t]\n\nassert f(g())\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find two numbers in the list that sum up to n.\"\"\"\n    return any(num1 + num2 == n for num1 in num_list for num2 in num_list)\ndef g(num_list=[1, 2, 3, 4, 5]):\n    random.shuffle(num_list)\n    return num_list[:2]\nassert f(g()[0])\n",
        "idx_generation": 52,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='puzzles', count=3) -> bool:\n    \"\"\"Find a substring that appears count times in the given string.\"\"\"\n    return string.count(substring) == count\ndef g(substring='puzzles', count=3):\n    return substring * count\nassert f(g())\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: datetime, day=1, month=1, year=2022) -> bool:\n    \"\"\"Check if the given date is in the future\"\"\"\n    return date > datetime(year, month, day)\n    \ndef g(day=1, month=1, year=2022):\n    current_date = datetime.now()\n    future_date = current_date.replace(year=year, month=month, day=day)\n    return future_date\n\nassert f(g())\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Find if there exists two distinct indices i and j in the given list such that nums[i] == nums[j] and abs(i - j) <= k.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j] and abs(i-j) <= k:\n                return True\n    return False\n\ndef g(k=3):\n    nums = [1, 2, 3, 1, 4, 5]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 290,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=7, c=11) -> bool:\n    \"\"\"Find n that can be expressed as a sum of a, b, and c\"\"\"\n    return a + b + c == n\n\ndef g(a=3, b=7, c=11):\n    return a + b + c\n\nassert f(g())\n",
        "idx_generation": 52,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring=\"puzzle\") -> bool:\n    \"\"\"Check if the given string contains the given substring in a case-insensitive manner.\"\"\"\n    return substring.lower() in s.lower()\n\ndef g(substring=\"puzzle\"):\n    return \"This is a programming puzzle.\"\n\nassert f(g())\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int, n=3) -> bool:\n    \"\"\"Check if the given number is a perfect square\"\"\"\n    return math.isqrt(num) ** 2 == num\n\ndef g(n=3):\n    return n ** 2\n\nassert f(g())\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if n is not present in the list lst.\"\"\"\n    return n not in lst\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return 0\nassert f(g())\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=['a', 'b', 'c', 'd', 'e'], index=2) -> bool:\n    \"\"\"Find the element at the given index in the target list that matches the given string\"\"\"\n    return target[index] == s\ndef g(target=['a', 'b', 'c', 'd', 'e'], index=2):\n    return target[index]\nassert f(g())\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, chars=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']) -> bool:\n    \"\"\"Check if all characters in the given string are in the list of characters.\"\"\"\n    for char in s:\n        if char not in chars:\n            return False\n    return True\ndef g():\n    return \"abcdefghij\"\nassert f(g())\n",
        "idx_generation": 85,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there is a pair of distinct numbers in 'nums' that sums up to the 'target'\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 10):\n    return nums\nassert f(g())\n",
        "idx_generation": 127,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_product=1000) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target product\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target_product:\n                return True\n    return False\n\ndef g(target_product=1000):\n    return [10, 20, 50, 5]\n\nassert f(g())\n",
        "idx_generation": 292,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find the two numbers in the list that sum up to the target value.\"\"\"\n    return sum(nums) == target and len(nums) >= 2 and any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [2, 8]\nassert f(g())\n",
        "idx_generation": 54,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello world') -> bool:\n    \"\"\"Check if the given string is equal to the target string\"\"\"\n    return s == target\ndef g(target='hello world'):\n    return target\nassert f(g())\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\ndef f(n: int, target_sqrt=2) -> bool:\n    \"\"\"Check if the square root of a number is equal to the target_sqrt.\"\"\"\n    return sqrt(n) == target_sqrt\ndef g(target_sqrt=2):\n    return target_sqrt ** 2\nassert f(g())\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number is in the matrix\"\"\"\n    return any(target in row for row in matrix)\ndef g(target=0):\n    return [[i+j for j in range(5)] for i in range(5)]\nassert f(g())\n",
        "idx_generation": 294,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of elements in the array that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, -1]\n\nassert f(g())\n",
        "idx_generation": 56,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['hello', 'world', 'python']) -> bool:\n    \"\"\"Find a string that contains each string in substrings in the reverse order, e.g., 'dlrowollehnohtyp' for 'hello', 'world', and 'python'\"\"\"\n    return all((sub[::-1] in s for sub in substrings))\ndef g(substrings=['hello', 'world', 'python']):\n    return ''.join([sub[::-1] for sub in substrings])\nassert f(g())\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=3.14) -> bool:\n    \"\"\"Check if the square root of n is equal to x\"\"\"\n    return math.sqrt(n) == x\n\ndef g(x=3.14):\n    return x ** 2\n\nassert f(g())\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: list, n=10, target=9) -> bool:\n    \"\"\"Given a list of integers, find if there exists two elements in the list such that their sum is equal to the target number.\"\"\"\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(n=10, target=9):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 295,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(nums: List[int], target_gcd=9) -> bool:\n    \"\"\"Check if the greatest common divisor of the numbers in the list is equal to the target\"\"\"\n    return gcd(*nums) == target_gcd\n\ndef g(target_gcd=9):\n    return [n for n in range(1, 101) if gcd(n, target_gcd) == target_gcd]\n\nassert f(g())\n",
        "idx_generation": 56,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Check if the given date matches the format.\"\"\"\n    try:\n        datetime.strptime(date, format)\n        return True\n    except ValueError:\n        return False\n\ndef g(format='%Y-%m-%d'):\n    return datetime.now().strftime(format)\n\nassert f(g())\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, area=100) -> bool:\n    \"\"\"Find if the given area is equal to the area of a circle with the given radius\"\"\"\n    return math.isclose(math.pi * radius ** 2, area)\ndef g(area=100):\n    return math.sqrt(area / math.pi)\nassert f(g())\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Given a matrix of integers and a target value, determine if the target value exists in the matrix.\nReturn True if the target value exists, False otherwise.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    left = 0\n    right = m * n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        row = mid // n\n        col = mid % n\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\ndef g(target=5):\n    return [\n        [1, 3, 5, 7],\n        [10, 11, 16, 20],\n        [23, 30, 34, 60]\n    ]\nassert f(g())",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_product=120) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to the target\"\"\"\n    return any((a * b == target_product for i, a in enumerate(nums) for b in nums[i+1:]))\n\ndef g(target_product=120):\n    return [n for n in range(1, target_product) if target_product % n == 0]\n\nassert f(g())\n",
        "idx_generation": 56,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, chars='aeiou') -> bool:\n    \"\"\"Check if the given string contains all vowels (a, e, i, o, u)\"\"\"\n    for char in chars:\n        if char not in s:\n            return False\n    return True\n\ndef g(chars='aeiou'):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = ''\n    for vowel in vowels:\n        if vowel in chars:\n            s += vowel\n    return s\n\nassert f(g())\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Determine if there are exactly n numbers in the array that are divisible by 3.\"\"\"\n    count = 0\n    for num in arr:\n        if num % 3 == 0:\n            count += 1\n    return count == n\ndef g(n=5):\n    return [3, 6, 9, 12, 15, 18, 21, 24][:n]\nassert f(g())\n",
        "idx_generation": 133,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find if there is a pair of numbers in the list that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=100):\n    return [i for i in range(target//2)] + [target - i for i in range(target//2)]\nassert f(g())\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], num=10) -> bool:\n    \"\"\"Check if a number is present in a list.\"\"\"\n    return num in lst\ndef g(num=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 58,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, m=4) -> bool:\n    \"\"\"Check if a string contains a specific pattern.\"\"\"\n    pattern = 'abc' * n\n    return pattern in s or pattern[::-1] in s\ndef g(n=3, m=4):\n    return 'abc' * m\nassert f(g())\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, n=2) -> bool:\n    \"\"\"Check if the square root of the sum of squares of three numbers is greater than n.\"\"\"\n    sum_of_squares = x**2 + y**2 + z**2\n    return math.sqrt(sum_of_squares) > n\n\ndef g(x=1, y=2, z=3, n=2):\n    return x, y, z, n\n\nassert f(*g())\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=50) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers that sum up to the target\"\"\"\n    return any((a + b == target for i, a in enumerate(lst) for b in lst[i+1:]))\ndef g(target=50):\n    return [10, 20, 30, 40, 50]\nassert f(g())\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=3) -> bool:\n    \"\"\"Find the largest number in a list.\nSample Input:\n`[1, 2, 3, 4, 5]`\nSample Output:\n`5`\"\"\"\n    return max(li) >= target\ndef g(target=3):\n    return [2, 4, 5, 1, 3]\nassert f(g())\n",
        "idx_generation": 58,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], suffix='ing') -> bool:\n    \"\"\"Check if any word in the list ends with the given suffix\"\"\"\n    return any(word.endswith(suffix) for word in words)\ndef g(suffix='ing'):\n    return ['running', 'swimming', 'jumping', 'climbing']\nassert f(g())\n",
        "idx_generation": 89,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[float], n=5, m=7) -> bool:\n    \"\"\"Find a list of n distinct floating-point numbers that are all divisible by m\"\"\"\n    return len(nums) == n and all((math.isclose(num % m, 0) for num in nums))\ndef g(n=5, m=7):\n    return [i * m for i in range(1, n + 1)]\nassert f(g())\n",
        "idx_generation": 143,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(li: List[int], target=500) -> bool:\n    \"\"\"Find a sublist in the given list that adds up to the target number.\"\"\"\n    for i in range(len(li)):\n        for j in range(i, len(li)):\n            if sum(li[i:j+1]) == target:\n                return True\n    return False\n\ndef g(target=500):\n    li = [random.randint(1, 100) for _ in range(100)]\n    return li\n\nassert f(g())\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x=987654321, y=123456789) -> bool:\n    \"\"\"Determine if a number is a multiple of both x and y\"\"\"\n    return n % x == 0 and n % y == 0\ndef g(x=987654321, y=123456789):\n    return x * y\nassert f(g())\n",
        "idx_generation": 59,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(email: str, domain='gmail.com') -> bool:\n    \"\"\"Check if the email address is from the specified domain.\"\"\"\n    pattern = r'[^@]+@' + re.escape(domain) + r'$'\n    return re.match(pattern, email) is not None\n\ndef g(domain='gmail.com'):\n    return 'example@gmail.com'\n\nassert f(g())\n",
        "idx_generation": 89,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if a given number is a perfect square and its square root is divisible by m\"\"\"\n    return math.isqrt(n) ** 2 == n and math.isqrt(n) % m == 0\ndef g(m=5):\n    return m ** 2\nassert f(g())\n",
        "idx_generation": 144,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Given a list of numbers, find if there are two numbers that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, nums=[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23], target=30) -> bool:\n    \"\"\"Find the two numbers in a list that add up to a target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return result == nums[i] * nums[j]\n    return False\ndef g(nums=[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23], target=30):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return nums[i] * nums[j]\n    return 0\nassert f(g())\n",
        "idx_generation": 59,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=\"hello world\") -> bool:\n    \"\"\"Check if a given string is equal to the default target string\"\"\"\n    return s == target\ndef g(target=\"hello world\"):\n    return target\nassert f(g())\n",
        "idx_generation": 90,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=6, b=2) -> bool:\n    \"\"\"Check if a number is divisible by another number raised to a power.\"\"\"\n    return n % (a ** b) == 0\n\ndef g(a=6, b=2):\n    return a ** b * math.ceil(1000 / (a ** b))\n    \nassert f(g())\n",
        "idx_generation": 144,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_row=1, target_col=1, target_value=5) -> bool:\n    \"\"\"Check if a given value is present at the specified row and column in a matrix.\"\"\"\n    return matrix[target_row][target_col] == target_value\ndef g(target_row=1, target_col=1, target_value=5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find if there exists a pair of numbers in a given list such that their sum is equal to a target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=0):\n    return [0, target]\nassert f(g())\n",
        "idx_generation": 59,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['python', 'programming']) -> bool:\n    \"\"\"Determine if a string s contains all substrings as consecutive non-overlapping subsequences.\"\"\"\n    return all((sub in s for sub in substrings)) and len(set(substrings)) == len(substrings)\ndef g(substrings=['python', 'programming']):\n    return ''.join(substrings)\nassert f(g())\n",
        "idx_generation": 90,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    return n > 1 and all(n % i != 0 for i in lst)\ndef g(lst=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    n = max(lst) + 1\n    while not f(n, lst):\n        n += 1\n    return n\nassert f(g())\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if the given number is prime\"\"\"\n    return n in primes\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return primes[0]\nassert f(g())\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, a=2, b=10) -> bool:\n    \"\"\"Check if the given number x is a perfect square between a and b (inclusive)\"\"\"\n    return a <= math.isqrt(x) <= b\ndef g(a=2, b=10):\n    return 49\nassert f(g())\n",
        "idx_generation": 60,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='py', suffix='on') -> bool:\n    \"\"\"Check if there is a word in the list that starts with the given prefix and ends with the given suffix.\"\"\"\n    return any(word.startswith(prefix) and word.endswith(suffix) for word in words)\ndef g(prefix='py', suffix='on'):\n    return ['python', 'pycharm', 'jupyter', 'programming', 'coding']\nassert f(g())\n",
        "idx_generation": 90,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=3) -> bool:\n    \"\"\"Find a number n that is a perfect square and divisible by x\"\"\"\n    return math.isqrt(n) ** 2 == n and n % x == 0\ndef g(x=3):\n    return x ** 2\nassert f(g())\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, numbers=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a number n is present in a given list of numbers\"\"\"\n    return n in numbers\n\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return random.choice(numbers)\n\nassert f(g())\n",
        "idx_generation": 311,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\ndef f(d: datetime.date, y=2022, m=3, dt=17) -> bool:\n    \"\"\"Check if the given date is equal to the provided year, month, and day\"\"\"\n    return d == datetime.date(y, m, dt)\ndef g(y=2022, m=3, dt=17):\n    return datetime.date(y, m, dt)\nassert f(g())\n",
        "idx_generation": 60,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if any word in the list contains all the letters in the target word\"\"\"\n    return any((all((letter in word for letter in target)) for word in words))\ndef g(target='python'):\n    return ['python', 'java', 'javascript']\nassert f(g())\n",
        "idx_generation": 92,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=-10, b=15) -> bool:\n    \"\"\"Solve a subtraction problem\"\"\"\n    return a - x == b\ndef g(a=-10, b=15):\n    return a - b\nassert f(g())\n",
        "idx_generation": 150,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    assert len(nums) >= 2\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=16):\n    return list(range(target-10, target))\nassert f(g())\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a given number is in a list.\"\"\"\n    return n in lst\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst[0]\nassert f(g())\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['abc', 'def'], count=2) -> bool:\n    \"\"\"Given a string s and a list of substrings, determine if there are at least 'count' number of occurrences of each substring in s.\"\"\"\n    return all((s.count(sub) >= count for sub in substrings))\ndef g(substrings=['abc', 'def'], count=2):\n    return ''.join(substrings * count)\nassert f(g())\n",
        "idx_generation": 93,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, digits_sum=10) -> bool:\n    \"\"\"Check if the sum of the digits of n is equal to digits_sum\"\"\"\n    return sum([int(d) for d in str(n)]) == digits_sum\ndef g(digits_sum=10):\n    return int('9' * (digits_sum // 9) + str(digits_sum % 9))\nassert f(g())\n",
        "idx_generation": 153,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(lst: list, x: int, y: int, z: int, a: int = 1, b: int = 2, c: int = 3) -> bool:\n    \"\"\"Check if the list contains x, y, and z in any order.\"\"\"\n    return all(e in lst for e in (x, y, z))\ndef g(a=1, b=2, c=3):\n    lst = [a, b, c]\n    random.shuffle(lst)\n    return lst, a, b, c\nassert f(*g())\n",
        "idx_generation": 315,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a given number is greater than all the elements in a list.\"\"\"\n    return all((n > x for x in lst))\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return max(lst) + 1\nassert f(g())\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='python') -> bool:\n    \"\"\"Check if s contains the substring 'python'\"\"\"\n    return a in s\n\ndef g(a='python'):\n    return 'I love ' + a\n\nassert f(g())",
        "idx_generation": 94,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=2.718281828459045) -> bool:\n    \"\"\"Check if x is the square root of a\"\"\"\n    return math.isclose(x**2, a)\n    \ndef g(a=2.718281828459045):\n    return math.sqrt(a)\n\nassert f(g())\n",
        "idx_generation": 155,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of elements that sum up to the target value\"\"\"\n    return any(target - x in arr for x in arr)\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 315,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Find three integers in a list that sum up to a target value\"\"\"\n    return any(sum(comb) == target for comb in itertools.combinations(lst, 3))\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return lst\nassert f(g())\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string that is a palindrome, meaning it reads the same forwards and backwards.\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"level\"\nassert f(g())\n",
        "idx_generation": 97,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a list of numbers whose product is equal to the target\"\"\"\n    return math.prod(numbers) == target\n\ndef g(target=10):\n    return [2, 5]\n\nassert f(g())\n",
        "idx_generation": 156,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [target//2, target//2] if target%2 == 0 else [target//2, target//2+1]\n\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target=\"python\", max_len=10) -> bool:\n    \"\"\"Check if the words contain the target word and the total length is less than or equal to max_len\"\"\"\n    return target in words and sum(len(word) for word in words) <= max_len\ndef g(target=\"python\", max_len=10):\n    return [target]\nassert f(g())\n",
        "idx_generation": 63,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[str], n=5) -> bool:\n    \"\"\"Check if the length of the longest string in x is equal to n.\"\"\"\n    return max(len(s) for s in x) == n\n\ndef g(n=5):\n    return ['a' * i for i in range(1, n + 1)]\n\nassert f(g())\n",
        "idx_generation": 97,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, power=3, result=27) -> bool:\n    \"\"\"Find a number that when raised to a certain power gives a specific result.\"\"\"\n    return x ** power == result\ndef g(power=3, result=27):\n    return int(result ** (1/power))\nassert f(g())\n",
        "idx_generation": 157,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers in the list that multiply to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, target]\n\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return lst == lst[::-1]\ndef g():\n    return [1, 2, 3, 2, 1]\nassert f(g())\n",
        "idx_generation": 64,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring=\"python\") -> bool:\n    \"\"\"Check if the given substring exists within the string\"\"\"\n    return substring in string\ndef g(substring=\"python\"):\n    return \"I love python programming\"\nassert f(g())\n",
        "idx_generation": 100,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=15) -> bool:\n    \"\"\"Find a matrix where the sum of each row and column is equal to the target\"\"\"\n    row_sums = np.sum(matrix, axis=1)\n    col_sums = np.sum(matrix, axis=0)\n    return np.all(row_sums == target) and np.all(col_sums == target)\n\ndef g(target=15):\n    matrix = np.zeros((3, 3))\n    for i in range(3):\n        for j in range(3):\n            matrix[i][j] = target // 3\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by all the given divisors\"\"\"\n    return all(n % d == 0 for d in divisors)\ndef g(divisors=[2, 3, 5]):\n    i = max(divisors) + 1\n    while True:\n        if all(i % d == 0 for d in divisors):\n            return i\n        i += 1\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, numbers=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find the result of adding all the numbers in a list together\"\"\"\n    return result == sum(numbers)\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return sum(numbers)\nassert f(g())\n",
        "idx_generation": 65,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"Check if the target word is present in the list of words\"\"\"\n    return target_word in words\ndef g(target_word='python'):\n    return ['hello', 'world', 'python', 'programming']\nassert f(g())\n",
        "idx_generation": 101,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, nums=[3, 7, 11, 15, 19, 23], threshold=20) -> bool:\n    \"\"\"Determine if there exists a list of n numbers from nums such that the sum of their squares is greater than or equal to the threshold value.\"\"\"\n    return sum([num**2 for num in nums[:n]]) >= threshold\ndef g(nums=[3, 7, 11, 15, 19, 23], threshold=20):\n    return math.ceil(math.sqrt(threshold/len(nums)))\nassert f(g())\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=9):\n    \"\"\"Given a list of integers and a target number, find two numbers in the list that add up to the target.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\ndef g(nums=[2, 7, 11, 15], target=9):\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return [num, complement]\nassert f(g())\n",
        "idx_generation": 323,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=17) -> bool:\n    \"\"\"Given a list of integers, find two numbers such that they add up to a specific target number.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=17):\n    return [2, 7, 11, 15]\nassert f(g())\n",
        "idx_generation": 67,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if the given string s contains the given substring substr\"\"\"\n    return substr in s\n\ndef g(substr='abc'):\n    return 'x' + substr + 'y'\n\nassert f(g())\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, target=8) -> bool:\n    \"\"\"Given an integer n, find the smallest integer power of 2 that is greater than or equal to n.\nSample Input:\n`10`\nSample Output:\n`16`\"\"\"\n    return math.ceil(math.log2(n)) >= target\ndef g(target=8):\n    return 2 ** target\nassert f(g())\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=7) -> bool:\n    \"\"\"Find a target number in a matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=7):\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g())\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Find a subarray in the given array such that the sum of its elements is equal to 0\"\"\"\n    return any(sum(arr[i:j]) == 0 for i in range(len(arr)) for j in range(i+1, len(arr)+1))\ndef g():\n    return [1, -2, 3, 4, -1, 2, -3, -4]\nassert f(g())\n",
        "idx_generation": 68,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='abc', b='def') -> bool:\n    \"\"\"Find s such that every character in s is either in a or b\"\"\"\n    return all([c in a or c in b for c in s])\ndef g(a='abc', b='def'):\n    return a + b\nassert f(g())\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, target=15) -> bool:\n    \"\"\"Find the smallest integer that is a perfect square and greater than or equal to n\"\"\"\n    return math.isqrt(n) ** 2 == n and n >= target\n\ndef g(target=15):\n    return target ** 2\n\nassert f(g())\n",
        "idx_generation": 167,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there are two numbers in a list that add up to the target sum\"\"\"\n    return any((lst[i] + lst[j] == target_sum for i in range(len(lst)) for j in range(i+1, len(lst))))\ndef g(target_sum=100):\n    return [target_sum // 2, target_sum // 2]\nassert f(g())\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target_sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target_sum:\n                    return True\n    return False\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: str, s='hello', n=2) -> bool:\n    \"\"\"Check if the result is equal to the concatenation of s n times\"\"\"\n    return result == s * n\n\ndef g(s='hello', n=2):\n    return s * n\n\nassert f(g())\n",
        "idx_generation": 105,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"Check if a number is a prime and greater than the target number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return n > target\n\ndef g(target=100):\n    i = target + 1\n    while True:\n        if f(i, target):\n            return i\n        i += 1\n\nassert f(g())\n",
        "idx_generation": 167,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the given list whose sum is equal to the target value.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\nassert f(g())\n",
        "idx_generation": 325,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: datetime, year=2021, month=12, day=25) -> bool:\n    \"\"\"Check if the given date matches the specified year, month, and day.\"\"\"\n    return date.year == year and date.month == month and date.day == day\n\ndef g(year=2021, month=12, day=25):\n    return datetime(year, month, day)\n\nassert f(g())\n",
        "idx_generation": 72,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], substring='abc') -> bool:\n    \"\"\"Determine if any of the strings in the list contain the given substring.\"\"\"\n    return any((substring in s for s in strings))\n\ndef g(substring='abc'):\n    return ['abcdef', 'xyz', 'pqr']\nassert f(g())\n",
        "idx_generation": 106,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(n: int, a=27, b=45) -> bool:\n    \"\"\"Check if n is a common divisor of a and b\"\"\"\n    return gcd(a, b) % n == 0\n\ndef g(a=27, b=45):\n    return gcd(a, b)\n\nassert f(g())\n",
        "idx_generation": 168,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains any duplicate values.\"\"\"\n    return len(nums) != len(set(nums))\ndef g():\n    return [1, 2, 3, 4, 5, 5]\nassert f(g())\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if the number is present in the list\"\"\"\n    return num in lst\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return lst[0]\nassert f(g())\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=100) -> bool:\n    \"\"\"Find the number of occurrences of the letter 'a' in the string.\"\"\"\n    count = 0\n    for char in s:\n        if char == 'a':\n            count += 1\n    return count == n\n\ndef g(n=100):\n    return 'a' * n\n\nassert f(g())\n",
        "idx_generation": 107,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, divisor = 7) -> bool:\n    \"\"\"Check if a number is divisible by a given divisor\"\"\"\n    return num % divisor == 0\ndef g(divisor = 7):\n    return divisor * 2\nassert f(g())\n",
        "idx_generation": 168,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: list, target=100, n=5) -> bool:\n    \"\"\"Find a list of n random integers that sum up to a given target\"\"\"\n    return len(nums) == n and sum(nums) == target\n\ndef g(target=100, n=5):\n    nums = []\n    for i in range(n-1):\n        num = random.randint(1, target - sum(nums) - n + i + 1)\n        nums.append(num)\n    nums.append(target - sum(nums))\n    return nums\n\nassert f(g())\n",
        "idx_generation": 331,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=10, lower_bound=2) -> bool:\n    \"\"\"Check if a number is a common divisor of two integers and if it's greater than a given lower bound.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=5, b=10, lower_bound=2):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "idx_generation": 74,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr=\"python\") -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substr in s\ndef g(substr=\"python\"):\n    return \"I love python programming\"\nassert f(g())\n",
        "idx_generation": 109,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the matrix is a magic square.\"\"\"\n    def is_magic_square(matrix: List[List[int]]) -> bool:\n        size = len(matrix)\n        target_sum = size * (size**2 + 1) // 2\n\n        # Check rows\n        for row in matrix:\n            if sum(row) != target_sum:\n                return False\n\n        # Check columns\n        for i in range(size):\n            if sum(matrix[j][i] for j in range(size)) != target_sum:\n                return False\n\n        # Check diagonals\n        if sum(matrix[i][i] for i in range(size)) != target_sum:\n            return False\n        if sum(matrix[i][size-i-1] for i in range(size)) != target_sum:\n            return False\n\n        return True\n\n    return is_magic_square(matrix)\ndef g(n=3):\n    return [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\nassert f(g())\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a number is in a list.\"\"\"\n    return n in lst\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst[0]\nassert f(g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=20, b=30, lower_bound=10) -> bool:\n    \"\"\"Check if a number is a common divisor of two integers and if it's greater than a given lower bound.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=20, b=30, lower_bound=10):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "idx_generation": 74,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='apple') -> bool:\n    \"\"\"Check if a list of words contain the target word.\"\"\"\n    return target in words\n\ndef g(target='apple'):\n    return [target, 'banana', 'orange', 'grape']\n\nassert f(g())\n",
        "idx_generation": 109,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import isqrt\n\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if x is a perfect square, y is a perfect cube, and z is a perfect fourth power.\"\"\"\n    return isqrt(x)**2 == x and int(y**(1/3))**3 == y and int(z**(1/4))**4 == z\n\ndef g(x: int = 16, y: int = 27, z: int = 16):\n    \"\"\"Return values for x, y, and z that satisfy the conditions.\"\"\"\n    return x, y, z\n\nassert f(*g())\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=4) -> bool:\n    \"\"\"Find the sum of the smallest n numbers in a list.\"\"\"\n    return sum(sorted(nums)[:n]) == 10\ndef g(n=4):\n    return [1, 2, 3, 4, 5, 6, 7, 8]\nassert f(g())\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of length k whose sum is divisible by k.\"\"\"\n    for i in range(len(nums) - k + 1):\n        subarray = nums[i:i+k]\n        if sum(subarray) % k == 0:\n            return True\n    return False\n\ndef g(k=3):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python', vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a word contains all the vowels in a given list.\"\"\"\n    return all((vowel in s for vowel in vowels))\ndef g(word='python', vowels=['a', 'e', 'i', 'o', 'u']):\n    return word + ''.join(vowels)\nassert f(g())\n",
        "idx_generation": 111,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes: List[int]) -> bool:\n    \"\"\"Check if the number n is a product of two distinct prime numbers from the given list.\"\"\"\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if primes[i] * primes[j] == n:\n                return True\n    return False\n\ndef g(primes: List[int], target: int):\n    return target, primes\n\nassert f(*g([2, 3, 5, 7, 11, 13], 35))\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any((lst[i] + lst[j] == target for i in range(len(lst)) for j in range(i+1, len(lst))))\ndef g(target=100):\n    return [50, 25, 75, 90, 10]\nassert f(g())\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list whose sum is equal to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=10):\n    return [1, 9, 3, 7]\nassert f(g())\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if the given word is a substring of the input string s.\"\"\"\n    return word in s\ndef g(word='python'):\n    return 'I love python programming'\nassert f(g())\n",
        "idx_generation": 111,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(a: float, b: float, c: float) -> bool:\n    \"\"\"Check if the given values a, b, and c form a Pythagorean triple.\"\"\"\n    return math.isclose(a**2 + b**2, c**2)\n\ndef g(a: float, b: float, c: float):\n    return a, b, c\n\nassert f(*g(3, 4, 5))\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 9, 5, 3, 7]\n\nassert f(g())\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: list, target=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if the elements of x are in the target list in the same order\"\"\"\n    return all([x[i] == target[i] for i in range(len(x))])\n\ndef g(target=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return target\n\nassert f(g())\n",
        "idx_generation": 76,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Find a string that contains a certain number of consecutive digits\"\"\"\n    for i in range(len(s)-n+1):\n        if s[i:i+n].isdigit():\n            return True\n    return False\ndef g(n=3):\n    return \"abc123xyz\"\nassert f(g())\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: list, n=3) -> bool:\n    \"\"\"Find a matrix with all elements equal to a given number\"\"\"\n    return all(all(x == n for x in row) for row in matrix)\n\ndef g(n=3):\n    matrix = [[n] * n for _ in range(n)]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a given number is present in a list.\"\"\"\n    return n in lst\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return random.choice(lst)\n\nassert f(g())\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=12) -> bool:\n    \"\"\"Check if there is a pair of numbers in a list that sums up to a target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False\ndef g(target=12):\n    return [4, 6, 8, 10]\nassert f(g())\n",
        "idx_generation": 76,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if there exists a substring in s that contains exactly k vowels\"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return any((s[i:j+1].count(vowel) == k for i in range(len(s)) for j in range(i, len(s)) for vowel in vowels))\ndef g(k=3):\n    return 'aeiou' * k\nassert f(g())\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, a=8, b=2) -> bool:\n    \"\"\"Check if x is the result of raising a to the power of b\"\"\"\n    return x == math.pow(a, b)\n\ndef g(a=8, b=2):\n    return int(math.pow(a, b))\n\nassert f(g())\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Given a list of integers lst and a number n, check if there exists a pair of numbers in lst such that their sum is n.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False\ndef g(lst=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], n=10):\n    return n\nassert f(g())\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(ans: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, check if the sum of the values is equal to the target\"\"\"\n    return sum(ans) == target\ndef g(target=10):\n    return [2, 3, 1, 4]\nassert f(g())\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Check if the string s is a palindrome and has exactly n characters\"\"\"\n    return s == s[::-1] and len(s) == n\ndef g(n=10):\n    s = 'a' * (n // 2)\n    if n % 2 != 0:\n        s += 'b'\n    s += 'a' * (n // 2)\n    return s\nassert f(g())\n",
        "idx_generation": 114,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=5, b=7, c=13) -> bool:\n    \"\"\"Check if a number is divisible by either a, b, or c.\"\"\"\n    return x % a == 0 or x % b == 0 or x % c == 0\ndef g(a=5, b=7, c=13):\n    return a * b * c\nassert f(g())\n",
        "idx_generation": 180,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list nums that add up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=0):\n    return [-1, 1, 2, -2, 3, -3]\n\nassert f(g())\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=1029384756) -> bool:\n    \"\"\"Check if a number is evenly divisible by another number\"\"\"\n    return x % a == 0\ndef g(a=1029384756):\n    return a * 2\nassert f(g())\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, chars=['a', 'b', 'c']) -> bool:\n    \"\"\"Check if string s contains all characters in chars\"\"\"\n    return all(char in s for char in chars)\ndef g(chars=['a', 'b', 'c']):\n    return ''.join(chars)\nassert f(g())\n",
        "idx_generation": 115,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23]) -> bool:\n    \"\"\"Check if a number is divisible by all primes in the list\"\"\"\n    for prime in primes:\n        if n % prime != 0:\n            return False\n    return True\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23]):\n    ans = 1\n    for prime in primes:\n        ans *= prime\n    return ans\nassert f(g())\n",
        "idx_generation": 183,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10, k=2) -> bool:\n    \"\"\"Find if there are two numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10, k=2):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=10, b=20) -> bool:\n    \"\"\"Check if a number is within a given range\"\"\"\n    return a <= x <= b\ndef g(a=10, b=20):\n    return (a + b) // 2\nassert f(g())\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_char='a', target_count=3) -> bool:\n    \"\"\"Check if a specific character appears a certain number of times in a string\"\"\"\n    return s.count(target_char) == target_count\n\ndef g(target_char='a', target_count=3):\n    return 'banana'\n\nassert f(g())\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=50, b=10, c=5) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\ndef g(a=50, b=10, c=5):\n    return -a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "idx_generation": 187,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target\"\"\"\n    return any((x + y == target for x in arr for y in arr))\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], threshold=10) -> bool:\n    \"\"\"Find a list of numbers where the sum of all numbers is equal to or greater than a given threshold.\"\"\"\n    return sum(nums) >= threshold\ndef g(threshold=10):\n    return [n for n in range(1, threshold+1)]\nassert f(g())\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=\"abc\"):\n    \"\"\"Check if a string contains a target substring\"\"\"\n    return target in s\ndef g(target=\"abc\"):\n    return \"abcdefghijklmnopqrstuvwxyz\"[:len(target)]\nassert f(g())\n",
        "idx_generation": 119,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[3, 6, 9, 12, 15, 18, 21, 24, 27, 30]) -> bool:\n    \"\"\"Check if the product of the first n elements in a list is divisible by n.\"\"\"\n    product = 1\n    for i in range(n):\n        product *= lst[i]\n    return product % n == 0\ndef g(lst=[3, 6, 9, 12, 15, 18, 21, 24, 27, 30]):\n    return len(lst)\nassert f(g())\n",
        "idx_generation": 190,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], a=-1, b=1) -> bool:\n    \"\"\"Check if the given list is sorted in non-decreasing order.\"\"\"\n    return sorted(x) == x\ndef g(a=-1, b=1):\n    return [a, b]\nassert f(g())\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=2) -> bool:\n    \"\"\"Given a list of integers and a value k, determine if there exist two distinct indices i and j such that\nnums[i] + nums[j] is divisible by k.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] + nums[j]) % k == 0:\n                return True\n    return False\ndef g(k=2):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 79,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g(s: str):\n    return s[::-1]\n\nassert f(g(\"racecar\"))\n",
        "idx_generation": 120,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, result=1000) -> bool:\n    \"\"\"Find the values of x, y, and z such that x^2 + y^2 + z^2 = result\"\"\"\n    return math.isqrt(x**2 + y**2 + z**2) == int(math.sqrt(result))\ndef g(result=1000):\n    for x in range(int(math.sqrt(result))+1):\n        for y in range(int(math.sqrt(result))+1):\n            for z in range(int(math.sqrt(result))+1):\n                if x**2 + y**2 + z**2 == result:\n                    return x, y, z\nassert f(*g())\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, target=123456789) -> bool:\n    \"\"\"Check if the given number is a permutation of the target number\"\"\"\n    return sorted(str(num)) == sorted(str(target))\ndef g(target=123456789):\n    return int(\"\".join(str(i) for i in sorted(str(target), reverse=True)))\nassert f(g())\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums)))\ndef g(target=100):\n    nums = [10, 20, 30, 40, 50]\n    return nums\nassert f(g())\n",
        "idx_generation": 79,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if a given string contains a specific substring.\"\"\"\n    return substr in s\ndef g(substr='python'):\n    return \"I love programming in \" + substr\nassert f(g())\n",
        "idx_generation": 121,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, height=10, volume=1000) -> bool:\n    \"\"\"Find a radius that, when used to calculate the volume of a cone with given height, results in 'volume'.\"\"\"\n    cone_volume = (1/3) * math.pi * radius**2 * height\n    return abs(cone_volume - volume) < 1e-6\n\ndef g(height=10, volume=1000):\n    radius = (3 * volume / (math.pi * height))**(1/2)\n    return radius\n\nassert f(g())",
        "idx_generation": 192,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target_sum=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that adds up to the target sum\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=100):\n    return [50, 50]\nassert f(g())\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 8, 4, 5, 9]\n\nassert f(g())\n",
        "idx_generation": 80,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string contains the same character repeated n times consecutively\"\"\"\n    return any(s[i:i+n] == s[i]*n for i in range(len(s)-n+1))\ndef g(n=3):\n    return \"a\" * n\nassert f(g())\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a given list that sum up to a target value.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(target=0):\n    return [math.floor(target/2), math.ceil(target/2)]\n\nassert f(g())\n",
        "idx_generation": 194,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, r=5) -> bool:\n    \"\"\"Check if a point is inside a circle\"\"\"\n    return math.sqrt(x**2 + y**2) <= r\n\ndef g(r=5):\n    return (r/2, r/2)\n\nassert f(*g())\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(n: int, year=2022, month=9, day=15) -> bool:\n    \"\"\"Check if a given date is n days after a specific date\"\"\"\n    target_date = datetime(year, month, day)\n    return (datetime.now() - target_date).days == n\n\ndef g(year=2022, month=9, day=15):\n    current_date = datetime.now()\n    target_date = datetime(year, month, day)\n    return (current_date - target_date).days\n\nassert f(g())\n",
        "idx_generation": 81,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[str], prefix='hello') -> bool:\n    \"\"\"Find a string in the given list that starts with the given prefix\"\"\"\n    for string in x:\n        if string.startswith(prefix):\n            return True\n    return False\n\ndef g(prefix='hello'):\n    return ['hello world', 'hi there', 'goodbye']\n\nassert f(g())\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: datetime, target_year=2022) -> bool:\n    \"\"\"Given a datetime object, return True if the year of the datetime object is equal to the target year, \n    and False otherwise.\"\"\"\n    return date.year == target_year\n\ndef g(target_year=2022):\n    return datetime(year=target_year, month=1, day=1)\n\nassert f(g())\n",
        "idx_generation": 194,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_product=24) -> bool:\n    \"\"\"Find a pair of elements in the list that multiplies to the target_product\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target_product:\n                return True\n    return False\n\ndef g(target_product=24):\n    nums = [2, 4, 6, 8, 10]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a given number is present in a list\"\"\"\n    return n in lst\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return random.choice(lst)\n\nassert f(g())\n",
        "idx_generation": 81,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='abcdefg', t='hijklmn') -> bool:\n    \"\"\"Check if the length of s is equal to the length of t and if the first n characters of s are lexicographically smaller than the first n characters of t.\"\"\"\n    return len(s) == len(t) and s[:n] < t[:n]\ndef g(s='abcdefg', t='hijklmn'):\n    return min(len(s), len(t))\nassert f(g())\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=8, b=4, c=2, d=1) -> bool:\n    \"\"\"Check if n can be expressed as the sum of a, b, c, and d.\"\"\"\n    return n == a + b + c + d\ndef g(a=8, b=4, c=2, d=1):\n    return a + b + c + d\nassert f(g())\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target value.\"\"\"\n    return any(target - x in nums for x in nums)\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 355,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find a pair of distinct numbers in the array that sum up to the target\"\"\"\n    return any([arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr))])\ndef g(target=100):\n    return [50, 50]\nassert f(g())\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello world', case_sensitive=False) -> bool:\n    \"\"\"Check if a string matches the target string\"\"\"\n    if case_sensitive:\n        return s == target\n    else:\n        return s.lower() == target.lower()\ndef g(target='hello world', case_sensitive=False):\n    if case_sensitive:\n        return target\n    else:\n        return target.lower()\nassert f(g())\n",
        "idx_generation": 125,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(a: float, b=2.0, c=3.0) -> bool:\n    \"\"\"Check if the square root of a divided by b is equal to c\"\"\"\n    return math.sqrt(a/b) == c\n\ndef g(b=2.0, c=3.0):\n    return (c**2)*b\n\nassert f(g())\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(lst: list) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order.\"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\ndef g():\n    \"\"\"Generate a sorted list of 10 random integers between 1 and 100.\"\"\"\n    import random\n    return sorted(random.sample(range(1, 101), 10))\n\nassert f(g())\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=17) -> bool:\n    \"\"\"Find three numbers in the given list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=17):\n    return [4, 5, 2, 9, 1, 8]\nassert f(g())\n",
        "idx_generation": 85,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, s='racecar') -> bool:\n    \"\"\"Check if a word is a palindrome.\"\"\"\n    return x == x[::-1]\ndef g(s='racecar'):\n    return s\nassert f(g())\n",
        "idx_generation": 126,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime) -> bool:\n    \"\"\"Find a date that is exactly 30 days before the given date.\"\"\"\n    return dt - datetime.timedelta(days=30) == datetime.datetime(2022, 1, 1)\ndef g():\n    return datetime.datetime(2022, 1, 31)\nassert f(g())\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[3, 6, 9, 12, 15, 18, 21, 24, 27, 30], upper_bound=100) -> bool:\n    \"\"\"Determine if a number is a multiple of any element from a list of integers.\"\"\"\n    return any((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums=[3, 6, 9, 12, 15, 18, 21, 24, 27, 30], upper_bound=100):\n    return nums[0] * nums[1]\nassert f(g())\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target number\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=100):\n    return [1, 2, 3, 4, 5, 95]\nassert f(g())\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, s='python') -> bool:\n    \"\"\"Check if a string contains all the letters of another string.\"\"\"\n    return all(letter in x for letter in s)\ndef g(s='python'):\n    return ''.join(set(s))\nassert f(g())\n",
        "idx_generation": 126,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=12) -> bool:\n    \"\"\"You are given a positive integer. Determine if it is a prime number.\nSample Input:\n`17`\nSample Output:\n`True`\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g())\n",
        "idx_generation": 210,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if n is in the list.\"\"\"\n    return n in lst\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst[0]\nassert f(g())\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], a=5, b=10) -> bool:\n    \"\"\"Check if the sum of the numbers in the list is between a and b (inclusive)\"\"\"\n    return a <= sum(nums) <= b\ndef g(a=5, b=10):\n    return [1, 2, 3, 4]\nassert f(g())\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='hello', b='world', c='!') -> bool:\n    \"\"\"Check if a string is a concatenation of three given strings.\"\"\"\n    return s == a + b + c\ndef g(a='hello', b='world', c='!'):\n    return a + b + c\nassert f(g())\n",
        "idx_generation": 126,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g())\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=14) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target.\"\"\"\n    return any([nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))])\n    \ndef g(nums=[5, 3, 8, 2, 9, 10, 1]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the matrix whose sum is equal to the target\"\"\"\n    for row in matrix:\n        assert len(row) == len(matrix[0])\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            for k in range(i+1, len(matrix)):\n                for l in range(len(matrix[0])):\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return True\n    return False\ndef g(target=100):\n    return [\n        [10, 20, 30],\n        [40, 50, 60],\n        [70, 80, 90]\n    ]\nassert f(g())\n",
        "idx_generation": 89,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='world') -> bool:\n    \"\"\"Check if a string contains a specific substring\"\"\"\n    return substring in s\n\ndef g(substring='world'):\n    return \"Hello, world!\"\n\nassert f(g())\n",
        "idx_generation": 126,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=100) -> bool:\n    \"\"\"Check if the square root of a number is equal to x\"\"\"\n    return math.sqrt(a) == x\n\ndef g(a=100):\n    return math.sqrt(a)\n\nassert f(g())\n",
        "idx_generation": 218,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there are two numbers in the list that sum up to the target\"\"\"\n    return any((target - n in nums for n in nums))\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if the sum of any row or column in the matrix is equal to the target value\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    row_sum = [sum(row) for row in matrix]\n    col_sum = [sum(matrix[i][j] for i in range(rows)) for j in range(cols)]\n    return target in row_sum or target in col_sum\ndef g(target=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 89,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int = 5) -> bool:\n    \"\"\"Check if the length of 's' is divisible by 'n'\"\"\"\n    return len(s) % n == 0\ndef g(s: str = 'hello', n: int = 5):\n    return s\nassert f(g())\n",
        "idx_generation": 127,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=16.0) -> bool:\n    \"\"\"Check if the given number equals the square root of a.\"\"\"\n    return math.isclose(x, math.sqrt(a))\n\ndef g(a=16.0):\n    return math.sqrt(a)\n\nassert f(g())\n",
        "idx_generation": 219,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if arr is sorted in non-decreasing order\"\"\"\n    return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(prime: int, num_digits=3) -> bool:\n    \"\"\"Find a prime number with a specific number of digits.\"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    for i in range(10**(num_digits-1), 10**num_digits):\n        if is_prime(i):\n            return i == prime\n    return False\ndef g(num_digits=3):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    for i in range(10**(num_digits-1), 10**num_digits):\n        if is_prime(i):\n            return i\n    return -1\nassert f(g())\n",
        "idx_generation": 91,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], count=2) -> bool:\n    \"\"\"Check if there are at least 'count' number of words in the list that start with the same letter.\"\"\"\n    return any((len([word for word in words if word.startswith(letter)]) >= count) for letter in set(word[0] for word in words))\ndef g(count=2):\n    return [\"apple\", \"banana\", \"avocado\", \"blueberry\", \"broccoli\"]\nassert f(g())\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, k=10) -> bool:\n    \"\"\"Given a number n, find any k-th root of n.\n    Sample Input:\n    27\n    Sample Output:\n    3\"\"\"\n    return math.isclose(n ** (1 / k), round(n ** (1 / k)), abs_tol=1e-9)\n\ndef g(n: int, k=10):\n    return round(n ** (1 / k))\nassert f(g(27))\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int]) -> bool:\n    \"\"\"Check if a list is sorted in non-decreasing order\"\"\"\n    return x == sorted(x)\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find any two numbers that sum up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 92,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], target='apple') -> bool:\n    \"\"\"Check if the target string is a prefix of any of the strings in the list\"\"\"\n    return any((s.startswith(target) for s in strings))\ndef g(target='apple'):\n    strings = ['applepie', 'banana', 'apricot', 'grape']\n    return strings\nassert f(g())\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(res: int, n=5, m=100) -> bool:\n    \"\"\"Find the result of calculating the sum of the first n natural numbers, then multiplying the result by m.\"\"\"\n    return res == (n*(n+1)//2) * m\ndef g(n=5, m=100):\n    return (n*(n+1)//2) * m\nassert f(g())\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    \"\"\"Return a list of two numbers that add up to the target.\"\"\"\n    return [target // 2, target // 2]\nassert f(g())\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: list, target=10) -> bool:\n    \"\"\"Find a pair of numbers whose sum is equal to the target\"\"\"\n    return any((x + y) == target for i, x in enumerate(nums) for y in nums[i+1:])\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nassert f(g())\n",
        "idx_generation": 92,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if the given string contains all the vowels.\"\"\"\n    return all((vowel in s.lower() for vowel in vowels))\ndef g(vowels=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(vowels)\nassert f(g())\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(n: int, a=1, b=10) -> bool:\n    \"\"\"Check if a number n is a perfect square between a and b (inclusive).\"\"\"\n    return a <= math.isqrt(n) ** 2 <= b\ndef g(a=1, b=10):\n    return int(math.sqrt(a))\nassert f(g())\n",
        "idx_generation": 231,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(word_list: List[str], target_word='apple') -> bool:\n    \"\"\"Check if the target word is an anagram of any word in the list.\"\"\"\n    assert len(target_word) > 0, 'Hint: Target word should not be empty'\n    return any((sorted(target_word) == sorted(word) for word in word_list))\ndef g(target_word='apple'):\n    word_list = ['banana', 'orange', 'mango', 'apple', 'kiwi']\n    random.shuffle(word_list)\n    return word_list\nassert f(g())\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=3.14159) -> bool:\n    \"\"\"Check if x is approximately equal to pi\"\"\"\n    return math.isclose(x, a)\n    \ndef g(a=3.14159):\n    return a\n\nassert f(g())\n",
        "idx_generation": 94,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target_char=\"a\", target_length=4) -> bool:\n    \"\"\"Check if the string contains the target character and has a length greater than or equal to target_length\"\"\"\n    assert len(string) > 0\n    return target_char in string and len(string) >= target_length\ndef g(target_char=\"a\", target_length=4):\n    return \"banana\"\nassert f(g())\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=2) -> bool:\n    \"\"\"Check if the given number is a perfect n-th power of x.\"\"\"\n    return math.isclose(x ** n, int(x ** n))\n\ndef g(x=2):\n    return x ** 3\n\nassert f(g())\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the given number n is present in the list.\"\"\"\n    return n in lst\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    \"\"\"Generate a random number that is present in the list.\"\"\"\n    return random.choice(lst)\n\nassert f(g(), lst=[1, 2, 3, 4, 5])\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, num1=10, num2=5) -> bool:\n    \"\"\"Check if the result is divisible by both num1 and num2\"\"\"\n    return result % num1 == 0 and result % num2 == 0\n\ndef g(num1=10, num2=5):\n    return num1 * num2\n\nassert f(g())\n",
        "idx_generation": 95,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring=\"hello\") -> bool:\n    \"\"\"Check if the given string contains the substring 'hello'.\"\"\"\n    return substring in s\ndef g():\n    s = \"hello, how are you?\"\n    return s\nassert f(g())\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[i])))\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 234,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, year=2022, month=1, day=1) -> bool:\n    \"\"\"Check if the given date is in the future.\"\"\"\n    return dt > datetime.datetime(year, month, day)\ndef g(year=2022, month=1, day=1):\n    return datetime.datetime(year, month, day) + datetime.timedelta(days=1)\nassert f(g())\n",
        "idx_generation": 390,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by all the given factors.\"\"\"\n    return all(num % factor == 0 for factor in factors)\n\ndef g(factors=[2, 3, 5]):\n    num = 1\n    for factor in factors:\n        num *= factor\n    return num\n\nassert f(g())\n",
        "idx_generation": 95,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, a='hello', b='world') -> bool:\n    \"\"\"Check if the string contains both a and b\"\"\"\n    return a in string and b in string\n\ndef g(a='hello', b='world'):\n    return a + \" \" + b\n\nassert f(g())\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(ls: List[int]) -> bool:\n    \"\"\"Check if the sum of the list is divisible by the length of the list.\"\"\"\n    return sum(ls) % len(ls) == 0\ndef g():\n    return [4, 6, 8, 10]\nassert f(g())\n",
        "idx_generation": 234,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the array that sum up to the target sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, format=\"%Y-%m-%d\") -> bool:\n    \"\"\"Check if a date string matches a specific format.\"\"\"\n    try:\n        datetime.datetime.strptime(date, format)\n        return True\n    except ValueError:\n        return False\n\ndef g(format=\"%Y-%m-%d\"):\n    return datetime.datetime.now().strftime(format)\n\nassert f(g())\n",
        "idx_generation": 95,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"Check if the given substring is a prefix of the given string\"\"\"\n    return string.startswith(substr)\n\ndef g(substr='python'):\n    return 'python programming'\n\nassert f(g())\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3, c=4) -> bool:\n    \"\"\"Check if a number is divisible by the sum of its digits\"\"\"\n    return n % (a+b+c) == 0\ndef g(a=2, b=3, c=4):\n    return a + b + c\nassert f(g())\n",
        "idx_generation": 234,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    import random\n    nums = [random.randint(1, 10) for _ in range(5)]\n    return nums\nassert f(g())\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target value\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='python', b='programming') -> bool:\n    \"\"\"Check if s contains both a and b as substrings, regardless of case\"\"\"\n    return a.lower() in s.lower() and b.lower() in s.lower()\ndef g(a='python', b='programming'):\n    return a.capitalize() + ' ' + b.capitalize()\nassert f(g())\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int, result=12) -> bool:\n    \"\"\"Check if the given number is a perfect square and its square root is equal to the result\"\"\"\n    return math.isqrt(num) ** 2 == num and math.isqrt(num) == result\n\ndef g(result=12):\n    return result ** 2\n\nassert f(g())\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=4) -> bool:\n    \"\"\"Given a list of integers nums and a target integer, find if there are three numbers in nums such that their sum equals to target.\"\"\"\n    nums.sort()\n    for i in range(len(nums) - 2):\n        left = i + 1\n        right = len(nums) - 1\n        while left < right:\n            sum = nums[i] + nums[left] + nums[right]\n            if sum == target:\n                return True\n            elif sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\ndef g(nums=[1, 3, 6, 2, -1, 2, 4, -3], target=4):\n    return nums\nassert f(g())\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=50) -> bool:\n    \"\"\"Check if there are three numbers in a list that sum up to a target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            for k in range(j+1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == target:\n                    return True\n    return False\ndef g(target=50):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nassert f(g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, chars=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if all the characters in the string are vowels.\"\"\"\n    return all((c in chars for c in s))\n    \ndef g(chars=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(chars)\n    \nassert f(g())\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date) -> bool:\n    \"\"\"Check if the input date is a leap year.\"\"\"\n    return date.year % 4 == 0 and (date.year % 100 != 0 or date.year % 400 == 0)\n\ndef g(date: datetime.date):\n    return date\n\n# Example usage\ndate = datetime.date(2024, 2, 29)\nassert f(g(date))\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Given a list of integers nums and a target integer, find if there are four numbers in nums such that their sum equals to target.\"\"\"\n    nums.sort()\n    for i in range(len(nums) - 3):\n        for j in range(i + 1, len(nums) - 2):\n            left = j + 1\n            right = len(nums) - 1\n            while left < right:\n                sum = nums[i] + nums[j] + nums[left] + nums[right]\n                if sum == target:\n                    return True\n                elif sum < target:\n                    left += 1\n                else:\n                    right -= 1\n    return False\ndef g(nums=[2, 7, 4, 0, 9, 5, 1, 3], target=16):\n    return nums\nassert f(g())\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Given a string, check if it contains exactly n consecutive vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\ndef g(n=3):\n    return \"aeioubcdf\"\nassert f(g())\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x=2021, y=2022) -> bool:\n    \"\"\"Find if the given number is a multiple of both x and y.\"\"\"\n    return n % x == 0 and n % y == 0\ndef g(x=2021, y=2022):\n    return x * y\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Return True if the list nums contains four elements a, b, c, and d such that a + b + c + d = target.\"\"\"\n    nums.sort()\n    for i in range(len(nums) - 3):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        for j in range(i+1, len(nums) - 2):\n            if j > i+1 and nums[j] == nums[j-1]:\n                continue\n            left, right = j+1, len(nums) - 1\n            while left < right:\n                total = nums[i] + nums[j] + nums[left] + nums[right]\n                if total == target:\n                    return True\n                elif total < target:\n                    left += 1\n                else:\n                    right -= 1\n    return False\n\ndef g(target=0):\n    return [1, 2, -1, 0, -2, -4]\n\nassert f(g())\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=55) -> bool:\n    \"\"\"Find two numbers in the list whose sum equals to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=55):\n    return [25, 30, 15, 10, 5]\nassert f(g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='Python') -> bool:\n    \"\"\"Check if a given substring exists in the string\"\"\"\n    return substring in string\n\ndef g(substring='Python'):\n    string = \"I love Python programming\"\n    return string\n\nassert f(g())\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=20, c=30) -> bool:\n    \"\"\"Find if the given number is between the range (a, b) and not equal to c.\"\"\"\n    return a < n < b and n != c\ndef g(a=10, b=20, c=30):\n    return (a + b) // 2\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], n=10, length=4) -> bool:\n    \"\"\"Find a sequence of integers that is a subsequence of the given sequence and has a specific length\"\"\"\n    return len(seq) >= length and seq[:length] == sorted(seq[:length])\ndef g(n=10, length=4):\n    return list(range(1, n+1))\nassert f(g())\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a list of integers where the sum of the first half of the list is equal to the sum of the second half of the list.\"\"\"\n    return sum(nums[:len(nums)//2]) == sum(nums[len(nums)//2:])\ndef g():\n    return [1, 2, 3, 4, 5, 5, 4, 3, 2, 1]\nassert f(g())\n",
        "idx_generation": 97,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(a: str, b: str, c: str) -> bool:\n    \"\"\"Check if string a is a substring of string b and if string c is a substring of the concatenation of a and b.\"\"\"\n    return a in b and c in a + b\ndef g():\n    return \"python\", \"python programming\", \"program\"\nassert f(*g())\n",
        "idx_generation": 141,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(num: int, a=1, b=4, c=3) -> bool:\n    \"\"\"Check if a number is a solution to a quadratic equation.\"\"\"\n    return a*num**2 + b*num + c == 0\n\ndef g(a=1, b=4, c=3):\n    return (-b + sqrt(b**2 - 4*a*c)) / (2*a)\n\nassert f(g())\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=576) -> bool:\n    \"\"\"Find two numbers in a list that sum up to a target value\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(target=576):\n    nums = [i for i in range(target // 2)]\n    return nums + [target - i for i in nums]\nassert f(g())\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], target=30) -> bool:\n    \"\"\"Given a list of numbers and a target value, find three numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], target=30):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return nums[i], nums[j], nums[k]\n    return None\nassert f(g())\n",
        "idx_generation": 98,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a number is in a list\"\"\"\n    return n in lst\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return random.choice(lst)\nassert f(g())\n",
        "idx_generation": 143,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, pi=3.14159) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return math.isqrt(n)**2 == n\ndef g(pi=3.14159):\n    return int(math.sqrt(pi))\nassert f(g())\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Determine if there is a pair of numbers that sum to the target\"\"\"\n    return any((target - num in numbers for num in numbers))\ndef g(target=100):\n    return [1, 2, 3, 4, 5, 95]\nassert f(g())\n",
        "idx_generation": 403,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], x=0) -> bool:\n    \"\"\"Find a pair of numbers in the given list that sum up to x\"\"\"\n    return any(arr[i] + arr[j] == x for i in range(len(arr)) for j in range(i+1, len(arr)))\ndef g(x=0):\n    return [x//2, x//2]\nassert f(g())\n",
        "idx_generation": 99,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the target string is a substring of s.\"\"\"\n    return target in s\n\ndef g(target='python'):\n    return \"This is a string that contains the target word: \" + target\n\nassert f(g())\n",
        "idx_generation": 144,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(dt: datetime, year=2022, month=5, day=10) -> bool:\n    \"\"\"Check if a given date matches the specified year, month, and day\"\"\"\n    return dt.year == year and dt.month == month and dt.day == day\n\ndef g(year=2022, month=5, day=10):\n    return datetime(year, month, day)\n\nassert f(g())\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11]) -> bool:\n    \"\"\"Check if a number is divisible by any of the given primes\"\"\"\n    for prime in primes:\n        if n % prime == 0:\n            return True\n    return False\n\ndef g(primes=[2, 3, 5, 7, 11]):\n    return primes[-1] + 1\n\nassert f(g())\n",
        "idx_generation": 403,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find if there are two numbers in the list that add up to the target value\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(target=15):\n    return [3, 6, 9, 12]\nassert f(g())\n",
        "idx_generation": 100,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='hello') -> bool:\n    \"\"\"Given a string, check if it contains a specific substring.\"\"\"\n    return substring in s\ndef g(substring='hello'):\n    return 'This is a hello world example'\nassert f(g())\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(a: float, b=5.6, c=10) -> bool:\n    \"\"\"Find a value of 'a' such that a^2 + b^2 = c^2\"\"\"\n    return math.isclose(a**2 + b**2, c**2)\ndef g(b=5.6, c=10):\n    return math.sqrt(c**2 - b**2)\nassert f(g())\n",
        "idx_generation": 249,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a given number is the minimum element in a list\"\"\"\n    return n == min(nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return min(nums)\nassert f(g())\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, days=7) -> bool:\n    \"\"\"Check if the given date is within the specified number of days from today\"\"\"\n    given_date = datetime.datetime.strptime(date, \"%Y-%m-%d\").date()\n    today = datetime.date.today()\n    return (given_date - today).days <= days\ndef g(days=7):\n    return (datetime.date.today() + datetime.timedelta(days=days)).strftime(\"%Y-%m-%d\")\nassert f(g())\n",
        "idx_generation": 100,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if the given string has exactly n uppercase letters.\"\"\"\n    return sum(1 for c in s if c.isupper()) == n\ndef g(n: int):\n    return 'A' * n + 'a' * (10 - n)\nassert f(g(5), 5)\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if n is a prime number and if it is in the list lst.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return is_prime(n) and n in lst\ndef g(lst=[1, 2, 3, 4, 5]):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in lst if is_prime(num)]\n    return primes[0] if primes else -1\nassert f(g())\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(mat: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric.\"\"\"\n    return all(mat[i][j] == mat[j][i] for i in range(len(mat)) for j in range(len(mat[0])))\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 412,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target\"\"\"\n    return any((numbers[i] + numbers[j] + numbers[k] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)) for k in range(j+1, len(numbers)))\ndef g(target=100):\n    return [1, 2, 3, 4, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "idx_generation": 101,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='abc') -> bool:\n    \"\"\"Check if the target string is a substring of the given string.\"\"\"\n    return target in s\ndef g(target='abc'):\n    return 'xyzabc123'\nassert f(g())\n",
        "idx_generation": 146,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, r=3) -> bool:\n    \"\"\"Check if the point (x, y, z) lies on the surface of a sphere with the given radius.\"\"\"\n    return abs(math.sqrt(x**2 + y**2 + z**2) - r) < 1e-6\n\ndef g(r=3):\n    x = r * math.cos(math.pi / 4)\n    y = r * math.sin(math.pi / 4)\n    z = 0\n    return x, y, z\n\nassert f(*g())\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Check if there is a row in the matrix that contains all numbers from 1 to a given target\"\"\"\n    return any([set(row) == set(range(1, target + 1)) for row in matrix])\ndef g(target=100):\n    matrix = [[i for i in range(1, target + 1)] for _ in range(target)]\n    return matrix\nassert f(g())\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], target_length=10) -> bool:\n    \"\"\"Check if the total length of all strings in the list is equal to the target length\"\"\"\n    return sum(len(s) for s in strings) == target_length\ndef g(target_length=10):\n    return ['hello', 'world']\nassert f(g())\n",
        "idx_generation": 101,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string\"\"\"\n    return substring in s\n\ndef g(substring='abc'):\n    return \"xyz\" + substring + \"def\"\n\nassert f(g())\n",
        "idx_generation": 148,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if n is the sum of two numbers in the list\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False\ndef g(lst=[2, 4, 6, 8, 10]):\n    return sum(lst[:3])\nassert f(g())\n",
        "idx_generation": 415,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[4, 8, 15, 16, 23, 42]) -> bool:\n    \"\"\"Check if the given number n can be expressed as the sum of two distinct numbers from the list of nums\"\"\"\n    return any(n == a + b for i, a in enumerate(nums) for b in nums[i + 1:])\n\ndef g(nums=[4, 8, 15, 16, 23, 42]):\n    return sum(nums[:2])\n\nassert f(g())\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']) -> bool:\n    \"\"\"Find the longest common substring between s and any of the substrings\"\"\"\n    return any(sub in s for sub in substrings)\ndef g(substrings=['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']):\n    return substrings[0]\nassert f(g())\n",
        "idx_generation": 149,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: int, y: int, z: int, target=50) -> bool:\n    \"\"\"Check if the product of three numbers is equal to the target\"\"\"\n    return x * y * z == target\n\ndef g(target=50):\n    random.seed(42)\n    x = random.randint(1, 10)\n    y = random.randint(1, 10)\n    z = target // (x * y)\n    return x, y, z\n\nassert f(*g())\n",
        "idx_generation": 258,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(d: datetime.date, weekday=2) -> bool:\n    \"\"\"Check if the given date falls on a specific weekday\"\"\"\n    return d.weekday() == weekday\n\ndef g(weekday=2):\n    return datetime.datetime.strptime(\"2021-09-01\", \"%Y-%m-%d\").date()\n\nassert f(g())\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if the target number is present in the matrix.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    i = 0\n    j = n - 1\n    while i < m and j >= 0:\n        if matrix[i][j] == target:\n            return True\n        elif matrix[i][j] < target:\n            i += 1\n        else:\n            j -= 1\n    return False\ndef g(target=5):\n    matrix = [[random.randint(1, 10) for _ in range(5)] for _ in range(5)]\n    return matrix\nassert f(g())\n",
        "idx_generation": 103,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 150,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(res: int, n=4, m=3) -> bool:\n    \"\"\"Find the result of raising an integer n to the power of m.\"\"\"\n    return res == n ** m\ndef g(n=4, m=3):\n    return n ** m\nassert f(g())\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Given a list of integers and a target sum, find two numbers in the list that add up to the target sum.\nSample Input:\n[2, 7, 11, 15]\n9\nSample Output:\n[2, 7]\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=9):\n    return [2, 7]\nassert f(g())\n",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(result: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the result is a randomly selected element from the list\"\"\"\n    return result in lst\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return random.choice(lst)\n\nassert f(g())\n",
        "idx_generation": 105,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, lst=['apple', 'banana', 'cherry'], target=2) -> bool:\n    \"\"\"You are given a list of strings. Find the index of the first string that has a length greater than or equal to the target length.\n    Sample Input:\n    `['apple', 'banana', 'cherry']`\n    Sample Output:\n    `1`\"\"\"\n    for i, s in enumerate(lst):\n        if len(s) >= target:\n            return i == result\n    return False\n\ndef g(lst=['apple', 'banana', 'cherry'], target=2):\n    for i, s in enumerate(lst):\n        if len(s) >= target:\n            return i\n    return None\n\nassert f(g())\n",
        "idx_generation": 151,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, m=1234567890) -> bool:\n    \"\"\"Check if the number x is divisible by 9.\"\"\"\n    return x % 9 == 0\ndef g(m=1234567890):\n    return m * 9\nassert f(g())\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 3, 5, 7, 9]) -> bool:\n    \"\"\"Check if a given number is present in the list.\"\"\"\n    return n in lst\ndef g(lst=[1, 3, 5, 7, 9]):\n    return lst[2]\nassert f(g())\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"Check if a given substring exists in the given string.\"\"\"\n    return substr in string\ndef g(substr='abc'):\n    return 'xyz' + substr + 'def'\nassert f(g())\n",
        "idx_generation": 106,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, n=3) -> bool:\n    \"\"\"Check if a string x is a palindrome of length n.\"\"\"\n    return x == x[::-1] and len(x) == n\ndef g(n=3):\n    return str(n) * n\nassert f(g())\n",
        "idx_generation": 153,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(a: float, b: float, c: float) -> bool:\n    \"\"\"Check if the given values a, b, and c form a valid triangle.\"\"\"\n    return a + b > c and a + c > b and b + c > a\n\ndef g():\n    return math.pi, math.e, math.sqrt(2)\n\nassert f(*g())\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\ndef f(lst: list, n=3) -> bool:\n    \"\"\"Check if the list contains a subsequence of length n that is sorted in ascending order\"\"\"\n    for i in range(len(lst) - n + 1):\n        if sorted(lst[i:i + n]) == lst[i:i + n]:\n            return True\n    return False\ndef g(lst=[random.randint(0, 9) for _ in range(10)]):\n    return lst\nassert f(g())\n",
        "idx_generation": 425,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], last_name='Smith') -> bool:\n    \"\"\"Check if a specific last name occurs in a list of names in a case-insensitive manner.\"\"\"\n    assert len(names) > 0, 'Hint: The list of names should not be empty.'\n    return any(name.lower() == last_name.lower() for name in names)\ndef g(last_name='Smith'):\n    return ['John', 'Doe', 'Smith', 'Jane']\nassert f(g())\n",
        "idx_generation": 106,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub='abc') -> bool:\n    \"\"\"Given a string, determine if there exists a substring that is equal to a given subsequence.\"\"\"\n    return any((sub in s[i:] for i in range(len(s) - len(sub) + 1)))\ndef g(sub='abc'):\n    return sub\nassert f(g())\n",
        "idx_generation": 154,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find a number that when multiplied by all the elements in lst gives the result n\"\"\"\n    product = 1\n    for num in lst:\n        product *= num\n    return product == n\ndef g(lst=[1, 2, 3, 4, 5]):\n    product = 1\n    for num in lst:\n        product *= num\n    return product\nassert f(g())\n",
        "idx_generation": 271,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(number: int, power=2) -> bool:\n    \"\"\"Check if a number is a perfect power.\"\"\"\n    if number < 2:\n        return False\n    for base in range(2, int(number ** 0.5) + 1):\n        exponent = 2\n        while base ** exponent <= number:\n            if base ** exponent == number:\n                return True\n            exponent += 1\n    return False\n\ndef g(number=16, power=2):\n    return number\n\nassert f(g())\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Find two numbers in a list that add up to a target sum.\"\"\"\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 106,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the given string contains all the characters of the target string in order, without skipping any characters.\"\"\"\n    return target in s\ndef g(target='python'):\n    return ''.join([c for c in target])\nassert f(g())\n",
        "idx_generation": 156,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, circumference=2*math.pi) -> bool:\n    \"\"\"Given a radius, check if the circumference of the circle with that radius is equal to the given circumference.\"\"\"\n    return circumference == 2 * math.pi * radius\n\ndef g(circumference=2*math.pi):\n    radius = circumference / (2 * math.pi)\n    return radius\n\nassert f(g())\n",
        "idx_generation": 274,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: list, target=10) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(size=10, target=10):\n    return list(range(1, size+1))\n\nassert f(g())\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n=1000) -> bool:\n    \"\"\"Find the sum of all pairs of numbers in the list that add up to n.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False\n\ndef g(n=1000):\n    return [i for i in range(n)]\n\nassert f(g())\n",
        "idx_generation": 107,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=\"racecar\") -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1] and s == target\ndef g(target=\"racecar\"):\n    return target\nassert f(g())\n",
        "idx_generation": 156,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: float, target=100) -> bool:\n    \"\"\"Check if the square root of the given number is equal to the target.\"\"\"\n    return math.isclose(math.sqrt(num), target)\n\ndef g():\n    return 10000\n\nassert f(g())\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in a list that add up to a given target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [5, 5]\n\nassert f(g())\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(d: datetime.date) -> bool:\n    \"\"\"Check if the given date is a Friday.\"\"\"\n    return d.weekday() == 4\n\ndef g():\n    return datetime.date(2022, 12, 30)\n\nassert f(g())\n",
        "idx_generation": 107,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='hello', b='world') -> bool:\n    \"\"\"Check if s is a concatenation of strings a and b\"\"\"\n    return s == a + b\ndef g(a='hello', b='world'):\n    return a + b\nassert f(g())\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(result: float, x=5, y=7) -> bool:\n    \"\"\"Find the result of computing the logarithm of x to the base y\"\"\"\n    return result == math.log(x, y)\n\ndef g(x=5, y=7):\n    return math.log(x, y)\n\nassert f(g())\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=4) -> bool:\n    \"\"\"Given a list of integers and a target number, find a pair of numbers in the list whose sum is equal to the target number\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(target=4):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], n=5) -> bool:\n    \"\"\"Check if the given list of numbers contains the randomly chosen number\"\"\"\n    return n in nums\n    \ndef g(n=5):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    random.shuffle(nums)\n    return nums\n\nassert f(g())\n",
        "idx_generation": 108,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=3, char='o') -> bool:\n    \"\"\"Check if the character char appears exactly n times in the string.\"\"\"\n    return string.count(char) == n\n\ndef g(n=3, char='o'):\n    return char * n\n\nassert f(g())\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=100, b=10, c=1) -> bool:\n    \"\"\"Check if a number is divisible by the product of three other numbers\"\"\"\n    return x % (a * b * c) == 0\n\ndef g(a=100, b=10, c=1):\n    return a * b * c\n\nassert f(g())\n",
        "idx_generation": 282,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, num_list=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is present in the list\"\"\"\n    return n in num_list\n\ndef g(num_list=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return 5\n\nassert f(g())\n",
        "idx_generation": 429,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], k=8) -> bool:\n    \"\"\"Find a list where the sum of any k consecutive integers is divisible by k\"\"\"\n    return all(sum(lst[i:i+k]) % k == 0 for i in range(len(lst)-k+1))\n\ndef g(k=8):\n    return [i*k for i in range(1, k+1)]\n\nassert f(g(), 8)\n",
        "idx_generation": 108,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(palindrome: str, s=\"racecar\") -> bool:\n    \"\"\"Given a string, determine if it is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g(s=\"racecar\"):\n    return s\n\nassert f(g(), s=\"racecar\")\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, n=3) -> bool:\n    \"\"\"Check if the sum of all numbers in the array is divisible by n.\"\"\"\n    return np.sum(arr) % n == 0\n\ndef g(n=3):\n    return np.array([i for i in range(n**2)])\n\nassert f(g())\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_product=24) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers that multiply to the target_product.\"\"\"\n    seen = set()\n    for num in nums:\n        if target_product % num == 0 and target_product // num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target_product=24):\n    return [2, 3, 4, 6]\nassert f(g())\n",
        "idx_generation": 432,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=17) -> bool:\n    \"\"\"Find two numbers in a list that sum up to a target value\"\"\"\n    return any([nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))])\ndef g(target=17):\n    return [5, 12, 3, 8, 9]\nassert f(g())\n",
        "idx_generation": 110,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, pattern='abc') -> bool:\n    \"\"\"Find a substring in the string that matches the pattern\"\"\"\n    return pattern in string\n\ndef g(pattern='abc'):\n    string = 'abcdabcabcde'\n    return string\n\nassert f(g())\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y=5.2) -> bool:\n    \"\"\"Check if the given number is a perfect square and the square root is less than or equal to y\"\"\"\n    return math.isqrt(x) ** 2 == x and math.isqrt(x) <= y\n\ndef g(y=5.2):\n    return int(y) ** 2\n\nassert f(g())\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a list that add up to the target\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 433,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]], target_distance=5) -> bool:\n    \"\"\"Find a pair of points from the given list that have a distance equal to the target_distance\"\"\"\n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n            if distance == target_distance:\n                return True\n    return False\n\ndef g(target_distance=5):\n    points = [\n        (0, 0),\n        (3, 4),\n        (6, 8),\n        (9, 12)\n    ]\n    return points\n\nassert f(g())\n",
        "idx_generation": 110,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the given string s contains all the characters in the target string in the same order.\"\"\"\n    target_index = 0\n    for char in s:\n        if char == target[target_index]:\n            target_index += 1\n        if target_index == len(target):\n            return True\n    return False\ndef g(target='python'):\n    s = 'abcdefghijklmnop' + target + 'qrstuvwxyz'\n    return s\nassert f(g())\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, volume=113.0976) -> bool:\n    \"\"\"Check if the volume of a sphere is equal to a given value.\"\"\"\n    calculated_volume = (4/3) * math.pi * radius**3\n    return math.isclose(calculated_volume, volume)\ndef g(volume=113.0976):\n    radius = (3 * volume / (4 * math.pi))**(1/3)\n    return radius\nassert f(g())\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the list\"\"\"\n    nums.sort()\n    for i in range(len(nums)-k+1):\n        if nums[i+k-1] - nums[i] == k-1:\n            return True\n    return False\n\ndef g(k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 434,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_product=24) -> bool:\n    \"\"\"Find a pair of numbers from the given list that have a product equal to the target_product\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] * numbers[j] == target_product:\n                return True\n    return False\n\ndef g(target_product=24):\n    numbers = [1, 2, 3, 4, 5, 6]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 110,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, pattern='abc') -> bool:\n    \"\"\"Check if the given string s contains the given pattern string in a repeating manner.\"\"\"\n    pattern_index = 0\n    for char in s:\n        if char == pattern[pattern_index]:\n            pattern_index += 1\n        if pattern_index == len(pattern):\n            pattern_index = 0\n    return pattern_index == 0\ndef g(pattern='abc'):\n    s = pattern * 10\n    return s\nassert f(g())\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(num: int, threshold=10) -> bool:\n    \"\"\"Check if the given number is a prime number with more than the threshold number of digits.\"\"\"\n    if num < 2 or len(str(num)) <= threshold:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(threshold=10):\n    num = 10 ** threshold\n    while True:\n        if f(num, threshold):\n            return num\n        num += 1\n\nassert f(g())\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the list.\"\"\"\n    nums.sort()\n    for i in range(len(nums)-k+1):\n        if nums[i+k-1] - nums[i] == k-1:\n            return True\n    return False\ndef g(k=5):\n    return list(range(1, k+1))\nassert f(g())\n",
        "idx_generation": 435,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: list, a=10, b=3) -> bool:\n    \"\"\"Check if a list contains two numbers that add up to a certain value\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == a:\n                return True\n    return False\ndef g(a=10, b=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, b]\nassert f(g())\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry'], k=2) -> bool:\n    \"\"\"Determine if there are at least k words in the list words that are substrings of string s.\"\"\"\n    return sum([1 for word in words if word in s]) >= k\ndef g(words=['apple', 'banana', 'cherry'], k=2):\n    return ' '.join(words)\nassert f(g())\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, n=4) -> bool:\n    \"\"\"Check if a number is a power of n\"\"\"\n    if x == 1:\n        return True\n    while x != 0 and x % n == 0:\n        x = x / n\n    return x == 1\ndef g(n=4):\n    return n**2\nassert f(g())\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=42) -> bool:\n    \"\"\"Check if a target number is present in a matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=42):\n    return [[1, 2, 3], [4, 5, target], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[2,4,6,8,10]) -> bool:\n    \"\"\"Check if a given number is present in the list\"\"\"\n    return n in lst\ndef g(lst=[2,4,6,8,10]):\n    return lst[0]\nassert f(g())\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string that is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, x=10, y=5) -> bool:\n    \"\"\"Check if the given number is a perfect square and divisible by both x and y\"\"\"\n    return sqrt(n) == int(sqrt(n)) and n % x == 0 and n % y == 0\n\ndef g(x=10, y=5):\n    return x * y * x * y\nassert f(g())\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=42) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list whose sum is equal to the target\"\"\"\n    return any((num1 + num2 == target) for num1 in numbers for num2 in numbers)\ndef g(target=42):\n    return [target - 1, 1]\nassert f(g())\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if there exists a pair of integers in the list such that their sum is equal to the target value.\"\"\"\n    s = set()\n    for num in nums:\n        if target - num in s:\n            return True\n        s.add(num)\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "idx_generation": 114,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the length of the string is greater than or equal to n.\"\"\"\n    return len(s) >= n\ndef g(s='Hello', n=3):\n    return s\nassert f(g())\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the matrix that sum up to the target.\"\"\"\n    for row in matrix:\n        for i in range(len(row)):\n            for j in range(i+1, len(row)):\n                if row[i] + row[j] == target_sum:\n                    return True\n    return False\ndef g(target_sum=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=23) -> bool:\n    \"\"\"Find two distinct numbers in the list that add up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums=[5, 12, 8, 3, 2, 15, 7]):\n    return nums\nassert f(g())\n",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix\"\"\"\n    rows = len(matrix)\n    for row in matrix:\n        if len(row) != rows:\n            return False\n    return True\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 115,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, n=4, s=\"abcd\") -> bool:\n    \"\"\"Check if a string contains all characters of another string\"\"\"\n    return len(set(x)) == n and all([c in x for c in s])\ndef g(n=4, s=\"abcd\"):\n    return s * n\nassert f(g())\n",
        "idx_generation": 162,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) -> bool:\n    \"\"\"Check if n is a prime number from the list of primes\"\"\"\n    return n in primes\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]):\n    return primes[0]\nassert f(g())\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sum up to n.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == n:\n                return True\n    return False\ndef g(n=3):\n    return [1, 2, n-2]\nassert f(g())\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sum=15) -> bool:\n    \"\"\"Check if any row in a matrix has a sum equal to a target value.\"\"\"\n    for row in matrix:\n        if sum(row) == row_sum:\n            return True\n    return False\ndef g(row_sum=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 116,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, d=5) -> bool:\n    \"\"\"Check if a string contains exactly d consecutive vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n            if count == d:\n                return True\n        else:\n            count = 0\n    return False\ndef g(d=5):\n    return \"aeiou\" * d\nassert f(g())\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the sum of the first n elements in lst is equal to n*(n+1)/2\"\"\"\n    return sum(lst[:n]) == n*(n+1)//2\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return len(lst)\nassert f(g())\n",
        "idx_generation": 306,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers that multiply to give the target value.\"\"\"\n    return any(nums[i] * nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target=100):\n    nums = [2, 5, 10, 20, 25, 50]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, seq=[13, -7, 8, 11, -5, 9, -2, 6, 1, -3]) -> bool:\n    \"\"\"Find the index of the first occurrence of a number in a sequence\"\"\"\n    return num in seq and seq.index(num) == 0\ndef g(seq=[13, -7, 8, 11, -5, 9, -2, 6, 1, -3]):\n    return seq[0]\nassert f(g())\n",
        "idx_generation": 117,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if a string starts and ends with the same character.\"\"\"\n    return s[0] == s[-1] == char\ndef g(char='a'):\n    return char + 'bc' + char\nassert f(g())\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the product of the first n elements in lst is equal to the factorial of n\"\"\"\n    import math\n    return math.prod(lst[:n]) == math.factorial(n)\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return len(lst)\nassert f(g())\n",
        "idx_generation": 306,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a subset of the list that sums up to the target value.\"\"\"\n    return any(sum(subset) == target for r in range(len(lst)+1) for subset in combinations(lst, r))\ndef g(target=10):\n    return [target]\nassert f(g())\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(target - num1 - num2 in arr for num1 in arr for num2 in arr)\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g(), target=10)\n",
        "idx_generation": 119,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if a given substring is present in the given string.\"\"\"\n    return substring in s\ndef g(substring='abc'):\n    return 'abcdefg' + substring + 'hijklmnop'\nassert f(g())\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=7, b=2) -> bool:\n    \"\"\"Check if the remainder of a divided by b is equal to x\"\"\"\n    return a % b == x\ndef g(a=7, b=2):\n    return a % b\nassert f(g())\n",
        "idx_generation": 309,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers that add up to the given target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the list is a palindrome.\"\"\"\n    return arr == arr[::-1]\ndef g():\n    return [1, 2, 3, 2, 1]\nassert f(g())\n",
        "idx_generation": 119,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if a given substring exists in a given string.\"\"\"\n    if substr in s:\n        return True\n    return False\ndef g(substr='abc'):\n    s = \"defghijabcklmnop\"\n    return s\nassert f(g())\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, year=2022) -> bool:\n    \"\"\"Check if a given date is in the future compared to the year value.\"\"\"\n    return dt.year > year\n\ndef g(year=2022):\n    return datetime.datetime(year + 1, 1, 1)\n\nassert f(g())\n",
        "idx_generation": 313,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find if there are three numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=20):\n    return [6, 8, 3, 5, 1, 4, 9]\nassert f(g())\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: list, target: int) -> bool:\n    \"\"\"Given a list of integers, check if there exists a pair of distinct numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=10):\n    \"\"\"Return a pair of distinct numbers from the list that sum up to the target.\"\"\"\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                pairs.append((arr[i], arr[j]))\n    return random.choice(pairs)\n\nassert f(g(), target=10)\n",
        "idx_generation": 119,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='word') -> bool:\n    \"\"\"Given a string, find if it contains a target word. Ignore case sensitivity.\nSample Input:\n`'Hello World'`\nSample Output:\n`True`\"\"\"\n    return target.lower() in s.lower()\ndef g(target='word'):\n    return 'Hello ' + target.capitalize()\nassert f(g())\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=10, target=4) -> bool:\n    \"\"\"Check if the logarithm of a number, given a base, is equal to a target number.\"\"\"\n    return math.log(n, x) == target\ndef g(x=10, target=4):\n    return x**target\nassert f(g())\n",
        "idx_generation": 313,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 7, 11, 15]) -> bool:\n    \"\"\"Find two numbers in a list that add up to a given target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == n:\n                return True\n    return False\ndef g(nums=[2, 7, 11, 15]):\n    target = 9\n    return target\nassert f(g())\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: list, k=25) -> bool:\n    \"\"\"Check if the sum of the first k elements in a list is greater than the sum of the last k elements.\"\"\"\n    return sum(lst[:k]) > sum(lst[-k:])\n    \ndef g(k=25):\n    lst = [random.randint(1, 100) for _ in range(50)]\n    return lst\n\nassert f(g())\n",
        "idx_generation": 120,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if a given substring exists in a larger string. Return True if it does, False otherwise.\"\"\"\n    return substr in s\ndef g(substr='python'):\n    return substr\nassert f(g())\n",
        "idx_generation": 169,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(l: List[int]) -> bool:\n    \"\"\"Given a list of integers, return True if the sum of all the numbers in the list is divisible by 10, and False otherwise.\"\"\"\n    return sum(l) % 10 == 0\n\ndef g():\n    return [10, 20, 30, 40]\n\nassert f(g())\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(s: int, n=10) -> bool:\n    \"\"\"Find a number that, when squared, has a given sum of its digits.\"\"\"\n    return sum(int(digit) for digit in str(s**2)) == n\n\ndef g(n=10):\n    digits_sum = n\n    # Find the maximum possible number whose squared sum of digits is equal to n\n    max_num = int(math.sqrt(9*n)) + 1\n\n    for num in range(max_num, 0, -1):\n        if sum(int(digit) for digit in str(num**2)) == digits_sum:\n            return num\n\nassert f(g())\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sums up to a specific target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 121,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"Check if a given substring is present in a given string\"\"\"\n    return substr in string\ndef g(substr='python'):\n    return 'Hello, I love python programming!'\nassert f(g())\n",
        "idx_generation": 171,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int) -> bool:\n    \"\"\"Find a positive integer x that is a perfect square and the square root of x is divisible by 5.\"\"\"\n    return math.sqrt(x).is_integer() and math.sqrt(x) % 5 == 0\n\ndef g():\n    return 25 * 25\n\nassert f(g())\n",
        "idx_generation": 325,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(array: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the array that add up to the target value\"\"\"\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            if array[i] + array[j] == target:\n                return True\n    return False\n    \ndef g(array=[3, 7, 2, 8, 4, 5]):\n    return array\n\nassert f(g())\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Check if the given date is a leap year\"\"\"\n    dt = datetime.strptime(date, format)\n    year = dt.year\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\n\ndef g(year=2000):\n    return str(year) + '-02-29'\n\nassert f(g())\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='fix') -> bool:\n    \"\"\"Check if there is a word in the list that starts with the prefix and ends with the suffix\"\"\"\n    return any(word.startswith(prefix) and word.endswith(suffix) for word in words)\ndef g(prefix='pre', suffix='fix'):\n    return ['prefix', 'suffix', prefix + 'word' + suffix]\nassert f(g())\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there are two elements in the list that add up to the target value\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target=50):\n    return [10, 20, 30, 40]\n\nassert f(g())\n",
        "idx_generation": 327,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: list, target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that add up to the target value\"\"\"\n    complements = set()\n    for num in li:\n        if num in complements:\n            return True\n        complements.add(target - num)\n    return False\ndef g(target=100):\n    return [target // 2, target // 2]\nassert f(g())\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, m=15, k=3) -> bool:\n    \"\"\"Check if n is divisible by m and the sum of its digits is divisible by k\"\"\"\n    return n % m == 0 and sum(int(digit) for digit in str(n)) % k == 0\n\ndef g(m=15, k=3):\n    digits = ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n    n = int(''.join(digits))\n    return n * math.factorial(len(digits))\n\nassert f(g())\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Given a string s, determine if it is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, base=2, exponent=10) -> bool:\n    \"\"\"Find the result of raising the base to the exponent.\"\"\"\n    return pow(base, exponent) == result\ndef g(base=2, exponent=10):\n    return base ** exponent\nassert f(g())\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to a given target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, sub_length=3, sub_count=2) -> bool:\n    \"\"\"Check if there are 'sub_count' number of substrings of length 'sub_length' in the given string that are palindromes.\"\"\"\n    count = 0\n    for i in range(len(string) - sub_length + 1):\n        substring = string[i:i + sub_length]\n        if substring == substring[::-1]:\n            count += 1\n    return count == sub_count\n\ndef g(sub_length=3, sub_count=2):\n    string = \"racecar\" * sub_count\n    return string\n\nassert f(g())\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float) -> bool:\n    \"\"\"Check if a given set of three numbers forms a Pythagorean triple.\"\"\"\n    return math.isclose(x**2 + y**2, z**2)\n\ndef g():\n    return (3, 4, 5)\n\nassert f(*g())\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(num: int, a=50, b=100) -> bool:\n    \"\"\"Check if the given number is within the range of a and b (inclusive).\"\"\"\n    return a <= num <= b\n\ndef g(a=50, b=100):\n    return random.randint(a, b)\n\nassert f(g())\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.datetime, year=2022, month=1, day=1) -> bool:\n    \"\"\"Check if the given date is the first day of a specific year and month\"\"\"\n    return date.year == year and date.month == month and date.day == day\n\ndef g(year=2022, month=1, day=1):\n    return datetime.datetime(year, month, day)\n\nassert f(g())\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, s='racecar') -> bool:\n    \"\"\"Check if x is a palindrome\"\"\"\n    return x == s[::-1]\n\ndef g(s='racecar'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=0) -> bool:\n    \"\"\"Check if the sum of the elements in the array is equal to the target value\"\"\"\n    return np.sum(arr) == target\n\ndef g(target=0):\n    return np.zeros((3, 3)) + target\n\nassert f(g())\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime, timedelta\n\ndef f(dates: List[datetime], n=4) -> bool:\n    \"\"\"Check if there are n consecutive days in the given list of dates\"\"\"\n    dates.sort()\n    for i in range(len(dates) - n + 1):\n        if dates[i] + timedelta(days=n-1) == dates[i + n - 1]:\n            return True\n    return False\n\ndef g(n=4):\n    today = datetime.today()\n    return [today - timedelta(days=i) for i in range(n)]\n\nassert f(g())\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=42) -> bool:\n    \"\"\"Find two numbers in the list that add up to a specific target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=42):\n    return [10, 32]\nassert f(g())\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr=\"hello\", case_sensitive=False) -> bool:\n    \"\"\"Check if the given substring is present in the string.\"\"\"\n    if case_sensitive:\n        return substr in string\n    else:\n        return substr.lower() in string.lower()\ndef g(substr=\"hello\", case_sensitive=False):\n    if case_sensitive:\n        return substr\n    else:\n        return substr.lower()\nassert f(g())\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, start=1, end=1000) -> bool:\n    \"\"\"Check if n is a perfect square between start and end (inclusive)\"\"\"\n    return math.isqrt(n)**2 == n and start <= n <= end\n\ndef g(start=1, end=1000):\n    return start**2\nassert f(g())\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], m=-100, n=100) -> bool:\n    \"\"\"Check if the maximum value in the list is between m and n (inclusive)\"\"\"\n    return m <= max(x) <= n\ndef g(m=-100, n=100):\n    return [m, n]\nassert f(g())\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Given a list of integers, find four numbers whose sum is equal to target_sum\"\"\"\n    return any((nums[i] + nums[j] + nums[k] + nums[l] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums)) for l in range(k + 1, len(nums))))\ndef g(target_sum=100):\n    return [10, 20, 30, 40]\nassert f(g())\n",
        "idx_generation": 125,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if a given character is present in the string.\"\"\"\n    return char in s\ndef g(char='a'):\n    return \"apple\"\nassert f(g())\n",
        "idx_generation": 177,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, year=2022, month=3, day=25) -> bool:\n    \"\"\"Check if a given date is the same as a specified year, month, and day\"\"\"\n    return date.year == year and date.month == month and date.day == day\n\ndef g(year=2022, month=3, day=25):\n    return datetime.date(year, month, day)\n\nassert f(g())\n",
        "idx_generation": 331,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in a list that add up to a given target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[2, 5, 7, 4, 1, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3, c=5) -> bool:\n    \"\"\"Check if a number is divisible by any of three given numbers.\"\"\"\n    return n % a == 0 or n % b == 0 or n % c == 0\ndef g(a=2, b=3, c=5):\n    return a * b * c\nassert f(g())\n",
        "idx_generation": 126,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig']) -> bool:\n    \"\"\"Given a string and a list of words, return True if the string contains any word from the list, and False otherwise.\"\"\"\n    return any(word in s for word in words)\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig']):\n    return words[0]\nassert f(g())\n",
        "idx_generation": 177,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=10) -> bool:\n    \"\"\"Check if n is the product of a and b\"\"\"\n    return n == a * b\n\ndef g(a=3, b=10):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 331,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target number\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 497,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int, is_prime=True) -> bool:\n    \"\"\"Check if a number is prime\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(is_prime=True):\n    return 13\n\nassert f(g())\n",
        "idx_generation": 126,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abcde') -> bool:\n    \"\"\"Check if a string contains a given substring\"\"\"\n    return substr in s\ndef g(substr='abcde'):\n    return 'abcdefgh'.replace('f', substr)\nassert f(g())\n",
        "idx_generation": 178,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=124, b=23, c=54) -> bool:\n    \"\"\"Check if a number is divisible by the sum of three other numbers.\"\"\"\n    return n % (a + b + c) == 0\ndef g(a=124, b=23, c=54):\n    return a + b + c\nassert f(g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Check if there are two numbers in the given list that add up to the target\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if target - num in num_set:\n            return True\n    return False\ndef g(nums=[5, 8, 2, 3, 1, 6]):\n    return nums\nassert f(g())\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exist two numbers in a list whose sum is equal to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target_sum-9]\nassert f(g())\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, char_count: int = 3) -> bool:\n    \"\"\"Check if a particular character appears a certain number of times in the given word\"\"\"\n    return word.count(\"a\") == char_count\n\ndef g(char_count: int = 3):\n    word = \"banana\"\n    return word, char_count\n\nassert f(*g())\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, threshold=50) -> bool:\n    \"\"\"Check if the sum of all elements in the array is greater than the threshold\"\"\"\n    return np.sum(arr) > threshold\n\ndef g(threshold=50):\n    return np.ones((3, 3)) * threshold\n\nassert f(g())\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=36) -> bool:\n    \"\"\"Check if there exists a row in the matrix where the sum of all elements is equal to the target\"\"\"\n    return any((sum(row) == target for row in matrix))\ndef g(target=36):\n    matrix = [[2, 10, 15], [5, 12, 19], [8, 14, 21]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=3, length=12) -> bool:\n    \"\"\"Check if the string contains a certain number of copies of a given substring and matches the given length\"\"\"\n    return string.count(substring) == count and len(string) == length\n\ndef g(substring='abc', count=3, length=12):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * c\n\nassert f(g())\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a given number is a multiple of any number in a list\"\"\"\n    return n in nums and any(n % i == 0 for i in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return next((n for n in nums if any(n % i == 0 for i in nums)))\nassert f(g())\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], target=10) -> bool:\n    \"\"\"Find a sequence of integers that sums up to the target\"\"\"\n    return sum(seq) == target\ndef g(target=10):\n    return [1, 2, 3, 4]\nassert f(g())\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Given a string, find if it contains a substring that starts with 'abc' and ends with 'xyz'.\"\"\"\n    return substr in s\n\ndef g():\n    return \"xyzabc123\"\n\nassert f(g())\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=4, b=6, c=8) -> bool:\n    \"\"\"Check if a number is divisible by a, b, and c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=4, b=6, c=8):\n    return a * b * c\nassert f(g())\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=4) -> bool:\n    \"\"\"Determine if there are two numbers in the array that add up to k.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == k:\n                return True\n    return False\ndef g(k=4):\n    return [1, 2, 3, k-3]\nassert f(g())\n",
        "idx_generation": 133,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, n=3) -> bool:\n    \"\"\"Check if the string contains n consecutive vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in x:\n        if char in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(n=3):\n    return \"helloaeiouworld\"\n\nassert f(g())\n",
        "idx_generation": 185,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=10, y=2) -> bool:\n    \"\"\"Check if the given number is a perfect square and a power of y.\"\"\"\n    return math.isqrt(n)**2 == n and math.log(n, y).is_integer()\ndef g(x=10, y=2):\n    return y**x\nassert f(g())\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that multiply to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, target]\nassert f(g())\n",
        "idx_generation": 133,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Find if the target word can be formed by concatenating the given list of words.\"\"\"\n    return ''.join(words) == target\n\ndef g():\n    return ['p', 'y', 't', 'h', 'o', 'n']\n\nassert f(g())\n",
        "idx_generation": 185,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a given number is divisible by all numbers in a list.\"\"\"\n    return all((n % num == 0 for num in lst))\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    n = 1\n    for num in lst:\n        n *= num\n    return n\n\nassert f(g())\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=13) -> bool:\n    \"\"\"Find a pair of numbers that add up to a specific target.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(target=13):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 133,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, substr='abc') -> bool:\n    \"\"\"Check if string s contains the substring substr at least n times.\"\"\"\n    return s.count(substr) >= n\n\ndef g(n=3, substr='abc'):\n    return substr * n\nassert f(g())\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(area: float, radius=10.0) -> bool:\n    \"\"\"Find a circle's radius given its area\"\"\"\n    return math.pi * radius**2 == area\n\ndef g(radius=10.0):\n    return math.pi * radius**2\n\nassert f(g())\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Check if a given date is a weekend\"\"\"\n    dt = datetime.strptime(date, format)\n    return dt.weekday() >= 5\ndef g(format='%Y-%m-%d'):\n    date = \"2022-12-31\"\n    return date\nassert f(g())\n",
        "idx_generation": 134,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a string contains exactly n number of vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count == n\n\ndef g(n=5):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = \"\"\n    for _ in range(n):\n        s += vowels[_]\n    return s\n\nassert f(g())\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, area: float) -> bool:\n    \"\"\"Check if the area of a circle matches the given area.\"\"\"\n    calculated_area = math.pi * radius ** 2\n    return abs(calculated_area - area) < 0.0001\n\ndef g(area: float):\n    radius = math.sqrt(area / math.pi)\n    return radius\n\nassert f(g(25), 25)\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Given a list of numbers, return True if there exists a pair of numbers that adds up to the target, False otherwise.\"\"\"\n    return any((numbers[i] + numbers[j] == target for i in range(len(numbers)) for j in range(i+1, len(numbers))))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 134,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=\"python\", count=3) -> bool:\n    \"\"\"Check if the target string appears count times in the given string\"\"\"\n    return s.count(target) == count\n\ndef g(target=\"python\", count=3):\n    return target * count\nassert f(g())\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if the given number n is divisible by the sum of its digits.\"\"\"\n    return n % sum([int(d) for d in str(n)]) == 0\ndef g():\n    import random\n    while True:\n        n = random.randint(1, 1000)\n        if f(n):\n            return n\nassert f(g())\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(moves: List[str], position=(0, 0)) -> bool:\n    \"\"\"Given a list of moves, return True if the final position is the origin (0, 0), False otherwise.\"\"\"\n    x, y = position\n    for move in moves:\n        if move == 'U':\n            y += 1\n        elif move == 'D':\n            y -= 1\n        elif move == 'L':\n            x -= 1\n        elif move == 'R':\n            x += 1\n    return x == 0 and y == 0\ndef g():\n    return ['U', 'D', 'L', 'R']\nassert f(g())\n",
        "idx_generation": 134,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python', max_len=5) -> bool:\n    \"\"\"Check if a given string is a substring of a longer word, and if it is, check if the substring is at most a certain length.\"\"\"\n    if len(word) <= max_len:\n        return word == s\n    return s in word and len(s) <= max_len\ndef g(word='python', max_len=5):\n    if len(word) <= max_len:\n        return word\n    substr_idx = len(word) // 2\n    return word[substr_idx - max_len//2: substr_idx + max_len//2 + 1]\nassert f(g())\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14]) -> bool:\n    \"\"\"Check if n is divisible by all numbers in the list\"\"\"\n    for num in nums:\n        if n % num != 0:\n            return False\n    return True\n\ndef g(nums=[2, 4, 6, 8, 10, 12, 14]):\n    product = 1\n    for num in nums:\n        product *= num\n    return product\n\nassert f(g())\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10, k=5) -> bool:\n    \"\"\"Find the smallest number n such that the sum of its digits, divided by m, is equal to k.\"\"\"\n    digit_sum = sum(int(d) for d in str(n))\n    return digit_sum % m == k\ndef g(m=10, k=5):\n    n = 1\n    while True:\n        if f(n):\n            return n\n        n += 1\nassert f(g())\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a given string can be converted into a list of integers that is equal to a given list of numbers.\"\"\"\n    try:\n        nums = list(map(int, s.split()))\n        return nums == num_list\n    except:\n        return False\ndef g(num_list=[1, 2, 3, 4, 5]):\n    return ' '.join(list(map(str, num_list)))\nassert f(g())\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Determine if a given number is a perfect square.\"\"\"\n    return n >= 0 and int(n**0.5)**2 == n\ndef g():\n    return 25\nassert f(g())\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: list, target=10) -> bool:\n    \"\"\"Given a list of integers, find any two numbers that add up to the target value.\nSample Input:\narr = [1, 2, 3, 4, 5, 6]\ntarget = 10\nSample Output:\n(4, 6)\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(arr=[1, 2, 3, 4, 5, 6], target=10):\n    random.shuffle(arr)\n    return arr\nassert f(g())\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Given a string, find a substring of length target_length that contains all unique characters.\n    The goal is to determine if there exists a substring that satisfies the condition.\"\"\"\n    n = len(s)\n    if n < target_length:\n        return False\n    unique_chars = set()\n    for i in range(n - target_length + 1):\n        substring = s[i:i + target_length]\n        if len(set(substring)) == target_length:\n            return True\n    return False\ndef g(target_length=10):\n    return \"abcdefghijklmnopqrstuvwxyz\"\nassert f(g())\n",
        "idx_generation": 190,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, x=5, y=3) -> bool:\n    \"\"\"Find an integer n such that n is divisible by x and the square root of n is less than y.\"\"\"\n    return n % x == 0 and sqrt(n) < y\n\ndef g(x=5, y=3):\n    n = 1\n    while True:\n        if n % x == 0 and sqrt(n) < y:\n            return n\n        n += 1\nassert f(g())\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=15, b=7, c=3) -> bool:\n    \"\"\"Check if n is a perfect square and the sum of a, b, and c is equal to n\"\"\"\n    return n == a + b + c and int(n ** 0.5) ** 2 == n\ndef g(a=15, b=7, c=3):\n    return a + b + c\nassert f(g())\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, substring='ABC', count=3) -> bool:\n    \"\"\"Find the number of times a given substring appears in a string.\"\"\"\n    return x.count(substring) == count\ndef g(substring='ABC', count=3):\n    return substring * count + 'XYZ'\nassert f(g())\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(area: float, radius=5.0, pi=math.pi) -> bool:\n    \"\"\"Given the area of a circle, determine if the radius is equal to 5.0\"\"\"\n    return area == pi * radius**2\n\ndef g(radius=5.0, pi=math.pi):\n    return pi * radius**2\n\nassert f(g())\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, n=3) -> bool:\n    \"\"\"Check if a given numpy array has a diagonal sum greater than n.\"\"\"\n    diagonal_sum = np.trace(arr)\n    return diagonal_sum > n\n\ndef g(n=3):\n    return np.diag(np.arange(1, n+1))\n\nassert f(g())\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s=\"Hello, World!\") -> bool:\n    \"\"\"Check if a given number is equal to the number of characters in a string\"\"\"\n    return n == len(s)\ndef g(s=\"Hello, World!\"):\n    return len(s)\nassert f(g())\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(ans: float, num=5.576) -> bool:\n    \"\"\"Check if the square root of a number is equal to a given answer rounded to 2 decimal places\"\"\"\n    return math.isclose(math.sqrt(num), ans, abs_tol=0.01)\ndef g(num=5.576):\n    return round(math.sqrt(num), 2)\nassert f(g())\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=7, lower_bound=5) -> bool:\n    \"\"\"Check if a number is within a certain range and divisible by two other numbers.\"\"\"\n    return (n >= lower_bound) and (n % a == 0) and (n % b == 0)\ndef g(a=10, b=7, lower_bound=5):\n    return a * b * lower_bound\nassert f(g())\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if a given character is present in a string\"\"\"\n    return char in s\ndef g(char='a'):\n    return char + 'bcdefghijklmnopqrstuvwxyz'\nassert f(g())\n",
        "idx_generation": 192,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=127, b=264, c=389, d=531) -> bool:\n    \"\"\"Find a number that is divisible by all the given integers.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0 and n % d == 0\ndef g(a=127, b=264, c=389, d=531):\n    return a * b * c * d\nassert f(g())\n",
        "idx_generation": 354,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a row in the matrix that contains the target value.\"\"\"\n    return any((target in row for row in matrix))\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target], [9, 10, 11]]\nassert f(g())\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string that is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n",
        "idx_generation": 192,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_row_sum=15) -> bool:\n    \"\"\"Check if there is a row in the matrix that sums up to the target_row_sum\"\"\"\n    return any((sum(row) == target_row_sum for row in matrix))\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 357,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=10) -> bool:\n    \"\"\"Given a list of integers, check if there exist two numbers whose sum is equal to n\"\"\"\n    return any(n - num in arr for num in arr)\ndef g(n=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string that contains all vowels (a, e, i, o, u) in order.\"\"\"\n    vowels = 'aeiou'\n    index = 0\n    for char in s:\n        if char == vowels[index]:\n            index += 1\n            if index == 5:\n                return True\n    return False\ndef g():\n    return \"aebiodeau\"\nassert f(g())\n",
        "idx_generation": 192,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Determine if the sum of the first n natural numbers is a multiple of m.\"\"\"\n    return sum(range(1, n+1)) % m == 0\ndef g(m=10):\n    return m * (m + 1) // 2\nassert f(g())\n",
        "idx_generation": 358,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if the given number is a prime number\"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if n % prime == 0:\n            return False\n    return True\n\ndef g(primes=[2, 3, 5, 7, 11, 13]):\n    n = primes[-1] + 2\n    while not f(n, primes):\n        n += 2\n    return n\n\nassert f(g())\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date_str: str, format_str='%Y-%m-%d') -> bool:\n    \"\"\"Check if a given date string matches a specific format.\"\"\"\n    try:\n        datetime.strptime(date_str, format_str)\n        return True\n    except ValueError:\n        return False\n\ndef g(format_str='%Y-%m-%d'):\n    return datetime.now().strftime(format_str)\n\nassert f(g())\n",
        "idx_generation": 194,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport math\n\ndef f(n: int, num=6) -> bool:\n    \"\"\"Check if the given number is a power of another number.\"\"\"\n    return math.log(n, num) % 1 == 0\n    \ndef g(num=6):\n    n = random.randint(1, 1000)\n    return num ** n\nassert f(g())\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python', length=6) -> bool:\n    \"\"\"Check if the target string is a substring of s with a length equal to the given value.\"\"\"\n    return target in s and len(target) == length\ndef g(target='python', length=6):\n    return target\nassert f(g())\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if a given string contains a specific substring.\"\"\"\n    return substring in s\n\ndef g(substring='abc'):\n    return 'defabcghi'\n\nassert f(g())\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, n=10, tolerance=1e-6) -> bool:\n    \"\"\"Check if the absolute difference between the square root of x and n is less than the given tolerance.\"\"\"\n    return abs(math.sqrt(x) - n) < tolerance\n\ndef g(n=10, tolerance=1e-6):\n    return n ** 2\n\nassert f(g())\n",
        "idx_generation": 362,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[float], target_sum: float) -> bool:\n    \"\"\"Find a sublist of li that sums up to target_sum\"\"\"\n    for i in range(len(li)):\n        for j in range(i, len(li)):\n            if sum(li[i:j+1]) == target_sum:\n                return True\n    return False\n\ndef g(target_sum: float):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(20), target_sum=20)\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Check if a given date string is in the specified format.\"\"\"\n    try:\n        datetime.strptime(date, format)\n        return True\n    except ValueError:\n        return False\n\ndef g(format='%Y-%m-%d'):\n    return datetime.now().strftime(format)\n\nassert f(g())\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=2.71828, b=7.38906) -> bool:\n    \"\"\"Solve an exponential problem\"\"\"\n    return math.exp(x) == a * b\ndef g(a=2.71828, b=7.38906):\n    return math.log(a * b)\nassert f(g())\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [1, 2, target-3]\n\nassert f(g())\n",
        "idx_generation": 144,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string s contains exactly n occurrences of each character\"\"\"\n    return all([s.count(char) == n for char in set(s)])\ndef g(n=3):\n    return ''.join([chr(ord('a') + i) * n for i in range(26)])\nassert f(g())\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g())\n",
        "idx_generation": 368,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format_string='%Y-%m-%d') -> bool:\n    \"\"\"Check if the given date string matches the specified format.\"\"\"\n    try:\n        datetime.strptime(date, format_string)\n        return True\n    except ValueError:\n        return False\n\ndef g(format_string='%Y-%m-%d'):\n    return datetime.now().strftime(format_string)\n\nassert f(g())\n",
        "idx_generation": 144,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(s: str, pattern='[0-9a-f]+') -> bool:\n    \"\"\"Check if the given string matches the specified pattern\"\"\"\n    return bool(re.fullmatch(pattern, s))\n\ndef g(pattern='[0-9a-f]+'):\n    s = '0a2b4c6d8e'\n    return s\n\nassert f(g())\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return n > 0 and int(n**0.5)**2 == n\ndef g():\n    return 81\nassert f(g())\n",
        "idx_generation": 368,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, div=2) -> bool:\n    \"\"\"Check if a given number is divisible by another number\"\"\"\n    return n % div == 0\ndef g(div=2):\n    return 10 * div\nassert f(g())\n",
        "idx_generation": 144,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if there exists a substring of length n that contains all unique characters in the given string s.\"\"\"\n    return any(len(set(s[i:i+n])) == n for i in range(len(s)-n+1))\ndef g(n=3):\n    return \"abcdefghijklmnopqrstuvwxyz\"[:n]\nassert f(g())\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=100, b=5) -> bool:\n    \"\"\"Find n that when multiplied by b is equal to a\"\"\"\n    return n * b == a\ndef g(a=100, b=5):\n    return a // b\nassert f(g())\n",
        "idx_generation": 370,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(prices: List[float], target=100.0) -> bool:\n    \"\"\"Given a list of prices, check if there are two prices that sum up to a specific target price.\"\"\"\n    for i in range(len(prices)):\n        for j in range(i+1, len(prices)):\n            if prices[i] + prices[j] == target:\n                return True\n    return False\ndef g(target=100.0):\n    return [25.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0]\nassert f(g())\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, string='hello') -> bool:\n    \"\"\"Determine whether a given character n is present in the string.\"\"\"\n    return n in string\n\ndef g(string='hello'):\n    return random.choice(string)\nassert f(g())",
        "idx_generation": 202,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(result: float, a=3, b=4, c=5) -> bool:\n    \"\"\"Find the area of a triangle using Heron's formula.\"\"\"\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return abs(result - area) < 10 ** (-5)\n\ndef g(a=3, b=4, c=5):\n    return sqrt((a + b + c) / 2 * ((a + b + c) / 2 - a) * ((a + b + c) / 2 - b) * ((a + b + c) / 2 - c))\n\nassert f(g())\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sums up to the target sum.\"\"\"\n    return any(target_sum - i in lst for i in lst)\ndef g(target_sum=10):\n    return [target_sum // 2, target_sum // 2]\nassert f(g())\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a='hello', b='world') -> bool:\n    \"\"\"Check if the input string is a concatenation of a and b\"\"\"\n    return x == a + b\ndef g(a='hello', b='world'):\n    return a + b\nassert f(g())\n",
        "idx_generation": 202,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    if x < 2:\n        return False\n    for i in range(2, int(x ** 0.5) + 1):\n        if x % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g())\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, div1=7, div2=13) -> bool:\n    \"\"\"Find a number that is divisible by both div1 and div2\"\"\"\n    return num % div1 == 0 and num % div2 == 0\ndef g(div1=7, div2=13):\n    return div1 * div2\nassert f(g())\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(res: str, target_length=10) -> bool:\n    \"\"\"Find a string of target_length that is composed of randomly selected lowercase letters\"\"\"\n    return len(res) == target_length and res.islower()\ndef g(target_length=10):\n    return ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(target_length))\nassert f(g())\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, r=3) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return math.isqrt(n) ** 2 == n\ndef g(r=3):\n    return r ** 2\nassert f(g())\n",
        "idx_generation": 375,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find an integer that can be expressed as the sum of two different positive perfect squares\"\"\"\n    for i in range(1, int(n**0.5)+1):\n        for j in range(1, int(n**0.5)+1):\n            if i**2 + j**2 == n:\n                return True\n    return False\ndef g():\n    return 10\nassert f(g())\n",
        "idx_generation": 146,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, target='abc') -> bool:\n    \"\"\"Check if the string contains the target substring repeated n times.\"\"\"\n    return target * n in s\ndef g(n=3, target='abc'):\n    return target * n + 'xyz'\nassert f(g())\n",
        "idx_generation": 204,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: datetime, year=2022, month=1, day=1) -> bool:\n    \"\"\"Check if the given date matches the specified year, month, and day\"\"\"\n    return date.year == year and date.month == month and date.day == day\n\ndef g(year=2022, month=1, day=1):\n    return datetime(year, month, day)\n\nassert f(g())\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: list, target=12) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target number.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(target=12):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 147,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a='racecar') -> bool:\n    \"\"\"Determine if a given string is a palindrome.\"\"\"\n    return x == a[::-1]\ndef g(a='racecar'):\n    return a\nassert f(g())\n",
        "idx_generation": 205,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, divisor=5) -> bool:\n    \"\"\"Check if a given number is divisible by a given divisor\"\"\"\n    return num % divisor == 0\ndef g(divisor=5):\n    return 10 * divisor\nassert f(g())\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=7, b=13, c=2) -> bool:\n    \"\"\"Find n that is a multiple of a, b, and c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\n\ndef g(a=7, b=13, c=2):\n    return a * b * c\n\nassert f(g())\n",
        "idx_generation": 147,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport string\n\ndef f(s: str, target=\"abcde\") -> bool:\n    \"\"\"Check if a string contains all the letters from a given target string.\"\"\"\n    return all((c in s for c in target))\ndef g(target=\"abcde\"):\n    return string.ascii_lowercase\nassert f(g())\n",
        "idx_generation": 205,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11]) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n < 2:\n        return False\n    for num in nums:\n        if n % num == 0:\n            return False\n    return True\ndef g():\n    n = 13\n    return n\nassert f(g())\n",
        "idx_generation": 384,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: list, target=15) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    matrix.append(list(range(10, target+1)))\n    return matrix\nassert f(g())\n",
        "idx_generation": 148,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given string contains the specified substring\"\"\"\n    return substring in s\ndef g(substring='abc'):\n    return substring * 2\nassert f(g())\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45], k=2) -> bool:\n    \"\"\"Given a list of integers and an integer k, determine if the sum of the first k elements in the list is divisible by n.\"\"\"\n    return sum(lst[:k]) % n == 0\ndef g(lst=[3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45], k=2):\n    return sum(lst[:k])\nassert f(g())\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=5, lower=-100, seq=[1, -2, 3, -4, 5]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose product is maximal, possibly looping around\"\"\"\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower\ndef g(k=5, lower=-100, seq=[1, -2, 3, -4, 5]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)\nassert f(g())\n",
        "idx_generation": 150,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='world') -> bool:\n    \"\"\"Check if a substring exists in a given string.\"\"\"\n    return substr in s\ndef g(substr='world'):\n    s = \"Hello, world!\"\n    return s\nassert f(g())\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y=1.5) -> bool:\n    \"\"\"Check if the given number is the square root of y.\"\"\"\n    return math.isclose(x ** 2, y)\n\ndef g(y=1.5):\n    return math.sqrt(y)\n\nassert f(g())\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if a list contains a subsequence of length 3 that is an arithmetic progression.\"\"\"\n    perms = permutations(lst, 3)\n    for perm in perms:\n        if perm[1] - perm[0] == perm[2] - perm[1]:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 150,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, word='python', count=2) -> bool:\n    \"\"\"Find the number of occurrences of the word in the string.\"\"\"\n    return string.count(word) >= count\ndef g(word='python', count=2):\n    return 'I love python and python is the best language. Python is amazing!'\nassert f(g())\n",
        "idx_generation": 210,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(x: float, a=2, b=5) -> bool:\n    \"\"\"Check if the given number is the result of raising a to the power of b\"\"\"\n    return x == math.pow(a, b)\ndef g(a=2, b=5):\n    return math.pow(a, b)\nassert f(g())\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(res: int, x=5, y=10) -> bool:\n    \"\"\"Find the sum of all numbers between x and y (inclusive) that are divisible by 3.\n    Sample Input:\n    `5, 10`\n    Sample Output:\n    `18`\"\"\"\n    total = 0\n    for num in range(x, y+1):\n        if num % 3 == 0:\n            total += num\n    return total == res\n\ndef g(x=5, y=10):\n    total = 0\n    for num in range(x, y+1):\n        if num % 3 == 0:\n            total += num\n    return total\n\nassert f(g())\n",
        "idx_generation": 151,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='abc', n=2) -> bool:\n    \"\"\"Find if the substring appears exactly n times in the string\"\"\"\n    return string.count(substr) == n\ndef g(substr='abc', n=2):\n    return substr * n\nassert f(g())\n",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Find a matrix where the sum of each row and each column is the same.\"\"\"\n    n = len(matrix)\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return all(row_sum == col_sum for row_sum in row_sums for col_sum in col_sums)\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, year=2022, month=12, day=31) -> bool:\n    \"\"\"Check if the given date is the last day of the specified year and month\"\"\"\n    return date.year == year and date.month == month and date.day == day\n\ndef g(year=2022, month=12, day=31):\n    date = datetime.date(year, month, day)\n    return date\n\nassert f(g())\n",
        "idx_generation": 151,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring=\"hello\") -> bool:\n    \"\"\"Find if the substring exists in the string.\"\"\"\n    return substring in string\ndef g(string=\"hello world\"):\n    return string\nassert f(g())\n",
        "idx_generation": 212,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, a=2, b=5) -> bool:\n    \"\"\"Check if the given number is a perfect square between a and b (inclusive).\"\"\"\n    if a <= x <= b:\n        sqrt = math.isqrt(x)\n        return sqrt * sqrt == x\n    return False\n\ndef g(a=2, b=5):\n    x = a\n    while x <= b:\n        if math.isqrt(x) ** 2 == x:\n            return x\n        x += 1\n    return None\n\nassert f(g())\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=0, b=100) -> bool:\n    \"\"\"Check if a number is a prime number within a given range.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return a <= n <= b\ndef g(a=0, b=100):\n    for i in range(a, b+1):\n        if i < 2:\n            continue\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return i\nassert f(g())\n",
        "idx_generation": 152,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a='hello', b='world') -> bool:\n    \"\"\"Check if x is a concatenation of a and b\"\"\"\n    return x == a + b\ndef g(a='hello', b='world'):\n    return a + b\nassert f(g())\n",
        "idx_generation": 213,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num_list: List[float], target_sum=10) -> bool:\n    \"\"\"Find a pair of numbers from num_list whose sum is equal to target_sum\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if math.isclose(num_list[i] + num_list[j], target_sum):\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1.5, 2.5, 3.5, 4.5, 5.5]\n\nassert f(g())\n",
        "idx_generation": 391,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=1, b=100) -> bool:\n    \"\"\"Check if a number is a Fibonacci number within a given range.\"\"\"\n    fib_list = [0, 1]\n    while fib_list[-1] < b:\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    return a <= n <= b and n in fib_list\ndef g(a=1, b=100):\n    fib_list = [0, 1]\n    while fib_list[-1] < b:\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    for num in fib_list:\n        if a <= num <= b:\n            return num\nassert f(g())\n",
        "idx_generation": 152,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string.\"\"\"\n    return substring in s\ndef g(substring='abc'):\n    return 'abcdefg', substring\nassert f(*g())\n",
        "idx_generation": 213,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"Find n such that the square root of n is an integer.\"\"\"\n    return math.isqrt(n)**2 == n\n\ndef g():\n    return 144\n\nassert f(g())\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    return n in primes\ndef g(n=67):\n    return n\nassert f(g())\n",
        "idx_generation": 152,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return int(n**0.5)**2 == n\ndef g():\n    return 16\nassert f(g())\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to n\"\"\"\n    return any(n - num in nums for num in nums)\ndef g(nums=[1, 2, 3, 4, 5]):\n    import random\n    r = random.Random(0)\n    return r.choice(nums), r.choice(nums)\nassert f(g()[0])\n",
        "idx_generation": 154,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"Check if a given substring is present in a string.\"\"\"\n    return substr in string\ndef g(substr='python'):\n    return \"I love python programming\"\nassert f(g())\n",
        "idx_generation": 216,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, a=16) -> bool:\n    \"\"\"Check if x is a perfect square and its square root is equal to a.\"\"\"\n    return math.isqrt(x) ** 2 == x and math.isqrt(x) == a\ndef g(a=16):\n    return a ** 2\nassert f(g())\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a submatrix in the matrix that sums up to target\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(j, cols):\n                    submatrix = [matrix[x][y] for x in range(i, k+1) for y in range(j, l+1)]\n                    if sum(submatrix) == target:\n                        return True\n    return False\ndef g():\n    import random\n    r = random.Random(0)\n    return [[r.randint(-10, 10) for _ in range(3)] for _ in range(3)], r.randint(-20, 20)\nassert f(*g())\n",
        "idx_generation": 154,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if a given string contains a specific substring\"\"\"\n    return substring in s\ndef g(substring='abc'):\n    return 'This is a test string with abc in it.'\nassert f(g())\n",
        "idx_generation": 219,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, circumference=31.42) -> bool:\n    \"\"\"Check if the given radius results in a circle with a circumference which is less than or equal to the target\"\"\"\n    return 2 * math.pi * radius <= circumference\n\ndef g(circumference=31.42):\n    return circumference / (2 * math.pi)\n\nassert f(g())\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"Check if the target number is present in any row or column of the given matrix.\"\"\"\n    return any(target in row or target in col for row in matrix for col in zip(*matrix))\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n",
        "idx_generation": 156,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3, target='aaa') -> bool:\n    \"\"\"Check if a target string appears at least k times consecutively in the given string.\"\"\"\n    return s.count(target*k) > 0\ndef g(k=3, target='aaa'):\n    return target*k\nassert f(g())\n",
        "idx_generation": 219,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(result: float, a=2.5, b=5.0) -> bool:\n    \"\"\"Check if the result is equal to the square root of the sum of two numbers squared\"\"\"\n    return result == math.sqrt(a**2 + b**2)\ndef g(a=2.5, b=5.0):\n    return math.sqrt(a**2 + b**2)\nassert f(g())\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=50) -> bool:\n    \"\"\"Check if any row or column in the matrix has a sum equal to target_sum\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(matrix[i][j] for i in range(n)) for j in range(m)]\n    if target_sum in row_sums or target_sum in col_sums:\n        return True\n    return False\n\ndef g(target_sum=50):\n    return [\n        [10, 20, 30],\n        [5, 15, 25],\n        [40, 10, 0]\n    ]\n\nassert f(g())\n",
        "idx_generation": 157,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a palindrome.\"\"\"\n    return str(n) == str(n)[::-1]\ndef g():\n    return 12321\nassert f(g())\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, num=100) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return math.isqrt(n) ** 2 == n\ndef g(num=100):\n    return num ** 2\nassert f(g())\n",
        "idx_generation": 403,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a list that when added together give a certain target sum.\"\"\"\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i+1, n):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, target-1]\nassert f(g())\n",
        "idx_generation": 157,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a word is an isogram (a word that has no repeating letters).\"\"\"\n    return len(set(s)) == len(s)\ndef g():\n    return \"python\"\nassert f(g())\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(r: float, v=100) -> bool:\n    \"\"\"Find a value of theta that satisfies the equation\"\"\"\n    return math.sin(math.radians(v)) == r\ndef g(v=100):\n    return math.sin(math.radians(v))\nassert f(g())\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=100, b=200, c=300) -> bool:\n    \"\"\"Check if x is between the sum of a and b, and the product of b and c.\"\"\"\n    return a + b < x < b * c\ndef g(a=100, b=200, c=300):\n    return (a + b + b * c) // 2\nassert f(g())\n",
        "idx_generation": 157,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, num=3, char='a') -> bool:\n    \"\"\"Check if the character 'char' appears exactly 'num' times in the string 's'.\"\"\"\n    return s.count(char) == num\ndef g(num=3, char='a'):\n    return char * num\nassert f(g())\n",
        "idx_generation": 225,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=10) -> bool:\n    \"\"\"Find the smallest n such that the sum of all numbers from 1 to n (inclusive) is divisible by a and b\"\"\"\n    assert sum(range(1, n + 1)) % a == 0 and sum(range(1, n + 1)) % b == 0\n    return True\ndef g(a=5, b=10):\n    n = 1\n    while True:\n        if sum(range(1, n + 1)) % a == 0 and sum(range(1, n + 1)) % b == 0:\n            return n\n        n += 1\nassert f(g())\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if n is a multiple of any number in the list nums.\"\"\"\n    return any(n % num == 0 for num in nums)\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return random.choice(nums)\n\nassert f(g())\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    return 'racecar'\nassert f(g())\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(n: datetime.datetime, current_year=2022) -> bool:\n    \"\"\"Check if the given datetime is in the future.\"\"\"\n    return n > datetime.datetime(current_year, 1, 1)\ndef g(current_year=2022):\n    return datetime.datetime(current_year+1, 1, 1)\nassert f(g())\n",
        "idx_generation": 412,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if any two numbers in the list add up to the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(length=10, target_sum=10):\n    numbers = [random.randint(1, 10) for _ in range(length)]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, char='a') -> bool:\n    \"\"\"Check if the given character is the first letter of the word.\"\"\"\n    return word[0] == char\n\ndef g(char='a'):\n    return \"apple\"\n\nassert f(g())\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(result: int, num1=10, num2=20) -> bool:\n    \"\"\"Find the least common multiple of `num1` and `num2`\"\"\"\n    return result == math.lcm(num1, num2)\ndef g(num1=10, num2=20):\n    return math.lcm(num1, num2)\nassert f(g())\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\ndef f(n: int, x=0, y=10) -> bool:\n    \"\"\"Check if n is between x and y (inclusive).\"\"\"\n    return x <= n <= y\ndef g(x=0, y=10):\n    return random.randint(x, y)\nassert f(g())\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Palindrome\nGiven a string, determine if it is a palindrome. A palindrome is a string that reads the same\nforwards and backwards.\n\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"level\"\nassert f(g())\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=5, y=7) -> bool:\n    \"\"\"Check if n is a perfect square and divisible by x and y\"\"\"\n    return math.isqrt(n) ** 2 == n and n % x == 0 and n % y == 0\ndef g(x=5, y=7):\n    return x * y * (x * y)\nassert f(g())\n",
        "idx_generation": 415,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if x is present in the list\"\"\"\n    return x in lst\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    random.shuffle(lst)\n    return lst[random.randint(0, len(lst)-1)]\nassert f(g())\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, vowels='aeiou') -> bool:\n    \"\"\"Check if all the vowels in a given string are in the specified list of vowels.\"\"\"\n    return all((c in vowels for c in s.lower() if c in vowels))\ndef g(vowels='aeiou'):\n    return 'Hello World'\nassert f(g())\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(nums: List[int], target=1) -> bool:\n    \"\"\"Check if the greatest common divisor of a list of numbers is equal to the target.\"\"\"\n    return gcd(*nums) == target\n\ndef g(nums: List[int], target=1):\n    return nums\n\nassert f(g([15, 30, 45]), target=15)\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find three numbers in a list that add up to a target sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target_sum:\n                    return True\n    return False\ndef g(target_sum=100):\n    return [25, 50, target_sum - 75]\nassert f(g())\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], prefix='hello') -> bool:\n    \"\"\"Check if any of the strings in the list start with the prefix\"\"\"\n    return any(s.startswith(prefix) for s in strings)\ndef g():\n    return ['hello world', 'hi', 'hey there', 'howdy']\nassert f(g())\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=3, y=2) -> bool:\n    \"\"\"Find a number n such that n is a perfect square and n is divisible by x and y\"\"\"\n    return math.sqrt(n) % 1 == 0 and n % x == 0 and n % y == 0\n\ndef g(x=3, y=2):\n    i = 1\n    while True:\n        num = i ** 2\n        if num % x == 0 and num % y == 0:\n            return num\n        i += 1\n\nassert f(g())\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=15) -> bool:\n    \"\"\"Find three numbers from a list that sum up to the target value.\"\"\"\n    numbers = [1, 2, 3, 4, 5, 6]\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\ndef g(target=15):\n    return target\nassert f(g())\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a string has a length greater than a given number\"\"\"\n    return len(s) > n\ndef g(n=5):\n    return \"Hello World!\"\nassert f(g())\n",
        "idx_generation": 234,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, n=5, list1=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find the result of raising each element of list1 to the power of n and summing them.\"\"\"\n    return result == sum([x ** n for x in list1])\ndef g(n=5, list1=[1, 2, 3, 4, 5]):\n    return sum([x ** n for x in list1])\nassert f(g())\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=4) -> bool:\n    \"\"\"Given a list of integers, find if there are any three elements that sum up to a target value.\nSample Input:\n`[1, 2, 3, 4, 5]`\nSample Output:\n`True`\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target) for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(target=4):\n    return [1, 2, target-3, target-2, target-1]\nassert f(g())\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: datetime, date_format='%Y-%m-%d %H:%M:%S') -> bool:\n    \"\"\"Check if the given date matches the specified format\"\"\"\n    return date.strftime(date_format) == '2021-12-25 00:00:00'\n\ndef g(date_format='%Y-%m-%d %H:%M:%S'):\n    return datetime.strptime('2021-12-25 00:00:00', date_format)\n\nassert f(g())\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(result: float, r=5) -> bool:\n    \"\"\"Find the result of calculating the area of a circle with radius r.\"\"\"\n    return math.isclose(result, math.pi * r**2, rel_tol=1e-9)\ndef g(r=5):\n    return math.pi * r**2\nassert f(g())\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a list that add up to a given target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [2, 8]\nassert f(g())\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Return True if the given character appears in the string more than once.\"\"\"\n    return s.count(char) > 1\ndef g(s='banana'):\n    return s\nassert f(g())\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, r=10.0) -> bool:\n    \"\"\"Check if the given point (x, y) is inside the circle with radius r.\"\"\"\n    distance = math.sqrt(x**2 + y**2)\n    return distance < r\n\ndef g(x=5.0, y=5.0, r=10.0):\n    return x, y, r\n\nassert f(*g())\n",
        "idx_generation": 420,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in a list that add up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n    return (nums, target)\nassert f(*g())\n",
        "idx_generation": 166,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, pattern='ABACADABRA') -> bool:\n    \"\"\"Check if a given pattern is present in the string\"\"\"\n    return pattern in s\ndef g(pattern='ABACADABRA'):\n    return pattern\nassert f(g())\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"Find the sum of the first n numbers divisible by k.\"\"\"\n    return sum([i for i in range(1, n * k + 1) if i % k == 0]) == (n * (n + 1) * k) // 2\ndef g(n: int = 10, k: int = 5):\n    return sum([i for i in range(1, n * k + 1) if i % k == 0])\nassert f(g(), k=5)\n",
        "idx_generation": 420,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"Find n such that it is divisible by all the numbers in the factors list.\"\"\"\n    return all(n % factor == 0 for factor in factors)\ndef g(factors=[2, 3, 5]):\n    n = 1\n    while True:\n        if all(n % factor == 0 for factor in factors):\n            return n\n        n += 1\nassert f(g())\n",
        "idx_generation": 166,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=1000000) -> bool:\n    \"\"\"Find if the given number is a palindrome and greater than m.\"\"\"\n    return str(n) == str(n)[::-1] and n > m\ndef g(m=1000000):\n    return int(str(m)[::-1]) + m\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(radius: float, volume=113.0976) -> bool:\n    \"\"\"Check if the volume of a sphere is equal to the given value.\"\"\"\n    calculated_volume = (4/3) * math.pi * radius ** 3\n    return math.isclose(calculated_volume, volume)\ndef g(volume=113.0976):\n    radius = (volume * (3/4) / math.pi) ** (1/3)\n    return radius\nassert f(g())\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=42) -> bool:\n    \"\"\"Find two distinct numbers in the list that sum up to the target number.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=42):\n    return list(range(1, target))\nassert f(g())\n",
        "idx_generation": 166,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=5) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return string == string[::-1]\ndef g(n=5):\n    return \"radar\"\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(x: int, y: int, z: int, threshold=10) -> bool:\n    \"\"\"Check if the sum of the square roots of x, y, and z is greater than the threshold\"\"\"\n    return math.sqrt(x) + math.sqrt(y) + math.sqrt(z) > threshold\ndef g(x=25, y=16, z=9, threshold=10):\n    return x, y, z\nassert f(*g())\n",
        "idx_generation": 425,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 167,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=2) -> bool:\n    \"\"\"Given a string, find the longest substring that contains only two unique characters.\n    Sample Input:\n    `\"abcabcabc\"`\n    Sample Output:\n    `\"abca\"`\"\"\"\n    return len(s) >= target and all((s[i] != s[i + 1] for i in range(len(s) - 1)))\n    \ndef g(target=2):\n    return \"abca\"\n    \nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: float) -> bool:\n    \"\"\"Check if the given number is a perfect square.\"\"\"\n    return math.isqrt(num) ** 2 == num\n\ndef g():\n    \"\"\"Return a perfect square number.\"\"\"\n    perfect_square = 49\n    return perfect_square\n\nassert f(g())\n",
        "idx_generation": 428,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by all the given divisors\"\"\"\n    for divisor in divisors:\n        if n % divisor != 0:\n            return False\n    return True\n\ndef g(divisors=[2, 3, 5]):\n    return 30\n\nassert f(g())\n",
        "idx_generation": 168,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if any word in the list words contains the target word as a substring.\"\"\"\n    for word in words:\n        if target in word:\n            return True\n    return False\ndef g(target='python'):\n    words = ['hello', 'world', 'pythonista']\n    return words\nassert f(g())\n",
        "idx_generation": 240,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, a=5, b=7) -> bool:\n    \"\"\"Check if the square root of a plus b is equal to x\"\"\"\n    return math.sqrt(a + b) == x\n\ndef g(a=5, b=7):\n    return math.sqrt(a + b)\n\nassert f(g())\n",
        "idx_generation": 428,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find two numbers in the list that multiply to give the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\ndef g(target=100):\n    return [i for i in range(1, target+1)]\nassert f(g())\n",
        "idx_generation": 170,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, char='a', index=0) -> bool:\n    \"\"\"Check if a given character is present at a specific index in the given word.\"\"\"\n    return word[index] == char\ndef g(char='a', index=0):\n    return char * (index + 1)\nassert f(g())\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=math.pi/4) -> bool:\n    \"\"\"Solve a trigonometric problem\"\"\"\n    return math.sin(a) == x\ndef g(a=math.pi/4):\n    return math.sin(a)\nassert f(g())\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a square matrix is symmetric.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 170,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='hello') -> bool:\n    \"\"\"Given a string, check if a substring exists within the string.\n    Return True if the substring is found, otherwise return False.\"\"\"\n    return substr in string\ndef g(string='hello world'):\n    return string\nassert f(g())\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(a: int, b=3, c=2, d=1) -> bool:\n    \"\"\"Find four numbers that satisfy a specific equation.\"\"\"\n    return a + b - c * d == 7\ndef g(b=3, c=2, d=1):\n    a = 7 - b + c * d\n    return a\nassert f(g())\n",
        "idx_generation": 432,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a sublist of integers from nums that sums up to target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nassert f(g())\n",
        "idx_generation": 170,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring=\"\") -> bool:\n    \"\"\"Check if a given string contains a specific substring.\"\"\"\n    return substring in string\ndef g(substring=\"\"):\n    return \"Hello, World!\"\nassert f(g())\n",
        "idx_generation": 242,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(r: float, target_area=12.566370614359172) -> bool:\n    \"\"\"Check if the area of a circle with radius r is close to the target area\"\"\"\n    return abs(math.pi * r**2 - target_area) < 1e-06\n\ndef g(target_area=12.566370614359172):\n    return math.sqrt(target_area / math.pi)\n\nassert f(g())\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if any two numbers in a given list add up to a target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=50):\n    return [10, 20, 30, 40]\nassert f(g())\n",
        "idx_generation": 171,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='', length=0) -> bool:\n    \"\"\"Check if the concatenation of the target string n times is equal to the given string\"\"\"\n    return target * length == s\ndef g(target='', length=0):\n    if length == 0:\n        return ''\n    return target * length\nassert f(g())\n",
        "idx_generation": 242,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Given a list of integers, find two numbers that add up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=7):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g())\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, strings=['banana', 'apple', 'mango', 'grapefruit', 'orange']) -> bool:\n    \"\"\"Check if a given string is a substring of any string in a list.\"\"\"\n    return any((s in string for string in strings))\ndef g(strings=['banana', 'apple', 'mango', 'grapefruit', 'orange']):\n    return strings[0][1:-1]\nassert f(g())\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=7, c=2) -> bool:\n    \"\"\"Find a number n such that n is divisible by a, n is divisible by b, and n is divisible by c.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=5, b=7, c=2):\n    return a * b * c\nassert f(g())\n",
        "idx_generation": 439,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    return any(target - num in arr for num in arr)\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target - 9]\nassert f(g())\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if a given character is the first and last character of the string.\"\"\"\n    return s[0] == char and s[-1] == char\ndef g(char='a'):\n    return f'{char}a{char}'\nassert f(g())\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int, a=1, b=1, c=1) -> bool:\n    \"\"\"Check if three numbers are in a geometric progression\"\"\"\n    return x * b == y * a and y * c == z * b\ndef g(a=1, b=1, c=1):\n    x = 2 * a\n    y = 2 * b\n    z = 2 * c\n    return x, y, z\nassert f(*g())\n",
        "idx_generation": 439,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find the sum of all the elements in a list and check if it matches the given result.\"\"\"\n    return sum(num_list) == result\ndef g(num_list=[1, 2, 3, 4, 5]):\n    return sum(num_list)\nassert f(g())\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, char_count={'a': 2, 'b': 3, 'c': 1}) -> bool:\n    \"\"\"Check if the given word can be formed using the characters and their respective counts\"\"\"\n    return all((word.count(char) == count for char, count in char_count.items()))\ndef g(char_count={'a': 2, 'b': 3, 'c': 1}):\n    return ''.join([char * count for char, count in char_count.items()])\nassert f(g())\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=7, c=11) -> bool:\n    \"\"\"Solve a modular arithmetic problem\"\"\"\n    return (a * b + c) % n == (a * (b % n) + c) % n\ndef g(a=5, b=7, c=11):\n    if c % 2 == 0:\n        return a * b\n    else:\n        return a + b\nassert f(g())\n",
        "idx_generation": 442,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the given number is present in the list.\"\"\"\n    return num in num_list\ndef g(num_list=[1, 2, 3, 4, 5]):\n    return num_list[0]\nassert f(g())\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='puzzle') -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substr.lower() in s.lower()\n\ndef g(substr='puzzle'):\n    s = \"This is a puzzle to solve.\"\n    return s\n\nassert f(g())\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, nums=[4, 9, 16, 25, 36, 49, 64, 81]) -> bool:\n    \"\"\"Check if the sum of the square roots of the given numbers is equal to n.\"\"\"\n    return sum(math.sqrt(num) for num in nums) == n\n\ndef g(nums=[4, 9, 16, 25, 36, 49, 64, 81]):\n    return sum(math.sqrt(num) for num in nums)\n\nassert f(g())\n",
        "idx_generation": 442,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"Find a pair of numbers in the array that multiplies to the target\"\"\"\n    return any(x * y == target for x in arr for y in arr if x != y)\ndef g(target=50):\n    arr = [2, 10, 5, 8, 4, 7]\n    return arr\nassert f(g())\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, c='a', n=5) -> bool:\n    \"\"\"Find a string with a given character c repeated n times\"\"\"\n    return s.count(c) == n and len(s) == n\ndef g(c='a', n=5):\n    return c * n\nassert f(g())\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(area: float, radius=5) -> bool:\n    \"\"\"Check if the area of a circle with a given radius matches the given area\"\"\"\n    return math.isclose(area, math.pi * radius**2, rel_tol=1e-9)\n\ndef g(radius=5):\n    return math.pi * radius**2\n\nassert f(g())\n",
        "idx_generation": 443,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, year=2021, month=12, day=25) -> bool:\n    \"\"\"Check if a given date is on a specific day\"\"\"\n    return date.strftime(\"%Y-%m-%d\") == f\"{year}-{month}-{day}\"\n\ndef g(year=2021, month=12, day=25):\n    return datetime.date(year, month, day)\n\nassert f(g())\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=2) -> bool:\n    \"\"\"Find a substring of a given string that appears consecutively n times.\"\"\"\n    return string in string * n\ndef g(n=2):\n    string = \"hello\"\n    return string\nassert f(g())\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=3, target=27) -> bool:\n    \"\"\"Check if there exists a power of k that equals a specific target number.\"\"\"\n    return k ** n == target\ndef g(k=3, target=27):\n    return int(target ** (1/k))\nassert f(g())\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Given a matrix and an integer n, return True if the sum of the nth row is equal to the sum of the nth column,\nand False otherwise.\"\"\"\n    row_sum = sum(matrix[n])\n    col_sum = sum(row[n] for row in matrix)\n    return row_sum == col_sum\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return 1\nassert f(g())\n",
        "idx_generation": 177,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(palindrome: str) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return palindrome == palindrome[::-1]\ndef g(palindrome='racecar'):\n    return palindrome\nassert f(g())\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, m=4) -> bool:\n    \"\"\"Check if the given number is a power of m.\"\"\"\n    return math.log(n, m).is_integer()\n\ndef g(m=4):\n    return m ** 3\n\nassert f(g())\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Given a sorted 2D matrix of integers matrix and an integer target, determine if target is in the matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    row = 0\n    col = cols - 1\n    while row < rows and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False\ndef g(matrix=[[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 60]], target=16):\n    return matrix, target\nassert f(*g())\n",
        "idx_generation": 178,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if there exists a substring of length k in s that contains all unique characters.\"\"\"\n    for i in range(len(s) - k + 1):\n        if len(set(s[i:i+k])) == k:\n            return True\n    return False\n\ndef g(k=3):\n    return \"abcdefghij\"\n\nassert f(g())\n",
        "idx_generation": 248,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, k=3, n=5) -> bool:\n    \"\"\"Check if x is a multiple of k raised to the power of n.\"\"\"\n    return x % math.pow(k, n) == 0\n\ndef g(k=3, n=5):\n    return math.pow(k, n)\nassert f(g())\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find if there is a pair of numbers in nums that sum up to the target\"\"\"\n    for i, num in enumerate(nums):\n        if target - num in nums[i+1:]:\n            return True\n    return False\n\ndef g(target=15):\n    return [4, 5, 6, 7, 8]\n\nassert f(g())\n",
        "idx_generation": 180,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if all words in the list start with the given prefix\"\"\"\n    return all(word.startswith(prefix) for word in words)\ndef g(prefix='pre'):\n    return ['prefix', 'pretext', 'preserve', 'predator']\nassert f(g())\n",
        "idx_generation": 248,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(x: datetime.datetime, a=2010, b=12, c=25) -> bool:\n    \"\"\"Check if the given datetime is Christmas\"\"\"\n    return x.year == a and x.month == b and x.day == c\n\ndef g(a=2010, b=12, c=25):\n    return datetime.datetime(a, b, c)\n\nassert f(g())\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: list, row_sums=[15, 15, 15], col_sums=[15, 15, 15]) -> bool:\n    \"\"\"Check if a matrix satisfies the given row and column sums\"\"\"\n    return all(sum(row) == row_sum for row, row_sum in zip(matrix, row_sums)) and all(sum(col) == col_sum for col, col_sum in zip(zip(*matrix), col_sums))\ndef g(row_sums=[15, 15, 15], col_sums=[15, 15, 15]):\n    return [[5, 5, 5], [5, 5, 5], [5, 5, 5]]\nassert f(g())\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(month: str, months=['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']) -> bool:\n    \"\"\"Check if the given month is the last month of the year.\"\"\"\n    return month == months[-1]\ndef g(months=['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']):\n    return months[-1]\nassert f(g())\n",
        "idx_generation": 248,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(current_year: int, current_month: int, current_day: int) -> bool:\n    \"\"\"Check if the given date is today's date.\"\"\"\n    today = datetime.now()\n    return current_year == today.year and current_month == today.month and current_day == today.day\n\ndef g():\n    today = datetime.now()\n    return today.year, today.month, today.day\n\nassert f(*g())\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if the given matrix is symmetric along its main diagonal\"\"\"\n    return all((matrix[i][j] == matrix[j][i]) for i in range(len(matrix)) for j in range(len(matrix[0])))\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 183,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substrings=['abc', 'def', 'ghi', 'jkl']) -> bool:\n    \"\"\"Check if a string contains all the given substrings\"\"\"\n    return all((s in string for s in substrings))\ndef g(substrings=['abc', 'def', 'ghi', 'jkl']):\n    string = ''.join(substrings)\n    return string\nassert f(g())\n",
        "idx_generation": 250,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=4, b=7, c=9) -> bool:\n    \"\"\"Check if n can be expressed as a sum of a, b, and c\"\"\"\n    return n == a + b + c\ndef g(a=4, b=7, c=9):\n    return a + b + c\nassert f(g())\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=9) -> bool:\n    \"\"\"Find a target number in the given matrix\"\"\"\n    return any(target in row for row in matrix)\ndef g(target=9):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target]]\nassert f(g())\n",
        "idx_generation": 183,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, s=10) -> bool:\n    \"\"\"Find a number that is divisible by a specific value.\"\"\"\n    return int(x) % s == 0\ndef g(s=10):\n    return str(s) * s\nassert f(g())\n",
        "idx_generation": 250,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, target=100) -> bool:\n    \"\"\"Check if the given number is a perfect square and its square root is equal to the target number\"\"\"\n    return math.isqrt(n) ** 2 == n and math.isqrt(n) == target\n\ndef g(target=100):\n    return target ** 2\n\nassert f(g())\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target\"\"\"\n    return any((s[i] + s[j] == target) for i in range(len(s)) for j in range(i+1, len(s)))\ndef g(target=10):\n    return [2, 4, 6, 8]\nassert f(g())\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n",
        "idx_generation": 250,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime, timedelta\n\ndef f(date: str) -> bool:\n    \"\"\"Find if the given date is a weekday (Monday to Friday)\"\"\"\n    date_obj = datetime.strptime(date, '%Y-%m-%d')\n    return date_obj.weekday() < 5\n\ndef g():\n    return (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')\n\nassert f(g())\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target_sum=21) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target_sum\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            for k in range(j+1, len(x)):\n                if x[i] + x[j] + x[k] == target_sum:\n                    return True\n    return False\n\ndef g(target_sum=21):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 185,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr=\"world\") -> bool:\n    \"\"\"Check if a substring is present in a given string\"\"\"\n    return substr in s\ndef g(substr=\"world\"):\n    return \"Hello, \" + substr + \"!\"\nassert f(g())\n",
        "idx_generation": 250,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst = [2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if the given number n is a multiple of all the numbers in the given list lst\"\"\"\n    return all(n % num == 0 for num in lst)\ndef g(lst = [2, 4, 6, 8, 10]):\n    n = 1\n    for num in lst:\n        n *= num\n    return n\nassert f(g())\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], a=100, b=200, c=300) -> bool:\n    \"\"\"Check if all values in the list are within the range of a, b, and c\"\"\"\n    return all([a <= i <= c for i in x]) and len(set(x)) == len(x)\n    \ndef g(a=100, b=200, c=300):\n    return list(range(a, c+1))\n\nassert f(g())\n",
        "idx_generation": 185,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if the character char is present in the string s\"\"\"\n    return char in s\ndef g(char='a'):\n    return char\nassert f(g())\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 3, 5, 7, 9]) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\ndef g(nums=[1, 3, 5, 7, 9]):\n    n = 2\n    while True:\n        if n not in nums:\n            return n\n        n += 1\nassert f(g())\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if the given year, month, and day form a valid date\"\"\"\n    try:\n        datetime(x, y, z)\n        return True\n    except ValueError:\n        return False\n\ndef g(y=2021, m=1, d=1):\n    return y, m, d\n\nassert f(*g())\n",
        "idx_generation": 185,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], substr=\"python\") -> bool:\n    \"\"\"Check if the given list contains a string that ends with the given substring\"\"\"\n    return any(string.endswith(substr) for string in strings)\ndef g(substr=\"python\"):\n    return [f\"Hello,{substr}\", \"This is a test\", f\"Another {substr} test\"]\nassert f(g())\n",
        "idx_generation": 254,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Find if there exists a subset of size k from the set of integers 1 to n such that the sum of its elements is\ndivisible by k.\"\"\"\n    return n % k == 0\ndef g(k=3):\n    n = k * random.randint(1, 100)\n    return n\nassert f(g())\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], rows=3, cols=3) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag_sum1 = sum(matrix[i][i] for i in range(rows))\n    diag_sum2 = sum(matrix[i][rows-i-1] for i in range(rows))\n    return all(s == row_sums[0] for s in row_sums) and all(s == col_sums[0] for s in col_sums) and diag_sum1 == diag_sum2 == row_sums[0]\n\ndef g(rows=3, cols=3):\n    return [[2, 7, 6],\n            [9, 5, 1],\n            [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 185,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if s contains at least n consecutive uppercase letters\"\"\"\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n            if count >= n:\n                return True\n        else:\n            count = 0\n    return False\ndef g(n=3):\n    return \"HelloWORLD\"\nassert f(g())\n",
        "idx_generation": 254,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nimport math\nfrom typing import*\ndef f(x: float, n=3) -> bool:\n    \"\"\"Determine if x is a power of n.\"\"\"\n    return x > 0 and x == n ** round(math.log(x, n))\ndef g(n=3):\n    return n ** random.randint(1, 10)\nassert f(g())\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=0, max_nums=3, options=[-1, 1, 2]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers from the list that add up to the target value.\"\"\"\n    for num in lst:\n        assert num in options\n    return len(lst) <= max_nums and sum(lst) == target\ndef g(target=0, max_nums=3, options=[-1, 1, 2]):\n    from itertools import combinations\n    for n in range(max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"Check if a substring appears n times in a string\"\"\"\n    return s.count(s[:n]) == n\ndef g(n=2):\n    s = \"hellohello\"\n    return s\nassert f(g())\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int, digits=5, threshold=0.5) -> bool:\n    \"\"\"Check if the square root of a number is greater than a threshold,\n    rounded to a certain number of digits\"\"\"\n    return round(math.sqrt(num), digits) > threshold\n\ndef g(digits=5, threshold=0.5):\n    return math.pow((threshold + 1), 2)\n    \nassert f(g())\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10, limit=100) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target number\"\"\"\n    return any(num1 + num2 == target for num1 in nums for num2 in nums if num1 != num2 and num1 + num2 <= limit)\ndef g(target=10, limit=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 187,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a', count=3) -> bool:\n    \"\"\"Find a string that contains at least 'count' occurrences of 'char'\"\"\"\n    return s.count(char) >= count\ndef g(char='a', count=3):\n    return char * count + 'b'\nassert f(g())\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int, x=17) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return math.isqrt(num) ** 2 == num\ndef g(x=17):\n    return x ** 2\nassert f(g())\n",
        "idx_generation": 474,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Check if the sum of the first n elements in a list is divisible by n.\"\"\"\n    return sum(lst[:n]) % n == 0\ndef g(lst=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return len(lst)\nassert f(g())\n",
        "idx_generation": 190,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='fix') -> bool:\n    \"\"\"Check if all words in the given list start with the prefix and end with the suffix.\nReturn True if all words satisfy the condition, False otherwise.\n\"\"\"\n    return all(word.startswith(prefix) and word.endswith(suffix) for word in words)\ndef g(prefix='pre', suffix='fix'):\n    return [prefix + 'word' + suffix, prefix + 'another' + suffix, prefix + 'example' + suffix]\nassert f(g())\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric\"\"\"\n    return all((matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[0]))))\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], sum_target=10) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that sum up to the sum_target\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for x in range(i, len(matrix)):\n                for y in range(len(matrix[x])):\n                    if i == x and j == y:\n                        continue\n                    if matrix[i][j] + matrix[x][y] == sum_target:\n                        return True\n    return False\ndef g(sum_target=10):\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix\nassert f(g())\n",
        "idx_generation": 190,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], n=3, letter='a') -> bool:\n    \"\"\"Find n words in the list that start with the letter 'letter'.\"\"\"\n    return len([word for word in words if word.startswith(letter)]) == n\ndef g(n=3, letter='a'):\n    return ['apple' for _ in range(n)]\nassert f(g())\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, d=10, result=0.0) -> bool:\n    \"\"\"Check if n is a perfect square, and its square root is less than or equal to d\"\"\"\n    return math.isqrt(n)**2 == n and math.isqrt(n) <= d\n\ndef g(d=10):\n    i = 1\n    while True:\n        if math.isqrt(i)**2 == i and math.isqrt(i) <= d:\n            return i\n        i += 1\n\nassert f(g())\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_product=24) -> bool:\n    \"\"\"Check if there exists three numbers in the list whose product is equal to the target product\"\"\"\n    return any((n1 * n2 * n3 == target_product for i, n1 in enumerate(numbers) for j, n2 in enumerate(numbers[i+1:]) for n3 in numbers[j+1:]))\ndef g(target_product=24):\n    return [2, 3, 4, 6, 8]\nassert f(g())\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, c='e') -> bool:\n    \"\"\"Check if a specific character is present in a word.\"\"\"\n    return c in word\ndef g(c='e'):\n    return 'hello'\nassert f(g())\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(n: int, x=10, result=0) -> bool:\n    \"\"\"Check if n is a power of x\"\"\"\n    return x**round(math.log(n, x)) == n\n\ndef g(x=10):\n    i = 1\n    while True:\n        if x**round(math.log(i, x)) == i:\n            return i\n        i += 1\n\nassert f(g())\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(l: List[int]) -> bool:\n    \"\"\"Find a sublist of l that sums to 0.\"\"\"\n    n = len(l)\n    for i in range(n):\n        for j in range(i, n):\n            if sum(l[i:j+1]) == 0:\n                return True\n    return False\ndef g():\n    return [1, -1]\nassert f(g())\n",
        "idx_generation": 192,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='apple') -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substring in s\ndef g(substring='apple'):\n    return \"I love eating \" + substring + \"s\"\nassert f(g())\n",
        "idx_generation": 258,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(result: float, x=3.14) -> bool:\n    \"\"\"Find the value of x that when rounded to the nearest integer is equal to result.\"\"\"\n    return math.isclose(round(x), result)\ndef g(x=3.14):\n    return round(x)\nassert f(g())\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=6) -> bool:\n    \"\"\"Find a sublist of numbers that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            sublist = nums[i:j+1]\n            if sum(sublist) == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=6):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 193,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the reverse of the string s is equal to the string itself\"\"\"\n    return s == s[::-1]\n\ndef g(s=\"radar\"):\n    return s\n\nassert f(g())\n",
        "idx_generation": 260,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.datetime, year=2022, month=4, day=1) -> bool:\n    \"\"\"Check if the given date is the first day of a specified month and year\"\"\"\n    return date.year == year and date.month == month and date.day == day\n\ndef g(year=2022, month=4, day=1):\n    return datetime.datetime(year, month, day)\n\nassert f(g())\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], n=0) -> bool:\n    \"\"\"Check if the maximum value in arr is less than or equal to n\"\"\"\n    return max(arr) <= n\n\ndef g(n=0):\n    return list(range(n+1))\n\nassert f(g())\n",
        "idx_generation": 194,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_substring: str = 'abc') -> bool:\n    \"\"\"Find a substring in the given string that matches the target substring.\"\"\"\n    return target_substring in s\n\ndef g(target_substring: str = 'abc'):\n    s = 'xyz' + target_substring + '123'\n    return s\n\nassert f(g())\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=3, b=7, c=11) -> bool:\n    \"\"\"Check if x is divisible by a, b, and c\"\"\"\n    return x % a == 0 and x % b == 0 and x % c == 0\ndef g(a=3, b=7, c=11):\n    return a * b * c\nassert f(g())\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find a pair of numbers in the list that sums up to the target.\"\"\"\n    return any((x + y == target) for x in nums for y in nums if x != y)\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g(), 10)\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s=\"Hello, World!\") -> bool:\n    \"\"\"Check if the letter 'o' appears n times in the string s\"\"\"\n    return s.count('o') == n\ndef g(s=\"Hello, World!\"):\n    return s.count('o')\nassert f(g())\n",
        "idx_generation": 265,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=100, b=2) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return x == a ** b and x >= a\ndef g(a=100, b=2):\n    return a ** b\nassert f(g())\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[float], threshold=5.0) -> bool:\n    \"\"\"Check if the average of a list of numbers is above a certain threshold.\"\"\"\n    return sum(x) / len(x) > threshold\n\ndef g(threshold=5.0):\n    return [6.0, 7.0, 8.0, 9.0, 10.0]\n\nassert f(g())\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='fix', count=3) -> bool:\n    \"\"\"Find a list of count words from words that start with prefix and end with suffix\"\"\"\n    return len([word for word in words if word.startswith(prefix) and word.endswith(suffix)]) >= count\ndef g(prefix='pre', suffix='fix', count=3):\n    return [prefix+'_'+str(i)+'_'+suffix for i in range(10)]\nassert f(g())\n",
        "idx_generation": 265,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(is_prime: bool, n=73):\n    \"\"\"Check if a number is prime\"\"\"\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(n=73):\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\nassert f(g())\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, day_of_week='Monday') -> bool:\n    \"\"\"Check if the given date falls on a specific day of the week.\"\"\"\n    return date.strftime(\"%A\") == day_of_week\n\ndef g(day_of_week='Monday'):\n    today = datetime.date.today()\n    while today.strftime(\"%A\") != day_of_week:\n        today += datetime.timedelta(days=1)\n    return today\n\nassert f(g())\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='world') -> bool:\n    \"\"\"Check if the substring exists in the string\"\"\"\n    return substring in string\ndef g(substring='world'):\n    return \"Hello, world!\"\nassert f(g())\n",
        "idx_generation": 266,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: float, a=19, b=7) -> bool:\n    \"\"\"Perform a division operation\"\"\"\n    return result == a / b\ndef g(a=19, b=7):\n    return a / b\nassert f(g())\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5, row=2, col=3) -> bool:\n    \"\"\"Check if the target value is present in the given row and column of the matrix\"\"\"\n    return matrix[row][col] == target\ndef g(target=5, row=2, col=3):\n    matrix = [[i+j for j in range(5)] for i in range(5)]\n    return matrix\nassert f(g())\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(s: str, substr=\"Python\", index=6) -> bool:\n    \"\"\"Check if a given substring exists in a string at a specific index\"\"\"\n    return s[index:index+len(substr)] == substr\ndef g(substr=\"Python\", index=6):\n    return \"I love Python programming\"[:index] + substr + \" programming\"\nassert f(g())\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(nums: List[int], target_gcd=100) -> bool:\n    \"\"\"Check if the greatest common divisor of the numbers in the list nums is equal to the target_gcd.\"\"\"\n    return all(gcd(num, target_gcd) == target_gcd for num in nums)\n\ndef g(target_gcd=100):\n    return [target_gcd] * 10\n\nassert f(g())\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Given a matrix of numbers, find any two numbers that add up to a target number\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[0])):\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return True\n    return False\ndef g(target=50):\n    return [[1, 2], [target - 1, 48]]\nassert f(g())\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(string: str, target='python') -> bool:\n    \"\"\"Find a permutation of the characters in the string that matches the target\"\"\"\n    perms = permutations(string)\n    for perm in perms:\n        if ''.join(perm) == target:\n            return True\n    return False\n\ndef g(target='python'):\n    return ''.join(sorted(target))\n\nassert f(g())\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, year=2022, month=3, day=14) -> bool:\n    \"\"\"Check if the given date is in the future.\"\"\"\n    return dt > datetime.datetime(year, month, day)\ndef g(year=2022, month=3, day=14):\n    return datetime.datetime(year, month, day) + datetime.timedelta(days=1)\nassert f(g())\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if n is the average of two distinct numbers in the list\"\"\"\n    return any([(nums[i] + nums[j]) / 2 == n for i in range(len(nums)) for j in range(len(nums)) if i != j])\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return sum(nums) / len(nums)\nassert f(g())\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, pattern='abc') -> bool:\n    \"\"\"Check if a given string contains a specific pattern.\"\"\"\n    return pattern in string\n\ndef g(pattern='abc'):\n    return \"abcdefg\"\n\nassert f(g())\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x: float, y: float, z: float, m=100) -> bool:\n    \"\"\"Find a number that satisfies the equation (x + y) - z = n\"\"\"\n    return (x + y) - z == n\ndef g(x=10, y=5, z=5, m=100):\n    return x + y - z\nassert f(g(), x=10, y=5, z=5)\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=15, k=3) -> bool:\n    \"\"\"Find if there exists a combination of k numbers in the list that add up to the target value.\"\"\"\n    from itertools import combinations\n    for c in combinations(nums, k):\n        if sum(c) == target:\n            return True\n    return False\ndef g(target=15, k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, day_of_week='Saturday') -> bool:\n    \"\"\"Check if the given date falls on a specific day of the week.\"\"\"\n    return dt.strftime('%A') == day_of_week\n\ndef g(day_of_week='Saturday'):\n    return datetime.datetime.strptime('2022-01-01', '%Y-%m-%d')\n\nassert f(g())\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, days=7) -> bool:\n    \"\"\"Check if the date is a specific number of days ahead of today\"\"\"\n    today = datetime.date.today()\n    future_date = today + datetime.timedelta(days=days)\n    return date == future_date\n\ndef g(days=7):\n    today = datetime.date.today()\n    future_date = today + datetime.timedelta(days=days)\n    return future_date\n\nassert f(g())\n",
        "idx_generation": 497,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=1234) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=1234):\n    return [target // 2, target // 2]\nassert f(g())\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string contains exactly n number of vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count == n\n\ndef g(n=3):\n    return 'a' * n\n\nassert f(g())\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a number that is divisible by 3, 5, and 7, but not by 2 or 4.\"\"\"\n    return n % 3 == 0 and n % 5 == 0 and n % 7 == 0 and n % 2 != 0 and n % 4 != 0\ndef g():\n    return 105\nassert f(g())\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: list, num=7) -> bool:\n    \"\"\"Check if a number is present in a specific pattern in a list\"\"\"\n    return any(all(lst[i+j] == num for j in range(3)) for i in range(len(lst)-2))\n\ndef g(num=7):\n    lst = [random.choice([num, random.randint(1, 10)]) for _ in range(10)]\n    return lst\n\nassert f(g())\n",
        "idx_generation": 198,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if the word is present in the string\"\"\"\n    return word in s\ndef g(word='python'):\n    return \"I love python programming\"\nassert f(g())\n",
        "idx_generation": 271,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(s: str, target=100) -> bool:\n    \"\"\"Find the largest integer that, when squared, is less than or equal to the target\"\"\"\n    sqrt_target = math.sqrt(target)\n    return int(sqrt_target) ** 2 == target\n\ndef g(target=100):\n    return target\n\nassert f(g())\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers from the list that adds up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(1, len(nums) + 1) for comb in combinations(nums, r))\ndef g(target=100):\n    nums = [1, 20, 3, 45, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    return nums\nassert f(g())\n",
        "idx_generation": 198,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if the substring exists in the given string s\"\"\"\n    return substr in s\ndef g(substr='python'):\n    s = \"I love programming in python!\"\n    return s\nassert f(g())\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from the list that sums up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "idx_generation": 198,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], n=3) -> bool:\n    \"\"\"Check if the first n words in the list are all palindromes\"\"\"\n    assert len(words) >= n\n    return all(word == word[::-1] for word in words[:n])\ndef g(n=3):\n    words = ['madam', 'racecar', 'level', 'python', 'radar']\n    return words[:n]\nassert f(g())\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Given a list of integers, find if there exists three numbers in the list such that their sum is equal to 0\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == 0 for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g():\n    return [1, 2, -3, 4, -1, 0]\nassert f(g())\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub='hello') -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return sub in s\ndef g(sub='hello'):\n    return 'This is a string that contains the word ' + sub\nassert f(g())\n",
        "idx_generation": 274,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(d: datetime, y=2022, m=1, day=1) -> bool:\n    \"\"\"Check if a given date is the start of a new year\"\"\"\n    return d.year == y and d.month == m and d.day == day\n\ndef g(y=2022, m=1, day=1):\n    return datetime(y, m, day)\n\nassert f(g())\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target='hello') -> bool:\n    \"\"\"Check if the given string is a palindrome and contains the target word.\"\"\"\n    return string == string[::-1] and target in string\n\ndef g(target='hello'):\n    return target + target[::-1]\n\nassert f(g())\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x=15, y=7) -> bool:\n    \"\"\"Check if n is a multiple of both x and y.\"\"\"\n    return n % x == 0 and n % y == 0\ndef g(x=15, y=7):\n    return x * y\nassert f(g())\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: str, text=\"hello\", n=3) -> bool:\n    \"\"\"Find the result of repeating the text n times\"\"\"\n    return result == text * n\n\ndef g(text=\"hello\", n=3):\n    return text * n\n\nassert f(g())\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=5, lower_bound=10) -> bool:\n    \"\"\"Check if n is a multiple of k and greater than or equal to lower_bound.\"\"\"\n    return n % k == 0 and n >= lower_bound\ndef g(k=5, lower_bound=10):\n    return k * lower_bound\nassert f(g())\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub_str='abba', num_sub_str=2) -> bool:\n    \"\"\"Find num_sub_str occurrences of sub_str in s.\"\"\"\n    return s.count(sub_str) == num_sub_str\ndef g(sub_str='abba', num_sub_str=2):\n    return sub_str * num_sub_str\nassert f(g())\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Determine whether a given number n is present in the list of numbers.\"\"\"\n    return n in nums\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return random.choice(nums)\nassert f(g())\n",
        "idx_generation": 202,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Find a string that contains all the substrings in any order\"\"\"\n    return all((sub in s for sub in substrings))\ndef g(substrings=['apple', 'banana', 'cherry']):\n    return 'bananaapplecherry'\nassert f(g())\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=5, b=7, c=12) -> bool:\n    \"\"\"Check if the input number is divisible by the sum of a, b, and c\"\"\"\n    return x % (a + b + c) == 0\ndef g(a=5, b=7, c=12):\n    return (a + b + c) * 3\nassert f(g())\n",
        "idx_generation": 202,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the given string contains all the characters of the target string in order\"\"\"\n    target_index = 0\n    for char in s:\n        if char == target[target_index]:\n            target_index += 1\n        if target_index == len(target):\n            return True\n    return False\ndef g(target='python'):\n    return ''.join([c for c in target] * 3)\nassert f(g())\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Find a number that is a prime factor of the given number n.\"\"\"\n    return any(n % num == 0 for num in nums)\ndef g(nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return nums[0]\nassert f(g())\n",
        "idx_generation": 202,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, word='python') -> bool:\n    \"\"\"Given a sentence, check if a specific word is present.\"\"\"\n    return word in sentence.lower().split()\ndef g():\n    sentence = \"I love Python programming language.\"\n    word = \"python\"\n    return sentence, word\nassert f(*g())\n",
        "idx_generation": 281,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=10):\n    return lst\nassert f(g())\n",
        "idx_generation": 204,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], char='e') -> bool:\n    \"\"\"Check if any word in the list contains a specific character.\"\"\"\n    return any((char in word) for word in words)\ndef g(char='e'):\n    return ['apple', 'banana', 'cherry']\nassert f(g())\n",
        "idx_generation": 283,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, lst=[4, 9, 16, 25, 36], target=2) -> bool:\n    \"\"\"Check if the target is a perfect square root of any number in the list.\"\"\"\n    return any(math.isqrt(num) == target for num in lst)\ndef g(lst=[4, 9, 16, 25, 36], target=2):\n    return lst\nassert f(g())\n",
        "idx_generation": 204,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], n=5, prefix='pre') -> bool:\n    \"\"\"Check if there are n or more words in the list that start with a given prefix\"\"\"\n    return len([word for word in words if word.startswith(prefix)]) >= n\ndef g(n=5, prefix='pre'):\n    return ['prefix' + str(i) for i in range(n)]\nassert f(g())\n",
        "idx_generation": 283,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=546576, b=89765) -> bool:\n    \"\"\"Check if the sum of two integers is equal to a given number.\"\"\"\n    return x + a == b\ndef g(a=546576, b=89765):\n    return b - a\nassert f(g())\n",
        "idx_generation": 205,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if a word is a substring of any of the words in the list.\"\"\"\n    return any((w in s for w in words))\ndef g(words=['apple', 'banana', 'cherry']):\n    return ' '.join(words)\nassert f(g())\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=3) -> bool:\n    \"\"\"Check if there exists a subarray in arr whose sum is equal to target\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(arr[i:j]) == target:\n                return True\n    return False\n\ndef g(target=3):\n    return [1, 2, target]\n\nassert f(g())\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char_list=['a', 'b', 'c', 'd', 'e']) -> bool:\n    \"\"\"Check if a string contains all the characters in a given list.\"\"\"\n    return all(char in s for char in char_list)\ndef g(char_list=['a', 'b', 'c', 'd', 'e']):\n    return ''.join(char_list)\nassert f(g())\n",
        "idx_generation": 286,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray) -> bool:\n    \"\"\"Check if all elements in the given numpy array are positive.\"\"\"\n    return np.all(arr > 0)\n\ndef g():\n    \"\"\"Return a 3x3 numpy array with all elements set to 1.\"\"\"\n    return np.ones((3, 3))\n\nassert f(g())\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if a given string contains a specific substring.\"\"\"\n    return target in s\ndef g(s='I love python!', target='python'):\n    return s\nassert f(g()) == True\n",
        "idx_generation": 286,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(deck: List[int], target=13) -> bool:\n    \"\"\"Given a deck of cards represented by a list of integers, determine if it is possible to select a subset of cards from the deck that sum up to the target number.\n    Sample Input:\n    [1, 3, 5, 7, 9, 11]\n    Sample Output:\n    True\"\"\"\n    n = len(deck)\n    for i in range(1, 2**n):\n        subset = [deck[j] for j in range(n) if (i & (1 << j))]\n        if sum(subset) == target:\n            return True\n    return False\n\ndef g(target=13):\n    deck = [1, 3, 5, 7, 9, 11]\n    random.shuffle(deck)\n    return deck\n\nassert f(g())\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, palindrome=1221) -> bool:\n    \"\"\"Check if the number is a palindrome\"\"\"\n    return str(num) == str(num)[::-1]\n\ndef g(palindrome=1221):\n    return 11\n\nassert f(g())\n",
        "idx_generation": 286,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], product=24) -> bool:\n    \"\"\"Find four integers that multiply to give the product.\"\"\"\n    return any((i * j * k * l == product for i in nums for j in nums for k in nums for l in nums))\ndef g(product=24):\n    return [1, 2, 3, product // 6]\nassert f(g())\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, char='a', count=3) -> bool:\n    \"\"\"Given a word and a character, find if the character appears at least count number of times in the word\"\"\"\n    return word.count(char) >= count\n\ndef g(word='banana', char='a', count=3):\n    return word\n\nassert f(g())\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=7) -> bool:\n    \"\"\"Check if a target value exists in a 2D matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=7):\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(s: str, pattern=r'^[a-zA-Z]+$') -> bool:\n    \"\"\"Find if the given string matches the specified pattern, which only allows alphabets.\"\"\"\n    return re.match(pattern, s) is not None\n\ndef g(pattern=r'^[a-zA-Z]+$'):\n    s = \"HelloWorld\"\n    return s\n\nassert f(g())\n",
        "idx_generation": 290,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target number can be obtained by adding any three numbers from the given list\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 209,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(d: datetime, format='%Y-%m-%d %H:%M:%S') -> bool:\n    \"\"\"Check if the formatted datetime string matches the expected format\"\"\"\n    return d.strftime(format) == '2022-12-31 23:59:59'\n\ndef g(format='%Y-%m-%d %H:%M:%S'):\n    return datetime.strptime('2022-12-31 23:59:59', format)\n\nassert f(g())\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=4) -> bool:\n    \"\"\"You are given a string consisting of only 'a's and 'b's. Find the length of the longest substring that contains\nan equal number of 'a's and 'b's.\nSample Input:\n`\"aabbbb\"`\nSample Output:\n`4`\"\"\"\n    count_a = 0\n    count_b = 0\n    max_length = 0\n    for c in s:\n        if c == 'a':\n            count_a += 1\n        elif c == 'b':\n            count_b += 1\n        if count_a == count_b:\n            max_length = max(max_length, count_a + count_b)\n    return max_length >= target\ndef g():\n    return \"aabbbb\"\nassert f(g())\n",
        "idx_generation": 210,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(t: str, s='abcdefg') -> bool:\n    \"\"\"Given a string s, convert it to a string t by reversing the order of the characters and converting all\n    lowercase letters to uppercase.\n    Sample Input:\n    s = \"abcdefg\"\n    Sample Output:\n    t = \"GFEDCBA\"\n    \"\"\"\n    i = 0\n    for c in s[::-1]:\n        if c.isalpha() and c.islower():\n            assert t[i] == c.upper(), f'expecting `{c.upper()}` at position {i}'\n            i += 1\n        else:\n            assert t[i] == c, f'expecting `{c}` at position {i}'\n            i += 1\n    return i == len(t)\ndef g(s='abcdefg'):\n    return s[::-1].upper()\nassert f(g())",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=10) -> bool:\n    \"\"\"You are given a positive integer. Determine if it can be expressed as the sum of two cubes in two different ways.\nSample Input:\n`1729`\nSample Output:\n`True`\"\"\"\n    for i in range(1, int(n**(1/3))+1):\n        cube1 = i**3\n        for j in range(i, int(n**(1/3))+1):\n            cube2 = j**3\n            if cube1 + cube2 == n and cube1 != cube2:\n                return True\n    return False\ndef g():\n    return 1729\nassert f(g())\n",
        "idx_generation": 210,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='cdaotg') -> bool:\n    \"\"\"Find if the string contains the given substring in a palindrome-like pattern, e.g., 'dcattodc' for 'cat'\"\"\"\n    return s == s[::-1] and s.find(substr) != -1\ndef g(substr='cdaotg'):\n    return substr + substr[::-1]\nassert f(g())\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find three distinct integers in the array that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [1, 2, target-3]\n\nassert f(g())\n",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"Check if the substring is present in the string in reverse order\"\"\"\n    return substr[::-1] in string\n\ndef g(substr='python'):\n    return 'nohtyp'\n\nassert f(g())\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray in the array whose sum is divisible by k\"\"\"\n    prefix_sum = 0\n    mod_sum = [0] * k\n    for num in arr:\n        prefix_sum += num\n        mod_sum[prefix_sum % k] += 1\n    return mod_sum[0] > 1 or any([count > 1 for count in mod_sum[1:]])\n\ndef g(n=10, k=3):\n    arr = [i for i in range(1, n+1)]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 212,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=10, m=4) -> bool:\n    \"\"\"Check if the string contains the same character repeated n times consecutively, and the length of the string is divisible by m.\"\"\"\n    return all(s[i] == s[i+1] for i in range(len(s)-1)) and len(s) % m == 0\ndef g(n=10, m=4):\n    return 'a' * n * m\nassert f(g())\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the array that add up to the target value\"\"\"\n    return any([(arr[i] + arr[j] == target) for i in range(len(arr)) for j in range(i+1, len(arr))])\ndef g(target=10):\n    arr = [2, 4, 6, 8]\n    return arr\nassert f(g())\n",
        "idx_generation": 212,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit', 'honeydew', 'imbe', 'jackfruit']) -> bool:\n    \"\"\"Check if the given string contains all the substrings in the list.\"\"\"\n    return all(sub in s for sub in substrings)\ndef g(substrings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit', 'honeydew', 'imbe', 'jackfruit']):\n    return ''.join(substrings)\nassert f(g())\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: int, n=5) -> bool:\n    \"\"\"Check if x is a multiple of n and is an even number\"\"\"\n    return x % n == 0 and x % 2 == 0\ndef g(n=5):\n    return random.randint(1, 100) * n * 2\nassert f(g())\n",
        "idx_generation": 213,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string that is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(s: str, n=1) -> bool:\n    \"\"\"Check if the sum of the ASCII values of the string is equal to n\"\"\"\n    ascii_sum = sum(ord(char) for char in s)\n    return ascii_sum == n\n\ndef g(n=1):\n    return chr(n)\n\nassert f(g())\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python', case_sensitive=True) -> bool:\n    \"\"\"Check if a string contains a target word.\"\"\"\n    if case_sensitive:\n        return target in s\n    else:\n        return target.lower() in s.lower()\ndef g(target='python', case_sensitive=True):\n    return target if case_sensitive else target.upper()\nassert f(g())\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=15) -> bool:\n    \"\"\"Check if the sum of a list of numbers is equal to a target number.\"\"\"\n    return sum(nums) == target\n\ndef g(nums=[1, 2, 3, 4, 5], target=15):\n    random.shuffle(nums)\n    return nums\n\nassert f(g())\n",
        "idx_generation": 215,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, vowels='aeiou') -> bool:\n    \"\"\"Check if all vowels in the string are in the given set of vowels\"\"\"\n    return all(char in vowels for char in s if char.lower() in vowels)\ndef g(vowels='aeiou'):\n    return 'hello'\nassert f(g())\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, pattern='abc') -> bool:\n    \"\"\"Find if the given string contains the given pattern as a substring.\"\"\"\n    return pattern in s\n\ndef g(s='abcdefg', pattern='abc'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 215,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='abc', position=0) -> bool:\n    \"\"\"Check if the substring is present at the specified position in the string.\"\"\"\n    return string.find(substr, position) == position\ndef g(substr='abc', position=0):\n    return \"abcdefg\"\nassert f(g())\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if a given matrix is symmetric.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 216,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, s=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']) -> bool:\n    \"\"\"Check if the string x consists of only lowercase alphabets in the list s\"\"\"\n    return all([c in s for c in x])\ndef g(s=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']):\n    return ''.join(s)\nassert f(g())\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in a list that sum up to a given target.\"\"\"\n    return any([nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))])\ndef g(target=10):\n    return [1, 9]\nassert f(g())\n",
        "idx_generation": 216,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring=\"python\") -> bool:\n    \"\"\"Check if the substring appears in the given string.\"\"\"\n    return substring in string\ndef g(substring=\"python\"):\n    return \"I love python programming!\"\nassert f(g())\n",
        "idx_generation": 306,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(d: datetime.date, y=2022, m=2, dt=18) -> bool:\n    \"\"\"Check if the given date is the same as the specified year, month, and day.\"\"\"\n    return d.year == y and d.month == m and d.day == dt\n\ndef g(y=2022, m=2, dt=18):\n    return datetime.date(y, m, dt)\n\nassert f(g())\n",
        "idx_generation": 219,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Given a string s and an integer n, check if there exists a substring of s with length n that contains only vowels (a, e, i, o, u).\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(s) - n + 1):\n        substring = s[i:i+n]\n        if all(char in vowels for char in substring):\n            return True\n    return False\ndef g(n=3):\n    return \"aeiou\" * (n // 5) + \"aeiou\"[:n % 5]\nassert f(g())\n",
        "idx_generation": 306,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(l: list, n=5) -> bool:\n    \"\"\"Check if the given list contains exactly n distinct even numbers.\"\"\"\n    return len(l) == n and all(num % 2 == 0 for num in l) and len(set(l)) == n\n\ndef g(n=5):\n    l = []\n    while len(l) < n:\n        num = random.randint(0, 100)\n        if num % 2 == 0 and num not in l:\n            l.append(num)\n    return l\n\nassert f(g())\n",
        "idx_generation": 219,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='world') -> bool:\n    \"\"\"Check if a given substring is present in a string.\"\"\"\n    return substr in s\ndef g(substr='world'):\n    return \"Hello, world!\"\nassert f(g())\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from a list that add up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 219,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='world') -> bool:\n    \"\"\"Check if the given substring exists in the string\"\"\"\n    return substring in s\ndef g(substring='world'):\n    return \"Hello, \" + substring + \"!\"\nassert f(g())\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[10, 20, 30, 40, 50]) -> bool:\n    \"\"\"Check if the given number n is present in the list lst.\"\"\"\n    return n in lst\ndef g(lst=[10, 20, 30, 40, 50]):\n    return lst[0]\nassert f(g())\n",
        "idx_generation": 220,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(t: str, s='football', target='fbl') -> bool:\n    \"\"\"Given a target string and a source string, find if the source string contains all the characters of the target string in order.\nSample Input:\nt = \"fbl\"\ns = \"football\"\nSample Output:\nTrue\"\"\"\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return True\ndef g(s='football', target='fbl'):\n    return ''.join([c for c in s if c in target])\nassert f(g())\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"Check if a number is divisible by all the prime numbers in a given list.\"\"\"\n    return all(n % p == 0 for p in primes)\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19]):\n    n = 1\n    for p in primes:\n        n *= p\n    return n\nassert f(g())\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target_char='a') -> bool:\n    \"\"\"Check if a given character is present in the given string.\"\"\"\n    return target_char in string\ndef g(target_char='a'):\n    return \"Hello, World!\" + target_char\nassert f(g())\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport pandas as pd\n\ndef f(df: pd.DataFrame, column='name', value='Alice') -> bool:\n    \"\"\"Check if a given value is present in a specific column of a DataFrame.\"\"\"\n    return value in df[column].values\ndef g(column='name', value='Alice'):\n    data = {'name': ['Alice', 'Bob', 'Charlie'], 'age': [25, 30, 35]}\n    return pd.DataFrame(data)\nassert f(g())\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the concatenation of s and the string representation of n is a palindrome\"\"\"\n    return (s + str(n)) == (s + str(n))[::-1]\ndef g(n=3):\n    return str(n)\nassert f(g())\n",
        "idx_generation": 309,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(a: int, b: int, c: int, target: int=0) -> bool:\n    \"\"\"Check if the sum of three numbers is equal to the target.\"\"\"\n    return a + b + c == target\ndef g(target: int=0):\n    a = 1\n    b = 2\n    c = target - a - b\n    return a, b, c\nassert f(*g())\n",
        "idx_generation": 225,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=0) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g(n=0):\n    return str(n)\n\nassert f(g())\n",
        "idx_generation": 309,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of numbers, find if it is possible to obtain the target sum by selecting a contiguous subarray from the list\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n",
        "idx_generation": 226,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, s=\"hello\", n=3) -> bool:\n    \"\"\"Concatenate a string a certain number of times and check if it starts with a specific substring.\"\"\"\n    return x.startswith(s) and x == s * n\ndef g(s=\"hello\", n=3):\n    return s * n\nassert f(g())\n",
        "idx_generation": 309,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=42) -> bool:\n    \"\"\"Given a matrix (2D list of integers) and a target value, determine if there exists a row or column in the matrix\nwhose sum is equal to the target value. Return True if such a row or column exists, False otherwise.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    row_sums = [sum(matrix[i]) for i in range(rows)]\n    col_sums = [sum(matrix[i][j] for i in range(rows)) for j in range(cols)]\n    return target in row_sums or target in col_sums\ndef g(target=42):\n    return [[10, 20, 12],\n            [5, 10, 15],\n            [2, 4, 6]]\nassert f(g())\n",
        "idx_generation": 226,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the length of s is greater than n\"\"\"\n    return len(s) > n\n\ndef g(n=3):\n    return \"abcd\"\n\nassert f(g())\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], a=100, b=200, odd_count=5) -> bool:\n    \"\"\"Check if there are at least odd_count odd numbers between a and b (inclusive) in the given list\"\"\"\n    return sum(1 for n in nums if a <= n <= b and n % 2 != 0) >= odd_count\ndef g(a=100, b=200, odd_count=5):\n    return [n for n in range(a, b + 1) if n % 2 != 0]\nassert f(g())\n",
        "idx_generation": 226,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"Check if a substring is present in a given string\"\"\"\n    return substr in string\n\ndef g(substr='python'):\n    return f\"This is a string that contains the word {substr}\"\n\nassert f(g())",
        "idx_generation": 311,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Sum to target\nGiven a list of integers, find a subset of the list that sums to the target value.\n\"\"\"\n    return sum(arr) == target\ndef g(target=100):\n    return [10, 20, 30, 40]\nassert f(g())\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='python', count=5) -> bool:\n    \"\"\"Find a string that contains count number of substrings\"\"\"\n    return s.count(substr) == count\ndef g(substr='python', count=5):\n    return substr * count\nassert f(g())\n",
        "idx_generation": 311,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(num: int, divisors=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if a number is divisible by all the given divisors\"\"\"\n    return all(num % d == 0 for d in divisors)\ndef g(divisors=[2, 3, 5, 7, 11, 13]):\n    import random\n    num = random.randint(1, 1000)\n    while not f(num, divisors):\n        num += 1\n    return num\nassert f(g())\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, target='abc') -> bool:\n    \"\"\"Check if the target string is a substring of s, repeated n times.\"\"\"\n    return target * n in s\ndef g(n=3, target='abc'):\n    return target * n\nassert f(g())\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(num: int, digits=[1, 3, 5, 7, 9]) -> bool:\n    \"\"\"Check if a number contains only the given digits\"\"\"\n    num_str = str(num)\n    return all(int(d) in digits for d in num_str)\ndef g(digits=[1, 3, 5, 7, 9]):\n    import random\n    num = random.randint(1, 1000)\n    while not f(num, digits):\n        num += 1\n    return num\nassert f(g())\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if the given character appears at least once in the string\"\"\"\n    return char in s\ndef g(char='a'):\n    return char * 5\nassert f(g())\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Given a square matrix, check if the sum of the elements in any of its submatrices of size n is divisible by n.\nSample Input:\nmatrix = [[1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9]]\nn = 2\nSample Output:\nTrue\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows - n + 1):\n        for j in range(cols - n + 1):\n            submatrix_sum = sum(sum(row[j:j+n]) for row in matrix[i:i+n])\n            if submatrix_sum % n == 0:\n                return True\n    return False\n\ndef g(n=3):\n    return [[i+j for j in range(n)] for i in range(n)]\n\nassert f(g(), n=2)\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if the substring 'python' is present in the given string.\"\"\"\n    return substr in s\ndef g(substr='python'):\n    return \"I love python programming\"\nassert f(g())\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    return any(target - x in nums for x in nums)\ndef g(target=0):\n    nums = [1, 4, 7, -3, 9, 2, -2]\n    return nums\nassert f(g())\n",
        "idx_generation": 231,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub_str='abc', count=3) -> bool:\n    \"\"\"Check if a substring appears a certain number of times in a string\"\"\"\n    return s.count(sub_str) == count\ndef g(sub_str='abc', count=3):\n    return sub_str * count\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: list, target_sum=100) -> bool:\n    \"\"\"Given a list of numbers, determine if there exists a subset whose sum is equal to the target_sum.\"\"\"\n    import itertools\n    return any((sum(subset) == target_sum for r in range(len(numbers)+1) for subset in itertools.combinations(numbers, r)))\ndef g(target_sum=100):\n    return [10, 20, 30, 40, 50, 60]\nassert f(g())\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, pattern='101') -> bool:\n    \"\"\"Check if the binary representation of n follows the given pattern\"\"\"\n    binary = bin(n)[2:]\n    return all((binary[i] == pattern[i % len(pattern)] for i in range(len(binary))))\ndef g(pattern='101'):\n    n = 0\n    while True:\n        binary = bin(n)[2:]\n        if all((binary[i] == pattern[i % len(pattern)] for i in range(len(binary)))):\n            return n\n        n += 1\nassert f(g())\n",
        "idx_generation": 319,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, fibonacci=[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]) -> bool:\n    \"\"\"Check if the nth number in the Fibonacci sequence is in the given list.\"\"\"\n    return fibonacci[n] in fibonacci\ndef g(fibonacci=[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]):\n    return 6\nassert f(g())\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if a given string is a substring of the target string.\"\"\"\n    return s in target\ndef g(target='python'):\n    s = target[1:4]\n    return s\nassert f(g())\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[3, 6, 9, 12, 15], target=15) -> bool:\n    \"\"\"Check if a number can be expressed as a sum of any two numbers from a given list.\"\"\"\n    return any((n - i in nums for i in nums))\ndef g(nums=[3, 6, 9, 12, 15], target=15):\n    return target\nassert f(g())\n",
        "idx_generation": 233,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=5) -> bool:\n    \"\"\"Given a string s, determine if it is a palindrome.\nSample Input:\n`\"racecar\"`\nSample Output:\n`True`\"\"\"\n    return s == s[::-1] and len(s) >= target\ndef g(target=5):\n    return \"racecar\"\nassert f(g())\n",
        "idx_generation": 321,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, n=4, m=2) -> bool:\n    \"\"\"Check if a number is divisible by both n and m.\"\"\"\n    return x % n == 0 and x % m == 0\ndef g(n=4, m=2):\n    return n * m\nassert f(g())\n",
        "idx_generation": 233,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(palindrome: str) -> bool:\n    \"\"\"Determine if a given string is a palindrome\"\"\"\n    return palindrome == palindrome[::-1]\ndef g(palindrome='racecar'):\n    return palindrome\nassert f(g())\n",
        "idx_generation": 321,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], n=5) -> bool:\n    \"\"\"Check if there are exactly n words that start with the same letter\"\"\"\n    return len(words) == n and len(set([w[0] for w in words])) == 1\ndef g(n=5):\n    return ['word' + str(i) for i in range(n)]\nassert f(g())\n",
        "idx_generation": 234,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(strings: List[str], target_length=10) -> bool:\n    \"\"\"Find a combination of strings in the given list that has a total length equal to the target length.\"\"\"\n    import itertools\n    return any(len(''.join(comb)) == target_length for comb in itertools.combinations(strings, len(strings) // 2))\ndef g(target_length=10):\n    return ['hello', 'world', 'python', 'programming', 'puzzle']\nassert f(g())\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 234,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring=\"abc\") -> bool:\n    \"\"\"Check if the given substring is present in the given string.\"\"\"\n    return substring in string\ndef g(substring=\"abc\"):\n    string = \"defghabcijklmnopqrstuvwxyz\"\n    return string\nassert f(g())\n",
        "idx_generation": 325,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=25) -> bool:\n    \"\"\"Return True if there exists a pair of numbers in the list whose sum is equal to the target number.\"\"\"\n    return any((x + y == target) for i, x in enumerate(lst) for j, y in enumerate(lst[i + 1:]))\ndef g(lst=[10, 5, 15, 20, 30]):\n    return lst\nassert f(g())\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a', count=3) -> bool:\n    \"\"\"Find a string with a certain number of occurrences of a given character\"\"\"\n    return s.count(char) == count\ndef g(char='a', count=3):\n    return char * count\nassert f(g())\n",
        "idx_generation": 325,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: list, target=20) -> bool:\n    \"\"\"Check if there are three numbers in a list that add up to a given target.\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(target=20):\n    return [2, 8, 5, 10, 3, 15, 7]\nassert f(g())\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Check if the given string can be reduced to the target length by removing consecutive duplicates\"\"\"\n    return len(s) >= target_length and len(set(s[:target_length])) == 1\ndef g(target_length=10):\n    return 'a' * target_length\nassert f(g())\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if n is divisible by all prime numbers in the list primes\"\"\"\n    return all((n % p == 0 for p in primes))\ndef g(primes=[2, 3, 5, 7, 11, 13]):\n    product = 1\n    for p in primes:\n        product *= p\n    return product\nassert f(g())\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='py') -> bool:\n    \"\"\"Check if a substring is present in a string\"\"\"\n    return substr in s\n\ndef g(substr='py'):\n    return 'python'\n\nassert f(g())\n",
        "idx_generation": 327,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Find two numbers in the list whose sum is equal to the target value\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(dt: datetime, format=\"%Y-%m-%d %H:%M:%S\") -> bool:\n    \"\"\"Check if the formatted datetime matches a given string.\"\"\"\n    return dt.strftime(format) == \"2022-12-31 23:59:59\"\n    \ndef g(format=\"%Y-%m-%d %H:%M:%S\"):\n    return datetime.strptime(\"2022-12-31 23:59:59\", format)\n    \nassert f(g())\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"Check if a square matrix is symmetric.\"\"\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g(n=4):\n    return [[1, 2, 3, 4],\n            [2, 5, 6, 7],\n            [3, 6, 8, 9],\n            [4, 7, 9, 0]]\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='th') -> bool:\n    \"\"\"Check if all words in a list have a common prefix.\"\"\"\n    return all(word.startswith(prefix) for word in words)\ndef g(words=['the', 'that', 'then', 'this']):\n    return words\nassert f(g())\n",
        "idx_generation": 330,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=4) -> bool:\n    \"\"\"Check if a list contains all unique elements.\"\"\"\n    return len(nums) == len(set(nums))\ndef g(n=4):\n    return [1, 2, 3, 4]\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n",
        "idx_generation": 330,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target_count=10) -> bool:\n    \"\"\"Find a list of distinct random numbers from 1 to 100 with length equal to target_count.\"\"\"\n    return len(set(nums)) == target_count and all(num in range(1, 101) for num in nums)\n\ndef g(target_count=10):\n    return random.sample(range(1, 101), target_count)\n\nassert f(g())\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a='hello', b='world', c='!') -> bool:\n    \"\"\"Check if a string is a concatenation of three words.\"\"\"\n    return x == a + ' ' + b + ' ' + c\ndef g(a='hello', b='world', c='!'):\n    return a + ' ' + b + ' ' + c\nassert f(g())\n",
        "idx_generation": 330,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: float, a=999, b=654321) -> bool:\n    \"\"\"Check if the sum of x and a is equal to b\"\"\"\n    return x + a == b\ndef g(a=999, b=654321):\n    return b - a\nassert f(g())\n",
        "idx_generation": 240,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, m=5, d=3) -> bool:\n    \"\"\"Check if a given number is divisible by m and the sum of its digits is divisible by d\"\"\"\n    return n % m == 0 and sum(int(digit) for digit in str(n)) % d == 0\n\ndef g(m=5, d=3):\n    digits = str(d) * d\n    num = int(digits)\n    while True:\n        if num % m == 0:\n            return num\n        num += int(digits)\n\nassert f(g())",
        "idx_generation": 331,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: list, a=[1, 2, 3, 4], b=[4, 3, 2, 1]) -> bool:\n    \"\"\"Check if the reversed list of x is equal to a\"\"\"\n    return x[::-1] == a\ndef g(a=[1, 2, 3, 4], b=[4, 3, 2, 1]):\n    return a[::-1]\nassert f(g())\n",
        "idx_generation": 240,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='world') -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substring in s\ndef g(substring='world'):\n    return f\"Hello {substring}!\"\nassert f(g())\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"Check if the sum of n numbers in the array equals the target number.\"\"\"\n    return sum(arr[:n]) == target\ndef g(arr=[1, 2, 3, 4, 5], target=10):\n    return len(arr) - 1\nassert f(g())\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello world') -> bool:\n    \"\"\"Check if the target string is a substring of s\"\"\"\n    return target in s\n\ndef g(target='hello world'):\n    return 'This is a sample sentence. ' + target + ' This is another sentence.'\n\nassert f(g())\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Given a list of integers, find two numbers such that their sum is equal to the target value.\n    Return True if such numbers exist, otherwise return False.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='hello') -> bool:\n    \"\"\"Check if the given substring is present in the string\"\"\"\n    return substr in string\ndef g(substr='hello'):\n    return f'This is a {substr} test string'\nassert f(g())\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=7) -> bool:\n    \"\"\"Given a matrix of integers, find if the target value exists in the matrix.\n    Return True if the target value is found, otherwise return False.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, sub='is') -> bool:\n    \"\"\"Check if a word contains a specific substring.\"\"\"\n    return sub in word\ndef g(sub='is'):\n    return 'This is a sentence.'\nassert f(g())\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the array that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if the given string contains at least one vowel.\"\"\"\n    return any(char in vowels for char in s.lower())\ndef g(vowels=['a', 'e', 'i', 'o', 'u']):\n    return 'Python'\nassert f(g())\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find if the target number is in the matrix\"\"\"\n    return any(target in row for row in matrix)\ndef g(target=0):\n    return [[i+j for i in range(5)] for j in range(5)]\nassert f(g())\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='puzzle') -> bool:\n    \"\"\"Check if a given substring exists in a string.\"\"\"\n    return substring in s.lower()\n\ndef g(substring='puzzle'):\n    return 'This is a puzzle' if substring == 'puzzle' else 'This is not a puzzle'\n\nassert f(g())\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if any two numbers in a list add up to a given target number.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=100):\n    return [50, 75, 25, 10, 90]\nassert f(g())\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='py', suffix='on') -> bool:\n    \"\"\"Check if any word in the list starts with the given prefix and ends with the given suffix\"\"\"\n    for word in words:\n        if word.startswith(prefix) and word.endswith(suffix):\n            return True\n    return False\ndef g(words=['python', 'jupyter', 'notebook']):\n    return words\nassert f(g())\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(num_list: list, k=3) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the list\"\"\"\n    return any(num_list[i:i+k] == list(range(num_list[i], num_list[i]+k)) for i in range(len(num_list)-k+1))\n\ndef g(k=3):\n    start = random.randint(1,10)\n    return list(range(start, start+k+1))\n\nassert f(g())\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, num_list=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if a given string contains all the numbers in a given list\"\"\"\n    return all(str(n) in s for n in num_list)\ndef g(num_list=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return ''.join(str(n) for n in num_list)\nassert f(g())\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in nums that sums up to n\"\"\"\n    return any(nums[i] + nums[j] == n for i in range(len(nums)-1) for j in range(i+1, len(nums)))\ndef g(nums=[1, 2, 3, 4, 5, 6]):\n    return sum(nums) // 2\nassert f(g())\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, word: str) -> bool:\n    \"\"\"Check if the word is present in the sentence.\"\"\"\n    return word.lower() in sentence.lower()\n\ndef g(word: str):\n    sentence = \"The quick brown fox jumps over the lazy dog.\"\n    return sentence\n\nassert f(g(\"fox\"), \"fox\")\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in a list that sum up to a target value\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=0):\n    return [1, -1, 2, -2]\nassert f(g())\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char_count=3, char='a') -> bool:\n    \"\"\"Check if the given string contains the specified character, repeated a certain number of times\"\"\"\n    return s.count(char) == char_count\ndef g(char_count=3, char='a'):\n    return 'a' * char_count\nassert f(g())\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exist three distinct numbers in the list that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g(target=20):\n    return [1, 2, target-3]\nassert f(g())\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='ab') -> bool:\n    \"\"\"Check if there exists a substring of length n in the given string s that contains only unique characters.\"\"\"\n    return len(set([s[i:i+n] for i in range(len(s)-n+1)])) > 0\ndef g(s='ab'):\n    for i in range(1, len(s)+1):\n        if f(i, s):\n            return i\n    return 0\nassert f(g())\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: list, n=3, m=5) -> bool:\n    \"\"\"Check if a given list has exactly n elements and the sum of its elements is equal to m\"\"\"\n    return len(lst) == n and sum(lst) == m\ndef g(n=3, m=5):\n    return [1, 1, 3], n, m\nassert f(*g())\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given string contains the given substring.\"\"\"\n    return substring in s\ndef g(substring='abc'):\n    return \"abcdefg\"\nassert f(g())\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], target=100, num_elements=10) -> bool:\n    \"\"\"Check if there exists a sublist of a given list that sums up to a target value\"\"\"\n    sublists = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublists.append(lst[i:j])\n    return any((sum(sublist) == target for sublist in sublists)) and len(sublists) >= num_elements\n\ndef g(target=100, num_elements=10):\n    lst = random.choices(range(1, 50), k=20)\n    return lst\n\nassert f(g())\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, char='a') -> bool:\n    \"\"\"Check if the given character is present in the string\"\"\"\n    return char in string\n\ndef g(char='a'):\n    return char + \"bcdefghijklmnopqrstuvwxyz\"\n\nassert f(g())\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the number n is a multiple of any number in the given list.\"\"\"\n    return any(n % num == 0 for num in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[-1]\nassert f(g())\n",
        "idx_generation": 248,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='ix') -> bool:\n    \"\"\"Find if there is a word in the list that starts with the prefix and ends with the suffix.\"\"\"\n    for word in words:\n        if word.startswith(prefix) and word.endswith(suffix):\n            return True\n    return False\ndef g(prefix='pre', suffix='ix'):\n    return ['prefix', 'suffix', 'premix', 'postfix']\nassert f(g())\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find a pair of numbers in the matrix whose sum is equal to the target value.\"\"\"\n    return any(a + b == target for row in matrix for a in row for b in row)\ndef g(target=0):\n    from random import randint\n    matrix = [[randint(-100, 100) for _ in range(10)] for _ in range(10)]\n    return matrix\nassert f(g())\n",
        "idx_generation": 249,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if the given substring is present in the given string\"\"\"\n    return substr in s\ndef g(substr='python'):\n    return 'Welcome to the world of python programming'\nassert f(g())\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=5) -> bool:\n    \"\"\"Find a matrix that has a specific number of rows and columns.\"\"\"\n    return len(matrix) == len(matrix[0]) == n\ndef g(n=5):\n    return [[1] * n for _ in range(n)]\nassert f(g())\n",
        "idx_generation": 250,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='hello') -> bool:\n    \"\"\"Find if a given string contains a specific substring.\"\"\"\n    return substring in s\ndef g(substring='hello'):\n    return substring\nassert f(g())\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    return num > 1 and all(num % i != 0 for i in range(2, int(num ** 0.5) + 1))\n\ndef g():\n    num = 31\n    return num\n\nassert f(g())\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, c='a') -> bool:\n    \"\"\"Check if a character is in a string\"\"\"\n    return c in s\n\ndef g(c='a'):\n    return c * 5\n\nassert f(g())\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: list, target=10) -> bool:\n    \"\"\"Check if the target number exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, target]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=4, m=2) -> bool:\n    \"\"\"Find if the string s has exactly n vowels and m consonants\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    consonant_count = 0\n    for char in s:\n        if char.lower() in vowels:\n            vowel_count += 1\n        else:\n            consonant_count += 1\n    return vowel_count == n and consonant_count == m\ndef g(n=4, m=2):\n    return 'a' * n + 'b' * m\nassert f(g())\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray) -> bool:\n    \"\"\"Check if the given 2D array is a magic square.\"\"\"\n    n, m = arr.shape\n    if n != m:\n        return False\n    \n    target_sum = np.sum(arr[0, :])\n\n    # Check rows\n    if not np.all(np.sum(arr, axis=1) == target_sum):\n        return False\n\n    # Check columns\n    if not np.all(np.sum(arr, axis=0) == target_sum):\n        return False\n\n    # Check diagonals\n    if np.sum(np.diag(arr)) != target_sum or np.sum(np.diag(np.fliplr(arr))) != target_sum:\n        return False\n\n    return True\n\ndef g():\n    return np.array([[8, 1, 6], [3, 5, 7], [4, 9, 2]])\n\nassert f(g())\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[str], a=\"hello\", b=\"world\") -> bool:\n    \"\"\"Check if a word is a concatenation of two given strings\"\"\"\n    return x == a + b\ndef g(a=\"hello\", b=\"world\"):\n    return a + b\nassert f(g())\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=0) -> bool:\n    \"\"\"Find a number that is divisible by both 3 and 5 but not divisible by 2.\"\"\"\n    return n % 3 == 0 and n % 5 == 0 and n % 2 != 0\ndef g():\n    return 15\nassert f(g())\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: list, letter='a') -> bool:\n    \"\"\"Check if any word in the list starts with the given letter\"\"\"\n    for word in words:\n        if word.startswith(letter):\n            return True\n    return False\ndef g(letter='a'):\n    return ['apple', 'banana', 'cherry']\nassert f(g())\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers and a target value, return True if there exists a subsequence of the list whose sum is equal to the target value. Otherwise, return False.\"\"\"\n    return any((sum(sub) == target for i in range(len(lst)) for j in range(i+1, len(lst)+1) for sub in [lst[i:j]]))\ndef g(target: int):\n    lst = [1, 2, 3, 4, 5]\n    return lst\nassert f(g(target=9), target=9)\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, names=['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace', 'Henry', 'Isabel', 'Jack', 'Karen', 'Liam', 'Mia', 'Nancy', 'Oliver', 'Patricia', 'Quincy', 'Rachel', 'Sam', 'Tom'], name='Mia') -> bool:\n    \"\"\"Determine if the given name appears in the first n names in the list.\"\"\"\n    return name in names[:n]\ndef g(names=['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace', 'Henry', 'Isabel', 'Jack', 'Karen', 'Liam', 'Mia', 'Nancy', 'Oliver', 'Patricia', 'Quincy', 'Rachel', 'Sam', 'Tom'], name='Mia'):\n    return len(names)\nassert f(g())\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nimport random\nfrom typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there are 4 numbers in a list that sum up to a target value\"\"\"\n    from itertools import combinations\n    return any([sum(comb) == target for comb in combinations(arr, 4)])\ndef g(target=100):\n    import random\n    arr = [random.randint(1, 50) for _ in range(10)]\n    return arr\nassert f(g())\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Determine if all characters in the string are alphanumeric and if the length of the string is at most n.\"\"\"\n    return s.isalnum() and len(s) <= n\ndef g(s='hello', n=5):\n    return s\nassert f(g())\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=30) -> bool:\n    \"\"\"Check if there is a submatrix in the given matrix whose sum is equal to the target value\"\"\"\n    n, m = len(matrix), len(matrix[0])\n    for i in range(n):\n        for j in range(m):\n            for k in range(i, n):\n                for l in range(j, m):\n                    submatrix = [matrix[row][col] for row in range(i, k+1) for col in range(j, l+1)]\n                    if sum(submatrix) == target:\n                        return True\n    return False\n\ndef g(target=30):\n    return [\n        [2, 5, 8, 3],\n        [1, 3, 6, 2],\n        [4, 9, 7, 5]\n    ]\n\nassert f(g())\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: str, word='python') -> bool:\n    \"\"\"Check if a given word is a substring of another given word in reverse\"\"\"\n    return word[::-1] in result\ndef g(word='python'):\n    return word[::-1] * 2\nassert f(g())\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray) -> bool:\n    \"\"\"Check if the sum of all elements in the given matrix is divisible by the maximum element in the matrix.\"\"\"\n    return np.sum(matrix) % np.max(matrix) == 0\n\ndef g():\n    return np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\nassert f(g())\n",
        "idx_generation": 254,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"Given a string `s`, check if it can be divided into `k` equal parts.\"\"\"\n    n = len(s)\n    if n % k != 0:\n        return False\n    \n    part_length = n // k\n    parts = [s[i:i+part_length] for i in range(0, n, part_length)]\n    \n    return len(set(parts)) == 1\ndef g(k=2):\n    s = \"abcabc\"\n    return s\nassert f(g())\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: int, nums=[5, 2, 1, 4, 3]) -> bool:\n    \"\"\"Check if the given number x is present in a list of numbers\"\"\"\n    return x in nums\n\ndef g(nums=[5, 2, 1, 4, 3]):\n    return random.choice(nums)\n\nassert f(g())\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    return 'racecar'\nassert f(g())\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(x: int, n=5) -> bool:\n    \"\"\"Check if the given number x is divisible by n\"\"\"\n    return x % n == 0\n\ndef g(n=5):\n    return n * random.randint(1, 100)\n\nassert f(g())\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring=\"python\") -> bool:\n    \"\"\"Check if the given substring is present in the given string.\"\"\"\n    return substring in s\ndef g(substring=\"python\"):\n    return \"I love programming in \" + substring\nassert f(g())\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], k=5, target=100) -> bool:\n    \"\"\"Find a sublist of length k whose sum is equal to target\"\"\"\n    return any(sum(lst[i:i+k]) == target for i in range(len(lst) - k + 1))\ndef g(k=5, target=100):\n    return list(range(1, 101))\nassert f(g())\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, c='a') -> bool:\n    \"\"\"Check if the given character is the first non-repeating character in the string.\"\"\"\n    return s.index(c) == s.rindex(c)\ndef g(c='a'):\n    return c\nassert f(g())\n",
        "idx_generation": 356,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string s is a palindrome of length n.\"\"\"\n    assert len(s) == n\n    return s == s[::-1]\ndef g(n=3):\n    return \"aba\"\nassert f(g())\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, n=5, s='hello') -> bool:\n    \"\"\"Check if a string contains n occurrences of a given character\"\"\"\n    return x.count(s) == n\ndef g(n=5, s='hello'):\n    return s * n\nassert f(g())\n",
        "idx_generation": 356,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport math\n\ndef f(num: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"Find a number that can be divided by all the factors without a remainder.\"\"\"\n    return all(num % f == 0 for f in factors)\n\ndef g(factors=[2, 3, 5]):\n    num = math.prod(factors) * random.randint(1, 10)\n    return num\n\nassert f(g())\n",
        "idx_generation": 260,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Check if a given string has the same length as the target length\"\"\"\n    return len(s) == target_length\ndef g(target_length=10):\n    return \"HelloWorld\"[:target_length]\nassert f(g())\n",
        "idx_generation": 358,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a positive integer n such that n is divisible by all the integers from 1 to 10 (inclusive).\"\"\"\n    return all((n % i == 0 for i in range(1, 11)))\ndef g():\n    return 2520\nassert f(g())\n",
        "idx_generation": 261,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(string: str, pattern='aeiou') -> bool:\n    \"\"\"Check if the given string contains all the vowels in the given pattern.\"\"\"\n    return all((char in string for char in pattern))\n    \ndef g(pattern='aeiou'):\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    string = random.choice(consonants) + pattern + random.choice(consonants)\n    return string\nassert f(g())\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target value.\"\"\"\n    return any((a + b == target for a in nums for b in nums))\ndef g(target=100):\n    return [target // 2, target - (target // 2)]\nassert f(g())\n",
        "idx_generation": 262,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if all the vowels in the string s are in the list of vowels.\"\"\"\n    return all((char in vowels for char in s.lower()))\n\ndef g(vowels=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(vowels)\n\nassert f(g())\n",
        "idx_generation": 362,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(perm: List[int], pairs=[(1, 2), (3, 4), (5, 6)]) -> bool:\n    \"\"\"Check if a permutation of numbers satisfies a given pair condition\"\"\"\n    for pair in pairs:\n        if abs(perm.index(pair[0]) - perm.index(pair[1])) == 1:\n            return True\n    return False\n\ndef g(pairs=[(1, 2), (3, 4), (5, 6)]):\n    nums = set()\n    for pair in pairs:\n        nums.add(pair[0])\n        nums.add(pair[1])\n    perms = permutations(nums)\n    return next(perms)\n\nassert f(g())\n",
        "idx_generation": 262,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if a string contains all given words\"\"\"\n    return all(word in s for word in words)\ndef g(words=['apple', 'banana', 'cherry']):\n    return ' '.join(words)\nassert f(g())\n",
        "idx_generation": 362,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Check if a given date string matches the specified format\"\"\"\n    try:\n        datetime.datetime.strptime(date, format)\n        return True\n    except ValueError:\n        return False\ndef g(format='%Y-%m-%d'):\n    return datetime.datetime.now().strftime(format)\nassert f(g())\n",
        "idx_generation": 264,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Find a string that contains the substring and its reverse\"\"\"\n    return substring in s and substring[::-1] in s\ndef g(substring='python'):\n    return substring + substring[::-1]\nassert f(g())\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if n is a multiple of any number in lst\"\"\"\n    for num in lst:\n        if n % num == 0:\n            return True\n    return False\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return max(lst)\nassert f(g())\n",
        "idx_generation": 265,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a=7, b=3, c=8) -> bool:\n    \"\"\"Check if a string contains a specific pattern\"\"\"\n    return s.find(str(a)) != -1 and s.find(str(b)) != -1 and s.find(str(c)) != -1\ndef g(a=7, b=3, c=8):\n    return str(a) + str(b) + str(c)\nassert f(g())\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=25) -> bool:\n    \"\"\"Find if there are three numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\ndef g(target=25):\n    return [1, 2, target - 3]\nassert f(g())\n",
        "idx_generation": 265,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string contains at least one uppercase letter and one lowercase letter.\"\"\"\n    return any(c.isupper() for c in s) and any(c.islower() for c in s)\ndef g():\n    return \"AbCdeF\"\nassert f(g())\n",
        "idx_generation": 368,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(x: int, lst=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) -> bool:\n    \"\"\"Check if the given number is larger than all the numbers in the list.\"\"\"\n    return x > max(lst)\ndef g(lst=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]):\n    import random\n    return random.randint(max(lst) + 1, 100)\nassert f(g())\n",
        "idx_generation": 266,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a='Python', b='Programming') -> bool:\n    \"\"\"Satisfy a string manipulation condition\"\"\"\n    return len(x) == len(a) + len(b) and a in x and b in x\ndef g(a='Python', b='Programming'):\n    return a + b\nassert f(g())\n",
        "idx_generation": 370,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10, threshold=5) -> bool:\n    \"\"\"Find two numbers in the array that sum up to the target value, with a minimum difference threshold.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) >= threshold and arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=10, threshold=5):\n    return [1, 4, 7, 3, 9, 2]\nassert f(g())\n",
        "idx_generation": 266,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string that is a palindrome and contains only lowercase letters\"\"\"\n    return s == s[::-1] and s.islower()\n\ndef g():\n    return \"madam\"\n\nassert f(g())\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: list, target=8) -> bool:\n    \"\"\"Check if the target number exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=8):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 266,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[str], n=5) -> bool:\n    \"\"\"Check if the length of any string in the list is greater than n\"\"\"\n    return any(len(s) > n for s in lst)\n\ndef g(lst=['apple', 'banana', 'orange']):\n    return lst\nassert f(g())\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=9):\n    return [1, 2, 3, 4, 5, 6, 7, 8, target-8]\nassert f(g())\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abcabc') -> bool:\n    \"\"\"Find if a given string contains the given substring as a cyclic rotation.\"\"\"\n    return substring in (string + string)\n\ndef g(substring='abcabc'):\n    return substring\n\nassert f(g())\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(res: int, n=5) -> bool:\n    \"\"\"Find the result of multiplying an integer by itself n times.\"\"\"\n    m = 2\n    for _ in range(n):\n        m *= m\n    return res == m\ndef g(n=5):\n    m = 2\n    for _ in range(n):\n        m *= m\n    return m\nassert f(g())\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='python') -> bool:\n    \"\"\"Check if the substring exists in the given string\"\"\"\n    return substring in string\ndef g(substring='python'):\n    return \"I love programming in python\"\nassert f(g())\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of numbers, find two numbers that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 8, 5, 3, 1]\n\nassert f(g())\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if a string has the same substring at the beginning and end\"\"\"\n    return string.startswith(substring) and string.endswith(substring)\n\ndef g(substring='abc'):\n    return substring * 2\n\nassert f(g())\n",
        "idx_generation": 375,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, n=4) -> bool:\n    \"\"\"Check if x is a perfect square.\"\"\"\n    return math.isqrt(x) ** 2 == x\ndef g(n=4):\n    return n ** 2\nassert f(g())\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return string == string[::-1]\n\ndef g():\n    return \"madam\"\n\nassert f(g())\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there is any number in the list that is divisible by the target\"\"\"\n    for num in nums:\n        if num % target == 0:\n            return True\n    return False\ndef g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 271,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefixes=['tr', 're', 'un'], suffixes=['ed', 'ing', 'er']) -> bool:\n    \"\"\"Find a word from the list that starts with any prefix and ends with any suffix\"\"\"\n    return any(word.startswith(prefix) and word.endswith(suffix) for word in words for prefix in prefixes for suffix in suffixes)\ndef g(prefixes=['tr', 're', 'un'], suffixes=['ed', 'ing', 'er']):\n    return ['tree', 'red', 'university', 'apple']\nassert f(g())\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target\"\"\"\n    assert all([v > 0 for v in x])\n    combinations = itertools.combinations(x, 2)\n    for c in combinations:\n        if sum(c) == target:\n            return True\n    return False\n\ndef g(target=50):\n    return [10, 20, 30, 40, 50, 60, 70]\n\nassert f(g())\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == s[::-1]\ndef g(n=5):\n    return 'racecar'\nassert f(g())\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a symmetric matrix.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='fix') -> bool:\n    \"\"\"Check if any word in the list has the given prefix and suffix\"\"\"\n    for word in words:\n        if word.startswith(prefix) and word.endswith(suffix):\n            return True\n    return False\ndef g(prefix='pre', suffix='fix'):\n    return ['prefix', 'suffix', 'word', 'hello', 'world']\nassert f(g())\n",
        "idx_generation": 380,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(primes: List[int], n=5) -> bool:\n    \"\"\"Find the sum of the first n prime numbers\"\"\"\n    assert len(primes) == n\n    return sum(primes) == 2 + 3 + 5 + 7 + 11\ndef g(n=5):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes\nassert f(g())\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, prefix='Hello', suffix='World') -> bool:\n    \"\"\"Check if the given string has the specified prefix and suffix\"\"\"\n    return s.startswith(prefix) and s.endswith(suffix)\n\ndef g(prefix='Hello', suffix='World'):\n    return prefix + ' Python ' + suffix\n\nassert f(g())\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target=16) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target number\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False\n\ndef g(target=16):\n    return [6, 10, -2, 4, 8]\n\nassert f(g())\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='hello') -> bool:\n    \"\"\"Check if the substring is present in the string\"\"\"\n    return substring.lower() in s.lower()\ndef g(substring='hello'):\n    return \"Hello, how are you?\"\nassert f(g())\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two distinct indices i and j in the given list such that nums[i] + nums[j] equals to target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "idx_generation": 274,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, chars=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Find the number of occurrences of each character in the string.\"\"\"\n    char_count = {char: s.count(char) for char in chars}\n    return char_count\ndef g(chars=['a', 'e', 'i', 'o', 'u']):\n    return \"aeiouaeiou\"\nassert f(g()) == {'a': 2, 'e': 2, 'i': 2, 'o': 2, 'u': 2}\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists three distinct indices i, j, and k in the given list such that nums[i] + nums[j] + nums[k] equals to target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "idx_generation": 274,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], pattern=\"abc\") -> bool:\n    \"\"\"Given a list of words and a pattern, determine if there exists a word in the list that matches the pattern.\nThe pattern consists of lowercase letters 'a' - 'z'.\"\"\"\n    return any((len(word) == len(pattern) and all((c1 == c2 or p == 'a' and c1 != c2 for c1, c2, p in zip(word, pattern, pattern)))) for word in words)\ndef g(pattern=\"abc\"):\n    return [\"aaa\", \"bbb\", \"abc\", \"def\", \"xyz\"]\nassert f(g())\n",
        "idx_generation": 390,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(result: int, target=50) -> bool:\n    \"\"\"Given a result and a target number, determine if the result is greater than the target number.\"\"\"\n    return result > target\n\ndef g(target=50):\n    result = random.randint(0, 100)\n    return result\n\nassert f(g())\n",
        "idx_generation": 274,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, pattern: str) -> bool:\n    \"\"\"Given a string and a pattern, check if the pattern exists in the string\"\"\"\n    return pattern in string\n\ndef g(string=\"Hello, World!\", pattern=\"World\"):\n    return string, pattern\n\nassert f(*g())\n",
        "idx_generation": 390,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int, n=100) -> bool:\n    \"\"\"Find three integers that sum up to n\"\"\"\n    return x + y + z == n\ndef g(n=100):\n    x = 1\n    y = 2\n    z = n - x - y\n    return x, y, z\nassert f(*g())\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, pattern='abc') -> bool:\n    \"\"\"Check if the given string contains the pattern as a substring\"\"\"\n    return pattern in string\ndef g(pattern='abc'):\n    return \"xyzabc123\"\nassert f(g())\n",
        "idx_generation": 392,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom collections import Counter\n\ndef f(nums: List[int], target=10, length=5) -> bool:\n    \"\"\"Find a list of numbers where a specific target number appears a certain number of times consecutively.\"\"\"\n    count = 0\n    for num in nums:\n        if num == target:\n            count += 1\n            if count == length:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(target=10, length=5):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 11, 12, 13, 14, 15]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 277,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python', case_sensitive=True) -> bool:\n    \"\"\"Check if a string contains a specific target string based on case sensitivity.\"\"\"\n    if case_sensitive:\n        return target in s\n    else:\n        return target.lower() in s.lower()\ndef g(target='python', case_sensitive=True):\n    return target if case_sensitive else target.upper()\nassert f(g())\n",
        "idx_generation": 392,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100, length=4) -> bool:\n    \"\"\"Find a sublist of numbers where the sum is equal to a specific target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if sum(nums[i:j+1]) == target:\n                return True\n    return False\n\ndef g(target=100, length=4):\n    nums = [25, 50, 75, 100, 125, 150, 175, 200]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 277,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, char='a') -> bool:\n    \"\"\"Check if a given character is present at least once in a word\"\"\"\n    return char in word\ndef g(char='a'):\n    word = \"banana\"\n    return word\nassert f(g())\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums=[10, 20, 30, 40, 50]):\n    return nums\nassert f(g())\n",
        "idx_generation": 277,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[str], target='a') -> bool:\n    \"\"\"Check if the target string is present in any of the strings in the list\"\"\"\n    return any((target in s for s in nums))\ndef g(nums=['apple', 'banana', 'cherry', 'durian']):\n    return nums\nassert f(g())\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=1000) -> bool:\n    \"\"\"Check if there exists a quadruplet of numbers in the list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] + nums[k] + nums[l] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)) for l in range(k+1, len(nums)))\ndef g(nums=[100, 200, 300, 400, 500]):\n    return nums\nassert f(g())\n",
        "idx_generation": 277,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python', n=2) -> bool:\n    \"\"\"Check if the nth character of the target string matches the given character.\"\"\"\n    return target[n-1] == s\ndef g(target='python', n=2):\n    return target[n-1]\nassert f(g())\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a list of numbers that can be added together to reach the target number\"\"\"\n    return sum(nums) == target\ndef g(target=100):\n    return [25, 25, 50]\nassert f(g())\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, substrings=['py', 'th', 'on']) -> bool:\n    \"\"\"Check if the word contains all the given substrings.\"\"\"\n    return all((substring in word for substring in substrings))\ndef g(substrings=['py', 'th', 'on']):\n    return ''.join(substrings)\nassert f(g())\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Determine if there are three numbers in the list that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g(target=0):\n    return [-target, target, 0]\nassert f(g())\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if the given string contains the target string\"\"\"\n    return target in s\ndef g(target='hello'):\n    return target * 2\nassert f(g())\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Find if the given target value exists in the matrix\"\"\"\n    return any(target in row for row in matrix)\ndef g(target=5):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 279,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='Python') -> bool:\n    \"\"\"Check if a given substring is present in the given string.\"\"\"\n    return substr in string\ndef g(substr='Python'):\n    return f\"This is a string that contains the word {substr}.\"\nassert f(g())\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: list, n=3) -> bool:\n    \"\"\"Check if there exists a subarray in the list with a length greater than or equal to n, such that the sum of the elements in the subarray is divisible by n\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+n, len(arr)+1):\n            if sum(arr[i:j]) % n == 0:\n                return True\n    return False\n\ndef g(n=3):\n    return [num for num in range(1, 10)]\n\nassert f(g(), n=3)\n",
        "idx_generation": 279,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=3) -> bool:\n    \"\"\"Check if a string contains exactly n consecutive vowels (a, e, i, o, u).\n- string is the input string\n- n is the number of consecutive vowels to check for\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(n=3):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(vowels * n)\n\nassert f(g())\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=100, b=200) -> bool:\n    \"\"\"Check if a number is a multiple of either a or b\"\"\"\n    return x % a == 0 or x % b == 0\n\ndef g(a=100, b=200):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub='abcde') -> bool:\n    \"\"\"Check if the given string contains a specific substring\"\"\"\n    return sub in s\ndef g(sub='abcde'):\n    return sub + 'fgh'\nassert f(g())\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(lst: List[int], target_sum=100) -> bool:\n    \"\"\"Find two numbers in lst that sum up to target_sum\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=100):\n    import random\n    lst = random.sample(range(1, 101), 50)\n    return lst\nassert f(g())\n",
        "idx_generation": 281,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: str, text=\"Hello, World!\") -> bool:\n    \"\"\"Check if the result is equal to the reverse of a given string\"\"\"\n    return result == text[::-1]\ndef g(text=\"Hello, World!\"):\n    return text[::-1]\nassert f(g())\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list whose product is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(a * b == target for a, b in combinations(arr, 2))\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 282,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[str], n=3) -> bool:\n    \"\"\"Check if there are n consecutive strings in the list\"\"\"\n    for i in range(len(x) - n + 1):\n        if x[i:i+n] == [\"apple\", \"banana\", \"cherry\"]:\n            return True\n    return False\n\ndef g(n=3):\n    return [\"orange\", \"apple\", \"banana\", \"cherry\", \"grape\", \"watermelon\"]\n\nassert f(g())\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers that sum up to a target value.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 283,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(words: List[str], prefix='pre', suffix='suf', max_length=10) -> bool:\n    \"\"\"Given a list of words, determine if there exists a word that starts with the prefix, ends with the suffix, and has a length less than or equal to the max_length.\"\"\"\n    return any(word.startswith(prefix) and word.endswith(suffix) and len(word) <= max_length for word in words)\ndef g(prefix='pre', suffix='suf', max_length=10):\n    import random\n    num_words = random.randint(1, 10)\n    words = []\n    for _ in range(num_words):\n        word_length = random.randint(1, max_length)\n        word = prefix + ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=word_length - len(prefix) - len(suffix))) + suffix\n        words.append(word)\n    return words\nassert f(g())\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: list, target=10) -> bool:\n    \"\"\"Check if the sum of all numbers in a list is equal to the target\"\"\"\n    return sum(arr) == target\ndef g(target=10):\n    return [1, 2, 3, 4]\nassert f(g())\n",
        "idx_generation": 285,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='programming') -> bool:\n    \"\"\"Check if a given string contains a specific substring\"\"\"\n    return substring in s\ndef g(substring='programming'):\n    return \"I love programming in Python!\"\nassert f(g())\n",
        "idx_generation": 403,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: list, target=5) -> bool:\n    \"\"\"Check if the target number is present in a randomly shuffled list\"\"\"\n    random.shuffle(arr)\n    return target in arr\ndef g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 285,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Find a string that contains all the substrings in reverse order\"\"\"\n    return all((sub[::-1] in s for sub in substrings[::-1]))\n\ndef g(substrings=['apple', 'banana', 'cherry']):\n    return ''.join(sub[::-1] for sub in substrings)\nassert f(g())\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a given number is a prime number.\"\"\"\n    return n in primes\ndef g(n=7, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return n\nassert f(g()) == True\n",
        "idx_generation": 286,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub=\"python\", n=2) -> bool:\n    \"\"\"Find n occurrences of substring sub in s\"\"\"\n    return s.count(sub) == n\ndef g(sub=\"python\", n=2):\n    return sub * n\nassert f(g())\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target\"\"\"\n    return any((target - num in nums for num in nums))\ndef g(target=100):\n    return [50, 50]\nassert f(g())\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, vowels=['a', 'e', 'i', 'o', 'u'], consonants=['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']) -> bool:\n    \"\"\"Given a word, determine if it contains alternating vowels and consonants\"\"\"\n    return all((word[i] in vowels and word[i + 1] in consonants or word[i] in consonants and word[i + 1] in vowels for i in range(len(word) - 1)))\ndef g(word='banana'):\n    return ''.join([i if i in ['a', 'e', 'i', 'o', 'u'] else 'b' for i in word])\nassert f(g())\n",
        "idx_generation": 406,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers such that their sum equals the target value\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[:-1]\n\nassert f(g())\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='python', b='programming') -> bool:\n    \"\"\"Check if a string contains both word a and word b.\"\"\"\n    return a in s and b in s\ndef g(a='python', b='programming'):\n    return a + ' ' + b\nassert f(g())\n",
        "idx_generation": 407,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) -> bool:\n    \"\"\"Check if a given number is a multiple of the second to last number in a list.\"\"\"\n    return n % nums[-2] == 0\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    return nums[-2]\nassert f(g())\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=4, target=2) -> bool:\n    \"\"\"Count the number of occurrences of a substring in a string and check if it is greater than or equal to a target number.\"\"\"\n    return s.count(n * 'a') >= target\ndef g(n=4, target=2):\n    return 'a' * (n * target)\nassert f(g())\n",
        "idx_generation": 407,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"Determine if the target number is present in the given matrix.\"\"\"\n    rows = len(matrix)\n    if rows == 0:\n        return False\n    cols = len(matrix[0])\n    if cols == 0:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] == target:\n                return True\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if a given string contains all the substrings in a specific order\"\"\"\n    return all(sub in s for sub in substrings)\ndef g(substrings=['apple', 'banana', 'cherry']):\n    return ''.join(substrings)\nassert f(g())\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=20) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers that sum up to the target value.\"\"\"\n    return any((x + y == target for x in lst for y in lst if x != y))\ndef g(target=20):\n    return [x for x in range(target // 2)] + [target - x for x in range(target // 2)]\nassert f(g())\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string and if it occurs more than once.\"\"\"\n    return s.count(substr) > 1\ndef g(substr='abc'):\n    return f'{substr}{substr}'\nassert f(g())\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find a subarray whose sum is equal to the target value.\"\"\"\n    return any((sum(lst[i:j]) == target for i in range(len(lst)) for j in range(i + 1, len(lst) + 1)))\ndef g(target=10):\n    return [x for x in range(target + 1)]\nassert f(g())\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(is_palindrome: bool, word='racecar') -> bool:\n    \"\"\"Check if a word is a palindrome\"\"\"\n    return is_palindrome == (word == word[::-1])\ndef g(word='racecar'):\n    return word == word[::-1]\nassert f(g())\n",
        "idx_generation": 409,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], a=100, b=200, c=300) -> bool:\n    \"\"\"Check if the list contains exactly one occurrence of a, b, and c in that order\"\"\"\n    return x.count(a) == 1 and x.count(b) == 1 and x.count(c) == 1 and x.index(a) < x.index(b) < x.index(c)\ndef g(a=100, b=200, c=300):\n    return [a, b, c]\nassert f(g())\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a valid email address.\"\"\"\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return re.match(pattern, s) is not None\ndef g():\n    return 'example.email@gmail.com'\nassert f(g())\n",
        "idx_generation": 409,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=100, b=50, c=10) -> bool:\n    \"\"\"Check if n is divisible by a, b, and c.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=100, b=50, c=10):\n    return a * b * c\nassert f(g())\n",
        "idx_generation": 290,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=3, length=15) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring='abc', count=3, length=15):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * '!'\nassert f(g())\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, string='', target='') -> bool:\n    \"\"\"Check if the target string is a substring of the given string.\"\"\"\n    return target in string\ndef g(string='', target=''):\n    return string + target\nassert f(g())\n",
        "idx_generation": 290,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr=\"abc\") -> bool:\n    \"\"\"Check if a given substring appears in a string\"\"\"\n    return substr in s\ndef g(substr=\"abc\"):\n    return substr + \"xyz\"\nassert f(g())\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(password: str, strength=4, min_length=8) -> bool:\n    \"\"\"Check if the password is strong enough based on the given criteria\"\"\"\n    conditions = [\n        len(password) >= min_length,\n        any(c.isupper() for c in password),\n        any(c.islower() for c in password),\n        any(c.isdigit() for c in password)\n    ]\n    return strength == sum(conditions)\ndef g(strength=4, min_length=8):\n    return \"Passw0rd\"\nassert f(g())\n",
        "idx_generation": 290,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the string s contains all the letters in the target string\"\"\"\n    return all(letter in s for letter in target)\ndef g(target='python'):\n    return 'pythons are amazing creatures'\nassert f(g())\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the sum of all elements in the list lst is equal to n.\"\"\"\n    return sum(lst) == n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return sum(lst)\nassert f(g())\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Find a string that is exactly n characters long and contains only lowercase alphabetic characters.\"\"\"\n    return len(s) == n and s.islower()\ndef g(n=10):\n    import string\n    import random\n    return ''.join(random.choice(string.ascii_lowercase) for _ in range(n))\nassert f(g())\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers that sum up to a given target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 292,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if a substring is present in a string in a case-insensitive manner.\"\"\"\n    return substr.lower() in s.lower()\n\ndef g(s: str, substr='python'):\n    return s\n\nassert f(g(\"I love Python!\"))\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list is a palindrome\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 292,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: str, n=4, s='abcdefghij') -> bool:\n    \"\"\"Find the substring of length n that appears most frequently in s\"\"\"\n    substrings = [s[i:i+n] for i in range(len(s)-n+1)]\n    max_frequency = max(substrings.count(sub) for sub in substrings)\n    most_frequent = [sub for sub in substrings if substrings.count(sub) == max_frequency]\n    return result == most_frequent[0]\ndef g(n=4, s='abcdefghij'):\n    substrings = [s[i:i+n] for i in range(len(s)-n+1)]\n    max_frequency = max(substrings.count(sub) for sub in substrings)\n    most_frequent = [sub for sub in substrings if substrings.count(sub) == max_frequency]\n    return most_frequent[0]\nassert f(g())\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: int, a=10, b=100) -> bool:\n    \"\"\"Check if x is divisible by both a and b.\"\"\"\n    return x % a == 0 and x % b == 0\n\ndef g(a=10, b=100):\n    return a * b * random.randint(1, 10)\n\nassert f(g())\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: list, target='apple') -> bool:\n    \"\"\"Check if the target word is an anagram of any word in the given list.\"\"\"\n    for word in words:\n        if sorted(word.lower()) == sorted(target.lower()):\n            return True\n    return False\n\ndef g(words=['lapep', 'apple', 'plape']):\n    return words\n\nassert f(g())\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, target=999) -> bool:\n    \"\"\"Check if a randomly generated sequence contains the target number\"\"\"\n    random.seed(0)\n    sequence = [random.randint(0, 1000) for _ in range(n)]\n    return target in sequence\n\ndef g(target=999):\n    return 1000\n\nassert f(g())\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Determine if a string is a palindrome.\nSample Input:\ns = \"racecar\"\nSample Output:\nTrue\"\"\"\n    return s == s[::-1]\ndef g(s=\"racecar\"):\n    return s\nassert f(g())\n",
        "idx_generation": 419,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Find a square matrix of size n x n that is symmetric.\"\"\"\n    return matrix == [[matrix[i][j] for i in range(n)] for j in range(n)]\ndef g(n=3):\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"Determine if the string s contains at least n occurrences of the same character in a row.\"\"\"\n    return any((s[i] == s[i+1] for i in range(len(s)-n+1)))\n\ndef g(n=2):\n    # Return a string that contains at least n occurrences of the same character in a row\n    return \"hello\"\n\nassert f(g())\n",
        "idx_generation": 419,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"Check if the grid is a valid Sudoku solution.\"\"\"\n    def check_rows(grid):\n        for row in grid:\n            if len(set(row)) != len(row):\n                return False\n        return True\n\n    def check_columns(grid):\n        for col in range(9):\n            if len(set(row[col] for row in grid)) != 9:\n                return False\n        return True\n\n    def check_subgrids(grid):\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                subgrid = [row[j:j+3] for row in grid[i:i+3]]\n                flat_subgrid = [num for row in subgrid for num in row]\n                if len(set(flat_subgrid)) != 9:\n                    return False\n        return True\n\n    return check_rows(grid) and check_columns(grid) and check_subgrids(grid)\n\ndef g():\n    return [[5, 3, 4, 6, 7, 8, 9, 1, 2],\n            [6, 7, 2, 1, 9, 5, 3, 4, 8],\n            [1, 9, 8, 3, 4, 2, 5, 6, 7],\n            [8, 5, 9, 7, 6, 1, 4, 2, 3],\n            [4, 2, 6, 8, 5, 3, 7, 9, 1],\n            [7, 1, 3, 9, 2, 4, 8, 5, 6],\n            [9, 6, 1, 5, 3, 7, 2, 8, 4],\n            [2, 8, 7, 4, 1, 9, 6, 3, 5],\n            [3, 4, 5, 2, 8, 6, 1, 7, 9]]\nassert f(g())\n",
        "idx_generation": 294,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='world') -> bool:\n    \"\"\"Check if a substring exists in a given string\"\"\"\n    return substring in s\n\ndef g(substring='world'):\n    s = \"Hello, world!\"\n    return s\n\nassert f(g())\n",
        "idx_generation": 419,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100, count=5) -> bool:\n    \"\"\"Find a list of count numbers whose sum is equal to target\"\"\"\n    return sum(nums) == target and len(nums) == count\ndef g(target=100, count=5):\n    return [target/count] * count\nassert f(g())\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target='python') -> bool:\n    \"\"\"Check if a target word is present in a string.\"\"\"\n    return target in string.lower()\ndef g(target='python'):\n    return target\nassert f(g())\n",
        "idx_generation": 420,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target_sum=100) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target_sum\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            for k in range(j+1, len(num_list)):\n                if num_list[i] + num_list[j] + num_list[k] == target_sum:\n                    return True\n    return False\n\ndef g(target_sum=100):\n    return [10, 20, target_sum-30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='ABC') -> bool:\n    \"\"\"Check if the given substring is present in the string\"\"\"\n    return substring in s\ndef g(substring='ABC'):\n    s = 'DEFGHIJKLMNOPQRSTUVWXYZABC'\n    return s\nassert f(g())\n",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport pandas as pd\n\ndef f(df: pd.DataFrame, num_rows=5, num_cols=3) -> bool:\n    \"\"\"Check if the number of rows and columns in the dataframe match the specified values.\"\"\"\n    return df.shape == (num_rows, num_cols)\n\ndef g(num_rows=5, num_cols=3):\n    data = {'col1': [1, 2, 3, 4, 5],\n            'col2': ['a', 'b', 'c', 'd', 'e'],\n            'col3': [True, False, True, False, True]}\n    return pd.DataFrame(data=data).head(num_rows)\n\nassert f(g())\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if the substring is present in the given string\"\"\"\n    return substring in s\n\ndef g(substring='python'):\n    return \"I love python programming!\"\n\nassert f(g())\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, arr=[1, 3, 5, 7, 9], n=5) -> bool:\n    \"\"\"Check if x is present in the first n elements of arr\"\"\"\n    return x in arr[:n]\ndef g(arr=[1, 3, 5, 7, 9], n=5):\n    return arr[n-1]\nassert f(g())\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring=\"python\") -> bool:\n    \"\"\"Check if the given substring exists in the string, ignoring case\"\"\"\n    return substring.lower() in s.lower()\n\ndef g(substring=\"python\"):\n    return substring.upper()\nassert f(g(\"I love Python!\"))\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, arr=['apple', 'banana', 'cherry', 'date'], n=4) -> bool:\n    \"\"\"Check if x is the last element of arr\"\"\"\n    return x == arr[-1]\ndef g(arr=['apple', 'banana', 'cherry', 'date'], n=4):\n    return arr[n-1]\nassert f(g())\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, palindrome=True) -> bool:\n    \"\"\"Check if a string is a palindrome or not.\"\"\"\n    return string == string[::-1]\n\ndef g(string=\"level\", palindrome=True):\n    return string\n\nassert f(g())\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiplies to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Given a string and a substring, check if the substring appears in the string\"\"\"\n    return substring in string\ndef g(substring='abc'):\n    return 'defabcfgh'\nassert f(g())\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of numbers, find a pair of numbers that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if a substring exists in a given string.\"\"\"\n    return substr in s\ndef g(substr='abc'):\n    return 'abcdef'\nassert f(g())\n",
        "idx_generation": 429,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of numbers, find three numbers that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [50, 25, 10, 15, 30, 40, 60]\n\nassert f(g())\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a='Hello, World!', b='Python is awesome!') -> bool:\n    \"\"\"Given two strings a and b, concatenate them with a space in between and check if it equals x\"\"\"\n    return x == a + ' ' + b\ndef g(a='Hello, World!', b='Python is awesome!'):\n    return a + ' ' + b\nassert f(g())\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a number is present in the list.\"\"\"\n    return n in numbers\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return numbers[3]\nassert f(g())\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='Python') -> bool:\n    \"\"\"Check if a substring is present in the given string\"\"\"\n    return substring in s\ndef g(substring='Python'):\n    return 'I love Python programming'\nassert f(g())\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target sum.\"\"\"\n    num_set = set()\n    for num in nums:\n        if (target_sum - num) in num_set:\n            return True\n        num_set.add(num)\n    return False\ndef g(target_sum=100):\n    return [50, 75, 25, 10, 90] if target_sum % 10 == 0 else [50, 75, 25, 10, 80]\nassert f(g())\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='apple') -> bool:\n    \"\"\"Check if a given string is a substring of a word, ignoring case.\"\"\"\n    return s.lower() in a.lower()\ndef g(a='apple'):\n    return a\nassert f(g('APP'))\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: list, n=10) -> bool:\n    \"\"\"Check if the given list contains a random number from 1 to 10.\"\"\"\n    return random.choice(arr) in range(1, n + 1)\n\ndef g(n=10):\n    return [random.randint(1, n) for _ in range(n)]\n\nassert f(g())\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello', length=5) -> bool:\n    \"\"\"Check if a given string contains a target substring of a specific length\"\"\"\n    return target in [s[i:i+length] for i in range(len(s)-length+1)]\ndef g(target='hello', length=5):\n    return target * 2\nassert f(g())\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find two numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 9]\nassert f(g())\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if a target word is present in a list of words\"\"\"\n    return any(word == target for word in words)\ndef g(target='python'):\n    return ['java', 'javascript', 'python', 'ruby']\nassert f(g())\n",
        "idx_generation": 433,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find two numbers such that they add up to a target value.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [5, target-5]\nassert f(g())\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='x') -> bool:\n    \"\"\"Check if a character is present in a string at least three times consecutively.\"\"\"\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2] == char:\n            return True\n    return False\ndef g(char='x'):\n    return f'{char * 2}{char}'\nassert f(g())\n",
        "idx_generation": 434,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=10) -> bool:\n    \"\"\"Check if the sum of the elements in the given array is equal to the target value.\"\"\"\n    return np.sum(arr) == target\n\ndef g(target=10):\n    return np.array([1, 2, 3, 4])\n\nassert f(g())\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='fix') -> bool:\n    \"\"\"Check if all words in the list have the given prefix and suffix.\"\"\"\n    for word in words:\n        if not word.startswith(prefix) or not word.endswith(suffix):\n            return False\n    return True\ndef g(prefix='pre', suffix='fix'):\n    return [prefix+chr(i)+suffix for i in range(ord('a'), ord('z')+1)]\nassert f(g())\n",
        "idx_generation": 435,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], a=10, b=20, c=30) -> bool:\n    \"\"\"Create a list of numbers that are multiples of a, b, and c.\"\"\"\n    return all([num % a == 0 and num % b == 0 and num % c == 0 for num in x])\ndef g(a=10, b=20, c=30):\n    return [num for num in range(a * b * c + 1) if num % a == 0 and num % b == 0 and num % c == 0]\nassert f(g())\n",
        "idx_generation": 309,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return s == s[::-1]\ndef g(s=\"racecar\"):\n    return s\nassert f(g())\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the number n is present in the list lst\"\"\"\n    return n in lst\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return 3\n\nassert f(g())\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if the given word is a substring of s.\"\"\"\n    return word in s\ndef g(word='python'):\n    return 'I love ' + word\nassert f(g())\n",
        "idx_generation": 437,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\nassert f(g())\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python', count=3) -> bool:\n    \"\"\"Check if a substring appears target number of times in a string\"\"\"\n    return s.count(target) == count\ndef g(target='python', count=3):\n    return target * count\nassert f(g())\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, day_of_week='Monday') -> bool:\n    \"\"\"Check if the given date falls on a specific day of the week\"\"\"\n    d = datetime.datetime.strptime(date, '%Y-%m-%d')\n    return d.strftime('%A') == day_of_week\n\ndef g(day_of_week='Monday'):\n    today = datetime.datetime.now()\n    days_ahead = (7 - today.weekday() + datetime.datetime.strptime(day_of_week, '%A').weekday()) % 7\n    target_date = today + datetime.timedelta(days=days_ahead)\n    return target_date.strftime('%Y-%m-%d')\n\nassert f(g())\n",
        "idx_generation": 313,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abcde') -> bool:\n    \"\"\"\n    Given a string s, determine if there exists a substring in s that is equal to a given substring.\n    \"\"\"\n    return substring in s\n\ndef g(substring='abcde'):\n    return ''.join(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'])\n\n\nassert f(g()) == True",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if the number n is a product of any two prime numbers in the primes list.\"\"\"\n    for p1 in primes:\n        for p2 in primes:\n            if p1 * p2 == n:\n                return True\n    return False\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    for p1 in primes:\n        for p2 in primes:\n            if p1 * p2 > max(primes):\n                return p1 * p2\n    return 0\nassert f(g())\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target=\"\") -> bool:\n    \"\"\"Check if the target string is a substring of the given string.\"\"\"\n    return target in string\ndef g(string=\"Hello, World!\"):\n    return string\nassert f(g())\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Given a list of integers, find if there exists a subarray of length k in the list such that the sum of its elements is even\"\"\"\n    return any(sum(arr[i:i+k]) % 2 == 0 for i in range(len(arr)-k+1))\ndef g(k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 315,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if a substring is present in a string.\"\"\"\n    return substr in s.lower()\ndef g(substr='python'):\n    return 'I love Python programming'\nassert f(g())\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find if there exists two numbers in the list that sum up to the target.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if target - num in num_set:\n            return True\n    return False\ndef g(target=0):\n    return [target // 2, target - target // 2]\nassert f(g())\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, pattern=\"abc\") -> bool:\n    \"\"\"Check if the given string follows the pattern\"\"\"\n    return string == pattern * (len(string) // len(pattern)) + pattern[:len(string) % len(pattern)]\ndef g(pattern=\"abc\"):\n    return pattern * 3\nassert f(g())\n",
        "idx_generation": 442,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if a number is divisible by any of the given primes\"\"\"\n    return any(n % p == 0 for p in primes)\ndef g(primes=[2, 3, 5, 7, 11, 13]):\n    i = max(primes) + 1\n    while True:\n        if any(i % p == 0 for p in primes):\n            return i\n        i += 1\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport string\n\ndef f(sentence: str, chars=string.ascii_lowercase) -> bool:\n    \"\"\"Check if a sentence contains all the letters of the alphabet\"\"\"\n    sentence = sentence.lower()\n    return all((c in sentence for c in chars))\n\ndef g(chars=string.ascii_lowercase):\n    return 'The quick brown fox jumps over the lazy dog'\n\nassert f(g())\n",
        "idx_generation": 443,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if the given number n is equal to the number of characters in any of the given words\"\"\"\n    return any(n == len(word) for word in words)\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return len(words[0])\nassert f(g())\n",
        "idx_generation": 319,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='Python') -> bool:\n    \"\"\"Check if a given string contains a specific substring.\"\"\"\n    return substring in s\ndef g(s='I love Python programming'):\n    return s\nassert f(g())\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, a=3, b=5) -> bool:\n    \"\"\"Check if a number is divisible by both a and b.\"\"\"\n    return num % a == 0 and num % b == 0\ndef g(a=3, b=5):\n    num = a * b\n    return num\nassert f(g())\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target_length=10) -> bool:\n    \"\"\"Find a substring of the given string that has a length equal to the target_length.\"\"\"\n    n = len(string)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if j - i == target_length:\n                return True\n    return False\n    \ndef g(target_length=10):\n    string = \"abcdefghij\"\n    return string\n\nassert f(g())\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=16) -> bool:\n    \"\"\"Find a row and column in a matrix where the sum of the row and column is equal to the target number\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if sum(matrix[i]) + sum(row[j] for row in matrix) == target:\n                return True\n    return False\ndef g(target=16):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target - 15]]\nassert f(g())\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a='hello', b='world') -> bool:\n    \"\"\"Check if x is a string that contains both substrings a and b\"\"\"\n    return a in x and b in x\n\ndef g(a='hello', b='world'):\n    return a + ' ' + b\nassert f(g())\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3, target=7) -> bool:\n    \"\"\"Given a list of integers and an integer k, determine if there exists a subarray of length k in the list\n    whose sum is equal to the target\"\"\"\n    return any(sum(nums[i:i+k]) == target for i in range(len(nums)-k+1))\ndef g(nums=[2, 4, 1, 6, 5, 3, 8, 7, 9], k=3, target=7):\n    return nums\nassert f(g())\n",
        "idx_generation": 321,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='world') -> bool:\n    \"\"\"Check if the given substring is present in the string.\"\"\"\n    return substr in s\ndef g(substr='world'):\n    return \"Hello, world!\"\nassert f(g())\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the given list that sums up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(target=10):\n    return [1, 9, 2, 8, 3, 7, 4, 6, 5]\nassert f(g())\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Find a string that contains the given substring.\"\"\"\n    return substring in string\ndef g(substring='abc'):\n    return substring + 'def'\nassert f(g())\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target\"\"\"\n    assert len(nums) >= 3\n    for i in range(len(nums) - 2):\n        for j in range(i + 1, len(nums) - 1):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 323,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=4, m=2) -> bool:\n    \"\"\"Check if s contains a substring with n consecutive vowels and m consecutive consonants\"\"\"\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    count_vowels = 0\n    count_consonants = 0\n    for char in s:\n        if char in vowels:\n            count_vowels += 1\n            count_consonants = 0\n            if count_vowels == n:\n                return True\n        elif char in consonants:\n            count_consonants += 1\n            count_vowels = 0\n            if count_consonants == m:\n                return True\n        else:\n            count_vowels = 0\n            count_consonants = 0\n    return False\n\ndef g(n=4, m=2):\n    s = 'aa' * (n-1) + 'bb' * (m-1)\n    return s\n\nassert f(g())\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a number is prime\"\"\"\n    return n in primes\ndef g():\n    return 2\nassert f(g())\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char_count=3, target_char='a') -> bool:\n    \"\"\"Check if the given character appears the specified number of times in the string\"\"\"\n    count = s.count(target_char)\n    return count == char_count\n\ndef g(char_count=3, target_char='a'):\n    return target_char * char_count\nassert f(g())\n",
        "idx_generation": 455,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10, k=2) -> bool:\n    \"\"\"Determine if there exists a pair of elements in the list that sum up to the target value, and the absolute difference between the indices of the two elements is at most k.\"\"\"\n    return any((abs(i - j) <= k and nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=10, k=2):\n    return [3, 5, 2, 8, 6]\nassert f(g())\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'indigo', 'jackfruit']) -> bool:\n    \"\"\"Check if the given string s is a substring of any string in the list of strings.\"\"\"\n    return any((s in string for string in strings))\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'indigo', 'jackfruit']):\n    return next((s for s in strings if len(s) > 1), None)\nassert f(g())\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if a given number is divisible by all elements in a list.\"\"\"\n    for num in lst:\n        if n % num != 0:\n            return False\n    return True\ndef g(lst=[2, 4, 6, 8, 10]):\n    n = 1\n    for num in lst:\n        n *= num\n    return n\nassert f(g())\n",
        "idx_generation": 325,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a='hello', b='world') -> bool:\n    \"\"\"Check if a string contains two specific substrings.\"\"\"\n    return a in x and b in x\ndef g(a='hello', b='world'):\n    return a + ' ' + b\nassert f(g())\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=1, b=1) -> bool:\n    \"\"\"Given an integer n, determine if it is a prime number.\nSample Input:\nn = 17\nSample Output:\nTrue\"\"\"\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\ndef g():\n    return 17\nassert f(g())",
        "idx_generation": 327,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string that is equal to its reverse.\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"madam\"\nassert f(g())\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(phrase: str, num_words=3, word_list=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if the first num_words in the phrase are in the word_list\"\"\"\n    words = phrase.split()\n    return all(word in word_list for word in words[:num_words])\ndef g(num_words=3, word_list=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return ' '.join(word_list[:num_words])\nassert f(g())\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, li=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a number is a prime number by comparing it to a list of prime numbers.\"\"\"\n    return n in li\n\ndef g(li=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return li[0]\n\nassert f(g())\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Find if the given string is a palindrome\"\"\"\n    return string == string[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Find the indices of two numbers in a list that add up to a target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[2, 5, 3, 1, 6, 7, 8]):\n    return nums\nassert f(g())\n",
        "idx_generation": 330,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, lst=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Find a string in a list that is a substring of a given string\"\"\"\n    for word in lst:\n        if word in s:\n            return True\n    return False\ndef g(lst=['apple', 'banana', 'cherry']):\n    string = 'I love eating bananas'\n    return string\nassert f(g())\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string_list: List[str], target_len=5) -> bool:\n    \"\"\"Find a string in string_list that has a length equal to the target_len.\"\"\"\n    return any(len(string) == target_len for string in string_list)\ndef g(target_len=5):\n    string_list = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n    return string_list\nassert f(g())\n",
        "idx_generation": 332,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, substring='python') -> bool:\n    \"\"\"Check if a given substring exists in a string.\"\"\"\n    return substring in x\ndef g(substring='python'):\n    return \"I love python programming\"\nassert f(g())\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=15) -> bool:\n    \"\"\"Find a row or column in matrix whose elements sum up to the target_sum.\"\"\"\n    for row in matrix:\n        if sum(row) == target_sum:\n            return True\n    for col in zip(*matrix):\n        if sum(col) == target_sum:\n            return True\n    return False\ndef g(target_sum=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 332,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=5) -> bool:\n    \"\"\"Check if a given string is a palindrome and has a length greater than or equal to the target\"\"\"\n    return len(s) >= target and s == s[::-1]\ndef g(target=5):\n    return \"racecar\" if target <= 7 else \"level\"\nassert f(g())\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], target=10) -> bool:\n    \"\"\"Given a sequence of integers, find if there exist three numbers whose sum is equal to the target value.\"\"\"\n    for i in range(len(seq)):\n        for j in range(i + 1, len(seq)):\n            for k in range(j + 1, len(seq)):\n                if seq[i] + seq[j] + seq[k] == target:\n                    return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='banana', start=0) -> bool:\n    \"\"\"Find the index of the first occurrence of a target string within a given string, starting from a given index.\"\"\"\n    return s.find(target, start) == start\n\ndef g(target='banana', start=0):\n    return target\n\nassert f(g())\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Find the sum of the main diagonal elements in a square matrix.\"\"\"\n    return sum(matrix[i][i] for i in range(n)) == 15\ndef g(n=3):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, separator='-', reverse=False) -> bool:\n    \"\"\"Check if a string is a palindrome when split by a separator\"\"\"\n    if reverse:\n        string = string[::-1]\n    parts = string.split(separator)\n    return all(part == part[::-1] for part in parts)\ndef g(separator='-', reverse=False):\n    if not reverse:\n        return 'madam' + separator + 'racecar' + separator + 'level'\n    else:\n        return 'level' + separator + 'racecar' + separator + 'madam'\nassert f(g())\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, day=25) -> bool:\n    \"\"\"Find a date with a given day of the month\"\"\"\n    return date.day == day\n\ndef g(day=25):\n    return datetime.date.today().replace(day=day)\nassert f(g())\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='hello') -> bool:\n    \"\"\"Check if a given string contains a specific substring\"\"\"\n    return substr in s\ndef g(substr='hello'):\n    return substr + ' world'\nassert f(g())\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8, 10], upper_bound=100) -> bool:\n    \"\"\"Check if a number is greater than all numbers in a list up to an upper bound.\"\"\"\n    return all((n > i for i in lst)) and 0 < n <= upper_bound\ndef g(lst=[2, 4, 6, 8, 10], upper_bound=100):\n    return max(lst) + 1\nassert f(g())\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, y: str, a=\"Hello\", b=\"World\") -> bool:\n    \"\"\"Find a string x such that concatenating x and y results in the string a + \" \" + b\"\"\"\n    return x + y == a + \" \" + b\n\ndef g(a=\"Hello\", b=\"World\"):\n    x = a[:len(a)//2]\n    y = a[len(a)//2:] + \" \" + b\n    return x, y\n\nassert f(*g())\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(arr: list, target=10) -> bool:\n    \"\"\"Determine if there is a combination of 3 elements in the list that sum up to the target\"\"\"\n    return any(sum(comb) == target for comb in itertools.combinations(arr, 3))\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, lst=['cat', 'dog', 'rabbit', 'hamster', 'parrot']) -> bool:\n    \"\"\"Check if all substrings of length n are present in the list\"\"\"\n    substrings = [s[i:i+n] for i in range(len(s)-n+1)]\n    return all(substring in lst for substring in substrings)\n\ndef g(lst=['cat', 'dog', 'rabbit', 'hamster', 'parrot']):\n    return lst[0]\n\nassert f(g())\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=10) -> bool:\n    \"\"\"Check if n is divisible by a and b\"\"\"\n    return n % a == 0 and n % b == 0\n\ndef g(a=3, b=10):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a='python', b='programming') -> bool:\n    \"\"\"Check if a string contains two specified substrings\"\"\"\n    return a in x and b in x\ndef g(a='python', b='programming'):\n    return a + ' is a type of ' + b\nassert f(g())\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], length=5) -> bool:\n    \"\"\"Check if any name in the list has a length greater than or equal to the specified length\"\"\"\n    return any(len(name) >= length for name in names)\ndef g(length=5):\n    return [\"Alice\", \"Bob\", \"Charlie\", \"Dave\"]\nassert f(g())\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a', count=3) -> bool:\n    \"\"\"Check if the given character appears count times in the string, with no other characters in between.\"\"\"\n    return s.count(char) == count and char * count in s\ndef g(char='a', count=3):\n    return char * count\nassert f(g())\n",
        "idx_generation": 474,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(x: str, n=100) -> bool:\n    \"\"\"Check if the given string contains exactly n uppercase letters.\"\"\"\n    return len(x) == n and sum(1 for char in x if char.isupper()) == n\n\ndef g(n=100):\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    return ''.join(random.choices(alphabet, k=n))\n\nassert f(g())\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: list, n=5, m=2) -> bool:\n    \"\"\"Check if the given list contains exactly m occurrences of the number n.\"\"\"\n    return arr.count(n) == m\ndef g(n=5, m=2):\n    return [1, 2, 3, 4, 5, 5]\nassert f(g())\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, pattern='abacabadabacaba') -> bool:\n    \"\"\"Check if the given string follows the specified pattern\"\"\"\n    if len(s) != len(pattern):\n        return False\n    for i in range(len(s)):\n        if pattern[i] == 'a' and s[i] != 'a':\n            return False\n        if pattern[i] == 'b' and s[i] != 'b':\n            return False\n    return True\n\ndef g(pattern='abacabadabacaba'):\n    return pattern\n\nassert f(g())\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, fmt='%Y-%m-%d') -> bool:\n    \"\"\"Check if a given date string matches a specific format.\"\"\"\n    try:\n        datetime.strptime(date, fmt)\n        return True\n    except ValueError:\n        return False\n\ndef g(fmt='%Y-%m-%d'):\n    current_date = datetime.now()\n    return current_date.strftime(fmt)\n\nassert f(g())\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='hello') -> bool:\n    \"\"\"Check if the substring is present in the string.\"\"\"\n    return substr in string\ndef g(substr='hello'):\n    return \"Oh, hello there!\"\nassert f(g())\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, lst=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Given a list of integers lst and a number n, check if there exists a pair of numbers in lst such that their product is n.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if math.prod([lst[i], lst[j]]) == n:\n                return True\n    return False\ndef g(lst=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], n=24):\n    return n\nassert f(g())\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if all words in the list start with the given prefix.\"\"\"\n    return all(word.startswith(prefix) for word in words)\ndef g(prefix='pre'):\n    return [prefix + word for word in ['fix', 'fixes', 'fixed', 'fixing']]\nassert f(g())\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(guess: int, target=42) -> bool:\n    \"\"\"Guess the target number by following a simple rule:\n    if the guess is less than the target, return True; otherwise, return False.\"\"\"\n    return guess < target\n\ndef g(target=42):\n    return random.randint(1, target-1)\n\nassert f(g())\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, string='hello world', char='o') -> bool:\n    \"\"\"Check if the character 'o' appears exactly n times in the given string.\"\"\"\n    return string.count(char) == n\ndef g(string='hello world', char='o'):\n    return string.count(char)\nassert f(g())\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: float, a=100, b=200) -> bool:\n    \"\"\"Check if x is a random number between a and b (inclusive).\"\"\"\n    return a <= x <= b\n\ndef g(a=100, b=200):\n    return random.uniform(a, b)\n\nassert f(g())\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if a given string is a palindrome\"\"\"\n    return string == string[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=10, b=15) -> bool:\n    \"\"\"Check if x is divisible by both a and b.\"\"\"\n    return x % a == 0 and x % b == 0\n\ndef g(a=10, b=15):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str, s3: str, a='abcd', b='efgh', c='ijkl') -> bool:\n    \"\"\"Check if three strings can be combined to form a valid sentence.\"\"\"\n    return s1 + ' ' + s2 + ' ' + s3 == a + ' ' + b + ' ' + c\n\ndef g(a='abcd', b='efgh', c='ijkl'):\n    return a, b, c\n\nassert f(*g())\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if the given substring is present in the string.\"\"\"\n    return substr in s\ndef g(substr='python'):\n    return \"I love programming in \" + substr\nassert f(g())\n",
        "idx_generation": 479,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find a random sample of n numbers from the list\"\"\"\n    return len(random.sample(nums, n)) == n\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return random.randint(1, len(nums))\n\nassert f(g())\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], target=\"python\") -> bool:\n    \"\"\"Check if the target string is a substring of any of the strings in the list\"\"\"\n    return len([True for string in strings if target in string]) > 0\ndef g(target=\"python\"):\n    strings = [\"hello\", \"python\", \"world\", \"programming\"]\n    return [string for string in strings if target in string]\nassert f(g())\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x=5, y=10, z=15) -> bool:\n    \"\"\"Find the smallest n such that x multiplied by n is greater than y and z.\"\"\"\n    return n * x > y and n * x > z\ndef g(x=5, y=10, z=15):\n    n = 1\n    while n * x <= y or n * x <= z:\n        n += 1\n    return n\nassert f(g())\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string contains the specified character repeated n times consecutively.\"\"\"\n    return s.count('a'*n) > 0\ndef g(n=3):\n    return 'a'*n\nassert f(g())\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(x: datetime.datetime, year=2022, month=1, day=1) -> bool:\n    \"\"\"Check if the given date is in the future\"\"\"\n    return x > datetime.datetime(year, month, day)\n\ndef g(year=2022, month=1, day=1):\n    current_date = datetime.datetime.now()\n    return current_date + datetime.timedelta(days=365)\n\nassert f(g())\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, result=\"lorem ipsum dolor sit amet\") -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return s == result[::-1]\n\ndef g(result=\"lorem ipsum dolor sit amet\"):\n    return result[::-1]\nassert f(g())\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Check if a string can be made shorter to the target length\"\"\"\n    return len(s[:target_length]) < len(s)\ndef g(target_length=10):\n    return \"This is a long string that needs to be shortened\" * 100\nassert f(g())\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find a pair of integers in the array that sums up to the target value\"\"\"\n    return any(arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i + 1, len(arr)))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(result: str, year=2022) -> bool:\n    \"\"\"Check if the given date is the first day of a month in the given year.\"\"\"\n    return result == datetime.date(year, 1, 1).strftime('%Y-%m-%d')\ndef g(year=2022):\n    return datetime.date(year, 1, 1).strftime('%Y-%m-%d')\nassert f(g())\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=7) -> bool:\n    \"\"\"Check if the string is a palindrome and has length n\"\"\"\n    return len(s) == n and s == s[::-1]\ndef g(n=7):\n    return 'racecar'[:n]\nassert f(g())\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int, target=90) -> bool:\n    \"\"\"Check if the given number is a multiple of the target number\"\"\"\n    return num % target == 0\ndef g(target=90):\n    return math.factorial(target)\nassert f(g())\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='Python') -> bool:\n    \"\"\"Check if the target string is a substring of s in a case-insensitive manner.\"\"\"\n    return target.lower() in s.lower()\n\ndef g(target='Python'):\n    return 'I love programming in Python!'\n\nassert f(g())\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, l=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if a random number is in a list\"\"\"\n    return n in l\n\ndef g(l=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return random.choice(l)\n\nassert f(g())\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"Check if the given substring is present in the string.\"\"\"\n    return substr in string\ndef g(string='I love python programming'):\n    return string\nassert f(g())\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, threshold=0) -> bool:\n    \"\"\"Check if all elements in the array are greater than the threshold value\"\"\"\n    return np.all(arr > threshold)\n\ndef g(arr: np.ndarray, threshold=0):\n    return arr\n\narr = np.array([1, 2, 3, 4, 5])\nassert f(g(arr, threshold=0))\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='hello') -> bool:\n    \"\"\"Given a string, check if a specific substring is present in it.\"\"\"\n    return substring in s\ndef g(substring='hello'):\n    return 'This is a string that contains the word ' + substring\nassert f(g())\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k: int, a=4, b=2) -> bool:\n    \"\"\"Find if n is divisible by b and is a multiple of k when multiplied by a\"\"\"\n    return n % b == 0 and n * a % k == 0\ndef g(a=4, b=2, k=12):\n    return k * b\nassert f(g(), k=12)\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the target string is a substring of the given string in a case-insensitive manner.\"\"\"\n    return target.lower() in s.lower()\ndef g(target='python'):\n    s = 'I love Python programming!'\n    return s\nassert f(g())\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], a=123, b=456, c=789, d=101112) -> bool:\n    \"\"\"Check if a list is a palindrome\"\"\"\n    return x == x[::-1]\ndef g(a=123, b=456, c=789, d=101112):\n    return [a, b, c, d, c, b, a]\nassert f(g())\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if the given string is a palindrome when reversed and ignoring non-alphabetic characters\"\"\"\n    s = ''.join(char.lower() for char in s if char.isalpha())\n    return s == s[::-1]\ndef g(s=\"A man, a plan, a canal, Panama!\"):\n    return s\nassert f(g())\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: list, target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target number\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return numbers\nassert f(g())\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, separator=' ') -> bool:\n    \"\"\"Check if the given string is a palindrome when the separator is removed\"\"\"\n    words = s.split(separator)\n    joined_string = ''.join(words)\n    return joined_string == joined_string[::-1]\n\ndef g(separator=' '):\n    return 'a b c d e f e d c b a'\n\nassert f(g())\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: list, n=7) -> bool:\n    \"\"\"Check if the sum of the elements in the list is equal to n\"\"\"\n    return sum(lst) == n\n\ndef g(n=7):\n    return [1, 2, 4]\n\nassert f(g())\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi']) -> bool:\n    \"\"\"Check if a string contains all the given substrings\"\"\"\n    return all(substring in s for substring in substrings)\ndef g(substrings=['abc', 'def', 'ghi']):\n    s = 'abcdefghixyz' # A random string containing all the given substrings\n    return s\nassert f(g())\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: list) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(lst=[2, 3, 5, 7, 11, 13]):\n    return 17\n\nassert f(g(), g(lst=[2, 3, 5, 7, 11, 13]) )\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: list) -> bool:\n    \"\"\"Check if the sum of the first and last elements of a list is equal to the sum of the second and second-to-last elements\"\"\"\n    return lst[0] + lst[-1] == lst[1] + lst[-2]\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=10) -> bool:\n    \"\"\"Find a pair of elements in the matrix that sums up to the target_sum\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[0])):\n                    if matrix[i][j] + matrix[k][l] == target_sum:\n                        return True\n    return False\n\ndef g(target_sum=10):\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], max_length=5) -> bool:\n    \"\"\"Check if any word in the list has a length greater than the max_length\"\"\"\n    for word in words:\n        if len(word) > max_length:\n            return True\n    return False\n\ndef g(max_length=5):\n    words = [\"apple\", \"banana\", \"car\", \"dog\", \"elephant\"]\n    return words\n\nassert f(g())\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nassert f(g())\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int, n=100) -> bool:\n    \"\"\"Check if a number is a perfect square and a multiple of another number\"\"\"\n    return math.isqrt(num)**2 == num and num % n == 0\n\ndef g(n=100):\n    return n**2\n\nassert f(g())\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers, find a subset of the list that sums up to the target value.\"\"\"\n    return sum(numbers) == target\ndef g(target=100):\n    return [target]\nassert f(g())\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Check if the given number is present in the list.\"\"\"\n    return n in nums\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return max(nums)\nassert f(g())\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target=7) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers that sums up to a specific target.\n- x is the list of integers\n- target is the specific target value\"\"\"\n    for i in range(len(x)):\n        for j in range(i + 1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False\ndef g(target=7):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g())\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=5, c=10, d=20, e=50) -> bool:\n    \"\"\"Find a combination of the given denominations that can add up to the given number.\"\"\"\n    return any(n == i*a + j*b + k*c + l*d + m*e for i in range(n//a + 1) for j in range(n//b + 1) for k in range(n//c + 1) for l in range(n//d + 1) for m in range(n//e + 1))\ndef g(a=2, b=5, c=10, d=20, e=50):\n    return a + b + c + d + e\nassert f(g())\n",
        "idx_generation": 354,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=6, b=9, c=-4) -> bool:\n    \"\"\"Find n that satisfies the equation a * b + c == n\"\"\"\n    return a * b + c == n\ndef g(a=6, b=9, c=-4):\n    return a * b + c\nassert f(g())\n",
        "idx_generation": 355,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(d: Dict[str, int], key='b') -> bool:\n    \"\"\"Return True if the value corresponding to the given key in a dictionary is divisible by 3.\"\"\"\n    return d[key] % 3 == 0\ndef g(key='b'):\n    return {'a': 5, 'b': 12, 'c': 6}\nassert f(g())\n",
        "idx_generation": 356,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target_sum\"\"\"\n    return any((x + y == target_sum for x in numbers for y in numbers))\ndef g():\n    return [10, 20, 30, 40, 50]\nassert f(g())\n",
        "idx_generation": 357,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Determine if there exists a subarray in the list where the sum of its elements is divisible by k.\"\"\"\n    return any(sum(arr[i:j]) % k == 0 for i in range(len(arr)) for j in range(i+1, len(arr)+1))\ndef g(k=3):\n    import random\n    arr = random.choices(range(1, 101), k=10)\n    return arr\nassert f(g())\n",
        "idx_generation": 358,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there are three numbers in the given list that add up to the target sum\"\"\"\n    return any((arr[i] + arr[j] + arr[k] == target_sum for i in range(len(arr)) for j in range(i+1, len(arr)) for k in range(j+1, len(arr))))\ndef g(target_sum=100):\n    return [10, 20, 30, 40, 50]\nassert f(g())\n",
        "idx_generation": 358,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 7, 9, 10, 14, 18, 20, 25, 30, 35], upper_bound=100) -> bool:\n    \"\"\"Determine if a number is a sum of two distinct elements from a list of integers.\"\"\"\n    return any((n - i in nums and n - i != i for i in nums)) and 0 < n <= upper_bound\ndef g(nums=[2, 7, 9, 10, 14, 18, 20, 25, 30, 35], upper_bound=100):\n    return nums[0] + nums[1]\nassert f(g())\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=17) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=17):\n    return [5, 12, 3, 8, 9]\nassert f(g())\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that multiply to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] * nums[j] * nums[k] == target:\n                    return True\n    return False\ndef g(target=100):\n    return [2, 5, 10, 4, 20]\nassert f(g())\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, key: int, lst: List[int]) -> bool:\n    \"\"\"Check if the sum of any two distinct elements in the list 'lst' equals 'key'\"\"\"\n    return any(x + y == key for i, x in enumerate(lst) for y in lst[i+1:])\ndef g(n=2, key=10, lst=[2, 4, 6, 8]):\n    return n, key, lst\nassert f(*g())\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=17) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [3, 5, 8, 10, 12, 15]\n\nassert f(g())\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"Find if there exists a subarray in the list that sums up to the target\"\"\"\n    n = len(arr)\n    for i in range(n):\n        cur_sum = arr[i]\n        j = i + 1\n        while j <= n:\n            if cur_sum == target:\n                return True\n            if cur_sum > target or j == n:\n                break\n            cur_sum += arr[j]\n            j += 1\n    return False\ndef g(target=5):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0, count=3) -> bool:\n    \"\"\"Find a list of count or more numbers whose sum is equal to the target\"\"\"\n    return sum(nums) == target and len(nums) >= count\ndef g(target=0, count=3):\n    return [target] * count\nassert f(g())\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a list of numbers where the sum of the numbers is equal to the target\"\"\"\n    return sum(nums) == target\n\ndef g(target=0):\n    return [1, -2, 3, -4, 5] * (target // 5) + [1] * (target % 5)\nassert f(g())\n",
        "idx_generation": 364,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], length=5) -> bool:\n    \"\"\"Check if there exists a word in the list that is longer than the specified length and starts with the same letter\n    as the last letter of the previous word.\n    - words is a list of strings\n    - length is the minimum length of the word\"\"\"\n    last_letter = ''\n    for word in words:\n        if len(word) > length and word[0] == last_letter:\n            return True\n        last_letter = word[-1]\n    return False\ndef g(words: List[str], length=5):\n    return words\nassert f(g([\"apple\", \"elephant\", \"tiger\", \"rabbit\", \"turtle\"]), length=4)\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char_count=5) -> bool:\n    \"\"\"Check if the string s contains exactly char_count number of unique characters\"\"\"\n    unique_chars = set(s)\n    return len(unique_chars) == char_count\n\ndef g(char_count=5):\n    chars = ['a', 'b', 'c', 'd', 'e']\n    s = ''.join(chars)\n    return s\n\nassert f(g())\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(d: datetime, a=2022, b=6, c=15) -> bool:\n    \"\"\"Check if a date is a specific day\"\"\"\n    return d.year == a and d.month == b and d.day == c\ndef g(a=2022, b=6, c=15):\n    return datetime(a, b, c)\nassert f(g())\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Find a number that is divisible by all the given prime numbers.\"\"\"\n    return all(n % p == 0 for p in primes)\ndef g(primes=[2, 3, 5, 7, 11, 13]):\n    from functools import reduce\n    from operator import mul\n    return reduce(mul, primes)\nassert f(g())\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=50):\n    return [x for x in range(1, target)]\nassert f(g())\n",
        "idx_generation": 367,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=200000) -> bool:\n    \"\"\"Finding Three Numbers\nGiven a list of integers, find three numbers such that their sum is equal to the target value.\n\"\"\"\n    n = len(arr)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\ndef g(target=200000):\n    return [100000, 50000, 50000]\nassert f(g())\n",
        "idx_generation": 368,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=15) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target value\"\"\"\n    return any([arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr))])\ndef g(target=15):\n    return [5, 10, 3, 8, 2]\nassert f(g())\n",
        "idx_generation": 368,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10) -> bool:\n    \"\"\"Check if a number is divisible by the sum of its digits.\"\"\"\n    return n % sum(int(digit) for digit in str(n)) == 0\ndef g(a=10):\n    return a * 9\nassert f(g())\n",
        "idx_generation": 370,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"Check if a number is within a certain range\"\"\"\n    return target - 10 <= n <= target + 10\ndef g(target=100):\n    return target\nassert f(g())\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_value=15) -> bool:\n    \"\"\"Given a 3x3 matrix of integers, find a row, column, or diagonal whose sum is equal to the target value.\"\"\"\n    for row in matrix:\n        if sum(row) == target_value:\n            return True\n    for col in range(3):\n        if sum(matrix[i][col] for i in range(3)) == target_value:\n            return True\n    if sum(matrix[i][i] for i in range(3)) == target_value:\n        return True\n    if sum(matrix[i][2-i] for i in range(3)) == target_value:\n        return True\n    return False\n\ndef g(target_value=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Find a combination of numbers in the list that adds up to the target sum.\"\"\"\n    n = len(numbers)\n    for i in range(1, 2**n):\n        subset = [numbers[j] for j in range(n) if (i & (1 << j)) != 0]\n        if sum(subset) == target_sum:\n            return True\n    return False\n\ndef g(target_sum=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=100) -> bool:\n    \"\"\"Check if n is divisible by m\"\"\"\n    return n % m == 0\n\ndef g(m=100):\n    return m * 5\n\nassert f(g())\n",
        "idx_generation": 375,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(l: list, target=10) -> bool:\n    \"\"\"Find two numbers in a list that add up to a target number\"\"\"\n    return any((l[i] + l[j] == target for i in range(len(l)) for j in range(i+1, len(l))))\ndef g(target=10):\n    return [2, 8]\nassert f(g())\n",
        "idx_generation": 375,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    return n in primes\n\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return 13\n\nassert f(g())\n",
        "idx_generation": 378,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that sum up to the target value\"\"\"\n    return any(target - num in row for row in matrix for num in row)\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Given a list of integers, find two numbers such that their sum is equal to the target.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(nums=[4, 7, 3, 9, 11, 5, 2]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=15) -> bool:\n    \"\"\"Find two numbers in a list that add up to a target value\"\"\"\n    return any(arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr)))\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nassert f(g())\n",
        "idx_generation": 380,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there are exactly k duplicate numbers in a list\"\"\"\n    return any(nums.count(n) == k for n in nums)\ndef g(k=3):\n    return [1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 7]\nassert f(g())\n",
        "idx_generation": 380,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Given a list of numbers, find a pair of numbers that sum up to the target value.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the given number is divisible by m without any remainder\"\"\"\n    return n % m == 0\n\ndef g(m=10):\n    return m * 2\n\nassert f(g())\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, char='a') -> bool:\n    \"\"\"Check if a given character is present in a given word\"\"\"\n    return char in word.lower()\ndef g(char='a'):\n    return 'apple' if char == 'a' else 'banana'\nassert f(g())\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(ls: List[str], n=3) -> bool:\n    \"\"\"Find a list of characters whose length is equal to n\"\"\"\n    return len(ls) == n\ndef g(n=3):\n    return ['a'] * n\nassert f(g())\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=50) -> bool:\n    \"\"\"Find two integers whose product is n\"\"\"\n    return any(a * b == n for a in nums for b in nums if a != b)\ndef g(n=50):\n    return [5, 10]\nassert f(g())\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: list, target=10) -> bool:\n    \"\"\"Check if there exists two elements in the list whose sum is equal to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 384,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, numbers=[4, 1, 6, 2, 8, 3, 9, 5, 7]) -> bool:\n    \"\"\"Check if a number is present in the list and is divisible by n.\"\"\"\n    return n in numbers and n % 2 == 0\ndef g(numbers=[4, 1, 6, 2, 8, 3, 9, 5, 7]):\n    for num in numbers:\n        if num % 2 == 0:\n            return num\nassert f(g())\n",
        "idx_generation": 384,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, days=30) -> bool:\n    \"\"\"Check if the given date is n days from today.\"\"\"\n    today = datetime.date.today()\n    target_date = datetime.datetime.strptime(date, '%Y-%m-%d').date()\n    difference = (target_date - today).days\n    return difference == days\n\ndef g(days=30):\n    target_date = datetime.date.today() + datetime.timedelta(days=days)\n    return target_date.strftime('%Y-%m-%d')\n\nassert f(g())\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there are two numbers in the array that sum up to the target sum\"\"\"\n    return any((target_sum - x) in arr for x in arr)\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(m=5):\n    return 7\nassert f(g())\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, length=10) -> bool:\n    \"\"\"Find a string that has a length of exactly 10 characters\"\"\"\n    return len(s) == length\ndef g(length=10):\n    return 'a' * length\nassert f(g())\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\ndef f(x: datetime.datetime, a=datetime.datetime(2022, 1, 1), b=datetime.datetime(2023, 1, 1)) -> bool:\n    \"\"\"Check if the given date is between the two given dates (inclusive)\"\"\"\n    return a <= x <= b\ndef g(a=datetime.datetime(2022, 1, 1), b=datetime.datetime(2023, 1, 1)):\n    return a + datetime.timedelta(days=1)\nassert f(g())\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[5, 3, 8, 2, 7]) -> bool:\n    \"\"\"Find if there are two numbers in the list that sum up to n\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == n:\n                return True\n    return False\n\ndef g(nums=[5, 3, 8, 2, 7]):\n    return nums[0] + nums[1]\n    \nassert f(g())\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, x=5) -> bool:\n    \"\"\"Check if all numbers in a given list are divisible by x.\"\"\"\n    return all(num % x == 0 for num in s)\ndef g(s=[10, 15, 20, 25, 30], x=5):\n    return s\nassert f(g())\n",
        "idx_generation": 390,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=15) -> bool:\n    \"\"\"Given a list of integers and a target sum, determine if there are three integers in the list that add up to the target sum.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target_sum) for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(target_sum=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 390,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, target=15) -> bool:\n    \"\"\"Given a list of numbers, find a pair of numbers that sum up to the target value.\"\"\"\n    num_set = set(x)\n    for num in x:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g():\n    return [4, 7, 9, 2, 3, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 391,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "idx_generation": 392,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=50) -> bool:\n    \"\"\"Check if there exists a pair of elements in the array that sum up to the target value\"\"\"\n    return any(arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr)))\ndef g(target=50):\n    return np.array([10, 20, 30, 40, target-100])\nassert f(g())\n",
        "idx_generation": 392,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all the numbers in the list are positive\"\"\"\n    return all((num > 0 for num in nums))\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: list, y: int, n=10) -> bool:\n    \"\"\"Check if the sum of the first n elements in a list is equal to a given number.\"\"\"\n    return sum(x[:n]) == y\ndef g(n=10):\n    return [i for i in range(1, n+1)]\nassert f(g(), 55)\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, find if there exists a pair of numbers whose sum is equal to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Given a list of integers nums and a target integer, find if there are two numbers in nums such that their sum equals to target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(nums=[2, 7, 11, 15], target=9):\n    return nums\nassert f(g())\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=2) -> bool:\n    \"\"\"Return True if there are two distinct indices i and j in the list arr, such that arr[i] = arr[j] + k\"\"\"\n    num_set = set(arr)\n    for num in arr:\n        if num + k in num_set:\n            return True\n    return False\n\ndef g(k=2):\n    return [1, 3, 5, 9, 11]\n\nassert f(g())\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int], target=29) -> bool:\n    \"\"\"Find a combination of 3 numbers in the list that sums up to the target\"\"\"\n    return any(sum(combination) == target for combination in itertools.combinations(nums, 3))\n\ndef g(nums=[10, 5, 7, 12, 3, 20, 15]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=7) -> bool:\n    \"\"\"Check if a number is divisible by either a or b\"\"\"\n    return n % a == 0 or n % b == 0\n\ndef g(a=5, b=7):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: list, n=5) -> bool:\n    \"\"\"Find the sum of the first n elements in a list.\"\"\"\n    return sum(x[:n]) == 15\ndef g(n=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=4, n=10) -> bool:\n    \"\"\"Find a subarray of length k in arr that sums up to n\"\"\"\n    return any([sum(arr[i:i+k]) == n for i in range(len(arr)-k+1)])\ndef g(k=4, n=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, divisors=[2, 3, 5]) -> bool:\n    \"\"\"Check if the given number is divisible by all the specified divisors.\"\"\"\n    return all(num % d == 0 for d in divisors)\n\ndef g(divisors=[2, 3, 5]):\n    num = 1\n    for d in divisors:\n        num *= d\n    return num\n\nassert f(g())\n",
        "idx_generation": 406,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3], total_sum=6) -> bool:\n    \"\"\"Find a list of numbers whose sum is equal to total_sum\"\"\"\n    return sum(lst) == total_sum\ndef g(lst=[1, 2, 3], total_sum=6):\n    lst.append(total_sum - sum(lst))\n    return lst\nassert f(g())\n",
        "idx_generation": 406,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 407,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=5, b=10, c=15) -> bool:\n    \"\"\"Check if the sum of three numbers is equal to 'x'\"\"\"\n    return x == a + b + c\ndef g(a=5, b=10, c=15):\n    return a + b + c\nassert f(g())\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there are three numbers in the list whose sum is equal to the target number.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums))))\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(average: float, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find the average of all numbers that are divisible by 3\"\"\"\n    divisible_by_3 = [num for num in nums if num % 3 == 0]\n    return average == sum(divisible_by_3) / len(divisible_by_3)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    divisible_by_3 = [num for num in nums if num % 3 == 0]\n    return sum(divisible_by_3) / len(divisible_by_3)\nassert f(g())\n",
        "idx_generation": 409,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], a=-50, b=50, count=10) -> bool:\n    \"\"\"Find a list of count or more different numbers each between a and b that are divisible by 5\"\"\"\n    assert all((n % 5 == 0 for n in nums))\n    return len(set(nums)) >= count\ndef g(a=-50, b=50, count=10):\n    return [n for n in range(a, b + 1) if n % 5 == 0]\nassert f(g())\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: list, target=10) -> bool:\n    \"\"\"Check if any two numbers in a list sum up to a target value\"\"\"\n    return any(arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr)))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find two integers that sum up to the target value.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 5, 8]\n\nassert f(g())\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=10) -> bool:\n    \"\"\"Find a subarray of arr whose sum is equal to k.\"\"\"\n    return any(sum(arr[i:j]) == k for i in range(len(arr)) for j in range(i+1, len(arr)+1))\ndef g(k=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the number n is present in the list lst.\"\"\"\n    return n in lst\ndef g(lst=[1, 2, 3, 4, 5]):\n    n = random.choice(lst)\n    return n\nassert f(g())\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(d: dict, key='name', value='Alice') -> bool:\n    \"\"\"Check if the dictionary d has a key-value pair where the key is 'name' and the value is 'Alice'.\"\"\"\n    return d.get(key) == value\ndef g(key='name', value='Alice'):\n    d = {key: value}\n    return d\nassert f(g())\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, lst1=[7, 5, 3, 1], lst2=[1, 3, 5, 7]) -> bool:\n    \"\"\"Check if two lists are equal when reversed\"\"\"\n    return lst1[::-1] == lst2\ndef g(lst1=[7, 5, 3, 1], lst2=[1, 3, 5, 7]):\n    return lst1[::-1]\nassert f(g())\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that adds up to the target value.\"\"\"\n    return sum(nums) == target and len(nums) > 1\ndef g(target=100):\n    return [50, 25, 10, 15]\nassert f(g())\n",
        "idx_generation": 412,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: list, target=8) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers in the list that sums up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr=[2, 5, 3, 1, 6]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr: list) -> bool:\n    \"\"\"Given a list of integers, find if there exists a subarray in the list whose sum is equal to n.\"\"\"\n    for i in range(len(arr)):\n        sum = 0\n        for j in range(i, len(arr)):\n            sum += arr[j]\n            if sum == n:\n                return True\n    return False\n\ndef g(arr=[2, 4, -2, 1, 3]):\n    return arr\n\nassert f(3, g())\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, num_digits=4, target=5) -> bool:\n    \"\"\"Find the sum of all integers with `num_digits` number of digits that are divisible by `target`\"\"\"\n    return result == sum(i for i in range(10**(num_digits-1), 10**num_digits) if i % target == 0)\ndef g(num_digits=4, target=5):\n    return sum(i for i in range(10**(num_digits-1), 10**num_digits) if i % target == 0)\nassert f(g())\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target number.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target) for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(nums=[5, 8, 3, 12, 9, 6, 7]):\n    return nums\nassert f(g())\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    return n in primes\ndef g():\n    return 7\nassert f(g())\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find Three Numbers that Sum to Target\nGiven a list of numbers, find three numbers in the list that sum up to the target value.\n\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=15):\n    return [1, 2, target-3]\n\nassert f(g())\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(ans: List[int], target=100) -> bool:\n    \"\"\"Find a list of integers where the sum of the numbers is a given constant\"\"\"\n    return sum(ans) == target\ndef g(target=100):\n    return [2, 5, 10, 20, 50, 13]\nassert f(g())\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(cards: List[int]) -> bool:\n    \"\"\"Determine if a list of cards contains a pair of cards that sum up to 10.\"\"\"\n    return any(i+j == 10 for i in cards for j in cards if i != j)\n    \ndef g():\n    random.seed(0)\n    return random.sample(range(1, 11), 6)\n\nassert f(g())\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Find if any pair of numbers in the list sums up to the target value.\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [50, 25, 75]\n\nassert f(g())\n",
        "idx_generation": 415,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums: List[int], target=0):\n    return nums\n\nassert f(g([1, 2, 3, 4, 5]), target=9)\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(li: List[int], target=15) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target\"\"\"\n    from itertools import combinations\n    return any([sum(comb) == target for comb in combinations(li, 3)])\ndef g(target=15):\n    li = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return li\nassert f(g())\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target value.\"\"\"\n    return any(x * y == target for x in lst for y in lst)\ndef g(target=10):\n    return [2, 5, 3, 1, 4]\nassert f(g())\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, lst=[2, 3, 5, 7]) -> bool:\n    \"\"\"Check if a given number is divisible by all elements in a list.\"\"\"\n    divisible = True\n    for n in lst:\n        if num % n != 0:\n            divisible = False\n            break\n    return divisible\ndef g(lst=[2, 3, 5, 7]):\n    num = 1\n    for n in lst:\n        num *= n\n    return num\nassert f(g())\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\ndef f(date_str: str, format_str='%Y-%m-%d') -> bool:\n    \"\"\"Check if a date string matches a specific format.\"\"\"\n    try:\n        datetime.strptime(date_str, format_str)\n        return True\n    except ValueError:\n        return False\ndef g(format_str='%Y-%m-%d'):\n    return datetime.now().strftime(format_str)\nassert f(g())\n",
        "idx_generation": 420,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 5, 8, 10, 15, 20, 25, 30]) -> bool:\n    \"\"\"Find if n is divisible by all numbers in the given list\"\"\"\n    return all(n % num == 0 for num in nums)\ndef g(nums=[2, 5, 8, 10, 15, 20, 25, 30]):\n    n = 1\n    for num in nums:\n        n *= num\n    return n\nassert f(g())\n",
        "idx_generation": 420,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, strings=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Given an integer n and a list of strings, determine if there exists a pair of strings whose lengths sum up\nto n.\"\"\"\n    lengths = set(len(s) for s in strings)\n    for length in lengths:\n        if n - length in lengths:\n            return True\n    return False\n\ndef g(strings=['apple', 'banana', 'cherry', 'date']):\n    return strings\n\nassert f(8, g())\n",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 422,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50, threshold=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose difference is less than or equal to the threshold\"\"\"\n    return any(abs(a - b) <= threshold for i, a in enumerate(nums) for b in nums[i+1:])\ndef g(target=50, threshold=5):\n    return list(range(target - threshold, target + threshold + 1))\nassert f(g())\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: list, target=5) -> bool:\n    \"\"\"Check if the sum of any two elements in the list is equal to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst\nassert f(g())\n",
        "idx_generation": 425,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Find a list of integers where the sum of the first half is equal to the sum of the second half.\"\"\"\n    return sum(li[:len(li)//2]) == sum(li[len(li)//2:])\ndef g():\n    return [1, 2, 3, 4, 5, 5, 4, 3, 2, 1]\nassert f(g())\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, max_nums=2, options=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is equal to the target value.\"\"\"\n    for n in nums:\n        assert n in options\n    return len(nums) <= max_nums and sum(nums) == target\ndef g(target=10, max_nums=2, options=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    from itertools import combinations\n    for n in range(max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.datetime) -> bool:\n    \"\"\"Check if the given date is a leap year.\"\"\"\n    return date.year % 4 == 0 and (date.year % 100 != 0 or date.year % 400 == 0)\n\ndef g():\n    \"\"\"Return a datetime object representing a leap year.\"\"\"\n    leap_year = datetime.datetime(2020, 2, 29)\n    return leap_year\n\nassert f(g())\n",
        "idx_generation": 428,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target value.\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\nassert f(g())\n",
        "idx_generation": 429,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_row_sum=15) -> bool:\n    \"\"\"Check if the sum of numbers in each row of a matrix is equal to the target sum.\"\"\"\n    for row in matrix:\n        if sum(row) != target_row_sum:\n            return False\n    return True\ndef g(target_row_sum=15):\n    return [[3, 4, 8], [2, 5, 8], [1, 6, 8]]\nassert f(g())\n",
        "idx_generation": 429,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, n=5, m=10) -> bool:\n    \"\"\"Given two integers n and m, check if x is within the range [n, m] (inclusive)\"\"\"\n    return n <= x <= m\ndef g(n=5, m=10):\n    return (n + m) // 2\nassert f(g())\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7]) -> bool:\n    \"\"\"Find a number n that is divisible by all the prime numbers in the list primes.\"\"\"\n    return all(n % p == 0 for p in primes)\ndef g(primes=[2, 3, 5, 7]):\n    n = 1\n    while True:\n        if f(n, primes):\n            return n\n        n += 1\nassert f(g())\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: list, target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the list that sums up to the target value.\"\"\"\n    for i in range(len(nums)):\n        curr_sum = 0\n        for j in range(i, len(nums)):\n            curr_sum += nums[j]\n            if curr_sum == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [-1, 2, 3, -4, 0]\n\nassert f(g())\n",
        "idx_generation": 432,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10):\n    \"\"\"Find two elements in the list that sum up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    arr = [2, 4, 6, 8, 10, 12]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 433,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23]) -> bool:\n    \"\"\"Check if a number is divisible by the product of a list of primes\"\"\"\n    return all(n % p == 0 for p in primes)\n\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23]):\n    return math.prod(primes)\n    \nassert f(g())\n",
        "idx_generation": 434,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists three distinct integers in a list such that their sum is equal to 0\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == 0:\n                    return True\n    return False\ndef g():\n    return [1, -1, 2, -2, 3, -3]\nassert f(g())\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=20, max_nums=2, options=[5, 7, 3, 10, 2, 20, 15, 8, 12]) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose sum is the target value.\"\"\"\n    for n in nums:\n        assert n in options\n    return len(nums) <= max_nums and sum(nums) == target\ndef g(target=20, max_nums=2, options=[5, 7, 3, 10, 2, 20, 15, 8, 12]):\n    from itertools import combinations_with_replacement\n    for n in range(max_nums + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 437,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=99) -> bool:\n    \"\"\"Check if the target number exists in the matrix\"\"\"\n    return any((target in row) for row in matrix)\ndef g(target=99):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target]]\nassert f(g())\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Given a list of integers, find an n such that n is in the list.\"\"\"\n    return n in lst\ndef g(lst=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return random.choice(lst)\nassert f(g())\n",
        "idx_generation": 439,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=6) -> bool:\n    \"\"\"Given a list of numbers, find two numbers that sum up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: list, target_sum=100) -> bool:\n    \"\"\"Find a combination of elements in the list that sums up to the target_sum\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False\n\ndef g(lst=[random.randint(1, 99) for _ in range(10)]):\n    return lst\n\nassert f(g())\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=4, c=5, d=6) -> bool:\n    \"\"\"Check if n is divisible by a, b, c, and d\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0 and n % d == 0\n\ndef g(a=3, b=4, c=5, d=6):\n    return a * b * c * d\n\nassert f(g())\n",
        "idx_generation": 442,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Check if the given number is present in the matrix\"\"\"\n    return any(n in row for row in matrix)\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix[1][1]\nassert f(g())\n",
        "idx_generation": 442,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=5):\n    return [1, 4, 3, 2]\n\nassert f(g())\n",
        "idx_generation": 443,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Given a matrix of integers and a target number, find if there exists a submatrix such that the sum of all its elements equals the target.\nSample Input:\n`[[1, 2, 3], [4, 5, 6], [7, 8, 9]]`\nSample Output:\n`True`\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    prefixSum = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            prefixSum[i][j] = prefixSum[i - 1][j] + prefixSum[i][j - 1] - prefixSum[i - 1][j - 1] + matrix[i - 1][j - 1]\n    for i in range(m):\n        for j in range(n):\n            for x in range(i + 1, m + 1):\n                for y in range(j + 1, n + 1):\n                    if prefixSum[x][y] - prefixSum[i][y] - prefixSum[x][j] + prefixSum[i][j] == target:\n                        return True\n    return False\ndef g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [target - 10, target - 15, target - 6]]\nassert f(g())\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(dt: datetime, year=2022, month=1, day=1) -> bool:\n    \"\"\"Check if the given datetime is later than or equal to the specified year, month, and day.\"\"\"\n    return dt >= datetime(year, month, day)\ndef g(year=2022, month=1, day=1):\n    return datetime(year, month, day)\nassert f(g())\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists three numbers in a list that sum up to a target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=10):\n    return [1, 2, target-3, 4, 5]\nassert f(g())\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=2) -> bool:\n    \"\"\"Find a number `n` such that (n^2 + a) / b is a prime number\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    return (n ** 2 + a) % b == 0 and is_prime((n ** 2 + a) / b)\ndef g(a=5, b=2):\n    n = 1\n    while True:\n        if (n ** 2 + a) % b == 0:\n            return n\n        n += 1\nassert f(g())",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='puzzle') -> bool:\n    \"\"\"Check if the given string contains the given substring.\"\"\"\n    return substring in string\n\ndef g(substring='puzzle'):\n    string = \"This is a puzzle for you to solve!\"\n    return string\n\nassert f(g())\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisor=7) -> bool:\n    \"\"\"Check if n is divisible by the given divisor.\"\"\"\n    return n % divisor == 0\n\ndef g(divisor=7):\n    return 42\nassert f(g())\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=2.71828, b=3.14159) -> bool:\n    \"\"\"Check if the given number is between e and pi\"\"\"\n    return a < x < b\n\ndef g(a=2.71828, b=3.14159):\n    return (a + b) / 2\n\nassert f(g())\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: list, n=3) -> bool:\n    \"\"\"Check if a list contains a specific number of elements\"\"\"\n    return len(lst) == n\ndef g(n=3):\n    lst = [random.randint(1, 10) for _ in range(n)]\n    return lst\nassert f(g())\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: list, target_sum=100, count=5) -> bool:\n    \"\"\"Check if a list contains count number of elements that add up to a target sum\"\"\"\n    return sum(lst) == target_sum and len(lst) == count\n\ndef g(target_sum=100, count=5):\n    lst = []\n    while len(lst) < count-1:\n        num = random.randint(1, target_sum-count+1)\n        lst.append(num)\n    lst.append(target_sum - sum(lst))\n    return lst\n\nassert f(g())\n",
        "idx_generation": 449,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6]):\n    return nums\nassert f(g())\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there exists three numbers in the list that add up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\ndef g(target=100):\n    return [1, 2, target-3]\nassert f(g())\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists two numbers in the list such that their sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [target - 5, 5]\nassert f(g())\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='a', b='z', count=5) -> bool:\n    \"\"\"Find a list of count or more different characters each between a and b that appear in the string s\"\"\"\n    assert all((a <= c <= b for c in s))\n    return len(set(s)) >= count\ndef g(s, a='a', b='z', count=5):\n    return [c for c in set(s) if a <= c <= b]\nassert f(g('hello world'))\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(year: int, month=12, day=1, hour=0, minute=0, second=0) -> bool:\n    \"\"\"Check if the specified date and time is a Sunday\"\"\"\n    dt = datetime.datetime(year, month, day, hour, minute, second)\n    return dt.weekday() == 6\ndef g(month=12, day=1, hour=0, minute=0, second=0):\n    current_year = datetime.datetime.now().year\n    for year in range(current_year, current_year + 10):\n        dt = datetime.datetime(year, month, day, hour, minute, second)\n        if dt.weekday() == 6:\n            return year\nassert f(g())\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, prime_set={2, 3, 5, 7, 11, 13, 17, 19, 23, 29}) -> bool:\n    \"\"\"Find a number that is not divisible by any prime number in the set {2, 3, 5, 7, 11, 13, 17, 19, 23, 29}.\"\"\"\n    for prime in prime_set:\n        if num % prime == 0:\n            return False\n    return True\ndef g(prime_set={2, 3, 5, 7, 11, 13, 17, 19, 23, 29}):\n    num = max(prime_set) + 1\n    while True:\n        if f(num):\n            return num\n        num += 1\nassert f(g())\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, prime_factor=2) -> bool:\n    \"\"\"Find a number n such that the largest prime factor of n is equal to the given prime_factor.\"\"\"\n    def largest_prime_factor(num):\n        while num % 2 == 0:\n            num = num // 2\n        for i in range(3, int(math.sqrt(num)) + 1, 2):\n            while num % i == 0:\n                num = num // i\n        if num > 2:\n            return num\n        return 2\n    return largest_prime_factor(n) == prime_factor\ndef g(prime_factor=2):\n    num = prime_factor\n    while True:\n        if f(num, prime_factor):\n            return num\n        num += prime_factor\nassert f(g())\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, nums=[3, 7, 11, 15, 19, 23, 27, 31, 35, 39]) -> bool:\n    \"\"\"Check if x is a prime number\"\"\"\n    if x < 2:\n        return False\n    for num in nums:\n        if x % num == 0:\n            return False\n    return True\n\ndef g(nums=[3, 7, 11, 15, 19, 23, 27, 31, 35, 39]):\n    x = nums[-1] + 2\n    while not f(x, nums):\n        x += 2\n    return x\n\nassert f(g())\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in nums that sum up to target\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the sum of all elements in the matrix is greater than n\"\"\"\n    return sum([sum(row) for row in matrix]) > n\ndef g(n=3):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=9):\n    return [2, 3, 5, 7, 4]\nassert f(g())\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=17) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target value\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=17):\n    return [4, 5, 2, 8, 9, 3, 1, 6]\nassert f(g())\n",
        "idx_generation": 457,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(l: List[int], n=10) -> bool:\n    \"\"\"Find a number in the list l that is divisible by n\"\"\"\n    return any(num % n == 0 for num in l)\ndef g(n=10):\n    return [i for i in range(n, n*10, n)]\nassert f(g())\n",
        "idx_generation": 457,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(dates: List[str], format='%Y-%m-%d', weekday='Monday') -> bool:\n    \"\"\"Given a list of dates, find the date that falls on a specific weekday.\"\"\"\n    \n    for date in dates:\n        dt = datetime.strptime(date, format)\n        if dt.strftime('%A') == weekday:\n            return True\n    return False\n\ndef g(format='%Y-%m-%d', weekday='Monday'):\n    return ['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04', '2022-01-05']\n\nassert f(g())\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y=5, z=10) -> bool:\n    \"\"\"Check if x is divisible by y and is greater than z\"\"\"\n    return x % y == 0 and x > z\ndef g(y=5, z=10):\n    return y * (z + 1)\nassert f(g())\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], x: int, y: int, z: int) -> bool:\n    \"\"\"Find if there exists a triplet in the array such that the product of the triplet is equal to x * y * z\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] * arr[j] * arr[k] == x * y * z:\n                    return True\n    return False\n\ndef g(x=2, y=3, z=4):\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), x=2, y=3, z=4)\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find a number in a list that is divisible by a given number\"\"\"\n    for num in lst:\n        if num % n == 0:\n            return True\n    return False\ndef g(lst=[1, 2, 3, 4, 5]):\n    divisor = 3\n    return divisor\nassert f(g())\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, x=100) -> bool:\n    \"\"\"Check if the number is divisible by x\"\"\"\n    return num % x == 0\ndef g(x=100):\n    return x * 2\nassert f(g())\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Check if the sum of any row or column in the matrix is equal to the target\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    for col in zip(*matrix):\n        if sum(col) == target:\n            return True\n    return False\ndef g(target=50):\n    return [[10, 20, 30], [5, 25, 20], [15, 15, 20]]\nassert f(g())\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, divisor=3) -> bool:\n    \"\"\"Check if a number is divisible by a given divisor.\"\"\"\n    return x % divisor == 0\ndef g(divisor=3):\n    return 15\nassert f(g())\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Check if the given date string matches the specified format.\"\"\"\n    try:\n        datetime.strptime(date, format)\n        return True\n    except ValueError:\n        return False\n\ndef g(format='%Y-%m-%d'):\n    current_date = datetime.now().strftime(format)\n    return current_date\n\nassert f(g())\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, words=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if a word is in a list of words\"\"\"\n    return n in words\ndef g(words=['apple', 'banana', 'cherry']):\n    return words[0]\nassert f(g())\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target.\"\"\"\n    return any((nums[i] * nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [2, 5, 1, 3]\nassert f(g())\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], rows=3, cols=4, target=7) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(rows=3, cols=4, target=7):\n    matrix = [[i+j for j in range(cols)] for i in range(0, rows*cols, cols)]\n    return matrix\nassert f(g())\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr=[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) -> bool:\n    \"\"\"Check if a given number is a prime number\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(arr=[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]):\n    return arr[0]\nassert f(g())\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[3, 6, 9, 12, 15, 18, 21, 24, 27, 30]) -> bool:\n    \"\"\"Check if n is present in the list and is a multiple of 3\"\"\"\n    return n in lst and n % 3 == 0\n\ndef g(lst=[3, 6, 9, 12, 15, 18, 21, 24, 27, 30]):\n    for num in lst:\n        if num % 3 == 0:\n            return num\n    return None\n\nassert f(g())\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if the sum of a list of numbers is greater than a target value\"\"\"\n    return sum(nums) > target\n\ndef g(target=10):\n    return random.choices(range(1, 10), k=4)\n\nassert f(g())\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, li=[2, 4, 6, 8, 10, 12], target=20) -> bool:\n    \"\"\"Find the product of two numbers in a list that equals a target number\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] * li[j] == target:\n                return True\n    return False\ndef g(li=[2, 4, 6, 8, 10, 12], target=20):\n    return li.index(target // 2), li.index(2)\nassert f(g())\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=50) -> bool:\n    \"\"\"Find two distinct elements in lst whose sum is equal to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(target=50):\n    return [target//2, target//2]\nassert f(g())\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, lst=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if a given string is a fruit\"\"\"\n    return string in lst\n\ndef g(lst=['apple', 'banana', 'cherry']):\n    return lst[0]\n\nassert f(g())\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"Check if a number is divisible by any prime number in the given list.\"\"\"\n    return any(n % p == 0 for p in primes)\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19]):\n    return primes[0]\nassert f(g())\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=5, c=7) -> bool:\n    \"\"\"Check if n is divisible by a and b, and is greater than c\"\"\"\n    if n % a == 0 and n % b == 0 and n > c:\n        return True\n    return False\n\ndef g(a=3, b=5, c=7):\n    return a * b * c\n\nassert f(g())\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target sum\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: int, a=10) -> bool:\n    \"\"\"Check if x is greater than a\"\"\"\n    return x > a\n\ndef g(a=10):\n    return random.randint(a+1, a+100)\n\nassert f(g())\n",
        "idx_generation": 473,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=21) -> bool:\n    \"\"\"Check if there are three numbers in a list that add up to a given target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=21):\n    return [1, 2, target - 3]\nassert f(g())\n",
        "idx_generation": 473,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i, num1 in enumerate(nums):\n        for j, num2 in enumerate(nums[i+1:]):\n            if num1 + num2 == target:\n                return True\n    return False\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 474,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10, length=4) -> bool:\n    \"\"\"Find if there exists a sequence of numbers from nums that sums up to the target with length of at least length\"\"\"\n    for i in range(len(nums) - length + 1):\n        if sum(nums[i:i+length]) == target:\n            return True\n    return False\n\ndef g(target=10, length=4):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers from nums that sums up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target value.\"\"\"\n    return any(target - num in numbers for num in numbers)\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if the given number n is present in the list of numbers nums.\"\"\"\n    return n in nums\ndef g(nums=[2, 4, 6, 8, 10]):\n    return nums[0]\nassert f(g())\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(n: int, date1='2022-02-15', date2='2022-02-20') -> bool:\n    \"\"\"Check if the difference in days between two given dates is equal to n.\"\"\"\n    date_format = \"%Y-%m-%d\"\n    d1 = datetime.strptime(date1, date_format)\n    d2 = datetime.strptime(date2, date_format)\n    delta = d2 - d1\n    return delta.days == n\ndef g(date1='2022-02-15', date2='2022-02-20'):\n    date_format = \"%Y-%m-%d\"\n    d1 = datetime.strptime(date1, date_format)\n    d2 = datetime.strptime(date2, date_format)\n    delta = d2 - d1\n    return delta.days\nassert f(g())\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find a sublist of nums that adds up to the target_sum\"\"\"\n    for length in range(1, len(nums) + 1):\n        for i in range(len(nums) - length + 1):\n            if sum(nums[i:i+length]) == target_sum:\n                return True\n    return False\ndef g(target_sum=100):\n    return [i for i in range(1, target_sum+1)]\nassert f(g())\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int, a=3, b=5, c=7) -> bool:\n    \"\"\"Check if the given numbers satisfy a specific equation.\"\"\"\n    return (x**2 + y**2 + z**2) == (a**2 + b**2 + c**2)\ndef g(a=3, b=5, c=7):\n    return a, b, c\nassert f(*g())\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=13) -> bool:\n    \"\"\"Given an array of integers, find if there exists a pair of numbers that adds up to the target value\"\"\"\n    return any((arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr))))\ndef g(target=13):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, li=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a number is present in a list.\"\"\"\n    return n in li\n\ndef g(li=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return random.choice(li)\n\nassert f(g())\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr=[4, 8, 15, 16, 23, 42]) -> bool:\n    \"\"\"Check if a number can be expressed as the sum of two distinct elements in a given list.\"\"\"\n    return any(n == arr[i] + arr[j] for i in range(len(arr)) for j in range(i+1, len(arr)))\ndef g(arr=[4, 8, 15, 16, 23, 42]):\n    return arr[0] + arr[1]\nassert f(g())\n",
        "idx_generation": 479,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if a number is divisible by any element in a given list.\"\"\"\n    return any(n % num == 0 for num in arr)\ndef g(arr=[2, 4, 6, 8, 10]):\n    return arr[0]\nassert f(g())\n",
        "idx_generation": 479,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime) -> bool:\n    \"\"\"Check if the given date is a leap year\"\"\"\n    return dt.year % 4 == 0 and (dt.year % 100 != 0 or dt.year % 400 == 0)\n\ndef g(year=2000, month=2, day=29):\n    return datetime.datetime(year, month, day)\n\nassert f(g())\n",
        "idx_generation": 479,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, num_list=[2, 4, 6, 8]) -> bool:\n    \"\"\"Check if a number is divisible by any number in a list.\"\"\"\n    for num in num_list:\n        if n % num == 0:\n            return True\n    return False\ndef g(num_list=[2, 4, 6, 8]):\n    return 12\nassert f(g())\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, lst=[3, 7, 9, 12, 15, 18, 21, 24]) -> bool:\n    \"\"\"Check if a number is divisible by any element in a given list.\"\"\"\n    return any(num % x == 0 for x in lst)\ndef g(lst=[3, 7, 9, 12, 15, 18, 21, 24]):\n    return lst[0]\nassert f(g())\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target=50) -> bool:\n    \"\"\"Find the sublist of x that sums up to the target value.\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)+1):\n            if sum(x[i:j]) == target:\n                return True\n    return False\ndef g():\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nassert f(g())\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(numbers: list, target=10) -> bool:\n    \"\"\"Given a list of numbers, find a combination of two numbers that adds up to the target value.\"\"\"\n    combinations = list(itertools.combinations(numbers, 2))\n    for combo in combinations:\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, li=[1, 2, 3, 4, 5], target=6) -> bool:\n    \"\"\"Determine if there exists two distinct elements in the list that sum up to the target.\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False\ndef g(li=[1, 2, 3, 4, 5], target=6):\n    return li\nassert f(g())\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=0, b=1, c=1) -> bool:\n    \"\"\"Check if the nth term of a Fibonacci sequence is equal to a given number\"\"\"\n    fib_seq = [a, b]\n    for i in range(2, n):\n        fib_seq.append(fib_seq[i-1] + fib_seq[i-2])\n    return fib_seq[n-1] == c\n\ndef g(a=0, b=1, c=1):\n    n = 2\n    while True:\n        fib_seq = [a, b]\n        for i in range(2, n):\n            fib_seq.append(fib_seq[i-1] + fib_seq[i-2])\n        if fib_seq[n-1] == c:\n            return n\n        n += 1\n\nassert f(g())\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, day=5, month=5, year=2022) -> bool:\n    \"\"\"Check if the given date matches the specified day, month, and year.\"\"\"\n    return date.day == day and date.month == month and date.year == year\n\ndef g(day=5, month=5, year=2022):\n    return datetime.date(year, month, day)\n\nassert f(g())\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find a subarray of arr that sums up to the target value\"\"\"\n    n = len(arr)\n    for i in range(n):\n        curr_sum = arr[i]\n        j = i + 1\n        while j <= n:\n            if curr_sum == target:\n                return True\n            if curr_sum > target or j == n:\n                break\n            curr_sum += arr[j]\n            j += 1\n    return False\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\nassert f(g())\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=7) -> bool:\n    \"\"\"Find if the target number exists in the given matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=7):\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Find a pair of distinct numbers in the list that adds up to the target value.\"\"\"\n    return any((lst[i] + lst[j] == target) for i in range(len(lst)) for j in range(i+1, len(lst)))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(result: list, n=10) -> bool:\n    \"\"\"Check if the given list is a randomly generated list of n even numbers.\"\"\"\n    return len(result) == n and all(num % 2 == 0 for num in result)\ndef g(n=10):\n    return [random.randint(1, 100) * 2 for _ in range(n)]\nassert f(g())\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(numbers: List[int], size=5, total=100) -> bool:\n    \"\"\"Check if the given list of numbers contains 'size' amount of integers that sum up to 'total'\"\"\"\n    return len(numbers) == size and sum(numbers) == total\n\ndef g(size=5, total=100):\n    numbers = random.sample(range(1, total), size-1)\n    numbers.append(total - sum(numbers))\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=3) -> bool:\n    \"\"\"Check if a target number is present in the matrix.\"\"\"\n    return any(target in row for row in matrix)\ndef g(target=3):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a pair of elements in the matrix that sums to the target value.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[k])):\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return True\n    return False\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, target='aeiou') -> bool:\n    \"\"\"Check if the given sentence contains all the vowels in the target string.\"\"\"\n    sentence = sentence.lower()\n    for vowel in target:\n        if vowel not in sentence:\n            return False\n    return True\ndef g():\n    return \"The quick brown fox jumps over the lazy dog\"\nassert f(g())\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, days=7) -> bool:\n    \"\"\"Check if the given date is within the next 'days' days\"\"\"\n    return date <= datetime.date.today() + datetime.timedelta(days=days)\n\ndef g(days=7):\n    return datetime.date.today() + datetime.timedelta(days=days)\n\nassert f(g())\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, x=17, y=5, z=3) -> bool:\n    \"\"\"Find the result of the following expression: x * y + z\"\"\"\n    return result == x * y + z\ndef g(x=17, y=5, z=3):\n    return x * y + z\nassert f(g())\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(array: list, target=27) -> bool:\n    \"\"\"Find a pair of numbers in the array that add up to the target\"\"\"\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            if array[i] + array[j] == target:\n                return True\n    return False\ndef g(target=27):\n    return [12, 15, 9, 6, 18, 21]\nassert f(g())\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(nums=[10, 5, 15, 8, 12]):\n    return nums\nassert f(g())\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Given a matrix (a list of lists), check if a specific target number is present in it.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[437, 299, 240, 4591, 17234], upper_bound=82396663973139497934429093888) -> bool:\n    \"\"\"Check if the number n is a perfect square and a multiple of all the numbers in the list nums.\"\"\"\n    return all((n % i == 0 for i in nums)) and n**0.5 == int(n**0.5) and 0 < n <= upper_bound\n\ndef g(nums=[437, 299, 240, 4591, 17234], upper_bound=82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans *= i // n\n    return ans**2\n\nassert f(g())\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a number is divisible by all the primes in a given list.\"\"\"\n    return all([n % prime == 0 for prime in primes])\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    n = 1\n    for prime in primes:\n        n *= prime\n    return n\nassert f(g())\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100, length=4) -> bool:\n    \"\"\"Find a sublist of length that sums up to target\"\"\"\n    sublists = [nums[i:i+length] for i in range(len(nums)-length+1)]\n    return any((sum(sublist) == target for sublist in sublists))\ndef g(target=100, length=4):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nassert f(g())\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=1) -> bool:\n    \"\"\"Find a sublist in the given list such that its sum is divisible by k.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) % k == 0:\n                return True\n    return False\n\ndef g(k=1):\n    return [k]\n\nassert f(g())\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=50) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target value\"\"\"\n    return any((numbers[i] + numbers[j] == target for i in range(len(numbers)-1) for j in range(i+1, len(numbers))))\ndef g(target=50):\n    numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    return numbers\nassert f(g())\n",
        "idx_generation": 495,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [2, 8]\nassert f(g())\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], threshold=5) -> bool:\n    \"\"\"Check if all numbers in a list are greater than a threshold value\"\"\"\n    for num in numbers:\n        if num <= threshold:\n            return False\n    return True\ndef g(threshold=5):\n    return [6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisors=[2, 3, 5]) -> bool:\n    \"\"\"Check if the given number is divisible by all the provided divisors\"\"\"\n    for divisor in divisors:\n        if n % divisor != 0:\n            return False\n    return True\ndef g(divisors=[2, 3, 5]):\n    return divisors[0] * divisors[1] * divisors[2]\nassert f(g())\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(squares: List[List[int]], m=9, n=9) -> bool:\n    \"\"\"Place m rooks on an n x n chessboard such that no two rooks attack each other.\"\"\"\n    assert all((i in range(n) and j in range(n) for (i, j) in squares)), 'valid positions'\n    return len(squares) == m and all((i1 != i2 and j1 != j2) for ([i1, j1], [i2, j2]) in zip(squares, squares[1:]))\ndef g(m=9, n=9):\n    return [[i, i] for i in range(n)]\nassert f(g())\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by a given set of factors\"\"\"\n    return all(n % factor == 0 for factor in factors)\ndef g(factors=[2, 3, 5]):\n    n = 2 * 3 * 5 * 7 # A random number divisible by all the given factors\n    return n\nassert f(g())\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=6) -> bool:\n    \"\"\"Check if the sum of each row in a matrix is equal to the target\"\"\"\n    return np.all(np.sum(matrix, axis=1) == target)\n\ndef g(target=6):\n    return np.array([[1, 2, 3], [2, 2, 2], [0, 3, 3]])\n\nassert f(g())\n",
        "idx_generation": 499,
        "target_skills": null
    }
]