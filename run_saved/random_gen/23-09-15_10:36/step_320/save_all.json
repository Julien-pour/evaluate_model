[
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m: int, target: int, arr=[2, 4, 6, 8]) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the array 'arr' such that their sum is equal to the target number\"\"\"\n    for i in range(n):\n        for j in range(i + 1, m):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target: int, arr=[2, 4, 6, 8]):\n    n = len(arr)\n    return n, n, target, arr\nassert f(g())\n",
        "emb": null,
        "idx_generation": 21,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m: int, target: int, arr=[2, 4, 6, 8]) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the array 'arr' such that their sum is equal to the target number\"\"\"\n    for i in range(n):\n        for j in range(i + 1, m):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target: int, arr=[2, 4, 6, 8]):\n    n = len(arr)\n    return n, n, target, arr",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\nfrom math import factorial\n\ndef f(n: int, m: int, arr=[1, 2, 3, 4]) -> bool:\n    \"\"\"Check if the product of all elements in the array 'arr' is divisible by the factorial of the minimum\n    number between n and m\"\"\"\n    min_num = min(n, m)\n    product = 1\n    for num in arr:\n        product *= num\n    return product % factorial(min_num) == 0\ndef g(arr=[1, 2, 3, 4]):\n    n = len(arr)\n    m = sum(arr)\n    return n, m, arr\nassert f(g())\n",
        "emb": null,
        "idx_generation": 21,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import factorial\n\ndef f(n: int, m: int, arr=[1, 2, 3, 4]) -> bool:\n    \"\"\"Check if the product of all elements in the array 'arr' is divisible by the factorial of the minimum\n    number between n and m\"\"\"\n    min_num = min(n, m)\n    product = 1\n    for num in arr:\n        product *= num\n    return product % factorial(min_num) == 0",
        "solution_func": "def g(arr=[1, 2, 3, 4]):\n    n = len(arr)\n    m = sum(arr)\n    return n, m, arr",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m: int, k: int, arr=[3, 6, 9, 12]) -> bool:\n    \"\"\"Check if there exists a sublist in the array 'arr' such that the sum of its elements is divisible by k\"\"\"\n    for i in range(n):\n        for j in range(i + 1, m):\n            sublist_sum = sum(arr[i:j])\n            if sublist_sum % k == 0:\n                return True\n    return False\ndef g(arr=[3, 6, 9, 12]):\n    n = len(arr)\n    m = n + 1\n    k = sum(arr)\n    return n, m, k, arr\nassert f(g())\n",
        "emb": null,
        "idx_generation": 21,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m: int, k: int, arr=[3, 6, 9, 12]) -> bool:\n    \"\"\"Check if there exists a sublist in the array 'arr' such that the sum of its elements is divisible by k\"\"\"\n    for i in range(n):\n        for j in range(i + 1, m):\n            sublist_sum = sum(arr[i:j])\n            if sublist_sum % k == 0:\n                return True\n    return False",
        "solution_func": "def g(arr=[3, 6, 9, 12]):\n    n = len(arr)\n    m = n + 1\n    k = sum(arr)\n    return n, m, k, arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, prime_factors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a given number n has only prime factors from a specified list.\"\"\"\n    return all(n % factor == 0 for factor in prime_factors)\n    \ndef g(prime_factors=[2, 3, 5]):\n    n = 1\n    for factor in prime_factors:\n        n *= factor\n    return n\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 21,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, prime_factors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a given number n has only prime factors from a specified list.\"\"\"\n    return all(n % factor == 0 for factor in prime_factors)",
        "solution_func": "def g(prime_factors=[2, 3, 5]):\n    n = 1\n    for factor in prime_factors:\n        n *= factor\n    return n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, digits_sum=10) -> bool:\n    \"\"\"Check if a given number n has the sum of its digits equal to a specified value.\"\"\"\n    return sum(int(digit) for digit in str(n)) == digits_sum\n    \ndef g(digits_sum=10):\n    n = 0\n    while True:\n        digits = [int(digit) for digit in str(n)]\n        if sum(digits) == digits_sum:\n            return n\n        n += 1\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 21,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, digits_sum=10) -> bool:\n    \"\"\"Check if a given number n has the sum of its digits equal to a specified value.\"\"\"\n    return sum(int(digit) for digit in str(n)) == digits_sum",
        "solution_func": "def g(digits_sum=10):\n    n = 0\n    while True:\n        digits = [int(digit) for digit in str(n)]\n        if sum(digits) == digits_sum:\n            return n\n        n += 1",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a given number n is divisible by all specified divisors.\"\"\"\n    return all(n % divisor == 0 for divisor in divisors)\n    \ndef g(divisors=[2, 3, 5]):\n    n = 1\n    for divisor in divisors:\n        n *= divisor\n    return n\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 21,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, divisors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a given number n is divisible by all specified divisors.\"\"\"\n    return all(n % divisor == 0 for divisor in divisors)",
        "solution_func": "def g(divisors=[2, 3, 5]):\n    n = 1\n    for divisor in divisors:\n        n *= divisor\n    return n",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: str, s='apple', t='ple') -> bool:\n    \"\"\"Check if a certain substring is present in a given string\"\"\"\n    return result in s and result in t\ndef g(s='apple', t='ple'):\n    return t\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 21,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(result: str, s='apple', t='ple') -> bool:\n    \"\"\"Check if a certain substring is present in a given string\"\"\"\n    return result in s and result in t",
        "solution_func": "def g(s='apple', t='ple'):\n    return t",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(result: int, nums=[1, 2, 3, 4, 5], target=7) -> bool:\n    \"\"\"Find two numbers in a list that add up to a given target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return result == nums[i] * nums[j]\n    return False\ndef g(nums=[1, 2, 3, 4, 5], target=7):\n    return nums[1]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 21,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(result: int, nums=[1, 2, 3, 4, 5], target=7) -> bool:\n    \"\"\"Find two numbers in a list that add up to a given target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return result == nums[i] * nums[j]\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=7):\n    return nums[1]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(result: float, nums=[2.5, 3.2, 1.8, 4.7, 2.1], target=10.3) -> bool:\n    \"\"\"Find three numbers in a list that add up to a given target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return abs(result - (nums[i] * nums[j] * nums[k])) < 0.0001\n    return False\ndef g(nums=[2.5, 3.2, 1.8, 4.7, 2.1], target=10.3):\n    return nums[0] * nums[1] * nums[2]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 21,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(result: float, nums=[2.5, 3.2, 1.8, 4.7, 2.1], target=10.3) -> bool:\n    \"\"\"Find three numbers in a list that add up to a given target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return abs(result - (nums[i] * nums[j] * nums[k])) < 0.0001\n    return False",
        "solution_func": "def g(nums=[2.5, 3.2, 1.8, 4.7, 2.1], target=10.3):\n    return nums[0] * nums[1] * nums[2]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n: int, lst: List[int], x: int, y: int, z: int) -> bool:\n    \"\"\"Check if the sum of elements in lst is equal to n and if the concatenation of s and str(x) + str(y) + str(z) is a palindrome\"\"\"\n    return sum(lst) == n and (s + str(x) + str(y) + str(z)) == (s + str(x) + str(y) + str(z))[::-1]\ndef g(n=100, lst=[10, 20, 30], s='abc', x=1, y=2, z=3):\n    return n, lst, s, x, y, z\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 21,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n: int, lst: List[int], x: int, y: int, z: int) -> bool:\n    \"\"\"Check if the sum of elements in lst is equal to n and if the concatenation of s and str(x) + str(y) + str(z) is a palindrome\"\"\"\n    return sum(lst) == n and (s + str(x) + str(y) + str(z)) == (s + str(x) + str(y) + str(z))[::-1]",
        "solution_func": "def g(n=100, lst=[10, 20, 30], s='abc', x=1, y=2, z=3):\n    return n, lst, s, x, y, z",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=3, y=5) -> bool:\n    \"\"\"Check if a number is divisible by both x and y\"\"\"\n    return n % x == 0 and n % y == 0\n\ndef g(x=3, y=5):\n    return x * y\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 22,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=3, y=5) -> bool:\n    \"\"\"Check if a number is divisible by both x and y\"\"\"\n    return n % x == 0 and n % y == 0",
        "solution_func": "def g(x=3, y=5):\n    return x * y",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, c='a') -> bool:\n    \"\"\"Check if a character is in a string\"\"\"\n    return c in s\n\ndef g(c='a'):\n    return c + \"bcdefg\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 22,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, c='a') -> bool:\n    \"\"\"Check if a character is in a string\"\"\"\n    return c in s",
        "solution_func": "def g(c='a'):\n    return c + \"bcdefg\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], n=5) -> bool:\n    \"\"\"Check if a number is in a list\"\"\"\n    return n in lst\n\ndef g(n=5):\n    return random.sample(range(10), 5)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 22,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(lst: List[int], n=5) -> bool:\n    \"\"\"Check if a number is in a list\"\"\"\n    return n in lst",
        "solution_func": "def g(n=5):\n    return random.sample(range(10), 5)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10, threshold=5) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target, where the absolute difference between the two numbers is greater than the threshold.\"\"\"\n    return any(abs(x - y) > threshold for x in nums for y in nums if x + y == target)\ndef g(target=10, threshold=5):\n    return [i for i in range(1, target//2+1)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 22,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10, threshold=5) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target, where the absolute difference between the two numbers is greater than the threshold.\"\"\"\n    return any(abs(x - y) > threshold for x in nums for y in nums if x + y == target)",
        "solution_func": "def g(target=10, threshold=5):\n    return [i for i in range(1, target//2+1)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], n=3, prefix='a') -> bool:\n    \"\"\"Count the number of words in the list that start with a specific prefix, and check if the count is equal to n.\"\"\"\n    return sum(w.startswith(prefix) for w in words) == n\ndef g(n=3, prefix='a'):\n    return ['apple', 'banana', 'avocado', 'apricot', 'kiwi', 'pineapple']\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 22,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], n=3, prefix='a') -> bool:\n    \"\"\"Count the number of words in the list that start with a specific prefix, and check if the count is equal to n.\"\"\"\n    return sum(w.startswith(prefix) for w in words) == n",
        "solution_func": "def g(n=3, prefix='a'):\n    return ['apple', 'banana', 'avocado', 'apricot', 'kiwi', 'pineapple']",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, k=3) -> bool:\n    \"\"\"Find if there exists a subset of k numbers in the list that sum up to the target.\"\"\"\n    return any(sum(subset) == target for subset in itertools.combinations(nums, k))\ndef g(target=100, k=3):\n    return [i for i in range(1, target//k)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 22,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, k=3) -> bool:\n    \"\"\"Find if there exists a subset of k numbers in the list that sum up to the target.\"\"\"\n    return any(sum(subset) == target for subset in itertools.combinations(nums, k))",
        "solution_func": "def g(target=100, k=3):\n    return [i for i in range(1, target//k)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, num_list=[4, 8, 15, 16, 23, 42]) -> bool:\n    \"\"\"Find a number that can be obtained by multiplying any two distinct numbers from the given list.\"\"\"\n    return any((x == num_list[i] * num_list[j] for i in range(len(num_list)) for j in range(i+1, len(num_list))))\ndef g(num_list=[4, 8, 15, 16, 23, 42]):\n    return num_list[0] * num_list[1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 22,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, num_list=[4, 8, 15, 16, 23, 42]) -> bool:\n    \"\"\"Find a number that can be obtained by multiplying any two distinct numbers from the given list.\"\"\"\n    return any((x == num_list[i] * num_list[j] for i in range(len(num_list)) for j in range(i+1, len(num_list))))",
        "solution_func": "def g(num_list=[4, 8, 15, 16, 23, 42]):\n    return num_list[0] * num_list[1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, word_list=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Find a word that can be formed by rearranging the letters of a given word.\"\"\"\n    sorted_x = ''.join(sorted(x))\n    return any((sorted_x == ''.join(sorted(word)) for word in word_list))\ndef g(word_list=['apple', 'banana', 'cherry', 'date']):\n    return word_list[0]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 22,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, word_list=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Find a word that can be formed by rearranging the letters of a given word.\"\"\"\n    sorted_x = ''.join(sorted(x))\n    return any((sorted_x == ''.join(sorted(word)) for word in word_list))",
        "solution_func": "def g(word_list=['apple', 'banana', 'cherry', 'date']):\n    return word_list[0]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers in the given list that adds up to the target number.\"\"\"\n    return any((sum(comb) == target for r in range(1, len(x) + 1) for comb in combinations(x, r)))\ndef g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 22,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers in the given list that adds up to the target number.\"\"\"\n    return any((sum(comb) == target for r in range(1, len(x) + 1) for comb in combinations(x, r)))",
        "solution_func": "def g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(dates: List[datetime.date], year=2022) -> bool:\n    \"\"\"Find a list of dates that are all in the same year\"\"\"\n    return all(date.year == year for date in dates)\ndef g(year=2022):\n    dates = [datetime.date(year, 1, 1), datetime.date(year, 6, 15), datetime.date(year, 12, 31)]\n    return dates\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 22,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(dates: List[datetime.date], year=2022) -> bool:\n    \"\"\"Find a list of dates that are all in the same year\"\"\"\n    return all(date.year == year for date in dates)",
        "solution_func": "def g(year=2022):\n    dates = [datetime.date(year, 1, 1), datetime.date(year, 6, 15), datetime.date(year, 12, 31)]\n    return dates",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(num_list: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target sum.\"\"\"\n    return any((num_list[i] + num_list[j] == target_sum for i in range(len(num_list)) for j in range(i+1, len(num_list))))\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 23,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num_list: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target sum.\"\"\"\n    return any((num_list[i] + num_list[j] == target_sum for i in range(len(num_list)) for j in range(i+1, len(num_list))))",
        "solution_func": "def g(target_sum=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_row_sum=10) -> bool:\n    \"\"\"Check if there exists a row in the matrix that sums up to the target row sum.\"\"\"\n    return any((sum(row) == target_row_sum for row in matrix))\ndef g(target_row_sum=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 23,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_row_sum=10) -> bool:\n    \"\"\"Check if there exists a row in the matrix that sums up to the target row sum.\"\"\"\n    return any((sum(row) == target_row_sum for row in matrix))",
        "solution_func": "def g(target_row_sum=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, target_char='a') -> bool:\n    \"\"\"Check if the target character appears in the string.\"\"\"\n    return target_char in string\ndef g(target_char='a'):\n    return \"Hello, world!\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 23,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, target_char='a') -> bool:\n    \"\"\"Check if the target character appears in the string.\"\"\"\n    return target_char in string",
        "solution_func": "def g(target_char='a'):\n    return \"Hello, world!\"",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value.\"\"\"\n    return any((x + y == target) for x in arr for y in arr if x != y)\ndef g():\n    return [1, 2, 3, 4]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 23,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value.\"\"\"\n    return any((x + y == target) for x in arr for y in arr if x != y)",
        "solution_func": "def g():\n    return [1, 2, 3, 4]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string.\"\"\"\n    return substring in s\ndef g():\n    return 'xyzabcw'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 23,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string.\"\"\"\n    return substring in s",
        "solution_func": "def g():\n    return 'xyzabcw'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target value.\"\"\"\n    return any((x + y + z == target) for x in arr for y in arr for z in arr if x != y and y != z and x != z)\ndef g():\n    return [1, 2, 3, 4, 5, 6]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 23,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target value.\"\"\"\n    return any((x + y + z == target) for x in arr for y in arr for z in arr if x != y and y != z and x != z)",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers in the list whose sum is equal to the target value\"\"\"\n    return any((arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr))))\ndef g(arr=[10, 20, 30, 40, 50]):\n    return arr\nassert f(g())\n",
        "emb": null,
        "idx_generation": 23,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers in the list whose sum is equal to the target value\"\"\"\n    return any((arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr))))",
        "solution_func": "def g(arr=[10, 20, 30, 40, 50]):\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, char='a') -> bool:\n    \"\"\"Given a string and a character, check if the character is present in the string\"\"\"\n    return char in string\ndef g(char='a'):\n    return char\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 23,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, char='a') -> bool:\n    \"\"\"Given a string and a character, check if the character is present in the string\"\"\"\n    return char in string",
        "solution_func": "def g(char='a'):\n    return char",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find if there exists a triplet in the list whose sum is equal to the target value\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 23,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find if there exists a triplet in the list whose sum is equal to the target value\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, strings=['rawithelen', 'que', 'pikuf', 'koze', 'zehyquorofyxytextef', 'text', 'jezebox', 'zychopucebychokyz', 'pyzyxatevafugedix', 'buzogehabojyb']) -> bool:\n    \"\"\"Find the sum of the lengths of all strings in the list that are lexicographically smaller than s.\"\"\"\n    return sum((len(t) for t in strings if t < s)) == 30\ndef g(strings=['rawithelen', 'que', 'pikuf', 'koze', 'zehyquorofyxytextef', 'text', 'jezebox', 'zychopucebychokyz', 'pyzyxatevafugedix', 'buzogehabojyb']):\n    return sorted(strings)[1][::-1]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 23,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, strings=['rawithelen', 'que', 'pikuf', 'koze', 'zehyquorofyxytextef', 'text', 'jezebox', 'zychopucebychokyz', 'pyzyxatevafugedix', 'buzogehabojyb']) -> bool:\n    \"\"\"Find the sum of the lengths of all strings in the list that are lexicographically smaller than s.\"\"\"\n    return sum((len(t) for t in strings if t < s)) == 30",
        "solution_func": "def g(strings=['rawithelen', 'que', 'pikuf', 'koze', 'zehyquorofyxytextef', 'text', 'jezebox', 'zychopucebychokyz', 'pyzyxatevafugedix', 'buzogehabojyb']):\n    return sorted(strings)[1][::-1]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=50) -> bool:\n    \"\"\"Check if there exists a subarray in the given array that sums up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if np.sum(arr[i:j+1]) == target:\n                return True\n    return False\n\ndef g(arr: np.ndarray, target=50):\n    return arr\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 24,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=50) -> bool:\n    \"\"\"Check if there exists a subarray in the given array that sums up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if np.sum(arr[i:j+1]) == target:\n                return True\n    return False",
        "solution_func": "def g(arr: np.ndarray, target=50):\n    return arr",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, substring='python', num_replacements=2) -> bool:\n    \"\"\"Check if it is possible to replace 'num_replacements' number of characters in the string to get the substring.\"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] != substring[i]:\n            count += 1\n        if count > num_replacements:\n            return False\n    return count == num_replacements\n\ndef g(substring='python', num_replacements=2):\n    return substring\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 24,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='python', num_replacements=2) -> bool:\n    \"\"\"Check if it is possible to replace 'num_replacements' number of characters in the string to get the substring.\"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] != substring[i]:\n            count += 1\n        if count > num_replacements:\n            return False\n    return count == num_replacements",
        "solution_func": "def g(substring='python', num_replacements=2):\n    return substring",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: list, target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sums up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr: list, target=0):\n    return arr\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 24,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: list, target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sums up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(arr: list, target=0):\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target: int=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\n\ndef g(length: int=10, target: int=10):\n    \"\"\"Generate a list of random numbers\"\"\"\n    return [random.randint(1, 10) for _ in range(length)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 24,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target: int=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(length: int=10, target: int=10):\n    \"\"\"Generate a list of random numbers\"\"\"\n    return [random.randint(1, 10) for _ in range(length)]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target: int=20) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    return any((target in row for row in matrix))\n\ndef g(rows: int=4, cols: int=4, target: int=20):\n    \"\"\"Generate a matrix with random numbers\"\"\"\n    return [[random.randint(1, 10) for _ in range(cols)] for _ in range(rows)]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 24,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target: int=20) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    return any((target in row for row in matrix))",
        "solution_func": "def g(rows: int=4, cols: int=4, target: int=20):\n    \"\"\"Generate a matrix with random numbers\"\"\"\n    return [[random.randint(1, 10) for _ in range(cols)] for _ in range(rows)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(string: str, char: str='a') -> bool:\n    \"\"\"Check if the given character is present in the string\"\"\"\n    return char in string\n\ndef g(length: int=10, char: str='a'):\n    \"\"\"Generate a string with random characters\"\"\"\n    return ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(length))\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 24,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(string: str, char: str='a') -> bool:\n    \"\"\"Check if the given character is present in the string\"\"\"\n    return char in string",
        "solution_func": "def g(length: int=10, char: str='a'):\n    \"\"\"Generate a string with random characters\"\"\"\n    return ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(length))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\ndef f(s: str, target='abcde', seed=0) -> bool:\n    \"\"\"Check if the given string is equal to the target string\"\"\"\n    random.seed(seed)\n    shuffled = list(target)\n    random.shuffle(shuffled)\n    return ''.join(shuffled) == s\ndef g(target='abcde', seed=0):\n    random.seed(seed)\n    shuffled = list(target)\n    random.shuffle(shuffled)\n    return ''.join(shuffled)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 24,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\ndef f(s: str, target='abcde', seed=0) -> bool:\n    \"\"\"Check if the given string is equal to the target string\"\"\"\n    random.seed(seed)\n    shuffled = list(target)\n    random.shuffle(shuffled)\n    return ''.join(shuffled) == s",
        "solution_func": "def g(target='abcde', seed=0):\n    random.seed(seed)\n    shuffled = list(target)\n    random.shuffle(shuffled)\n    return ''.join(shuffled)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 24,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            1,
            0,
            1,
            1,
            0,
            1,
            0,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == s[::-1] and s == target\ndef g(target='hello'):\n    return target[::-1]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 24,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == s[::-1] and s == target",
        "solution_func": "def g(target='hello'):\n    return target[::-1]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=np.array([[1,2,3],[4,5,6],[7,8,9]])) -> bool:\n    \"\"\"Check if a given matrix is a magic square by ensuring that the sums of every row, column, and diagonal are equal to each other.\"\"\"\n    n = matrix.shape[0]\n    magic_sum = n * (n**2 + 1) // 2\n    \n    row_sums = np.sum(matrix, axis=1)\n    col_sums = np.sum(matrix, axis=0)\n    diag_sum = np.trace(matrix)\n    anti_diag_sum = np.trace(np.fliplr(matrix))\n    \n    return all((row_sum == magic_sum for row_sum in row_sums)) and \\\n           all((col_sum == magic_sum for col_sum in col_sums)) and \\\n           diag_sum == magic_sum and \\\n           anti_diag_sum == magic_sum\n\ndef g(target=np.array([[1,2,3],[4,5,6],[7,8,9]])):\n    n = target.shape[0]\n    magic_sum = n * (n**2 + 1) // 2\n    \n    # Generate a magic square\n    magic_square = np.zeros((n, n), dtype=int)\n    i = n // 2\n    j = n - 1\n    \n    num = 1\n    while num <= n**2:\n        if i == -1 and j == n:\n            i = 0\n            j = n - 2\n        else:\n            if i == -1:\n                i = n - 1\n            if j == n:\n                j = 0\n        \n        if magic_square[i][j]:\n            i += 1\n            j -= 2\n            continue\n        \n        magic_square[i][j] = num\n        num += 1\n        i -= 1\n        j += 1\n    \n    return magic_square\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0
        ],
        "idx_generation": 24,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=np.array([[1,2,3],[4,5,6],[7,8,9]])) -> bool:\n    \"\"\"Check if a given matrix is a magic square by ensuring that the sums of every row, column, and diagonal are equal to each other.\"\"\"\n    n = matrix.shape[0]\n    magic_sum = n * (n**2 + 1) // 2\n    \n    row_sums = np.sum(matrix, axis=1)\n    col_sums = np.sum(matrix, axis=0)\n    diag_sum = np.trace(matrix)\n    anti_diag_sum = np.trace(np.fliplr(matrix))\n    \n    return all((row_sum == magic_sum for row_sum in row_sums)) and \\\n           all((col_sum == magic_sum for col_sum in col_sums)) and \\\n           diag_sum == magic_sum and \\\n           anti_diag_sum == magic_sum",
        "solution_func": "def g(target=np.array([[1,2,3],[4,5,6],[7,8,9]])):\n    n = target.shape[0]\n    magic_sum = n * (n**2 + 1) // 2\n    \n    # Generate a magic square\n    magic_square = np.zeros((n, n), dtype=int)\n    i = n // 2\n    j = n - 1\n    \n    num = 1\n    while num <= n**2:\n        if i == -1 and j == n:\n            i = 0\n            j = n - 2\n        else:\n            if i == -1:\n                i = n - 1\n            if j == n:\n                j = 0\n        \n        if magic_square[i][j]:\n            i += 1\n            j -= 2\n            continue\n        \n        magic_square[i][j] = num\n        num += 1\n        i -= 1\n        j += 1\n    \n    return magic_square",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, result=10) -> bool:\n    \"\"\"Check if a string can be rearranged to form a palindrome\"\"\"\n    return s == s[::-1] and len(s) > result\ndef g(result=10):\n    return 'racecar' if result > 5 else 'hello'\nassert f(g())\n",
        "emb": null,
        "idx_generation": 25,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, result=10) -> bool:\n    \"\"\"Check if a string can be rearranged to form a palindrome\"\"\"\n    return s == s[::-1] and len(s) > result",
        "solution_func": "def g(result=10):\n    return 'racecar' if result > 5 else 'hello'",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, target=100, check=lambda x: x % 2 == 0) -> bool:\n    \"\"\"Find the sum of all numbers from 1 to n that satisfy the check function and is equal to the target\"\"\"\n    return sum([x for x in range(1, n+1) if check(x)]) == target\ndef g(target=100, check=lambda x: x % 2 == 0):\n    return sum([x for x in range(1, target+1) if check(x)])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 25,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target=100, check=lambda x: x % 2 == 0) -> bool:\n    \"\"\"Find the sum of all numbers from 1 to n that satisfy the check function and is equal to the target\"\"\"\n    return sum([x for x in range(1, n+1) if check(x)]) == target",
        "solution_func": "def g(target=100, check=lambda x: x % 2 == 0):\n    return sum([x for x in range(1, target+1) if check(x)])",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(li: List[int], target=15, check=lambda x: x % 3 == 0) -> bool:\n    \"\"\"Find the product of all numbers in the list that satisfy the check function and is equal to the target\"\"\"\n    product = 1\n    for num in li:\n        if check(num):\n            product *= num\n    return product == target\ndef g(target=15, check=lambda x: x % 3 == 0):\n    return [x for x in range(1, target+1) if check(x)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 25,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int], target=15, check=lambda x: x % 3 == 0) -> bool:\n    \"\"\"Find the product of all numbers in the list that satisfy the check function and is equal to the target\"\"\"\n    product = 1\n    for num in li:\n        if check(num):\n            product *= num\n    return product == target",
        "solution_func": "def g(target=15, check=lambda x: x % 3 == 0):\n    return [x for x in range(1, target+1) if check(x)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=12) -> bool:\n    \"\"\"Given an array of integers, find a subarray that sums up to a target value.\"\"\"\n    subarray_sum = [arr[i:j].sum() for i in range(len(arr)) for j in range(i + 1, len(arr) + 1)]\n    return target in subarray_sum\n\ndef g(target=12):\n    return np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 25,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=12) -> bool:\n    \"\"\"Given an array of integers, find a subarray that sums up to a target value.\"\"\"\n    subarray_sum = [arr[i:j].sum() for i in range(len(arr)) for j in range(i + 1, len(arr) + 1)]\n    return target in subarray_sum",
        "solution_func": "def g(target=12):\n    return np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, target=100) -> bool:\n    \"\"\"Given a positive integer n, find the smallest perfect square greater than or equal to n^2.\"\"\"\n    return math.isqrt(n) ** 2 >= target\n\ndef g(target=100):\n    return math.isqrt(math.isqrt(target)) + 1\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 25,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, target=100) -> bool:\n    \"\"\"Given a positive integer n, find the smallest perfect square greater than or equal to n^2.\"\"\"\n    return math.isqrt(n) ** 2 >= target",
        "solution_func": "def g(target=100):\n    return math.isqrt(math.isqrt(target)) + 1",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='abcde', count=2) -> bool:\n    \"\"\"Given a string s, find if there are at least `count` occurrences of each character in `target`.\"\"\"\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    return all((char_count.get(char, 0) >= count for char in target))\n\ndef g(target='abcde', count=2):\n    return target * count\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 25,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='abcde', count=2) -> bool:\n    \"\"\"Given a string s, find if there are at least `count` occurrences of each character in `target`.\"\"\"\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    return all((char_count.get(char, 0) >= count for char in target))",
        "solution_func": "def g(target='abcde', count=2):\n    return target * count",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, choices=['heads', 'tails']) -> bool:\n    \"\"\"Check if a given number of coin flips results in all heads\"\"\"\n    return all(x == 'heads' for x in n)\n\ndef g(n: int):\n    choices = ['heads', 'tails']\n    return [random.choice(choices) for _ in range(n)]\n\nassert f(g(10))\n",
        "emb": null,
        "idx_generation": 25,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, choices=['heads', 'tails']) -> bool:\n    \"\"\"Check if a given number of coin flips results in all heads\"\"\"\n    return all(x == 'heads' for x in n)",
        "solution_func": "def g(n: int):\n    choices = ['heads', 'tails']\n    return [random.choice(choices) for _ in range(n)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(timestamp: str, format='%Y-%m-%d %H:%M:%S') -> bool:\n    \"\"\"Check if a given timestamp is in the specified format\"\"\"\n    try:\n        datetime.strptime(timestamp, format)\n        return True\n    except ValueError:\n        return False\n\ndef g(format='%Y-%m-%d %H:%M:%S'):\n    return datetime.now().strftime(format)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 25,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(timestamp: str, format='%Y-%m-%d %H:%M:%S') -> bool:\n    \"\"\"Check if a given timestamp is in the specified format\"\"\"\n    try:\n        datetime.strptime(timestamp, format)\n        return True\n    except ValueError:\n        return False",
        "solution_func": "def g(format='%Y-%m-%d %H:%M:%S'):\n    return datetime.now().strftime(format)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if a given string contains a specific substring\"\"\"\n    return substring in s\n\ndef g(substring='python'):\n    s = 'I love programming in Python'\n    return s\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 25,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if a given string contains a specific substring\"\"\"\n    return substring in s",
        "solution_func": "def g(substring='python'):\n    s = 'I love programming in Python'\n    return s",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    return n in nums\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    primes = []\n    for num in nums:\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                primes.append(num)\n    return primes\nassert f(g())\n",
        "emb": null,
        "idx_generation": 25,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    return n in nums",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    primes = []\n    for num in nums:\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                primes.append(num)\n    return primes",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, a=3, b=20, c=5) -> bool:\n    \"\"\"Check if x is a perfect square and a multiple of both b and c\"\"\"\n    is_perfect_square = x ** 0.5 == int(x ** 0.5)\n    is_multiple_of_b_and_c = x % b == 0 and x % c == 0\n    return is_perfect_square and is_multiple_of_b_and_c\ndef g(a=3, b=20, c=5):\n    x = a * b * c\n    return x\nassert f(g())\n",
        "emb": null,
        "idx_generation": 26,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=3, b=20, c=5) -> bool:\n    \"\"\"Check if x is a perfect square and a multiple of both b and c\"\"\"\n    is_perfect_square = x ** 0.5 == int(x ** 0.5)\n    is_multiple_of_b_and_c = x % b == 0 and x % c == 0\n    return is_perfect_square and is_multiple_of_b_and_c",
        "solution_func": "def g(a=3, b=20, c=5):\n    x = a * b * c\n    return x",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a='ABC', b='DEF', c='GHI') -> bool:\n    \"\"\"Check if x is a rearrangement of the strings a, b, and c\"\"\"\n    sorted_x = ''.join(sorted(x))\n    sorted_abc = ''.join(sorted(a + b + c))\n    return sorted_x == sorted_abc\ndef g(a='ABC', b='DEF', c='GHI'):\n    x = a + b + c\n    return x\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 26,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, a='ABC', b='DEF', c='GHI') -> bool:\n    \"\"\"Check if x is a rearrangement of the strings a, b, and c\"\"\"\n    sorted_x = ''.join(sorted(x))\n    sorted_abc = ''.join(sorted(a + b + c))\n    return sorted_x == sorted_abc",
        "solution_func": "def g(a='ABC', b='DEF', c='GHI'):\n    x = a + b + c\n    return x",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], a=5, b=10, c=15) -> bool:\n    \"\"\"Check if the sum of all elements in x is a multiple of a, b, and c\"\"\"\n    sum_x = sum(x)\n    is_multiple = sum_x % a == 0 and sum_x % b == 0 and sum_x % c == 0\n    return is_multiple\ndef g(a=5, b=10, c=15):\n    x = [a, b, c]\n    return x\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 26,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], a=5, b=10, c=15) -> bool:\n    \"\"\"Check if the sum of all elements in x is a multiple of a, b, and c\"\"\"\n    sum_x = sum(x)\n    is_multiple = sum_x % a == 0 and sum_x % b == 0 and sum_x % c == 0\n    return is_multiple",
        "solution_func": "def g(a=5, b=10, c=15):\n    x = [a, b, c]\n    return x",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(num_list: list, target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 26,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num_list: list, target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: list, row_sum=15, col_sum=10) -> bool:\n    \"\"\"Check if the sum of each row and each column in the matrix matches the given row_sum and col_sum\"\"\"\n    for row in matrix:\n        if sum(row) != row_sum:\n            return False\n    for col in range(len(matrix[0])):\n        col_sum_temp = 0\n        for row in matrix:\n            col_sum_temp += row[col]\n        if col_sum_temp != col_sum:\n            return False\n    return True\n\ndef g(row_sum=15, col_sum=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 26,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: list, row_sum=15, col_sum=10) -> bool:\n    \"\"\"Check if the sum of each row and each column in the matrix matches the given row_sum and col_sum\"\"\"\n    for row in matrix:\n        if sum(row) != row_sum:\n            return False\n    for col in range(len(matrix[0])):\n        col_sum_temp = 0\n        for row in matrix:\n            col_sum_temp += row[col]\n        if col_sum_temp != col_sum:\n            return False\n    return True",
        "solution_func": "def g(row_sum=15, col_sum=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(num_list: list, target=20) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that adds up to the target\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            for k in range(j+1, len(num_list)):\n                if num_list[i] + num_list[j] + num_list[k] == target:\n                    return True\n    return False\n\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 26,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num_list: list, target=20) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that adds up to the target\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            for k in range(j+1, len(num_list)):\n                if num_list[i] + num_list[j] + num_list[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=20):\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, k=12) -> bool:\n    \"\"\"Find the sum of the first n numbers divisible by k.\"\"\"\n    return sum([i for i in range(1, n*k+1) if i % k == 0]) == n * (n + 1) * k // 2\ndef g(k=12):\n    return [i for i in range(1, k+1) if k % i == 0]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 26,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, k=12) -> bool:\n    \"\"\"Find the sum of the first n numbers divisible by k.\"\"\"\n    return sum([i for i in range(1, n*k+1) if i % k == 0]) == n * (n + 1) * k // 2",
        "solution_func": "def g(k=12):\n    return [i for i in range(1, k+1) if k % i == 0]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t='123') -> bool:\n    \"\"\"Rearrange the characters in s to form t.\"\"\"\n    return sorted(s) == sorted(t)\ndef g(t='123'):\n    return t[::-1]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 26,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, t='123') -> bool:\n    \"\"\"Rearrange the characters in s to form t.\"\"\"\n    return sorted(s) == sorted(t)",
        "solution_func": "def g(t='123'):\n    return t[::-1]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find if there exists any three numbers in arr that sum up to target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\ndef g(target=10):\n    return [i for i in range(1, target+1) if target % i == 0]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 26,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find if there exists any three numbers in arr that sum up to target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=10):\n    return [i for i in range(1, target+1) if target % i == 0]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, target=100000) -> bool:\n    \"\"\"Find n such that the sum of all numbers from 1 to n is equal to the target.\"\"\"\n    return sum(range(1, n+1)) == target\ndef g(target=100000):\n    n = 1\n    while True:\n        if sum(range(1, n+1)) == target:\n            return n\n        n += 1\nassert f(g())\n",
        "emb": null,
        "idx_generation": 26,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target=100000) -> bool:\n    \"\"\"Find n such that the sum of all numbers from 1 to n is equal to the target.\"\"\"\n    return sum(range(1, n+1)) == target",
        "solution_func": "def g(target=100000):\n    n = 1\n    while True:\n        if sum(range(1, n+1)) == target:\n            return n\n        n += 1",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int, n=0) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to the power of a third number\"\"\"\n    return x + y == n ** 2\ndef g(n=0):\n    return n, n ** 2 - n\nassert f(*g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 27,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, y: int, n=0) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to the power of a third number\"\"\"\n    return x + y == n ** 2",
        "solution_func": "def g(n=0):\n    return n, n ** 2 - n",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(word: str, n=0) -> bool:\n    \"\"\"Check if a word has a length equal to the square root of a number\"\"\"\n    return len(word) == int(n ** 0.5)\ndef g(n=0):\n    return 'puzzle', n ** 2\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 27,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str, n=0) -> bool:\n    \"\"\"Check if a word has a length equal to the square root of a number\"\"\"\n    return len(word) == int(n ** 0.5)",
        "solution_func": "def g(n=0):\n    return 'puzzle', n ** 2",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, n=0) -> bool:\n    \"\"\"Check if the sum of the digits of a number is equal to the power of another number\"\"\"\n    digit_sum = sum(int(digit) for digit in str(x))\n    return digit_sum == n ** 2\ndef g(n=0):\n    return 1234, n ** 2 - n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 27,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, n=0) -> bool:\n    \"\"\"Check if the sum of the digits of a number is equal to the power of another number\"\"\"\n    digit_sum = sum(int(digit) for digit in str(x))\n    return digit_sum == n ** 2",
        "solution_func": "def g(n=0):\n    return 1234, n ** 2 - n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(numbers: List[float], target=20) -> bool:\n    \"\"\"Find a pair of numbers whose sum is equal to the target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    numbers = [10, 5, 3, 8, 2]\n    return numbers\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 27,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(numbers: List[float], target=20) -> bool:\n    \"\"\"Find a pair of numbers whose sum is equal to the target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=20):\n    numbers = [10, 5, 3, 8, 2]\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Find a square matrix where the sum of each row, column, and diagonal is the same\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    # Check rows\n    for i in range(n):\n        if sum(matrix[i]) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        column_sum = 0\n        for i in range(n):\n            column_sum += matrix[i][j]\n        if column_sum != target_sum:\n            return False\n    # Check diagonals\n    diagonal_sum1 = 0\n    diagonal_sum2 = 0\n    for i in range(n):\n        diagonal_sum1 += matrix[i][i]\n        diagonal_sum2 += matrix[i][n-i-1]\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n    return True\n\ndef g():\n    matrix = [[4, 9, 2],\n              [3, 5, 7],\n              [8, 1, 6]]\n    return matrix\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 27,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Find a square matrix where the sum of each row, column, and diagonal is the same\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    # Check rows\n    for i in range(n):\n        if sum(matrix[i]) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        column_sum = 0\n        for i in range(n):\n            column_sum += matrix[i][j]\n        if column_sum != target_sum:\n            return False\n    # Check diagonals\n    diagonal_sum1 = 0\n    diagonal_sum2 = 0\n    for i in range(n):\n        diagonal_sum1 += matrix[i][i]\n        diagonal_sum2 += matrix[i][n-i-1]\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n    return True",
        "solution_func": "def g():\n    matrix = [[4, 9, 2],\n              [3, 5, 7],\n              [8, 1, 6]]\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='fix') -> bool:\n    \"\"\"Find a word in the list that starts with the prefix and ends with the suffix\"\"\"\n    for word in words:\n        if word.startswith(prefix) and word.endswith(suffix):\n            return True\n    return False\n\ndef g(prefix='pre', suffix='fix'):\n    words = ['prefix', 'suffix', 'infix', 'postfix']\n    return words\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 27,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='fix') -> bool:\n    \"\"\"Find a word in the list that starts with the prefix and ends with the suffix\"\"\"\n    for word in words:\n        if word.startswith(prefix) and word.endswith(suffix):\n            return True\n    return False",
        "solution_func": "def g(prefix='pre', suffix='fix'):\n    words = ['prefix', 'suffix', 'infix', 'postfix']\n    return words",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(n: int, nums=[12, 24, 36, 48]) -> bool:\n    \"\"\"Check if the greatest common divisor of all numbers in the list is equal to n.\"\"\"\n    return all((gcd(i, n) == n for i in nums))\n    \ndef g(nums=[12, 24, 36, 48]):\n    return gcd(*nums)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 27,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(n: int, nums=[12, 24, 36, 48]) -> bool:\n    \"\"\"Check if the greatest common divisor of all numbers in the list is equal to n.\"\"\"\n    return all((gcd(i, n) == n for i in nums))",
        "solution_func": "def g(nums=[12, 24, 36, 48]):\n    return gcd(*nums)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int, k: int) -> bool:\n    \"\"\"Check if the string s has exactly n occurrences of the character 'a' and k occurrences of the character 'b'.\"\"\"\n    return s.count('a') == n and s.count('b') == k\n\ndef g(n: int, k: int):\n    return 'a' * n + 'b' * k\n\nassert f(g(3, 2), 3, 2)\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 27,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n: int, k: int) -> bool:\n    \"\"\"Check if the string s has exactly n occurrences of the character 'a' and k occurrences of the character 'b'.\"\"\"\n    return s.count('a') == n and s.count('b') == k",
        "solution_func": "def g(n: int, k: int):\n    return 'a' * n + 'b' * k",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target number.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(target: int):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(13), 13)\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 27,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target number.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False",
        "solution_func": "def g(target: int):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that sums up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 27,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that sums up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct positive integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target\ndef g(target=100, n=5):\n    return list(range(1, n+1))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 28,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct positive integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target",
        "solution_func": "def g(target=100, n=5):\n    return list(range(1, n+1))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, x=10, y=5) -> bool:\n    \"\"\"Find the result of dividing x by y and adding 1\"\"\"\n    return result == x//y + 1\ndef g(x=10, y=5):\n    return x//y + 1\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 28,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(result: int, x=10, y=5) -> bool:\n    \"\"\"Find the result of dividing x by y and adding 1\"\"\"\n    return result == x//y + 1",
        "solution_func": "def g(x=10, y=5):\n    return x//y + 1",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(is_palindrome: bool, word=\"racecar\") -> bool:\n    \"\"\"Check if a word is a palindrome\"\"\"\n    return is_palindrome == (word == word[::-1])\ndef g(word=\"racecar\"):\n    return word == word[::-1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 28,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(is_palindrome: bool, word=\"racecar\") -> bool:\n    \"\"\"Check if a word is a palindrome\"\"\"\n    return is_palindrome == (word == word[::-1])",
        "solution_func": "def g(word=\"racecar\"):\n    return word == word[::-1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(d: datetime.date, y=2022, m=10) -> bool:\n    \"\"\"Check if the given date is in the future, specifically in the month of October of the year 2022\"\"\"\n    return d > datetime.date(y, m, 1)\n\ndef g(y=2022, m=10):\n    return datetime.date.today() + datetime.timedelta(days=1)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 28,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(d: datetime.date, y=2022, m=10) -> bool:\n    \"\"\"Check if the given date is in the future, specifically in the month of October of the year 2022\"\"\"\n    return d > datetime.date(y, m, 1)",
        "solution_func": "def g(y=2022, m=10):\n    return datetime.date.today() + datetime.timedelta(days=1)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, y=2, z=10) -> bool:\n    \"\"\"Check if the given number x is divisible evenly by y and z\"\"\"\n    return x % y == 0 and x % z == 0\n\ndef g(y=2, z=10):\n    return math.lcm(y, z)\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 28,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: int, y=2, z=10) -> bool:\n    \"\"\"Check if the given number x is divisible evenly by y and z\"\"\"\n    return x % y == 0 and x % z == 0",
        "solution_func": "def g(y=2, z=10):\n    return math.lcm(y, z)",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(l: list, n=7) -> bool:\n    \"\"\"Check if the given list contains exactly n unique elements\"\"\"\n    return len(set(l)) == n\n\ndef g(n=7):\n    return random.sample(range(1, 11), n)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 28,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(l: list, n=7) -> bool:\n    \"\"\"Check if the given list contains exactly n unique elements\"\"\"\n    return len(set(l)) == n",
        "solution_func": "def g(n=7):\n    return random.sample(range(1, 11), n)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(num_list: list, target=100) -> bool:\n    \"\"\"Check if a combination of numbers in num_list can sum up to the target\"\"\"\n    return sum(num_list) == target\n\ndef g(target=100):\n    num_list = [random.randint(1, 20) for _ in range(5)]\n    return num_list\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 28,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(num_list: list, target=100) -> bool:\n    \"\"\"Check if a combination of numbers in num_list can sum up to the target\"\"\"\n    return sum(num_list) == target",
        "solution_func": "def g(target=100):\n    num_list = [random.randint(1, 20) for _ in range(5)]\n    return num_list",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, area=78.5) -> bool:\n    \"\"\"Check if the area of a circle with the given radius is equal to the target area\"\"\"\n    return math.pi * radius**2 == area\n\ndef g(area=78.5):\n    radius = math.sqrt(area / math.pi)\n    return radius\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 28,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(radius: float, area=78.5) -> bool:\n    \"\"\"Check if the area of a circle with the given radius is equal to the target area\"\"\"\n    return math.pi * radius**2 == area",
        "solution_func": "def g(area=78.5):\n    radius = math.sqrt(area / math.pi)\n    return radius",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\ndef f(num_list: list, n=3, product=120) -> bool:\n    \"\"\"Check if the product of any n numbers in num_list is equal to the target product\"\"\"\n    return math.prod(num_list[:n]) == product\n\ndef g(n=3, product=120):\n    num_list = [2, 4, 6, 8, 10]\n    return num_list\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 28,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\ndef f(num_list: list, n=3, product=120) -> bool:\n    \"\"\"Check if the product of any n numbers in num_list is equal to the target product\"\"\"\n    return math.prod(num_list[:n]) == product",
        "solution_func": "def g(n=3, product=120):\n    num_list = [2, 4, 6, 8, 10]\n    return num_list",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: List[int], target: int, n=10) -> bool:\n    \"\"\"Check if there exists a subset of n numbers in arr that sum up to target\"\"\"\n    return sum(arr) >= target and any(sum(subset) == target for subset in random.sample(arr, n))\n    \ndef g(target: int, n=10):\n    arr = [random.randint(1, 100) for _ in range(n)]\n    return arr\n\nassert f(g(), target=500)\n",
        "emb": null,
        "idx_generation": 28,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(arr: List[int], target: int, n=10) -> bool:\n    \"\"\"Check if there exists a subset of n numbers in arr that sum up to target\"\"\"\n    return sum(arr) >= target and any(sum(subset) == target for subset in random.sample(arr, n))",
        "solution_func": "def g(target: int, n=10):\n    arr = [random.randint(1, 100) for _ in range(n)]\n    return arr",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit']) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s in strings and s == s[::-1]\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit']):\n    import random\n    return random.choice(strings)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 29,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit']) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s in strings and s == s[::-1]",
        "solution_func": "def g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit']):\n    import random\n    return random.choice(strings)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nimport random\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find if there are three elements in the list that sum up to the target.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, 3))\ndef g(target=100):\n    import random\n    nums = random.sample(range(1, 101), 10)\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 29,
        "target_skills": null,
        "problem_func": "import itertools\nimport random\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find if there are three elements in the list that sum up to the target.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, 3))",
        "solution_func": "def g(target=100):\n    import random\n    nums = random.sample(range(1, 101), 10)\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if the given string contains the given substring.\"\"\"\n    return substr in s\ndef g(substr='python'):\n    import random\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    return random.choice(s) + substr + random.choice(s)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 29,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if the given string contains the given substring.\"\"\"\n    return substr in s",
        "solution_func": "def g(substr='python'):\n    import random\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    return random.choice(s) + substr + random.choice(s)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, length=0, num_vowels=0) -> bool:\n    \"\"\"Check if a string contains exactly num_vowels vowels and has length equal to length.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = sum(1 for char in s if char in vowels)\n    return len(s) == length and vowel_count == num_vowels\ndef g(length=0, num_vowels=0):\n    import random\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = ''.join(random.choices(vowels + ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'], k=length))\n    vowel_count = sum(1 for char in s if char in vowels)\n    while vowel_count != num_vowels:\n        s = ''.join(random.choices(vowels + ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'], k=length))\n        vowel_count = sum(1 for char in s if char in vowels)\n    return s\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 29,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(s: str, length=0, num_vowels=0) -> bool:\n    \"\"\"Check if a string contains exactly num_vowels vowels and has length equal to length.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = sum(1 for char in s if char in vowels)\n    return len(s) == length and vowel_count == num_vowels",
        "solution_func": "def g(length=0, num_vowels=0):\n    import random\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = ''.join(random.choices(vowels + ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'], k=length))\n    vowel_count = sum(1 for char in s if char in vowels)\n    while vowel_count != num_vowels:\n        s = ''.join(random.choices(vowels + ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'], k=length))\n        vowel_count = sum(1 for char in s if char in vowels)\n    return s",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two distinct indices i and j in nums such that nums[i] + nums[j] == target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=0):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 29,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two distinct indices i and j in nums such that nums[i] + nums[j] == target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=0):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sum=0, col_sum=0) -> bool:\n    \"\"\"Check if the sum of each row in the matrix is equal to row_sum and the sum of each column is equal to col_sum.\"\"\"\n    for row in matrix:\n        if sum(row) != row_sum:\n            return False\n    for col in zip(*matrix):\n        if sum(col) != col_sum:\n            return False\n    return True\ndef g(row_sum=0, col_sum=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 29,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row_sum=0, col_sum=0) -> bool:\n    \"\"\"Check if the sum of each row in the matrix is equal to row_sum and the sum of each column is equal to col_sum.\"\"\"\n    for row in matrix:\n        if sum(row) != row_sum:\n            return False\n    for col in zip(*matrix):\n        if sum(col) != col_sum:\n            return False\n    return True",
        "solution_func": "def g(row_sum=0, col_sum=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]], target_slope=2) -> bool:\n    \"\"\"Given a list of points, find a line (represented by its slope) that passes through at least 3 points.\n    The goal is to find the slope that is closest to the target_slope.\"\"\"\n    def calculate_slope(point1, point2):\n        x1, y1 = point1\n        x2, y2 = point2\n        return (y2 - y1) / (x2 - x1)\n\n    def is_valid_slope(slope, points):\n        count = 0\n        for point in points:\n            x, y = point\n            if y == slope * x:\n                count += 1\n        return count >= 3\n\n    slopes = set()\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            slope = calculate_slope(points[i], points[j])\n            slopes.add(slope)\n\n    closest_slope = min(slopes, key=lambda x: abs(x - target_slope))\n    return is_valid_slope(closest_slope, points)\n\ndef g(target_slope=2):\n    points = [(1, 2), (3, 6), (5, 10), (7, 14), (9, 18), (11, 22)]\n    return points\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 29,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(points: List[Tuple[int, int]], target_slope=2) -> bool:\n    \"\"\"Given a list of points, find a line (represented by its slope) that passes through at least 3 points.\n    The goal is to find the slope that is closest to the target_slope.\"\"\"\n    def calculate_slope(point1, point2):\n        x1, y1 = point1\n        x2, y2 = point2\n        return (y2 - y1) / (x2 - x1)\n\n    def is_valid_slope(slope, points):\n        count = 0\n        for point in points:\n            x, y = point\n            if y == slope * x:\n                count += 1\n        return count >= 3\n\n    slopes = set()\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            slope = calculate_slope(points[i], points[j])\n            slopes.add(slope)\n\n    closest_slope = min(slopes, key=lambda x: abs(x - target_slope))\n    return is_valid_slope(closest_slope, points)",
        "solution_func": "def g(target_slope=2):\n    points = [(1, 2), (3, 6), (5, 10), (7, 14), (9, 18), (11, 22)]\n    return points",
        "map_ix": [
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=30) -> bool:\n    \"\"\"Given a matrix, find a row and a column such that the sum of the numbers in that row and column is equal to the target_sum.\n    The goal is to find the smallest target_sum that satisfies this condition.\"\"\"\n    def is_valid_sum(row, col, matrix, target_sum):\n        row_sum = sum(matrix[row])\n        col_sum = sum(matrix[i][col] for i in range(len(matrix)))\n        return row_sum + col_sum == target_sum\n\n    for target_sum in range(1, 100):\n        for row in range(len(matrix)):\n            for col in range(len(matrix[0])):\n                if is_valid_sum(row, col, matrix, target_sum):\n                    return target_sum\n\ndef g(target_sum=30):\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 29,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=30) -> bool:\n    \"\"\"Given a matrix, find a row and a column such that the sum of the numbers in that row and column is equal to the target_sum.\n    The goal is to find the smallest target_sum that satisfies this condition.\"\"\"\n    def is_valid_sum(row, col, matrix, target_sum):\n        row_sum = sum(matrix[row])\n        col_sum = sum(matrix[i][col] for i in range(len(matrix)))\n        return row_sum + col_sum == target_sum\n\n    for target_sum in range(1, 100):\n        for row in range(len(matrix)):\n            for col in range(len(matrix[0])):\n                if is_valid_sum(row, col, matrix, target_sum):\n                    return target_sum",
        "solution_func": "def g(target_sum=30):\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(strings: List[str], target_length=8) -> bool:\n    \"\"\"Given a list of strings, find a string that can be split into two substrings such that the sum of their lengths is equal to the target_length.\n    The goal is to find the longest string that satisfies this condition.\"\"\"\n    def is_valid_length(string, target_length):\n        for i in range(1, len(string)):\n            if len(string[:i]) + len(string[i:]) == target_length:\n                return True\n        return False\n\n    longest_string = \"\"\n    for string in strings:\n        if len(string) > len(longest_string) and is_valid_length(string, target_length):\n            longest_string = string\n\n    return longest_string\n\ndef g(target_length=8):\n    strings = [\"hello\", \"world\", \"python\", \"programming\", \"puzzle\"]\n    return strings\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 29,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(strings: List[str], target_length=8) -> bool:\n    \"\"\"Given a list of strings, find a string that can be split into two substrings such that the sum of their lengths is equal to the target_length.\n    The goal is to find the longest string that satisfies this condition.\"\"\"\n    def is_valid_length(string, target_length):\n        for i in range(1, len(string)):\n            if len(string[:i]) + len(string[i:]) == target_length:\n                return True\n        return False\n\n    longest_string = \"\"\n    for string in strings:\n        if len(string) > len(longest_string) and is_valid_length(string, target_length):\n            longest_string = string\n\n    return longest_string",
        "solution_func": "def g(target_length=8):\n    strings = [\"hello\", \"world\", \"python\", \"programming\", \"puzzle\"]\n    return strings",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: str, y: int, z: float, w=True) -> bool:\n    \"\"\"Check if the length of a string multiplied by an integer is equal to the float value\"\"\"\n    return len(x) * y == z and w\ndef g(y=5, z=27.5):\n    x = str(int(z / y))\n    return x, y, z, True\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 29,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, y: int, z: float, w=True) -> bool:\n    \"\"\"Check if the length of a string multiplied by an integer is equal to the float value\"\"\"\n    return len(x) * y == z and w",
        "solution_func": "def g(y=5, z=27.5):\n    x = str(int(z / y))\n    return x, y, z, True",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello world') -> bool:\n    \"\"\"Check if a string can be transformed into the target string by rearranging the characters\"\"\"\n    return sorted(s) == sorted(target)\ndef g(target='hello world'):\n    return ''.join(sorted(target))\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 30,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='hello world') -> bool:\n    \"\"\"Check if a string can be transformed into the target string by rearranging the characters\"\"\"\n    return sorted(s) == sorted(target)",
        "solution_func": "def g(target='hello world'):\n    return ''.join(sorted(target))",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that sum up to the target\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for x in range(i, len(matrix)):\n                for y in range(len(matrix[x])):\n                    if matrix[i][j] + matrix[x][y] == target:\n                        return True\n    return False\ndef g(target=10):\n    return [[2, 4, 6], [1, 3, 5], [7, 9, 8]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 30,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that sum up to the target\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for x in range(i, len(matrix)):\n                for y in range(len(matrix[x])):\n                    if matrix[i][j] + matrix[x][y] == target:\n                        return True\n    return False",
        "solution_func": "def g(target=10):\n    return [[2, 4, 6], [1, 3, 5], [7, 9, 8]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subset of numbers in the list that add up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\ndef g(target=100):\n    return [25, 20, 15, 10, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 30,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subset of numbers in the list that add up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)",
        "solution_func": "def g(target=100):\n    return [25, 20, 15, 10, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a number n that is divisible by all numbers from 1 to 10 (inclusive).\"\"\"\n    return all(n % i == 0 for i in range(1, 11))\n\ndef g():\n    return 2520\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 30,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a number n that is divisible by all numbers from 1 to 10 (inclusive).\"\"\"\n    return all(n % i == 0 for i in range(1, 11))",
        "solution_func": "def g():\n    return 2520",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(word: str) -> bool:\n    \"\"\"Find a word that is a palindrome and contains only vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return word == word[::-1] and all(c in vowels for c in word)\n\ndef g():\n    return 'racecar'\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 30,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str) -> bool:\n    \"\"\"Find a word that is a palindrome and contains only vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return word == word[::-1] and all(c in vowels for c in word)",
        "solution_func": "def g():\n    return 'racecar'",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a list of numbers where every element is greater than the sum of all the previous elements.\"\"\"\n    return all(nums[i] > sum(nums[:i]) for i in range(1, len(nums)))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 30,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a list of numbers where every element is greater than the sum of all the previous elements.\"\"\"\n    return all(nums[i] > sum(nums[:i]) for i in range(1, len(nums)))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=42) -> bool:\n    \"\"\"Check if the target number is the sum of any two distinct numbers in the list\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=42):\n    return [i for i in range(target-1)]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 30,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=42) -> bool:\n    \"\"\"Check if the target number is the sum of any two distinct numbers in the list\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=42):\n    return [i for i in range(target-1)]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='world') -> bool:\n    \"\"\"Check if the substring is present in the given string\"\"\"\n    return substring in s\ndef g(substring='world'):\n    return 'Hello, {}'.format(substring)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 30,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='world') -> bool:\n    \"\"\"Check if the substring is present in the given string\"\"\"\n    return substring in s",
        "solution_func": "def g(substring='world'):\n    return 'Hello, {}'.format(substring)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if the target number is the sum of any three distinct numbers in the list\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(target=100):\n    return [i for i in range(target-2)]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 30,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if the target number is the sum of any three distinct numbers in the list\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))",
        "solution_func": "def g(target=100):\n    return [i for i in range(target-2)]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, num_list=[1, 3, 5, 7, 9]) -> bool:\n    \"\"\"Check if n is present in num_list\"\"\"\n    return n in num_list\n\ndef g(num_list=[1, 3, 5, 7, 9]):\n    return random.choice(num_list)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 30,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, num_list=[1, 3, 5, 7, 9]) -> bool:\n    \"\"\"Check if n is present in num_list\"\"\"\n    return n in num_list",
        "solution_func": "def g(num_list=[1, 3, 5, 7, 9]):\n    return random.choice(num_list)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if a given character is present in a string.\"\"\"\n    return char in s\ndef g(char='a'):\n    return \"Hello, World!\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 31,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if a given character is present in a string.\"\"\"\n    return char in s",
        "solution_func": "def g(char='a'):\n    return \"Hello, World!\"",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list whose sum is equal to a target value.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 31,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num_list: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list whose sum is equal to a target value.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a row in a matrix whose sum is equal to a target value.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 31,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a row in a matrix whose sum is equal to a target value.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False",
        "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10, max_length=3) -> bool:\n    \"\"\"Find a subarray of at most max_length elements whose sum is equal to the target value.\"\"\"\n    return any(sum(arr[i:j]) == target for i in range(len(arr)) for j in range(i + 1, min(i + max_length + 1, len(arr) + 1)))\ndef g(target=10, max_length=3):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 31,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10, max_length=3) -> bool:\n    \"\"\"Find a subarray of at most max_length elements whose sum is equal to the target value.\"\"\"\n    return any(sum(arr[i:j]) == target for i in range(len(arr)) for j in range(i + 1, min(i + max_length + 1, len(arr) + 1)))",
        "solution_func": "def g(target=10, max_length=3):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, max_length=3) -> bool:\n    \"\"\"Given a list of integers, find a subsequence of at most max_length elements whose sum is equal to the target value.\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for n in range(1, max_length + 1) for c in combinations(nums, n))\ndef g(target=10, max_length=3):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 31,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, max_length=3) -> bool:\n    \"\"\"Given a list of integers, find a subsequence of at most max_length elements whose sum is equal to the target value.\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for n in range(1, max_length + 1) for c in combinations(nums, n))",
        "solution_func": "def g(target=10, max_length=3):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nimport math\nfrom typing import*\ndef f(arr: List[int], target=10, max_length=3) -> bool:\n    \"\"\"Given a list of integers, find a subsequence of at most max_length elements whose product is equal to the target value.\"\"\"\n    from itertools import combinations\n    return any(math.prod(c) == target for n in range(1, max_length + 1) for c in combinations(arr, n))\ndef g(target=10, max_length=3):\n    return [1, 2, 5]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 31,
        "target_skills": null,
        "problem_func": "import itertools\nimport math\nfrom typing import*\ndef f(arr: List[int], target=10, max_length=3) -> bool:\n    \"\"\"Given a list of integers, find a subsequence of at most max_length elements whose product is equal to the target value.\"\"\"\n    from itertools import combinations\n    return any(math.prod(c) == target for n in range(1, max_length + 1) for c in combinations(arr, n))",
        "solution_func": "def g(target=10, max_length=3):\n    return [1, 2, 5]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=5, c=7) -> bool:\n    \"\"\"Check if a number is divisible by three different integers.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=3, b=5, c=7):\n    return a * b * c\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 31,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=5, c=7) -> bool:\n    \"\"\"Check if a number is divisible by three different integers.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0",
        "solution_func": "def g(a=3, b=5, c=7):\n    return a * b * c",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, word='racecar', index=2) -> bool:\n    \"\"\"Check if a given string is a palindrome and its second character is at the specified index.\"\"\"\n    return s == s[::-1] and s[1] == word[index]\ndef g(word='racecar', index=2):\n    return word\nassert f(g())\n",
        "emb": null,
        "idx_generation": 31,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, word='racecar', index=2) -> bool:\n    \"\"\"Check if a given string is a palindrome and its second character is at the specified index.\"\"\"\n    return s == s[::-1] and s[1] == word[index]",
        "solution_func": "def g(word='racecar', index=2):\n    return word",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a number is in a list.\"\"\"\n    return n in lst\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst[0]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 31,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a number is in a list.\"\"\"\n    return n in lst",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    return lst[0]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring=\"abc\") -> bool:\n    \"\"\"Check if a given string s contains a specified substring.\"\"\"\n    return substring in s\ndef g(substring=\"abc\"):\n    return \"def\" + substring + \"ghi\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 31,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring=\"abc\") -> bool:\n    \"\"\"Check if a given string s contains a specified substring.\"\"\"\n    return substring in s",
        "solution_func": "def g(substring=\"abc\"):\n    return \"def\" + substring + \"ghi\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(dt: datetime, year=2022, month=1, day=1, hour=0, minute=0, second=0) -> bool:\n    \"\"\"Check if the given datetime is on the specified date and time\"\"\"\n    return dt == datetime(year, month, day, hour, minute, second)\n\ndef g(year=2022, month=1, day=1, hour=0, minute=0, second=0):\n    return datetime(year, month, day, hour, minute, second)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 32,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(dt: datetime, year=2022, month=1, day=1, hour=0, minute=0, second=0) -> bool:\n    \"\"\"Check if the given datetime is on the specified date and time\"\"\"\n    return dt == datetime(year, month, day, hour, minute, second)",
        "solution_func": "def g(year=2022, month=1, day=1, hour=0, minute=0, second=0):\n    return datetime(year, month, day, hour, minute, second)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, divisor=7) -> bool:\n    \"\"\"Check if the given number is divisible by the specified divisor\"\"\"\n    return num % divisor == 0\n\ndef g(divisor=7):\n    return divisor * 10\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 32,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int, divisor=7) -> bool:\n    \"\"\"Check if the given number is divisible by the specified divisor\"\"\"\n    return num % divisor == 0",
        "solution_func": "def g(divisor=7):\n    return divisor * 10",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the given string is an anagram of the target string\"\"\"\n    return sorted(s.lower()) == sorted(target.lower())\n\ndef g(target='python'):\n    return ''.join(sorted(target.lower()))\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 32,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the given string is an anagram of the target string\"\"\"\n    return sorted(s.lower()) == sorted(target.lower())",
        "solution_func": "def g(target='python'):\n    return ''.join(sorted(target.lower()))",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a sublist of nums such that the sum of its elements is equal to the target\"\"\"\n    return sum(nums) == target\ndef g(target=10):\n    return [1, 2, 3, 4]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 32,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a sublist of nums such that the sum of its elements is equal to the target\"\"\"\n    return sum(nums) == target",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if a given number n is present in the matrix\"\"\"\n    for row in matrix:\n        if n in row:\n            return True\n    return False\ndef g(n=3):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 32,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if a given number n is present in the matrix\"\"\"\n    for row in matrix:\n        if n in row:\n            return True\n    return False",
        "solution_func": "def g(n=3):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if all words in the list start with the given prefix\"\"\"\n    return all(word.startswith(prefix) for word in words)\ndef g(prefix='pre'):\n    return ['prefix', 'preference', 'prepare']\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 32,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if all words in the list start with the given prefix\"\"\"\n    return all(word.startswith(prefix) for word in words)",
        "solution_func": "def g(prefix='pre'):\n    return ['prefix', 'preference', 'prepare']",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(result: int, n=23432, m=436) -> bool:\n    \"\"\"Find the sum of all unique numbers that can be formed by rearranging the digits of n, such that each number is\nless than or equal to m.\"\"\"\n    def get_permutations(digits, prefix, m):\n        if int(prefix) > m:\n            return 0\n        total = 0\n        if prefix != \"\":\n            total += int(prefix)\n        for i in range(len(digits)):\n            total += get_permutations(digits[:i] + digits[i+1:], prefix + digits[i], m)\n        return total\n    digits = list(str(n))\n    return result == get_permutations(digits, \"\", m)\ndef g(n=23432, m=436):\n    def get_permutations(digits, prefix):\n        if prefix != \"\":\n            yield prefix\n        for i in range(len(digits)):\n            yield from get_permutations(digits[:i] + digits[i+1:], prefix + digits[i])\n    digits = list(str(n))\n    return sum(int(num) for num in get_permutations(digits, \"\") if int(num) <= m)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 32,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(result: int, n=23432, m=436) -> bool:\n    \"\"\"Find the sum of all unique numbers that can be formed by rearranging the digits of n, such that each number is\nless than or equal to m.\"\"\"\n    def get_permutations(digits, prefix, m):\n        if int(prefix) > m:\n            return 0\n        total = 0\n        if prefix != \"\":\n            total += int(prefix)\n        for i in range(len(digits)):\n            total += get_permutations(digits[:i] + digits[i+1:], prefix + digits[i], m)\n        return total\n    digits = list(str(n))\n    return result == get_permutations(digits, \"\", m)",
        "solution_func": "def g(n=23432, m=436):\n    def get_permutations(digits, prefix):\n        if prefix != \"\":\n            yield prefix\n        for i in range(len(digits)):\n            yield from get_permutations(digits[:i] + digits[i+1:], prefix + digits[i])\n    digits = list(str(n))\n    return sum(int(num) for num in get_permutations(digits, \"\") if int(num) <= m)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(result: int, n=987654321, m=5) -> bool:\n    \"\"\"Find the sum of all numbers between 1 and n (inclusive) that are divisible by m and have at least one odd digit.\"\"\"\n    def has_odd_digit(num):\n        while num > 0:\n            if num % 2 != 0:\n                return True\n            num //= 10\n        return False\n    return result == sum(i for i in range(1, n+1) if i % m == 0 and has_odd_digit(i))\ndef g(n=987654321, m=5):\n    def has_odd_digit(num):\n        while num > 0:\n            if num % 2 != 0:\n                return True\n            num //= 10\n        return False\n    return sum(i for i in range(1, n+1) if i % m == 0 and has_odd_digit(i))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 32,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(result: int, n=987654321, m=5) -> bool:\n    \"\"\"Find the sum of all numbers between 1 and n (inclusive) that are divisible by m and have at least one odd digit.\"\"\"\n    def has_odd_digit(num):\n        while num > 0:\n            if num % 2 != 0:\n                return True\n            num //= 10\n        return False\n    return result == sum(i for i in range(1, n+1) if i % m == 0 and has_odd_digit(i))",
        "solution_func": "def g(n=987654321, m=5):\n    def has_odd_digit(num):\n        while num > 0:\n            if num % 2 != 0:\n                return True\n            num //= 10\n        return False\n    return sum(i for i in range(1, n+1) if i % m == 0 and has_odd_digit(i))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(result: int, n=123456789, m=3) -> bool:\n    \"\"\"Find the sum of all numbers between 1 and n (inclusive) that are divisible by m and have a digit sum divisible by m.\"\"\"\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(num))\n    return result == sum(i for i in range(1, n+1) if i % m == 0 and digit_sum(i) % m == 0)\ndef g(n=123456789, m=3):\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(num))\n    return sum(i for i in range(1, n+1) if i % m == 0 and digit_sum(i) % m == 0)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 32,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(result: int, n=123456789, m=3) -> bool:\n    \"\"\"Find the sum of all numbers between 1 and n (inclusive) that are divisible by m and have a digit sum divisible by m.\"\"\"\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(num))\n    return result == sum(i for i in range(1, n+1) if i % m == 0 and digit_sum(i) % m == 0)",
        "solution_func": "def g(n=123456789, m=3):\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(num))\n    return sum(i for i in range(1, n+1) if i % m == 0 and digit_sum(i) % m == 0)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=13, pairs=[(4, 9), (7, 2), (10, 3), (5, 8), (6, 1)]) -> bool:\n    \"\"\"Check if there exist two numbers in a given list that sum up to a target value\"\"\"\n    return any((pair[0] + pair[1] == target for pair in pairs))\ndef g(target=13, pairs=[(4, 9), (7, 2), (10, 3), (5, 8), (6, 1)]):\n    return [num for pair in pairs for num in pair if pair[0] + pair[1] == target]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 32,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=13, pairs=[(4, 9), (7, 2), (10, 3), (5, 8), (6, 1)]) -> bool:\n    \"\"\"Check if there exist two numbers in a given list that sum up to a target value\"\"\"\n    return any((pair[0] + pair[1] == target for pair in pairs))",
        "solution_func": "def g(target=13, pairs=[(4, 9), (7, 2), (10, 3), (5, 8), (6, 1)]):\n    return [num for pair in pairs for num in pair if pair[0] + pair[1] == target]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Find a list of integers such that every element is greater than the sum of all previous elements\"\"\"\n    return all(li[i] > sum(li[:i]) for i in range(1, len(li)))\ndef g():\n    return [1, 2, 3, 4, 5, 6]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 33,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Find a list of integers such that every element is greater than the sum of all previous elements\"\"\"\n    return all(li[i] > sum(li[:i]) for i in range(1, len(li)))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Find a list of integers such that the product of all elements is equal to the sum of all elements\"\"\"\n    product = 1\n    for num in li:\n        product *= num\n    return product == sum(li)\ndef g():\n    return [1, 2, 3, 6]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 33,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Find a list of integers such that the product of all elements is equal to the sum of all elements\"\"\"\n    product = 1\n    for num in li:\n        product *= num\n    return product == sum(li)",
        "solution_func": "def g():\n    return [1, 2, 3, 6]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Find a list of integers such that the sum of every two adjacent elements is a perfect square\"\"\"\n    return all((li[i] + li[i + 1]) ** 0.5 % 1 == 0 for i in range(len(li) - 1))\ndef g():\n    return [1, 3, 8, 6, 10, 15]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 33,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Find a list of integers such that the sum of every two adjacent elements is a perfect square\"\"\"\n    return all((li[i] + li[i + 1]) ** 0.5 % 1 == 0 for i in range(len(li) - 1))",
        "solution_func": "def g():\n    return [1, 3, 8, 6, 10, 15]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, limit=1000000) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(limit=1000000):\n    for n in range(limit):\n        if f(n):\n            return n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 33,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, limit=1000000) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g(limit=1000000):\n    for n in range(limit):\n        if f(n):\n            return n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if n is divisible by m\"\"\"\n    return n % m == 0\ndef g(m=10):\n    n = m * 2\n    while not f(n):\n        n += m\n    return n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 33,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if n is divisible by m\"\"\"\n    return n % m == 0",
        "solution_func": "def g(m=10):\n    n = m * 2\n    while not f(n):\n        n += m\n    return n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=-1) -> bool:\n    \"\"\"Find the two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=-1):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 33,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=-1) -> bool:\n    \"\"\"Find the two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=-1):\n    nums = [1, 2, 3, 4, 5]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(x: List[int], n=10) -> bool:\n    \"\"\"Find a list of n integers that are divisible by x[0].\"\"\"\n    return all(num % x[0] == 0 for num in x) and len(x) == n\ndef g(n=10):\n    import random\n    return [random.randint(1, 100) * n for _ in range(n)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 33,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(x: List[int], n=10) -> bool:\n    \"\"\"Find a list of n integers that are divisible by x[0].\"\"\"\n    return all(num % x[0] == 0 for num in x) and len(x) == n",
        "solution_func": "def g(n=10):\n    import random\n    return [random.randint(1, 100) * n for _ in range(n)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: str, y: str) -> bool:\n    \"\"\"Find a string that is a palindrome and contains both x and y as substrings.\"\"\"\n    return x in y and y in x and x == x[::-1]\ndef g():\n    x = 'racecar'\n    y = 'car'\n    return x + y + x\nassert f(g())\n",
        "emb": null,
        "idx_generation": 33,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, y: str) -> bool:\n    \"\"\"Find a string that is a palindrome and contains both x and y as substrings.\"\"\"\n    return x in y and y in x and x == x[::-1]",
        "solution_func": "def g():\n    x = 'racecar'\n    y = 'car'\n    return x + y + x",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: str, y: str) -> bool:\n    \"\"\"Find a string that is an anagram of x and contains y as a substring.\"\"\"\n    return sorted(list(x)) == sorted(list(y)) and y in x\ndef g():\n    x = 'listen'\n    y = 'silence'\n    return x + y\nassert f(g())\n",
        "emb": null,
        "idx_generation": 33,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, y: str) -> bool:\n    \"\"\"Find a string that is an anagram of x and contains y as a substring.\"\"\"\n    return sorted(list(x)) == sorted(list(y)) and y in x",
        "solution_func": "def g():\n    x = 'listen'\n    y = 'silence'\n    return x + y",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Determine if n is a perfect square.\"\"\"\n    return n ** 0.5 == int(n ** 0.5)\ndef g():\n    return 49\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 33,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Determine if n is a perfect square.\"\"\"\n    return n ** 0.5 == int(n ** 0.5)",
        "solution_func": "def g():\n    return 49",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport datetime\n\ndef f(year: int, month: int, day: int) -> bool:\n    \"\"\"Check if a given date is a Monday.\"\"\"\n    date = datetime.date(year, month, day)\n    return date.weekday() == 0\n\ndef g(year: int, month: int, day: int):\n    return year, month, day\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 34,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(year: int, month: int, day: int) -> bool:\n    \"\"\"Check if a given date is a Monday.\"\"\"\n    date = datetime.date(year, month, day)\n    return date.weekday() == 0",
        "solution_func": "def g(year: int, month: int, day: int):\n    return year, month, day",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, m: int, x: int) -> bool:\n    \"\"\"Check if a given number is divisible by both n and m.\"\"\"\n    return x % n == 0 and x % m == 0\n\ndef g(n: int, m: int):\n    return math.lcm(n, m)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 34,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, m: int, x: int) -> bool:\n    \"\"\"Check if a given number is divisible by both n and m.\"\"\"\n    return x % n == 0 and x % m == 0",
        "solution_func": "def g(n: int, m: int):\n    return math.lcm(n, m)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if all elements in a list are divisible by n.\"\"\"\n    return all(x % n == 0 for x in lst)\n\ndef g(lst: List[int]):\n    return lst\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 34,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if all elements in a list are divisible by n.\"\"\"\n    return all(x % n == 0 for x in lst)",
        "solution_func": "def g(lst: List[int]):\n    return lst",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums: List[int], target=10):\n    random.shuffle(nums)\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 34,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums: List[int], target=10):\n    random.shuffle(nums)\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, divisors=[2, 3, 5]) -> bool:\n    \"\"\"Check if the given number is divisible by all the divisors\"\"\"\n    return all((n % d == 0 for d in divisors))\n\ndef g(divisors=[2, 3, 5]):\n    n = math.prod(divisors)\n    return n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 34,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, divisors=[2, 3, 5]) -> bool:\n    \"\"\"Check if the given number is divisible by all the divisors\"\"\"\n    return all((n % d == 0 for d in divisors))",
        "solution_func": "def g(divisors=[2, 3, 5]):\n    n = math.prod(divisors)\n    return n",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(dates: List[datetime.date], year=2022) -> bool:\n    \"\"\"Check if all the dates in the list are from the specified year\"\"\"\n    return all((date.year == year for date in dates))\n\ndef g(year=2022):\n    dates = [datetime.date(year, month, 1) for month in range(1, 13)]\n    return dates\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 34,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(dates: List[datetime.date], year=2022) -> bool:\n    \"\"\"Check if all the dates in the list are from the specified year\"\"\"\n    return all((date.year == year for date in dates))",
        "solution_func": "def g(year=2022):\n    dates = [datetime.date(year, month, 1) for month in range(1, 13)]\n    return dates",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, arr: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from arr whose sum is equal to target\"\"\"\n    return any(arr[i] + arr[j] == target for i in range(n) for j in range(i+1, n))\ndef g(arr=[1, 2, 3, 4, 5]):\n    return len(arr), arr\nassert f(g()[0], g()[1])\n",
        "emb": null,
        "idx_generation": 34,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, arr: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from arr whose sum is equal to target\"\"\"\n    return any(arr[i] + arr[j] == target for i in range(n) for j in range(i+1, n))",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5]):\n    return len(arr), arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr: List[int], target=5) -> bool:\n    \"\"\"Find a subarray of arr whose sum is equal to target\"\"\"\n    return any(sum(arr[i:j]) == target for i in range(n) for j in range(i+1, n+1))\ndef g(arr=[1, 2, 3, 4, 5]):\n    return len(arr), arr\nassert f(g()[0], g()[1])\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 34,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, arr: List[int], target=5) -> bool:\n    \"\"\"Find a subarray of arr whose sum is equal to target\"\"\"\n    return any(sum(arr[i:j]) == target for i in range(n) for j in range(i+1, n+1))",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5]):\n    return len(arr), arr",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, arr: List[int], target=7) -> bool:\n    \"\"\"Find a pair of numbers from arr whose product is equal to target\"\"\"\n    return any(arr[i] * arr[j] == target for i in range(n) for j in range(i+1, n))\ndef g(arr=[1, 2, 3, 4, 5]):\n    return len(arr), arr\nassert f(g()[0], g()[1])\n",
        "emb": null,
        "idx_generation": 34,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, arr: List[int], target=7) -> bool:\n    \"\"\"Find a pair of numbers from arr whose product is equal to target\"\"\"\n    return any(arr[i] * arr[j] == target for i in range(n) for j in range(i+1, n))",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5]):\n    return len(arr), arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a list that sum up to a target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 34,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a list that sum up to a target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: List[int], t=100, a=0, e=10, s=1) -> bool:\n    \"\"\"Find a sublist that sums to t\"\"\"\n    return any([sum(x[i:j]) == t for i in range(a, e) for j in range(i+1, e+1, s)])\ndef g(t=100, a=0, e=10, s=1):\n    x = list(range(1, e+1))\n    return x\nassert f(g())\n",
        "emb": null,
        "idx_generation": 35,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], t=100, a=0, e=10, s=1) -> bool:\n    \"\"\"Find a sublist that sums to t\"\"\"\n    return any([sum(x[i:j]) == t for i in range(a, e) for j in range(i+1, e+1, s)])",
        "solution_func": "def g(t=100, a=0, e=10, s=1):\n    x = list(range(1, e+1))\n    return x",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if s is a palindrome\"\"\"\n    return s == s[::-1]\ndef g():\n    return 'radar'\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 35,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if s is a palindrome\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g():\n    return 'radar'",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if s is a valid email address\"\"\"\n    import re\n    pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n    return bool(re.match(pattern, s))\ndef g():\n    return 'test@example.com'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 35,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if s is a valid email address\"\"\"\n    import re\n    pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n    return bool(re.match(pattern, s))",
        "solution_func": "def g():\n    return 'test@example.com'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport datetime\n\ndef f(s: str, days=7) -> bool:\n    \"\"\"Check if the given string s is a palindrome and also if today's date is exactly days (default: 7) days after the date represented by s in the format 'YYYY-MM-DD'.\"\"\"\n    return s == s[::-1] and datetime.date.today() == datetime.datetime.strptime(s, '%Y-%m-%d').date() + datetime.timedelta(days=days)\n\ndef g(days=7):\n    return (datetime.date.today() - datetime.timedelta(days=days)).strftime('%Y-%m-%d')\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 35,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(s: str, days=7) -> bool:\n    \"\"\"Check if the given string s is a palindrome and also if today's date is exactly days (default: 7) days after the date represented by s in the format 'YYYY-MM-DD'.\"\"\"\n    return s == s[::-1] and datetime.date.today() == datetime.datetime.strptime(s, '%Y-%m-%d').date() + datetime.timedelta(days=days)",
        "solution_func": "def g(days=7):\n    return (datetime.date.today() - datetime.timedelta(days=days)).strftime('%Y-%m-%d')",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, divisors=[1,2,3,4,5,6,7,8,9,10]) -> bool:\n    \"\"\"Check if the given number n is divisible by all the numbers in the list of divisors (default: [1,2,3,4,5,6,7,8,9,10]).\"\"\"\n    return all(n % divisor == 0 for divisor in divisors)\n\ndef g(divisors=[1,2,3,4,5,6,7,8,9,10]):\n    return math.lcm(*divisors)\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 35,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, divisors=[1,2,3,4,5,6,7,8,9,10]) -> bool:\n    \"\"\"Check if the given number n is divisible by all the numbers in the list of divisors (default: [1,2,3,4,5,6,7,8,9,10]).\"\"\"\n    return all(n % divisor == 0 for divisor in divisors)",
        "solution_func": "def g(divisors=[1,2,3,4,5,6,7,8,9,10]):\n    return math.lcm(*divisors)",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if it is possible to get the target number by adding/subtracting the numbers in the given list nums (can use each number only once).\"\"\"\n    def dfs(nums, target, index):\n        if target == 0:\n            return True\n        if index >= len(nums):\n            return False\n        return dfs(nums, target - nums[index], index + 1) or dfs(nums, target + nums[index], index + 1)\n\n    return dfs(nums, target, 0)\n\ndef g(nums_length=10, target_range=(-50, 50)):\n    nums = random.sample(range(*target_range), nums_length)\n    target = random.randint(*target_range)\n    return (nums, target)\n\nassert f(*g())",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 35,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if it is possible to get the target number by adding/subtracting the numbers in the given list nums (can use each number only once).\"\"\"\n    def dfs(nums, target, index):\n        if target == 0:\n            return True\n        if index >= len(nums):\n            return False\n        return dfs(nums, target - nums[index], index + 1) or dfs(nums, target + nums[index], index + 1)\n\n    return dfs(nums, target, 0)",
        "solution_func": "def g(nums_length=10, target_range=(-50, 50)):\n    nums = random.sample(range(*target_range), nums_length)\n    target = random.randint(*target_range)\n    return (nums, target)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[12, 15, 18], upper_bound=1000) -> bool:\n    \"\"\"Find a number that is divisible by all the numbers in the list.\"\"\"\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums=[12, 15, 18], upper_bound=1000):\n    ans = max(nums)\n    while True:\n        if all((ans % i == 0 for i in nums)):\n            return ans\n        ans += 1\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "idx_generation": 35,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[12, 15, 18], upper_bound=1000) -> bool:\n    \"\"\"Find a number that is divisible by all the numbers in the list.\"\"\"\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound",
        "solution_func": "def g(nums=[12, 15, 18], upper_bound=1000):\n    ans = max(nums)\n    while True:\n        if all((ans % i == 0 for i in nums)):\n            return ans\n        ans += 1",
        "map_ix": [
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char_count=5, word_count=3) -> bool:\n    \"\"\"Check if a string contains at least char_count number of a specific character and word_count number of a specific word.\"\"\"\n    return s.count('a') >= char_count and s.count('hello') >= word_count\ndef g(char_count=5, word_count=3):\n    return 'a' * char_count + ' hello' * word_count\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 35,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char_count=5, word_count=3) -> bool:\n    \"\"\"Check if a string contains at least char_count number of a specific character and word_count number of a specific word.\"\"\"\n    return s.count('a') >= char_count and s.count('hello') >= word_count",
        "solution_func": "def g(char_count=5, word_count=3):\n    return 'a' * char_count + ' hello' * word_count",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100, count=3) -> bool:\n    \"\"\"Check if there is a combination of count numbers in the list that add up to the target.\"\"\"\n    return any(sum(combination) == target for combination in combinations(nums, count))\ndef g(target=100, count=3):\n    return [n for n in range(1, target + 1)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 35,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100, count=3) -> bool:\n    \"\"\"Check if there is a combination of count numbers in the list that add up to the target.\"\"\"\n    return any(sum(combination) == target for combination in combinations(nums, count))",
        "solution_func": "def g(target=100, count=3):\n    return [n for n in range(1, target + 1)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, result=6) -> bool:\n    \"\"\"Determine if the equation x^2 + y^2 - z = result is true.\"\"\"\n    return x**2 + y**2 - z == result\n\ndef g(result=6):\n    return (2 * math.sqrt(result) + 1, 1, result)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 35,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, result=6) -> bool:\n    \"\"\"Determine if the equation x^2 + y^2 - z = result is true.\"\"\"\n    return x**2 + y**2 - z == result",
        "solution_func": "def g(result=6):\n    return (2 * math.sqrt(result) + 1, 1, result)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, num_list=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Check if a given number is present in the list [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]. Return True if it is,\notherwise return False.\"\"\"\n    return n in num_list\ndef g(num_list=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return num_list[2]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 36,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, num_list=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Check if a given number is present in the list [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]. Return True if it is,\notherwise return False.\"\"\"\n    return n in num_list",
        "solution_func": "def g(num_list=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return num_list[2]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='e') -> bool:\n    \"\"\"Count the number of occurrences of a given character in the string 's' and check if it is greater than or\nequal to 3. Return True if it is, otherwise return False.\"\"\"\n    count = 0\n    for c in s:\n        if c == char:\n            count += 1\n    return count >= 3\ndef g(char='e'):\n    return f'Spell the word with the letter \"{char}\" three times'\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 36,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char='e') -> bool:\n    \"\"\"Count the number of occurrences of a given character in the string 's' and check if it is greater than or\nequal to 3. Return True if it is, otherwise return False.\"\"\"\n    count = 0\n    for c in s:\n        if c == char:\n            count += 1\n    return count >= 3",
        "solution_func": "def g(char='e'):\n    return f'Spell the word with the letter \"{char}\" three times'",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if the string 's' starts with the given character. Return True if it does, otherwise return False.\"\"\"\n    return s.startswith(char)\ndef g(char='a'):\n    return f'The first letter of the alphabet is \"{char}\"'\nassert f(g())\n",
        "emb": null,
        "idx_generation": 36,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if the string 's' starts with the given character. Return True if it does, otherwise return False.\"\"\"\n    return s.startswith(char)",
        "solution_func": "def g(char='a'):\n    return f'The first letter of the alphabet is \"{char}\"'",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom datetime import date\n\ndef f(year: int, month: int, day: int) -> bool:\n    \"\"\"Check if a given date is a weekend or not.\"\"\"\n    given_date = date(year, month, day)\n    return given_date.weekday() in [5, 6]\n\ndef g(year: int, month: int, day: int):\n    return year, month, day\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 36,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import date\n\ndef f(year: int, month: int, day: int) -> bool:\n    \"\"\"Check if a given date is a weekend or not.\"\"\"\n    given_date = date(year, month, day)\n    return given_date.weekday() in [5, 6]",
        "solution_func": "def g(year: int, month: int, day: int):\n    return year, month, day",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, height: float, volume: float) -> bool:\n    \"\"\"Check if the volume of a cylinder is equal to the given volume.\"\"\"\n    calculated_volume = math.pi * radius**2 * height\n    return math.isclose(calculated_volume, volume)\n\ndef g(radius: float, height: float, volume: float):\n    return radius, height, volume\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 36,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(radius: float, height: float, volume: float) -> bool:\n    \"\"\"Check if the volume of a cylinder is equal to the given volume.\"\"\"\n    calculated_volume = math.pi * radius**2 * height\n    return math.isclose(calculated_volume, volume)",
        "solution_func": "def g(radius: float, height: float, volume: float):\n    return radius, height, volume",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(num_list: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target.\"\"\"\n    num_set = set(num_list)\n    for num in num_list:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(target: int, num_list: List[int]):\n    return num_list, target\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 36,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num_list: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target.\"\"\"\n    num_set = set(num_list)\n    for num in num_list:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False",
        "solution_func": "def g(target: int, num_list: List[int]):\n    return num_list, target",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a submatrix with a specific sum\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(j, cols):\n                    submatrix_sum = sum(matrix[x][y] for x in range(i, k+1) for y in range(j, l+1))\n                    if submatrix_sum == target:\n                        return True\n    return False\n\ndef g(target=20):\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, target-15]]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 36,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a submatrix with a specific sum\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(j, cols):\n                    submatrix_sum = sum(matrix[x][y] for x in range(i, k+1) for y in range(j, l+1))\n                    if submatrix_sum == target:\n                        return True\n    return False",
        "solution_func": "def g(target=20):\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, target-15]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, target-8]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 36,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, target-8]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Find three numbers that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=50):\n    return [10, 20, 30, target-60]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 36,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Find three numbers that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=50):\n    return [10, 20, 30, target-60]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_len=7) -> bool:\n    \"\"\"Check if the given string is a palindrome and its length is less than or equal to a target length.\"\"\"\n    return s == s[::-1] and len(s) <= target_len\n\ndef g(target_len=7):\n    return 'racecar'\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 36,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target_len=7) -> bool:\n    \"\"\"Check if the given string is a palindrome and its length is less than or equal to a target length.\"\"\"\n    return s == s[::-1] and len(s) <= target_len",
        "solution_func": "def g(target_len=7):\n    return 'racecar'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, n=100) -> bool:\n    \"\"\"Find a value of n such that x^n + y^n = z^n where n is an integer greater than 1.\"\"\"\n    return math.pow(x, n) + math.pow(y, n) == math.pow(z, n) and n > 1\n\ndef g(x: float, y: float, z: float):\n    # We can use the values x=3, y=4, z=5 which satisfy the Pythagorean theorem x^2 + y^2 = z^2\n    return x, y, z\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 37,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, n=100) -> bool:\n    \"\"\"Find a value of n such that x^n + y^n = z^n where n is an integer greater than 1.\"\"\"\n    return math.pow(x, n) + math.pow(y, n) == math.pow(z, n) and n > 1",
        "solution_func": "def g(x: float, y: float, z: float):\n    # We can use the values x=3, y=4, z=5 which satisfy the Pythagorean theorem x^2 + y^2 = z^2\n    return x, y, z",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: list, target: int, n=100) -> bool:\n    \"\"\"Find a list of n random integers where the target number is present.\"\"\"\n    return target in lst and len(lst) == n\n\ndef g(target: int):\n    lst = random.choices(range(100), k=100)\n    lst[0] = target\n    return lst\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 37,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(lst: list, target: int, n=100) -> bool:\n    \"\"\"Find a list of n random integers where the target number is present.\"\"\"\n    return target in lst and len(lst) == n",
        "solution_func": "def g(target: int):\n    lst = random.choices(range(100), k=100)\n    lst[0] = target\n    return lst",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(dt: datetime, day: int, month: int, year: int) -> bool:\n    \"\"\"Find a date that matches the given day, month, and year.\"\"\"\n    return dt.day == day and dt.month == month and dt.year == year\n\ndef g(day: int, month: int, year: int):\n    # We can use the current date as the solution\n    return datetime.now()\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 37,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(dt: datetime, day: int, month: int, year: int) -> bool:\n    \"\"\"Find a date that matches the given day, month, and year.\"\"\"\n    return dt.day == day and dt.month == month and dt.year == year",
        "solution_func": "def g(day: int, month: int, year: int):\n    # We can use the current date as the solution\n    return datetime.now()",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=0) -> bool:\n    \"\"\"Check if the sum of the elements in the array is equal to the target value\"\"\"\n    return np.sum(arr) == target\n\ndef g(target=0):\n    return np.zeros(10) + target\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 37,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=0) -> bool:\n    \"\"\"Check if the sum of the elements in the array is equal to the target value\"\"\"\n    return np.sum(arr) == target",
        "solution_func": "def g(target=0):\n    return np.zeros(10) + target",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=4) -> bool:\n    \"\"\"Check if n is a Pythagorean triple (a^2 + b^2 = c^2)\"\"\"\n    return n ** 2 == a ** 2 + b ** 2\n\ndef g(a=3, b=4):\n    return (a ** 2 + b ** 2) ** 0.5\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 37,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=4) -> bool:\n    \"\"\"Check if n is a Pythagorean triple (a^2 + b^2 = c^2)\"\"\"\n    return n ** 2 == a ** 2 + b ** 2",
        "solution_func": "def g(a=3, b=4):\n    return (a ** 2 + b ** 2) ** 0.5",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, day=7) -> bool:\n    \"\"\"Check if the day of the week of the given date is equal to the specified day\"\"\"\n    return date.weekday() == day\n\ndef g(day=7):\n    return datetime.date.today() + datetime.timedelta(days=day)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 37,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, day=7) -> bool:\n    \"\"\"Check if the day of the week of the given date is equal to the specified day\"\"\"\n    return date.weekday() == day",
        "solution_func": "def g(day=7):\n    return datetime.date.today() + datetime.timedelta(days=day)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, result=1.0) -> bool:\n    \"\"\"Find a value 'x' such that (math.sqrt(x) * math.pow(y, z)) is equal to 'result'\"\"\"\n    return (math.sqrt(x) * math.pow(y, z)) == result\n\ndef g(y: float, z: float, result=1.0):\n    x = (result / math.pow(y, z)) ** 2\n    return x\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 37,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, result=1.0) -> bool:\n    \"\"\"Find a value 'x' such that (math.sqrt(x) * math.pow(y, z)) is equal to 'result'\"\"\"\n    return (math.sqrt(x) * math.pow(y, z)) == result",
        "solution_func": "def g(y: float, z: float, result=1.0):\n    x = (result / math.pow(y, z)) ** 2\n    return x",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, substr='python', count=5) -> bool:\n    \"\"\"Find a string 'x' that contains 'count' number of occurrences of the substring 'substr'\"\"\"\n    return x.count(substr) == count\n\ndef g(substr='python', count=5):\n    x = substr * count\n    return x\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 37,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, substr='python', count=5) -> bool:\n    \"\"\"Find a string 'x' that contains 'count' number of occurrences of the substring 'substr'\"\"\"\n    return x.count(substr) == count",
        "solution_func": "def g(substr='python', count=5):\n    x = substr * count\n    return x",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: str, n=8) -> bool:\n    \"\"\"Find a string 'x' that repeats itself 'n' number of times\"\"\"\n    return x * n\n\ndef g(n=8):\n    x = 'abcd'\n    return x\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 37,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, n=8) -> bool:\n    \"\"\"Find a string 'x' that repeats itself 'n' number of times\"\"\"\n    return x * n",
        "solution_func": "def g(n=8):\n    x = 'abcd'\n    return x",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry'], count=2) -> bool:\n    \"\"\"Find a list of >= count distinct strings that are all contained in s\"\"\"\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(substrings=['apple', 'banana', 'cherry'], count=2):\n    return [''] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g())\n",
        "emb": null,
        "idx_generation": 37,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry'], count=2) -> bool:\n    \"\"\"Find a list of >= count distinct strings that are all contained in s\"\"\"\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))",
        "solution_func": "def g(substrings=['apple', 'banana', 'cherry'], count=2):\n    return [''] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10, k=5) -> bool:\n    \"\"\"Check if n is a multiple of m and divisible by k.\"\"\"\n    return n % m == 0 and n % k == 0\ndef g(m=10, k=5):\n    return m * k\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 38,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=10, k=5) -> bool:\n    \"\"\"Check if n is a multiple of m and divisible by k.\"\"\"\n    return n % m == 0 and n % k == 0",
        "solution_func": "def g(m=10, k=5):\n    return m * k",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, m='hello', n=3) -> bool:\n    \"\"\"Check if the string s contains the substring m repeated n times.\"\"\"\n    return s.count(m) == n\ndef g(m='hello', n=3):\n    return m * n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 38,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, m='hello', n=3) -> bool:\n    \"\"\"Check if the string s contains the substring m repeated n times.\"\"\"\n    return s.count(m) == n",
        "solution_func": "def g(m='hello', n=3):\n    return m * n",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(li)):\n        for j in range(i + 1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False\ndef g(target=100):\n    return [50, 51]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 38,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(li)):\n        for j in range(i + 1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [50, 51]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(result: int, num_list=[10, 20, 30, 40]) -> bool:\n    \"\"\"Find the result of multiplying all numbers in the list by 2 and subtracting 10 from each number\"\"\"\n    for num in num_list:\n        if num*2 - 10 != result:\n            return False\n    return True\n\ndef g(num_list=[10, 20, 30, 40]):\n    result = []\n    for num in num_list:\n        result.append(num*2 - 10)\n    return result\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 38,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(result: int, num_list=[10, 20, 30, 40]) -> bool:\n    \"\"\"Find the result of multiplying all numbers in the list by 2 and subtracting 10 from each number\"\"\"\n    for num in num_list:\n        if num*2 - 10 != result:\n            return False\n    return True",
        "solution_func": "def g(num_list=[10, 20, 30, 40]):\n    result = []\n    for num in num_list:\n        result.append(num*2 - 10)\n    return result",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: str, word_list=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Find the result by concatenating all words in the list in reverse order\"\"\"\n    reverse_concat = ''\n    for word in reversed(word_list):\n        reverse_concat += word\n    return result == reverse_concat\n\ndef g(word_list=['apple', 'banana', 'cherry']):\n    reverse_concat = ''\n    for word in reversed(word_list):\n        reverse_concat += word\n    return reverse_concat\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 38,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(result: str, word_list=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Find the result by concatenating all words in the list in reverse order\"\"\"\n    reverse_concat = ''\n    for word in reversed(word_list):\n        reverse_concat += word\n    return result == reverse_concat",
        "solution_func": "def g(word_list=['apple', 'banana', 'cherry']):\n    reverse_concat = ''\n    for word in reversed(word_list):\n        reverse_concat += word\n    return reverse_concat",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: float, num_list=[3.4, 2.2, 1.8, 4.6]) -> bool:\n    \"\"\"Find the result by taking the square root of each number in the list and summing them\"\"\"\n    sum_sqrt = 0\n    for num in num_list:\n        sum_sqrt += num ** 0.5\n    return abs(result - sum_sqrt) < 1e-06\n\ndef g(num_list=[3.4, 2.2, 1.8, 4.6]):\n    sum_sqrt = 0\n    for num in num_list:\n        sum_sqrt += num ** 0.5\n    return sum_sqrt\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 38,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(result: float, num_list=[3.4, 2.2, 1.8, 4.6]) -> bool:\n    \"\"\"Find the result by taking the square root of each number in the list and summing them\"\"\"\n    sum_sqrt = 0\n    for num in num_list:\n        sum_sqrt += num ** 0.5\n    return abs(result - sum_sqrt) < 1e-06",
        "solution_func": "def g(num_list=[3.4, 2.2, 1.8, 4.6]):\n    sum_sqrt = 0\n    for num in num_list:\n        sum_sqrt += num ** 0.5\n    return sum_sqrt",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find the number of pairs of adjacent elements in a matrix where the sum of the pair is equal to a given target value.\"\"\"\n    count = 0\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if i + 1 < len(matrix) and matrix[i][j] + matrix[i+1][j] == target:\n                count += 1\n            if j + 1 < len(matrix[0]) and matrix[i][j] + matrix[i][j+1] == target:\n                count += 1\n    return count == target\ndef g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 38,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find the number of pairs of adjacent elements in a matrix where the sum of the pair is equal to a given target value.\"\"\"\n    count = 0\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if i + 1 < len(matrix) and matrix[i][j] + matrix[i+1][j] == target:\n                count += 1\n            if j + 1 < len(matrix[0]) and matrix[i][j] + matrix[i][j+1] == target:\n                count += 1\n    return count == target",
        "solution_func": "def g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, numbers=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"Find the nth prime number in a given list of prime numbers.\"\"\"\n    return numbers[n-1] % 10 == 7\ndef g(numbers=[2, 3, 5, 7, 11, 13, 17, 19]):\n    return len(numbers)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 38,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, numbers=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"Find the nth prime number in a given list of prime numbers.\"\"\"\n    return numbers[n-1] % 10 == 7",
        "solution_func": "def g(numbers=[2, 3, 5, 7, 11, 13, 17, 19]):\n    return len(numbers)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, chars=['a', 'b', 'c', 'd', 'e']) -> bool:\n    \"\"\"Find the number of times a given character occurs in a string, where the character is one of the given characters.\"\"\"\n    count = 0\n    for char in chars:\n        count += s.count(char)\n    return count == len(chars)\ndef g(chars=['a', 'b', 'c', 'd', 'e']):\n    s = \"abcde\" * len(chars)\n    return s\nassert f(g())\n",
        "emb": null,
        "idx_generation": 38,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, chars=['a', 'b', 'c', 'd', 'e']) -> bool:\n    \"\"\"Find the number of times a given character occurs in a string, where the character is one of the given characters.\"\"\"\n    count = 0\n    for char in chars:\n        count += s.count(char)\n    return count == len(chars)",
        "solution_func": "def g(chars=['a', 'b', 'c', 'd', 'e']):\n    s = \"abcde\" * len(chars)\n    return s",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Check if a string is a palindrome and contains a specific substring.\"\"\"\n    return s == s[::-1] and 'abc' in s\ndef g(n=10):\n    return 'abc' * n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 38,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Check if a string is a palindrome and contains a specific substring.\"\"\"\n    return s == s[::-1] and 'abc' in s",
        "solution_func": "def g(n=10):\n    return 'abc' * n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, k=3) -> bool:\n    \"\"\"Check if the sum of any k consecutive elements in the array is equal to 0.\"\"\"\n    return any(np.sum(arr[i:i+k]) == 0 for i in range(len(arr)-k+1))\n\ndef g(k=3):\n    return np.array([1, -1, 2, -2, 3, -3])\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 39,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, k=3) -> bool:\n    \"\"\"Check if the sum of any k consecutive elements in the array is equal to 0.\"\"\"\n    return any(np.sum(arr[i:i+k]) == 0 for i in range(len(arr)-k+1))",
        "solution_func": "def g(k=3):\n    return np.array([1, -1, 2, -2, 3, -3])",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string contains a substring of length n that is a palindrome.\"\"\"\n    return any(s[i:i+n] == s[i:i+n][::-1] for i in range(len(s)-n+1))\n\ndef g(n=3):\n    return \"racecar\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 39,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string contains a substring of length n that is a palindrome.\"\"\"\n    return any(s[i:i+n] == s[i:i+n][::-1] for i in range(len(s)-n+1))",
        "solution_func": "def g(n=3):\n    return \"racecar\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(lst: list, n=2) -> bool:\n    \"\"\"Check if there exists a subset of the list whose sum is divisible by n.\"\"\"\n    return any(sum(subset) % n == 0 for k in range(len(lst)+1) for subset in itertools.combinations(lst, k))\n\ndef g(n=2):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 39,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\n\ndef f(lst: list, n=2) -> bool:\n    \"\"\"Check if there exists a subset of the list whose sum is divisible by n.\"\"\"\n    return any(sum(subset) % n == 0 for k in range(len(lst)+1) for subset in itertools.combinations(lst, k))",
        "solution_func": "def g(n=2):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: float, m=5.5) -> bool:\n    \"\"\"Find the smallest integer greater than n that is a perfect square and whose square root is less than m.\"\"\"\n    return math.ceil(n) ** 2 > n and math.isqrt(math.ceil(n)) < m\ndef g(m=5.5):\n    return math.ceil(m) ** 2\nassert f(g())\n",
        "emb": null,
        "idx_generation": 39,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: float, m=5.5) -> bool:\n    \"\"\"Find the smallest integer greater than n that is a perfect square and whose square root is less than m.\"\"\"\n    return math.ceil(n) ** 2 > n and math.isqrt(math.ceil(n)) < m",
        "solution_func": "def g(m=5.5):\n    return math.ceil(m) ** 2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, m=10) -> bool:\n    \"\"\"Find a random integer between 0 and n (inclusive) that is divisible by m.\"\"\"\n    return random.randint(0, n) % m == 0\ndef g(m=10):\n    return random.randint(0, m)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 39,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, m=10) -> bool:\n    \"\"\"Find a random integer between 0 and n (inclusive) that is divisible by m.\"\"\"\n    return random.randint(0, n) % m == 0",
        "solution_func": "def g(m=10):\n    return random.randint(0, m)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport datetime\n\ndef f(n: int, year=2022, month=10, day=31) -> bool:\n    \"\"\"Find a date that is n days after a given date\"\"\"\n    given_date = datetime.date(year, month, day)\n    target_date = given_date + datetime.timedelta(days=n)\n    return target_date > given_date\ndef g(year=2022, month=10, day=31):\n    return datetime.date(year, month, day)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 39,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(n: int, year=2022, month=10, day=31) -> bool:\n    \"\"\"Find a date that is n days after a given date\"\"\"\n    given_date = datetime.date(year, month, day)\n    target_date = given_date + datetime.timedelta(days=n)\n    return target_date > given_date",
        "solution_func": "def g(year=2022, month=10, day=31):\n    return datetime.date(year, month, day)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=1000, b=7, c=3) -> bool:\n    \"\"\"Check if a number is divisible by a squared number and a cubed number.\"\"\"\n    return n % (a**2) == 0 and n % (b**3) == 0 and n % c != 0\n\ndef g(a=1000, b=7, c=3):\n    return int(math.sqrt(a**2 * b**3)) + c\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 39,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=1000, b=7, c=3) -> bool:\n    \"\"\"Check if a number is divisible by a squared number and a cubed number.\"\"\"\n    return n % (a**2) == 0 and n % (b**3) == 0 and n % c != 0",
        "solution_func": "def g(a=1000, b=7, c=3):\n    return int(math.sqrt(a**2 * b**3)) + c",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: list, a=5, b=10) -> bool:\n    \"\"\"Check if the sum of a random subset of the given array is within a specific range.\"\"\"\n    subset = random.sample(arr, random.randint(a, b))\n    return sum(subset) >= a and sum(subset) <= b\n\ndef g(a=5, b=10):\n    return list(range(1, 11))\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 39,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(arr: list, a=5, b=10) -> bool:\n    \"\"\"Check if the sum of a random subset of the given array is within a specific range.\"\"\"\n    subset = random.sample(arr, random.randint(a, b))\n    return sum(subset) >= a and sum(subset) <= b",
        "solution_func": "def g(a=5, b=10):\n    return list(range(1, 11))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=5) -> bool:\n    \"\"\"Check if a number is divisible by either a or b.\"\"\"\n    return n % a == 0 or n % b == 0\n\ndef g(a=3, b=5):\n    return a * b\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 39,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=5) -> bool:\n    \"\"\"Check if a number is divisible by either a or b.\"\"\"\n    return n % a == 0 or n % b == 0",
        "solution_func": "def g(a=3, b=5):\n    return a * b",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, vowels=['a', 'e', 'i', 'o', 'u'], count=3) -> bool:\n    \"\"\"Check if a string contains at least count number of vowels\"\"\"\n    return sum((1 for c in s if c.lower() in vowels)) >= count\ndef g(vowels=['a', 'e', 'i', 'o', 'u'], count=3):\n    s = \"This is a sample string with vowels\"\n    return f(s, vowels, count)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 39,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, vowels=['a', 'e', 'i', 'o', 'u'], count=3) -> bool:\n    \"\"\"Check if a string contains at least count number of vowels\"\"\"\n    return sum((1 for c in s if c.lower() in vowels)) >= count",
        "solution_func": "def g(vowels=['a', 'e', 'i', 'o', 'u'], count=3):\n    s = \"This is a sample string with vowels\"\n    return f(s, vowels, count)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    return any([(nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums))])\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 40,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    return any([(nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums))])",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if any word in the list starts with the given prefix\"\"\"\n    return any([(word.startswith(prefix)) for word in words])\ndef g(prefix='pre'):\n    return ['prefix', 'preparation', 'word']\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 40,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if any word in the list starts with the given prefix\"\"\"\n    return any([(word.startswith(prefix)) for word in words])",
        "solution_func": "def g(prefix='pre'):\n    return ['prefix', 'preparation', 'word']",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if any element in the matrix equals the target\"\"\"\n    return any([(element == target) for row in matrix for element in row])\ndef g(target=5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 40,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if any element in the matrix equals the target\"\"\"\n    return any([(element == target) for row in matrix for element in row])",
        "solution_func": "def g(target=5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Given a 3x3 matrix of integers, find a row, column, or diagonal whose sum is equal to the target\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    for col in zip(*matrix):\n        if sum(col) == target:\n            return True\n    diagonal1 = [matrix[i][i] for i in range(3)]\n    if sum(diagonal1) == target:\n        return True\n    diagonal2 = [matrix[i][2-i] for i in range(3)]\n    if sum(diagonal2) == target:\n        return True\n    return False\ndef g(target=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target-15]]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 40,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Given a 3x3 matrix of integers, find a row, column, or diagonal whose sum is equal to the target\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    for col in zip(*matrix):\n        if sum(col) == target:\n            return True\n    diagonal1 = [matrix[i][i] for i in range(3)]\n    if sum(diagonal1) == target:\n        return True\n    diagonal2 = [matrix[i][2-i] for i in range(3)]\n    if sum(diagonal2) == target:\n        return True\n    return False",
        "solution_func": "def g(target=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target-15]]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            1,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(grid: List[List[str]], target_word=\"PYTHON\") -> bool:\n    \"\"\"Given a 2D grid of characters, find if the target word can be formed by connecting adjacent cells\"\"\"\n    def dfs(i, j, word_index):\n        if word_index == len(target_word):\n            return True\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] != target_word[word_index]:\n            return False\n        temp = grid[i][j]\n        grid[i][j] = ''\n        found = dfs(i+1, j, word_index+1) or dfs(i-1, j, word_index+1) or dfs(i, j+1, word_index+1) or dfs(i, j-1, word_index+1)\n        grid[i][j] = temp\n        return found\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if dfs(i, j, 0):\n                return True\n    return False\ndef g(target_word=\"PYTHON\"):\n    return [['P', 'Y', 'T'], ['H', 'O', 'N'], ['X', 'O', 'N']]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 40,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(grid: List[List[str]], target_word=\"PYTHON\") -> bool:\n    \"\"\"Given a 2D grid of characters, find if the target word can be formed by connecting adjacent cells\"\"\"\n    def dfs(i, j, word_index):\n        if word_index == len(target_word):\n            return True\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] != target_word[word_index]:\n            return False\n        temp = grid[i][j]\n        grid[i][j] = ''\n        found = dfs(i+1, j, word_index+1) or dfs(i-1, j, word_index+1) or dfs(i, j+1, word_index+1) or dfs(i, j-1, word_index+1)\n        grid[i][j] = temp\n        return found\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if dfs(i, j, 0):\n                return True\n    return False",
        "solution_func": "def g(target_word=\"PYTHON\"):\n    return [['P', 'Y', 'T'], ['H', 'O', 'N'], ['X', 'O', 'N']]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers that sums up to the target\"\"\"\n    numSet = set()\n    for num in nums:\n        if target - num in numSet:\n            return True\n        numSet.add(num)\n    return False\ndef g(target=7):\n    return [1, 2, 3, 4, target-10]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 40,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers that sums up to the target\"\"\"\n    numSet = set()\n    for num in nums:\n        if target - num in numSet:\n            return True\n        numSet.add(num)\n    return False",
        "solution_func": "def g(target=7):\n    return [1, 2, 3, 4, target-10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=5, b=3) -> bool:\n    \"\"\"Check if a number is a perfect square and divisible by another number.\"\"\"\n    return math.isqrt(n)**2 == n and n % b == 0\n\ndef g(a=5, b=3):\n    return b**2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 40,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=5, b=3) -> bool:\n    \"\"\"Check if a number is a perfect square and divisible by another number.\"\"\"\n    return math.isqrt(n)**2 == n and n % b == 0",
        "solution_func": "def g(a=5, b=3):\n    return b**2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, arr=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Check if all elements of a list are divisible by a given number.\"\"\"\n    return all(x % n == 0 for x in arr)\n\ndef g(arr=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return max(arr)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 40,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, arr=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Check if all elements of a list are divisible by a given number.\"\"\"\n    return all(x % n == 0 for x in arr)",
        "solution_func": "def g(arr=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return max(arr)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, num1=6, num2=9) -> bool:\n    \"\"\"Check if a number is divisible by both num1 and num2.\"\"\"\n    return n % num1 == 0 and n % num2 == 0\n\ndef g(num1=6, num2=9):\n    return num1 * num2\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 40,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, num1=6, num2=9) -> bool:\n    \"\"\"Check if a number is divisible by both num1 and num2.\"\"\"\n    return n % num1 == 0 and n % num2 == 0",
        "solution_func": "def g(num1=6, num2=9):\n    return num1 * num2",
        "map_ix": [
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Find a row and a column of a matrix such that their sum is equal to the target_sum\"\"\"\n    for row in matrix:\n        for col in zip(*matrix):\n            if sum(row) + sum(col) == target_sum:\n                return [matrix.index(row), matrix[0].index(col)]\n    return None\ndef g(target_sum=100):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 40,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Find a row and a column of a matrix such that their sum is equal to the target_sum\"\"\"\n    for row in matrix:\n        for col in zip(*matrix):\n            if sum(row) + sum(col) == target_sum:\n                return [matrix.index(row), matrix[0].index(col)]\n    return None",
        "solution_func": "def g(target_sum=100):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\ndef g(arr=[10, 20, 30, 40, 50]):\n    return arr\nassert f(g())\n",
        "emb": null,
        "idx_generation": 41,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(arr=[10, 20, 30, 40, 50]):\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string.\"\"\"\n    return substring in s\ndef g(substring='abc'):\n    return f\"def{substring}ghi\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 41,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string.\"\"\"\n    return substring in s",
        "solution_func": "def g(substring='abc'):\n    return f\"def{substring}ghi\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if any two numbers in the list add up to the target number.\"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\ndef g(arr=[1, 3, 5, 7, 9]):\n    return arr\nassert f(g())\n",
        "emb": null,
        "idx_generation": 41,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if any two numbers in the list add up to the target number.\"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False",
        "solution_func": "def g(arr=[1, 3, 5, 7, 9]):\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a=7, b=3) -> bool:\n    \"\"\"Check if the string has a certain number of 'a's and 'b's\"\"\"\n    return s.count('a') == a and s.count('b') == b and (len(s) == a + b)\ndef g(a=7, b=3):\n    return 'a' * a + 'b' * b\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 41,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, a=7, b=3) -> bool:\n    \"\"\"Check if the string has a certain number of 'a's and 'b's\"\"\"\n    return s.count('a') == a and s.count('b') == b and (len(s) == a + b)",
        "solution_func": "def g(a=7, b=3):\n    return 'a' * a + 'b' * b",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: list, x=5, y=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to a certain value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == x + y:\n                return True\n    return False\n\ndef g(x=5, y=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 41,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: list, x=5, y=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to a certain value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == x + y:\n                return True\n    return False",
        "solution_func": "def g(x=5, y=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=10) -> bool:\n    \"\"\"Check if the square root of x is close to a certain value\"\"\"\n    return abs(math.sqrt(x) - a) < 0.01\n\ndef g(a=10):\n    return a ** 2\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 41,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=10) -> bool:\n    \"\"\"Check if the square root of x is close to a certain value\"\"\"\n    return abs(math.sqrt(x) - a) < 0.01",
        "solution_func": "def g(a=10):\n    return a ** 2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 41,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='foo') -> bool:\n    \"\"\"Find the number of occurrences of the substring in the string\"\"\"\n    return string.count(substring) > 0\n\ndef g(substring='foo'):\n    return \"bar\" + substring + \"baz\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 41,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='foo') -> bool:\n    \"\"\"Find the number of occurrences of the substring in the string\"\"\"\n    return string.count(substring) > 0",
        "solution_func": "def g(substring='foo'):\n    return \"bar\" + substring + \"baz\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that multiply to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] * numbers[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target//9]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 41,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that multiply to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] * numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target//9]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=30) -> bool:\n    \"\"\"Check if the sum of the elements in the given matrix is equal to the target value\"\"\"\n    return np.sum(matrix) == target\n\ndef g(rows=3, cols=3, target=30):\n    matrix = np.random.randint(1, 10, size=(rows, cols))\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 41,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=30) -> bool:\n    \"\"\"Check if the sum of the elements in the given matrix is equal to the target value\"\"\"\n    return np.sum(matrix) == target",
        "solution_func": "def g(rows=3, cols=3, target=30):\n    matrix = np.random.randint(1, 10, size=(rows, cols))\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=45) -> bool:\n    \"\"\"Check if there exists a row in the matrix such that the sum of its elements is equal to the target_sum\"\"\"\n    return any(sum(row) == target_sum for row in matrix)\n\ndef g(target_sum=45):\n    return [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 42,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=45) -> bool:\n    \"\"\"Check if there exists a row in the matrix such that the sum of its elements is equal to the target_sum\"\"\"\n    return any(sum(row) == target_sum for row in matrix)",
        "solution_func": "def g(target_sum=45):\n    return [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, palindrome=True) -> bool:\n    \"\"\"Check if the word is a palindrome\"\"\"\n    return word == word[::-1] if palindrome else word != word[::-1]\n\ndef g(palindrome=True):\n    return \"racecar\" if palindrome else \"python\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 42,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str, palindrome=True) -> bool:\n    \"\"\"Check if the word is a palindrome\"\"\"\n    return word == word[::-1] if palindrome else word != word[::-1]",
        "solution_func": "def g(palindrome=True):\n    return \"racecar\" if palindrome else \"python\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list whose sum is equal to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 42,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list whose sum is equal to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Find whether n is a prime number using the list as a reference of prime numbers.\"\"\"\n    return n in lst\ndef g(lst=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return lst[-1] + 2\nassert f(g())\n",
        "emb": null,
        "idx_generation": 42,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Find whether n is a prime number using the list as a reference of prime numbers.\"\"\"\n    return n in lst",
        "solution_func": "def g(lst=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return lst[-1] + 2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Find the number of occurrences of the first character of s in the string multiplied by n.\"\"\"\n    return s.count(s[0]) == n\ndef g(n=10):\n    return str(n) * n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 42,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Find the number of occurrences of the first character of s in the string multiplied by n.\"\"\"\n    return s.count(s[0]) == n",
        "solution_func": "def g(n=10):\n    return str(n) * n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n=100) -> bool:\n    \"\"\"Find whether all numbers in the list are divisible by n.\"\"\"\n    return all((x % n == 0 for x in lst))\ndef g(n=100):\n    return [x * n for x in range(10)]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 42,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], n=100) -> bool:\n    \"\"\"Find whether all numbers in the list are divisible by n.\"\"\"\n    return all((x % n == 0 for x in lst))",
        "solution_func": "def g(n=100):\n    return [x * n for x in range(10)]",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Find two numbers in a list that add up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8]):\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 42,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Find two numbers in a list that add up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8]):\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Find three numbers in a list that add up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(nums: List[int] = [2, 4, 6, 8, 10, 12, 14, 16]):\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 42,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Find three numbers in a list that add up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(nums: List[int] = [2, 4, 6, 8, 10, 12, 14, 16]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find four numbers in a list that add up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                for l in range(k + 1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return True\n    return False\ndef g(nums: List[int] = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 42,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find four numbers in a list that add up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                for l in range(k + 1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return True\n    return False",
        "solution_func": "def g(nums: List[int] = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17]) -> bool:\n    \"\"\"Given a number n, return True if n is a prime number, otherwise return False.\"\"\"\n    return n > 1 and all(n % p != 0 for p in primes)\ndef g(primes=[2, 3, 5, 7, 11, 13, 17]):\n    return primes[-1] + 2\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 42,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17]) -> bool:\n    \"\"\"Given a number n, return True if n is a prime number, otherwise return False.\"\"\"\n    return n > 1 and all(n % p != 0 for p in primes)",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17]):\n    return primes[-1] + 2",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"Find a number which, when squared and multiplied by 5, is equal to the sum of its digits.\"\"\"\n    squared = num ** 2\n    digit_sum = sum(int(digit) for digit in str(squared))\n    return squared * 5 == digit_sum\n\ndef g():\n    return 4\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 43,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"Find a number which, when squared and multiplied by 5, is equal to the sum of its digits.\"\"\"\n    squared = num ** 2\n    digit_sum = sum(int(digit) for digit in str(squared))\n    return squared * 5 == digit_sum",
        "solution_func": "def g():\n    return 4",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: str) -> bool:\n    \"\"\"Find a string which, when reversed and concatenated with itself, is equal to the original string.\"\"\"\n    return x == x[::-1] + x\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 43,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str) -> bool:\n    \"\"\"Find a string which, when reversed and concatenated with itself, is equal to the original string.\"\"\"\n    return x == x[::-1] + x",
        "solution_func": "def g():\n    return \"racecar\"",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a list of numbers where each number is divisible by the previous number.\"\"\"\n    return all(nums[i] % nums[i-1] == 0 for i in range(1, len(nums)))\n\ndef g():\n    return [2, 4, 8, 16, 32]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 43,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a list of numbers where each number is divisible by the previous number.\"\"\"\n    return all(nums[i] % nums[i-1] == 0 for i in range(1, len(nums)))",
        "solution_func": "def g():\n    return [2, 4, 8, 16, 32]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the sum of a list of numbers is divisible by a given number\"\"\"\n    return sum(nums) % n == 0\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\nassert f(g(), n=4)\n",
        "emb": null,
        "idx_generation": 43,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the sum of a list of numbers is divisible by a given number\"\"\"\n    return sum(nums) % n == 0",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int, chars=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']) -> bool:\n    \"\"\"Check if a string contains all the characters from a given list\"\"\"\n    return all((c in s for c in chars)) and len(s) == n\ndef g(n=10, chars=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']):\n    return ''.join(chars[:n])\nassert f(g(), n=10)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 43,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n: int, chars=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']) -> bool:\n    \"\"\"Check if a string contains all the characters from a given list\"\"\"\n    return all((c in s for c in chars)) and len(s) == n",
        "solution_func": "def g(n=10, chars=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']):\n    return ''.join(chars[:n])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there exists a pair of numbers in a list that sums up to a target\"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set:\n            return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\nassert f(*g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "idx_generation": 43,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there exists a pair of numbers in a list that sums up to a target\"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set:\n            return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, determine if there exist two numbers such that their sum is equal to the target.\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n    Sample Output:\n    True\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=10):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 43,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, determine if there exist two numbers such that their sum is equal to the target.\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n    Sample Output:\n    True\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=10):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(sentence: str, target=\"eve\") -> bool:\n    \"\"\"Given a sentence, check if the target word is present in the sentence.\n    Sample Input:\n    sentence = \"This is an example sentence.\"\n    target = \"example\"\n    Sample Output:\n    True\"\"\"\n    words = sentence.split()\n    return target in words\n\ndef g(sentence=\"This is an example sentence.\", target=\"example\"):\n    return sentence\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 43,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(sentence: str, target=\"eve\") -> bool:\n    \"\"\"Given a sentence, check if the target word is present in the sentence.\n    Sample Input:\n    sentence = \"This is an example sentence.\"\n    target = \"example\"\n    Sample Output:\n    True\"\"\"\n    words = sentence.split()\n    return target in words",
        "solution_func": "def g(sentence=\"This is an example sentence.\", target=\"example\"):\n    return sentence",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix, target=0) -> bool:\n    \"\"\"Given a matrix (list of lists), check if the target number is present in the matrix.\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n    Sample Output:\n    True\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=0):\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 43,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix, target=0) -> bool:\n    \"\"\"Given a matrix (list of lists), check if the target number is present in the matrix.\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n    Sample Output:\n    True\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=0):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisors=[2, 3, 5, 7]) -> bool:\n    \"\"\"Check if a number is divisible by all given divisors\"\"\"\n    return all(n % d == 0 for d in divisors)\ndef g(divisors=[2, 3, 5, 7]):\n    return divisors[0] * divisors[1] * divisors[2] * divisors[3]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 43,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, divisors=[2, 3, 5, 7]) -> bool:\n    \"\"\"Check if a number is divisible by all given divisors\"\"\"\n    return all(n % d == 0 for d in divisors)",
        "solution_func": "def g(divisors=[2, 3, 5, 7]):\n    return divisors[0] * divisors[1] * divisors[2] * divisors[3]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: list, target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=0):\n    random.shuffle(nums)\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 44,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(nums: list, target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=0):\n    random.shuffle(nums)\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport math\n\ndef f(n: int, m=2) -> bool:\n    \"\"\"Check if n is a power of m\"\"\"\n    return math.log(n, m).is_integer()\n\ndef g(m=2):\n    return m**random.randint(1, 10)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 44,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\nimport math\n\ndef f(n: int, m=2) -> bool:\n    \"\"\"Check if n is a power of m\"\"\"\n    return math.log(n, m).is_integer()",
        "solution_func": "def g(m=2):\n    return m**random.randint(1, 10)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(dates: list, target_date=datetime.datetime(2022, 1, 1)) -> bool:\n    \"\"\"Check if the target_date is in the list of dates\"\"\"\n    return target_date in dates\n\ndef g(target_date=datetime.datetime(2022, 1, 1)):\n    dates = [target_date - datetime.timedelta(days=i) for i in range(10)]\n    dates.append(target_date)\n    dates.extend([target_date + datetime.timedelta(days=i) for i in range(10)])\n    return dates\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 44,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(dates: list, target_date=datetime.datetime(2022, 1, 1)) -> bool:\n    \"\"\"Check if the target_date is in the list of dates\"\"\"\n    return target_date in dates",
        "solution_func": "def g(target_date=datetime.datetime(2022, 1, 1)):\n    dates = [target_date - datetime.timedelta(days=i) for i in range(10)]\n    dates.append(target_date)\n    dates.extend([target_date + datetime.timedelta(days=i) for i in range(10)])\n    return dates",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    return any((x + y == target for x, y in combinations(nums, 2)))\n    \ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 44,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    return any((x + y == target for x, y in combinations(nums, 2)))",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if the given character appears in the string at least twice.\"\"\"\n    return s.count(char) >= 2\n\ndef g(s='banana'):\n    return s\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 44,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if the given character appears in the string at least twice.\"\"\"\n    return s.count(char) >= 2",
        "solution_func": "def g(s='banana'):\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(nums: List[int], n=10) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by the square root of n.\"\"\"\n    return all((num % sqrt(n) == 0 for num in nums))\n\ndef g(nums=[4, 16, 36, 49]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 44,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(nums: List[int], n=10) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by the square root of n.\"\"\"\n    return all((num % sqrt(n) == 0 for num in nums))",
        "solution_func": "def g(nums=[4, 16, 36, 49]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='apple') -> bool:\n    \"\"\"Check if a given substring is present in the string\"\"\"\n    return substr in s\ndef g(substr='apple'):\n    return \"I love eating \" + substr + \"s\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 44,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr='apple') -> bool:\n    \"\"\"Check if a given substring is present in the string\"\"\"\n    return substr in s",
        "solution_func": "def g(substr='apple'):\n    return \"I love eating \" + substr + \"s\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 44,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=2) -> bool:\n    \"\"\"Check if a given number is present in a matrix\"\"\"\n    for row in matrix:\n        if n in row:\n            return True\n    return False\ndef g(n=2):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 44,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=2) -> bool:\n    \"\"\"Check if a given number is present in a matrix\"\"\"\n    for row in matrix:\n        if n in row:\n            return True\n    return False",
        "solution_func": "def g(n=2):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in the given list that add up to the given target.\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(nums=[2, 4, 6, 8, 10], target=12):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 44,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in the given list that add up to the given target.\"\"\"\n    return any(target - num in nums for num in nums)",
        "solution_func": "def g(nums=[2, 4, 6, 8, 10], target=12):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(matrix: List[List[int]], row_sum=15, col_sum=15) -> bool:\n    \"\"\"Check if the sums of each row and each column in a matrix are equal to a given value\"\"\"\n    for row in matrix:\n        if sum(row) != row_sum:\n            return False\n    for col in range(len(matrix[0])):\n        if sum(matrix[row][col] for row in range(len(matrix))) != col_sum:\n            return False\n    return True\n\ndef g(row_sum=15, col_sum=15, n=3, m=3):\n    matrix = [[random.randint(1, 10) for _ in range(m)] for _ in range(n)]\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 45,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(matrix: List[List[int]], row_sum=15, col_sum=15) -> bool:\n    \"\"\"Check if the sums of each row and each column in a matrix are equal to a given value\"\"\"\n    for row in matrix:\n        if sum(row) != row_sum:\n            return False\n    for col in range(len(matrix[0])):\n        if sum(matrix[row][col] for row in range(len(matrix))) != col_sum:\n            return False\n    return True",
        "solution_func": "def g(row_sum=15, col_sum=15, n=3, m=3):\n    matrix = [[random.randint(1, 10) for _ in range(m)] for _ in range(n)]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(string: str, target=\"python\") -> bool:\n    \"\"\"Check if a given string can be formed by rearranging the letters of a target string\"\"\"\n    target_list = list(target)\n    for perm in itertools.permutations(target_list):\n        if ''.join(perm) == string:\n            return True\n    return False\n\ndef g(target=\"python\"):\n    return target\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 45,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\n\ndef f(string: str, target=\"python\") -> bool:\n    \"\"\"Check if a given string can be formed by rearranging the letters of a target string\"\"\"\n    target_list = list(target)\n    for perm in itertools.permutations(target_list):\n        if ''.join(perm) == string:\n            return True\n    return False",
        "solution_func": "def g(target=\"python\"):\n    return target",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in a list that add up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 45,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in a list that add up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a list that add up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(target=10):\n    nums = [1, 5, 3, 7, 9]\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 45,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a list that add up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))",
        "solution_func": "def g(target=10):\n    nums = [1, 5, 3, 7, 9]\n    return nums",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find three numbers in a list that add up to the target value.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums))))\ndef g(target=20):\n    nums = [2, 8, 4, 6, 12]\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 45,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find three numbers in a list that add up to the target value.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums))))",
        "solution_func": "def g(target=20):\n    nums = [2, 8, 4, 6, 12]\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find four numbers in a list that add up to the target value.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] + nums[l] == target for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums)) for l in range(k + 1, len(nums))))\ndef g(target=100):\n    nums = [10, 20, 30, 40, 50]\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 45,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find four numbers in a list that add up to the target value.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] + nums[l] == target for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums)) for l in range(k + 1, len(nums))))",
        "solution_func": "def g(target=100):\n    nums = [10, 20, 30, 40, 50]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Find three numbers in the array that add up to the target sum\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target_sum:\n                    return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], target_sum=10):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target_sum:\n                    return [arr[i], arr[j], arr[k]]\n    return []\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 45,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Find three numbers in the array that add up to the target sum\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target_sum:\n                    return True\n    return False",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5], target_sum=10):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target_sum:\n                    return [arr[i], arr[j], arr[k]]\n    return []",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the target string is a substring of the given string s\"\"\"\n    return target in s\n\ndef g(s='Hello, I love Python!'):\n    return 'python' if 'python' in s.lower() else 'not found'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 45,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the target string is a substring of the given string s\"\"\"\n    return target in s",
        "solution_func": "def g(s='Hello, I love Python!'):\n    return 'python' if 'python' in s.lower() else 'not found'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, num1=3, num2=5) -> bool:\n    \"\"\"Check if n is divisible by either num1 or num2\"\"\"\n    return n % num1 == 0 or n % num2 == 0\n\ndef g(num1=3, num2=5):\n    n = 1\n    while True:\n        if n % num1 == 0 or n % num2 == 0:\n            return n\n        n += 1\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 45,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, num1=3, num2=5) -> bool:\n    \"\"\"Check if n is divisible by either num1 or num2\"\"\"\n    return n % num1 == 0 or n % num2 == 0",
        "solution_func": "def g(num1=3, num2=5):\n    n = 1\n    while True:\n        if n % num1 == 0 or n % num2 == 0:\n            return n\n        n += 1",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=0.6931471805599453, b=0.5) -> bool:\n    \"\"\"Check if the value of x is equal to the logarithm of b with base a.\"\"\"\n    return math.isclose(math.log(b, a), x)\n    \ndef g(a=0.6931471805599453, b=0.5):\n    return math.log(b, a)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 45,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=0.6931471805599453, b=0.5) -> bool:\n    \"\"\"Check if the value of x is equal to the logarithm of b with base a.\"\"\"\n    return math.isclose(math.log(b, a), x)",
        "solution_func": "def g(a=0.6931471805599453, b=0.5):\n    return math.log(b, a)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=\"Hello, World!\") -> bool:\n    \"\"\"Check if a given string is the reverse of a target string\"\"\"\n    return s[::-1] == target\ndef g(target=\"Hello, World!\"):\n    return target[::-1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 46,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=\"Hello, World!\") -> bool:\n    \"\"\"Check if a given string is the reverse of a target string\"\"\"\n    return s[::-1] == target",
        "solution_func": "def g(target=\"Hello, World!\"):\n    return target[::-1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=10) -> bool:\n    \"\"\"Check if a given number is divisible by the target number\"\"\"\n    return n % target == 0\ndef g(target=10):\n    return target * 2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 46,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target=10) -> bool:\n    \"\"\"Check if a given number is divisible by the target number\"\"\"\n    return n % target == 0",
        "solution_func": "def g(target=10):\n    return target * 2",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of the numbers in a given list is equal to the target number\"\"\"\n    return sum(li) == target\ndef g(target=100):\n    return [10, 20, 30, 40]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 46,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of the numbers in a given list is equal to the target number\"\"\"\n    return sum(li) == target",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Given a list of integers, find two numbers that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g():\n    return [5, 7, 3, 9, 2]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 46,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Given a list of integers, find two numbers that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g():\n    return [5, 7, 3, 9, 2]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Given a matrix of integers, find a row and column such that the value at the intersection is equal to the target.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == target:\n                return True\n    return False\ndef g():\n    return [[1, 3, 5], [2, 4, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 46,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Given a matrix of integers, find a row and column such that the value at the intersection is equal to the target.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == target:\n                return True\n    return False",
        "solution_func": "def g():\n    return [[1, 3, 5], [2, 4, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is present in the given string.\"\"\"\n    return substring in s\ndef g(substring='abc'):\n    return \"defghi\" + substring + \"jklmno\"\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 46,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is present in the given string.\"\"\"\n    return substring in s",
        "solution_func": "def g(substring='abc'):\n    return \"defghi\" + substring + \"jklmno\"",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, num_list=[4, 7, 9, 2, 5]) -> bool:\n    \"\"\"Find n such that n is the sum of two distinct numbers in num_list\"\"\"\n    return any(n == num_list[i] + num_list[j] for i in range(len(num_list)) for j in range(i+1, len(num_list)))\ndef g(num_list=[4, 7, 9, 2, 5]):\n    return sum(num_list)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 46,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, num_list=[4, 7, 9, 2, 5]) -> bool:\n    \"\"\"Find n such that n is the sum of two distinct numbers in num_list\"\"\"\n    return any(n == num_list[i] + num_list[j] for i in range(len(num_list)) for j in range(i+1, len(num_list)))",
        "solution_func": "def g(num_list=[4, 7, 9, 2, 5]):\n    return sum(num_list)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr_list=['cat', 'dog', 'bat']) -> bool:\n    \"\"\"Find s such that s contains all the substrings in substr_list\"\"\"\n    return all(substr in s for substr in substr_list)\ndef g(substr_list=['cat', 'dog', 'bat']):\n    return ''.join(substr_list)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 46,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr_list=['cat', 'dog', 'bat']) -> bool:\n    \"\"\"Find s such that s contains all the substrings in substr_list\"\"\"\n    return all(substr in s for substr in substr_list)",
        "solution_func": "def g(substr_list=['cat', 'dog', 'bat']):\n    return ''.join(substr_list)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, num_list=[2, 4, 6, 8, 10], target_sum=20) -> bool:\n    \"\"\"Find n such that there exists a subset of num_list that sums up to target_sum\"\"\"\n    return any(sum(subset) == target_sum for i in range(len(num_list) + 1) for subset in itertools.combinations(num_list, i))\ndef g(num_list=[2, 4, 6, 8, 10], target_sum=20):\n    return sum(num_list)\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 46,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, num_list=[2, 4, 6, 8, 10], target_sum=20) -> bool:\n    \"\"\"Find n such that there exists a subset of num_list that sums up to target_sum\"\"\"\n    return any(sum(subset) == target_sum for i in range(len(num_list) + 1) for subset in itertools.combinations(num_list, i))",
        "solution_func": "def g(num_list=[2, 4, 6, 8, 10], target_sum=20):\n    return sum(num_list)",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, target_sum=10**6) -> bool:\n    \"\"\"Find whether or not n is a perfect number. A perfect number is a positive integer that is equal to the sum\n    of its proper positive divisors, excluding the number itself.\"\"\"\n    divisors_sum = sum([i for i in range(1, n) if n % i == 0])\n    return divisors_sum == n and divisors_sum == target_sum\n\ndef g(target_sum=10**6):\n    n = int(math.sqrt(2*target_sum))\n    while True:\n        if f(n, target_sum):\n            return n\n        n += 1\n\nassert f(g()) == True",
        "emb": null,
        "idx_generation": 46,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, target_sum=10**6) -> bool:\n    \"\"\"Find whether or not n is a perfect number. A perfect number is a positive integer that is equal to the sum\n    of its proper positive divisors, excluding the number itself.\"\"\"\n    divisors_sum = sum([i for i in range(1, n) if n % i == 0])\n    return divisors_sum == n and divisors_sum == target_sum",
        "solution_func": "def g(target_sum=10**6):\n    n = int(math.sqrt(2*target_sum))\n    while True:\n        if f(n, target_sum):\n            return n\n        n += 1",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, prefix_sum=0, start=0) -> bool:\n    \"\"\"Determine if there is a subset of nums that adds up to the target.\n    - target: the desired sum\n    - prefix_sum: the sum of the numbers in the current subset\n    - start: the index to start checking from\n    \"\"\"\n    if prefix_sum == target:\n        return True\n    if prefix_sum > target:\n        return False\n    for i in range(start, len(nums)):\n        if f(nums, target, prefix_sum + nums[i], i + 1):\n            return True\n    return False\n\ndef g(nums=[2, 4, 6, 8], target=14):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 47,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int, prefix_sum=0, start=0) -> bool:\n    \"\"\"Determine if there is a subset of nums that adds up to the target.\n    - target: the desired sum\n    - prefix_sum: the sum of the numbers in the current subset\n    - start: the index to start checking from\n    \"\"\"\n    if prefix_sum == target:\n        return True\n    if prefix_sum > target:\n        return False\n    for i in range(start, len(nums)):\n        if f(nums, target, prefix_sum + nums[i], i + 1):\n            return True\n    return False",
        "solution_func": "def g(nums=[2, 4, 6, 8], target=14):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, prefix_sum=0, start=0) -> bool:\n    \"\"\"Determine if there is a subset of nums that adds up to the target.\n    - target: the desired sum\n    - prefix_sum: the sum of the numbers in the current subset\n    - start: the index to start checking from\n    \"\"\"\n    if prefix_sum == target:\n        return True\n    if prefix_sum > target:\n        return False\n    for i in range(start, len(nums)):\n        if f(nums, target, prefix_sum + nums[i], i):\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4], target=6):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 47,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int, prefix_sum=0, start=0) -> bool:\n    \"\"\"Determine if there is a subset of nums that adds up to the target.\n    - target: the desired sum\n    - prefix_sum: the sum of the numbers in the current subset\n    - start: the index to start checking from\n    \"\"\"\n    if prefix_sum == target:\n        return True\n    if prefix_sum > target:\n        return False\n    for i in range(start, len(nums)):\n        if f(nums, target, prefix_sum + nums[i], i):\n            return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4], target=6):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, prefix_sum=0, start=0) -> bool:\n    \"\"\"Determine if there is a subset of nums that adds up to the target.\n    - target: the desired sum\n    - prefix_sum: the sum of the numbers in the current subset\n    - start: the index to start checking from\n    \"\"\"\n    if prefix_sum == target:\n        return True\n    if prefix_sum > target:\n        return False\n    for i in range(start, len(nums)):\n        if f(nums, target, prefix_sum + nums[i], i + 1):\n            return True\n    return False\n\ndef g(nums=[10, 20, 30, 40], target=55):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 47,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int, prefix_sum=0, start=0) -> bool:\n    \"\"\"Determine if there is a subset of nums that adds up to the target.\n    - target: the desired sum\n    - prefix_sum: the sum of the numbers in the current subset\n    - start: the index to start checking from\n    \"\"\"\n    if prefix_sum == target:\n        return True\n    if prefix_sum > target:\n        return False\n    for i in range(start, len(nums)):\n        if f(nums, target, prefix_sum + nums[i], i + 1):\n            return True\n    return False",
        "solution_func": "def g(nums=[10, 20, 30, 40], target=55):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the sum of all prime numbers less than n is equal to m.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    prime_sum = sum([i for i in range(n) if is_prime(i)])\n    return prime_sum == m\n\ndef g(m=10):\n    primes = [2]\n    num = 3\n    while len(primes) < m:\n        if all(num % i != 0 for i in range(2, int(math.sqrt(num)) + 1)):\n            primes.append(num)\n        num += 2\n    return sum(primes)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 47,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the sum of all prime numbers less than n is equal to m.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    prime_sum = sum([i for i in range(n) if is_prime(i)])\n    return prime_sum == m",
        "solution_func": "def g(m=10):\n    primes = [2]\n    num = 3\n    while len(primes) < m:\n        if all(num % i != 0 for i in range(2, int(math.sqrt(num)) + 1)):\n            primes.append(num)\n        num += 2\n    return sum(primes)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, target_sum=100) -> bool:\n    \"\"\"Check if there exists a combination of numbers from 1 to n whose sum is equal to the target_sum.\"\"\"\n    def has_sum(nums, target):\n        if target == 0:\n            return True\n        if len(nums) == 0 or target < 0:\n            return False\n        return has_sum(nums[1:], target - nums[0]) or has_sum(nums[1:], target)\n    \n    return has_sum(list(range(1, n+1)), target_sum)\n\ndef g(target_sum=100):\n    nums = list(range(1, int(target_sum/2) + 1))\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 47,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target_sum=100) -> bool:\n    \"\"\"Check if there exists a combination of numbers from 1 to n whose sum is equal to the target_sum.\"\"\"\n    def has_sum(nums, target):\n        if target == 0:\n            return True\n        if len(nums) == 0 or target < 0:\n            return False\n        return has_sum(nums[1:], target - nums[0]) or has_sum(nums[1:], target)\n    \n    return has_sum(list(range(1, n+1)), target_sum)",
        "solution_func": "def g(target_sum=100):\n    nums = list(range(1, int(target_sum/2) + 1))\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target_sum=1000) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that sums up to the target_sum.\"\"\"\n    def has_sum(nums, target):\n        if target == 0:\n            return True\n        if len(nums) == 0 or target < 0:\n            return False\n        return has_sum(nums[1:], target - nums[0]) or has_sum(nums[1:], target)\n    \n    return has_sum(nums, target_sum)\n\ndef g(target_sum=1000):\n    nums = [random.randint(1, 100) for _ in range(10)]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 47,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target_sum=1000) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that sums up to the target_sum.\"\"\"\n    def has_sum(nums, target):\n        if target == 0:\n            return True\n        if len(nums) == 0 or target < 0:\n            return False\n        return has_sum(nums[1:], target - nums[0]) or has_sum(nums[1:], target)\n    \n    return has_sum(nums, target_sum)",
        "solution_func": "def g(target_sum=1000):\n    nums = [random.randint(1, 100) for _ in range(10)]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, li=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if a number is present in a list\"\"\"\n    return n in li\ndef g(li=[2, 4, 6, 8, 10]):\n    return li[2]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 47,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, li=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if a number is present in a list\"\"\"\n    return n in li",
        "solution_func": "def g(li=[2, 4, 6, 8, 10]):\n    return li[2]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=\"apple\") -> bool:\n    \"\"\"Check if a target string is present in a given string\"\"\"\n    return target in s\ndef g(target=\"apple\"):\n    return \"I love eating \" + target + \"s\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 47,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=\"apple\") -> bool:\n    \"\"\"Check if a target string is present in a given string\"\"\"\n    return target in s",
        "solution_func": "def g(target=\"apple\"):\n    return \"I love eating \" + target + \"s\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, li=[1, 2, 3, 4, 5], target=6) -> bool:\n    \"\"\"Find a pair of numbers in a list that add up to a given target\"\"\"\n    for i in range(len(li)):\n        for j in range(i + 1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False\ndef g(li=[1, 2, 3, 4, 5], target=6):\n    return li[0], li[3]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 47,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, li=[1, 2, 3, 4, 5], target=6) -> bool:\n    \"\"\"Find a pair of numbers in a list that add up to a given target\"\"\"\n    for i in range(len(li)):\n        for j in range(i + 1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False",
        "solution_func": "def g(li=[1, 2, 3, 4, 5], target=6):\n    return li[0], li[3]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, min_len=5, max_len=10) -> bool:\n    \"\"\"Check if a string is a palindrome and its length is within a specified range.\"\"\"\n    return s == s[::-1] and min_len <= len(s) <= max_len\ndef g(min_len=5, max_len=10):\n    return 'racecar'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 47,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, min_len=5, max_len=10) -> bool:\n    \"\"\"Check if a string is a palindrome and its length is within a specified range.\"\"\"\n    return s == s[::-1] and min_len <= len(s) <= max_len",
        "solution_func": "def g(min_len=5, max_len=10):\n    return 'racecar'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date_str: str, year=2022, month=1, day=1) -> bool:\n    \"\"\"Check if the given date is in the future.\"\"\"\n    given_date = datetime.datetime.strptime(date_str, \"%Y-%m-%d\")\n    target_date = datetime.datetime(year, month, day)\n    return given_date > target_date\n\ndef g(year=2022, month=1, day=1):\n    current_date = datetime.datetime.now()\n    future_date = current_date + datetime.timedelta(days=365)\n    return future_date.strftime(\"%Y-%m-%d\")\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 48,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(date_str: str, year=2022, month=1, day=1) -> bool:\n    \"\"\"Check if the given date is in the future.\"\"\"\n    given_date = datetime.datetime.strptime(date_str, \"%Y-%m-%d\")\n    target_date = datetime.datetime(year, month, day)\n    return given_date > target_date",
        "solution_func": "def g(year=2022, month=1, day=1):\n    current_date = datetime.datetime.now()\n    future_date = current_date + datetime.timedelta(days=365)\n    return future_date.strftime(\"%Y-%m-%d\")",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: float, a=10, b=5) -> bool:\n    \"\"\"Check if the given number is the square root of a multiplied by b.\"\"\"\n    return math.isclose(math.sqrt(a * b), n)\n\ndef g(a=10, b=5):\n    return math.sqrt(a * b)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 48,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: float, a=10, b=5) -> bool:\n    \"\"\"Check if the given number is the square root of a multiplied by b.\"\"\"\n    return math.isclose(math.sqrt(a * b), n)",
        "solution_func": "def g(a=10, b=5):\n    return math.sqrt(a * b)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='Hello', b='World') -> bool:\n    \"\"\"Check if the given string is a concatenation of two words.\"\"\"\n    return s == a + b\n\ndef g(a='Hello', b='World'):\n    return a + b\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 48,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, a='Hello', b='World') -> bool:\n    \"\"\"Check if the given string is a concatenation of two words.\"\"\"\n    return s == a + b",
        "solution_func": "def g(a='Hello', b='World'):\n    return a + b",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(expression: str, target=24) -> bool:\n    \"\"\"Evaluate whether the given arithmetic expression can be equal to the target value of 24.\"\"\"\n    result = eval(expression)\n    return result == target\n\ndef g(target=24):\n    ans = []\n    for a in range(1, 14):\n        for b in range(1, 14):\n            for c in range(1, 14):\n                for d in range(1, 14):\n                    expressions = [\n                        f\"({a} + {b}) * {c} / {d}\",\n                        f\"({a} + {b} + {c}) / {d}\",\n                        f\"({a} * {b}) + ({c} * {d})\",\n                        f\"({a} + {b}) * {c} - {d}\",\n                        f\"({a} - {b}) * {c} + {d}\",\n                        f\"({a} - {b} - {c}) * {d}\",\n                    ]\n                    for expression in expressions:\n                        if f(expression):\n                            ans.append(expression)\n    return ans\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 48,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(expression: str, target=24) -> bool:\n    \"\"\"Evaluate whether the given arithmetic expression can be equal to the target value of 24.\"\"\"\n    result = eval(expression)\n    return result == target",
        "solution_func": "def g(target=24):\n    ans = []\n    for a in range(1, 14):\n        for b in range(1, 14):\n            for c in range(1, 14):\n                for d in range(1, 14):\n                    expressions = [\n                        f\"({a} + {b}) * {c} / {d}\",\n                        f\"({a} + {b} + {c}) / {d}\",\n                        f\"({a} * {b}) + ({c} * {d})\",\n                        f\"({a} + {b}) * {c} - {d}\",\n                        f\"({a} - {b}) * {c} + {d}\",\n                        f\"({a} - {b} - {c}) * {d}\",\n                    ]\n                    for expression in expressions:\n                        if f(expression):\n                            ans.append(expression)\n    return ans",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(num_list: List[int], target: int) -> bool:\n    \"\"\"Check if it is possible to find two numbers in the list that add up to the target value.\"\"\"\n    return any((num_list[i] + num_list[j] == target for i in range(len(num_list)) for j in range(i+1, len(num_list))))\n\ndef g(target: int):\n    num_list = random.sample(range(1, 101), 10)\n    return num_list\n\nassert f(g(target=100), target=100)\n",
        "emb": null,
        "idx_generation": 48,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(num_list: List[int], target: int) -> bool:\n    \"\"\"Check if it is possible to find two numbers in the list that add up to the target value.\"\"\"\n    return any((num_list[i] + num_list[j] == target for i in range(len(num_list)) for j in range(i+1, len(num_list))))",
        "solution_func": "def g(target: int):\n    num_list = random.sample(range(1, 101), 10)\n    return num_list",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = n * (n**2 + 1) // 2\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n\n    # Check diagonals\n    diagonal_sum_1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum_2 = sum(matrix[i][n-i-1] for i in range(n))\n    if diagonal_sum_1 != target_sum or diagonal_sum_2 != target_sum:\n        return False\n\n    return True\n\ndef g():\n    matrix = [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\n    return matrix\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 48,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = n * (n**2 + 1) // 2\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n\n    # Check diagonals\n    diagonal_sum_1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum_2 = sum(matrix[i][n-i-1] for i in range(n))\n    if diagonal_sum_1 != target_sum or diagonal_sum_2 != target_sum:\n        return False\n\n    return True",
        "solution_func": "def g():\n    matrix = [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\n    return matrix",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Check if a string can be transformed into a target string by removing characters.\n    - s: the original string\n    - target_length: the length of the target string\"\"\"\n    \n    return len(s) == target_length\ndef g(target_length=10):\n    return \"Hello World\"[:target_length]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 48,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Check if a string can be transformed into a target string by removing characters.\n    - s: the original string\n    - target_length: the length of the target string\"\"\"\n    \n    return len(s) == target_length",
        "solution_func": "def g(target_length=10):\n    return \"Hello World\"[:target_length]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, target_sum=100) -> bool:\n    \"\"\"Check if a list of numbers can be summed to a target sum.\n    - n: the length of the list\n    - target_sum: the desired sum\"\"\"\n    \n    return sum(range(n+1)) == target_sum\ndef g(target_sum=100):\n    return len(list(range(target_sum+1)))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 48,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target_sum=100) -> bool:\n    \"\"\"Check if a list of numbers can be summed to a target sum.\n    - n: the length of the list\n    - target_sum: the desired sum\"\"\"\n    \n    return sum(range(n+1)) == target_sum",
        "solution_func": "def g(target_sum=100):\n    return len(list(range(target_sum+1)))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, target_number=7) -> bool:\n    \"\"\"Check if a randomly generated list of numbers contains a target number.\n    - n: the length of the list\n    - target_number: the desired number\"\"\"\n    \n    return target_number in random.sample(range(1, 11), n)\ndef g(target_number=7):\n    return random.choice(range(1, 11))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 48,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, target_number=7) -> bool:\n    \"\"\"Check if a randomly generated list of numbers contains a target number.\n    - n: the length of the list\n    - target_number: the desired number\"\"\"\n    \n    return target_number in random.sample(range(1, 11), n)",
        "solution_func": "def g(target_number=7):\n    return random.choice(range(1, 11))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(x: int, target=50) -> bool:\n    \"\"\"Find a number that can be reached by repeatedly adding a random integer between 1 and 10 (inclusive).\"\"\"\n    return x == target\n\ndef g(target=50):\n    x = 0\n    while x < target:\n        x += random.randint(1, 10)\n    return x\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 48,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(x: int, target=50) -> bool:\n    \"\"\"Find a number that can be reached by repeatedly adding a random integer between 1 and 10 (inclusive).\"\"\"\n    return x == target",
        "solution_func": "def g(target=50):\n    x = 0\n    while x < target:\n        x += random.randint(1, 10)\n    return x",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target.\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(nums=[2, 4, 6, 8]):\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 49,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target.\"\"\"\n    return any(target - num in nums for num in nums)",
        "solution_func": "def g(nums=[2, 4, 6, 8]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, target=\"python\") -> bool:\n    \"\"\"Check if the given string is a palindrome and contains the target string.\"\"\"\n    return s == s[::-1] and target in s\ndef g(s=\"nohtyp\"):\n    return s\nassert f(g())\n",
        "emb": null,
        "idx_generation": 49,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=\"python\") -> bool:\n    \"\"\"Check if the given string is a palindrome and contains the target string.\"\"\"\n    return s == s[::-1] and target in s",
        "solution_func": "def g(s=\"nohtyp\"):\n    return s",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exist three numbers in the list that add up to the target.\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(nums=[25, 50, 75, 10, 30, 40]):\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 49,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exist three numbers in the list that add up to the target.\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))",
        "solution_func": "def g(nums=[25, 50, 75, 10, 30, 40]):\n    return nums",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, s1='apple', s2='banana', count1=3, count2=2) -> bool:\n    \"\"\"Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with the same 5 characters\"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:5] == s[-5:])\ndef g(s1='apple', s2='banana', count1=3, count2=2):\n    ans = (s1 + '?') * count1\n    ans += (s2 + '?') * count2\n    return ans + ans[:5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 49,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, s1='apple', s2='banana', count1=3, count2=2) -> bool:\n    \"\"\"Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with the same 5 characters\"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:5] == s[-5:])",
        "solution_func": "def g(s1='apple', s2='banana', count1=3, count2=2):\n    ans = (s1 + '?') * count1\n    ans += (s2 + '?') * count2\n    return ans + ans[:5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[120, 360, 240, 480, 720, 960, 1440, 1680, 1920, 2160, 2400, 2640, 2880, 3120, 3360, 3600, 3840, 4080, 4320, 4560, 4800]) -> bool:\n    \"\"\"Determine if the given number n is a multiple of all the numbers in the list.\"\"\"\n    return all((n % i == 0 for i in nums))\ndef g(nums=[120, 360, 240, 480, 720, 960, 1440, 1680, 1920, 2160, 2400, 2640, 2880, 3120, 3360, 3600, 3840, 4080, 4320, 4560, 4800]):\n    return max(nums)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 49,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[120, 360, 240, 480, 720, 960, 1440, 1680, 1920, 2160, 2400, 2640, 2880, 3120, 3360, 3600, 3840, 4080, 4320, 4560, 4800]) -> bool:\n    \"\"\"Determine if the given number n is a multiple of all the numbers in the list.\"\"\"\n    return all((n % i == 0 for i in nums))",
        "solution_func": "def g(nums=[120, 360, 240, 480, 720, 960, 1440, 1680, 1920, 2160, 2400, 2640, 2880, 3120, 3360, 3600, 3840, 4080, 4320, 4560, 4800]):\n    return max(nums)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]) -> bool:\n    \"\"\"Determine if the given number n is a prime number.\"\"\"\n    return n in nums\ndef g(nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]):\n    return max(nums)\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 49,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]) -> bool:\n    \"\"\"Determine if the given number n is a prime number.\"\"\"\n    return n in nums",
        "solution_func": "def g(nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]):\n    return max(nums)",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if a given character is present in the string\"\"\"\n    return char in s\ndef g(char='a'):\n    return char\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 49,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if a given character is present in the string\"\"\"\n    return char in s",
        "solution_func": "def g(char='a'):\n    return char",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if any two numbers in the list sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 49,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if any two numbers in the list sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target value is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 49,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target value is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if the sum of any two distinct elements in the list is equal to the target\"\"\"\n    return any((x + y == target) for i, x in enumerate(lst) for y in lst[i+1:])\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 49,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if the sum of any two distinct elements in the list is equal to the target\"\"\"\n    return any((x + y == target) for i, x in enumerate(lst) for y in lst[i+1:])",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python', case_sensitive=True) -> bool:\n    \"\"\"Check if the target string is present in the given string with or without case sensitivity\"\"\"\n    if case_sensitive:\n        return target in s\n    else:\n        return target.lower() in s.lower()\ndef g(target='python', case_sensitive=True):\n    return target.upper() if not case_sensitive else target\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 50,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='python', case_sensitive=True) -> bool:\n    \"\"\"Check if the target string is present in the given string with or without case sensitivity\"\"\"\n    if case_sensitive:\n        return target in s\n    else:\n        return target.lower() in s.lower()",
        "solution_func": "def g(target='python', case_sensitive=True):\n    return target.upper() if not case_sensitive else target",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisor=7) -> bool:\n    \"\"\"Check if the given number is divisible by the divisor\"\"\"\n    return n % divisor == 0\ndef g(divisor=7):\n    return divisor * 10\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 50,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, divisor=7) -> bool:\n    \"\"\"Check if the given number is divisible by the divisor\"\"\"\n    return n % divisor == 0",
        "solution_func": "def g(divisor=7):\n    return divisor * 10",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(s: str, target='circle', radius=5) -> bool:\n    \"\"\"Check if the given string represents a circle with the specified radius\"\"\"\n    if s != target:\n        return False\n    else:\n        return len(s) == int(2 * math.pi * radius)\ndef g(target='circle', radius=5):\n    return target\nassert f(g())\n",
        "emb": null,
        "idx_generation": 50,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(s: str, target='circle', radius=5) -> bool:\n    \"\"\"Check if the given string represents a circle with the specified radius\"\"\"\n    if s != target:\n        return False\n    else:\n        return len(s) == int(2 * math.pi * radius)",
        "solution_func": "def g(target='circle', radius=5):\n    return target",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a number that is a multiple of n and a power of 2.\"\"\"\n    return n % 2 == 0 and n != 0 and (n & (n - 1)) == 0\ndef g():\n    return 16\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 50,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a number that is a multiple of n and a power of 2.\"\"\"\n    return n % 2 == 0 and n != 0 and (n & (n - 1)) == 0",
        "solution_func": "def g():\n    return 16",
        "map_ix": [
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string that is a palindrome and contains at least one uppercase letter.\"\"\"\n    return s == s[::-1] and any(char.isupper() for char in s)\ndef g():\n    return \"Racecar\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 50,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string that is a palindrome and contains at least one uppercase letter.\"\"\"\n    return s == s[::-1] and any(char.isupper() for char in s)",
        "solution_func": "def g():\n    return \"Racecar\"",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: list) -> bool:\n    \"\"\"Find a list of integers where the sum of all its elements is equal to the product of all its elements.\"\"\"\n    return sum(lst) == 1 if 0 in lst else 0\ndef g():\n    return [1, 1, 0]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 50,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: list) -> bool:\n    \"\"\"Find a list of integers where the sum of all its elements is equal to the product of all its elements.\"\"\"\n    return sum(lst) == 1 if 0 in lst else 0",
        "solution_func": "def g():\n    return [1, 1, 0]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=15, b=25, c=10, d=20) -> bool:\n    \"\"\"Check if the given number is divisible by a, b, c, and d\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0 and n % d == 0\ndef g(a=15, b=25, c=10, d=20):\n    return a * b * c * d\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 50,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=15, b=25, c=10, d=20) -> bool:\n    \"\"\"Check if the given number is divisible by a, b, c, and d\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0 and n % d == 0",
        "solution_func": "def g(a=15, b=25, c=10, d=20):\n    return a * b * c * d",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(seq: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the sequence that adds up to the target\"\"\"\n    return any((seq[i] + seq[j] == target) for i in range(len(seq)) for j in range(i+1, len(seq)))\ndef g(target=100):\n    return [i for i in range(1, target//2+1)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 50,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(seq: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the sequence that adds up to the target\"\"\"\n    return any((seq[i] + seq[j] == target) for i in range(len(seq)) for j in range(i+1, len(seq)))",
        "solution_func": "def g(target=100):\n    return [i for i in range(1, target//2+1)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=5) -> bool:\n    \"\"\"Check if the given number is a multiple of either a or b\"\"\"\n    return n % a == 0 or n % b == 0\ndef g(a=3, b=5):\n    return a * b\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 50,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=5) -> bool:\n    \"\"\"Check if the given number is a multiple of either a or b\"\"\"\n    return n % a == 0 or n % b == 0",
        "solution_func": "def g(a=3, b=5):\n    return a * b",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, seq_len=10) -> bool:\n    \"\"\"Check if a given number is the sum of the first n terms of a specific sequence.\n    The sequence is defined as follows:\n    - The first term is 1.\n    - Each subsequent term is the sum of the previous n terms.\n    - The length of the sequence is equal to seq_len.\n    \"\"\"\n    seq = [1]\n    for i in range(1, seq_len):\n        seq.append(sum(seq[-n:]))\n    return seq[-1] == n\ndef g(seq_len=10):\n    return seq_len * (seq_len - 1) // 2\nassert f(g())\n",
        "emb": null,
        "idx_generation": 50,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, seq_len=10) -> bool:\n    \"\"\"Check if a given number is the sum of the first n terms of a specific sequence.\n    The sequence is defined as follows:\n    - The first term is 1.\n    - Each subsequent term is the sum of the previous n terms.\n    - The length of the sequence is equal to seq_len.\n    \"\"\"\n    seq = [1]\n    for i in range(1, seq_len):\n        seq.append(sum(seq[-n:]))\n    return seq[-1] == n",
        "solution_func": "def g(seq_len=10):\n    return seq_len * (seq_len - 1) // 2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, numbers=[2, 3, 5, 7, 11, 13, 17]) -> bool:\n    \"\"\"Check if n is divisible by all the numbers in the list\"\"\"\n    for num in numbers:\n        if n % num != 0:\n            return False\n    return True\n\ndef g(numbers=[2, 3, 5, 7, 11, 13, 17]):\n    n = 1\n    for num in numbers:\n        n *= num\n    return n\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 51,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, numbers=[2, 3, 5, 7, 11, 13, 17]) -> bool:\n    \"\"\"Check if n is divisible by all the numbers in the list\"\"\"\n    for num in numbers:\n        if n % num != 0:\n            return False\n    return True",
        "solution_func": "def g(numbers=[2, 3, 5, 7, 11, 13, 17]):\n    n = 1\n    for num in numbers:\n        n *= num\n    return n",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if n is a Fibonacci number\"\"\"\n    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b\n    return b == n\n\ndef g():\n    fib = [0, 1]\n    n = 1\n    while fib[-1] < 10**6:\n        n += 1\n        fib.append(fib[-1] + fib[-2])\n    return fib\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 51,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if n is a Fibonacci number\"\"\"\n    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b\n    return b == n",
        "solution_func": "def g():\n    fib = [0, 1]\n    n = 1\n    while fib[-1] < 10**6:\n        n += 1\n        fib.append(fib[-1] + fib[-2])\n    return fib",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst: list) -> bool:\n    \"\"\"Check if n is in the list\"\"\"\n    return n in lst\n\ndef g(lst):\n    random.shuffle(lst)\n    return lst\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(5, g(lst))\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 51,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, lst: list) -> bool:\n    \"\"\"Check if n is in the list\"\"\"\n    return n in lst",
        "solution_func": "def g(lst):\n    random.shuffle(lst)\n    return lst\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 8, 5, 4, 6, 1]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 51,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [2, 8, 5, 4, 6, 1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], length=5, prefix='pre') -> bool:\n    \"\"\"Find a word in the list that starts with the prefix and has a length of length\"\"\"\n    for word in words:\n        if word.startswith(prefix) and len(word) == length:\n            return True\n    return False\n\ndef g(length=5, prefix='pre'):\n    return ['prefix', 'president', 'present', 'preference', 'preview']\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 51,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], length=5, prefix='pre') -> bool:\n    \"\"\"Find a word in the list that starts with the prefix and has a length of length\"\"\"\n    for word in words:\n        if word.startswith(prefix) and len(word) == length:\n            return True\n    return False",
        "solution_func": "def g(length=5, prefix='pre'):\n    return ['prefix', 'president', 'present', 'preference', 'preview']",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=7) -> bool:\n    \"\"\"Find a number in the matrix that equals the target\"\"\"\n    for row in matrix:\n        for num in row:\n            if num == target:\n                return True\n    return False\n\ndef g(target=7):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 51,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=7) -> bool:\n    \"\"\"Find a number in the matrix that equals the target\"\"\"\n    for row in matrix:\n        for num in row:\n            if num == target:\n                return True\n    return False",
        "solution_func": "def g(target=7):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, letter='a', count=3) -> bool:\n    \"\"\"Check if a given letter appears a certain number of times in a string\"\"\"\n    return s.count(letter) == count\ndef g(letter='a', count=3):\n    return letter * count\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 51,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, letter='a', count=3) -> bool:\n    \"\"\"Check if a given letter appears a certain number of times in a string\"\"\"\n    return s.count(letter) == count",
        "solution_func": "def g(letter='a', count=3):\n    return letter * count",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target=25) -> bool:\n    \"\"\"Check if there are two numbers in a list that add up to a given target\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False\ndef g(target=25):\n    return [10, 15, 7, 3, 8]  # Example list of numbers\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 51,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], target=25) -> bool:\n    \"\"\"Check if there are two numbers in a list that add up to a given target\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=25):\n    return [10, 15, 7, 3, 8]  # Example list of numbers",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: List[int], y: List[int], z: List[int]) -> bool:\n    \"\"\"Check if the sum of two numbers from list x is equal to the sum of two numbers from list y\"\"\"\n    sums_x = set([i + j for i in x for j in x if i != j])\n    sums_y = set([i + j for i in y for j in y if i != j])\n    return any(s in sums_y for s in sums_x)\ndef g():\n    x = [1, 2, 3, 4, 5]  # Example list of numbers\n    y = [6, 7, 8, 9, 10]  # Example list of numbers\n    z = [11, 12, 13, 14, 15]  # Example list of numbers\n    return x, y, z\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 51,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], y: List[int], z: List[int]) -> bool:\n    \"\"\"Check if the sum of two numbers from list x is equal to the sum of two numbers from list y\"\"\"\n    sums_x = set([i + j for i in x for j in x if i != j])\n    sums_y = set([i + j for i in y for j in y if i != j])\n    return any(s in sums_y for s in sums_x)",
        "solution_func": "def g():\n    x = [1, 2, 3, 4, 5]  # Example list of numbers\n    y = [6, 7, 8, 9, 10]  # Example list of numbers\n    z = [11, 12, 13, 14, 15]  # Example list of numbers\n    return x, y, z",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], a=10, b=100, count=5) -> bool:\n    \"\"\"Find a list of count or more different numbers each between a and b that are perfect squares\"\"\"\n    assert all((int(n**0.5)**2 == n and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a=10, b=100, count=5):\n    return [n for n in range(a, b + 1) if int(n**0.5)**2 == n]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 51,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], a=10, b=100, count=5) -> bool:\n    \"\"\"Find a list of count or more different numbers each between a and b that are perfect squares\"\"\"\n    assert all((int(n**0.5)**2 == n and a <= n <= b for n in nums))\n    return len(set(nums)) >= count",
        "solution_func": "def g(a=10, b=100, count=5):\n    return [n for n in range(a, b + 1) if int(n**0.5)**2 == n]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find a number in the list that is divisible by n.\"\"\"\n    return any(num % n == 0 for num in num_list)\ndef g(num_list=[1, 2, 3, 4, 5]):\n    return num_list[1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 52,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find a number in the list that is divisible by n.\"\"\"\n    return any(num % n == 0 for num in num_list)",
        "solution_func": "def g(num_list=[1, 2, 3, 4, 5]):\n    return num_list[1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, num_list=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Find a number in the list that is a perfect square when divided by n.\"\"\"\n    return any(math.isqrt(num/n)**2 == num/n for num in num_list)\ndef g(num_list=[2, 4, 6, 8, 10]):\n    return num_list[2]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 52,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, num_list=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Find a number in the list that is a perfect square when divided by n.\"\"\"\n    return any(math.isqrt(num/n)**2 == num/n for num in num_list)",
        "solution_func": "def g(num_list=[2, 4, 6, 8, 10]):\n    return num_list[2]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find two numbers in the list that sum up to n.\"\"\"\n    return any(num1 + num2 == n for num1 in num_list for num2 in num_list)\ndef g(num_list=[1, 2, 3, 4, 5]):\n    random.shuffle(num_list)\n    return num_list[:2]\nassert f(g()[0])\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 52,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find two numbers in the list that sum up to n.\"\"\"\n    return any(num1 + num2 == n for num1 in num_list for num2 in num_list)",
        "solution_func": "def g(num_list=[1, 2, 3, 4, 5]):\n    random.shuffle(num_list)\n    return num_list[:2]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Determine if there exists a combination of k numbers in the list nums, such that their sum is equal to target.\n    - nums: a list of integers\n    - target: an integer\n    - k: an integer representing the number of elements to be selected from the list (default is 3)\n    \"\"\"\n    def backtrack(curr_sum, start, num_count):\n        if num_count == k:\n            return curr_sum == target\n        for i in range(start, len(nums)):\n            if curr_sum + nums[i] > target:\n                break\n            if i > start and nums[i] == nums[i-1]:\n                continue\n            if backtrack(curr_sum + nums[i], i + 1, num_count + 1):\n                return True\n        return False\n    \n    nums.sort()\n    return backtrack(0, 0, 0)\n\ndef g(nums: List[int], target: int, k: int = 3):\n    nums.sort()\n    result = []\n    def backtrack(curr_sum, start, num_count, combination):\n        if num_count == k:\n            if curr_sum == target:\n                result.append(combination)\n            return\n        for i in range(start, len(nums)):\n            if curr_sum + nums[i] > target:\n                break\n            if i > start and nums[i] == nums[i-1]:\n                continue\n            backtrack(curr_sum + nums[i], i + 1, num_count + 1, combination + [nums[i]])\n    \n    backtrack(0, 0, 0, [])\n    return result\n\nassert f(g([1, 2, 3, 4, 5, 6, 7], 10))\n",
        "emb": null,
        "idx_generation": 52,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Determine if there exists a combination of k numbers in the list nums, such that their sum is equal to target.\n    - nums: a list of integers\n    - target: an integer\n    - k: an integer representing the number of elements to be selected from the list (default is 3)\n    \"\"\"\n    def backtrack(curr_sum, start, num_count):\n        if num_count == k:\n            return curr_sum == target\n        for i in range(start, len(nums)):\n            if curr_sum + nums[i] > target:\n                break\n            if i > start and nums[i] == nums[i-1]:\n                continue\n            if backtrack(curr_sum + nums[i], i + 1, num_count + 1):\n                return True\n        return False\n    \n    nums.sort()\n    return backtrack(0, 0, 0)",
        "solution_func": "def g(nums: List[int], target: int, k: int = 3):\n    nums.sort()\n    result = []\n    def backtrack(curr_sum, start, num_count, combination):\n        if num_count == k:\n            if curr_sum == target:\n                result.append(combination)\n            return\n        for i in range(start, len(nums)):\n            if curr_sum + nums[i] > target:\n                break\n            if i > start and nums[i] == nums[i-1]:\n                continue\n            backtrack(curr_sum + nums[i], i + 1, num_count + 1, combination + [nums[i]])\n    \n    backtrack(0, 0, 0, [])\n    return result",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Determine if a target value exists in the matrix.\n    - matrix: a list of lists of integers representing a 2D matrix\n    - target: an integer\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    row = 0\n    col = n - 1\n    \n    while row < m and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    \n    return False\n\ndef g(matrix: List[List[int]], target: int):\n    m = len(matrix)\n    n = len(matrix[0])\n    row = 0\n    col = n - 1\n    \n    while row < m and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    \n    return False\n\nassert f(g([[1, 4, 7], [2, 5, 8], [3, 6, 9]], 5))\n",
        "emb": null,
        "idx_generation": 52,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Determine if a target value exists in the matrix.\n    - matrix: a list of lists of integers representing a 2D matrix\n    - target: an integer\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    row = 0\n    col = n - 1\n    \n    while row < m and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    \n    return False",
        "solution_func": "def g(matrix: List[List[int]], target: int):\n    m = len(matrix)\n    n = len(matrix[0])\n    row = 0\n    col = n - 1\n    \n    while row < m and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    \n    return False",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\n    - s: a string\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s: str):\n    return s\n\nassert f(g(\"racecar\"))\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 52,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\n    - s: a string\n    \"\"\"\n    return s == s[::-1]",
        "solution_func": "def g(s: str):\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=2.718281828459045, b=1.4142135623730951) -> bool:\n    \"\"\"Find x such that the square root of x is a and the natural logarithm of x is b\"\"\"\n    return math.sqrt(x) == a and math.log(x) == b\n\ndef g(a=2.718281828459045, b=1.4142135623730951):\n    return math.exp(b) * (a ** 2)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 52,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=2.718281828459045, b=1.4142135623730951) -> bool:\n    \"\"\"Find x such that the square root of x is a and the natural logarithm of x is b\"\"\"\n    return math.sqrt(x) == a and math.log(x) == b",
        "solution_func": "def g(a=2.718281828459045, b=1.4142135623730951):\n    return math.exp(b) * (a ** 2)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, pattern='abc') -> bool:\n    \"\"\"Find a string s that contains the given pattern as a substring\"\"\"\n    return pattern in s\n\ndef g(pattern='abc'):\n    return pattern * 10\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 52,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, pattern='abc') -> bool:\n    \"\"\"Find a string s that contains the given pattern as a substring\"\"\"\n    return pattern in s",
        "solution_func": "def g(pattern='abc'):\n    return pattern * 10",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=7, c=11) -> bool:\n    \"\"\"Find n that can be expressed as a sum of a, b, and c\"\"\"\n    return a + b + c == n\n\ndef g(a=3, b=7, c=11):\n    return a + b + c\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 52,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=7, c=11) -> bool:\n    \"\"\"Find n that can be expressed as a sum of a, b, and c\"\"\"\n    return a + b + c == n",
        "solution_func": "def g(a=3, b=7, c=11):\n    return a + b + c",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=127, b=289, c=12, d=3) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to a third number.\"\"\"\n    return a + b == c and c + d == n\ndef g(a=127, b=289, c=12, d=3):\n    return c + d\nassert f(g())\n",
        "emb": null,
        "idx_generation": 52,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=127, b=289, c=12, d=3) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to a third number.\"\"\"\n    return a + b == c and c + d == n",
        "solution_func": "def g(a=127, b=289, c=12, d=3):\n    return c + d",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Find a list of integers that when multiplied by 2 and sorted in ascending order gives [2, 4, 6, 8, 10].\"\"\"\n    return sorted([x * 2 for x in lst]) == [2, 4, 6, 8, 10]\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 53,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Find a list of integers that when multiplied by 2 and sorted in ascending order gives [2, 4, 6, 8, 10].\"\"\"\n    return sorted([x * 2 for x in lst]) == [2, 4, 6, 8, 10]",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Find a matrix where the sum of each row is equal to [6, 15, 24, 33] and the sum of each column is equal to [26, 26, 26, 26].\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    column_sums = [sum(column) for column in zip(*matrix)]\n    return row_sums == [6, 15, 24, 33] and column_sums == [26, 26, 26, 26]\ndef g():\n    return [[1, 2, 3, 20], [4, 5, 6, 0], [7, 8, 9, 10], [11, 12, 0, 0]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 53,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Find a matrix where the sum of each row is equal to [6, 15, 24, 33] and the sum of each column is equal to [26, 26, 26, 26].\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    column_sums = [sum(column) for column in zip(*matrix)]\n    return row_sums == [6, 15, 24, 33] and column_sums == [26, 26, 26, 26]",
        "solution_func": "def g():\n    return [[1, 2, 3, 20], [4, 5, 6, 0], [7, 8, 9, 10], [11, 12, 0, 0]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"Find an integer that when squared and multiplied by 3 gives 2673.\"\"\"\n    return num**2 * 3 == 2673\ndef g():\n    return 29\nassert f(g())\n",
        "emb": null,
        "idx_generation": 53,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"Find an integer that when squared and multiplied by 3 gives 2673.\"\"\"\n    return num**2 * 3 == 2673",
        "solution_func": "def g():\n    return 29",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find two numbers that sum up to a specific target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, target-1]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 53,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find two numbers that sum up to a specific target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, target-1]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string contains a substring of a specific length.\"\"\"\n    return any(len(s[i:i+n]) == n for i in range(len(s)-n+1))\ndef g(n=3):\n    return 'abcdefghi'*n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 53,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string contains a substring of a specific length.\"\"\"\n    return any(len(s[i:i+n]) == n for i in range(len(s)-n+1))",
        "solution_func": "def g(n=3):\n    return 'abcdefghi'*n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers, find three numbers that sum up to a specific target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=100):\n    return [1, 2, target-3]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 53,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers, find three numbers that sum up to a specific target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=100):\n    return [1, 2, target-3]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m: int, k: int) -> bool:\n    \"\"\"Find three integers that satisfy a given equation.\"\"\"\n    return n**2 + m**2 == k**2\ndef g():\n    return 3, 4, 5\nassert f(g())\n",
        "emb": null,
        "idx_generation": 53,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m: int, k: int) -> bool:\n    \"\"\"Find three integers that satisfy a given equation.\"\"\"\n    return n**2 + m**2 == k**2",
        "solution_func": "def g():\n    return 3, 4, 5",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Find two integers that satisfy a given equation.\"\"\"\n    return n**2 - m**2 == 16\ndef g():\n    return 8, 0\nassert f(g())\n",
        "emb": null,
        "idx_generation": 53,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Find two integers that satisfy a given equation.\"\"\"\n    return n**2 - m**2 == 16",
        "solution_func": "def g():\n    return 8, 0",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Find two integers that satisfy a given equation.\"\"\"\n    return (n + m)**2 - (n - m)**2 == 16\ndef g():\n    return 4, 0\nassert f(g())\n",
        "emb": null,
        "idx_generation": 53,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Find two integers that satisfy a given equation.\"\"\"\n    return (n + m)**2 - (n - m)**2 == 16",
        "solution_func": "def g():\n    return 4, 0",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=['a', 'b', 'c', 'd', 'e'], index=2) -> bool:\n    \"\"\"Find the element at the given index in the target list that matches the given string\"\"\"\n    return target[index] == s\ndef g(target=['a', 'b', 'c', 'd', 'e'], index=2):\n    return target[index]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 53,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=['a', 'b', 'c', 'd', 'e'], index=2) -> bool:\n    \"\"\"Find the element at the given index in the target list that matches the given string\"\"\"\n    return target[index] == s",
        "solution_func": "def g(target=['a', 'b', 'c', 'd', 'e'], index=2):\n    return target[index]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, lst=['apple', 'banana', 'orange', 'grapefruit', 'watermelon', 'mango'], num=2) -> bool:\n    \"\"\"Check if the string s contains at least num fruit names from the list lst\"\"\"\n    count = 0\n    for fruit in lst:\n        if fruit in s:\n            count += 1\n            if count >= num:\n                return True\n    return False\ndef g(lst=['apple', 'banana', 'orange', 'grapefruit', 'watermelon', 'mango'], num=2):\n    return ''.join(lst)\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 54,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, lst=['apple', 'banana', 'orange', 'grapefruit', 'watermelon', 'mango'], num=2) -> bool:\n    \"\"\"Check if the string s contains at least num fruit names from the list lst\"\"\"\n    count = 0\n    for fruit in lst:\n        if fruit in s:\n            count += 1\n            if count >= num:\n                return True\n    return False",
        "solution_func": "def g(lst=['apple', 'banana', 'orange', 'grapefruit', 'watermelon', 'mango'], num=2):\n    return ''.join(lst)",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst=[2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 47, 50, 53, 56, 59, 62, 65, 68, 71, 74, 77, 80, 83, 86, 89, 92, 95, 98, 101, 104, 107, 110, 113, 116, 119, 122, 125, 128, 131, 134, 137, 140, 143, 146]) -> bool:\n    \"\"\"Check if the sum of the first n numbers in the list is divisible by 10\"\"\"\n    return sum(lst[:n]) % 10 == 0\ndef g(lst=[2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 47, 50, 53, 56, 59, 62, 65, 68, 71, 74, 77, 80, 83, 86, 89, 92, 95, 98, 101, 104, 107, 110, 113, 116, 119, 122, 125, 128, 131, 134, 137, 140, 143, 146]):\n    return len(lst)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 54,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 47, 50, 53, 56, 59, 62, 65, 68, 71, 74, 77, 80, 83, 86, 89, 92, 95, 98, 101, 104, 107, 110, 113, 116, 119, 122, 125, 128, 131, 134, 137, 140, 143, 146]) -> bool:\n    \"\"\"Check if the sum of the first n numbers in the list is divisible by 10\"\"\"\n    return sum(lst[:n]) % 10 == 0",
        "solution_func": "def g(lst=[2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 47, 50, 53, 56, 59, 62, 65, 68, 71, 74, 77, 80, 83, 86, 89, 92, 95, 98, 101, 104, 107, 110, 113, 116, 119, 122, 125, 128, 131, 134, 137, 140, 143, 146]):\n    return len(lst)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subsequence of length k in the list that is strictly increasing\"\"\"\n    if len(lst) < k:\n        return False\n    for i in range(len(lst) - k + 1):\n        subsequence = lst[i:i+k]\n        if subsequence == sorted(subsequence):\n            return True\n    return False\ndef g(lst=[1, 3, 2, 5, 4, 7, 6, 9, 8, 10]):\n    return lst\nassert f(g())\n",
        "emb": null,
        "idx_generation": 54,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subsequence of length k in the list that is strictly increasing\"\"\"\n    if len(lst) < k:\n        return False\n    for i in range(len(lst) - k + 1):\n        subsequence = lst[i:i+k]\n        if subsequence == sorted(subsequence):\n            return True\n    return False",
        "solution_func": "def g(lst=[1, 3, 2, 5, 4, 7, 6, 9, 8, 10]):\n    return lst",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, big_str='supercalifragilisticexpialidocious', index=5) -> bool:\n    \"\"\"Find a string whose *last* index in big_str is index\"\"\"\n    return big_str.rindex(s) == index\ndef g(big_str='supercalifragilisticexpialidocious', index=5):\n    return big_str[:index+1]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 54,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, big_str='supercalifragilisticexpialidocious', index=5) -> bool:\n    \"\"\"Find a string whose *last* index in big_str is index\"\"\"\n    return big_str.rindex(s) == index",
        "solution_func": "def g(big_str='supercalifragilisticexpialidocious', index=5):\n    return big_str[:index+1]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=7) -> bool:\n    \"\"\"Find the smallest n such that the sum of n consecutive numbers starting from a is equal to b\"\"\"\n    return sum(range(a, a+n)) == b\ndef g(a=5, b=7):\n    i = 0\n    while sum(range(a, a+i)) != b:\n        i += 1\n    return i\nassert f(g())\n",
        "emb": null,
        "idx_generation": 54,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=5, b=7) -> bool:\n    \"\"\"Find the smallest n such that the sum of n consecutive numbers starting from a is equal to b\"\"\"\n    return sum(range(a, a+n)) == b",
        "solution_func": "def g(a=5, b=7):\n    i = 0\n    while sum(range(a, a+i)) != b:\n        i += 1\n    return i",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=2, b=3, c=5, d=7) -> bool:\n    \"\"\"Find the solution to the system of equations x + y = a and x - y = b\"\"\"\n    x = (a + b) / 2\n    y = (a - b) / 2\n    return x == e[0] and y == e[1]\ndef g(a=2, b=3, c=5, d=7):\n    return [(a + b) / 2, (a - b) / 2]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 54,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: List[int], a=2, b=3, c=5, d=7) -> bool:\n    \"\"\"Find the solution to the system of equations x + y = a and x - y = b\"\"\"\n    x = (a + b) / 2\n    y = (a - b) / 2\n    return x == e[0] and y == e[1]",
        "solution_func": "def g(a=2, b=3, c=5, d=7):\n    return [(a + b) / 2, (a - b) / 2]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find the two numbers in the list that sum up to the target value.\"\"\"\n    return sum(nums) == target and len(nums) >= 2 and any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [2, 8]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 54,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find the two numbers in the list that sum up to the target value.\"\"\"\n    return sum(nums) == target and len(nums) >= 2 and any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=10):\n    return [2, 8]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Determine if there exists a row in the matrix that sums up to the target value.\"\"\"\n    return any((sum(row) == target) for row in matrix)\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 54,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Determine if there exists a row in the matrix that sums up to the target value.\"\"\"\n    return any((sum(row) == target) for row in matrix)",
        "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find the two numbers in the list that sum up to the target value, considering only unique numbers.\"\"\"\n    nums = list(set(nums))\n    return sum(nums) == target and len(nums) >= 2 and any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [2, 8, 2, 4, 6]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 54,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find the two numbers in the list that sum up to the target value, considering only unique numbers.\"\"\"\n    nums = list(set(nums))\n    return sum(nums) == target and len(nums) >= 2 and any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=10):\n    return [2, 8, 2, 4, 6]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Find a list of integers where the sum of the integers is equal to a given target\"\"\"\n    return sum(lst) == target\ndef g(target=100):\n    return [i for i in range(1, target+1)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 54,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Find a list of integers where the sum of the integers is equal to a given target\"\"\"\n    return sum(lst) == target",
        "solution_func": "def g(target=100):\n    return [i for i in range(1, target+1)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: list) -> bool:\n    \"\"\"Check if the given list of numbers is in ascending order.\"\"\"\n    return nums == sorted(nums)\n\ndef g():\n    \"\"\"Generate a list of 5 random numbers between 1 and 10.\"\"\"\n    return random.sample(range(1, 11), 5)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 55,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(nums: list) -> bool:\n    \"\"\"Check if the given list of numbers is in ascending order.\"\"\"\n    return nums == sorted(nums)",
        "solution_func": "def g():\n    \"\"\"Generate a list of 5 random numbers between 1 and 10.\"\"\"\n    return random.sample(range(1, 11), 5)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport math\n\ndef f(num: int) -> bool:\n    \"\"\"Check if the given number is a perfect square and divisible by 3.\"\"\"\n    return math.isqrt(num)**2 == num and num % 3 == 0\n\ndef g():\n    \"\"\"Generate a perfect square number divisible by 3.\"\"\"\n    num = random.randint(3, 10) * 3\n    return num**2\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 55,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\nimport math\n\ndef f(num: int) -> bool:\n    \"\"\"Check if the given number is a perfect square and divisible by 3.\"\"\"\n    return math.isqrt(num)**2 == num and num % 3 == 0",
        "solution_func": "def g():\n    \"\"\"Generate a perfect square number divisible by 3.\"\"\"\n    num = random.randint(3, 10) * 3\n    return num**2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport string\n\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if the given string contains all the lowercase letters of the English alphabet in order, with each letter repeated n times.\"\"\"\n    lowercase_alphabet = string.ascii_lowercase\n    repeated_letters = lowercase_alphabet * n\n    return repeated_letters in s\n\ndef g(n: int):\n    \"\"\"Generate a string that contains all lowercase letters of the English alphabet in order, with each letter repeated n times.\"\"\"\n    lowercase_alphabet = string.ascii_lowercase\n    repeated_letters = lowercase_alphabet * n\n    return repeated_letters\n\nassert f(g(2), 2)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 55,
        "target_skills": null,
        "problem_func": "from typing import*\nimport string\n\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if the given string contains all the lowercase letters of the English alphabet in order, with each letter repeated n times.\"\"\"\n    lowercase_alphabet = string.ascii_lowercase\n    repeated_letters = lowercase_alphabet * n\n    return repeated_letters in s",
        "solution_func": "def g(n: int):\n    \"\"\"Generate a string that contains all lowercase letters of the English alphabet in order, with each letter repeated n times.\"\"\"\n    lowercase_alphabet = string.ascii_lowercase\n    repeated_letters = lowercase_alphabet * n\n    return repeated_letters",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix of integers, return True if the sum of each row is equal to the sum of the corresponding column, otherwise return False.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    return rows == cols\ndef g(matrix: List[List[int]]):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 55,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix of integers, return True if the sum of each row is equal to the sum of the corresponding column, otherwise return False.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    return rows == cols",
        "solution_func": "def g(matrix: List[List[int]]):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, k: int) -> bool:\n    \"\"\"Given a string and an integer k, return True if the string can be rearranged such that each substring of length k consists of unique characters, otherwise return False.\"\"\"\n    substrings = [s[i:i+k] for i in range(0, len(s), k)]\n    for substring in substrings:\n        if len(substring) != len(set(substring)):\n            return False\n    return True\ndef g(s: str, k: int):\n    return \"abcdefgh\", 3\nassert f(g())\n",
        "emb": null,
        "idx_generation": 55,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, k: int) -> bool:\n    \"\"\"Given a string and an integer k, return True if the string can be rearranged such that each substring of length k consists of unique characters, otherwise return False.\"\"\"\n    substrings = [s[i:i+k] for i in range(0, len(s), k)]\n    for substring in substrings:\n        if len(substring) != len(set(substring)):\n            return False\n    return True",
        "solution_func": "def g(s: str, k: int):\n    return \"abcdefgh\", 3",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Given an integer n, return True if n is a palindrome, otherwise return False.\"\"\"\n    return str(n) == str(n)[::-1]\ndef g(n: int):\n    return 12321\nassert f(g())\n",
        "emb": null,
        "idx_generation": 55,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Given an integer n, return True if n is a palindrome, otherwise return False.\"\"\"\n    return str(n) == str(n)[::-1]",
        "solution_func": "def g(n: int):\n    return 12321",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Given a matrix of integers, determine if there exists a path from the top-left corner to the bottom-right corner such that the sum of the numbers along the path is equal to the target value.\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    \n    def backtrack(i, j, curr_sum):\n        if i == n-1 and j == m-1:\n            return curr_sum + matrix[i][j] == target\n        if i >= n or j >= m:\n            return False\n        \n        return backtrack(i+1, j, curr_sum + matrix[i][j]) or backtrack(i, j+1, curr_sum + matrix[i][j])\n    \n    return backtrack(0, 0, 0)\n    \ndef g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 55,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Given a matrix of integers, determine if there exists a path from the top-left corner to the bottom-right corner such that the sum of the numbers along the path is equal to the target value.\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    \n    def backtrack(i, j, curr_sum):\n        if i == n-1 and j == m-1:\n            return curr_sum + matrix[i][j] == target\n        if i >= n or j >= m:\n            return False\n        \n        return backtrack(i+1, j, curr_sum + matrix[i][j]) or backtrack(i, j+1, curr_sum + matrix[i][j])\n    \n    return backtrack(0, 0, 0)",
        "solution_func": "def g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Given an array of integers, find if there exists a pair of elements such that their sum is equal to the target value.\"\"\"\n    seen = set()\n    \n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n        \n    return False\n    \ndef g(target=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 55,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Given an array of integers, find if there exists a pair of elements such that their sum is equal to the target value.\"\"\"\n    seen = set()\n    \n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n        \n    return False",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Given a list of integers, determine if it is possible to rearrange the numbers and insert '+' and '*' operators such that the expression evaluates to the target value.\"\"\"\n    def calculate(expr):\n        stack = []\n        for char in expr:\n            if char.isdigit():\n                stack.append(int(char))\n            else:\n                b = stack.pop()\n                a = stack.pop()\n                if char == '+':\n                    stack.append(a + b)\n                elif char == '*':\n                    stack.append(a * b)\n        return stack[0]\n    \n    for perm in permutations(nums):\n        operators = ['+', '*'] * (len(perm)-1)\n        for expr in permutations(list(perm) + operators):\n            if calculate(expr) == target:\n                return True\n                \n    return False\n    \ndef g(target=24):\n    return [1, 2, 3, 4]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 55,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Given a list of integers, determine if it is possible to rearrange the numbers and insert '+' and '*' operators such that the expression evaluates to the target value.\"\"\"\n    def calculate(expr):\n        stack = []\n        for char in expr:\n            if char.isdigit():\n                stack.append(int(char))\n            else:\n                b = stack.pop()\n                a = stack.pop()\n                if char == '+':\n                    stack.append(a + b)\n                elif char == '*':\n                    stack.append(a * b)\n        return stack[0]\n    \n    for perm in permutations(nums):\n        operators = ['+', '*'] * (len(perm)-1)\n        for expr in permutations(list(perm) + operators):\n            if calculate(expr) == target:\n                return True\n                \n    return False",
        "solution_func": "def g(target=24):\n    return [1, 2, 3, 4]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Given a matrix, determine if there exists a row where the sum of all elements is equal to the target\"\"\"\n    return any(sum(row) == target for row in matrix)\ndef g(matrix=[[2, 4, 6], [8, 10, 12], [14, 16, 18]]):\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 55,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Given a matrix, determine if there exists a row where the sum of all elements is equal to the target\"\"\"\n    return any(sum(row) == target for row in matrix)",
        "solution_func": "def g(matrix=[[2, 4, 6], [8, 10, 12], [14, 16, 18]]):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Find a pair of distinct elements in the array that sum up to the target sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 9]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 56,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Find a pair of distinct elements in the array that sum up to the target sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=10):\n    return [1, 9]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, prime=False) -> bool:\n    \"\"\"Check if a given number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 13\n\nassert f(g(), prime=True)\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 56,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, prime=False) -> bool:\n    \"\"\"Check if a given number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 13",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of elements in the array that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, -1]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 56,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of elements in the array that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    return [1, -1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(nums: List[int], target_gcd=9) -> bool:\n    \"\"\"Check if the greatest common divisor of the numbers in the list is equal to the target\"\"\"\n    return gcd(*nums) == target_gcd\n\ndef g(target_gcd=9):\n    return [n for n in range(1, 101) if gcd(n, target_gcd) == target_gcd]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 56,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(nums: List[int], target_gcd=9) -> bool:\n    \"\"\"Check if the greatest common divisor of the numbers in the list is equal to the target\"\"\"\n    return gcd(*nums) == target_gcd",
        "solution_func": "def g(target_gcd=9):\n    return [n for n in range(1, 101) if gcd(n, target_gcd) == target_gcd]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    return any((a + b == target_sum for i, a in enumerate(nums) for b in nums[i+1:]))\n\ndef g(target_sum=100):\n    return [n for n in range(1, target_sum) if target_sum - n in range(1, target_sum)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 56,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    return any((a + b == target_sum for i, a in enumerate(nums) for b in nums[i+1:]))",
        "solution_func": "def g(target_sum=100):\n    return [n for n in range(1, target_sum) if target_sum - n in range(1, target_sum)]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_product=120) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to the target\"\"\"\n    return any((a * b == target_product for i, a in enumerate(nums) for b in nums[i+1:]))\n\ndef g(target_product=120):\n    return [n for n in range(1, target_product) if target_product % n == 0]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 56,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_product=120) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to the target\"\"\"\n    return any((a * b == target_product for i, a in enumerate(nums) for b in nums[i+1:]))",
        "solution_func": "def g(target_product=120):\n    return [n for n in range(1, target_product) if target_product % n == 0]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(prices: List[float], total_price=100, num_items=5, discount=0.1) -> bool:\n    \"\"\"Find a combination of num_items items whose total price is equal to total_price with a discount of discount.\"\"\"\n    return len(prices) >= num_items and sum(sorted(prices)[:num_items]) * (1 - discount) == total_price\ndef g(total_price=100, num_items=5, discount=0.1):\n    import random\n    return [random.uniform(1, 50) for _ in range(num_items)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 56,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(prices: List[float], total_price=100, num_items=5, discount=0.1) -> bool:\n    \"\"\"Find a combination of num_items items whose total price is equal to total_price with a discount of discount.\"\"\"\n    return len(prices) >= num_items and sum(sorted(prices)[:num_items]) * (1 - discount) == total_price",
        "solution_func": "def g(total_price=100, num_items=5, discount=0.1):\n    import random\n    return [random.uniform(1, 50) for _ in range(num_items)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=24) -> bool:\n    \"\"\"Find a combination of four numbers from the list that can be calculated to equal the target value of 24.\"\"\"\n    from itertools import permutations\n    for p in permutations(numbers, 4):\n        a, b, c, d = p\n        if a + b + c + d == target:\n            return True\n        if a + b + c - d == target:\n            return True\n        if a + b + c * d == target:\n            return True\n        if a + b + c / d == target:\n            return True\n    return False\ndef g(target=24):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 56,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=24) -> bool:\n    \"\"\"Find a combination of four numbers from the list that can be calculated to equal the target value of 24.\"\"\"\n    from itertools import permutations\n    for p in permutations(numbers, 4):\n        a, b, c, d = p\n        if a + b + c + d == target:\n            return True\n        if a + b + c - d == target:\n            return True\n        if a + b + c * d == target:\n            return True\n        if a + b + c / d == target:\n            return True\n    return False",
        "solution_func": "def g(target=24):\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"Find a combination of words from the list that can be concatenated to form the target_word.\"\"\"\n    from itertools import permutations\n    for p in permutations(words):\n        if ''.join(p) == target_word:\n            return True\n    return False\ndef g(target_word='python'):\n    return ['py', 'th', 'on']\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 56,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"Find a combination of words from the list that can be concatenated to form the target_word.\"\"\"\n    from itertools import permutations\n    for p in permutations(words):\n        if ''.join(p) == target_word:\n            return True\n    return False",
        "solution_func": "def g(target_word='python'):\n    return ['py', 'th', 'on']",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=10) -> bool:\n    \"\"\"Check if the sum of all elements in a given matrix is equal to the target value\"\"\"\n    return np.sum(matrix) == target\n\ndef g(target=10):\n    matrix = np.ones((3, 3))\n    return matrix * target\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 56,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=10) -> bool:\n    \"\"\"Check if the sum of all elements in a given matrix is equal to the target value\"\"\"\n    return np.sum(matrix) == target",
        "solution_func": "def g(target=10):\n    matrix = np.ones((3, 3))\n    return matrix * target",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(result: bool, guesses=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the result is the same as the random number chosen from a list of guesses.\"\"\"\n    return result == random.choice(guesses)\n    \ndef g(guesses=[1, 2, 3, 4, 5]):\n    return random.choice(guesses)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 57,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(result: bool, guesses=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the result is the same as the random number chosen from a list of guesses.\"\"\"\n    return result == random.choice(guesses)",
        "solution_func": "def g(guesses=[1, 2, 3, 4, 5]):\n    return random.choice(guesses)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring=\"Python\") -> bool:\n    \"\"\"Check if the substring is found in the given string.\"\"\"\n    return substring in string\n    \ndef g(substring=\"Python\"):\n    return \"I love Python programming\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 57,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring=\"Python\") -> bool:\n    \"\"\"Check if the substring is found in the given string.\"\"\"\n    return substring in string",
        "solution_func": "def g(substring=\"Python\"):\n    return \"I love Python programming\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(result: bool, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the result is True and the sum of the numbers in the list is even.\"\"\"\n    return result == True and sum(num_list) % 2 == 0\n\ndef g(num_list=[1, 2, 3, 4, 5]):\n    return True\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 57,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(result: bool, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the result is True and the sum of the numbers in the list is even.\"\"\"\n    return result == True and sum(num_list) % 2 == 0",
        "solution_func": "def g(num_list=[1, 2, 3, 4, 5]):\n    return True",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, target=23, operator='+') -> bool:\n    \"\"\"Find a combination of numbers that evaluates to the target number using the given operator\"\"\"\n    nums = [5, 7, 9, 3, 2, 4, 1]\n    if operator == '+':\n        return sum(nums[:n]) == target\n    elif operator == '*':\n        result = 1\n        for num in nums[:n]:\n            result *= num\n        return result == target\n    elif operator == '-':\n        return sum(nums[:n]) - target == 0\n    else:\n        return False\n\ndef g(target=23, operator='+'):\n    return 4\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 57,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target=23, operator='+') -> bool:\n    \"\"\"Find a combination of numbers that evaluates to the target number using the given operator\"\"\"\n    nums = [5, 7, 9, 3, 2, 4, 1]\n    if operator == '+':\n        return sum(nums[:n]) == target\n    elif operator == '*':\n        result = 1\n        for num in nums[:n]:\n            result *= num\n        return result == target\n    elif operator == '-':\n        return sum(nums[:n]) - target == 0\n    else:\n        return False",
        "solution_func": "def g(target=23, operator='+'):\n    return 4",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, substring='python', case_sensitive=True) -> bool:\n    \"\"\"Check if a given substring exists in the string, with optional case sensitivity\"\"\"\n    if case_sensitive:\n        return substring in s\n    else:\n        return substring.lower() in s.lower()\n\ndef g(substring='python', case_sensitive=True):\n    return 'I love Python programming'\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 57,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='python', case_sensitive=True) -> bool:\n    \"\"\"Check if a given substring exists in the string, with optional case sensitivity\"\"\"\n    if case_sensitive:\n        return substring in s\n    else:\n        return substring.lower() in s.lower()",
        "solution_func": "def g(substring='python', case_sensitive=True):\n    return 'I love Python programming'",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: list, target=100) -> bool:\n    \"\"\"Find a combination of numbers that adds up to the target number\"\"\"\n    return sum(lst) == target\n\ndef g(target=100):\n    lst = [random.randint(1, 10) for _ in range(10)]\n    return lst\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 57,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(lst: list, target=100) -> bool:\n    \"\"\"Find a combination of numbers that adds up to the target number\"\"\"\n    return sum(lst) == target",
        "solution_func": "def g(target=100):\n    lst = [random.randint(1, 10) for _ in range(10)]\n    return lst",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(target: str, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Find the word in the list that has the highest number of common characters with the target word\"\"\"\n    max_common = 0\n    for word in words:\n        common_chars = len(set(word) & set(target))\n        if common_chars > max_common:\n            max_common = common_chars\n    return max_common == len(target)\ndef g(words=['apple', 'banana', 'cherry', 'date']):\n    max_word = max(words, key=lambda word: len(set(word)))\n    return max_word\nassert f(g())\n",
        "emb": null,
        "idx_generation": 57,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(target: str, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Find the word in the list that has the highest number of common characters with the target word\"\"\"\n    max_common = 0\n    for word in words:\n        common_chars = len(set(word) & set(target))\n        if common_chars > max_common:\n            max_common = common_chars\n    return max_common == len(target)",
        "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date']):\n    max_word = max(words, key=lambda word: len(set(word)))\n    return max_word",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=100) -> bool:\n    \"\"\"Find two distinct numbers in the range from 1 to m whose sum is equal to n\"\"\"\n    nums = set()\n    for i in range(1, m+1):\n        if n - i in nums:\n            return True\n        else:\n            nums.add(i)\n    return False\ndef g(m=100):\n    return m + 1\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 57,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=100) -> bool:\n    \"\"\"Find two distinct numbers in the range from 1 to m whose sum is equal to n\"\"\"\n    nums = set()\n    for i in range(1, m+1):\n        if n - i in nums:\n            return True\n        else:\n            nums.add(i)\n    return False",
        "solution_func": "def g(m=100):\n    return m + 1",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(target: str, words=['hello', 'world', 'python', 'programming']) -> bool:\n    \"\"\"Find the word in the list that contains all the characters of the target word in the same order\"\"\"\n    for word in words:\n        target_index = 0\n        for char in word:\n            if target_index < len(target) and char == target[target_index]:\n                target_index += 1\n        if target_index == len(target):\n            return True\n    return False\ndef g(words=['hello', 'world', 'python', 'programming']):\n    for word in words:\n        if all(char in word for char in set(word)):\n            return word\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 57,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(target: str, words=['hello', 'world', 'python', 'programming']) -> bool:\n    \"\"\"Find the word in the list that contains all the characters of the target word in the same order\"\"\"\n    for word in words:\n        target_index = 0\n        for char in word:\n            if target_index < len(target) and char == target[target_index]:\n                target_index += 1\n        if target_index == len(target):\n            return True\n    return False",
        "solution_func": "def g(words=['hello', 'world', 'python', 'programming']):\n    for word in words:\n        if all(char in word for char in set(word)):\n            return word",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\ndef f(n: int, x=1, y=2) -> bool:\n    \"\"\"Check if the sum of the square roots of two numbers is equal to a given number.\"\"\"\n    return sqrt(x) + sqrt(y) == n\ndef g(x=1, y=2):\n    return x, y\nassert f(g())\n",
        "emb": null,
        "idx_generation": 57,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\ndef f(n: int, x=1, y=2) -> bool:\n    \"\"\"Check if the sum of the square roots of two numbers is equal to a given number.\"\"\"\n    return sqrt(x) + sqrt(y) == n",
        "solution_func": "def g(x=1, y=2):\n    return x, y",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    return n in primes\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]):\n    return primes[-1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 58,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    return n in primes",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]):\n    return primes[-1]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], num=10) -> bool:\n    \"\"\"Check if a number is present in a list.\"\"\"\n    return num in lst\ndef g(num=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 58,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], num=10) -> bool:\n    \"\"\"Check if a number is present in a list.\"\"\"\n    return num in lst",
        "solution_func": "def g(num=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(d: dict, key='name') -> bool:\n    \"\"\"Check if a key exists in a dictionary.\"\"\"\n    return key in d.keys()\ndef g(key='name'):\n    return {'name': 'John', 'age': 25, 'city': 'New York'}\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 58,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(d: dict, key='name') -> bool:\n    \"\"\"Check if a key exists in a dictionary.\"\"\"\n    return key in d.keys()",
        "solution_func": "def g(key='name'):\n    return {'name': 'John', 'age': 25, 'city': 'New York'}",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, s=\"hello\", target=3) -> bool:\n    \"\"\"Count the number of occurrences of a substring in a string.\nSample Input:\n`\"hello\"`\nSample Output:\n`2`\"\"\"\n    count = 0\n    for i in range(len(s)-len(n)+1):\n        if s[i:i+len(n)] == n:\n            count += 1\n    return count >= target\ndef g(s=\"hello\", target=3):\n    return s[:2] + s[4:]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 58,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, s=\"hello\", target=3) -> bool:\n    \"\"\"Count the number of occurrences of a substring in a string.\nSample Input:\n`\"hello\"`\nSample Output:\n`2`\"\"\"\n    count = 0\n    for i in range(len(s)-len(n)+1):\n        if s[i:i+len(n)] == n:\n            count += 1\n    return count >= target",
        "solution_func": "def g(s=\"hello\", target=3):\n    return s[:2] + s[4:]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=3) -> bool:\n    \"\"\"Find the largest number in a list.\nSample Input:\n`[1, 2, 3, 4, 5]`\nSample Output:\n`5`\"\"\"\n    return max(li) >= target\ndef g(target=3):\n    return [2, 4, 5, 1, 3]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 58,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int], target=3) -> bool:\n    \"\"\"Find the largest number in a list.\nSample Input:\n`[1, 2, 3, 4, 5]`\nSample Output:\n`5`\"\"\"\n    return max(li) >= target",
        "solution_func": "def g(target=3):\n    return [2, 4, 5, 1, 3]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=5) -> bool:\n    \"\"\"Check if a string is a palindrome.\nSample Input:\n`\"racecar\"`\nSample Output:\n`True`\"\"\"\n    return s == s[::-1] and len(s) >= target\ndef g(target=5):\n    return \"racecar\"\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 58,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=5) -> bool:\n    \"\"\"Check if a string is a palindrome.\nSample Input:\n`\"racecar\"`\nSample Output:\n`True`\"\"\"\n    return s == s[::-1] and len(s) >= target",
        "solution_func": "def g(target=5):\n    return \"racecar\"",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, k=3) -> bool:\n    \"\"\"Check if there are k numbers in the list that add up to the target.\"\"\"\n    nums.sort()\n    return kSum(nums, target, k)\n\ndef g(nums=[-1, 2, 3, 4, 5, 6], target=8, k=3):\n    \"\"\"Find k numbers in the list that add up to the target.\"\"\"\n    res = []\n    kSumHelper(nums, target, k, [], res)\n    return res\n\ndef kSum(nums, target, k):\n    res = []\n    kSumHelper(nums, target, k, [], res)\n    return bool(res)\n\ndef kSumHelper(nums, target, k, path, res):\n    if len(nums) < k or nums[0] * k > target or nums[-1] * k < target:\n        return\n    if k == 2:\n        left, right = 0, len(nums) - 1\n        while left < right:\n            if nums[left] + nums[right] == target:\n                res.append(path + [nums[left], nums[right]])\n                left += 1\n                right -= 1\n                while left < right and nums[left] == nums[left - 1]:\n                    left += 1\n                while left < right and nums[right] == nums[right + 1]:\n                    right -= 1\n            elif nums[left] + nums[right] < target:\n                left += 1\n            else:\n                right -= 1\n    else:\n        for i in range(len(nums) - k + 1):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            kSumHelper(nums[i + 1:], target - nums[i], k - 1, path + [nums[i]], res)\n\nassert f(g()) == True",
        "emb": null,
        "idx_generation": 58,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, k=3) -> bool:\n    \"\"\"Check if there are k numbers in the list that add up to the target.\"\"\"\n    nums.sort()\n    return kSum(nums, target, k)",
        "solution_func": "def g(nums=[-1, 2, 3, 4, 5, 6], target=8, k=3):\n    \"\"\"Find k numbers in the list that add up to the target.\"\"\"\n    res = []\n    kSumHelper(nums, target, k, [], res)\n    return res\n\ndef kSum(nums, target, k):\n    res = []\n    kSumHelper(nums, target, k, [], res)\n    return bool(res)\n\ndef kSumHelper(nums, target, k, path, res):\n    if len(nums) < k or nums[0] * k > target or nums[-1] * k < target:\n        return\n    if k == 2:\n        left, right = 0, len(nums) - 1\n        while left < right:\n            if nums[left] + nums[right] == target:\n                res.append(path + [nums[left], nums[right]])\n                left += 1\n                right -= 1\n                while left < right and nums[left] == nums[left - 1]:\n                    left += 1\n                while left < right and nums[right] == nums[right + 1]:\n                    right -= 1\n            elif nums[left] + nums[right] < target:\n                left += 1\n            else:\n                right -= 1\n    else:\n        for i in range(len(nums) - k + 1):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            kSumHelper(nums[i + 1:], target - nums[i], k - 1, path + [nums[i]], res)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target.\"\"\"\n    arr.sort()\n    return threeSum(arr, target)\n\ndef g(arr=[-1, 2, 3, 4, 5, 6], target=8):\n    \"\"\"Find three numbers in the list that add up to the target.\"\"\"\n    res = []\n    threeSumHelper(arr, target, [], res)\n    return res\n\ndef threeSum(arr, target):\n    res = []\n    threeSumHelper(arr, target, [], res)\n    return bool(res)\n\ndef threeSumHelper(arr, target, path, res):\n    if len(arr) < 3:\n        return\n    for i in range(len(arr)-2):\n        if i > 0 and arr[i] == arr[i-1]:\n            continue\n        left, right = i + 1, len(arr) - 1\n        while left < right:\n            total = arr[i] + arr[left] + arr[right]\n            if total == target:\n                res.append(path + [arr[i], arr[left], arr[right]])\n                left += 1\n                right -= 1\n                while left < right and arr[left] == arr[left - 1]:\n                    left += 1\n                while left < right and arr[right] == arr[right + 1]:\n                    right -= 1\n            elif total < target:\n                left += 1\n            else:\n                right -= 1\n\nassert f(g()) == True",
        "emb": null,
        "idx_generation": 58,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target.\"\"\"\n    arr.sort()\n    return threeSum(arr, target)",
        "solution_func": "def g(arr=[-1, 2, 3, 4, 5, 6], target=8):\n    \"\"\"Find three numbers in the list that add up to the target.\"\"\"\n    res = []\n    threeSumHelper(arr, target, [], res)\n    return res\n\ndef threeSum(arr, target):\n    res = []\n    threeSumHelper(arr, target, [], res)\n    return bool(res)\n\ndef threeSumHelper(arr, target, path, res):\n    if len(arr) < 3:\n        return\n    for i in range(len(arr)-2):\n        if i > 0 and arr[i] == arr[i-1]:\n            continue\n        left, right = i + 1, len(arr) - 1\n        while left < right:\n            total = arr[i] + arr[left] + arr[right]\n            if total == target:\n                res.append(path + [arr[i], arr[left], arr[right]])\n                left += 1\n                right -= 1\n                while left < right and arr[left] == arr[left - 1]:\n                    left += 1\n                while left < right and arr[right] == arr[right + 1]:\n                    right -= 1\n            elif total < target:\n                left += 1\n            else:\n                right -= 1",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are four numbers in the list that add up to the target.\"\"\"\n    nums.sort()\n    return fourSum(nums, target)\n\ndef g(nums=[-1, 2, 3, 4, 5, 6], target=10):\n    \"\"\"Find four numbers in the list that add up to the target.\"\"\"\n    res = []\n    fourSumHelper(nums, target, [], res)\n    return res\n\ndef fourSum(nums, target):\n    res = []\n    fourSumHelper(nums, target, [], res)\n    return bool(res)\n\ndef fourSumHelper(nums, target, path, res):\n    if len(nums) < 4:\n        return\n    for i in range(len(nums)-3):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        for j in range(i+1, len(nums)-2):\n            if j > i+1 and nums[j] == nums[j-1]:\n                continue\n            left, right = j + 1, len(nums) - 1\n            while left < right:\n                total = nums[i] + nums[j] + nums[left] + nums[right]\n                if total == target:\n                    res.append(path + [nums[i], nums[j], nums[left], nums[right]])\n                    left += 1\n                    right -= 1\n                    while left < right and nums[left] == nums[left - 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right + 1]:\n                        right -= 1\n                elif total < target:\n                    left += 1\n                else:\n                    right -= 1\n\nassert f(g()) == True",
        "emb": null,
        "idx_generation": 58,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are four numbers in the list that add up to the target.\"\"\"\n    nums.sort()\n    return fourSum(nums, target)",
        "solution_func": "def g(nums=[-1, 2, 3, 4, 5, 6], target=10):\n    \"\"\"Find four numbers in the list that add up to the target.\"\"\"\n    res = []\n    fourSumHelper(nums, target, [], res)\n    return res\n\ndef fourSum(nums, target):\n    res = []\n    fourSumHelper(nums, target, [], res)\n    return bool(res)\n\ndef fourSumHelper(nums, target, path, res):\n    if len(nums) < 4:\n        return\n    for i in range(len(nums)-3):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        for j in range(i+1, len(nums)-2):\n            if j > i+1 and nums[j] == nums[j-1]:\n                continue\n            left, right = j + 1, len(nums) - 1\n            while left < right:\n                total = nums[i] + nums[j] + nums[left] + nums[right]\n                if total == target:\n                    res.append(path + [nums[i], nums[j], nums[left], nums[right]])\n                    left += 1\n                    right -= 1\n                    while left < right and nums[left] == nums[left - 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right + 1]:\n                        right -= 1\n                elif total < target:\n                    left += 1\n                else:\n                    right -= 1",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, y: str, z: str, target=\"rhinoceros\") -> bool:\n    \"\"\"Check if the concatenation of x, y, and z forms the target string\"\"\"\n    return x + y + z == target\ndef g(target=\"rhinoceros\"):\n    x = target[0]\n    y = target[1:4]\n    z = target[4:]\n    return x, y, z\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 58,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, y: str, z: str, target=\"rhinoceros\") -> bool:\n    \"\"\"Check if the concatenation of x, y, and z forms the target string\"\"\"\n    return x + y + z == target",
        "solution_func": "def g(target=\"rhinoceros\"):\n    x = target[0]\n    y = target[1:4]\n    z = target[4:]\n    return x, y, z",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x=987654321, y=123456789) -> bool:\n    \"\"\"Determine if a number is a multiple of both x and y\"\"\"\n    return n % x == 0 and n % y == 0\ndef g(x=987654321, y=123456789):\n    return x * y\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 59,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, x=987654321, y=123456789) -> bool:\n    \"\"\"Determine if a number is a multiple of both x and y\"\"\"\n    return n % x == 0 and n % y == 0",
        "solution_func": "def g(x=987654321, y=123456789):\n    return x * y",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: str, p='abcde', q='vwxyz') -> bool:\n    \"\"\"Check if a string contains all the characters in p and q in any order\"\"\"\n    return all((c in n for c in p)) and all((c in n for c in q))\ndef g(p='abcde', q='vwxyz'):\n    return p + q\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 59,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: str, p='abcde', q='vwxyz') -> bool:\n    \"\"\"Check if a string contains all the characters in p and q in any order\"\"\"\n    return all((c in n for c in p)) and all((c in n for c in q))",
        "solution_func": "def g(p='abcde', q='vwxyz'):\n    return p + q",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square and its square root is divisible by 3\"\"\"\n    return math.isqrt(n)**2 == n and math.isqrt(n) % 3 == 0\ndef g():\n    return 9\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 59,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square and its square root is divisible by 3\"\"\"\n    return math.isqrt(n)**2 == n and math.isqrt(n) % 3 == 0",
        "solution_func": "def g():\n    return 9",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, nums=[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23], target=30) -> bool:\n    \"\"\"Find the two numbers in a list that add up to a target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return result == nums[i] * nums[j]\n    return False\ndef g(nums=[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23], target=30):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return nums[i] * nums[j]\n    return 0\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 59,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(result: int, nums=[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23], target=30) -> bool:\n    \"\"\"Find the two numbers in a list that add up to a target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return result == nums[i] * nums[j]\n    return False",
        "solution_func": "def g(nums=[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23], target=30):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return nums[i] * nums[j]\n    return 0",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(result: int, num=123456789) -> bool:\n    \"\"\"Check if a number is a palindrome\"\"\"\n    return result == int(str(num)[::-1])\ndef g(num=123456789):\n    return int(str(num)[::-1])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 59,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\ndef f(result: int, num=123456789) -> bool:\n    \"\"\"Check if a number is a palindrome\"\"\"\n    return result == int(str(num)[::-1])",
        "solution_func": "def g(num=123456789):\n    return int(str(num)[::-1])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\ndef f(result: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Shuffle a list of numbers and check if the result is equal to the original list\"\"\"\n    random.shuffle(nums)\n    return result == nums\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    random.shuffle(nums)\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 59,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\ndef f(result: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Shuffle a list of numbers and check if the result is equal to the original list\"\"\"\n    random.shuffle(nums)\n    return result == nums",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    random.shuffle(nums)\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target='') -> bool:\n    \"\"\"Check if a given string is a palindrome or not.\"\"\"\n    return string == target or string[::-1] == target\ndef g(target=''):\n    return target\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 59,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, target='') -> bool:\n    \"\"\"Check if a given string is a palindrome or not.\"\"\"\n    return string == target or string[::-1] == target",
        "solution_func": "def g(target=''):\n    return target",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find if there exists a pair of numbers in a given list such that their sum is equal to a target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=0):\n    return [0, target]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 59,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find if there exists a pair of numbers in a given list such that their sum is equal to a target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    return [0, target]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if a given matrix is symmetric or not.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g(target=0):\n    return [[0, target], [target, 0]]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 59,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if a given matrix is symmetric or not.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True",
        "solution_func": "def g(target=0):\n    return [[0, target], [target, 0]]",
        "map_ix": [
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: list, target=50) -> bool:\n    \"\"\"Find two numbers in a list that add up to a target value\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(target=50):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 59,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: list, target=50) -> bool:\n    \"\"\"Find two numbers in a list that add up to a target value\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=50):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, a=3, b=7) -> bool:\n    \"\"\"Check if the given string has a length between a and b (inclusive)\"\"\"\n    return a <= len(s) <= b\ndef g(a=3, b=7):\n    return \"Hello, World!\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 60,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, a=3, b=7) -> bool:\n    \"\"\"Check if the given string has a length between a and b (inclusive)\"\"\"\n    return a <= len(s) <= b",
        "solution_func": "def g(a=3, b=7):\n    return \"Hello, World!\"",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, a=2, b=10) -> bool:\n    \"\"\"Check if the given number x is a perfect square between a and b (inclusive)\"\"\"\n    return a <= math.isqrt(x) <= b\ndef g(a=2, b=10):\n    return 49\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 60,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: int, a=2, b=10) -> bool:\n    \"\"\"Check if the given number x is a perfect square between a and b (inclusive)\"\"\"\n    return a <= math.isqrt(x) <= b",
        "solution_func": "def g(a=2, b=10):\n    return 49",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=7) -> bool:\n    \"\"\"Check if the given number n is divisible by a and b\"\"\"\n    return n % a == 0 and n % b == 0\ndef g(a=3, b=7):\n    return 21\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 60,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=7) -> bool:\n    \"\"\"Check if the given number n is divisible by a and b\"\"\"\n    return n % a == 0 and n % b == 0",
        "solution_func": "def g(a=3, b=7):\n    return 21",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by all the given factors.\"\"\"\n    return all(n % factor == 0 for factor in factors)\ndef g(factors=[2, 3, 5]):\n    n = 1\n    for factor in factors:\n        n *= factor\n    return n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 60,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by all the given factors.\"\"\"\n    return all(n % factor == 0 for factor in factors)",
        "solution_func": "def g(factors=[2, 3, 5]):\n    n = 1\n    for factor in factors:\n        n *= factor\n    return n",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, k=3) -> bool:\n    \"\"\"Find if there exists a subarray of length k whose sum is equal to the target.\"\"\"\n    return any(sum(nums[i:i+k]) == target for i in range(len(nums)-k+1))\ndef g(target: int, k=3):\n    return [target//k] * k\nassert f(g())\n",
        "emb": null,
        "idx_generation": 60,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int, k=3) -> bool:\n    \"\"\"Find if there exists a subarray of length k whose sum is equal to the target.\"\"\"\n    return any(sum(nums[i:i+k]) == target for i in range(len(nums)-k+1))",
        "solution_func": "def g(target: int, k=3):\n    return [target//k] * k",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(st: str, substr='python', replace='java') -> bool:\n    \"\"\"Check if a substring exists in a string and replace it with a given value.\"\"\"\n    return substr in st and st.replace(substr, replace) != st\ndef g(substr='python', replace='java'):\n    return substr + ' is awesome!'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 60,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(st: str, substr='python', replace='java') -> bool:\n    \"\"\"Check if a substring exists in a string and replace it with a given value.\"\"\"\n    return substr in st and st.replace(substr, replace) != st",
        "solution_func": "def g(substr='python', replace='java'):\n    return substr + ' is awesome!'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\ndef f(d: datetime.date, y=2022, m=3, dt=17) -> bool:\n    \"\"\"Check if the given date is equal to the provided year, month, and day\"\"\"\n    return d == datetime.date(y, m, dt)\ndef g(y=2022, m=3, dt=17):\n    return datetime.date(y, m, dt)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 60,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\ndef f(d: datetime.date, y=2022, m=3, dt=17) -> bool:\n    \"\"\"Check if the given date is equal to the provided year, month, and day\"\"\"\n    return d == datetime.date(y, m, dt)",
        "solution_func": "def g(y=2022, m=3, dt=17):\n    return datetime.date(y, m, dt)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if all characters in the string are alphanumeric\"\"\"\n    return all([c.isalnum() for c in s]) and len(s) == n\ndef g(n=3):\n    return 'a' * n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 60,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if all characters in the string are alphanumeric\"\"\"\n    return all([c.isalnum() for c in s]) and len(s) == n",
        "solution_func": "def g(n=3):\n    return 'a' * n",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(x: float, y=2.5) -> bool:\n    \"\"\"Check if the square root of x is equal to y\"\"\"\n    return math.isclose(math.sqrt(x), y)\ndef g(y=2.5):\n    return y ** 2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 60,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\ndef f(x: float, y=2.5) -> bool:\n    \"\"\"Check if the square root of x is equal to y\"\"\"\n    return math.isclose(math.sqrt(x), y)",
        "solution_func": "def g(y=2.5):\n    return y ** 2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, count=3, length=10) -> bool:\n    \"\"\"Check if a string has at least a certain number of substrings of a certain length.\"\"\"\n    return s.count('a'*length) >= count\ndef g(count=3, length=10):\n    return 'a'*count*length\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 60,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, count=3, length=10) -> bool:\n    \"\"\"Check if a string has at least a certain number of substrings of a certain length.\"\"\"\n    return s.count('a'*length) >= count",
        "solution_func": "def g(count=3, length=10):\n    return 'a'*count*length",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Find a combination of 4 numbers that can be used with the operations +, -, *, / to reach the target value\"\"\"\n    def helper(nums: List[float]) -> bool:\n        if len(nums) == 1:\n            return abs(nums[0] - target) < 1e-6\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                a, b = nums[i], nums[j]\n                remaining = [nums[k] for k in range(len(nums)) if k != i and k != j]\n                if helper([a + b] + remaining) or helper([a - b] + remaining) or helper([b - a] + remaining) or helper([a * b] + remaining) or (b != 0 and helper([a / b] + remaining)) or (a != 0 and helper([b / a] + remaining)):\n                    return True\n        return False\n\n    return helper(nums)\n\ndef g(nums=[1, 2, 3, 4]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 61,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Find a combination of 4 numbers that can be used with the operations +, -, *, / to reach the target value\"\"\"\n    def helper(nums: List[float]) -> bool:\n        if len(nums) == 1:\n            return abs(nums[0] - target) < 1e-6\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                a, b = nums[i], nums[j]\n                remaining = [nums[k] for k in range(len(nums)) if k != i and k != j]\n                if helper([a + b] + remaining) or helper([a - b] + remaining) or helper([b - a] + remaining) or helper([a * b] + remaining) or (b != 0 and helper([a / b] + remaining)) or (a != 0 and helper([b / a] + remaining)):\n                    return True\n        return False\n\n    return helper(nums)",
        "solution_func": "def g(nums=[1, 2, 3, 4]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Find a matrix where each element is the sum of its row and column index\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != i + j:\n                return False\n    return True\n\ndef g():\n    return [[i + j for j in range(5)] for i in range(5)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 61,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Find a matrix where each element is the sum of its row and column index\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != i + j:\n                return False\n    return True",
        "solution_func": "def g():\n    return [[i + j for j in range(5)] for i in range(5)]",
        "map_ix": [
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Find if s2 is a rotation of s1\"\"\"\n    if len(s1) != len(s2):\n        return False\n    s = s1 + s1\n    return s2 in s\n\ndef g():\n    return \"hello\", \"ohell\"\n\nassert f(*g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 61,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Find if s2 is a rotation of s1\"\"\"\n    if len(s1) != len(s2):\n        return False\n    s = s1 + s1\n    return s2 in s",
        "solution_func": "def g():\n    return \"hello\", \"ohell\"",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: str, s=['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'], n=10) -> bool:\n    \"\"\"Check if the string is a palindrome\"\"\"\n    return x == x[::-1]\ndef g(s=['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'], n=10):\n    return ''.join([s[i] for i in range(n)])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 61,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, s=['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'], n=10) -> bool:\n    \"\"\"Check if the string is a palindrome\"\"\"\n    return x == x[::-1]",
        "solution_func": "def g(s=['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'], n=10):\n    return ''.join([s[i] for i in range(n)])",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m=100) -> bool:\n    \"\"\"Check if the number is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(m=100):\n    prime_nums = []\n    for num in range(2, m + 1):\n        if f(num):\n            prime_nums.append(num)\n    return prime_nums[n - 1]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 61,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=100) -> bool:\n    \"\"\"Check if the number is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g(m=100):\n    prime_nums = []\n    for num in range(2, m + 1):\n        if f(num):\n            prime_nums.append(num)\n    return prime_nums[n - 1]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int = 5) -> bool:\n    \"\"\"Check if x + y is equal to z\"\"\"\n    return x + y == z\ndef g(z=5):\n    return (z // 2, z // 2)\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 61,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, y: int, z: int = 5) -> bool:\n    \"\"\"Check if x + y is equal to z\"\"\"\n    return x + y == z",
        "solution_func": "def g(z=5):\n    return (z // 2, z // 2)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], k=4, target=9) -> bool:\n    \"\"\"Given a list of integers, find if there are exactly k elements whose sum is equal to the target value.\"\"\"\n    combinations = itertools.combinations(arr, k)\n    for combo in combinations:\n        if sum(combo) == target:\n            return True\n    return False\ndef g(k=4, target=9):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return arr\nassert f(g())\n",
        "emb": null,
        "idx_generation": 61,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(arr: List[int], k=4, target=9) -> bool:\n    \"\"\"Given a list of integers, find if there are exactly k elements whose sum is equal to the target value.\"\"\"\n    combinations = itertools.combinations(arr, k)\n    for combo in combinations:\n        if sum(combo) == target:\n            return True\n    return False",
        "solution_func": "def g(k=4, target=9):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='python') -> bool:\n    \"\"\"Given a string, determine if it contains a specified substring.\"\"\"\n    return substring in string\ndef g(substring='python'):\n    string = \"Hello, I love python programming!\"\n    return string\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 61,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='python') -> bool:\n    \"\"\"Given a string, determine if it contains a specified substring.\"\"\"\n    return substring in string",
        "solution_func": "def g(substring='python'):\n    string = \"Hello, I love python programming!\"\n    return string",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"Given a list of integers, find if there are two elements whose sum is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=5):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return arr\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 61,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"Given a list of integers, find if there are two elements whose sum is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=5):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return arr",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(num: int, nums=[2, 4, 6, 8, 10, 12, 14]) -> bool:\n    \"\"\"Check if a given number is divisible by all numbers in a list\"\"\"\n    return all((num % n == 0 for n in nums))\ndef g(nums=[2, 4, 6, 8, 10, 12, 14]):\n    return max(nums) * 5\nassert f(g())\n",
        "emb": null,
        "idx_generation": 61,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int, nums=[2, 4, 6, 8, 10, 12, 14]) -> bool:\n    \"\"\"Check if a given number is divisible by all numbers in a list\"\"\"\n    return all((num % n == 0 for n in nums))",
        "solution_func": "def g(nums=[2, 4, 6, 8, 10, 12, 14]):\n    return max(nums) * 5",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target=27) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target\"\"\"\n    return sum(num_list) == target\ndef g(target=27):\n    return [9, 9, 9]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 62,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num_list: List[int], target=27) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target\"\"\"\n    return sum(num_list) == target",
        "solution_func": "def g(target=27):\n    return [9, 9, 9]",
        "map_ix": [
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find the indices of two numbers in the matrix that add up to the target\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[k])):\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return [(i, j), (k, l)]\n    return []\ndef g(target=10):\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 62,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find the indices of two numbers in the matrix that add up to the target\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[k])):\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return [(i, j), (k, l)]\n    return []",
        "solution_func": "def g(target=10):\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(str_list: List[str], target='python') -> bool:\n    \"\"\"Find the index of the target string in the list\"\"\"\n    return str_list.index(target) >= 0\ndef g(target='python'):\n    return ['java', 'c++', 'python', 'javascript']\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 62,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(str_list: List[str], target='python') -> bool:\n    \"\"\"Find the index of the target string in the list\"\"\"\n    return str_list.index(target) >= 0",
        "solution_func": "def g(target='python'):\n    return ['java', 'c++', 'python', 'javascript']",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a given number is in a list.\"\"\"\n    return n in lst\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst[0]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 62,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a given number is in a list.\"\"\"\n    return n in lst",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst[0]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there are two elements in a list that sum up to a given target.\"\"\"\n    return any((x + y == target_sum for x in lst for y in lst))\ndef g(target_sum=10):\n    return [1, target_sum - 1]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 62,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there are two elements in a list that sum up to a given target.\"\"\"\n    return any((x + y == target_sum for x in lst for y in lst))",
        "solution_func": "def g(target_sum=10):\n    return [1, target_sum - 1]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a given number is greater than all the elements in a list.\"\"\"\n    return all((n > x for x in lst))\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return max(lst) + 1\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 62,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a given number is greater than all the elements in a list.\"\"\"\n    return all((n > x for x in lst))",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return max(lst) + 1",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python', count=3) -> bool:\n    \"\"\"Find the number of occurrences of a target string in a given string\"\"\"\n    return s.count(target) == count\ndef g(target='python', count=3):\n    return target * count\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 62,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='python', count=3) -> bool:\n    \"\"\"Find the number of occurrences of a target string in a given string\"\"\"\n    return s.count(target) == count",
        "solution_func": "def g(target='python', count=3):\n    return target * count",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a given number exists in a sorted list\"\"\"\n    return n in arr\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr[len(arr)//2]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 62,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a given number exists in a sorted list\"\"\"\n    return n in arr",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5]):\n    return arr[len(arr)//2]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s1: str, s2: str, s3: str) -> bool:\n    \"\"\"Check if s3 is an anagram of s1 and s2\"\"\"\n    return sorted(s1 + s2) == sorted(s3)\ndef g(s1: str, s2: str):\n    return s1[::-1] + s2[::-1]\nassert f(g(), g(), g())\n",
        "emb": null,
        "idx_generation": 62,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s1: str, s2: str, s3: str) -> bool:\n    \"\"\"Check if s3 is an anagram of s1 and s2\"\"\"\n    return sorted(s1 + s2) == sorted(s3)",
        "solution_func": "def g(s1: str, s2: str):\n    return s1[::-1] + s2[::-1]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Find three integers in a list that sum up to a target value\"\"\"\n    return any(sum(comb) == target for comb in itertools.combinations(lst, 3))\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return lst\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 62,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Find three integers in a list that sum up to a target value\"\"\"\n    return any(sum(comb) == target for comb in itertools.combinations(lst, 3))",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return lst",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if n is divisible by the length of the longest string in lst\"\"\"\n    max_len = max(len(s) for s in lst)\n    return n % max_len == 0\ndef g(lst=['apple', 'banana', 'cherry']):\n    max_len = max(len(s) for s in lst)\n    return max_len * 2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 63,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if n is divisible by the length of the longest string in lst\"\"\"\n    max_len = max(len(s) for s in lst)\n    return n % max_len == 0",
        "solution_func": "def g(lst=['apple', 'banana', 'cherry']):\n    max_len = max(len(s) for s in lst)\n    return max_len * 2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if n is a perfect square and is also present in the list lst\"\"\"\n    return n in lst and int(n ** 0.5) ** 2 == n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return [x ** 2 for x in lst if int(x ** 0.5) ** 2 == x][0]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 63,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if n is a perfect square and is also present in the list lst\"\"\"\n    return n in lst and int(n ** 0.5) ** 2 == n",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return [x ** 2 for x in lst if int(x ** 0.5) ** 2 == x][0]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if n is divisible by the length of the longest string in lst and the first letter of n is the same as the last letter of the longest string in lst\"\"\"\n    max_len = max(len(s) for s in lst)\n    return n % max_len == 0 and str(n)[0] == lst[lst.index(max(lst, key=len))][-1]\ndef g(lst=['apple', 'banana', 'cherry']):\n    max_len = max(len(s) for s in lst)\n    return max_len * 10 + int(lst[lst.index(max(lst, key=len))][-1])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 63,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if n is divisible by the length of the longest string in lst and the first letter of n is the same as the last letter of the longest string in lst\"\"\"\n    max_len = max(len(s) for s in lst)\n    return n % max_len == 0 and str(n)[0] == lst[lst.index(max(lst, key=len))][-1]",
        "solution_func": "def g(lst=['apple', 'banana', 'cherry']):\n    max_len = max(len(s) for s in lst)\n    return max_len * 10 + int(lst[lst.index(max(lst, key=len))][-1])",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    return any(target in row for row in matrix)\ndef g(matrix: List[List[int]], target=0):\n    return target\nassert f(g())\n",
        "emb": null,
        "idx_generation": 63,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    return any(target in row for row in matrix)",
        "solution_func": "def g(matrix: List[List[int]], target=0):\n    return target",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, substring='', n=0) -> bool:\n    \"\"\"Check if the substring appears n times in the string\"\"\"\n    return string.count(substring) == n\ndef g(substring='', n=0):\n    return substring * n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 63,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='', n=0) -> bool:\n    \"\"\"Check if the substring appears n times in the string\"\"\"\n    return string.count(substring) == n",
        "solution_func": "def g(substring='', n=0):\n    return substring * n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(nums: List[int], target=0):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 63,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    return any(target - num in nums for num in nums)",
        "solution_func": "def g(nums: List[int], target=0):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, target=2) -> bool:\n    \"\"\"Check if the given number is a power of the target number\"\"\"\n    return math.log(n, target).is_integer()\ndef g(target=2):\n    return target ** 10\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 63,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, target=2) -> bool:\n    \"\"\"Check if the given number is a power of the target number\"\"\"\n    return math.log(n, target).is_integer()",
        "solution_func": "def g(target=2):\n    return target ** 10",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, target=50) -> bool:\n    \"\"\"Check if the given number is divisible by the target number\"\"\"\n    return n % target == 0\ndef g(target=50):\n    return random.randint(1, 100) * target\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 63,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, target=50) -> bool:\n    \"\"\"Check if the given number is divisible by the target number\"\"\"\n    return n % target == 0",
        "solution_func": "def g(target=50):\n    return random.randint(1, 100) * target",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport itertools\n\ndef f(p: int, target=24) -> bool:\n    \"\"\"Check if the given number can be obtained by applying basic arithmetic operations (+, -, *, /) \n    to the numbers in the target list\"\"\"\n    return any(eval(''.join(str(x) + o for x, o in zip(p, perm))) == target for perm in itertools.permutations('+-*/', len(p) - 1))\ndef g(target=[3, 4, 6, 7]):\n    return target\nassert f(g())\n",
        "emb": null,
        "idx_generation": 63,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\n\ndef f(p: int, target=24) -> bool:\n    \"\"\"Check if the given number can be obtained by applying basic arithmetic operations (+, -, *, /) \n    to the numbers in the target list\"\"\"\n    return any(eval(''.join(str(x) + o for x, o in zip(p, perm))) == target for perm in itertools.permutations('+-*/', len(p) - 1))",
        "solution_func": "def g(target=[3, 4, 6, 7]):\n    return target",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target=\"python\", max_len=10) -> bool:\n    \"\"\"Check if the words contain the target word and the total length is less than or equal to max_len\"\"\"\n    return target in words and sum(len(word) for word in words) <= max_len\ndef g(target=\"python\", max_len=10):\n    return [target]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 63,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target=\"python\", max_len=10) -> bool:\n    \"\"\"Check if the words contain the target word and the total length is less than or equal to max_len\"\"\"\n    return target in words and sum(len(word) for word in words) <= max_len",
        "solution_func": "def g(target=\"python\", max_len=10):\n    return [target]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Find the nth smallest element in the list.\"\"\"\n    return sorted(lst)[n-1] == 10\ndef g(lst: List[int]):\n    return [5, 3, 10, 7, 2]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 64,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Find the nth smallest element in the list.\"\"\"\n    return sorted(lst)[n-1] == 10",
        "solution_func": "def g(lst: List[int]):\n    return [5, 3, 10, 7, 2]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return lst == lst[::-1]\ndef g():\n    return [1, 2, 3, 2, 1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 64,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return lst == lst[::-1]",
        "solution_func": "def g():\n    return [1, 2, 3, 2, 1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find the nth Fibonacci number.\"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a == 55\ndef g():\n    return 10\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 64,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find the nth Fibonacci number.\"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a == 55",
        "solution_func": "def g():\n    return 10",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if the given string is a substring of any of the strings in the list.\"\"\"\n    return any(s in string for string in strings)\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return strings[2][1:4]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 64,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if the given string is a substring of any of the strings in the list.\"\"\"\n    return any(s in string for string in strings)",
        "solution_func": "def g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return strings[2][1:4]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(p: int, q: int, r: int, s: int, t: int, u: int) -> bool:\n    \"\"\"Find x such that p*x^5 + q*x^4 + r*x^3 + s*x^2 + t*x + u = 0.\nThe solution should be rounded to the nearest integer.\"\"\"\n    import numpy as np\n    coefficients = [p, q, r, s, t, u]\n    roots = np.roots(coefficients)\n    rounded_roots = np.round(roots)\n    return any(rounded_roots == x for x in rounded_roots)\ndef g(p=1, q=-5, r=10, s=-10, t=5, u=1):\n    return 0\nassert f(g())\n",
        "emb": null,
        "idx_generation": 64,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(p: int, q: int, r: int, s: int, t: int, u: int) -> bool:\n    \"\"\"Find x such that p*x^5 + q*x^4 + r*x^3 + s*x^2 + t*x + u = 0.\nThe solution should be rounded to the nearest integer.\"\"\"\n    import numpy as np\n    coefficients = [p, q, r, s, t, u]\n    roots = np.roots(coefficients)\n    rounded_roots = np.round(roots)\n    return any(rounded_roots == x for x in rounded_roots)",
        "solution_func": "def g(p=1, q=-5, r=10, s=-10, t=5, u=1):\n    return 0",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(a: List[int], b: List[int], n=5) -> bool:\n    \"\"\"Check if the nth largest element in list a is equal to the sum of the elements in list b.\"\"\"\n    sorted_a = sorted(a)\n    nth_largest = sorted_a[-n]\n    return nth_largest == sum(b)\ndef g(n=5):\n    return [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 64,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(a: List[int], b: List[int], n=5) -> bool:\n    \"\"\"Check if the nth largest element in list a is equal to the sum of the elements in list b.\"\"\"\n    sorted_a = sorted(a)\n    nth_largest = sorted_a[-n]\n    return nth_largest == sum(b)",
        "solution_func": "def g(n=5):\n    return [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if there exists a substring of length n in s that contains only uppercase letters\"\"\"\n    return any(char.isupper() for char in s[:n])\ndef g(n=4):\n    return 'abcdEFGH'\nassert f(g())\n",
        "emb": null,
        "idx_generation": 64,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if there exists a substring of length n in s that contains only uppercase letters\"\"\"\n    return any(char.isupper() for char in s[:n])",
        "solution_func": "def g(n=4):\n    return 'abcdEFGH'",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in nums that sum up to target\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 64,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in nums that sum up to target\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if n is divisible by any prime number less than m\"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return any(n % prime == 0 for prime in primes if prime < m)\ndef g(m=5):\n    return 100\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 64,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if n is divisible by any prime number less than m\"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return any(n % prime == 0 for prime in primes if prime < m)",
        "solution_func": "def g(m=5):\n    return 100",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a row and a column in the matrix such that the sum of the elements in the row and the column is equal to the target.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if sum(matrix[i]) + sum(matrix[k][j] for k in range(rows)) == target:\n                return True\n    return False\n\ndef g(target=20):\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 64,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a row and a column in the matrix such that the sum of the elements in the row and the column is equal to the target.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if sum(matrix[i]) + sum(matrix[k][j] for k in range(rows)) == target:\n                return True\n    return False",
        "solution_func": "def g(target=20):\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, k=3) -> bool:\n    \"\"\"Find if there exist k numbers in nums that add up to target\"\"\"\n    from itertools import combinations\n    for comb in combinations(nums, k):\n        if sum(comb) == target:\n            return True\n    return False\ndef g(target=10, k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 65,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, k=3) -> bool:\n    \"\"\"Find if there exist k numbers in nums that add up to target\"\"\"\n    from itertools import combinations\n    for comb in combinations(nums, k):\n        if sum(comb) == target:\n            return True\n    return False",
        "solution_func": "def g(target=10, k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], value=10) -> bool:\n    \"\"\"Find if value exists in the given matrix\"\"\"\n    for row in matrix:\n        if value in row:\n            return True\n    return False\ndef g(value=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 65,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], value=10) -> bool:\n    \"\"\"Find if value exists in the given matrix\"\"\"\n    for row in matrix:\n        if value in row:\n            return True\n    return False",
        "solution_func": "def g(value=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"Find if substr is a substring of string\"\"\"\n    return substr in string\ndef g(substr='abc'):\n    return \"abcdefg\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 65,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"Find if substr is a substring of string\"\"\"\n    return substr in string",
        "solution_func": "def g(substr='abc'):\n    return \"abcdefg\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, a=3, b=5, c=6) -> bool:\n    \"\"\"Find the result of multiplying three numbers together\"\"\"\n    return result == a * b * c\ndef g(a=3, b=5, c=6):\n    return a * b * c\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 65,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(result: int, a=3, b=5, c=6) -> bool:\n    \"\"\"Find the result of multiplying three numbers together\"\"\"\n    return result == a * b * c",
        "solution_func": "def g(a=3, b=5, c=6):\n    return a * b * c",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(result: float, angle=45) -> bool:\n    \"\"\"Find the result of calculating the sine of an angle in radians\"\"\"\n    return math.isclose(result, math.sin(math.radians(angle)))\ndef g(angle=45):\n    return math.sin(math.radians(angle))\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 65,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(result: float, angle=45) -> bool:\n    \"\"\"Find the result of calculating the sine of an angle in radians\"\"\"\n    return math.isclose(result, math.sin(math.radians(angle)))",
        "solution_func": "def g(angle=45):\n    return math.sin(math.radians(angle))",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, numbers=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find the result of adding all the numbers in a list together\"\"\"\n    return result == sum(numbers)\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return sum(numbers)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 65,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(result: int, numbers=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find the result of adding all the numbers in a list together\"\"\"\n    return result == sum(numbers)",
        "solution_func": "def g(numbers=[1, 2, 3, 4, 5]):\n    return sum(numbers)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(numbers: list, target: int, n=5) -> bool:\n    \"\"\"Check if there exists a combination of n numbers from the list that add up to the target\"\"\"\n    combinations = random.sample(numbers, n)\n    return sum(combinations) == target\n\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=30, n=5):\n    return numbers\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 65,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(numbers: list, target: int, n=5) -> bool:\n    \"\"\"Check if there exists a combination of n numbers from the list that add up to the target\"\"\"\n    combinations = random.sample(numbers, n)\n    return sum(combinations) == target",
        "solution_func": "def g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=30, n=5):\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: list, target=0) -> bool:\n    \"\"\"Check if there exists a row in the matrix whose sum is equal to the target\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=15):\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 65,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: list, target=0) -> bool:\n    \"\"\"Check if there exists a row in the matrix whose sum is equal to the target\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=15):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport itertools\n\ndef f(numbers: list, target: int, n=3) -> bool:\n    \"\"\"Check if there exists a combination of n numbers from the list that multiply to the target\"\"\"\n    combinations = list(itertools.combinations(numbers, n))\n    for combination in combinations:\n        if target == 0 and 0 in combination:\n            return True\n        elif target != 0 and target % (combination[0] * combination[1] * combination[2]) == 0:\n            return True\n    return False\n\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=120, n=3):\n    return numbers\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 65,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\n\ndef f(numbers: list, target: int, n=3) -> bool:\n    \"\"\"Check if there exists a combination of n numbers from the list that multiply to the target\"\"\"\n    combinations = list(itertools.combinations(numbers, n))\n    for combination in combinations:\n        if target == 0 and 0 in combination:\n            return True\n        elif target != 0 and target % (combination[0] * combination[1] * combination[2]) == 0:\n            return True\n    return False",
        "solution_func": "def g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=120, n=3):\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Find a subarray of length n in arr whose elements sum to zero.\"\"\"\n    return any(sum(arr[i:i+n]) == 0 for i in range(len(arr)-n+1))\ndef g(n=5):\n    return [1, -2, 3, 4, -5, 6, 7, -8, 9, -10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 65,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Find a subarray of length n in arr whose elements sum to zero.\"\"\"\n    return any(sum(arr[i:i+n]) == 0 for i in range(len(arr)-n+1))",
        "solution_func": "def g(n=5):\n    return [1, -2, 3, 4, -5, 6, 7, -8, 9, -10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in a list that add up to the target value\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=0):\n    return [i for i in range(target//2 + 1)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 66,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in a list that add up to the target value\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=0):\n    return [i for i in range(target//2 + 1)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subset of a list that adds up to the target value\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if len(nums) == 0:\n            return False\n        if nums[0] > target:\n            return subset_sum(nums[1:], target)\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\ndef g(target=0):\n    return [i for i in range(1, target+1)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 66,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subset of a list that adds up to the target value\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if len(nums) == 0:\n            return False\n        if nums[0] > target:\n            return subset_sum(nums[1:], target)\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)",
        "solution_func": "def g(target=0):\n    return [i for i in range(1, target+1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums: List[int], target: int) -> bool:\n    \"\"\"Check if it is possible to find a combination of numbers from a list that adds up to the target value\"\"\"\n    def combination_sum(n, nums, target):\n        if target == 0:\n            return True\n        if n == 0:\n            return False\n        if nums[n-1] > target:\n            return combination_sum(n-1, nums, target)\n        return combination_sum(n-1, nums, target) or combination_sum(n-1, nums, target - nums[n-1])\n    return combination_sum(len(nums), nums, target)\ndef g(nums=[], target=0):\n    return len(nums)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 66,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums: List[int], target: int) -> bool:\n    \"\"\"Check if it is possible to find a combination of numbers from a list that adds up to the target value\"\"\"\n    def combination_sum(n, nums, target):\n        if target == 0:\n            return True\n        if n == 0:\n            return False\n        if nums[n-1] > target:\n            return combination_sum(n-1, nums, target)\n        return combination_sum(n-1, nums, target) or combination_sum(n-1, nums, target - nums[n-1])\n    return combination_sum(len(nums), nums, target)",
        "solution_func": "def g(nums=[], target=0):\n    return len(nums)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Determine if the target number exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target]]\n    \nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 66,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Determine if the target number exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target]]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, target]\n    \nassert f(g())\n",
        "emb": null,
        "idx_generation": 66,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, target]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if the target number appears more than once in the list\"\"\"\n    return nums.count(target) > 1\n\ndef g(target=5):\n    return [1, 2, 3, 4, target, target]\n    \nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 66,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if the target number appears more than once in the list\"\"\"\n    return nums.count(target) > 1",
        "solution_func": "def g(target=5):\n    return [1, 2, 3, 4, target, target]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: list, target=9) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=9):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 66,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: list, target=9) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=9):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: list, target_sum=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target sum\"\"\"\n    for i, num1 in enumerate(nums):\n        for j, num2 in enumerate(nums[i+1:]):\n            if num1 + num2 == target_sum:\n                return True\n    return False\ndef g(target_sum=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 66,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: list, target_sum=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target sum\"\"\"\n    for i, num1 in enumerate(nums):\n        for j, num2 in enumerate(nums[i+1:]):\n            if num1 + num2 == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if the substring is present in the string\"\"\"\n    return substring in string\ndef g(substring='abc'):\n    string = 'xyzabc123'\n    return string\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 66,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if the substring is present in the string\"\"\"\n    return substring in string",
        "solution_func": "def g(substring='abc'):\n    string = 'xyzabc123'\n    return string",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find a pair of distinct numbers in the list that add up to the target_sum\"\"\"\n    for i, num1 in enumerate(nums):\n        for num2 in nums[i+1:]:\n            if num1 + num2 == target_sum:\n                return True\n    return False\n\ndef g(target_sum=100):\n    return [n for n in range(1, target_sum//2 + 1)]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 66,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find a pair of distinct numbers in the list that add up to the target_sum\"\"\"\n    for i, num1 in enumerate(nums):\n        for num2 in nums[i+1:]:\n            if num1 + num2 == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=100):\n    return [n for n in range(1, target_sum//2 + 1)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=4.5) -> bool:\n    \"\"\"Find the smallest integer greater than x whose square is equal to a.\"\"\"\n    return math.isqrt(x+1) ** 2 == a\ndef g(a=4.5):\n    return math.isqrt(a) + 1\nassert f(g())\n",
        "emb": null,
        "idx_generation": 67,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=4.5) -> bool:\n    \"\"\"Find the smallest integer greater than x whose square is equal to a.\"\"\"\n    return math.isqrt(x+1) ** 2 == a",
        "solution_func": "def g(a=4.5):\n    return math.isqrt(a) + 1",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target=13) -> bool:\n    \"\"\"Find a combination of three distinct integers in the list that sum up to the target.\"\"\"\n    return any(sum(comb) == target for comb in combinations(nums, 3))\ndef g(target=13):\n    return [1, 2, 10]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 67,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target=13) -> bool:\n    \"\"\"Find a combination of three distinct integers in the list that sum up to the target.\"\"\"\n    return any(sum(comb) == target for comb in combinations(nums, 3))",
        "solution_func": "def g(target=13):\n    return [1, 2, 10]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m=8) -> bool:\n    \"\"\"Find the smallest number that is divisible by all integers from 1 to m (inclusive).\"\"\"\n    for num in range(n, n*m+1, n):\n        if all(num % i == 0 for i in range(1, m+1)):\n            return True\n    return False\ndef g(m=8):\n    return m * (m-1)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 67,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=8) -> bool:\n    \"\"\"Find the smallest number that is divisible by all integers from 1 to m (inclusive).\"\"\"\n    for num in range(n, n*m+1, n):\n        if all(num % i == 0 for i in range(1, m+1)):\n            return True\n    return False",
        "solution_func": "def g(m=8):\n    return m * (m-1)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target sum.\"\"\"\n    return any((a + b == target_sum for a in lst for b in lst if a != b))\ndef g(lst: List[int], target_sum=100):\n    return lst\nassert f(g())\n",
        "emb": null,
        "idx_generation": 67,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target sum.\"\"\"\n    return any((a + b == target_sum for a in lst for b in lst if a != b))",
        "solution_func": "def g(lst: List[int], target_sum=100):\n    return lst",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, lst: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is a perfect square.\"\"\"\n    return any((sqrt(a + b).is_integer() for a in lst for b in lst if a != b))\ndef g(lst: List[int], target_sum=100):\n    return lst\nassert f(g())\n",
        "emb": null,
        "idx_generation": 67,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, lst: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is a perfect square.\"\"\"\n    return any((sqrt(a + b).is_integer() for a in lst for b in lst if a != b))",
        "solution_func": "def g(lst: List[int], target_sum=100):\n    return lst",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: List[str], target_len=5) -> bool:\n    \"\"\"Check if the length of each string in the list is equal to the target length.\"\"\"\n    return all((len(s) == target_len for s in lst))\ndef g(target_len=5):\n    return ['apple', 'banana', 'cherry']\nassert f(g())\n",
        "emb": null,
        "idx_generation": 67,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[str], target_len=5) -> bool:\n    \"\"\"Check if the length of each string in the list is equal to the target length.\"\"\"\n    return all((len(s) == target_len for s in lst))",
        "solution_func": "def g(target_len=5):\n    return ['apple', 'banana', 'cherry']",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=17) -> bool:\n    \"\"\"Given a list of integers, find two numbers such that they add up to a specific target number.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=17):\n    return [2, 7, 11, 15]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 67,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=17) -> bool:\n    \"\"\"Given a list of integers, find two numbers such that they add up to a specific target number.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(target=17):\n    return [2, 7, 11, 15]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Given a matrix of integers sorted in ascending order from left to right and top to bottom, find the target\nnumber.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    i, j = rows - 1, 0\n    while i >= 0 and j < cols:\n        if matrix[i][j] == target:\n            return True\n        elif matrix[i][j] < target:\n            j += 1\n        else:\n            i -= 1\n    return False\ndef g(target=5):\n    return [\n        [1, 4, 7, 11, 15],\n        [2, 5, 8, 12, 19],\n        [3, 6, 9, 16, 22],\n        [10, 13, 14, 17, 24],\n        [18, 21, 23, 26, 30]\n    ]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 67,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Given a matrix of integers sorted in ascending order from left to right and top to bottom, find the target\nnumber.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    i, j = rows - 1, 0\n    while i >= 0 and j < cols:\n        if matrix[i][j] == target:\n            return True\n        elif matrix[i][j] < target:\n            j += 1\n        else:\n            i -= 1\n    return False",
        "solution_func": "def g(target=5):\n    return [\n        [1, 4, 7, 11, 15],\n        [2, 5, 8, 12, 19],\n        [3, 6, 9, 16, 22],\n        [10, 13, 14, 17, 24],\n        [18, 21, 23, 26, 30]\n    ]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=6) -> bool:\n    \"\"\"Given a list of integers, find three numbers such that they add up to a specific target number.\"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\ndef g(target=6):\n    return [2, 3, 4, 5, 6]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 67,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=6) -> bool:\n    \"\"\"Given a list of integers, find three numbers such that they add up to a specific target number.\"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False",
        "solution_func": "def g(target=6):\n    return [2, 3, 4, 5, 6]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) -> bool:\n    \"\"\"Given a number num, determine if it is a prime number.\"\"\"\n    if num < 2:\n        return False\n    for prime in primes:\n        if num % prime == 0:\n            return False\n    return True\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]):\n    num = max(primes)\n    for i in range(num + 1, num * num):\n        is_prime = True\n        for prime in primes:\n            if i % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n            if f(i):\n                return i\n    return None\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 67,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) -> bool:\n    \"\"\"Given a number num, determine if it is a prime number.\"\"\"\n    if num < 2:\n        return False\n    for prime in primes:\n        if num % prime == 0:\n            return False\n    return True",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]):\n    num = max(primes)\n    for i in range(num + 1, num * num):\n        is_prime = True\n        for prime in primes:\n            if i % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n            if f(i):\n                return i\n    return None",
        "map_ix": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=0) -> bool:\n    \"\"\"Check if the sum of the elements in a list is equal to a target value\"\"\"\n    return sum(li) == target\ndef g(li: List[int], target=0):\n    return li\nassert f(g([1, 2, 3, 4, 5]), target=15)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 68,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int], target=0) -> bool:\n    \"\"\"Check if the sum of the elements in a list is equal to a target value\"\"\"\n    return sum(li) == target",
        "solution_func": "def g(li: List[int], target=0):\n    return li",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[str], target='') -> bool:\n    \"\"\"Check if the concatenation of the strings in a list is equal to a target string\"\"\"\n    return ''.join(li) == target\ndef g(li: List[str], target=''):\n    return li\nassert f(g(['Hello', ' ', 'World']), target='Hello World')\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 68,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[str], target='') -> bool:\n    \"\"\"Check if the concatenation of the strings in a list is equal to a target string\"\"\"\n    return ''.join(li) == target",
        "solution_func": "def g(li: List[str], target=''):\n    return li",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in a list that adds up to a target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False\ndef g(li: List[int], target=0):\n    return li\nassert f(g([1, 2, 3, 4, 5]), target=9)\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 68,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int], target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in a list that adds up to a target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False",
        "solution_func": "def g(li: List[int], target=0):\n    return li",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, n=5, t=10) -> bool:\n    \"\"\"Find a list of n distinct integers that sum up to t\"\"\"\n    return sum(x) == t and len(set(x)) == n\ndef g(n=5, t=10):\n    return list(range(t-n+1, t+1))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 68,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, n=5, t=10) -> bool:\n    \"\"\"Find a list of n distinct integers that sum up to t\"\"\"\n    return sum(x) == t and len(set(x)) == n",
        "solution_func": "def g(n=5, t=10):\n    return list(range(t-n+1, t+1))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=7) -> bool:\n    \"\"\"Check if a string contains all n vowels (a, e, i, o, u) at least once\"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return len(vowels.intersection(set(s))) == n\ndef g(n=7):\n    return 'abcdefghijklmnopqrstuvwxyz'[:n]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 68,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=7) -> bool:\n    \"\"\"Check if a string contains all n vowels (a, e, i, o, u) at least once\"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return len(vowels.intersection(set(s))) == n",
        "solution_func": "def g(n=7):\n    return 'abcdefghijklmnopqrstuvwxyz'[:n]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=5) -> bool:\n    \"\"\"Check if a list contains n consecutive integers\"\"\"\n    return sorted(x) == list(range(min(x), min(x)+n))\ndef g(n=5):\n    return list(range(n, 2*n))\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 68,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=5) -> bool:\n    \"\"\"Check if a list contains n consecutive integers\"\"\"\n    return sorted(x) == list(range(min(x), min(x)+n))",
        "solution_func": "def g(n=5):\n    return list(range(n, 2*n))",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Find a subarray in the given array such that the sum of its elements is equal to 0\"\"\"\n    return any(sum(arr[i:j]) == 0 for i in range(len(arr)) for j in range(i+1, len(arr)+1))\ndef g():\n    return [1, -2, 3, 4, -1, 2, -3, -4]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 68,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Find a subarray in the given array such that the sum of its elements is equal to 0\"\"\"\n    return any(sum(arr[i:j]) == 0 for i in range(len(arr)) for j in range(i+1, len(arr)+1))",
        "solution_func": "def g():\n    return [1, -2, 3, 4, -1, 2, -3, -4]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Find a square matrix where the sum of each row is equal to the sum of each column\"\"\"\n    sums = [sum(row) for row in matrix]\n    return all(sum(row) == sum(matrix[i][j] for i in range(len(matrix))) for j, row in enumerate(matrix))\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 68,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Find a square matrix where the sum of each row is equal to the sum of each column\"\"\"\n    sums = [sum(row) for row in matrix]\n    return all(sum(row) == sum(matrix[i][j] for i in range(len(matrix))) for j, row in enumerate(matrix))",
        "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"Find a number that is equal to the sum of the cubes of its digits\"\"\"\n    return num == sum(int(digit)**3 for digit in str(num))\ndef g():\n    return 153\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 68,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"Find a number that is equal to the sum of the cubes of its digits\"\"\"\n    return num == sum(int(digit)**3 for digit in str(num))",
        "solution_func": "def g():\n    return 153",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=2) -> bool:\n    \"\"\"Check if there are exactly target number of even numbers in the list\"\"\"\n    even_nums = [n for n in nums if n % 2 == 0]\n    return len(even_nums) == target\ndef g(target=2):\n    return [1, 2, 3, 4, 5, 6, 7, 8]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 68,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=2) -> bool:\n    \"\"\"Check if there are exactly target number of even numbers in the list\"\"\"\n    even_nums = [n for n in nums if n % 2 == 0]\n    return len(even_nums) == target",
        "solution_func": "def g(target=2):\n    return [1, 2, 3, 4, 5, 6, 7, 8]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=441) -> bool:\n    \"\"\"Find a number that when squared is equal to the sum of all integers from 1 to a.\"\"\"\n    return abs(x ** 2 - sum(range(1, a+1))) < 10 ** (-3)\ndef g(a=441):\n    return math.isqrt(sum(range(1, a+1)))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 69,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=441) -> bool:\n    \"\"\"Find a number that when squared is equal to the sum of all integers from 1 to a.\"\"\"\n    return abs(x ** 2 - sum(range(1, a+1))) < 10 ** (-3)",
        "solution_func": "def g(a=441):\n    return math.isqrt(sum(range(1, a+1)))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string that is a palindrome and contains only lowercase letters and digits.\"\"\"\n    return s == s[::-1] and s.islower() and s.isalnum()\ndef g():\n    return 'abc123cba'\nassert f(g())\n",
        "emb": null,
        "idx_generation": 69,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string that is a palindrome and contains only lowercase letters and digits.\"\"\"\n    return s == s[::-1] and s.islower() and s.isalnum()",
        "solution_func": "def g():\n    return 'abc123cba'",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if x, y, and z are Pythagorean triples.\"\"\"\n    return x ** 2 + y ** 2 == z ** 2\ndef g():\n    return 3, 4, 5\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 69,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if x, y, and z are Pythagorean triples.\"\"\"\n    return x ** 2 + y ** 2 == z ** 2",
        "solution_func": "def g():\n    return 3, 4, 5",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, target=10) -> bool:\n    \"\"\"Find a number whose square root is equal to the target value\"\"\"\n    return math.isclose(math.sqrt(n), target)\n    \ndef g(target=10):\n    return target ** 2\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 69,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, target=10) -> bool:\n    \"\"\"Find a number whose square root is equal to the target value\"\"\"\n    return math.isclose(math.sqrt(n), target)",
        "solution_func": "def g(target=10):\n    return target ** 2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Find a list of numbers where the sum of the numbers is equal to a target value\"\"\"\n    return sum(lst) == target\n\ndef g(target=100):\n    return [1, 2, 3, 4, 5, target-15]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 69,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Find a list of numbers where the sum of the numbers is equal to a target value\"\"\"\n    return sum(lst) == target",
        "solution_func": "def g(target=100):\n    return [1, 2, 3, 4, 5, target-15]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Find a list of numbers where the target number is present in the list\"\"\"\n    return target in lst\n\ndef g(target=10):\n    lst = random.sample(range(1, 20), 5)\n    lst.append(target)\n    random.shuffle(lst)\n    return lst\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 69,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Find a list of numbers where the target number is present in the list\"\"\"\n    return target in lst",
        "solution_func": "def g(target=10):\n    lst = random.sample(range(1, 20), 5)\n    lst.append(target)\n    random.shuffle(lst)\n    return lst",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target_sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target_sum:\n                    return True\n    return False\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 69,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target_sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target_sum:\n                    return True\n    return False",
        "solution_func": "def g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(word: str, target_length=5) -> bool:\n    \"\"\"Check if the word has the target_length number of unique letters.\"\"\"\n    return len(set(word)) == target_length\ndef g(target_length=5):\n    return \"apple\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 69,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str, target_length=5) -> bool:\n    \"\"\"Check if the word has the target_length number of unique letters.\"\"\"\n    return len(set(word)) == target_length",
        "solution_func": "def g(target_length=5):\n    return \"apple\"",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_product=24) -> bool:\n    \"\"\"Find three numbers in the list that multiply to the target_product.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] * numbers[j] * numbers[k] == target_product:\n                    return True\n    return False\ndef g(target_product=24):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 69,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target_product=24) -> bool:\n    \"\"\"Find three numbers in the list that multiply to the target_product.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] * numbers[j] * numbers[k] == target_product:\n                    return True\n    return False",
        "solution_func": "def g(target_product=24):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=42, k=3) -> bool:\n    \"\"\"Find k numbers in nums that sum up to the target value.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))\ndef g(target=42, k=3):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return next((list(comb) for comb in combinations(nums, k) if sum(comb) == target))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 69,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=42, k=3) -> bool:\n    \"\"\"Find k numbers in nums that sum up to the target value.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))",
        "solution_func": "def g(target=42, k=3):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return next((list(comb) for comb in combinations(nums, k) if sum(comb) == target))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=100, n=3) -> bool:\n    \"\"\"Find n numbers that sum up to the target value.\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(numbers, n))\ndef g(target=100, n=3):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 70,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=100, n=3) -> bool:\n    \"\"\"Find n numbers that sum up to the target value.\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(numbers, n))",
        "solution_func": "def g(target=100, n=3):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sum=10) -> bool:\n    \"\"\"Find a row in the matrix whose sum is equal to row_sum.\"\"\"\n    return any(sum(row) == row_sum for row in matrix)\ndef g(row_sum=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 70,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row_sum=10) -> bool:\n    \"\"\"Find a row in the matrix whose sum is equal to row_sum.\"\"\"\n    return any(sum(row) == row_sum for row in matrix)",
        "solution_func": "def g(row_sum=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(items: List[str], target_length=5) -> bool:\n    \"\"\"Find a combination of items whose combined length is equal to target_length.\"\"\"\n    from itertools import combinations\n    return any(len(''.join(c)) == target_length for r in range(1, len(items) + 1) for c in combinations(items, r))\ndef g(target_length=5):\n    return ['apple', 'banana', 'cherry', 'date']\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 70,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(items: List[str], target_length=5) -> bool:\n    \"\"\"Find a combination of items whose combined length is equal to target_length.\"\"\"\n    from itertools import combinations\n    return any(len(''.join(c)) == target_length for r in range(1, len(items) + 1) for c in combinations(items, r))",
        "solution_func": "def g(target_length=5):\n    return ['apple', 'banana', 'cherry', 'date']",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: list, target=7) -> bool:\n    \"\"\"Given a list of integers, find two numbers that add up to the target number.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5, 6]):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == 7:\n                return True\n    return False\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 70,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(arr: list, target=7) -> bool:\n    \"\"\"Given a list of integers, find two numbers that add up to the target number.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5, 6]):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == 7:\n                return True\n    return False",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(area: float, radius=2) -> bool:\n    \"\"\"Given the radius of a circle, find the area of the circle and check if it matches the given area.\"\"\"\n    circle_area = math.pi * radius**2\n    return math.isclose(area, circle_area)\n\ndef g(radius=2):\n    circle_area = math.pi * 2**2\n    return circle_area\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 70,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(area: float, radius=2) -> bool:\n    \"\"\"Given the radius of a circle, find the area of the circle and check if it matches the given area.\"\"\"\n    circle_area = math.pi * radius**2\n    return math.isclose(area, circle_area)",
        "solution_func": "def g(radius=2):\n    circle_area = math.pi * 2**2\n    return circle_area",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Convert the given date string to a datetime object and check if it matches the given format.\"\"\"\n    try:\n        datetime.datetime.strptime(date, format)\n        return True\n    except ValueError:\n        return False\n\ndef g(format='%Y-%m-%d'):\n    return datetime.datetime.now().strftime(format)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 70,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Convert the given date string to a datetime object and check if it matches the given format.\"\"\"\n    try:\n        datetime.datetime.strptime(date, format)\n        return True\n    except ValueError:\n        return False",
        "solution_func": "def g(format='%Y-%m-%d'):\n    return datetime.datetime.now().strftime(format)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Given a list of integers and a target number, find two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[2, 4, 6, 8]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 70,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Given a list of integers and a target number, find two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[2, 4, 6, 8]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_row=2, target_col=3) -> bool:\n    \"\"\"Given a matrix and target row and column indices, check if the target value is present in the matrix.\"\"\"\n    return matrix[target_row][target_col] == 0\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 0]]):\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 70,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_row=2, target_col=3) -> bool:\n    \"\"\"Given a matrix and target row and column indices, check if the target value is present in the matrix.\"\"\"\n    return matrix[target_row][target_col] == 0",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 0]]):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Given a list of words, check if any word has the given prefix.\"\"\"\n    for word in words:\n        if word.startswith(prefix):\n            return True\n    return False\n\ndef g(words=['prefix', 'suffix', 'word']):\n    return words\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 70,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Given a list of words, check if any word has the given prefix.\"\"\"\n    for word in words:\n        if word.startswith(prefix):\n            return True\n    return False",
        "solution_func": "def g(words=['prefix', 'suffix', 'word']):\n    return words",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\ndef f(li: List[int], target=5, product=120) -> bool:\n    \"\"\"Find a list where the product of its elements is equal to a given value.\"\"\"\n    return math.prod(li) == product and target in li\ndef g(target=5, product=120):\n    return [2, 3, 4, target, 6, 8, 10, 12, 15, 20, 24, 30, 40, 60, 120]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 70,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\ndef f(li: List[int], target=5, product=120) -> bool:\n    \"\"\"Find a list where the product of its elements is equal to a given value.\"\"\"\n    return math.prod(li) == product and target in li",
        "solution_func": "def g(target=5, product=120):\n    return [2, 3, 4, target, 6, 8, 10, 12, 15, 20, 24, 30, 40, 60, 120]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, ops=['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], target=61813) -> bool:\n    \"\"\"Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\nfinal value is the target value.\nSample Input:\nops = [\"x++\", \"--x\", \"--x\"]\ntarget = 12\nSample Output:\n13\"\"\"\n    for op in ops:\n        if op in ['++x', 'x++']:\n            n += 1\n        else:\n            assert op in ['--x', 'x--']\n            n -= 1\n    return n == target\ndef g(ops=['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], target=61813):\n    return target - ops.count('++x') - ops.count('x++') + ops.count('--x') + ops.count('x--')\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 71,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, ops=['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], target=61813) -> bool:\n    \"\"\"Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\nfinal value is the target value.\nSample Input:\nops = [\"x++\", \"--x\", \"--x\"]\ntarget = 12\nSample Output:\n13\"\"\"\n    for op in ops:\n        if op in ['++x', 'x++']:\n            n += 1\n        else:\n            assert op in ['--x', 'x--']\n            n -= 1\n    return n == target",
        "solution_func": "def g(ops=['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], target=61813):\n    return target - ops.count('++x') - ops.count('x++') + ops.count('--x') + ops.count('x--')",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=1) -> bool:\n    \"\"\"Given a square matrix and a target value, find if the target value is present in the matrix.\nSample Input:\nmatrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ntarget = 5\nSample Output:\nTrue\"\"\"\n    return target in matrix.flatten()\ndef g(matrix: np.ndarray):\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 71,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=1) -> bool:\n    \"\"\"Given a square matrix and a target value, find if the target value is present in the matrix.\nSample Input:\nmatrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ntarget = 5\nSample Output:\nTrue\"\"\"\n    return target in matrix.flatten()",
        "solution_func": "def g(matrix: np.ndarray):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, target='abc') -> bool:\n    \"\"\"Given a string and a target substring, find if the target substring appears n times in the string.\nSample Input:\ns = 'ababcabcabc'\nn = 3\ntarget = 'abc'\nSample Output:\nTrue\"\"\"\n    return s.count(target) == n\ndef g(n=3, target='abc'):\n    return target * n\nassert f(g())",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 71,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3, target='abc') -> bool:\n    \"\"\"Given a string and a target substring, find if the target substring appears n times in the string.\nSample Input:\ns = 'ababcabcabc'\nn = 3\ntarget = 'abc'\nSample Output:\nTrue\"\"\"\n    return s.count(target) == n",
        "solution_func": "def g(n=3, target='abc'):\n    return target * n",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, p=3) -> bool:\n    \"\"\"Check if a number is a palindrome in base p\"\"\"\n    return str(num) == str(num)[::-1]\ndef g(p=3):\n    return int(str(p) + str(p))\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 71,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int, p=3) -> bool:\n    \"\"\"Check if a number is a palindrome in base p\"\"\"\n    return str(num) == str(num)[::-1]",
        "solution_func": "def g(p=3):\n    return int(str(p) + str(p))",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[int], n=4) -> bool:\n    \"\"\"Check if there exists a subset of size n whose sum is 0\"\"\"\n    from itertools import combinations\n    return any(sum(subset) == 0 for subset in combinations(lst, n))\ndef g(n=4):\n    return [1, 2, -3, -4, n]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 71,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(lst: List[int], n=4) -> bool:\n    \"\"\"Check if there exists a subset of size n whose sum is 0\"\"\"\n    from itertools import combinations\n    return any(sum(subset) == 0 for subset in combinations(lst, n))",
        "solution_func": "def g(n=4):\n    return [1, 2, -3, -4, n]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if there are exactly n occurrences of a character in a string\"\"\"\n    return s.count('a') == n\ndef g(n=3):\n    return 'a' * n + 'b'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 71,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if there are exactly n occurrences of a character in a string\"\"\"\n    return s.count('a') == n",
        "solution_func": "def g(n=3):\n    return 'a' * n + 'b'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, dictionary={'a': 1, 'b': 2, 'c': 3}) -> bool:\n    \"\"\"Check if all characters in the string are keys in the dictionary\"\"\"\n    return all(char in dictionary for char in x)\ndef g(dictionary={'a': 1, 'b': 2, 'c': 3}):\n    return \"\".join(dictionary.keys())\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 71,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, dictionary={'a': 1, 'b': 2, 'c': 3}) -> bool:\n    \"\"\"Check if all characters in the string are keys in the dictionary\"\"\"\n    return all(char in dictionary for char in x)",
        "solution_func": "def g(dictionary={'a': 1, 'b': 2, 'c': 3}):\n    return \"\".join(dictionary.keys())",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, nums=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if the square of x is in the list\"\"\"\n    return x**2 in nums\ndef g(nums=[2, 4, 6, 8, 10]):\n    return int(nums[-1]**0.5)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 71,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, nums=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if the square of x is in the list\"\"\"\n    return x**2 in nums",
        "solution_func": "def g(nums=[2, 4, 6, 8, 10]):\n    return int(nums[-1]**0.5)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if x is divisible by any number in the list\"\"\"\n    return any(x % num == 0 for num in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[-1]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 71,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if x is divisible by any number in the list\"\"\"\n    return any(x % num == 0 for num in nums)",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[-1]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, angle=45) -> bool:\n    \"\"\"Check if the sine of the angle is equal to the given value.\"\"\"\n    return math.sin(math.radians(angle)) == x\n\ndef g(angle=45):\n    return math.sin(math.radians(angle))\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 71,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, angle=45) -> bool:\n    \"\"\"Check if the sine of the angle is equal to the given value.\"\"\"\n    return math.sin(math.radians(angle)) == x",
        "solution_func": "def g(angle=45):\n    return math.sin(math.radians(angle))",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: datetime, year=2021, month=12, day=25) -> bool:\n    \"\"\"Check if the given date matches the specified year, month, and day.\"\"\"\n    return date.year == year and date.month == month and date.day == day\n\ndef g(year=2021, month=12, day=25):\n    return datetime(year, month, day)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 72,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date: datetime, year=2021, month=12, day=25) -> bool:\n    \"\"\"Check if the given date matches the specified year, month, and day.\"\"\"\n    return date.year == year and date.month == month and date.day == day",
        "solution_func": "def g(year=2021, month=12, day=25):\n    return datetime(year, month, day)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, n=3) -> bool:\n    \"\"\"Find n numbers in the list that sum up to the target value.\"\"\"\n    from itertools import combinations\n\n    for comb in combinations(nums, n):\n        if sum(comb) == target:\n            return True\n    return False\n\ndef g(target=10, n=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 72,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, n=3) -> bool:\n    \"\"\"Find n numbers in the list that sum up to the target value.\"\"\"\n    from itertools import combinations\n\n    for comb in combinations(nums, n):\n        if sum(comb) == target:\n            return True\n    return False",
        "solution_func": "def g(target=10, n=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, word=\"Python\", num=3) -> bool:\n    \"\"\"Check if the given word appears num times in the sentence.\"\"\"\n    return sentence.count(word) == num\n\ndef g(word=\"Python\", num=3):\n    return \"I love Python and Python loves me. Python is the best.\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 72,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(sentence: str, word=\"Python\", num=3) -> bool:\n    \"\"\"Check if the given word appears num times in the sentence.\"\"\"\n    return sentence.count(word) == num",
        "solution_func": "def g(word=\"Python\", num=3):\n    return \"I love Python and Python loves me. Python is the best.\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Given an n x n matrix, check if it is a symmetric matrix.\n    A matrix is symmetric if it is equal to its transpose.\n    Sample Input:\n    n = 3\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n    Sample Output:\n    True\"\"\"\n    return n == len(matrix) and all((matrix[i][j] == matrix[j][i] for i in range(n) for j in range(n)))\ndef g(n=3, matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 72,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Given an n x n matrix, check if it is a symmetric matrix.\n    A matrix is symmetric if it is equal to its transpose.\n    Sample Input:\n    n = 3\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n    Sample Output:\n    True\"\"\"\n    return n == len(matrix) and all((matrix[i][j] == matrix[j][i] for i in range(n) for j in range(n)))",
        "solution_func": "def g(n=3, matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"Given a string s, check if it is a palindrome of length k.\n    A palindrome is a string that reads the same forwards and backwards.\n    Sample Input:\n    s = \"racecar\"\n    k = 7\n    Sample Output:\n    True\"\"\"\n    return len(s) == k and s == s[::-1]\ndef g(s=\"racecar\", k=7):\n    return s\nassert f(g())\n",
        "emb": null,
        "idx_generation": 72,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"Given a string s, check if it is a palindrome of length k.\n    A palindrome is a string that reads the same forwards and backwards.\n    Sample Input:\n    s = \"racecar\"\n    k = 7\n    Sample Output:\n    True\"\"\"\n    return len(s) == k and s == s[::-1]",
        "solution_func": "def g(s=\"racecar\", k=7):\n    return s",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Given a string s, check if it contains at least n vowels.\n    A vowel is any of the following: 'a', 'e', 'i', 'o', 'u'.\n    Sample Input:\n    s = \"hello\"\n    n = 2\n    Sample Output:\n    True\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return len([c for c in s if c in vowels]) >= n\ndef g(s=\"hello\", n=2):\n    return s\nassert f(g())\n",
        "emb": null,
        "idx_generation": 72,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Given a string s, check if it contains at least n vowels.\n    A vowel is any of the following: 'a', 'e', 'i', 'o', 'u'.\n    Sample Input:\n    s = \"hello\"\n    n = 2\n    Sample Output:\n    True\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return len([c for c in s if c in vowels]) >= n",
        "solution_func": "def g(s=\"hello\", n=2):\n    return s",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=7, b=2, c=3) -> bool:\n    \"\"\"Check if n is a prime number and a^b + c is divisible by n.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return (a ** b + c) % n == 0\n\ndef g(a=7, b=2, c=3):\n    for i in range(2, 100):\n        if f(i, a, b, c):\n            return i\n    return None\n\nassert f(g(), a=7, b=2, c=3)\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 72,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=7, b=2, c=3) -> bool:\n    \"\"\"Check if n is a prime number and a^b + c is divisible by n.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return (a ** b + c) % n == 0",
        "solution_func": "def g(a=7, b=2, c=3):\n    for i in range(2, 100):\n        if f(i, a, b, c):\n            return i\n    return None",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=2021, b=11) -> bool:\n    \"\"\"Check if n is a multiple of a and the sum of its digits is divisible by b.\"\"\"\n    return n % a == 0 and sum(int(digit) for digit in str(n)) % b == 0\n\ndef g(a=2021, b=11):\n    for i in range(1, 10000):\n        if f(i, a, b):\n            return i\n    return None\n\nassert f(g(), a=2021, b=11)\n",
        "emb": null,
        "idx_generation": 72,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=2021, b=11) -> bool:\n    \"\"\"Check if n is a multiple of a and the sum of its digits is divisible by b.\"\"\"\n    return n % a == 0 and sum(int(digit) for digit in str(n)) % b == 0",
        "solution_func": "def g(a=2021, b=11):\n    for i in range(1, 10000):\n        if f(i, a, b):\n            return i\n    return None",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, a=5) -> bool:\n    \"\"\"Check if n is a power of a and the sum of its digits is equal to n.\"\"\"\n    if n <= 0:\n        return False\n    if n == 1:\n        return True\n    while n % a == 0:\n        n /= a\n    return n == 1 and sum(int(digit) for digit in str(n)) == n\n\ndef g(a=5):\n    powers_of_a = [a ** i for i in range(10)]\n    random.shuffle(powers_of_a)\n    return powers_of_a[0]\n\nassert f(g(), a=5)\n",
        "emb": null,
        "idx_generation": 72,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, a=5) -> bool:\n    \"\"\"Check if n is a power of a and the sum of its digits is equal to n.\"\"\"\n    if n <= 0:\n        return False\n    if n == 1:\n        return True\n    while n % a == 0:\n        n /= a\n    return n == 1 and sum(int(digit) for digit in str(n)) == n",
        "solution_func": "def g(a=5):\n    powers_of_a = [a ** i for i in range(10)]\n    random.shuffle(powers_of_a)\n    return powers_of_a[0]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target integer, determine if there are three integers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=0):\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 72,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target integer, determine if there are three integers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=0):\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if the number is present in the list\"\"\"\n    return num in lst\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return lst[0]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 73,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if the number is present in the list\"\"\"\n    return num in lst",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return lst[0]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: list, target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sums up to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 73,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: list, target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sums up to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"Check if the substring is present in the string\"\"\"\n    return substr in string\ndef g(substr='python'):\n    return \"I love python programming\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 73,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"Check if the substring is present in the string\"\"\"\n    return substr in string",
        "solution_func": "def g(substr='python'):\n    return \"I love python programming\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, seq=[2, 5, 8, 11, 14, 17, 20, 23, 26, 29]) -> bool:\n    \"\"\"Determine if a given number is in a sequence of numbers that follow a pattern\"\"\"\n    return n in seq and n % 3 == 2\ndef g(seq=[2, 5, 8, 11, 14, 17, 20, 23, 26, 29]):\n    return [num for num in seq if num % 3 == 2]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 73,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, seq=[2, 5, 8, 11, 14, 17, 20, 23, 26, 29]) -> bool:\n    \"\"\"Determine if a given number is in a sequence of numbers that follow a pattern\"\"\"\n    return n in seq and n % 3 == 2",
        "solution_func": "def g(seq=[2, 5, 8, 11, 14, 17, 20, 23, 26, 29]):\n    return [num for num in seq if num % 3 == 2]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, seq=[1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683]) -> bool:\n    \"\"\"Determine if a given number is in a sequence of numbers that follow a pattern\"\"\"\n    return n in seq and n % 2 == 1\ndef g(seq=[1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683]):\n    return [num for num in seq if num % 2 == 1]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 73,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, seq=[1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683]) -> bool:\n    \"\"\"Determine if a given number is in a sequence of numbers that follow a pattern\"\"\"\n    return n in seq and n % 2 == 1",
        "solution_func": "def g(seq=[1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683]):\n    return [num for num in seq if num % 2 == 1]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: str, seq=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit']) -> bool:\n    \"\"\"Determine if a given string is in a sequence of strings that follow a pattern\"\"\"\n    return n in seq and len(n) % 2 == 0\ndef g(seq=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit']):\n    return [word for word in seq if len(word) % 2 == 0]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 73,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: str, seq=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit']) -> bool:\n    \"\"\"Determine if a given string is in a sequence of strings that follow a pattern\"\"\"\n    return n in seq and len(n) % 2 == 0",
        "solution_func": "def g(seq=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit']):\n    return [word for word in seq if len(word) % 2 == 0]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if the number n is divisible by all the primes in the list\"\"\"\n    return all(n % p == 0 for p in primes)\n\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    n = math.prod(primes)\n    return n\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 73,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if the number n is divisible by all the primes in the list\"\"\"\n    return all(n % p == 0 for p in primes)",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    n = math.prod(primes)\n    return n",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(points: List[Tuple[float, float]], x1=2, y1=4, x2=8, y2=6) -> bool:\n    \"\"\"Check if all points lie within the rectangle defined by the bottom-left point (x1, y1) and the top-right point (x2, y2)\"\"\"\n    return all(x1 <= x <= x2 and y1 <= y <= y2 for x, y in points)\n\ndef g(x1=2, y1=4, x2=8, y2=6):\n    points = [(3, 5), (6, 5), (7, 4)]\n    return points\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 73,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(points: List[Tuple[float, float]], x1=2, y1=4, x2=8, y2=6) -> bool:\n    \"\"\"Check if all points lie within the rectangle defined by the bottom-left point (x1, y1) and the top-right point (x2, y2)\"\"\"\n    return all(x1 <= x <= x2 and y1 <= y <= y2 for x, y in points)",
        "solution_func": "def g(x1=2, y1=4, x2=8, y2=6):\n    points = [(3, 5), (6, 5), (7, 4)]\n    return points",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, count=3) -> bool:\n    \"\"\"Check if there are count numbers in the list that add up to the target\"\"\"\n    return any(sum(combo) == target for combo in itertools.combinations(nums, count))\n\ndef g(target=100, count=3):\n    nums = [25, 50, 75, 10, 5, 2]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 73,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, count=3) -> bool:\n    \"\"\"Check if there are count numbers in the list that add up to the target\"\"\"\n    return any(sum(combo) == target for combo in itertools.combinations(nums, count))",
        "solution_func": "def g(target=100, count=3):\n    nums = [25, 50, 75, 10, 5, 2]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='python', index=5) -> bool:\n    \"\"\"Check if the substring occurs at the given index in the string.\"\"\"\n    return string[index:index+len(substr)] == substr\ndef g(substr='python', index=5):\n    string = 'I love programming in python!'\n    return string[:index] + substr + string[index+len(substr):]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 73,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substr='python', index=5) -> bool:\n    \"\"\"Check if the substring occurs at the given index in the string.\"\"\"\n    return string[index:index+len(substr)] == substr",
        "solution_func": "def g(substr='python', index=5):\n    string = 'I love programming in python!'\n    return string[:index] + substr + string[index+len(substr):]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=6, b=9, lower_bound=6) -> bool:\n    \"\"\"Check if a number is a divisor of two integers and if it's greater than a given lower bound.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=6, b=9, lower_bound=6):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 74,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=6, b=9, lower_bound=6) -> bool:\n    \"\"\"Check if a number is a divisor of two integers and if it's greater than a given lower bound.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)",
        "solution_func": "def g(a=6, b=9, lower_bound=6):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=10, lower_bound=2) -> bool:\n    \"\"\"Check if a number is a common divisor of two integers and if it's greater than a given lower bound.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=5, b=10, lower_bound=2):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 74,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=5, b=10, lower_bound=2) -> bool:\n    \"\"\"Check if a number is a common divisor of two integers and if it's greater than a given lower bound.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)",
        "solution_func": "def g(a=5, b=10, lower_bound=2):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=20, b=30, lower_bound=10) -> bool:\n    \"\"\"Check if a number is a common divisor of two integers and if it's greater than a given lower bound.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=20, b=30, lower_bound=10):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 74,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=20, b=30, lower_bound=10) -> bool:\n    \"\"\"Check if a number is a common divisor of two integers and if it's greater than a given lower bound.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)",
        "solution_func": "def g(a=20, b=30, lower_bound=10):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst=[2, 5, 8, 11, 14, 17, 20, 23, 26, 29], target=18) -> bool:\n    \"\"\"Check if a number is the sum of two elements in the list.\"\"\"\n    return any([True for i in range(len(lst)) if (target - lst[i]) in lst[i+1:]])\n    \ndef g(lst=[2, 5, 8, 11, 14, 17, 20, 23, 26, 29], target=18):\n    random.shuffle(lst)\n    return lst[n]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 74,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, lst=[2, 5, 8, 11, 14, 17, 20, 23, 26, 29], target=18) -> bool:\n    \"\"\"Check if a number is the sum of two elements in the list.\"\"\"\n    return any([True for i in range(len(lst)) if (target - lst[i]) in lst[i+1:]])",
        "solution_func": "def g(lst=[2, 5, 8, 11, 14, 17, 20, 23, 26, 29], target=18):\n    random.shuffle(lst)\n    return lst[n]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 4, 9, 16, 25, 36, 49, 64, 81, 100], target=90) -> bool:\n    \"\"\"Check if a number is the square of an element in the list.\"\"\"\n    return target in [x**2 for x in lst]\n\ndef g(lst=[1, 4, 9, 16, 25, 36, 49, 64, 81, 100], target=90):\n    return int(target**0.5)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 74,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[1, 4, 9, 16, 25, 36, 49, 64, 81, 100], target=90) -> bool:\n    \"\"\"Check if a number is the square of an element in the list.\"\"\"\n    return target in [x**2 for x in lst]",
        "solution_func": "def g(lst=[1, 4, 9, 16, 25, 36, 49, 64, 81, 100], target=90):\n    return int(target**0.5)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=4, b=6, c=8) -> bool:\n    \"\"\"Check if a number is a Pythagorean triple.\"\"\"\n    return n**2 == a**2 + b**2 + c**2\n\ndef g(a=4, b=6, c=8):\n    return int((a**2 + b**2 + c**2)**0.5)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 74,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=4, b=6, c=8) -> bool:\n    \"\"\"Check if a number is a Pythagorean triple.\"\"\"\n    return n**2 == a**2 + b**2 + c**2",
        "solution_func": "def g(a=4, b=6, c=8):\n    return int((a**2 + b**2 + c**2)**0.5)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, k: int, s: str) -> bool:\n    \"\"\"Check if there are k distinct characters in the first n characters of string s.\"\"\"\n    return len(set(s[:n])) == k\ndef g(k: int, s: str):\n    return len(set(s[:k])) == k\nassert f(g())\n",
        "emb": null,
        "idx_generation": 74,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, k: int, s: str) -> bool:\n    \"\"\"Check if there are k distinct characters in the first n characters of string s.\"\"\"\n    return len(set(s[:n])) == k",
        "solution_func": "def g(k: int, s: str):\n    return len(set(s[:k])) == k",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a: int, b: int) -> bool:\n    \"\"\"Check if there exists two integers in the range [a, b] whose product is equal to n.\"\"\"\n    for i in range(a, b+1):\n        for j in range(i+1, b+1):\n            if i * j == n:\n                return True\n    return False\ndef g(a: int, b: int):\n    for i in range(a, b+1):\n        for j in range(i+1, b+1):\n            if i * j == n:\n                return True\n    return False\nassert f(g())\n",
        "emb": null,
        "idx_generation": 74,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a: int, b: int) -> bool:\n    \"\"\"Check if there exists two integers in the range [a, b] whose product is equal to n.\"\"\"\n    for i in range(a, b+1):\n        for j in range(i+1, b+1):\n            if i * j == n:\n                return True\n    return False",
        "solution_func": "def g(a: int, b: int):\n    for i in range(a, b+1):\n        for j in range(i+1, b+1):\n            if i * j == n:\n                return True\n    return False",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if there are exactly n occurrences of the substring 'abc' in the string s.\"\"\"\n    return s.count('abc') == n\ndef g(n: int):\n    return 'abc' * n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 74,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if there are exactly n occurrences of the substring 'abc' in the string s.\"\"\"\n    return s.count('abc') == n",
        "solution_func": "def g(n: int):\n    return 'abc' * n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Find a row and column in the matrix such that the sum of the elements in that row and column is equal to the target_sum\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return any((row_sum == target_sum or col_sum == target_sum for row_sum in row_sums for col_sum in col_sums))\ndef g(target_sum=100):\n    return [[target_sum - i, i] for i in range(target_sum)]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 74,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Find a row and column in the matrix such that the sum of the elements in that row and column is equal to the target_sum\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return any((row_sum == target_sum or col_sum == target_sum for row_sum in row_sums for col_sum in col_sums))",
        "solution_func": "def g(target_sum=100):\n    return [[target_sum - i, i] for i in range(target_sum)]",
        "map_ix": [
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], p=5, q=8) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is divisible by a given number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] * nums[j]) % p == 0:\n                return True\n    return False\n\ndef g(p=5, q=8):\n    return [1, 2, 3, 4, q]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 75,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], p=5, q=8) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is divisible by a given number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] * nums[j]) % p == 0:\n                return True\n    return False",
        "solution_func": "def g(p=5, q=8):\n    return [1, 2, 3, 4, q]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=4, m=6) -> bool:\n    \"\"\"Check if a substring of length n can be found in the string, such that the substring is a palindrome.\"\"\"\n    for i in range(len(s) - n + 1):\n        substring = s[i:i+n]\n        if substring == substring[::-1]:\n            return True\n    return False\n\ndef g(n=4, m=6):\n    return \"abcdedfghijklmnopqrstuvwxyz\"[:m]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 75,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=4, m=6) -> bool:\n    \"\"\"Check if a substring of length n can be found in the string, such that the substring is a palindrome.\"\"\"\n    for i in range(len(s) - n + 1):\n        substring = s[i:i+n]\n        if substring == substring[::-1]:\n            return True\n    return False",
        "solution_func": "def g(n=4, m=6):\n    return \"abcdedfghijklmnopqrstuvwxyz\"[:m]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of length k whose sum is divisible by k.\"\"\"\n    for i in range(len(nums) - k + 1):\n        subarray = nums[i:i+k]\n        if sum(subarray) % k == 0:\n            return True\n    return False\n\ndef g(k=3):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 75,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of length k whose sum is divisible by k.\"\"\"\n    for i in range(len(nums) - k + 1):\n        subarray = nums[i:i+k]\n        if sum(subarray) % k == 0:\n            return True\n    return False",
        "solution_func": "def g(k=3):\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=5, y=10) -> bool:\n    \"\"\"Check if the given number is a perfect square and lies within the range [x, y].\"\"\"\n    return math.isqrt(n)**2 == n and x <= n <= y\n\ndef g(x=5, y=10):\n    return (x + y) // 2\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 75,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=5, y=10) -> bool:\n    \"\"\"Check if the given number is a perfect square and lies within the range [x, y].\"\"\"\n    return math.isqrt(n)**2 == n and x <= n <= y",
        "solution_func": "def g(x=5, y=10):\n    return (x + y) // 2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char1='a', char2='z', count1=3, count2=5) -> bool:\n    \"\"\"Check if the given string has count1 occurrences of char1 and count2 occurrences of char2.\"\"\"\n    return s.count(char1) == count1 and s.count(char2) == count2\n\ndef g(char1='a', char2='z', count1=3, count2=5):\n    return char1 * count1 + char2 * count2\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 75,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char1='a', char2='z', count1=3, count2=5) -> bool:\n    \"\"\"Check if the given string has count1 occurrences of char1 and count2 occurrences of char2.\"\"\"\n    return s.count(char1) == count1 and s.count(char2) == count2",
        "solution_func": "def g(char1='a', char2='z', count1=3, count2=5):\n    return char1 * count1 + char2 * count2",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: list, target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(i + j == target for i in arr for j in arr if i != j)\n\ndef g(target=100):\n    arr = random.sample(range(1, 101), 10)\n    return arr\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 75,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(arr: list, target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(i + j == target for i in arr for j in arr if i != j)",
        "solution_func": "def g(target=100):\n    arr = random.sample(range(1, 101), 10)\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if the given string contains all the substrings in the given list, in any order\"\"\"\n    return all((sub in s for sub in substrings))\ndef g(substrings=['apple', 'banana', 'cherry']):\n    return ''.join(substrings)\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 75,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if the given string contains all the substrings in the given list, in any order\"\"\"\n    return all((sub in s for sub in substrings))",
        "solution_func": "def g(substrings=['apple', 'banana', 'cherry']):\n    return ''.join(substrings)",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list whose sum is equal to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=10):\n    return [1, 9, 3, 7]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 75,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list whose sum is equal to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(target=10):\n    return [1, 9, 3, 7]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(names: List[str], letter='a') -> bool:\n    \"\"\"Check if all the names in the list start with the given letter\"\"\"\n    return all((name.startswith(letter) for name in names))\ndef g(letter='a'):\n    return ['apple', 'banana', 'cherry']\nassert f(g())\n",
        "emb": null,
        "idx_generation": 75,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(names: List[str], letter='a') -> bool:\n    \"\"\"Check if all the names in the list start with the given letter\"\"\"\n    return all((name.startswith(letter) for name in names))",
        "solution_func": "def g(letter='a'):\n    return ['apple', 'banana', 'cherry']",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(msg: str, key=7, encrypted_msg='ylhzapun') -> bool:\n    \"\"\"Find the original message by decrypting the encrypted_msg using the key\"\"\"\n    decrypted_msg = ''.join(chr(ord(c) - key) for c in encrypted_msg)\n    return decrypted_msg == msg\ndef g(key=7, encrypted_msg='ylhzapun'):\n    return ''.join(chr(ord(c) + key) for c in encrypted_msg)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 75,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(msg: str, key=7, encrypted_msg='ylhzapun') -> bool:\n    \"\"\"Find the original message by decrypting the encrypted_msg using the key\"\"\"\n    decrypted_msg = ''.join(chr(ord(c) - key) for c in encrypted_msg)\n    return decrypted_msg == msg",
        "solution_func": "def g(key=7, encrypted_msg='ylhzapun'):\n    return ''.join(chr(ord(c) + key) for c in encrypted_msg)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='programming') -> bool:\n    \"\"\"Check if the word 'programming' is a substring of s\"\"\"\n    return word in s\ndef g(word='programming'):\n    return word\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 76,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, word='programming') -> bool:\n    \"\"\"Check if the word 'programming' is a substring of s\"\"\"\n    return word in s",
        "solution_func": "def g(word='programming'):\n    return word",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int, k: int, x: int = 2, y: int = 5) -> bool:\n    \"\"\"Check if n, m, k are divisible by both x and y\"\"\"\n    return n % x == 0 and n % y == 0 and m % x == 0 and m % y == 0 and k % x == 0 and k % y == 0\ndef g(x: int = 2, y: int = 5):\n    n = x * y\n    m = x * y * 2\n    k = x * y * 3\n    return n, m, k\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 76,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m: int, k: int, x: int = 2, y: int = 5) -> bool:\n    \"\"\"Check if n, m, k are divisible by both x and y\"\"\"\n    return n % x == 0 and n % y == 0 and m % x == 0 and m % y == 0 and k % x == 0 and k % y == 0",
        "solution_func": "def g(x: int = 2, y: int = 5):\n    n = x * y\n    m = x * y * 2\n    k = x * y * 3\n    return n, m, k",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, m: int, p: int, q: int) -> bool:\n    \"\"\"Check if the sum of squares of n, m, p is equal to the square of q\"\"\"\n    return math.pow(n, 2) + math.pow(m, 2) + math.pow(p, 2) == math.pow(q, 2)\ndef g():\n    n = 3\n    m = 4\n    p = 5\n    q = math.sqrt(math.pow(n, 2) + math.pow(m, 2) + math.pow(p, 2))\n    return n, m, p, int(q)\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 76,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, m: int, p: int, q: int) -> bool:\n    \"\"\"Check if the sum of squares of n, m, p is equal to the square of q\"\"\"\n    return math.pow(n, 2) + math.pow(m, 2) + math.pow(p, 2) == math.pow(q, 2)",
        "solution_func": "def g():\n    n = 3\n    m = 4\n    p = 5\n    q = math.sqrt(math.pow(n, 2) + math.pow(m, 2) + math.pow(p, 2))\n    return n, m, p, int(q)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=3.14) -> bool:\n    \"\"\"Check if the square root of x is equal to a\"\"\"\n    return math.sqrt(x) == a\n\ndef g(a=3.14):\n    return a ** 2\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 76,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=3.14) -> bool:\n    \"\"\"Check if the square root of x is equal to a\"\"\"\n    return math.sqrt(x) == a",
        "solution_func": "def g(a=3.14):\n    return a ** 2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: list, target=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if the elements of x are in the target list in the same order\"\"\"\n    return all([x[i] == target[i] for i in range(len(x))])\n\ndef g(target=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return target\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 76,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: list, target=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if the elements of x are in the target list in the same order\"\"\"\n    return all([x[i] == target[i] for i in range(len(x))])",
        "solution_func": "def g(target=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return target",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, target='apple', n=3) -> bool:\n    \"\"\"Check if the first n characters of x are equal to the target string\"\"\"\n    return x[:n] == target[:n]\n\ndef g(target='apple', n=3):\n    return target\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 76,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, target='apple', n=3) -> bool:\n    \"\"\"Check if the first n characters of x are equal to the target string\"\"\"\n    return x[:n] == target[:n]",
        "solution_func": "def g(target='apple', n=3):\n    return target",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=6) -> bool:\n    \"\"\"Check if a string has a certain number of characters\"\"\"\n    return len(s) == n\ndef g(n=6):\n    return \"abcdefg\"[:n]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 76,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=6) -> bool:\n    \"\"\"Check if a string has a certain number of characters\"\"\"\n    return len(s) == n",
        "solution_func": "def g(n=6):\n    return \"abcdefg\"[:n]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=12) -> bool:\n    \"\"\"Check if there is a pair of numbers in a list that sums up to a target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False\ndef g(target=12):\n    return [4, 6, 8, 10]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 76,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int], target=12) -> bool:\n    \"\"\"Check if there is a pair of numbers in a list that sums up to a target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=12):\n    return [4, 6, 8, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, days=7, hours=0, minutes=0, seconds=0) -> bool:\n    \"\"\"Check if a datetime is exactly a certain number of days, hours, minutes, and seconds away from a given reference datetime\"\"\"\n    reference_dt = datetime.datetime(2022, 1, 1, 0, 0, 0)\n    target_dt = reference_dt + datetime.timedelta(days=days, hours=hours, minutes=minutes, seconds=seconds)\n    return dt == target_dt\ndef g(days=7, hours=0, minutes=0, seconds=0):\n    reference_dt = datetime.datetime(2022, 1, 1, 0, 0, 0)\n    return reference_dt + datetime.timedelta(days=days, hours=hours, minutes=minutes, seconds=seconds)\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 76,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, days=7, hours=0, minutes=0, seconds=0) -> bool:\n    \"\"\"Check if a datetime is exactly a certain number of days, hours, minutes, and seconds away from a given reference datetime\"\"\"\n    reference_dt = datetime.datetime(2022, 1, 1, 0, 0, 0)\n    target_dt = reference_dt + datetime.timedelta(days=days, hours=hours, minutes=minutes, seconds=seconds)\n    return dt == target_dt",
        "solution_func": "def g(days=7, hours=0, minutes=0, seconds=0):\n    reference_dt = datetime.datetime(2022, 1, 1, 0, 0, 0)\n    return reference_dt + datetime.timedelta(days=days, hours=hours, minutes=minutes, seconds=seconds)",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, m=2) -> bool:\n    \"\"\"Check if a string can be divided into n substrings of equal length, where each substring is a palindrome.\"\"\"\n    length = len(s)\n    if length % n != 0 or length < n * m:\n        return False\n    substr_len = length // n\n    substrings = [s[i:i+substr_len] for i in range(0, length, substr_len)]\n    return all(substring == substring[::-1] for substring in substrings)\ndef g(n=3, m=2):\n    s = \"abcbaabcbaabcba\"\n    return s\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 76,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3, m=2) -> bool:\n    \"\"\"Check if a string can be divided into n substrings of equal length, where each substring is a palindrome.\"\"\"\n    length = len(s)\n    if length % n != 0 or length < n * m:\n        return False\n    substr_len = length // n\n    substrings = [s[i:i+substr_len] for i in range(0, length, substr_len)]\n    return all(substring == substring[::-1] for substring in substrings)",
        "solution_func": "def g(n=3, m=2):\n    s = \"abcbaabcbaabcba\"\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(ans: List[str], target=3) -> bool:\n    \"\"\"Given a list of strings, check if at least a target number of strings have the same length\"\"\"\n    lengths = [len(s) for s in ans]\n    counts = Counter(lengths)\n    return any(count >= target for count in counts.values())\ndef g(target=3):\n    return ['apple', 'banana', 'orange', 'kiwi', 'pear', 'mango', 'grape', 'melon']\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 77,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(ans: List[str], target=3) -> bool:\n    \"\"\"Given a list of strings, check if at least a target number of strings have the same length\"\"\"\n    lengths = [len(s) for s in ans]\n    counts = Counter(lengths)\n    return any(count >= target for count in counts.values())",
        "solution_func": "def g(target=3):\n    return ['apple', 'banana', 'orange', 'kiwi', 'pear', 'mango', 'grape', 'melon']",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(ans: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, check if the sum of the values is equal to the target\"\"\"\n    return sum(ans) == target\ndef g(target=10):\n    return [2, 3, 1, 4]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 77,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(ans: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, check if the sum of the values is equal to the target\"\"\"\n    return sum(ans) == target",
        "solution_func": "def g(target=10):\n    return [2, 3, 1, 4]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(ans: List[str], target=5) -> bool:\n    \"\"\"Given a list of strings, check if there are at least target number of strings that start with the same letter\"\"\"\n    first_letters = [s[0] for s in ans]\n    counts = Counter(first_letters)\n    return any(count >= target for count in counts.values())\ndef g(target=5):\n    return ['apple', 'banana', 'avocado', 'kiwi', 'pear', 'mango', 'grape', 'melon']\nassert f(g())\n",
        "emb": null,
        "idx_generation": 77,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(ans: List[str], target=5) -> bool:\n    \"\"\"Given a list of strings, check if there are at least target number of strings that start with the same letter\"\"\"\n    first_letters = [s[0] for s in ans]\n    counts = Counter(first_letters)\n    return any(count >= target for count in counts.values())",
        "solution_func": "def g(target=5):\n    return ['apple', 'banana', 'avocado', 'kiwi', 'pear', 'mango', 'grape', 'melon']",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: datetime, year=2022, month=12, day=25) -> bool:\n    \"\"\"Check if the given date is Christmas\"\"\"\n    return date.year == year and date.month == month and date.day == day\n\ndef g(year=2022, month=12, day=25):\n    return datetime(year, month, day)\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 77,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date: datetime, year=2022, month=12, day=25) -> bool:\n    \"\"\"Check if the given date is Christmas\"\"\"\n    return date.year == year and date.month == month and date.day == day",
        "solution_func": "def g(year=2022, month=12, day=25):\n    return datetime(year, month, day)",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string\"\"\"\n    return substr in s\n\ndef g(substr='abc'):\n    return 'xyz' + substr + 'def'\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 77,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string\"\"\"\n    return substr in s",
        "solution_func": "def g(substr='abc'):\n    return 'xyz' + substr + 'def'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if any two numbers in the list sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 77,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if any two numbers in the list sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=1029384756) -> bool:\n    \"\"\"Check if a number is evenly divisible by another number\"\"\"\n    return x % a == 0\ndef g(a=1029384756):\n    return a * 2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 77,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=1029384756) -> bool:\n    \"\"\"Check if a number is evenly divisible by another number\"\"\"\n    return x % a == 0",
        "solution_func": "def g(a=1029384756):\n    return a * 2",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=5) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return x == a ** 2\ndef g(a=5):\n    return a * a\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 77,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=5) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return x == a ** 2",
        "solution_func": "def g(a=5):\n    return a * a",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=10, b=20) -> bool:\n    \"\"\"Check if a number is within a given range\"\"\"\n    return a <= x <= b\ndef g(a=10, b=20):\n    return (a + b) // 2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 77,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=10, b=20) -> bool:\n    \"\"\"Check if a number is within a given range\"\"\"\n    return a <= x <= b",
        "solution_func": "def g(a=10, b=20):\n    return (a + b) // 2",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target_value=10) -> bool:\n    \"\"\"Find the index of the first occurrence of the target_value in the 2D array arr\"\"\"\n    return target_value in arr\ndef g(target_value=10):\n    arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\n    return np.where(arr == target_value)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 77,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target_value=10) -> bool:\n    \"\"\"Find the index of the first occurrence of the target_value in the 2D array arr\"\"\"\n    return target_value in arr",
        "solution_func": "def g(target_value=10):\n    arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\n    return np.where(arr == target_value)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a pair of integers whose product is equal to the sum of all the integers in the list\"\"\"\n    product = nums[0] * nums[1]\n    summation = sum(nums)\n    return product == summation\ndef g():\n    return [2, 3]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 78,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a pair of integers whose product is equal to the sum of all the integers in the list\"\"\"\n    product = nums[0] * nums[1]\n    summation = sum(nums)\n    return product == summation",
        "solution_func": "def g():\n    return [2, 3]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, pattern='aba') -> bool:\n    \"\"\"Determine if the given pattern is present in the binary representation of the given number\"\"\"\n    binary = bin(n)\n    return pattern in binary\ndef g(pattern='aba'):\n    n = int('10101', 2)\n    return n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 78,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, pattern='aba') -> bool:\n    \"\"\"Determine if the given pattern is present in the binary representation of the given number\"\"\"\n    binary = bin(n)\n    return pattern in binary",
        "solution_func": "def g(pattern='aba'):\n    n = int('10101', 2)\n    return n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome (ignoring spaces and case)\"\"\"\n    clean_str = ''.join(s.lower().split())\n    return clean_str == clean_str[::-1]\ndef g():\n    return 'A man a plan a canal Panama'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 78,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome (ignoring spaces and case)\"\"\"\n    clean_str = ''.join(s.lower().split())\n    return clean_str == clean_str[::-1]",
        "solution_func": "def g():\n    return 'A man a plan a canal Panama'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=9, b=16, max_diff=3) -> bool:\n    \"\"\"Find a number that is within a certain range and has a certain difference between its square root and its cube root.\"\"\"\n    return a <= n <= b and abs(math.sqrt(n) - math.pow(n, 1/3)) <= max_diff\ndef g(a=9, b=16, max_diff=3):\n    return a + max_diff\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 78,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=9, b=16, max_diff=3) -> bool:\n    \"\"\"Find a number that is within a certain range and has a certain difference between its square root and its cube root.\"\"\"\n    return a <= n <= b and abs(math.sqrt(n) - math.pow(n, 1/3)) <= max_diff",
        "solution_func": "def g(a=9, b=16, max_diff=3):\n    return a + max_diff",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], threshold=10) -> bool:\n    \"\"\"Find a list of numbers where the sum of all numbers is equal to or greater than a given threshold.\"\"\"\n    return sum(nums) >= threshold\ndef g(threshold=10):\n    return [n for n in range(1, threshold+1)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 78,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], threshold=10) -> bool:\n    \"\"\"Find a list of numbers where the sum of all numbers is equal to or greater than a given threshold.\"\"\"\n    return sum(nums) >= threshold",
        "solution_func": "def g(threshold=10):\n    return [n for n in range(1, threshold+1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(word: str, guess: str) -> bool:\n    \"\"\"Check if a certain letter appears in a word, but not in the correct position.\"\"\"\n    return word != guess and all((word[i] != guess[i] for i in range(len(word)))) and any((guess[i] in word for i in range(len(guess))))\ndef g():\n    word_list = ['apple', 'banana', 'cherry', 'date', 'elderberry']\n    word = random.choice(word_list)\n    guess_list = ['orange', 'grape', 'peach', 'pear', 'kiwi']\n    guess = random.choice(guess_list)\n    return word, guess\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 78,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(word: str, guess: str) -> bool:\n    \"\"\"Check if a certain letter appears in a word, but not in the correct position.\"\"\"\n    return word != guess and all((word[i] != guess[i] for i in range(len(word)))) and any((guess[i] in word for i in range(len(guess))))",
        "solution_func": "def g():\n    word_list = ['apple', 'banana', 'cherry', 'date', 'elderberry']\n    word = random.choice(word_list)\n    guess_list = ['orange', 'grape', 'peach', 'pear', 'kiwi']\n    guess = random.choice(guess_list)\n    return word, guess",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=4, d=2) -> bool:\n    \"\"\"Check if the sum of the digits of a number is divisible by d\"\"\"\n    return sum(int(d) for d in str(n)) % d == 0\ndef g(m=4, d=2):\n    return int('1' * m)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 78,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=4, d=2) -> bool:\n    \"\"\"Check if the sum of the digits of a number is divisible by d\"\"\"\n    return sum(int(d) for d in str(n)) % d == 0",
        "solution_func": "def g(m=4, d=2):\n    return int('1' * m)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(l: List[int], m=5, n=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to m and product is equal to n\"\"\"\n    return any(x + y == m and x * y == n for x in l for y in l)\ndef g(m=5, n=10):\n    return [1, 2, 3, 4]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 78,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(l: List[int], m=5, n=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to m and product is equal to n\"\"\"\n    return any(x + y == m and x * y == n for x in l for y in l)",
        "solution_func": "def g(m=5, n=10):\n    return [1, 2, 3, 4]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc', n=3) -> bool:\n    \"\"\"Check if the substring appears exactly n times in the string\"\"\"\n    return s.count(substr) == n\ndef g(substr='abc', n=3):\n    return substr * n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 78,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr='abc', n=3) -> bool:\n    \"\"\"Check if the substring appears exactly n times in the string\"\"\"\n    return s.count(substr) == n",
        "solution_func": "def g(substr='abc', n=3):\n    return substr * n",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, num_vowels=2, num_consonants=3) -> bool:\n    \"\"\"Check if a string s contains the specified number of vowels and consonants\"\"\"\n    vowels = \"aeiou\"\n    vowel_count = 0\n    consonant_count = 0\n    for char in s:\n        if char.lower() in vowels:\n            vowel_count += 1\n        else:\n            consonant_count += 1\n    return vowel_count == num_vowels and consonant_count == num_consonants\n\ndef g(num_vowels=2, num_consonants=3):\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    vowels_list = [vowels[i%len(vowels)] for i in range(num_vowels)]\n    consonants_list = [consonants[i%len(consonants)] for i in range(num_consonants)]\n    return \"\".join(vowels_list + consonants_list)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 78,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, num_vowels=2, num_consonants=3) -> bool:\n    \"\"\"Check if a string s contains the specified number of vowels and consonants\"\"\"\n    vowels = \"aeiou\"\n    vowel_count = 0\n    consonant_count = 0\n    for char in s:\n        if char.lower() in vowels:\n            vowel_count += 1\n        else:\n            consonant_count += 1\n    return vowel_count == num_vowels and consonant_count == num_consonants",
        "solution_func": "def g(num_vowels=2, num_consonants=3):\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    vowels_list = [vowels[i%len(vowels)] for i in range(num_vowels)]\n    consonants_list = [consonants[i%len(consonants)] for i in range(num_consonants)]\n    return \"\".join(vowels_list + consonants_list)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[3, 6, 9, 12, 15], lower_bound=5) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by n\"\"\"\n    return all((i % n == 0 for i in nums)) and n >= lower_bound\ndef g(nums=[3, 6, 9, 12, 15], lower_bound=5):\n    n = 1\n    for i in nums:\n        n *= i\n    return n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 79,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[3, 6, 9, 12, 15], lower_bound=5) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by n\"\"\"\n    return all((i % n == 0 for i in nums)) and n >= lower_bound",
        "solution_func": "def g(nums=[3, 6, 9, 12, 15], lower_bound=5):\n    n = 1\n    for i in nums:\n        n *= i\n    return n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=12, b=18) -> bool:\n    \"\"\"Check if the sum of the square roots of a and b is equal to n\"\"\"\n    return math.sqrt(a) + math.sqrt(b) == n\ndef g(a=12, b=18):\n    return round(math.sqrt(a) + math.sqrt(b), 2)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 79,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=12, b=18) -> bool:\n    \"\"\"Check if the sum of the square roots of a and b is equal to n\"\"\"\n    return math.sqrt(a) + math.sqrt(b) == n",
        "solution_func": "def g(a=12, b=18):\n    return round(math.sqrt(a) + math.sqrt(b), 2)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if the reversed word is equal to s\"\"\"\n    return word[::-1] == s\ndef g(word='python'):\n    return word[::-1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 79,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if the reversed word is equal to s\"\"\"\n    return word[::-1] == s",
        "solution_func": "def g(word='python'):\n    return word[::-1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=3, m=5) -> bool:\n    \"\"\"Given a string s, determine if there exists a substring of length n that appears exactly m times in s.\"\"\"\n    count = 0\n    for i in range(len(s)-n+1):\n        if s[i:i+n] == s[i+n:i+2*n]:\n            count += 1\n    return count == m\ndef g(n=3, m=5):\n    return \"ab\" * n * m\nassert f(g())\n",
        "emb": null,
        "idx_generation": 79,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3, m=5) -> bool:\n    \"\"\"Given a string s, determine if there exists a substring of length n that appears exactly m times in s.\"\"\"\n    count = 0\n    for i in range(len(s)-n+1):\n        if s[i:i+n] == s[i+n:i+2*n]:\n            count += 1\n    return count == m",
        "solution_func": "def g(n=3, m=5):\n    return \"ab\" * n * m",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix, determine if it has a symmetric diagonal, meaning that the elements on the main diagonal\nand its symmetric diagonal are the same.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 79,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix, determine if it has a symmetric diagonal, meaning that the elements on the main diagonal\nand its symmetric diagonal are the same.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True",
        "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=2) -> bool:\n    \"\"\"Given a list of integers and a value k, determine if there exist two distinct indices i and j such that\nnums[i] + nums[j] is divisible by k.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] + nums[j]) % k == 0:\n                return True\n    return False\ndef g(k=2):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 79,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=2) -> bool:\n    \"\"\"Given a list of integers and a value k, determine if there exist two distinct indices i and j such that\nnums[i] + nums[j] is divisible by k.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] + nums[j]) % k == 0:\n                return True\n    return False",
        "solution_func": "def g(k=2):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if the target number exists in the matrix\"\"\"\n    return any(target in row for row in matrix)\ndef g(target=20):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 79,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if the target number exists in the matrix\"\"\"\n    return any(target in row for row in matrix)",
        "solution_func": "def g(target=20):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums)))\ndef g(target=100):\n    nums = [10, 20, 30, 40, 50]\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 79,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums)))",
        "solution_func": "def g(target=100):\n    nums = [10, 20, 30, 40, 50]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the list\"\"\"\n    return any(nums[i:i+k] == list(range(nums[i], nums[i]+k)) for i in range(len(nums)-k+1))\ndef g(k=3):\n    nums = [1, 2, 3, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "idx_generation": 79,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the list\"\"\"\n    return any(nums[i:i+k] == list(range(nums[i], nums[i]+k)) for i in range(len(nums)-k+1))",
        "solution_func": "def g(k=3):\n    nums = [1, 2, 3, 5, 6, 7, 8, 9, 10]\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=42) -> bool:\n    \"\"\"Given a matrix of integers and a target value, find a row that contains all even numbers and whose sum is equal to the target value.\"\"\"\n    for row in matrix:\n        if all(num % 2 == 0 for num in row) and sum(row) == target:\n            return True\n    return False\n\ndef g(target=42):\n    return [[2, 4, 6, 8], [1, 3, 5, 7], [10, 20, 30, 40]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 79,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=42) -> bool:\n    \"\"\"Given a matrix of integers and a target value, find a row that contains all even numbers and whose sum is equal to the target value.\"\"\"\n    for row in matrix:\n        if all(num % 2 == 0 for num in row) and sum(row) == target:\n            return True\n    return False",
        "solution_func": "def g(target=42):\n    return [[2, 4, 6, 8], [1, 3, 5, 7], [10, 20, 30, 40]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=10, max_numbers=5, options=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find a selection of at most max_numbers numbers whose sum is the target value.\"\"\"\n    for num in numbers:\n        assert num in options\n    return len(numbers) <= max_numbers and sum(numbers) == target\ndef g(target=10, max_numbers=5, options=[1, 2, 3, 4, 5]):\n    from itertools import combinations_with_replacement\n    for n in range(max_numbers + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 80,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=10, max_numbers=5, options=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find a selection of at most max_numbers numbers whose sum is the target value.\"\"\"\n    for num in numbers:\n        assert num in options\n    return len(numbers) <= max_numbers and sum(numbers) == target",
        "solution_func": "def g(target=10, max_numbers=5, options=[1, 2, 3, 4, 5]):\n    from itertools import combinations_with_replacement\n    for n in range(max_numbers + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=6) -> bool:\n    \"\"\"Find a list of words that have a length greater than target_length and contain at least one vowel.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return len(words) > 0 and all((len(w) > target_length and any((v in w for v in vowels)) for w in words))\ndef g(target_length=6):\n    return ['python', 'programming', 'puzzle', 'solution', 'code']\nassert f(g())\n",
        "emb": null,
        "idx_generation": 80,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target_length=6) -> bool:\n    \"\"\"Find a list of words that have a length greater than target_length and contain at least one vowel.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return len(words) > 0 and all((len(w) > target_length and any((v in w for v in vowels)) for w in words))",
        "solution_func": "def g(target_length=6):\n    return ['python', 'programming', 'puzzle', 'solution', 'code']",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]], target_sum=20) -> bool:\n    \"\"\"Find a 2x2 subgrid in the grid whose sum is equal to the target_sum.\"\"\"\n    for row in grid:\n        assert len(row) == len(grid[0])\n    for i in range(len(grid)-1):\n        for j in range(len(grid[0])-1):\n            if sum([grid[i][j], grid[i+1][j], grid[i][j+1], grid[i+1][j+1]]) == target_sum:\n                return True\n    return False\ndef g():\n    return [[4, 2, 6, 8], [1, 5, 3, 7], [9, 2, 4, 6]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 80,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(grid: List[List[int]], target_sum=20) -> bool:\n    \"\"\"Find a 2x2 subgrid in the grid whose sum is equal to the target_sum.\"\"\"\n    for row in grid:\n        assert len(row) == len(grid[0])\n    for i in range(len(grid)-1):\n        for j in range(len(grid[0])-1):\n            if sum([grid[i][j], grid[i+1][j], grid[i][j+1], grid[i+1][j+1]]) == target_sum:\n                return True\n    return False",
        "solution_func": "def g():\n    return [[4, 2, 6, 8], [1, 5, 3, 7], [9, 2, 4, 6]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 8, 4, 5, 9]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 80,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [2, 8, 4, 5, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=0):\n    return [-1, 3, 5, 2, -4, 0]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 80,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=0):\n    return [-1, 3, 5, 2, -4, 0]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Determine if there exists a path in the matrix that sums up to the target value.\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    def dfs(i, j, curr):\n        if i < 0 or i >= m or j < 0 or j >= n:\n            return False\n        curr += matrix[i][j]\n        if curr == target:\n            return True\n        return dfs(i+1, j, curr) or dfs(i, j+1, curr)\n    return dfs(0, 0, 0)\n\ndef g(target=0):\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 80,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Determine if there exists a path in the matrix that sums up to the target value.\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    def dfs(i, j, curr):\n        if i < 0 or i >= m or j < 0 or j >= n:\n            return False\n        curr += matrix[i][j]\n        if curr == target:\n            return True\n        return dfs(i+1, j, curr) or dfs(i, j+1, curr)\n    return dfs(0, 0, 0)",
        "solution_func": "def g(target=0):\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=7, m=3) -> bool:\n    \"\"\"Check if a string can be split into equal parts of length n and m\"\"\"\n    return len(s) % (n + m) == 0 and all(s[i] == s[i + n] for i in range(0, len(s) - n - m + 1, n + m))\ndef g(n=7, m=3):\n    s = 'abcabcabcabcabcabcabcabc'\n    return s\nassert f(g())\n",
        "emb": null,
        "idx_generation": 80,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=7, m=3) -> bool:\n    \"\"\"Check if a string can be split into equal parts of length n and m\"\"\"\n    return len(s) % (n + m) == 0 and all(s[i] == s[i + n] for i in range(0, len(s) - n - m + 1, n + m))",
        "solution_func": "def g(n=7, m=3):\n    s = 'abcabcabcabcabcabcabcabc'\n    return s",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], threshold=100) -> bool:\n    \"\"\"Check if the sum of any three numbers in the list is greater than the threshold\"\"\"\n    from itertools import combinations\n    return any(sum(comb) > threshold for comb in combinations(arr, 3))\ndef g(threshold=100):\n    arr = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return arr\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 80,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(arr: List[int], threshold=100) -> bool:\n    \"\"\"Check if the sum of any three numbers in the list is greater than the threshold\"\"\"\n    from itertools import combinations\n    return any(sum(comb) > threshold for comb in combinations(arr, 3))",
        "solution_func": "def g(threshold=100):\n    arr = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return arr",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Check if there exists a row in the matrix whose sum is equal to the target\"\"\"\n    return any(sum(row) == target for row in matrix)\ndef g(target=100):\n    matrix = [[10, 20, 30], [40, 50, 60], [70, 80, 90], [100, 110, 120]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 80,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Check if there exists a row in the matrix whose sum is equal to the target\"\"\"\n    return any(sum(row) == target for row in matrix)",
        "solution_func": "def g(target=100):\n    matrix = [[10, 20, 30], [40, 50, 60], [70, 80, 90], [100, 110, 120]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, y: int) -> bool:\n    \"\"\"Check if the sum of x and y is divisible by both 3 and 5.\"\"\"\n    return (x + y) % 3 == 0 and (x + y) % 5 == 0\n\ndef g(x: int = 3, y: int = 7):\n    return x + y\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 80,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, y: int) -> bool:\n    \"\"\"Check if the sum of x and y is divisible by both 3 and 5.\"\"\"\n    return (x + y) % 3 == 0 and (x + y) % 5 == 0",
        "solution_func": "def g(x: int = 3, y: int = 7):\n    return x + y",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=17, b=23, c=5) -> bool:\n    \"\"\"Find n that when divided by a and then multiplied by b equals c\"\"\"\n    return (n // a) * b == c\n\ndef g(a=17, b=23, c=5):\n    return math.ceil(c / b) * a\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 81,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=17, b=23, c=5) -> bool:\n    \"\"\"Find n that when divided by a and then multiplied by b equals c\"\"\"\n    return (n // a) * b == c",
        "solution_func": "def g(a=17, b=23, c=5):\n    return math.ceil(c / b) * a",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(n: int, year=2022, month=9, day=15) -> bool:\n    \"\"\"Check if a given date is n days after a specific date\"\"\"\n    target_date = datetime(year, month, day)\n    return (datetime.now() - target_date).days == n\n\ndef g(year=2022, month=9, day=15):\n    current_date = datetime.now()\n    target_date = datetime(year, month, day)\n    return (current_date - target_date).days\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 81,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(n: int, year=2022, month=9, day=15) -> bool:\n    \"\"\"Check if a given date is n days after a specific date\"\"\"\n    target_date = datetime(year, month, day)\n    return (datetime.now() - target_date).days == n",
        "solution_func": "def g(year=2022, month=9, day=15):\n    current_date = datetime.now()\n    target_date = datetime(year, month, day)\n    return (current_date - target_date).days",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a given number is present in a list\"\"\"\n    return n in lst\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return random.choice(lst)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 81,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a given number is present in a list\"\"\"\n    return n in lst",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    return random.choice(lst)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Given a list of integers, find if there exists two distinct indices i and j in the list such that nums[i] = nums[j] and the absolute difference between i and j is at most k.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, min(i+k+1, len(nums))):\n            if nums[i] == nums[j]:\n                return True\n    return False\n\ndef g(k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 81,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Given a list of integers, find if there exists two distinct indices i and j in the list such that nums[i] = nums[j] and the absolute difference between i and j is at most k.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, min(i+k+1, len(nums))):\n            if nums[i] == nums[j]:\n                return True\n    return False",
        "solution_func": "def g(k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Given two strings s and t, determine if they are isomorphic. Two strings are isomorphic if the characters in s can be replaced to get t.\"\"\"\n    if len(s) != len(t):\n        return False\n    char_map = {}\n    for i in range(len(s)):\n        if s[i] in char_map:\n            if char_map[s[i]] != t[i]:\n                return False\n        else:\n            if t[i] in char_map.values():\n                return False\n            char_map[s[i]] = t[i]\n    return True\n\ndef g():\n    return \"egg\", \"add\"\n\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 81,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Given two strings s and t, determine if they are isomorphic. Two strings are isomorphic if the characters in s can be replaced to get t.\"\"\"\n    if len(s) != len(t):\n        return False\n    char_map = {}\n    for i in range(len(s)):\n        if s[i] in char_map:\n            if char_map[s[i]] != t[i]:\n                return False\n        else:\n            if t[i] in char_map.values():\n                return False\n            char_map[s[i]] = t[i]\n    return True",
        "solution_func": "def g():\n    return \"egg\", \"add\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given an array of integers nums and an integer target, determine if a combination of four elements in the array exists such that their sum is equal to target.\"\"\"\n    def k_sum(nums, target, k):\n        if k == 2:\n            return two_sum(nums, target)\n        for i in range(len(nums)):\n            if i == 0 or nums[i] != nums[i-1]:\n                if k_sum(nums[i+1:], target-nums[i], k-1):\n                    return True\n        return False\n\n    def two_sum(nums, target):\n        seen = set()\n        for i in range(len(nums)):\n            if target - nums[i] in seen:\n                return True\n            seen.add(nums[i])\n        return False\n\n    nums.sort()\n    return k_sum(nums, target, 4)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 20\n\nassert f(*g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 81,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given an array of integers nums and an integer target, determine if a combination of four elements in the array exists such that their sum is equal to target.\"\"\"\n    def k_sum(nums, target, k):\n        if k == 2:\n            return two_sum(nums, target)\n        for i in range(len(nums)):\n            if i == 0 or nums[i] != nums[i-1]:\n                if k_sum(nums[i+1:], target-nums[i], k-1):\n                    return True\n        return False\n\n    def two_sum(nums, target):\n        seen = set()\n        for i in range(len(nums)):\n            if target - nums[i] in seen:\n                return True\n            seen.add(nums[i])\n        return False\n\n    nums.sort()\n    return k_sum(nums, target, 4)",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 20",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(res: int, m=123456789, n=5) -> bool:\n    \"\"\"Find the result of applying the following operation to integer m, n times: reverse the digits of m.\"\"\"\n    m = int(str(m)[::-1])\n    return res == m\ndef g(m=123456789, n=5):\n    m = int(str(m)[::-1])\n    return m\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 81,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(res: int, m=123456789, n=5) -> bool:\n    \"\"\"Find the result of applying the following operation to integer m, n times: reverse the digits of m.\"\"\"\n    m = int(str(m)[::-1])\n    return res == m",
        "solution_func": "def g(m=123456789, n=5):\n    m = int(str(m)[::-1])\n    return m",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, m=17, n=4) -> bool:\n    \"\"\"Find the result of applying the following operation to integer m, n times: multiply m by 2 if it is odd,\notherwise divide m by 2.\"\"\"\n    for i in range(n):\n        m = m * 2 if m % 2 else m // 2\n    return result == m\ndef g(m=17, n=4):\n    for i in range(n):\n        m = m * 2 if m % 2 else m // 2\n    return m\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 81,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(result: int, m=17, n=4) -> bool:\n    \"\"\"Find the result of applying the following operation to integer m, n times: multiply m by 2 if it is odd,\notherwise divide m by 2.\"\"\"\n    for i in range(n):\n        m = m * 2 if m % 2 else m // 2\n    return result == m",
        "solution_func": "def g(m=17, n=4):\n    for i in range(n):\n        m = m * 2 if m % 2 else m // 2\n    return m",
        "map_ix": [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(is_palindrome: bool, s='racecar') -> bool:\n    \"\"\"Check if a given string s is a palindrome.\"\"\"\n    return is_palindrome == (s == s[::-1])\ndef g(s='racecar'):\n    return s == s[::-1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 81,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(is_palindrome: bool, s='racecar') -> bool:\n    \"\"\"Check if a given string s is a palindrome.\"\"\"\n    return is_palindrome == (s == s[::-1])",
        "solution_func": "def g(s='racecar'):\n    return s == s[::-1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums=[10, 20, 30, 40, 50]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 81,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(nums=[10, 20, 30, 40, 50]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, num_values=3) -> bool:\n    \"\"\"Find if there exists a combination of num_values numbers in the list nums that sum up to target.\"\"\"\n    import itertools\n    for combination in itertools.combinations(nums, num_values):\n        if sum(combination) == target:\n            return True\n    return False\ndef g(target=100, num_values=3):\n    nums = [10, 20, 30, 40, 50, 60]\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 82,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, num_values=3) -> bool:\n    \"\"\"Find if there exists a combination of num_values numbers in the list nums that sum up to target.\"\"\"\n    import itertools\n    for combination in itertools.combinations(nums, num_values):\n        if sum(combination) == target:\n            return True\n    return False",
        "solution_func": "def g(target=100, num_values=3):\n    nums = [10, 20, 30, 40, 50, 60]\n    return nums",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=50, num_values=2) -> bool:\n    \"\"\"Find if there exists a combination of num_values numbers in the list nums that multiply up to target.\"\"\"\n    import itertools\n    for combination in itertools.combinations(nums, num_values):\n        if combination[0] * combination[1] == target:\n            return True\n    return False\ndef g(target=50, num_values=2):\n    nums = [5, 10, 15, 20]\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 82,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=50, num_values=2) -> bool:\n    \"\"\"Find if there exists a combination of num_values numbers in the list nums that multiply up to target.\"\"\"\n    import itertools\n    for combination in itertools.combinations(nums, num_values):\n        if combination[0] * combination[1] == target:\n            return True\n    return False",
        "solution_func": "def g(target=50, num_values=2):\n    nums = [5, 10, 15, 20]\n    return nums",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Find if it is possible to use the numbers in the list nums, combined with the four basic operations (+, -, *, /),\n    to obtain the target number.\"\"\"\n    import itertools\n    operators = ['+', '-', '*', '/']\n    for combination in itertools.permutations(nums, len(nums)):\n        for op_combination in itertools.product(operators, repeat=len(nums)-1):\n            expression = ''.join([str(num)+op for num, op in zip(combination, op_combination)]) + str(combination[-1])\n            try:\n                if eval(expression) == target:\n                    return True\n            except ZeroDivisionError:\n                pass\n    return False\ndef g(target=24):\n    nums = [4, 6, 3, 8]\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 82,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Find if it is possible to use the numbers in the list nums, combined with the four basic operations (+, -, *, /),\n    to obtain the target number.\"\"\"\n    import itertools\n    operators = ['+', '-', '*', '/']\n    for combination in itertools.permutations(nums, len(nums)):\n        for op_combination in itertools.product(operators, repeat=len(nums)-1):\n            expression = ''.join([str(num)+op for num, op in zip(combination, op_combination)]) + str(combination[-1])\n            try:\n                if eval(expression) == target:\n                    return True\n            except ZeroDivisionError:\n                pass\n    return False",
        "solution_func": "def g(target=24):\n    nums = [4, 6, 3, 8]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find a pair of distinct numbers in the array that sum up to the target\"\"\"\n    return any([arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr))])\ndef g(target=100):\n    return [50, 50]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 82,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find a pair of distinct numbers in the array that sum up to the target\"\"\"\n    return any([arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr))])",
        "solution_func": "def g(target=100):\n    return [50, 50]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Find a square submatrix of size nxn in the given matrix that consists only of zeros\"\"\"\n    return any([all([matrix[i][j] == 0 for j in range(len(matrix[i]))]) for i in range(len(matrix))]) and n <= len(matrix) and n <= len(matrix[0])\ndef g(n=3):\n    return [[0]*n]*n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 82,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Find a square submatrix of size nxn in the given matrix that consists only of zeros\"\"\"\n    return any([all([matrix[i][j] == 0 for j in range(len(matrix[i]))]) for i in range(len(matrix))]) and n <= len(matrix) and n <= len(matrix[0])",
        "solution_func": "def g(n=3):\n    return [[0]*n]*n",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if the given string contains the specified substring\"\"\"\n    return substr in s\ndef g(substr='abc'):\n    return \"def\" + substr + \"ghi\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 82,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if the given string contains the specified substring\"\"\"\n    return substr in s",
        "solution_func": "def g(substr='abc'):\n    return \"def\" + substr + \"ghi\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Find a number in the array that is divisible by n.\"\"\"\n    return any((num % n == 0 for num in arr))\ndef g(arr=[1, 2, 3, 4, 5, 6]):\n    return arr\nassert f(g())\n",
        "emb": null,
        "idx_generation": 82,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Find a number in the array that is divisible by n.\"\"\"\n    return any((num % n == 0 for num in arr))",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5, 6]):\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=2, y=5) -> bool:\n    \"\"\"Find two numbers x and y that satisfy the equation n = x^2 + y^2.\"\"\"\n    return any((math.sqrt(n - num**2).is_integer() for num in range(1, int(math.sqrt(n)) + 1)))\ndef g(x=2, y=5):\n    return x**2 + y**2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 82,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=2, y=5) -> bool:\n    \"\"\"Find two numbers x and y that satisfy the equation n = x^2 + y^2.\"\"\"\n    return any((math.sqrt(n - num**2).is_integer() for num in range(1, int(math.sqrt(n)) + 1)))",
        "solution_func": "def g(x=2, y=5):\n    return x**2 + y**2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='puzzles', count=3) -> bool:\n    \"\"\"Find a substring that appears count times in the given string.\"\"\"\n    return string.count(substring) == count\ndef g(substring='puzzles', count=3):\n    return substring * count\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 82,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='puzzles', count=3) -> bool:\n    \"\"\"Find a substring that appears count times in the given string.\"\"\"\n    return string.count(substring) == count",
        "solution_func": "def g(substring='puzzles', count=3):\n    return substring * count",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Given a list of integers, determine if there exists a subset whose sum is equal to the target_sum.\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if j < arr[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]\n\ndef g(target_sum=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 82,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Given a list of integers, determine if there exists a subset whose sum is equal to the target_sum.\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if j < arr[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]",
        "solution_func": "def g(target_sum=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=3, target=6) -> bool:\n    \"\"\"Check if a string contains a certain number of characters and the sum of their ASCII values is equal to a target value\"\"\"\n    return len(s) >= n and sum(ord(c) for c in s) == target\ndef g(n=3, target=6):\n    return \"abc\" * n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 83,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3, target=6) -> bool:\n    \"\"\"Check if a string contains a certain number of characters and the sum of their ASCII values is equal to a target value\"\"\"\n    return len(s) >= n and sum(ord(c) for c in s) == target",
        "solution_func": "def g(n=3, target=6):\n    return \"abc\" * n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Check if the square root of the sum of a list of numbers is equal to a target value\"\"\"\n    return math.isclose(math.sqrt(sum(nums)), target)\ndef g(target=25):\n    return [3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 83,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Check if the square root of the sum of a list of numbers is equal to a target value\"\"\"\n    return math.isclose(math.sqrt(sum(nums)), target)",
        "solution_func": "def g(target=25):\n    return [3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]], n=4) -> bool:\n    \"\"\"Check if a grid contains a certain number of rows and each row contains a certain number of elements\"\"\"\n    return len(grid) == n and all(len(row) == n for row in grid)\ndef g(n=4):\n    return [[1] * n] * n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 83,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(grid: List[List[int]], n=4) -> bool:\n    \"\"\"Check if a grid contains a certain number of rows and each row contains a certain number of elements\"\"\"\n    return len(grid) == n and all(len(row) == n for row in grid)",
        "solution_func": "def g(n=4):\n    return [[1] * n] * n",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: float, target=0.5) -> bool:\n    \"\"\"Find the natural logarithm (base e) of a given number such that it is close to a given target value.\"\"\"\n    return abs(math.log(num) - target) < 1e-06\n\ndef g(target=0.5):\n    return math.exp(target)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 83,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(num: float, target=0.5) -> bool:\n    \"\"\"Find the natural logarithm (base e) of a given number such that it is close to a given target value.\"\"\"\n    return abs(math.log(num) - target) < 1e-06",
        "solution_func": "def g(target=0.5):\n    return math.exp(target)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport datetime\n\ndef f(dates: List[str], day='Monday') -> bool:\n    \"\"\"Find a date from a given list of dates that falls on a specific day of the week.\"\"\"\n    return any(datetime.datetime.strptime(date, '%Y-%m-%d').weekday() == datetime.datetime.strptime(day, '%A').weekday() for date in dates)\n\ndef g(day='Monday'):\n    today = datetime.date.today()\n    while True:\n        if today.strftime('%A') == day:\n            return today.strftime('%Y-%m-%d')\n        today += datetime.timedelta(days=1)\n        \nassert f(g())\n",
        "emb": null,
        "idx_generation": 83,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(dates: List[str], day='Monday') -> bool:\n    \"\"\"Find a date from a given list of dates that falls on a specific day of the week.\"\"\"\n    return any(datetime.datetime.strptime(date, '%Y-%m-%d').weekday() == datetime.datetime.strptime(day, '%A').weekday() for date in dates)",
        "solution_func": "def g(day='Monday'):\n    today = datetime.date.today()\n    while True:\n        if today.strftime('%A') == day:\n            return today.strftime('%Y-%m-%d')\n        today += datetime.timedelta(days=1)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from a given list such that their sum is equal to a target value.\"\"\"\n    return any((nums[i] + nums[j]) == target for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target=10):\n    return [i for i in range(target//2)]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 83,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from a given list such that their sum is equal to a target value.\"\"\"\n    return any((nums[i] + nums[j]) == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=10):\n    return [i for i in range(target//2)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Check if there exists a square sub-matrix in the given matrix whose sum of elements is equal to the target sum.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            for k in range(i, n):\n                for l in range(j, n):\n                    sub_matrix = [matrix[x][y] for x in range(i, k+1) for y in range(j, l+1)]\n                    if sum(sub_matrix) == target_sum:\n                        return True\n    return False\n\ndef g(target_sum=100):\n    matrix = [[random.randint(1, 10) for _ in range(5)] for _ in range(5)]\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 83,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Check if there exists a square sub-matrix in the given matrix whose sum of elements is equal to the target sum.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            for k in range(i, n):\n                for l in range(j, n):\n                    sub_matrix = [matrix[x][y] for x in range(i, k+1) for y in range(j, l+1)]\n                    if sum(sub_matrix) == target_sum:\n                        return True\n    return False",
        "solution_func": "def g(target_sum=100):\n    matrix = [[random.randint(1, 10) for _ in range(5)] for _ in range(5)]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if the given number is the product of any two distinct prime numbers in the list.\"\"\"\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if primes[i] * primes[j] == num:\n                return True\n    return False\n\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return primes[3] * primes[7]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 83,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if the given number is the product of any two distinct prime numbers in the list.\"\"\"\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if primes[i] * primes[j] == num:\n                return True\n    return False",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return primes[3] * primes[7]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, words=['banana', 'apple', 'orange', 'grape', 'kiwi', 'mango', 'pineapple']) -> bool:\n    \"\"\"Check if the given word is an anagram of any word in the list.\"\"\"\n    sorted_word = ''.join(sorted(word))\n    for w in words:\n        if ''.join(sorted(w)) == sorted_word:\n            return True\n    return False\n\ndef g(words=['banana', 'apple', 'orange', 'grape', 'kiwi', 'mango', 'pineapple']):\n    return ''.join(sorted(words[2]))\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 83,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str, words=['banana', 'apple', 'orange', 'grape', 'kiwi', 'mango', 'pineapple']) -> bool:\n    \"\"\"Check if the given word is an anagram of any word in the list.\"\"\"\n    sorted_word = ''.join(sorted(word))\n    for w in words:\n        if ''.join(sorted(w)) == sorted_word:\n            return True\n    return False",
        "solution_func": "def g(words=['banana', 'apple', 'orange', 'grape', 'kiwi', 'mango', 'pineapple']):\n    return ''.join(sorted(words[2]))",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 83,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Determine if any combination of the given numbers can add up to the target number\"\"\"\n    import itertools\n    for r in range(len(x) + 1):\n        for combination in itertools.combinations(x, r):\n            if sum(combination) == target:\n                return True\n    return False\ndef g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 84,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Determine if any combination of the given numbers can add up to the target number\"\"\"\n    import itertools\n    for r in range(len(x) + 1):\n        for combination in itertools.combinations(x, r):\n            if sum(combination) == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if the given number is a prime number\"\"\"\n    return n in primes\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return 31\nassert f(g())\n",
        "emb": null,
        "idx_generation": 84,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if the given number is a prime number\"\"\"\n    return n in primes",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return 31",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, pattern='ABAB') -> bool:\n    \"\"\"Check if the given string follows the given pattern\"\"\"\n    return ''.join([pattern[i % len(pattern)] for i in range(len(x))]) == x\ndef g(pattern='ABAB'):\n    return 'ABABABAB'\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 84,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, pattern='ABAB') -> bool:\n    \"\"\"Check if the given string follows the given pattern\"\"\"\n    return ''.join([pattern[i % len(pattern)] for i in range(len(x))]) == x",
        "solution_func": "def g(pattern='ABAB'):\n    return 'ABABABAB'",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=34) -> bool:\n    \"\"\"Check if there exists three distinct numbers in the list that sum up to the target value.\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=34):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 84,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=34) -> bool:\n    \"\"\"Check if there exists three distinct numbers in the list that sum up to the target value.\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=34):\n    return [10, 20, 30, 40, 50]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring=\"puzzle\") -> bool:\n    \"\"\"Check if the given string contains the given substring in a case-insensitive manner.\"\"\"\n    return substring.lower() in s.lower()\n\ndef g(substring=\"puzzle\"):\n    return \"This is a programming puzzle.\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 84,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring=\"puzzle\") -> bool:\n    \"\"\"Check if the given string contains the given substring in a case-insensitive manner.\"\"\"\n    return substring.lower() in s.lower()",
        "solution_func": "def g(substring=\"puzzle\"):\n    return \"This is a programming puzzle.\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric along the diagonal.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 84,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric along the diagonal.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True",
        "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(li: List[int], target=10) -> bool:\n    \"\"\"Find a combination of numbers in the list such that their sum equals the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(1, len(li) + 1) for comb in combinations(li, r))\ndef g(target=10):\n    return [1, 2, 3, 4]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 84,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(li: List[int], target=10) -> bool:\n    \"\"\"Find a combination of numbers in the list such that their sum equals the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(1, len(li) + 1) for comb in combinations(li, r))",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find a sequence of numbers in the list such that their product equals the target\"\"\"\n    from itertools import permutations\n    return any(prod(perm) == target for perm in permutations(li))\ndef g(target=100):\n    return [1, 2, 5, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 84,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find a sequence of numbers in the list such that their product equals the target\"\"\"\n    from itertools import permutations\n    return any(prod(perm) == target for perm in permutations(li))",
        "solution_func": "def g(target=100):\n    return [1, 2, 5, 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(li: List[int], target=24) -> bool:\n    \"\"\"Find a combination of numbers in the list such that their sum equals the target\"\"\"\n    from itertools import combinations\n    return any(eval(''.join(str(num) + op for num, op in zip(comb, li[1:]))) == target for r in range(2, len(li) + 1) for comb in combinations(li, r))\ndef g(target=24):\n    return [2, 3, 4, 6]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 84,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(li: List[int], target=24) -> bool:\n    \"\"\"Find a combination of numbers in the list such that their sum equals the target\"\"\"\n    from itertools import combinations\n    return any(eval(''.join(str(num) + op for num, op in zip(comb, li[1:]))) == target for r in range(2, len(li) + 1) for comb in combinations(li, r))",
        "solution_func": "def g(target=24):\n    return [2, 3, 4, 6]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: list, target_sum=10, num_elements=3) -> bool:\n    \"\"\"Find a list of numbers where the sum of a certain number of elements equals a target sum\"\"\"\n    import itertools\n    combinations = list(itertools.combinations(numbers, num_elements))\n    sums = [sum(combination) for combination in combinations]\n    return target_sum in sums\ndef g(target_sum=10, num_elements=3):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 84,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(numbers: list, target_sum=10, num_elements=3) -> bool:\n    \"\"\"Find a list of numbers where the sum of a certain number of elements equals a target sum\"\"\"\n    import itertools\n    combinations = list(itertools.combinations(numbers, num_elements))\n    sums = [sum(combination) for combination in combinations]\n    return target_sum in sums",
        "solution_func": "def g(target_sum=10, num_elements=3):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=17) -> bool:\n    \"\"\"Find three numbers in the given list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=17):\n    return [4, 5, 2, 9, 1, 8]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 85,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=17) -> bool:\n    \"\"\"Find three numbers in the given list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=17):\n    return [4, 5, 2, 9, 1, 8]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if n % prime == 0:\n            return False\n    for i in range(31, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef g():\n    return 37\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 85,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if n % prime == 0:\n            return False\n    for i in range(31, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 37",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, chars=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']) -> bool:\n    \"\"\"Check if all characters in the given string are in the list of characters.\"\"\"\n    for char in s:\n        if char not in chars:\n            return False\n    return True\ndef g():\n    return \"abcdefghij\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 85,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, chars=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']) -> bool:\n    \"\"\"Check if all characters in the given string are in the list of characters.\"\"\"\n    for char in s:\n        if char not in chars:\n            return False\n    return True",
        "solution_func": "def g():\n    return \"abcdefghij\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if n is a prime number.\"\"\"\n    return n in primes\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    for i in range(2, primes[-1]):\n        if all(i % prime != 0 for prime in primes):\n            primes.append(i)\n    return primes\nassert f(g())\n",
        "emb": null,
        "idx_generation": 85,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if n is a prime number.\"\"\"\n    return n in primes",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    for i in range(2, primes[-1]):\n        if all(i % prime != 0 for prime in primes):\n            primes.append(i)\n    return primes",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(ls: List[int], target_sum=10) -> bool:\n    \"\"\"Find two elements in the list whose sum is equal to the target_sum.\"\"\"\n    for i in range(len(ls)):\n        for j in range(i+1, len(ls)):\n            if ls[i] + ls[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 85,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(ls: List[int], target_sum=10) -> bool:\n    \"\"\"Find two elements in the list whose sum is equal to the target_sum.\"\"\"\n    for i in range(len(ls)):\n        for j in range(i+1, len(ls)):\n            if ls[i] + ls[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(ls: List[str], target_char='a') -> bool:\n    \"\"\"Check if all strings in the list contain the target_char.\"\"\"\n    return all(target_char in s for s in ls)\ndef g(target_char='a'):\n    return ['apple', 'banana', 'cherry']\nassert f(g())\n",
        "emb": null,
        "idx_generation": 85,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(ls: List[str], target_char='a') -> bool:\n    \"\"\"Check if all strings in the list contain the target_char.\"\"\"\n    return all(target_char in s for s in ls)",
        "solution_func": "def g(target_char='a'):\n    return ['apple', 'banana', 'cherry']",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(pairs: List[Tuple[int, int]], target_sum=17) -> bool:\n    \"\"\"Given a list of pairs of integers, find a pair whose sum is equal to the target_sum.\"\"\"\n    assert any((x + y == target_sum for (x, y) in pairs))\n    return True\ndef g(target_sum=17):\n    pairs = [(1, 2), (3, 4), (5, 6), (7, 8)]\n    return pairs\nassert f(g())\n",
        "emb": null,
        "idx_generation": 85,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(pairs: List[Tuple[int, int]], target_sum=17) -> bool:\n    \"\"\"Given a list of pairs of integers, find a pair whose sum is equal to the target_sum.\"\"\"\n    assert any((x + y == target_sum for (x, y) in pairs))\n    return True",
        "solution_func": "def g(target_sum=17):\n    pairs = [(1, 2), (3, 4), (5, 6), (7, 8)]\n    return pairs",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_product=100) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers whose product is equal to the target_product.\"\"\"\n    assert any((x * y == target_product for x in numbers for y in numbers if x != y))\n    return True\ndef g(target_product=100):\n    numbers = [2, 4, 5, 10]\n    return numbers\nassert f(g())\n",
        "emb": null,
        "idx_generation": 85,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target_product=100) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers whose product is equal to the target_product.\"\"\"\n    assert any((x * y == target_product for x in numbers for y in numbers if x != y))\n    return True",
        "solution_func": "def g(target_product=100):\n    numbers = [2, 4, 5, 10]\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_row=1, target_col=2) -> bool:\n    \"\"\"Given a matrix, find a cell whose row and column indices are equal to the target_row and target_col, respectively.\"\"\"\n    assert matrix[target_row][target_col] == 1\n    return True\ndef g(target_row=1, target_col=2):\n    matrix = [[0, 0, 0], [0, 1, 0], [0, 0, 0]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 85,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_row=1, target_col=2) -> bool:\n    \"\"\"Given a matrix, find a cell whose row and column indices are equal to the target_row and target_col, respectively.\"\"\"\n    assert matrix[target_row][target_col] == 1\n    return True",
        "solution_func": "def g(target_row=1, target_col=2):\n    matrix = [[0, 0, 0], [0, 1, 0], [0, 0, 0]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target value\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[:2]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 85,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target value\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[:2]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: int, a=987654321) -> bool:\n    \"\"\"Find the largest perfect square that is less than a.\"\"\"\n    return x ** 2 < a and (x + 1) ** 2 > a\ndef g(a=987654321):\n    return int(sqrt(a)) - 1\nassert f(g())\n",
        "emb": null,
        "idx_generation": 86,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: int, a=987654321) -> bool:\n    \"\"\"Find the largest perfect square that is less than a.\"\"\"\n    return x ** 2 < a and (x + 1) ** 2 > a",
        "solution_func": "def g(a=987654321):\n    return int(sqrt(a)) - 1",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: str, y: int, z: int, string=\"Hello, World!\") -> bool:\n    \"\"\"Check if a given string contains the same number of characters as y and z combined.\"\"\"\n    return len(x) == y + z\ndef g(y: int, z: int, string=\"Hello, World!\"):\n    return string[:y] + string[-z:]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 86,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, y: int, z: int, string=\"Hello, World!\") -> bool:\n    \"\"\"Check if a given string contains the same number of characters as y and z combined.\"\"\"\n    return len(x) == y + z",
        "solution_func": "def g(y: int, z: int, string=\"Hello, World!\"):\n    return string[:y] + string[-z:]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(x: str, y: str, strings=[\"cat\", \"dog\", \"bird\", \"fish\"]) -> bool:\n    \"\"\"Check if there exists a permutation of strings that starts with x and ends with y.\"\"\"\n    for perm in permutations(strings):\n        if perm[0] == x and perm[-1] == y:\n            return True\n    return False\ndef g(strings=[\"cat\", \"dog\", \"bird\", \"fish\"]):\n    return strings\nassert f(g())\n",
        "emb": null,
        "idx_generation": 86,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(x: str, y: str, strings=[\"cat\", \"dog\", \"bird\", \"fish\"]) -> bool:\n    \"\"\"Check if there exists a permutation of strings that starts with x and ends with y.\"\"\"\n    for perm in permutations(strings):\n        if perm[0] == x and perm[-1] == y:\n            return True\n    return False",
        "solution_func": "def g(strings=[\"cat\", \"dog\", \"bird\", \"fish\"]):\n    return strings",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, k: int, target: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Find k numbers in nums that add up to the target value\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, k):\n        if sum(combo) == target:\n            return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], k=3, target=15):\n    return k, target\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 86,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, k: int, target: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Find k numbers in nums that add up to the target value\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, k):\n        if sum(combo) == target:\n            return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], k=3, target=15):\n    return k, target",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t: str, sub: str) -> bool:\n    \"\"\"Check if it is possible to obtain string t by replacing a substring in string s with string sub\"\"\"\n    return t in s.replace(sub, '')\ndef g(s='abcdefg', t='cdef', sub='ab'):\n    return s, t, sub\nassert f(*g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 86,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, t: str, sub: str) -> bool:\n    \"\"\"Check if it is possible to obtain string t by replacing a substring in string s with string sub\"\"\"\n    return t in s.replace(sub, '')",
        "solution_func": "def g(s='abcdefg', t='cdef', sub='ab'):\n    return s, t, sub",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], k: int, target: int) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the list that add up to the target value\"\"\"\n    for i in range(len(nums) - k + 1):\n        if sum(nums[i:i+k]) == target:\n            return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], k=4, target=20):\n    return nums, k, target\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 86,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k: int, target: int) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the list that add up to the target value\"\"\"\n    for i in range(len(nums) - k + 1):\n        if sum(nums[i:i+k]) == target:\n            return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], k=4, target=20):\n    return nums, k, target",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=987654321, b=-123456789) -> bool:\n    \"\"\"Solve a division problem\"\"\"\n    return a / n == b\ndef g(a=987654321, b=-123456789):\n    return a / b\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 86,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=987654321, b=-123456789) -> bool:\n    \"\"\"Solve a division problem\"\"\"\n    return a / n == b",
        "solution_func": "def g(a=987654321, b=-123456789):\n    return a / b",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=3) -> bool:\n    \"\"\"Check if the string has a length greater than n\"\"\"\n    return len(string) > n\ndef g(n=3):\n    return \"Hello World!\"\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 86,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, n=3) -> bool:\n    \"\"\"Check if the string has a length greater than n\"\"\"\n    return len(string) > n",
        "solution_func": "def g(n=3):\n    return \"Hello World!\"",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 86,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20, k=3) -> bool:\n    \"\"\"Find if there are k numbers in nums that sum up to target.\"\"\"\n    def find_combinations(nums, target, k, current_sum, start):\n        if k == 0 and current_sum == target:\n            return True\n        if k < 0 or current_sum > target:\n            return False\n        for i in range(start, len(nums)):\n            if find_combinations(nums, target, k-1, current_sum+nums[i], i+1):\n                return True\n        return False\n    \n    return find_combinations(nums, target, k, 0, 0)\n\ndef g(target=20, k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 86,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20, k=3) -> bool:\n    \"\"\"Find if there are k numbers in nums that sum up to target.\"\"\"\n    def find_combinations(nums, target, k, current_sum, start):\n        if k == 0 and current_sum == target:\n            return True\n        if k < 0 or current_sum > target:\n            return False\n        for i in range(start, len(nums)):\n            if find_combinations(nums, target, k-1, current_sum+nums[i], i+1):\n                return True\n        return False\n    \n    return find_combinations(nums, target, k, 0, 0)",
        "solution_func": "def g(target=20, k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello world') -> bool:\n    \"\"\"Check if the given string is equal to the target string\"\"\"\n    return s == target\ndef g(target='hello world'):\n    return target\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 87,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='hello world') -> bool:\n    \"\"\"Check if the given string is equal to the target string\"\"\"\n    return s == target",
        "solution_func": "def g(target='hello world'):\n    return target",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target number\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=100):\n    return [1, 2, 3, 4, 5, 95]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 87,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target number\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=100):\n    return [1, 2, 3, 4, 5, 95]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if the sum of any row or column in the matrix is equal to the target number\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    for col in zip(*matrix):\n        if sum(col) == target:\n            return True\n    return False\ndef g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 87,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if the sum of any row or column in the matrix is equal to the target number\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    for col in zip(*matrix):\n        if sum(col) == target:\n            return True\n    return False",
        "solution_func": "def g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['hello', 'world', 'python']) -> bool:\n    \"\"\"Find a string that contains each string in substrings in the reverse order, e.g., 'dlrowollehnohtyp' for 'hello', 'world', and 'python'\"\"\"\n    return all((sub[::-1] in s for sub in substrings))\ndef g(substrings=['hello', 'world', 'python']):\n    return ''.join([sub[::-1] for sub in substrings])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 87,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substrings=['hello', 'world', 'python']) -> bool:\n    \"\"\"Find a string that contains each string in substrings in the reverse order, e.g., 'dlrowollehnohtyp' for 'hello', 'world', and 'python'\"\"\"\n    return all((sub[::-1] in s for sub in substrings))",
        "solution_func": "def g(substrings=['hello', 'world', 'python']):\n    return ''.join([sub[::-1] for sub in substrings])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target number.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 87,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target number.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Find a string that contains each string in substrings in alphabetical order, e.g., 'applebananacherry' for 'apple', 'banana', and 'cherry'\"\"\"\n    return all((''.join(sorted(sub)) in ''.join(sorted(s)) for sub in substrings))\ndef g(substrings=['apple', 'banana', 'cherry']):\n    return ''.join(substrings)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 87,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Find a string that contains each string in substrings in alphabetical order, e.g., 'applebananacherry' for 'apple', 'banana', and 'cherry'\"\"\"\n    return all((''.join(sorted(sub)) in ''.join(sorted(s)) for sub in substrings))",
        "solution_func": "def g(substrings=['apple', 'banana', 'cherry']):\n    return ''.join(substrings)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(num: int, lst: List[int], target=175) -> bool:\n    \"\"\"Check if the sum of two elements in the list equals the target number\"\"\"\n    return any((num - x in lst for x in lst))\ndef g(lst: List[int], target=175):\n    return lst, target\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 87,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int, lst: List[int], target=175) -> bool:\n    \"\"\"Check if the sum of two elements in the list equals the target number\"\"\"\n    return any((num - x in lst for x in lst))",
        "solution_func": "def g(lst: List[int], target=175):\n    return lst, target",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=10, n=3) -> bool:\n    \"\"\"Check if there are n elements in the list that add up to the target number\"\"\"\n    from itertools import combinations\n    return any((sum(comb) == target for comb in combinations(lst, n)))\ndef g(target=10, n=3):\n    return [2, 4, 6, 8, 10, 12], target, n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 87,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=10, n=3) -> bool:\n    \"\"\"Check if there are n elements in the list that add up to the target number\"\"\"\n    from itertools import combinations\n    return any((sum(comb) == target for comb in combinations(lst, n)))",
        "solution_func": "def g(target=10, n=3):\n    return [2, 4, 6, 8, 10, 12], target, n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=50) -> bool:\n    \"\"\"Check if there are three elements in the list that multiply to give the target number\"\"\"\n    from itertools import combinations\n    return any((a * b * c == target for a, b, c in combinations(lst, 3)))\ndef g(target=50):\n    return [2, 5, 10, 8, 6, 4], target\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 87,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=50) -> bool:\n    \"\"\"Check if there are three elements in the list that multiply to give the target number\"\"\"\n    from itertools import combinations\n    return any((a * b * c == target for a, b, c in combinations(lst, 3)))",
        "solution_func": "def g(target=50):\n    return [2, 5, 10, 8, 6, 4], target",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Given a string, return True if the string contains at least n consecutive vowels (a, e, i, o, u), and False otherwise.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    max_count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 0\n    return max_count >= n\ndef g(n=5):\n    s = \"aeiou\" * (n-1) + \"b\"\n    return s\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 87,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Given a string, return True if the string contains at least n consecutive vowels (a, e, i, o, u), and False otherwise.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    max_count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 0\n    return max_count >= n",
        "solution_func": "def g(n=5):\n    s = \"aeiou\" * (n-1) + \"b\"\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Check if the given date matches the format.\"\"\"\n    try:\n        datetime.strptime(date, format)\n        return True\n    except ValueError:\n        return False\n\ndef g(format='%Y-%m-%d'):\n    return datetime.now().strftime(format)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 88,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Check if the given date matches the format.\"\"\"\n    try:\n        datetime.strptime(date, format)\n        return True\n    except ValueError:\n        return False",
        "solution_func": "def g(format='%Y-%m-%d'):\n    return datetime.now().strftime(format)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if the sum of the given numbers is equal to the target sum.\"\"\"\n    return sum(numbers) == target_sum\n\ndef g(target_sum=100):\n    numbers = [random.randint(1, 10) for _ in range(10)]\n    return numbers\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 88,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if the sum of the given numbers is equal to the target sum.\"\"\"\n    return sum(numbers) == target_sum",
        "solution_func": "def g(target_sum=100):\n    numbers = [random.randint(1, 10) for _ in range(10)]\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, target_area=50) -> bool:\n    \"\"\"Check if the area of a circle with the given radius is equal to the target area.\"\"\"\n    area = math.pi * radius ** 2\n    return area == target_area\n\ndef g(target_area=50):\n    radius = math.sqrt(target_area / math.pi)\n    return radius\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 88,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(radius: float, target_area=50) -> bool:\n    \"\"\"Check if the area of a circle with the given radius is equal to the target area.\"\"\"\n    area = math.pi * radius ** 2\n    return area == target_area",
        "solution_func": "def g(target_area=50):\n    radius = math.sqrt(target_area / math.pi)\n    return radius",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=5, y=10) -> bool:\n    \"\"\"Find the smallest integer n such that x^n is greater than y! (y factorial)\"\"\"\n    return math.pow(x, n) > math.factorial(y)\n\ndef g(x=5, y=10):\n    n = 0\n    while math.pow(x, n) <= math.factorial(y):\n        n += 1\n    return n\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 88,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=5, y=10) -> bool:\n    \"\"\"Find the smallest integer n such that x^n is greater than y! (y factorial)\"\"\"\n    return math.pow(x, n) > math.factorial(y)",
        "solution_func": "def g(x=5, y=10):\n    n = 0\n    while math.pow(x, n) <= math.factorial(y):\n        n += 1\n    return n",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, chars='aeiou') -> bool:\n    \"\"\"Check if the given string contains all vowels (a, e, i, o, u)\"\"\"\n    for char in chars:\n        if char not in s:\n            return False\n    return True\n\ndef g(chars='aeiou'):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = ''\n    for vowel in vowels:\n        if vowel in chars:\n            s += vowel\n    return s\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 88,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, chars='aeiou') -> bool:\n    \"\"\"Check if the given string contains all vowels (a, e, i, o, u)\"\"\"\n    for char in chars:\n        if char not in s:\n            return False\n    return True",
        "solution_func": "def g(chars='aeiou'):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = ''\n    for vowel in vowels:\n        if vowel in chars:\n            s += vowel\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=5) -> bool:\n    \"\"\"Check if the sum of the first n terms of the arithmetic sequence with first term a and common difference b is divisible by n\"\"\"\n    return (n / 2) * (2 * a + (n - 1) * b) % n == 0\n\ndef g(a=2, b=5):\n    n = 1\n    while True:\n        sum_terms = ((n / 2) * (2 * a + (n - 1) * b))\n        if sum_terms % n == 0:\n            break\n        n += 1\n    return n\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 88,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=2, b=5) -> bool:\n    \"\"\"Check if the sum of the first n terms of the arithmetic sequence with first term a and common difference b is divisible by n\"\"\"\n    return (n / 2) * (2 * a + (n - 1) * b) % n == 0",
        "solution_func": "def g(a=2, b=5):\n    n = 1\n    while True:\n        sum_terms = ((n / 2) * (2 * a + (n - 1) * b))\n        if sum_terms % n == 0:\n            break\n        n += 1\n    return n",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=7) -> bool:\n    \"\"\"Check if n is divisible by the sum of a and b\"\"\"\n    return n % (a + b) == 0\ndef g(a=3, b=7):\n    return (a + b) * 5\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 88,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=7) -> bool:\n    \"\"\"Check if n is divisible by the sum of a and b\"\"\"\n    return n % (a + b) == 0",
        "solution_func": "def g(a=3, b=7):\n    return (a + b) * 5",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(word: str, a='apple', b='banana') -> bool:\n    \"\"\"Check if a given word is a substring of b\"\"\"\n    return word in b\ndef g(a='apple', b='banana'):\n    return a\nassert f(g())\n",
        "emb": null,
        "idx_generation": 88,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str, a='apple', b='banana') -> bool:\n    \"\"\"Check if a given word is a substring of b\"\"\"\n    return word in b",
        "solution_func": "def g(a='apple', b='banana'):\n    return a",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], a=5, b=10) -> bool:\n    \"\"\"Check if the sum of the numbers in the list is between a and b (inclusive)\"\"\"\n    return a <= sum(nums) <= b\ndef g(a=5, b=10):\n    return [1, 2, 3, 4]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 88,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], a=5, b=10) -> bool:\n    \"\"\"Check if the sum of the numbers in the list is between a and b (inclusive)\"\"\"\n    return a <= sum(nums) <= b",
        "solution_func": "def g(a=5, b=10):\n    return [1, 2, 3, 4]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, m=4) -> bool:\n    \"\"\"Check if a string contains a specific pattern.\"\"\"\n    pattern = 'abc' * n\n    return pattern in s or pattern[::-1] in s\ndef g(n=3, m=4):\n    return 'abc' * m\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 88,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3, m=4) -> bool:\n    \"\"\"Check if a string contains a specific pattern.\"\"\"\n    pattern = 'abc' * n\n    return pattern in s or pattern[::-1] in s",
        "solution_func": "def g(n=3, m=4):\n    return 'abc' * m",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the matrix whose sum is equal to the target\"\"\"\n    for row in matrix:\n        assert len(row) == len(matrix[0])\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            for k in range(i+1, len(matrix)):\n                for l in range(len(matrix[0])):\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return True\n    return False\ndef g(target=100):\n    return [\n        [10, 20, 30],\n        [40, 50, 60],\n        [70, 80, 90]\n    ]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 89,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the matrix whose sum is equal to the target\"\"\"\n    for row in matrix:\n        assert len(row) == len(matrix[0])\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            for k in range(i+1, len(matrix)):\n                for l in range(len(matrix[0])):\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return True\n    return False",
        "solution_func": "def g(target=100):\n    return [\n        [10, 20, 30],\n        [40, 50, 60],\n        [70, 80, 90]\n    ]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers in the list whose difference is equal to the target\"\"\"\n    return any(abs(nums[i] - nums[j]) == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 89,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers in the list whose difference is equal to the target\"\"\"\n    return any(abs(nums[i] - nums[j]) == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=5, char='a') -> bool:\n    \"\"\"Check if character 'char' appears exactly 'n' times in the string 's'\"\"\"\n    return s.count(char) == n\ndef g(n=5, char='a'):\n    return 'abcdaa'\nassert f(g())\n",
        "emb": null,
        "idx_generation": 89,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=5, char='a') -> bool:\n    \"\"\"Check if character 'char' appears exactly 'n' times in the string 's'\"\"\"\n    return s.count(char) == n",
        "solution_func": "def g(n=5, char='a'):\n    return 'abcdaa'",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find a pair of numbers in the list that sums up to the target value\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=20):\n    return [10, 5, 3, 7, 2]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 89,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find a pair of numbers in the list that sums up to the target value\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=20):\n    return [10, 5, 3, 7, 2]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], suffix='ing') -> bool:\n    \"\"\"Check if any word in the list ends with the given suffix\"\"\"\n    return any(word.endswith(suffix) for word in words)\ndef g(suffix='ing'):\n    return ['running', 'swimming', 'jumping', 'climbing']\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 89,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], suffix='ing') -> bool:\n    \"\"\"Check if any word in the list ends with the given suffix\"\"\"\n    return any(word.endswith(suffix) for word in words)",
        "solution_func": "def g(suffix='ing'):\n    return ['running', 'swimming', 'jumping', 'climbing']",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if the sum of any row or column in the matrix is equal to the target value\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    row_sum = [sum(row) for row in matrix]\n    col_sum = [sum(matrix[i][j] for i in range(rows)) for j in range(cols)]\n    return target in row_sum or target in col_sum\ndef g(target=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 89,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if the sum of any row or column in the matrix is equal to the target value\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    row_sum = [sum(row) for row in matrix]\n    col_sum = [sum(matrix[i][j] for i in range(rows)) for j in range(cols)]\n    return target in row_sum or target in col_sum",
        "solution_func": "def g(target=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, row_sum=15, col_sum=10) -> bool:\n    \"\"\"Check if the sum of each row and each column of a matrix is equal to the given values.\"\"\"\n    row_sums = np.sum(matrix, axis=1)\n    col_sums = np.sum(matrix, axis=0)\n    \n    return np.all(row_sums == row_sum) and np.all(col_sums == col_sum)\n\ndef g(row_sum=15, col_sum=10):\n    matrix = np.ones((3, 4))\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 89,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, row_sum=15, col_sum=10) -> bool:\n    \"\"\"Check if the sum of each row and each column of a matrix is equal to the given values.\"\"\"\n    row_sums = np.sum(matrix, axis=1)\n    col_sums = np.sum(matrix, axis=0)\n    \n    return np.all(row_sums == row_sum) and np.all(col_sums == col_sum)",
        "solution_func": "def g(row_sum=15, col_sum=10):\n    matrix = np.ones((3, 4))\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(num_list: list, target_sum=100) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that sums up to the target_sum.\"\"\"\n    from itertools import combinations\n    \n    for r in range(1, len(num_list) + 1):\n        for combination in combinations(num_list, r):\n            if sum(combination) == target_sum:\n                return True\n    return False\n\ndef g(target_sum=100):\n    return [10, 20, 30, 40]\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 89,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(num_list: list, target_sum=100) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that sums up to the target_sum.\"\"\"\n    from itertools import combinations\n    \n    for r in range(1, len(num_list) + 1):\n        for combination in combinations(num_list, r):\n            if sum(combination) == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=100):\n    return [10, 20, 30, 40]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(email: str, domain='gmail.com') -> bool:\n    \"\"\"Check if the email address is from the specified domain.\"\"\"\n    pattern = r'[^@]+@' + re.escape(domain) + r'$'\n    return re.match(pattern, email) is not None\n\ndef g(domain='gmail.com'):\n    return 'example@gmail.com'\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 89,
        "target_skills": null,
        "problem_func": "from typing import*\nimport re\n\ndef f(email: str, domain='gmail.com') -> bool:\n    \"\"\"Check if the email address is from the specified domain.\"\"\"\n    pattern = r'[^@]+@' + re.escape(domain) + r'$'\n    return re.match(pattern, email) is not None",
        "solution_func": "def g(domain='gmail.com'):\n    return 'example@gmail.com'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find a row in the matrix whose sum is equal to the target\"\"\"\n    return any((sum(row) == target for row in matrix))\ndef g(matrix: List[List[int]], target=100):\n    return next((row for row in matrix if sum(row) == target), [])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 89,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find a row in the matrix whose sum is equal to the target\"\"\"\n    return any((sum(row) == target for row in matrix))",
        "solution_func": "def g(matrix: List[List[int]], target=100):\n    return next((row for row in matrix if sum(row) == target), [])",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=\"hello world\") -> bool:\n    \"\"\"Check if a given string is equal to the default target string\"\"\"\n    return s == target\ndef g(target=\"hello world\"):\n    return target\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 90,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=\"hello world\") -> bool:\n    \"\"\"Check if a given string is equal to the default target string\"\"\"\n    return s == target",
        "solution_func": "def g(target=\"hello world\"):\n    return target",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, n=3, m=7) -> bool:\n    \"\"\"Check if x is a multiple of n and m\"\"\"\n    return x % n == 0 and x % m == 0\ndef g(n=3, m=7):\n    return n * m\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 90,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, n=3, m=7) -> bool:\n    \"\"\"Check if x is a multiple of n and m\"\"\"\n    return x % n == 0 and x % m == 0",
        "solution_func": "def g(n=3, m=7):\n    return n * m",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: list, target=10) -> bool:\n    \"\"\"Check if any two numbers in the list sum up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 90,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: list, target=10) -> bool:\n    \"\"\"Check if any two numbers in the list sum up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[3, 9, 12, 18], upper_bound=100) -> bool:\n    \"\"\"Determine if a number n can be expressed as the sum of two numbers in a list of integers.\"\"\"\n    return any(((n - i) in nums for i in nums)) and 0 < n <= upper_bound\ndef g(nums=[3, 9, 12, 18], upper_bound=100):\n    return nums[0] + nums[1]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 90,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[3, 9, 12, 18], upper_bound=100) -> bool:\n    \"\"\"Determine if a number n can be expressed as the sum of two numbers in a list of integers.\"\"\"\n    return any(((n - i) in nums for i in nums)) and 0 < n <= upper_bound",
        "solution_func": "def g(nums=[3, 9, 12, 18], upper_bound=100):\n    return nums[0] + nums[1]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['python', 'programming']) -> bool:\n    \"\"\"Determine if a string s contains all substrings as consecutive non-overlapping subsequences.\"\"\"\n    return all((sub in s for sub in substrings)) and len(set(substrings)) == len(substrings)\ndef g(substrings=['python', 'programming']):\n    return ''.join(substrings)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 90,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substrings=['python', 'programming']) -> bool:\n    \"\"\"Determine if a string s contains all substrings as consecutive non-overlapping subsequences.\"\"\"\n    return all((sub in s for sub in substrings)) and len(set(substrings)) == len(substrings)",
        "solution_func": "def g(substrings=['python', 'programming']):\n    return ''.join(substrings)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(p: List[int], edges=[[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]]) -> bool:\n    \"\"\"Determine if the given list of vertices represents a path that traverses all edges in the graph.\"\"\"\n    return len(p) == len(edges) + 1 and all((sorted([p[i], p[i+1]]) in edges for i in range(len(p)-1)))\ndef g(edges=[[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]]):\n    return [i for edge in edges for i in edge] + [edges[-1][1]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 90,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(p: List[int], edges=[[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]]) -> bool:\n    \"\"\"Determine if the given list of vertices represents a path that traverses all edges in the graph.\"\"\"\n    return len(p) == len(edges) + 1 and all((sorted([p[i], p[i+1]]) in edges for i in range(len(p)-1)))",
        "solution_func": "def g(edges=[[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]]):\n    return [i for edge in edges for i in edge] + [edges[-1][1]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the given list that add up to the target number.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 90,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the given list that add up to the target number.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='py', suffix='on') -> bool:\n    \"\"\"Check if there is a word in the list that starts with the given prefix and ends with the given suffix.\"\"\"\n    return any(word.startswith(prefix) and word.endswith(suffix) for word in words)\ndef g(prefix='py', suffix='on'):\n    return ['python', 'pycharm', 'jupyter', 'programming', 'coding']\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 90,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], prefix='py', suffix='on') -> bool:\n    \"\"\"Check if there is a word in the list that starts with the given prefix and ends with the given suffix.\"\"\"\n    return any(word.startswith(prefix) and word.endswith(suffix) for word in words)",
        "solution_func": "def g(prefix='py', suffix='on'):\n    return ['python', 'pycharm', 'jupyter', 'programming', 'coding']",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a pair of numbers in the given matrix that add up to the target number.\"\"\"\n    return any(matrix[i][j] + matrix[k][l] == target for i in range(len(matrix)) for j in range(len(matrix[i])) for k in range(len(matrix)) for l in range(len(matrix[k])) if (i, j) != (k, l))\ndef g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 90,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a pair of numbers in the given matrix that add up to the target number.\"\"\"\n    return any(matrix[i][j] + matrix[k][l] == target for i in range(len(matrix)) for j in range(len(matrix[i])) for k in range(len(matrix)) for l in range(len(matrix[k])) if (i, j) != (k, l))",
        "solution_func": "def g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find two numbers in a list that add up to a target number.\nThe solution should be a tuple with the two numbers.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return (nums[i], nums[j])\n    return False\ndef g(nums=[10, 25, 30, 45, 50, 55, 60, 75, 80, 85, 90, 95]):\n    return (nums[0], nums[-1])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 90,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find two numbers in a list that add up to a target number.\nThe solution should be a tuple with the two numbers.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return (nums[i], nums[j])\n    return False",
        "solution_func": "def g(nums=[10, 25, 30, 45, 50, 55, 60, 75, 80, 85, 90, 95]):\n    return (nums[0], nums[-1])",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if it is possible to select n numbers from the list\n    such that their sum is equal to the target number\"\"\"\n    combinations = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                combinations.append((nums[i], nums[j]))\n    if len(combinations) < n:\n        return False\n    else:\n        return True\n\ndef g(nums=[1, 2, 3, 4, 5], target=10):\n    possible_combinations = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                possible_combinations.append((nums[i], nums[j]))\n    if len(possible_combinations) < n:\n        return random.choice(possible_combinations)\n    else:\n        return random.choices(possible_combinations, k=n)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 91,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if it is possible to select n numbers from the list\n    such that their sum is equal to the target number\"\"\"\n    combinations = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                combinations.append((nums[i], nums[j]))\n    if len(combinations) < n:\n        return False\n    else:\n        return True",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=10):\n    possible_combinations = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                possible_combinations.append((nums[i], nums[j]))\n    if len(possible_combinations) < n:\n        return random.choice(possible_combinations)\n    else:\n        return random.choices(possible_combinations, k=n)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\nimport math\n\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Given a list of integers, determine if it is possible to select n numbers from the list\n    such that their product is a perfect square\"\"\"\n    product = math.prod(nums[:n])\n    if math.isqrt(product)**2 == product:\n        return True\n    else:\n        return False\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    perfect_squares = []\n    for num in nums:\n        if math.isqrt(num)**2 == num:\n            perfect_squares.append(num)\n    return random.choices(perfect_squares, k=n)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 91,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\nimport math\n\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Given a list of integers, determine if it is possible to select n numbers from the list\n    such that their product is a perfect square\"\"\"\n    product = math.prod(nums[:n])\n    if math.isqrt(product)**2 == product:\n        return True\n    else:\n        return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    perfect_squares = []\n    for num in nums:\n        if math.isqrt(num)**2 == num:\n            perfect_squares.append(num)\n    return random.choices(perfect_squares, k=n)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, word=\"python\") -> bool:\n    \"\"\"Given a word and an integer n, determine if there are at least n number of vowels in the word\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    for char in word:\n        if char.lower() in vowels:\n            vowel_count += 1\n    if vowel_count >= n:\n        return True\n    else:\n        return False\n\ndef g(word=\"python\"):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    random_word = \"\"\n    for _ in range(len(word)):\n        random_word += random.choice(vowels)\n    return random_word\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 91,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(n: int, word=\"python\") -> bool:\n    \"\"\"Given a word and an integer n, determine if there are at least n number of vowels in the word\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    for char in word:\n        if char.lower() in vowels:\n            vowel_count += 1\n    if vowel_count >= n:\n        return True\n    else:\n        return False",
        "solution_func": "def g(word=\"python\"):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    random_word = \"\"\n    for _ in range(len(word)):\n        random_word += random.choice(vowels)\n    return random_word",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, c='e') -> bool:\n    \"\"\"Check if the string contains exactly n occurrences of the character c\"\"\"\n    count = 0\n    for char in s:\n        if char == c:\n            count += 1\n    return count == n\n\ndef g(n=3, c='e'):\n    return c * n\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 91,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3, c='e') -> bool:\n    \"\"\"Check if the string contains exactly n occurrences of the character c\"\"\"\n    count = 0\n    for char in s:\n        if char == c:\n            count += 1\n    return count == n",
        "solution_func": "def g(n=3, c='e'):\n    return c * n",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[int], k=3, target=10) -> bool:\n    \"\"\"Check if there are exactly k numbers in the list that sum up to the target\"\"\"\n    from itertools import combinations\n    count = 0\n    for combo in combinations(lst, k):\n        if sum(combo) == target:\n            count += 1\n    return count == 1\n\ndef g(k=3, target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 91,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(lst: List[int], k=3, target=10) -> bool:\n    \"\"\"Check if there are exactly k numbers in the list that sum up to the target\"\"\"\n    from itertools import combinations\n    count = 0\n    for combo in combinations(lst, k):\n        if sum(combo) == target:\n            count += 1\n    return count == 1",
        "solution_func": "def g(k=3, target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=0):\n    return [-1, 2, 4, 6, 8]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 91,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=0):\n    return [-1, 2, 4, 6, 8]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(area: float, radius=5) -> bool:\n    \"\"\"Find the radius of a circle given its area.\"\"\"\n    circle_area = math.pi * radius**2\n    return circle_area == area\ndef g(radius=5):\n    circle_area = math.pi * radius**2\n    return circle_area\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 91,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(area: float, radius=5) -> bool:\n    \"\"\"Find the radius of a circle given its area.\"\"\"\n    circle_area = math.pi * radius**2\n    return circle_area == area",
        "solution_func": "def g(radius=5):\n    circle_area = math.pi * radius**2\n    return circle_area",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(encrypted: str, shift=3) -> bool:\n    \"\"\"Decrypt a string encrypted with a Caesar cipher.\"\"\"\n    decrypted = \"\"\n    for char in encrypted:\n        if char.isalpha():\n            ascii_val = ord(char)\n            if char.islower():\n                decrypted += chr((ascii_val - shift - 97) % 26 + 97)\n            else:\n                decrypted += chr((ascii_val - shift - 65) % 26 + 65)\n        else:\n            decrypted += char\n    return decrypted == \"Python\"\ndef g(shift=3):\n    encrypted = \"Sbwkrq\"\n    decrypted = \"\"\n    for char in encrypted:\n        if char.isalpha():\n            ascii_val = ord(char)\n            if char.islower():\n                decrypted += chr((ascii_val - shift - 97) % 26 + 97)\n            else:\n                decrypted += chr((ascii_val - shift - 65) % 26 + 65)\n        else:\n            decrypted += char\n    return decrypted\nassert f(g())\n",
        "emb": null,
        "idx_generation": 91,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(encrypted: str, shift=3) -> bool:\n    \"\"\"Decrypt a string encrypted with a Caesar cipher.\"\"\"\n    decrypted = \"\"\n    for char in encrypted:\n        if char.isalpha():\n            ascii_val = ord(char)\n            if char.islower():\n                decrypted += chr((ascii_val - shift - 97) % 26 + 97)\n            else:\n                decrypted += chr((ascii_val - shift - 65) % 26 + 65)\n        else:\n            decrypted += char\n    return decrypted == \"Python\"",
        "solution_func": "def g(shift=3):\n    encrypted = \"Sbwkrq\"\n    decrypted = \"\"\n    for char in encrypted:\n        if char.isalpha():\n            ascii_val = ord(char)\n            if char.islower():\n                decrypted += chr((ascii_val - shift - 97) % 26 + 97)\n            else:\n                decrypted += chr((ascii_val - shift - 65) % 26 + 65)\n        else:\n            decrypted += char\n    return decrypted",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(prime: int, num_digits=3) -> bool:\n    \"\"\"Find a prime number with a specific number of digits.\"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    for i in range(10**(num_digits-1), 10**num_digits):\n        if is_prime(i):\n            return i == prime\n    return False\ndef g(num_digits=3):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    for i in range(10**(num_digits-1), 10**num_digits):\n        if is_prime(i):\n            return i\n    return -1\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 91,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(prime: int, num_digits=3) -> bool:\n    \"\"\"Find a prime number with a specific number of digits.\"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    for i in range(10**(num_digits-1), 10**num_digits):\n        if is_prime(i):\n            return i == prime\n    return False",
        "solution_func": "def g(num_digits=3):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    for i in range(10**(num_digits-1), 10**num_digits):\n        if is_prime(i):\n            return i\n    return -1",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m: int, x: int, y: int) -> bool:\n    \"\"\"Check if two numbers are both divisible by a given number\"\"\"\n    return n % x == 0 and m % y == 0\ndef g(x: int, y: int):\n    n = x * 2\n    m = y * 3\n    return (n, m)\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 91,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m: int, x: int, y: int) -> bool:\n    \"\"\"Check if two numbers are both divisible by a given number\"\"\"\n    return n % x == 0 and m % y == 0",
        "solution_func": "def g(x: int, y: int):\n    n = x * 2\n    m = y * 3\n    return (n, m)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value\"\"\"\n    return any((a + b == target for a in numbers for b in numbers))\ndef g(target=10):\n    return [1, target-1]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 92,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value\"\"\"\n    return any((a + b == target for a in numbers for b in numbers))",
        "solution_func": "def g(target=10):\n    return [1, target-1]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the sum of any row or column in the matrix is equal to the target value\"\"\"\n    return any((sum(row) == target for row in matrix)) or any((sum(column) == target for column in zip(*matrix)))\ndef g(target=0):\n    return [[target]] * 3\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 92,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the sum of any row or column in the matrix is equal to the target value\"\"\"\n    return any((sum(row) == target for row in matrix)) or any((sum(column) == target for column in zip(*matrix)))",
        "solution_func": "def g(target=0):\n    return [[target]] * 3",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if any word in the list contains all the letters in the target word\"\"\"\n    return any((all((letter in word for letter in target)) for word in words))\ndef g(target='python'):\n    return ['python', 'java', 'javascript']\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 92,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if any word in the list contains all the letters in the target word\"\"\"\n    return any((all((letter in word for letter in target)) for word in words))",
        "solution_func": "def g(target='python'):\n    return ['python', 'java', 'javascript']",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find any two numbers that sum up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 92,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find any two numbers that sum up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, x=10, y=5) -> bool:\n    \"\"\"Given a number n, determine if it is a perfect square and lies within the range (x, y)\"\"\"\n    if n < x or n > y:\n        return False\n    root = sqrt(n)\n    return root.is_integer()\ndef g(x=10, y=5):\n    return x**2\nassert f(g())\n",
        "emb": null,
        "idx_generation": 92,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, x=10, y=5) -> bool:\n    \"\"\"Given a number n, determine if it is a perfect square and lies within the range (x, y)\"\"\"\n    if n < x or n > y:\n        return False\n    root = sqrt(n)\n    return root.is_integer()",
        "solution_func": "def g(x=10, y=5):\n    return x**2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, pattern='abc') -> bool:\n    \"\"\"Check if a given word follows a specific pattern. Each letter in the word should correspond to a character in the pattern\"\"\"\n    if len(word) != len(pattern):\n        return False\n    mapping = {}\n    for i in range(len(word)):\n        if pattern[i] in mapping:\n            if mapping[pattern[i]] != word[i]:\n                return False\n        else:\n            mapping[pattern[i]] = word[i]\n    return True\ndef g(pattern='abc'):\n    return ''.join([chr(ord('a') + i) for i in range(len(pattern))])\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 92,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str, pattern='abc') -> bool:\n    \"\"\"Check if a given word follows a specific pattern. Each letter in the word should correspond to a character in the pattern\"\"\"\n    if len(word) != len(pattern):\n        return False\n    mapping = {}\n    for i in range(len(word)):\n        if pattern[i] in mapping:\n            if mapping[pattern[i]] != word[i]:\n                return False\n        else:\n            mapping[pattern[i]] = word[i]\n    return True",
        "solution_func": "def g(pattern='abc'):\n    return ''.join([chr(ord('a') + i) for i in range(len(pattern))])",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: list, k=3, target=10) -> bool:\n    \"\"\"Find a sublist of length k whose sum is equal to the target\"\"\"\n    return any(sum(sublist) == target for sublist in zip(*[arr[i:] for i in range(k)]))\ndef g(k=3, target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 92,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: list, k=3, target=10) -> bool:\n    \"\"\"Find a sublist of length k whose sum is equal to the target\"\"\"\n    return any(sum(sublist) == target for sublist in zip(*[arr[i:] for i in range(k)]))",
        "solution_func": "def g(k=3, target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: list, target=10) -> bool:\n    \"\"\"Find a pair of numbers whose sum is equal to the target\"\"\"\n    return any((x + y) == target for i, x in enumerate(nums) for y in nums[i+1:])\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 92,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: list, target=10) -> bool:\n    \"\"\"Find a pair of numbers whose sum is equal to the target\"\"\"\n    return any((x + y) == target for i, x in enumerate(nums) for y in nums[i+1:])",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=2) -> bool:\n    \"\"\"Determine if n is a power of x\"\"\"\n    return math.log(n, x).is_integer()\ndef g(x=2):\n    return 64\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 92,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=2) -> bool:\n    \"\"\"Determine if n is a power of x\"\"\"\n    return math.log(n, x).is_integer()",
        "solution_func": "def g(x=2):\n    return 64",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom datetime import datetime\ndef f(d: datetime, t='2022-01-01 00:00:00') -> bool:\n    \"\"\"Check if a given date is before a specific timestamp.\"\"\"\n    return d < datetime.strptime(t, '%Y-%m-%d %H:%M:%S')\ndef g(t='2022-01-01 00:00:00'):\n    return datetime.strptime(t, '%Y-%m-%d %H:%M:%S')\nassert f(g())\n",
        "emb": null,
        "idx_generation": 92,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\ndef f(d: datetime, t='2022-01-01 00:00:00') -> bool:\n    \"\"\"Check if a given date is before a specific timestamp.\"\"\"\n    return d < datetime.strptime(t, '%Y-%m-%d %H:%M:%S')",
        "solution_func": "def g(t='2022-01-01 00:00:00'):\n    return datetime.strptime(t, '%Y-%m-%d %H:%M:%S')",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\n\ndef g(nums: List[int], target=100):\n    while True:\n        num1 = random.choice(nums)\n        num2 = random.choice(nums)\n        if num1 + num2 == target:\n            return [num1, num2]\n            \nassert f(g())\n",
        "emb": null,
        "idx_generation": 93,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(nums: List[int], target=100):\n    while True:\n        num1 = random.choice(nums)\n        num2 = random.choice(nums)\n        if num1 + num2 == target:\n            return [num1, num2]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(word: str, char_count=3) -> bool:\n    \"\"\"Check if the word contains at least 'char_count' occurrences of each character.\"\"\"\n    return all((word.count(char) >= char_count for char in set(word)))\n\ndef g(word: str, char_count=3):\n    return word * char_count\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 93,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str, char_count=3) -> bool:\n    \"\"\"Check if the word contains at least 'char_count' occurrences of each character.\"\"\"\n    return all((word.count(char) >= char_count for char in set(word)))",
        "solution_func": "def g(word: str, char_count=3):\n    return word * char_count",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(triangle_sides: List[float], area=5) -> bool:\n    \"\"\"Check if the area of the triangle with given sides is equal to the target area.\"\"\"\n    a, b, c = triangle_sides\n    s = sum(triangle_sides) / 2\n    triangle_area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return triangle_area == area\n\ndef g(triangle_sides: List[float], area=5):\n    return [area, area, area]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 93,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(triangle_sides: List[float], area=5) -> bool:\n    \"\"\"Check if the area of the triangle with given sides is equal to the target area.\"\"\"\n    a, b, c = triangle_sides\n    s = sum(triangle_sides) / 2\n    triangle_area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return triangle_area == area",
        "solution_func": "def g(triangle_sides: List[float], area=5):\n    return [area, area, area]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['abc', 'def'], count=2) -> bool:\n    \"\"\"Given a string s and a list of substrings, determine if there are at least 'count' number of occurrences of each substring in s.\"\"\"\n    return all((s.count(sub) >= count for sub in substrings))\ndef g(substrings=['abc', 'def'], count=2):\n    return ''.join(substrings * count)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 93,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substrings=['abc', 'def'], count=2) -> bool:\n    \"\"\"Given a string s and a list of substrings, determine if there are at least 'count' number of occurrences of each substring in s.\"\"\"\n    return all((s.count(sub) >= count for sub in substrings))",
        "solution_func": "def g(substrings=['abc', 'def'], count=2):\n    return ''.join(substrings * count)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, numbers=[1, 2, 3, 4, 5], product=120) -> bool:\n    \"\"\"Given a list of numbers, find if there exists a subset of length n whose product is equal to the given product.\"\"\"\n    from itertools import combinations\n    return any((product == 1 for _ in range(n))) or any((product == 1 for subset in combinations(numbers, n) if product == 1 or product == 0 or product % subset == 0))\ndef g(numbers=[1, 2, 3, 4, 5], product=120):\n    return [1] * product + numbers\nassert f(g())\n",
        "emb": null,
        "idx_generation": 93,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, numbers=[1, 2, 3, 4, 5], product=120) -> bool:\n    \"\"\"Given a list of numbers, find if there exists a subset of length n whose product is equal to the given product.\"\"\"\n    from itertools import combinations\n    return any((product == 1 for _ in range(n))) or any((product == 1 for subset in combinations(numbers, n) if product == 1 or product == 0 or product % subset == 0))",
        "solution_func": "def g(numbers=[1, 2, 3, 4, 5], product=120):\n    return [1] * product + numbers",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, numbers=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"Given a list of numbers, find if there exists a subset of length n whose sum is equal to the given target.\"\"\"\n    from itertools import combinations\n    return any((target == 0 for _ in range(n))) or any((sum(subset) == target for subset in combinations(numbers, n)))\ndef g(numbers=[1, 2, 3, 4, 5], target=10):\n    return [target // len(numbers)] * n + numbers\nassert f(g())\n",
        "emb": null,
        "idx_generation": 93,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, numbers=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"Given a list of numbers, find if there exists a subset of length n whose sum is equal to the given target.\"\"\"\n    from itertools import combinations\n    return any((target == 0 for _ in range(n))) or any((sum(subset) == target for subset in combinations(numbers, n)))",
        "solution_func": "def g(numbers=[1, 2, 3, 4, 5], target=10):\n    return [target // len(numbers)] * n + numbers",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the sum of the diagonals of a matrix is equal to the target value.\"\"\"\n    n = len(matrix)\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i] + matrix[i][n - i - 1]\n    return diagonal_sum == target\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 93,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the sum of the diagonals of a matrix is equal to the target value.\"\"\"\n    n = len(matrix)\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i] + matrix[i][n - i - 1]\n    return diagonal_sum == target",
        "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, target='') -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return string == target\n\ndef g(target=''):\n    return target\n\nassert f(g('racecar'))\n",
        "emb": null,
        "idx_generation": 93,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, target='') -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return string == target",
        "solution_func": "def g(target=''):\n    return target",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target value.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 93,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target value.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=0) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that sums up to the target_sum\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[k])):\n                    if matrix[i][j] + matrix[k][l] == target_sum:\n                        return True\n    return False\ndef g(target_sum=0):\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 93,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=0) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that sums up to the target_sum\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[k])):\n                    if matrix[i][j] + matrix[k][l] == target_sum:\n                        return True\n    return False",
        "solution_func": "def g(target_sum=0):\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=10, y=20) -> bool:\n    \"\"\"Check if a number is a perfect square and lies within a given range\"\"\"\n    return math.isqrt(n)**2 == n and x <= n <= y\n\ndef g(x=10, y=20):\n    for i in range(x, y+1):\n        if math.isqrt(i)**2 == i:\n            return i\n\nassert f(g()) == True",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 94,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=10, y=20) -> bool:\n    \"\"\"Check if a number is a perfect square and lies within a given range\"\"\"\n    return math.isqrt(n)**2 == n and x <= n <= y",
        "solution_func": "def g(x=10, y=20):\n    for i in range(x, y+1):\n        if math.isqrt(i)**2 == i:\n            return i",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a number is present in a list and is not in the first half of the list\"\"\"\n    return n in lst and n not in lst[:len(lst)//2]\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    random.shuffle(lst)\n    return lst[random.randint(0, len(lst)-1)]\n\nassert f(g()) == True",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 94,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a number is present in a list and is not in the first half of the list\"\"\"\n    return n in lst and n not in lst[:len(lst)//2]",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    random.shuffle(lst)\n    return lst[random.randint(0, len(lst)-1)]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\nimport statistics\n\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a number is the median of a list\"\"\"\n    return n == statistics.median(lst)\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst[random.randint(0, len(lst)-1)]\n\nassert f(g()) == True",
        "emb": null,
        "idx_generation": 94,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\nimport statistics\n\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a number is the median of a list\"\"\"\n    return n == statistics.median(lst)",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    return lst[random.randint(0, len(lst)-1)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, upper_limit=100) -> bool:\n    \"\"\"Find a number that is divisible by all numbers from 1 to n (inclusive)\"\"\"\n    return all(n % i == 0 for i in range(1, n+1))\ndef g(upper_limit=100):\n    return upper_limit\nassert f(g())\n",
        "emb": null,
        "idx_generation": 94,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, upper_limit=100) -> bool:\n    \"\"\"Find a number that is divisible by all numbers from 1 to n (inclusive)\"\"\"\n    return all(n % i == 0 for i in range(1, n+1))",
        "solution_func": "def g(upper_limit=100):\n    return upper_limit",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, string_len=5) -> bool:\n    \"\"\"Find a string of length n such that it is a palindrome\"\"\"\n    return str(n) == str(n)[::-1]\ndef g(string_len=5):\n    return int(\"9\" * string_len)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 94,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, string_len=5) -> bool:\n    \"\"\"Find a string of length n such that it is a palindrome\"\"\"\n    return str(n) == str(n)[::-1]",
        "solution_func": "def g(string_len=5):\n    return int(\"9\" * string_len)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Find the kth digit (from the right) of n\"\"\"\n    return str(n)[-k] == '5'\ndef g(k=3):\n    return int(\"123456789\" * k)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 94,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Find the kth digit (from the right) of n\"\"\"\n    return str(n)[-k] == '5'",
        "solution_func": "def g(k=3):\n    return int(\"123456789\" * k)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=3.14159) -> bool:\n    \"\"\"Check if x is approximately equal to pi\"\"\"\n    return math.isclose(x, a)\n    \ndef g(a=3.14159):\n    return a\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 94,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=3.14159) -> bool:\n    \"\"\"Check if x is approximately equal to pi\"\"\"\n    return math.isclose(x, a)",
        "solution_func": "def g(a=3.14159):\n    return a",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], a=42) -> bool:\n    \"\"\"Check if a is a random element in lst\"\"\"\n    return a in lst\n\ndef g(lst: List[int]):\n    return random.choice(lst)\n\nassert f(g(lst=[1, 2, 3, 4, 5]))\n",
        "emb": null,
        "idx_generation": 94,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(lst: List[int], a=42) -> bool:\n    \"\"\"Check if a is a random element in lst\"\"\"\n    return a in lst",
        "solution_func": "def g(lst: List[int]):\n    return random.choice(lst)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='python') -> bool:\n    \"\"\"Check if s contains the substring 'python'\"\"\"\n    return a in s\n\ndef g(a='python'):\n    return 'I love ' + a\n\nassert f(g())",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 94,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, a='python') -> bool:\n    \"\"\"Check if s contains the substring 'python'\"\"\"\n    return a in s",
        "solution_func": "def g(a='python'):\n    return 'I love ' + a",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float) -> bool:\n    \"\"\"Find the smallest positive integer n such that n^x + n^y = n^z.\"\"\"\n    return math.isclose(math.pow(n, x) + math.pow(n, y), math.pow(n, z))\n\ndef g(x: float, y: float, z: float):\n    return 2, x, y, z\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 94,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float) -> bool:\n    \"\"\"Find the smallest positive integer n such that n^x + n^y = n^z.\"\"\"\n    return math.isclose(math.pow(n, x) + math.pow(n, y), math.pow(n, z))",
        "solution_func": "def g(x: float, y: float, z: float):\n    return 2, x, y, z",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(result: float, x=2, y=3) -> bool:\n    \"\"\"Check if the result is equal to the square root of the sum of x and y\"\"\"\n    return result == math.sqrt(x + y)\n\ndef g(x=2, y=3):\n    return math.sqrt(x + y)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 95,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(result: float, x=2, y=3) -> bool:\n    \"\"\"Check if the result is equal to the square root of the sum of x and y\"\"\"\n    return result == math.sqrt(x + y)",
        "solution_func": "def g(x=2, y=3):\n    return math.sqrt(x + y)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(result: int, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the result is a random number from the given list\"\"\"\n    return result in num_list\n\ndef g(num_list=[1, 2, 3, 4, 5]):\n    return random.choice(num_list)\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 95,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(result: int, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the result is a random number from the given list\"\"\"\n    return result in num_list",
        "solution_func": "def g(num_list=[1, 2, 3, 4, 5]):\n    return random.choice(num_list)",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, num1=10, num2=5) -> bool:\n    \"\"\"Check if the result is divisible by both num1 and num2\"\"\"\n    return result % num1 == 0 and result % num2 == 0\n\ndef g(num1=10, num2=5):\n    return num1 * num2\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 95,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(result: int, num1=10, num2=5) -> bool:\n    \"\"\"Check if the result is divisible by both num1 and num2\"\"\"\n    return result % num1 == 0 and result % num2 == 0",
        "solution_func": "def g(num1=10, num2=5):\n    return num1 * num2",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by all the given factors.\"\"\"\n    return all(num % factor == 0 for factor in factors)\n\ndef g(factors=[2, 3, 5]):\n    num = 1\n    for factor in factors:\n        num *= factor\n    return num\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 95,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(num: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by all the given factors.\"\"\"\n    return all(num % factor == 0 for factor in factors)",
        "solution_func": "def g(factors=[2, 3, 5]):\n    num = 1\n    for factor in factors:\n        num *= factor\n    return num",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(num: int, limit=100) -> bool:\n    \"\"\"Check if a number is greater than a random number within a given limit.\"\"\"\n    return num > random.randint(0, limit)\n\ndef g(limit=100):\n    return random.randint(0, limit)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 95,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(num: int, limit=100) -> bool:\n    \"\"\"Check if a number is greater than a random number within a given limit.\"\"\"\n    return num > random.randint(0, limit)",
        "solution_func": "def g(limit=100):\n    return random.randint(0, limit)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, format=\"%Y-%m-%d\") -> bool:\n    \"\"\"Check if a date string matches a specific format.\"\"\"\n    try:\n        datetime.datetime.strptime(date, format)\n        return True\n    except ValueError:\n        return False\n\ndef g(format=\"%Y-%m-%d\"):\n    return datetime.datetime.now().strftime(format)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 95,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(date: str, format=\"%Y-%m-%d\") -> bool:\n    \"\"\"Check if a date string matches a specific format.\"\"\"\n    try:\n        datetime.datetime.strptime(date, format)\n        return True\n    except ValueError:\n        return False",
        "solution_func": "def g(format=\"%Y-%m-%d\"):\n    return datetime.datetime.now().strftime(format)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(year: int, is_leap=False) -> bool:\n    \"\"\"Check if a given year is a leap year\"\"\"\n    if is_leap:\n        return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\n    else:\n        return year % 4 == 0\ndef g(is_leap=False):\n    from datetime import datetime\n    if is_leap:\n        return datetime.now().year - 1\n    else:\n        return datetime.now().year\nassert f(g())\n",
        "emb": null,
        "idx_generation": 95,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(year: int, is_leap=False) -> bool:\n    \"\"\"Check if a given year is a leap year\"\"\"\n    if is_leap:\n        return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\n    else:\n        return year % 4 == 0",
        "solution_func": "def g(is_leap=False):\n    from datetime import datetime\n    if is_leap:\n        return datetime.now().year - 1\n    else:\n        return datetime.now().year",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if a given target value exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(matrix: List[List[int]], target=0):\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 95,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if a given target value exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(matrix: List[List[int]], target=0):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums: List[int], target=0):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 95,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums: List[int], target=0):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Find the number of occurrences of the substring 'hello' in the given string s, repeated n times.\"\"\"\n    count = s.count('hello') * n\n    return count == 4\ndef g(n=4):\n    s = 'hellohellohellohello'\n    return s\nassert f(g())\n",
        "emb": null,
        "idx_generation": 95,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Find the number of occurrences of the substring 'hello' in the given string s, repeated n times.\"\"\"\n    count = s.count('hello') * n\n    return count == 4",
        "solution_func": "def g(n=4):\n    s = 'hellohellohellohello'\n    return s",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Given a list of integers, find if there exists two numbers such that their sum is equal to a target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=7):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 96,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Given a list of integers, find if there exists two numbers such that their sum is equal to a target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=7):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find the indices of two numbers such that their sum is equal to a target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [i, j]\n    return []\ndef g(target=10):\n    return [2, 4, 6, 8, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 96,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find the indices of two numbers such that their sum is equal to a target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [i, j]\n    return []",
        "solution_func": "def g(target=10):\n    return [2, 4, 6, 8, 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Given a list of integers, find the product of two numbers such that their sum is equal to a target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return nums[i] * nums[j]\n    return 0\ndef g(target=20):\n    return [3, 5, 8, 10, 12]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 96,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Given a list of integers, find the product of two numbers such that their sum is equal to a target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return nums[i] * nums[j]\n    return 0",
        "solution_func": "def g(target=20):\n    return [3, 5, 8, 10, 12]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target value\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 96,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target value\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))",
        "solution_func": "def g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str, s3: str, s4: str) -> bool:\n    \"\"\"Check if any two strings are anagrams of each other\"\"\"\n    strings = [s1, s2, s3, s4]\n    return any((sorted(strings[i]) == sorted(strings[j]) for i in range(len(strings)) for j in range(i+1, len(strings))))\ndef g():\n    return \"abcd\", \"dcba\", \"efgh\", \"hgef\"\nassert f(*g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 96,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s1: str, s2: str, s3: str, s4: str) -> bool:\n    \"\"\"Check if any two strings are anagrams of each other\"\"\"\n    strings = [s1, s2, s3, s4]\n    return any((sorted(strings[i]) == sorted(strings[j]) for i in range(len(strings)) for j in range(i+1, len(strings))))",
        "solution_func": "def g():\n    return \"abcd\", \"dcba\", \"efgh\", \"hgef\"",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square\"\"\"\n    n = len(matrix)\n    magic_sum = (n * (n ** 2 + 1)) // 2\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum_1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum_2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sum == magic_sum for row_sum in row_sums)) and all((col_sum == magic_sum for col_sum in col_sums)) and diagonal_sum_1 == magic_sum and diagonal_sum_2 == magic_sum\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 96,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square\"\"\"\n    n = len(matrix)\n    magic_sum = (n * (n ** 2 + 1)) // 2\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum_1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum_2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sum == magic_sum for row_sum in row_sums)) and all((col_sum == magic_sum for col_sum in col_sums)) and diagonal_sum_1 == magic_sum and diagonal_sum_2 == magic_sum",
        "solution_func": "def g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Check if a string contains at least n vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count >= n\ndef g(n=10):\n    return \"aeiou\" * n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 96,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Check if a string contains at least n vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count >= n",
        "solution_func": "def g(n=10):\n    return \"aeiou\" * n",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=50) -> bool:\n    \"\"\"Check if there are three numbers in a list that sum up to a target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            for k in range(j+1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == target:\n                    return True\n    return False\ndef g(target=50):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 96,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=50) -> bool:\n    \"\"\"Check if there are three numbers in a list that sum up to a target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            for k in range(j+1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=50):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 96,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True",
        "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=55) -> bool:\n    \"\"\"Find two numbers in the list whose sum equals to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=55):\n    return [25, 30, 15, 10, 5]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 96,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=55) -> bool:\n    \"\"\"Find two numbers in the list whose sum equals to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=55):\n    return [25, 30, 15, 10, 5]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string that is a palindrome, meaning it reads the same forwards and backwards.\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"level\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 97,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string that is a palindrome, meaning it reads the same forwards and backwards.\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"level\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a number that is a perfect square.\"\"\"\n    import math\n    return math.isqrt(n)**2 == n\ndef g():\n    return 16\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 97,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a number that is a perfect square.\"\"\"\n    import math\n    return math.isqrt(n)**2 == n",
        "solution_func": "def g():\n    return 16",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a list of integers where the sum of the first half of the list is equal to the sum of the second half of the list.\"\"\"\n    return sum(nums[:len(nums)//2]) == sum(nums[len(nums)//2:])\ndef g():\n    return [1, 2, 3, 4, 5, 5, 4, 3, 2, 1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 97,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a list of integers where the sum of the first half of the list is equal to the sum of the second half of the list.\"\"\"\n    return sum(nums[:len(nums)//2]) == sum(nums[len(nums)//2:])",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 5, 4, 3, 2, 1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=98765, b=43210, upper_bound=100) -> bool:\n    \"\"\"Check if the sum of two integers is equal to n.\"\"\"\n    return a + b == n and (a <= upper_bound)\ndef g(a=98765, b=43210, upper_bound=100):\n    return n - b\nassert f(g())\n",
        "emb": null,
        "idx_generation": 97,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=98765, b=43210, upper_bound=100) -> bool:\n    \"\"\"Check if the sum of two integers is equal to n.\"\"\"\n    return a + b == n and (a <= upper_bound)",
        "solution_func": "def g(a=98765, b=43210, upper_bound=100):\n    return n - b",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, strings=['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']) -> bool:\n    \"\"\"Check if the input string is an element in the list of strings and if its index is a prime number.\"\"\"\n    return s in strings and is_prime(strings.index(s))\ndef g(strings=['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']):\n    return strings[7]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 97,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, strings=['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']) -> bool:\n    \"\"\"Check if the input string is an element in the list of strings and if its index is a prime number.\"\"\"\n    return s in strings and is_prime(strings.index(s))",
        "solution_func": "def g(strings=['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']):\n    return strings[7]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=987654321) -> bool:\n    \"\"\"Check if the square root of a number is a prime number and if it is smaller than the input number.\"\"\"\n    return is_prime(int(x)) and x < a\ndef g(a=987654321):\n    return math.sqrt(a)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 97,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=987654321) -> bool:\n    \"\"\"Check if the square root of a number is a prime number and if it is smaller than the input number.\"\"\"\n    return is_prime(int(x)) and x < a",
        "solution_func": "def g(a=987654321):\n    return math.sqrt(a)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, a=3.14) -> bool:\n    \"\"\"Check if x and y are coordinates of a point inside a circle of radius a centered at the origin.\"\"\"\n    return x ** 2 + y ** 2 <= a ** 2\n\ndef g(a=3.14):\n    radius = math.sqrt(a)\n    return (radius * math.cos(45), radius * math.sin(45))\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 97,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, a=3.14) -> bool:\n    \"\"\"Check if x and y are coordinates of a point inside a circle of radius a centered at the origin.\"\"\"\n    return x ** 2 + y ** 2 <= a ** 2",
        "solution_func": "def g(a=3.14):\n    radius = math.sqrt(a)\n    return (radius * math.cos(45), radius * math.sin(45))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=10) -> bool:\n    \"\"\"Check if the sum of the first n elements of x is equal to n * (n + 1) / 2.\"\"\"\n    return sum(x[:n]) == n * (n + 1) // 2\n\ndef g(n=10):\n    return list(range(1, n + 1))\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 97,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=10) -> bool:\n    \"\"\"Check if the sum of the first n elements of x is equal to n * (n + 1) / 2.\"\"\"\n    return sum(x[:n]) == n * (n + 1) // 2",
        "solution_func": "def g(n=10):\n    return list(range(1, n + 1))",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[str], n=5) -> bool:\n    \"\"\"Check if the length of the longest string in x is equal to n.\"\"\"\n    return max(len(s) for s in x) == n\n\ndef g(n=5):\n    return ['a' * i for i in range(1, n + 1)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 97,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[str], n=5) -> bool:\n    \"\"\"Check if the length of the longest string in x is equal to n.\"\"\"\n    return max(len(s) for s in x) == n",
        "solution_func": "def g(n=5):\n    return ['a' * i for i in range(1, n + 1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, a=17, b=5, c=3) -> bool:\n    \"\"\"Check if x can be expressed as a difference of a and b, and a is divisible by c\"\"\"\n    return a - b == x and a % c == 0\ndef g(a=17, b=5, c=3):\n    return a\nassert f(g())\n",
        "emb": null,
        "idx_generation": 97,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=17, b=5, c=3) -> bool:\n    \"\"\"Check if x can be expressed as a difference of a and b, and a is divisible by c\"\"\"\n    return a - b == x and a % c == 0",
        "solution_func": "def g(a=17, b=5, c=3):\n    return a",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\ndef f(n: int, a=5, b=8) -> bool:\n    \"\"\"Determine if the given number is a perfect square.\"\"\"\n    return math.isqrt(n) ** 2 == n and a*b == n\ndef g(a=5, b=8):\n    return a * b\nassert f(g())\n",
        "emb": null,
        "idx_generation": 98,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\ndef f(n: int, a=5, b=8) -> bool:\n    \"\"\"Determine if the given number is a perfect square.\"\"\"\n    return math.isqrt(n) ** 2 == n and a*b == n",
        "solution_func": "def g(a=5, b=8):\n    return a * b",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\ndef f(n: int, a=10, b=20, c=30, d=40) -> bool:\n    \"\"\"Check if the given number is divisible by a random number.\"\"\"\n    return n % random.randint(a, b) == 0 and (n % c != 0 or n % d != 0)\ndef g(a=10, b=20, c=30, d=40):\n    return random.randint(a, b) * c * d\nassert f(g())\n",
        "emb": null,
        "idx_generation": 98,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\ndef f(n: int, a=10, b=20, c=30, d=40) -> bool:\n    \"\"\"Check if the given number is divisible by a random number.\"\"\"\n    return n % random.randint(a, b) == 0 and (n % c != 0 or n % d != 0)",
        "solution_func": "def g(a=10, b=20, c=30, d=40):\n    return random.randint(a, b) * c * d",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=6, c=9) -> bool:\n    \"\"\"Check if the given number is a multiple of a, b, and c.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0 and a * b * c == n\ndef g(a=3, b=6, c=9):\n    return a * b * c\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 98,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=6, c=9) -> bool:\n    \"\"\"Check if the given number is a multiple of a, b, and c.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0 and a * b * c == n",
        "solution_func": "def g(a=3, b=6, c=9):\n    return a * b * c",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 7, 11, 15], target=13) -> bool:\n    \"\"\"Given a list of numbers and a target value, find two numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[2, 7, 11, 15], target=13):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return nums[i], nums[j]\n    return None\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 98,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[2, 7, 11, 15], target=13) -> bool:\n    \"\"\"Given a list of numbers and a target value, find two numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[2, 7, 11, 15], target=13):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return nums[i], nums[j]\n    return None",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=4, substrings=['abcd', 'efgh', 'ijkl', 'mnop']) -> bool:\n    \"\"\"Check if a string contains all the given substrings.\"\"\"\n    return all(substring in s for substring in substrings)\ndef g(n=4, substrings=['abcd', 'efgh', 'ijkl', 'mnop']):\n    return ''.join(substrings)\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 98,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=4, substrings=['abcd', 'efgh', 'ijkl', 'mnop']) -> bool:\n    \"\"\"Check if a string contains all the given substrings.\"\"\"\n    return all(substring in s for substring in substrings)",
        "solution_func": "def g(n=4, substrings=['abcd', 'efgh', 'ijkl', 'mnop']):\n    return ''.join(substrings)",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], target=30) -> bool:\n    \"\"\"Given a list of numbers and a target value, find three numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], target=30):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return nums[i], nums[j], nums[k]\n    return None\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 98,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], target=30) -> bool:\n    \"\"\"Given a list of numbers and a target value, find three numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], target=30):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return nums[i], nums[j], nums[k]\n    return None",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Check if the sum of any two numbers in the array equals n.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == n:\n                return True\n    return False\ndef g(arr: List[int]):\n    return sum(arr)//2\nassert f(g())\n",
        "emb": null,
        "idx_generation": 98,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Check if the sum of any two numbers in the array equals n.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == n:\n                return True\n    return False",
        "solution_func": "def g(arr: List[int]):\n    return sum(arr)//2",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Check if the nth element of the array is the sum of the previous n-1 elements.\"\"\"\n    if n == 0:\n        return True\n    if n == 1:\n        return arr[0] == 0\n    if n > 1:\n        return arr[n-1] == sum(arr[:n-1])\n    return False\ndef g(arr: List[int]):\n    ans = [0]\n    for i in range(1, len(arr)):\n        ans.append(sum(arr[:i]))\n    return ans\nassert f(g())\n",
        "emb": null,
        "idx_generation": 98,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Check if the nth element of the array is the sum of the previous n-1 elements.\"\"\"\n    if n == 0:\n        return True\n    if n == 1:\n        return arr[0] == 0\n    if n > 1:\n        return arr[n-1] == sum(arr[:n-1])\n    return False",
        "solution_func": "def g(arr: List[int]):\n    ans = [0]\n    for i in range(1, len(arr)):\n        ans.append(sum(arr[:i]))\n    return ans",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if n is a power of m.\"\"\"\n    if n == 1:\n        return True\n    while n % m == 0:\n        n /= m\n    return n == 1\ndef g(m: int):\n    return m\nassert f(g())\n",
        "emb": null,
        "idx_generation": 98,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if n is a power of m.\"\"\"\n    if n == 1:\n        return True\n    while n % m == 0:\n        n /= m\n    return n == 1",
        "solution_func": "def g(m: int):\n    return m",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: int=10) -> bool:\n    \"\"\"Find a number x that its square root plus y equals z\"\"\"\n    return math.sqrt(x) + y == z\n\ndef g(y: float, z: int=10):\n    return (z - y) ** 2\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 98,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: int=10) -> bool:\n    \"\"\"Find a number x that its square root plus y equals z\"\"\"\n    return math.sqrt(x) + y == z",
        "solution_func": "def g(y: float, z: int=10):\n    return (z - y) ** 2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=0) -> bool:\n    \"\"\"Find a subarray in the given list such that the sum of its elements is equal to k\"\"\"\n    return any(sum(arr[i:j]) == k for i in range(len(arr)) for j in range(i+1, len(arr)+1))\ndef g(k=0):\n    return [k]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 99,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], k=0) -> bool:\n    \"\"\"Find a subarray in the given list such that the sum of its elements is equal to k\"\"\"\n    return any(sum(arr[i:j]) == k for i in range(len(arr)) for j in range(i+1, len(arr)+1))",
        "solution_func": "def g(k=0):\n    return [k]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=0) -> bool:\n    \"\"\"Find a string that is a palindrome of s and has n extra characters in the middle\"\"\"\n    return s + s[::-1] == s[:len(s)//2+n] + s[len(s)//2:len(s)//2+n] + s[len(s)//2+n:][::-1]\ndef g(n=0):\n    return 'a' * n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 99,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=0) -> bool:\n    \"\"\"Find a string that is a palindrome of s and has n extra characters in the middle\"\"\"\n    return s + s[::-1] == s[:len(s)//2+n] + s[len(s)//2:len(s)//2+n] + s[len(s)//2+n:][::-1]",
        "solution_func": "def g(n=0):\n    return 'a' * n",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], x=0) -> bool:\n    \"\"\"Find a pair of numbers in the given list that sum up to x\"\"\"\n    return any(arr[i] + arr[j] == x for i in range(len(arr)) for j in range(i+1, len(arr)))\ndef g(x=0):\n    return [x//2, x//2]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 99,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], x=0) -> bool:\n    \"\"\"Find a pair of numbers in the given list that sum up to x\"\"\"\n    return any(arr[i] + arr[j] == x for i in range(len(arr)) for j in range(i+1, len(arr)))",
        "solution_func": "def g(x=0):\n    return [x//2, x//2]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Find a subsequence in the list that sums up to the target value\"\"\"\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if sum(lst[i:j+1]) == target:\n                return True\n    return False\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 99,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Find a subsequence in the list that sums up to the target value\"\"\"\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if sum(lst[i:j+1]) == target:\n                return True\n    return False",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a path from the top-left corner to the bottom-right corner in the matrix that sums up to the target value\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    dp = [[0] * cols for _ in range(rows)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, rows):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for j in range(1, cols):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = matrix[i][j] + min(dp[i-1][j], dp[i][j-1])\n    return dp[rows-1][cols-1] == target\ndef g():\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 99,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a path from the top-left corner to the bottom-right corner in the matrix that sums up to the target value\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    dp = [[0] * cols for _ in range(rows)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, rows):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for j in range(1, cols):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = matrix[i][j] + min(dp[i-1][j], dp[i][j-1])\n    return dp[rows-1][cols-1] == target",
        "solution_func": "def g():\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 99,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[0, 2, 4, 6, 8], target=20) -> bool:\n    \"\"\"Determine if a number can be expressed as the sum of two numbers from a list.\"\"\"\n    return any((n - i in nums for i in nums)) and n <= target\ndef g(nums=[0, 2, 4, 6, 8], target=20):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 99,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[0, 2, 4, 6, 8], target=20) -> bool:\n    \"\"\"Determine if a number can be expressed as the sum of two numbers from a list.\"\"\"\n    return any((n - i in nums for i in nums)) and n <= target",
        "solution_func": "def g(nums=[0, 2, 4, 6, 8], target=20):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers from a list that adds up to a target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums=[10, 20, 35, 50, 60]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 99,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers from a list that adds up to a target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(nums=[10, 20, 35, 50, 60]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers from a list that adds up to a target value, where the first number is even and the second number is odd.\"\"\"\n    return any((nums[i] + nums[j] == target and nums[i] % 2 == 0 and nums[j] % 2 != 0 for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums=[10, 20, 35, 50, 60]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 99,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers from a list that adds up to a target value, where the first number is even and the second number is odd.\"\"\"\n    return any((nums[i] + nums[j] == target and nums[i] % 2 == 0 and nums[j] % 2 != 0 for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(nums=[10, 20, 35, 50, 60]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc', count=5) -> bool:\n    \"\"\"Count the number of occurrences of a substring in a string\"\"\"\n    return s.count(substr) == count\ndef g(substr='abc', count=5):\n    ans = substr * count\n    return ans\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 99,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr='abc', count=5) -> bool:\n    \"\"\"Count the number of occurrences of a substring in a string\"\"\"\n    return s.count(substr) == count",
        "solution_func": "def g(substr='abc', count=5):\n    ans = substr * count\n    return ans",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a', count=3) -> bool:\n    \"\"\"Given a string and a character, return True if the character appears exactly 'count' times in the string,\n    and False otherwise.\"\"\"\n    return s.count(char) == count\ndef g(char='a', count=3):\n    return f'{\"a\" * count}bc'\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 100,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char='a', count=3) -> bool:\n    \"\"\"Given a string and a character, return True if the character appears exactly 'count' times in the string,\n    and False otherwise.\"\"\"\n    return s.count(char) == count",
        "solution_func": "def g(char='a', count=3):\n    return f'{\"a\" * count}bc'",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc', count=2) -> bool:\n    \"\"\"Given a string and a substring, return True if the substring appears exactly 'count' times in the string,\n    and False otherwise.\"\"\"\n    return s.count(substr) == count\ndef g(substr='abc', count=2):\n    return substr * count + 'xyz'\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 100,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr='abc', count=2) -> bool:\n    \"\"\"Given a string and a substring, return True if the substring appears exactly 'count' times in the string,\n    and False otherwise.\"\"\"\n    return s.count(substr) == count",
        "solution_func": "def g(substr='abc', count=2):\n    return substr * count + 'xyz'",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, substr='abc', count=2) -> bool:\n    \"\"\"Given a string and a substring, return True if the substring appears exactly 'count' times in the string,\n    and False otherwise.\"\"\"\n    return s.count(substr) == count\ndef g(substr='abc', count=2):\n    return substr * count + substr\nassert f(g())\n",
        "emb": null,
        "idx_generation": 100,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr='abc', count=2) -> bool:\n    \"\"\"Given a string and a substring, return True if the substring appears exactly 'count' times in the string,\n    and False otherwise.\"\"\"\n    return s.count(substr) == count",
        "solution_func": "def g(substr='abc', count=2):\n    return substr * count + substr",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=7) -> bool:\n    \"\"\"Check if the sum of all elements in the array is equal to the target value.\"\"\"\n    return np.sum(arr) == target\n\ndef g():\n    arr = np.array([1, 2, 3, 4, 5])\n    return arr\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 100,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=7) -> bool:\n    \"\"\"Check if the sum of all elements in the array is equal to the target value.\"\"\"\n    return np.sum(arr) == target",
        "solution_func": "def g():\n    arr = np.array([1, 2, 3, 4, 5])\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport pandas as pd\n\ndef f(df: pd.DataFrame, column='A') -> bool:\n    \"\"\"Check if the given column in the dataframe contains only unique values.\"\"\"\n    return df[column].is_unique\n\ndef g():\n    data = {'A': [1, 2, 3, 4], 'B': ['a', 'b', 'c', 'd']}\n    df = pd.DataFrame(data)\n    return df\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 100,
        "target_skills": null,
        "problem_func": "from typing import*\nimport pandas as pd\n\ndef f(df: pd.DataFrame, column='A') -> bool:\n    \"\"\"Check if the given column in the dataframe contains only unique values.\"\"\"\n    return df[column].is_unique",
        "solution_func": "def g():\n    data = {'A': [1, 2, 3, 4], 'B': ['a', 'b', 'c', 'd']}\n    df = pd.DataFrame(data)\n    return df",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(num: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the given number is present in the list.\"\"\"\n    return num in lst\n\ndef g():\n    num = random.randint(1, 10)\n    return num\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 100,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(num: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the given number is present in the list.\"\"\"\n    return num in lst",
        "solution_func": "def g():\n    num = random.randint(1, 10)\n    return num",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find if there are two numbers in the list that add up to the target value\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(target=15):\n    return [3, 6, 9, 12]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 100,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find if there are two numbers in the list that add up to the target value\"\"\"\n    return any(target - num in nums for num in nums)",
        "solution_func": "def g(target=15):\n    return [3, 6, 9, 12]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, days=7) -> bool:\n    \"\"\"Check if the given date is within the specified number of days from today\"\"\"\n    given_date = datetime.datetime.strptime(date, \"%Y-%m-%d\").date()\n    today = datetime.date.today()\n    return (given_date - today).days <= days\ndef g(days=7):\n    return (datetime.date.today() + datetime.timedelta(days=days)).strftime(\"%Y-%m-%d\")\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 100,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(date: str, days=7) -> bool:\n    \"\"\"Check if the given date is within the specified number of days from today\"\"\"\n    given_date = datetime.datetime.strptime(date, \"%Y-%m-%d\").date()\n    today = datetime.date.today()\n    return (given_date - today).days <= days",
        "solution_func": "def g(days=7):\n    return (datetime.date.today() + datetime.timedelta(days=days)).strftime(\"%Y-%m-%d\")",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring=\"python\") -> bool:\n    \"\"\"Check if the given substring exists within the string\"\"\"\n    return substring in string\ndef g(substring=\"python\"):\n    return \"I love python programming\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 100,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring=\"python\") -> bool:\n    \"\"\"Check if the given substring exists within the string\"\"\"\n    return substring in string",
        "solution_func": "def g(substring=\"python\"):\n    return \"I love python programming\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: List[int], target_sum=10) -> bool:\n    \"\"\"Find a sublist of lst whose sum is equal to target_sum\"\"\"\n    return any(sum(sublist) == target_sum for sublist in lst)\n\ndef g(target_sum=10):\n    return [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, -1, -2, -3]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 100,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target_sum=10) -> bool:\n    \"\"\"Find a sublist of lst whose sum is equal to target_sum\"\"\"\n    return any(sum(sublist) == target_sum for sublist in lst)",
        "solution_func": "def g(target_sum=10):\n    return [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, -1, -2, -3]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target\"\"\"\n    return any((numbers[i] + numbers[j] + numbers[k] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)) for k in range(j+1, len(numbers)))\ndef g(target=100):\n    return [1, 2, 3, 4, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 101,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target\"\"\"\n    return any((numbers[i] + numbers[j] + numbers[k] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)) for k in range(j+1, len(numbers)))",
        "solution_func": "def g(target=100):\n    return [1, 2, 3, 4, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], target_length=10) -> bool:\n    \"\"\"Check if the total length of all strings in the list is equal to the target length\"\"\"\n    return sum(len(s) for s in strings) == target_length\ndef g(target_length=10):\n    return ['hello', 'world']\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 101,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(strings: List[str], target_length=10) -> bool:\n    \"\"\"Check if the total length of all strings in the list is equal to the target length\"\"\"\n    return sum(len(s) for s in strings) == target_length",
        "solution_func": "def g(target_length=10):\n    return ['hello', 'world']",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"Check if the target word is present in the list of words\"\"\"\n    return target_word in words\ndef g(target_word='python'):\n    return ['hello', 'world', 'python', 'programming']\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 101,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"Check if the target word is present in the list of words\"\"\"\n    return target_word in words",
        "solution_func": "def g(target_word='python'):\n    return ['hello', 'world', 'python', 'programming']",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=17, b=23) -> bool:\n    \"\"\"Check if the sum of a and x is equal to b\"\"\"\n    return a + x == b\ndef g(a=17, b=23):\n    return b - a\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 101,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=17, b=23) -> bool:\n    \"\"\"Check if the sum of a and x is equal to b\"\"\"\n    return a + x == b",
        "solution_func": "def g(a=17, b=23):\n    return b - a",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=5, s=100) -> bool:\n    \"\"\"Construct a list of n consecutive integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n=5, s=100):\n    start = (s - (n-1)*n//2) // n\n    return [start + i for i in range(n)]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 101,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=5, s=100) -> bool:\n    \"\"\"Construct a list of n consecutive integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)",
        "solution_func": "def g(n=5, s=100):\n    start = (s - (n-1)*n//2) // n\n    return [start + i for i in range(n)]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(stamps: List[int], target=10, max_stamps=4, options=[1, 2, 5, 10, 20]) -> bool:\n    \"\"\"Find a selection of at most max_stamps stamps whose total worth is the target value.\"\"\"\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target=10, max_stamps=4, options=[1, 2, 5, 10, 20]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 101,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(stamps: List[int], target=10, max_stamps=4, options=[1, 2, 5, 10, 20]) -> bool:\n    \"\"\"Find a selection of at most max_stamps stamps whose total worth is the target value.\"\"\"\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target",
        "solution_func": "def g(target=10, max_stamps=4, options=[1, 2, 5, 10, 20]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(nums=[2, 3, 5]):\n    prime_nums = []\n    for n in nums:\n        if f(n):\n            prime_nums.append(n)\n    return prime_nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 101,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g(nums=[2, 3, 5]):\n    prime_nums = []\n    for n in nums:\n        if f(n):\n            prime_nums.append(n)\n    return prime_nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[10, 15, 20]) -> bool:\n    \"\"\"Check if a number is divisible by all the numbers in a list.\"\"\"\n    return all((n % i == 0 for i in nums))\ndef g(nums=[10, 15, 20]):\n    max_num = max(nums)\n    while True:\n        if f(max_num, nums):\n            return max_num\n        max_num += 1\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 101,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[10, 15, 20]) -> bool:\n    \"\"\"Check if a number is divisible by all the numbers in a list.\"\"\"\n    return all((n % i == 0 for i in nums))",
        "solution_func": "def g(nums=[10, 15, 20]):\n    max_num = max(nums)\n    while True:\n        if f(max_num, nums):\n            return max_num\n        max_num += 1",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[5, 10, 15]) -> bool:\n    \"\"\"Check if a number is a multiple of any number in a list.\"\"\"\n    return any((n % i == 0 for i in nums))\ndef g(nums=[5, 10, 15]):\n    multiple_nums = []\n    for n in range(1, 101):\n        if f(n, nums):\n            multiple_nums.append(n)\n    return multiple_nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 101,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[5, 10, 15]) -> bool:\n    \"\"\"Check if a number is a multiple of any number in a list.\"\"\"\n    return any((n % i == 0 for i in nums))",
        "solution_func": "def g(nums=[5, 10, 15]):\n    multiple_nums = []\n    for n in range(1, 101):\n        if f(n, nums):\n            multiple_nums.append(n)\n    return multiple_nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct integers from a list of integers that sum to a target value\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target\ndef g(target=100, n=5):\n    nums = [i for i in range(1, target+1)]\n    return nums[:n]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 101,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct integers from a list of integers that sum to a target value\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target",
        "solution_func": "def g(target=100, n=5):\n    nums = [i for i in range(1, target+1)]\n    return nums[:n]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"Check if the given number n is a perfect square and is divisible by all the factors\"\"\"\n    return sqrt(n) % 1 == 0 and all(n % f == 0 for f in factors)\n\ndef g(factors=[2, 3, 5]):\n    n = 1\n    for f in factors:\n        n *= f\n    return n ** 2\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 102,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"Check if the given number n is a perfect square and is divisible by all the factors\"\"\"\n    return sqrt(n) % 1 == 0 and all(n % f == 0 for f in factors)",
        "solution_func": "def g(factors=[2, 3, 5]):\n    n = 1\n    for f in factors:\n        n *= f\n    return n ** 2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if the given string s contains the given substring substr\"\"\"\n    return substr in s\n\ndef g(substr='abc'):\n    return 'x' + substr + 'y'\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 102,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if the given string s contains the given substring substr\"\"\"\n    return substr in s",
        "solution_func": "def g(substr='abc'):\n    return 'x' + substr + 'y'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[4, 8, 15, 16, 23, 42]) -> bool:\n    \"\"\"Check if the given number n can be expressed as the sum of two distinct numbers from the list of nums\"\"\"\n    return any(n == a + b for i, a in enumerate(nums) for b in nums[i + 1:])\n\ndef g(nums=[4, 8, 15, 16, 23, 42]):\n    return sum(nums[:2])\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 102,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[4, 8, 15, 16, 23, 42]) -> bool:\n    \"\"\"Check if the given number n can be expressed as the sum of two distinct numbers from the list of nums\"\"\"\n    return any(n == a + b for i, a in enumerate(nums) for b in nums[i + 1:])",
        "solution_func": "def g(nums=[4, 8, 15, 16, 23, 42]):\n    return sum(nums[:2])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=5, p=3) -> bool:\n    \"\"\"Find n such that the sum of the first m multiples of p is equal to n\"\"\"\n    return n == sum([i * p for i in range(1, m+1)])\ndef g(m=5, p=3):\n    return sum([i * p for i in range(1, m+1)])\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 102,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=5, p=3) -> bool:\n    \"\"\"Find n such that the sum of the first m multiples of p is equal to n\"\"\"\n    return n == sum([i * p for i in range(1, m+1)])",
        "solution_func": "def g(m=5, p=3):\n    return sum([i * p for i in range(1, m+1)])",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='abc', b='def') -> bool:\n    \"\"\"Find s such that every character in s is either in a or b\"\"\"\n    return all([c in a or c in b for c in s])\ndef g(a='abc', b='def'):\n    return a + b\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 102,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, a='abc', b='def') -> bool:\n    \"\"\"Find s such that every character in s is either in a or b\"\"\"\n    return all([c in a or c in b for c in s])",
        "solution_func": "def g(a='abc', b='def'):\n    return a + b",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t='python') -> bool:\n    \"\"\"Find s such that s is a rotation of t\"\"\"\n    return len(s) == len(t) and s in (t + t)\ndef g(t='python'):\n    return t[-1] + t[:-1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 102,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, t='python') -> bool:\n    \"\"\"Find s such that s is a rotation of t\"\"\"\n    return len(s) == len(t) and s in (t + t)",
        "solution_func": "def g(t='python'):\n    return t[-1] + t[:-1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=22, k=3) -> bool:\n    \"\"\"Given a matrix of size m x n and a target number, find if there exists a k x k square\n    submatrix with a sum equal to the target number.\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    \n    for i in range(m - k + 1):\n        for j in range(n - k + 1):\n            submatrix_sum = sum(sum(row[j:j+k]) for row in matrix[i:i+k])\n            if submatrix_sum == target:\n                return True\n    \n    return False\n\ndef g(target=22, k=3):\n    return [[2, 3, 4, 5],\n            [6, 7, 8, 9],\n            [10, 11, 12, 13],\n            [14, 15, 16, 17]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 102,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=22, k=3) -> bool:\n    \"\"\"Given a matrix of size m x n and a target number, find if there exists a k x k square\n    submatrix with a sum equal to the target number.\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    \n    for i in range(m - k + 1):\n        for j in range(n - k + 1):\n            submatrix_sum = sum(sum(row[j:j+k]) for row in matrix[i:i+k])\n            if submatrix_sum == target:\n                return True\n    \n    return False",
        "solution_func": "def g(target=22, k=3):\n    return [[2, 3, 4, 5],\n            [6, 7, 8, 9],\n            [10, 11, 12, 13],\n            [14, 15, 16, 17]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10, k=2) -> bool:\n    \"\"\"Given a list of integers and a target number, find if there exists a pair of numbers\n    in the list whose sum is equal to the target number.\n    \"\"\"\n    num_set = set(nums)\n    \n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    \n    return False\n\ndef g(target=10, k=2):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 102,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10, k=2) -> bool:\n    \"\"\"Given a list of integers and a target number, find if there exists a pair of numbers\n    in the list whose sum is equal to the target number.\n    \"\"\"\n    num_set = set(nums)\n    \n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    \n    return False",
        "solution_func": "def g(target=10, k=2):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100, k=3) -> bool:\n    \"\"\"Given a list of integers and a target number, find if there exists a k-length subsequence\n    of the list whose sum is equal to the target number.\n    \"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    \n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    \n    return dp[n][target]\n\ndef g(target=100, k=3):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 102,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100, k=3) -> bool:\n    \"\"\"Given a list of integers and a target number, find if there exists a k-length subsequence\n    of the list whose sum is equal to the target number.\n    \"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    \n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    \n    return dp[n][target]",
        "solution_func": "def g(target=100, k=3):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(x: int, a=10, b=100) -> bool:\n    \"\"\"Check if a number is a perfect square within a given range\"\"\"\n    return a <= x <= b and int(x ** 0.5) ** 2 == x\ndef g(a=10, b=100):\n    import random\n    return random.randint(a, b)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 102,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(x: int, a=10, b=100) -> bool:\n    \"\"\"Check if a number is a perfect square within a given range\"\"\"\n    return a <= x <= b and int(x ** 0.5) ** 2 == x",
        "solution_func": "def g(a=10, b=100):\n    import random\n    return random.randint(a, b)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']) -> bool:\n    \"\"\"Check if a string contains all the words in a given list\"\"\"\n    return all((word in s for word in words))\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']):\n    return ' '.join(words)\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 103,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']) -> bool:\n    \"\"\"Check if a string contains all the words in a given list\"\"\"\n    return all((word in s for word in words))",
        "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']):\n    return ' '.join(words)",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to find two distinct numbers in a list that sum up to a given target\"\"\"\n    return any((nums[i]+nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums=[50, 20, 30, 40, 10, 60, 70, 90]):\n    return nums + [target-sum(nums)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 103,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to find two distinct numbers in a list that sum up to a given target\"\"\"\n    return any((nums[i]+nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(nums=[50, 20, 30, 40, 10, 60, 70, 90]):\n    return nums + [target-sum(nums)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if it is possible to find a row and a column in a matrix that sum up to a given target\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if sum(matrix[i]) + sum(matrix[k][j] for k in range(rows)) == target:\n                return True\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 103,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if it is possible to find a row and a column in a matrix that sum up to a given target\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if sum(matrix[i]) + sum(matrix[k][j] for k in range(rows)) == target:\n                return True\n    return False",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if a string can be transformed into another string by rearranging its characters.\"\"\"\n    return sorted(s) == sorted(target)\ndef g(s: str, target: str):\n    return s[::-1] + target[::-1]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 103,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if a string can be transformed into another string by rearranging its characters.\"\"\"\n    return sorted(s) == sorted(target)",
        "solution_func": "def g(s: str, target: str):\n    return s[::-1] + target[::-1]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Find if there exists a pair of numbers in a list that adds up to a given target.\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(arr: List[int], target: int):\n    return arr\nassert f(g())\n",
        "emb": null,
        "idx_generation": 103,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Find if there exists a pair of numbers in a list that adds up to a given target.\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(arr: List[int], target: int):\n    return arr",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Find if there exists a subarray in a list whose sum is equal to zero.\"\"\"\n    prefix_sum = 0\n    seen = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum == 0 or prefix_sum in seen:\n            return True\n        seen.add(prefix_sum)\n    return False\ndef g(arr: List[int]):\n    return arr\nassert f(g())\n",
        "emb": null,
        "idx_generation": 103,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Find if there exists a subarray in a list whose sum is equal to zero.\"\"\"\n    prefix_sum = 0\n    seen = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum == 0 or prefix_sum in seen:\n            return True\n        seen.add(prefix_sum)\n    return False",
        "solution_func": "def g(arr: List[int]):\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is a subsequence of the given string.\"\"\"\n    i = 0  # pointer for string\n    j = 0  # pointer for substring\n    while i < len(string) and j < len(substring):\n        if string[i] == substring[j]:\n            j += 1\n        i += 1\n    return j == len(substring)\ndef g(substring='abc'):\n    string = \"\"\n    for _ in range(len(substring) + 5):\n        string += chr(random.randint(97, 122))\n    string += substring\n    for _ in range(len(substring) + 5):\n        string += chr(random.randint(97, 122))\n    return string\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 103,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is a subsequence of the given string.\"\"\"\n    i = 0  # pointer for string\n    j = 0  # pointer for substring\n    while i < len(string) and j < len(substring):\n        if string[i] == substring[j]:\n            j += 1\n        i += 1\n    return j == len(substring)",
        "solution_func": "def g(substring='abc'):\n    string = \"\"\n    for _ in range(len(substring) + 5):\n        string += chr(random.randint(97, 122))\n    string += substring\n    for _ in range(len(substring) + 5):\n        string += chr(random.randint(97, 122))\n    return string",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=9):\n    nums = [random.randint(1, 10) for _ in range(10)]\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 103,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=9):\n    nums = [random.randint(1, 10) for _ in range(10)]\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if the target number is present in the matrix.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    i = 0\n    j = n - 1\n    while i < m and j >= 0:\n        if matrix[i][j] == target:\n            return True\n        elif matrix[i][j] < target:\n            i += 1\n        else:\n            j -= 1\n    return False\ndef g(target=5):\n    matrix = [[random.randint(1, 10) for _ in range(5)] for _ in range(5)]\n    return matrix\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 103,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if the target number is present in the matrix.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    i = 0\n    j = n - 1\n    while i < m and j >= 0:\n        if matrix[i][j] == target:\n            return True\n        elif matrix[i][j] < target:\n            i += 1\n        else:\n            j -= 1\n    return False",
        "solution_func": "def g(target=5):\n    matrix = [[random.randint(1, 10) for _ in range(5)] for _ in range(5)]\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(num_list: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers, return True if there exists a subset of the list that sums up to the target number.\"\"\"\n    n = len(num_list)\n    dp = [[False] * (target+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = True\n    for i in range(1, n+1):\n        for j in range(1, target+1):\n            if j < num_list[i-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-num_list[i-1]]\n    return dp[n][target]\n\ndef g(num_list: List[int]):\n    target = random.randint(1, 1000)\n    return (num_list, target)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 103,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(num_list: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers, return True if there exists a subset of the list that sums up to the target number.\"\"\"\n    n = len(num_list)\n    dp = [[False] * (target+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = True\n    for i in range(1, n+1):\n        for j in range(1, target+1):\n            if j < num_list[i-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-num_list[i-1]]\n    return dp[n][target]",
        "solution_func": "def g(num_list: List[int]):\n    target = random.randint(1, 1000)\n    return (num_list, target)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == 10:\n                return True\n    return False\nassert f(g())\n",
        "emb": null,
        "idx_generation": 104,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == 10:\n                return True\n    return False",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: List[int], target=5) -> bool:\n    \"\"\"Check if there is a number in the list greater than the target.\"\"\"\n    for num in lst:\n        if num > target:\n            return True\n    return False\ndef g(lst=[1, 2, 3, 4, 5]):\n    for num in lst:\n        if num > 5:\n            return True\n    return False\nassert f(g())\n",
        "emb": null,
        "idx_generation": 104,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=5) -> bool:\n    \"\"\"Check if there is a number in the list greater than the target.\"\"\"\n    for num in lst:\n        if num > target:\n            return True\n    return False",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    for num in lst:\n        if num > 5:\n            return True\n    return False",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of the list is equal to the target.\"\"\"\n    return sum(lst) == target\ndef g(lst=[10, 20, 30, 40]):\n    return sum([10, 20, 30, 40]) == 100\nassert f(g())\n",
        "emb": null,
        "idx_generation": 104,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of the list is equal to the target.\"\"\"\n    return sum(lst) == target",
        "solution_func": "def g(lst=[10, 20, 30, 40]):\n    return sum([10, 20, 30, 40]) == 100",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a list that add up to a specific target.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set and num != complement:\n            return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 104,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a list that add up to a specific target.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set and num != complement:\n            return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sum=15, col_sum=10) -> bool:\n    \"\"\"Check if the sum of each row and each column in a matrix matches the specified row_sum and col_sum respectively.\"\"\"\n    for row in matrix:\n        if sum(row) != row_sum:\n            return False\n    for col in zip(*matrix):\n        if sum(col) != col_sum:\n            return False\n    return True\n\ndef g(row_sum=15, col_sum=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 104,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row_sum=15, col_sum=10) -> bool:\n    \"\"\"Check if the sum of each row and each column in a matrix matches the specified row_sum and col_sum respectively.\"\"\"\n    for row in matrix:\n        if sum(row) != row_sum:\n            return False\n    for col in zip(*matrix):\n        if sum(col) != col_sum:\n            return False\n    return True",
        "solution_func": "def g(row_sum=15, col_sum=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], letter_count=5) -> bool:\n    \"\"\"Check if every word in a list has a specific number of letters.\"\"\"\n    return all(len(word) == letter_count for word in words)\n\ndef g(letter_count=5):\n    return [\"apple\", \"banana\", \"cherry\"]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 104,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], letter_count=5) -> bool:\n    \"\"\"Check if every word in a list has a specific number of letters.\"\"\"\n    return all(len(word) == letter_count for word in words)",
        "solution_func": "def g(letter_count=5):\n    return [\"apple\", \"banana\", \"cherry\"]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Find the sum of all numbers in seq that are multiples of n\"\"\"\n    return sum([num for num in seq if num % n == 0]) == n\ndef g(seq=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return sum(seq)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 104,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Find the sum of all numbers in seq that are multiples of n\"\"\"\n    return sum([num for num in seq if num % n == 0]) == n",
        "solution_func": "def g(seq=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return sum(seq)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, char_count={}) -> bool:\n    \"\"\"Check if the number of occurrences of each character in the string is equal to the values in char_count\"\"\"\n    for char in string:\n        if char not in char_count:\n            char_count[char] = 0\n        char_count[char] += 1\n    return char_count.values() == char_count\ndef g(char_count={}):\n    return ''.join(char_count.keys())\nassert f(g())\n",
        "emb": null,
        "idx_generation": 104,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, char_count={}) -> bool:\n    \"\"\"Check if the number of occurrences of each character in the string is equal to the values in char_count\"\"\"\n    for char in string:\n        if char not in char_count:\n            char_count[char] = 0\n        char_count[char] += 1\n    return char_count.values() == char_count",
        "solution_func": "def g(char_count={}):\n    return ''.join(char_count.keys())",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(numbers: List[int], target=24) -> bool:\n    \"\"\"Check if it is possible to obtain the target number using the given list of numbers and the operations +, -, *, /\"\"\"\n    for perm in permutations(numbers):\n        a, b, c, d = perm\n        if a + b + c + d == target:\n            return True\n        elif a - b - c - d == target:\n            return True\n        elif a * b * c * d == target:\n            return True\n        elif a / b / c / d == target:\n            return True\n    return False\ndef g(target=24):\n    return [1, 2, 3, 4]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 104,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(numbers: List[int], target=24) -> bool:\n    \"\"\"Check if it is possible to obtain the target number using the given list of numbers and the operations +, -, *, /\"\"\"\n    for perm in permutations(numbers):\n        a, b, c, d = perm\n        if a + b + c + d == target:\n            return True\n        elif a - b - c - d == target:\n            return True\n        elif a * b * c * d == target:\n            return True\n        elif a / b / c / d == target:\n            return True\n    return False",
        "solution_func": "def g(target=24):\n    return [1, 2, 3, 4]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(word: str, vowels='aeiou', count=0) -> bool:\n    \"\"\"Count the number of vowels in a given word.\"\"\"\n    return sum((1 for c in word if c in vowels)) == count\ndef g(word='', vowels='aeiou'):\n    return word.count(vowels)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 104,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str, vowels='aeiou', count=0) -> bool:\n    \"\"\"Count the number of vowels in a given word.\"\"\"\n    return sum((1 for c in word if c in vowels)) == count",
        "solution_func": "def g(word='', vowels='aeiou'):\n    return word.count(vowels)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(number: int, a=50, b=60, c=70) -> bool:\n    \"\"\"Find a number that is divisible by a, b, and c.\"\"\"\n    return number % a == 0 and number % b == 0 and number % c == 0\ndef g(a=50, b=60, c=70):\n    return a * b * c\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 105,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(number: int, a=50, b=60, c=70) -> bool:\n    \"\"\"Find a number that is divisible by a, b, and c.\"\"\"\n    return number % a == 0 and number % b == 0 and number % c == 0",
        "solution_func": "def g(a=50, b=60, c=70):\n    return a * b * c",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, count=3) -> bool:\n    \"\"\"Find a string that has count number of vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return sum([1 for char in string if char.lower() in vowels]) == count\ndef g(count=3):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(vowels * count)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 105,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, count=3) -> bool:\n    \"\"\"Find a string that has count number of vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return sum([1 for char in string if char.lower() in vowels]) == count",
        "solution_func": "def g(count=3):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(vowels * count)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a matrix where the sum of each row is equal to the target.\"\"\"\n    return all([sum(row) == target for row in matrix])\ndef g(target=10):\n    return [[target] * target] * target\nassert f(g())\n",
        "emb": null,
        "idx_generation": 105,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a matrix where the sum of each row is equal to the target.\"\"\"\n    return all([sum(row) == target for row in matrix])",
        "solution_func": "def g(target=10):\n    return [[target] * target] * target",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(result: float, x=5, y=3) -> bool:\n    \"\"\"Check if the result is equal to the square root of the sum of x and y\"\"\"\n    return result == math.sqrt(x + y)\n\ndef g(x=5, y=3):\n    return math.sqrt(x + y)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 105,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(result: float, x=5, y=3) -> bool:\n    \"\"\"Check if the result is equal to the square root of the sum of x and y\"\"\"\n    return result == math.sqrt(x + y)",
        "solution_func": "def g(x=5, y=3):\n    return math.sqrt(x + y)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(result: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the result is a randomly selected element from the list\"\"\"\n    return result in lst\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return random.choice(lst)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 105,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(result: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the result is a randomly selected element from the list\"\"\"\n    return result in lst",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    return random.choice(lst)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: str, s='hello', n=2) -> bool:\n    \"\"\"Check if the result is equal to the concatenation of s n times\"\"\"\n    return result == s * n\n\ndef g(s='hello', n=2):\n    return s * n\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 105,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(result: str, s='hello', n=2) -> bool:\n    \"\"\"Check if the result is equal to the concatenation of s n times\"\"\"\n    return result == s * n",
        "solution_func": "def g(s='hello', n=2):\n    return s * n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(indices: List[int], arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find the indices of all pairs of elements in the array that sum up to an odd number.\"\"\"\n    return all((arr[i] + arr[j]) % 2 == 1 for i in indices for j in indices if i != j)\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return [(i, j) for i in range(len(arr)) for j in range(i+1, len(arr)) if (arr[i] + arr[j]) % 2 == 1]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 105,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(indices: List[int], arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find the indices of all pairs of elements in the array that sum up to an odd number.\"\"\"\n    return all((arr[i] + arr[j]) % 2 == 1 for i in indices for j in indices if i != j)",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return [(i, j) for i in range(len(arr)) for j in range(i+1, len(arr)) if (arr[i] + arr[j]) % 2 == 1]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(indices: List[int], n=5) -> bool:\n    \"\"\"Find the indices of all subsets of a set of n elements where the sum of the subset is divisible by n.\"\"\"\n    from itertools import combinations\n    return all(sum(indices[i] for i in subset) % n == 0 for subset in combinations(range(n), len(indices)))\ndef g(n=5):\n    from itertools import combinations\n    return [subset for subset in combinations(range(n), len(indices)) if sum(subset) % n == 0]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 105,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(indices: List[int], n=5) -> bool:\n    \"\"\"Find the indices of all subsets of a set of n elements where the sum of the subset is divisible by n.\"\"\"\n    from itertools import combinations\n    return all(sum(indices[i] for i in subset) % n == 0 for subset in combinations(range(n), len(indices)))",
        "solution_func": "def g(n=5):\n    from itertools import combinations\n    return [subset for subset in combinations(range(n), len(indices)) if sum(subset) % n == 0]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(indices: List[int], s='abcde') -> bool:\n    \"\"\"Find the indices of all substrings in string s that are palindromes.\"\"\"\n    return all(s[i:j+1] == s[i:j+1][::-1] for i in indices for j in indices if i <= j)\ndef g(s='abcde'):\n    return [i for i in range(len(s)) for j in range(i, len(s)) if s[i:j+1] == s[i:j+1][::-1]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 105,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(indices: List[int], s='abcde') -> bool:\n    \"\"\"Find the indices of all substrings in string s that are palindromes.\"\"\"\n    return all(s[i:j+1] == s[i:j+1][::-1] for i in indices for j in indices if i <= j)",
        "solution_func": "def g(s='abcde'):\n    return [i for i in range(len(s)) for j in range(i, len(s)) if s[i:j+1] == s[i:j+1][::-1]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if a given string is an anagram of the target string.\"\"\"\n    return sorted(s.lower()) == sorted(target.lower())\ndef g(target='hello'):\n    return ''.join(sorted(target.lower()))\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 105,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if a given string is an anagram of the target string.\"\"\"\n    return sorted(s.lower()) == sorted(target.lower())",
        "solution_func": "def g(target='hello'):\n    return ''.join(sorted(target.lower()))",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that, when multiplied together, equals the target value.\"\"\"\n    return math.prod(numbers) == target\n\ndef g(target=100):\n    return [1, target]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 106,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that, when multiplied together, equals the target value.\"\"\"\n    return math.prod(numbers) == target",
        "solution_func": "def g(target=100):\n    return [1, target]",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=10) -> bool:\n    \"\"\"Find a submatrix in the given matrix where the sum of all its elements is equal to the target sum.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 106,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=10) -> bool:\n    \"\"\"Find a submatrix in the given matrix where the sum of all its elements is equal to the target sum.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], substring='abc') -> bool:\n    \"\"\"Determine if any of the strings in the list contain the given substring.\"\"\"\n    return any((substring in s for s in strings))\n\ndef g(substring='abc'):\n    return ['abcdef', 'xyz', 'pqr']\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 106,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(strings: List[str], substring='abc') -> bool:\n    \"\"\"Determine if any of the strings in the list contain the given substring.\"\"\"\n    return any((substring in s for s in strings))",
        "solution_func": "def g(substring='abc'):\n    return ['abcdef', 'xyz', 'pqr']",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"Check if a given substring exists in the given string.\"\"\"\n    return substr in string\ndef g(substr='abc'):\n    return 'xyz' + substr + 'def'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 106,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"Check if a given substring exists in the given string.\"\"\"\n    return substr in string",
        "solution_func": "def g(substr='abc'):\n    return 'xyz' + substr + 'def'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Determine if the sum of the digits of a given number is divisible by m.\"\"\"\n    return sum(int(digit) for digit in str(n)) % m == 0\ndef g(m=10):\n    return int('9' * (m + 1))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 106,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Determine if the sum of the digits of a given number is divisible by m.\"\"\"\n    return sum(int(digit) for digit in str(n)) % m == 0",
        "solution_func": "def g(m=10):\n    return int('9' * (m + 1))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, n=3) -> bool:\n    \"\"\"Check if a given string is a palindrome.\"\"\"\n    return string == string[::-1]\ndef g(n=3):\n    return 'race' + 'car' if n == 0 else 'madam' if n == 1 else 'python'\nassert f(g())\n",
        "emb": null,
        "idx_generation": 106,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, n=3) -> bool:\n    \"\"\"Check if a given string is a palindrome.\"\"\"\n    return string == string[::-1]",
        "solution_func": "def g(n=3):\n    return 'race' + 'car' if n == 0 else 'madam' if n == 1 else 'python'",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(m: int, n: int, k: int, min_sum=10) -> bool:\n    \"\"\"Find a pair of integers (a,b) such that a + b >= min_sum and a is divisible by m while b is divisible by n.\"\"\"\n    assert m > 0 and n > 0 and min_sum > 0, 'Hint: All inputs should be positive.'\n    for a in range(m, min_sum):\n        if a % m == 0 and (min_sum - a) % n == 0:\n            return True\n    return False\ndef g(m=3, n=4, k=5, min_sum=10):\n    return (m, min_sum - m)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 106,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(m: int, n: int, k: int, min_sum=10) -> bool:\n    \"\"\"Find a pair of integers (a,b) such that a + b >= min_sum and a is divisible by m while b is divisible by n.\"\"\"\n    assert m > 0 and n > 0 and min_sum > 0, 'Hint: All inputs should be positive.'\n    for a in range(m, min_sum):\n        if a % m == 0 and (min_sum - a) % n == 0:\n            return True\n    return False",
        "solution_func": "def g(m=3, n=4, k=5, min_sum=10):\n    return (m, min_sum - m)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], last_name='Smith') -> bool:\n    \"\"\"Check if a specific last name occurs in a list of names in a case-insensitive manner.\"\"\"\n    assert len(names) > 0, 'Hint: The list of names should not be empty.'\n    return any(name.lower() == last_name.lower() for name in names)\ndef g(last_name='Smith'):\n    return ['John', 'Doe', 'Smith', 'Jane']\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 106,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(names: List[str], last_name='Smith') -> bool:\n    \"\"\"Check if a specific last name occurs in a list of names in a case-insensitive manner.\"\"\"\n    assert len(names) > 0, 'Hint: The list of names should not be empty.'\n    return any(name.lower() == last_name.lower() for name in names)",
        "solution_func": "def g(last_name='Smith'):\n    return ['John', 'Doe', 'Smith', 'Jane']",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, c='a') -> bool:\n    \"\"\"Check if a specific character occurs exactly twice in a given string.\"\"\"\n    count = 0\n    for char in s:\n        if char == c:\n            count += 1\n    return count == 2\ndef g(c='a'):\n    return \"abacaba\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 106,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, c='a') -> bool:\n    \"\"\"Check if a specific character occurs exactly twice in a given string.\"\"\"\n    count = 0\n    for char in s:\n        if char == c:\n            count += 1\n    return count == 2",
        "solution_func": "def g(c='a'):\n    return \"abacaba\"",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Find two numbers in a list that add up to a target sum.\"\"\"\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 106,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Find two numbers in a list that add up to a target sum.\"\"\"\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n=1000) -> bool:\n    \"\"\"Find the sum of all pairs of numbers in the list that add up to n.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False\n\ndef g(n=1000):\n    return [i for i in range(n)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 107,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], n=1000) -> bool:\n    \"\"\"Find the sum of all pairs of numbers in the list that add up to n.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False",
        "solution_func": "def g(n=1000):\n    return [i for i in range(n)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=100) -> bool:\n    \"\"\"Find the number of occurrences of the letter 'a' in the string.\"\"\"\n    count = 0\n    for char in s:\n        if char == 'a':\n            count += 1\n    return count == n\n\ndef g(n=100):\n    return 'a' * n\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 107,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=100) -> bool:\n    \"\"\"Find the number of occurrences of the letter 'a' in the string.\"\"\"\n    count = 0\n    for char in s:\n        if char == 'a':\n            count += 1\n    return count == n",
        "solution_func": "def g(n=100):\n    return 'a' * n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Find the sum of all elements in the matrix that are greater than the target.\"\"\"\n    total = 0\n    for row in matrix:\n        for num in row:\n            if num > target:\n                total += num\n    return total == target\n\ndef g(target=50):\n    return [[i for i in range(10)] for _ in range(10)]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 107,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Find the sum of all elements in the matrix that are greater than the target.\"\"\"\n    total = 0\n    for row in matrix:\n        for num in row:\n            if num > target:\n                total += num\n    return total == target",
        "solution_func": "def g(target=50):\n    return [[i for i in range(10)] for _ in range(10)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(d: datetime.date) -> bool:\n    \"\"\"Check if the given date is a Friday.\"\"\"\n    return d.weekday() == 4\n\ndef g():\n    return datetime.date(2022, 12, 30)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 107,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(d: datetime.date) -> bool:\n    \"\"\"Check if the given date is a Friday.\"\"\"\n    return d.weekday() == 4",
        "solution_func": "def g():\n    return datetime.date(2022, 12, 30)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: list) -> bool:\n    \"\"\"Check if the given list is sorted in non-decreasing order.\"\"\"\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))\n\ndef g():\n    arr = [random.randint(0, 100) for _ in range(10)]\n    arr.sort()\n    return arr\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "idx_generation": 107,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(arr: list) -> bool:\n    \"\"\"Check if the given list is sorted in non-decreasing order.\"\"\"\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))",
        "solution_func": "def g():\n    arr = [random.randint(0, 100) for _ in range(10)]\n    arr.sort()\n    return arr",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if n is a perfect square and m is a perfect cube.\"\"\"\n    return math.isqrt(n)**2 == n and round(m**(1/3))**3 == m\n\ndef g():\n    return 16, 27\n\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 107,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if n is a perfect square and m is a perfect cube.\"\"\"\n    return math.isqrt(n)**2 == n and round(m**(1/3))**3 == m",
        "solution_func": "def g():\n    return 16, 27",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[List[int]], target=5) -> bool:\n    \"\"\"Given a list of lists of integers, find any sublist of length 3 where the sum of the first two integers is equal to the third integer.\nSample Input:\n`[[1,2,3],[4,5,9],[6,7,13]]`\nSample Output:\n`[4,5,9]`\"\"\"\n    return any((lst[i][0] + lst[i][1] == lst[i][2] for i in range(len(lst))))\ndef g(target=5):\n    return [[1, 2, 3], [4, 5, 9], [6, 7, 13]]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 107,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[List[int]], target=5) -> bool:\n    \"\"\"Given a list of lists of integers, find any sublist of length 3 where the sum of the first two integers is equal to the third integer.\nSample Input:\n`[[1,2,3],[4,5,9],[6,7,13]]`\nSample Output:\n`[4,5,9]`\"\"\"\n    return any((lst[i][0] + lst[i][1] == lst[i][2] for i in range(len(lst))))",
        "solution_func": "def g(target=5):\n    return [[1, 2, 3], [4, 5, 9], [6, 7, 13]]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, target=2) -> bool:\n    \"\"\"Given a string, find any substring of length 3 where the first and third characters are the same.\nSample Input:\n`\"abcab\"`\nSample Output:\n`\"aba\"`\"\"\"\n    return any((s[i] == s[i + 2] for i in range(len(s) - 2)))\ndef g(target=2):\n    return \"abcab\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 107,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=2) -> bool:\n    \"\"\"Given a string, find any substring of length 3 where the first and third characters are the same.\nSample Input:\n`\"abcab\"`\nSample Output:\n`\"aba\"`\"\"\"\n    return any((s[i] == s[i + 2] for i in range(len(s) - 2)))",
        "solution_func": "def g(target=2):\n    return \"abcab\"",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, target=100) -> bool:\n    \"\"\"Given a positive integer, find any pair of positive integers (a, b) where a^2 + b^2 = n and a * b = target.\nSample Input:\n`25`\nSample Output:\n`(5, 20)`\"\"\"\n    for a in range(1, int(math.sqrt(n)) + 1):\n        if n % a == 0:\n            b = n // a\n            if a * b == target:\n                return True\n    return False\ndef g(target=100):\n    return 25\nassert f(g())\n",
        "emb": null,
        "idx_generation": 107,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, target=100) -> bool:\n    \"\"\"Given a positive integer, find any pair of positive integers (a, b) where a^2 + b^2 = n and a * b = target.\nSample Input:\n`25`\nSample Output:\n`(5, 20)`\"\"\"\n    for a in range(1, int(math.sqrt(n)) + 1):\n        if n % a == 0:\n            b = n // a\n            if a * b == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return 25",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, find a pair of numbers from the list that add up to the target.\n    Return True if such a pair exists, False otherwise.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(target=10):\n    return [3, 5, 2]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 107,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, find a pair of numbers from the list that add up to the target.\n    Return True if such a pair exists, False otherwise.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))",
        "solution_func": "def g(target=10):\n    return [3, 5, 2]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=1.5, b=3.8) -> bool:\n    \"\"\"Check if the given number is within the specified range\"\"\"\n    return math.floor(a) <= x <= math.ceil(b)\n    \ndef g(a=1.5, b=3.8):\n    return (a + b) / 2\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 108,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=1.5, b=3.8) -> bool:\n    \"\"\"Check if the given number is within the specified range\"\"\"\n    return math.floor(a) <= x <= math.ceil(b)",
        "solution_func": "def g(a=1.5, b=3.8):\n    return (a + b) / 2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Check if it is possible to obtain the target number using the given 4 numbers and basic arithmetic operations\"\"\"\n    operators = ['+', '-', '*', '/']\n    for perm in permutations(nums):\n        for op1 in operators:\n            for op2 in operators:\n                for op3 in operators:\n                    expression = f\"({perm[0]} {op1} {perm[1]}) {op2} ({perm[2]} {op3} {perm[3]})\"\n                    try:\n                        result = eval(expression)\n                        if result == target:\n                            return True\n                    except ZeroDivisionError:\n                        pass\n    return False\n    \ndef g(nums=[4, 6, 8, 2]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 108,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Check if it is possible to obtain the target number using the given 4 numbers and basic arithmetic operations\"\"\"\n    operators = ['+', '-', '*', '/']\n    for perm in permutations(nums):\n        for op1 in operators:\n            for op2 in operators:\n                for op3 in operators:\n                    expression = f\"({perm[0]} {op1} {perm[1]}) {op2} ({perm[2]} {op3} {perm[3]})\"\n                    try:\n                        result = eval(expression)\n                        if result == target:\n                            return True\n                    except ZeroDivisionError:\n                        pass\n    return False",
        "solution_func": "def g(nums=[4, 6, 8, 2]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], n=5) -> bool:\n    \"\"\"Check if the given list of numbers contains the randomly chosen number\"\"\"\n    return n in nums\n    \ndef g(n=5):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    random.shuffle(nums)\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 108,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], n=5) -> bool:\n    \"\"\"Check if the given list of numbers contains the randomly chosen number\"\"\"\n    return n in nums",
        "solution_func": "def g(n=5):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    random.shuffle(nums)\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, m: int, a=12, b=6) -> bool:\n    \"\"\"Find the largest integer x such that x is a multiple of a, x is a factor of n, and x is divisible by m\"\"\"\n    return n % (a * b) == 0 and math.gcd(n, a * b) == a * b and n % m == 0\n\ndef g(a=12, b=6):\n    return a * b\n\nassert f(g(), 36, 18)\n",
        "emb": null,
        "idx_generation": 108,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, m: int, a=12, b=6) -> bool:\n    \"\"\"Find the largest integer x such that x is a multiple of a, x is a factor of n, and x is divisible by m\"\"\"\n    return n % (a * b) == 0 and math.gcd(n, a * b) == a * b and n % m == 0",
        "solution_func": "def g(a=12, b=6):\n    return a * b",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, sub='abc', k=2) -> bool:\n    \"\"\"Find the number of times a given substring appears in a string, at least k times\"\"\"\n    return s.count(sub) >= k\n\ndef g(sub='abc', k=2):\n    return sub * k\n\nassert f(g(), 'abcabc', 3)\n",
        "emb": null,
        "idx_generation": 108,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, sub='abc', k=2) -> bool:\n    \"\"\"Find the number of times a given substring appears in a string, at least k times\"\"\"\n    return s.count(sub) >= k",
        "solution_func": "def g(sub='abc', k=2):\n    return sub * k",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], k=8) -> bool:\n    \"\"\"Find a list where the sum of any k consecutive integers is divisible by k\"\"\"\n    return all(sum(lst[i:i+k]) % k == 0 for i in range(len(lst)-k+1))\n\ndef g(k=8):\n    return [i*k for i in range(1, k+1)]\n\nassert f(g(), 8)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 108,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], k=8) -> bool:\n    \"\"\"Find a list where the sum of any k consecutive integers is divisible by k\"\"\"\n    return all(sum(lst[i:i+k]) % k == 0 for i in range(len(lst)-k+1))",
        "solution_func": "def g(k=8):\n    return [i*k for i in range(1, k+1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=7, b=4, c=9) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c even integers)\"\"\"\n    return n + a == sum([b * (2*i) for i in range(c)])\ndef g(a=7, b=4, c=9):\n    return -a + sum([b * (2*i) for i in range(c)])\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 108,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=7, b=4, c=9) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c even integers)\"\"\"\n    return n + a == sum([b * (2*i) for i in range(c)])",
        "solution_func": "def g(a=7, b=4, c=9):\n    return -a + sum([b * (2*i) for i in range(c)])",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: float, a=987654321) -> bool:\n    \"\"\"Find a positive number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** (-4) and x > 0\ndef g(a=987654321):\n    return a ** 0.5\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 108,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: float, a=987654321) -> bool:\n    \"\"\"Find a positive number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** (-4) and x > 0",
        "solution_func": "def g(a=987654321):\n    return a ** 0.5",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=-12345678, b=-87654321, c=-98765432, d=123456789) -> bool:\n    \"\"\"Find the intersection of two lines.\nSolution should be a list of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-4)\ndef g(a=-12345678, b=-87654321, c=-98765432, d=123456789):\n    return [d - b, a - c]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 108,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: List[int], a=-12345678, b=-87654321, c=-98765432, d=123456789) -> bool:\n    \"\"\"Find the intersection of two lines.\nSolution should be a list of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-4)",
        "solution_func": "def g(a=-12345678, b=-87654321, c=-98765432, d=123456789):\n    return [d - b, a - c]",
        "map_ix": [
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, year=2022, month=1, day=1) -> bool:\n    \"\"\"Check if the given date is in the future.\"\"\"\n    return dt > datetime.datetime(year, month, day)\n    \ndef g(year=2022, month=1, day=1):\n    return datetime.datetime(year + 1, month, day)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 108,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, year=2022, month=1, day=1) -> bool:\n    \"\"\"Check if the given date is in the future.\"\"\"\n    return dt > datetime.datetime(year, month, day)",
        "solution_func": "def g(year=2022, month=1, day=1):\n    return datetime.datetime(year + 1, month, day)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Find two numbers in a list that add up to a given target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=50):\n    return [10, 20, 30, 40]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 109,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Find two numbers in a list that add up to a given target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(target=50):\n    return [10, 20, 30, 40]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr=\"python\") -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substr in s\ndef g(substr=\"python\"):\n    return \"I love python programming\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 109,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr=\"python\") -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substr in s",
        "solution_func": "def g(substr=\"python\"):\n    return \"I love python programming\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a combination of numbers in a list that add up to a given target\"\"\"\n    from itertools import combinations\n    return any((sum(comb) == target for r in range(1, len(nums)+1) for comb in combinations(nums, r)))\ndef g(target=100):\n    return [10, 20, 30, 40]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 109,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a combination of numbers in a list that add up to a given target\"\"\"\n    from itertools import combinations\n    return any((sum(comb) == target for r in range(1, len(nums)+1) for comb in combinations(nums, r)))",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=25, axis=1) -> bool:\n    \"\"\"Check if the sum of elements along a given axis of a matrix is equal to a target value\"\"\"\n    return np.sum(matrix, axis=axis) == target\n\ndef g(target=25, axis=1):\n    matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 109,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=25, axis=1) -> bool:\n    \"\"\"Check if the sum of elements along a given axis of a matrix is equal to a target value\"\"\"\n    return np.sum(matrix, axis=axis) == target",
        "solution_func": "def g(target=25, axis=1):\n    matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, year=2023, month=12, day=31) -> bool:\n    \"\"\"Check if a given date is the last day of the year\"\"\"\n    return date.year == year and date.month == month and date.day == day\n\ndef g(year=2023, month=12, day=31):\n    return datetime.date(year, month, day)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 109,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, year=2023, month=12, day=31) -> bool:\n    \"\"\"Check if a given date is the last day of the year\"\"\"\n    return date.year == year and date.month == month and date.day == day",
        "solution_func": "def g(year=2023, month=12, day=31):\n    return datetime.date(year, month, day)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport itertools\n\ndef f(string: str, substring='abc', count=3) -> bool:\n    \"\"\"Check if a string contains a certain number of permutations of a given substring\"\"\"\n    perms = [''.join(p) for p in itertools.permutations(substring)]\n    return sum([substring in string[i:] for i in range(len(string) - len(substring) + 1)]) == count\n\ndef g(substring='abc', count=3):\n    return substring * count\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 109,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\n\ndef f(string: str, substring='abc', count=3) -> bool:\n    \"\"\"Check if a string contains a certain number of permutations of a given substring\"\"\"\n    perms = [''.join(p) for p in itertools.permutations(substring)]\n    return sum([substring in string[i:] for i in range(len(string) - len(substring) + 1)]) == count",
        "solution_func": "def g(substring='abc', count=3):\n    return substring * count",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int, target=10, operation='multiply') -> bool:\n    \"\"\"Perform a mathematical operation on the target number and return True if the result matches the given number.\"\"\"\n    if operation == 'multiply':\n        return target * target == num\n    elif operation == 'divide':\n        return target / target == num\n    elif operation == 'add':\n        return target + target == num\n    elif operation == 'subtract':\n        return target - target == num\n    elif operation == 'power':\n        return target ** target == num\n    elif operation == 'root':\n        return math.sqrt(target) == num\n    else:\n        return False\n\ndef g(target=10, operation='multiply'):\n    if operation == 'multiply':\n        return target * target\n    elif operation == 'divide':\n        return target / target\n    elif operation == 'add':\n        return target + target\n    elif operation == 'subtract':\n        return target - target\n    elif operation == 'power':\n        return target ** target\n    elif operation == 'root':\n        return math.sqrt(target)\n    else:\n        return 0\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 109,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(num: int, target=10, operation='multiply') -> bool:\n    \"\"\"Perform a mathematical operation on the target number and return True if the result matches the given number.\"\"\"\n    if operation == 'multiply':\n        return target * target == num\n    elif operation == 'divide':\n        return target / target == num\n    elif operation == 'add':\n        return target + target == num\n    elif operation == 'subtract':\n        return target - target == num\n    elif operation == 'power':\n        return target ** target == num\n    elif operation == 'root':\n        return math.sqrt(target) == num\n    else:\n        return False",
        "solution_func": "def g(target=10, operation='multiply'):\n    if operation == 'multiply':\n        return target * target\n    elif operation == 'divide':\n        return target / target\n    elif operation == 'add':\n        return target + target\n    elif operation == 'subtract':\n        return target - target\n    elif operation == 'power':\n        return target ** target\n    elif operation == 'root':\n        return math.sqrt(target)\n    else:\n        return 0",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='apple') -> bool:\n    \"\"\"Check if a list of words contain the target word.\"\"\"\n    return target in words\n\ndef g(target='apple'):\n    return [target, 'banana', 'orange', 'grape']\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 109,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target='apple') -> bool:\n    \"\"\"Check if a list of words contain the target word.\"\"\"\n    return target in words",
        "solution_func": "def g(target='apple'):\n    return [target, 'banana', 'orange', 'grape']",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if any two numbers in a list sum up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 109,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if any two numbers in a list sum up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=7, b=3, c=5) -> bool:\n    \"\"\"Check if n is a prime number and a^b is divisible by c\"\"\"\n    is_prime = True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            is_prime = False\n            break\n    return is_prime and a**b % c == 0\n\ndef g(a=7, b=3, c=5):\n    n = 2\n    while True:\n        if all(n % i != 0 for i in range(2, int(math.sqrt(n)) + 1)):\n            return n\n        n += 1\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 109,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=7, b=3, c=5) -> bool:\n    \"\"\"Check if n is a prime number and a^b is divisible by c\"\"\"\n    is_prime = True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            is_prime = False\n            break\n    return is_prime and a**b % c == 0",
        "solution_func": "def g(a=7, b=3, c=5):\n    n = 2\n    while True:\n        if all(n % i != 0 for i in range(2, int(math.sqrt(n)) + 1)):\n            return n\n        n += 1",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=17) -> bool:\n    \"\"\"Find two numbers in a list that sum up to a target value\"\"\"\n    return any([nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))])\ndef g(target=17):\n    return [5, 12, 3, 8, 9]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 110,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=17) -> bool:\n    \"\"\"Find two numbers in a list that sum up to a target value\"\"\"\n    return any([nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))])",
        "solution_func": "def g(target=17):\n    return [5, 12, 3, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find a combination of numbers in a matrix that sum up to a target value\"\"\"\n    def helper(matrix, target, path):\n        if target == 0:\n            return True\n        if target < 0:\n            return False\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if matrix[i][j] != None:\n                    path.append(matrix[i][j])\n                    temp = matrix[i][j]\n                    matrix[i][j] = None\n                    if helper(matrix, target - temp, path):\n                        return True\n                    matrix[i][j] = temp\n                    path.pop()\n        return False\n    \n    return helper(matrix, target, [])\ndef g(target=100):\n    return [[4, 12, 7], [9, 5, 3], [8, 2, 10]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 110,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find a combination of numbers in a matrix that sum up to a target value\"\"\"\n    def helper(matrix, target, path):\n        if target == 0:\n            return True\n        if target < 0:\n            return False\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if matrix[i][j] != None:\n                    path.append(matrix[i][j])\n                    temp = matrix[i][j]\n                    matrix[i][j] = None\n                    if helper(matrix, target - temp, path):\n                        return True\n                    matrix[i][j] = temp\n                    path.pop()\n        return False\n    \n    return helper(matrix, target, [])",
        "solution_func": "def g(target=100):\n    return [[4, 12, 7], [9, 5, 3], [8, 2, 10]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, sub: str) -> bool:\n    \"\"\"Check if a given substring is a palindrome\"\"\"\n    return sub == sub[::-1]\ndef g(sub='racecar'):\n    return \"The quick brown fox jumps over the lazy \" + sub\nassert f(g())\n",
        "emb": null,
        "idx_generation": 110,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, sub: str) -> bool:\n    \"\"\"Check if a given substring is a palindrome\"\"\"\n    return sub == sub[::-1]",
        "solution_func": "def g(sub='racecar'):\n    return \"The quick brown fox jumps over the lazy \" + sub",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int, divisor=3, power=2) -> bool:\n    \"\"\"Check if the square of a number is divisible by another number\"\"\"\n    return (num**power) % divisor == 0\n\ndef g(divisor=3, power=2):\n    num = int(math.sqrt(divisor)) + 1\n    while True:\n        if f(num, divisor, power):\n            return num\n        num += 1\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 110,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(num: int, divisor=3, power=2) -> bool:\n    \"\"\"Check if the square of a number is divisible by another number\"\"\"\n    return (num**power) % divisor == 0",
        "solution_func": "def g(divisor=3, power=2):\n    num = int(math.sqrt(divisor)) + 1\n    while True:\n        if f(num, divisor, power):\n            return num\n        num += 1",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: list, target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers that sum up to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return numbers\nassert f(g())\n",
        "emb": null,
        "idx_generation": 110,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: list, target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers that sum up to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(numbers=[1, 2, 3, 4, 5]):\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(num: int, target=7) -> bool:\n    \"\"\"Check if a random number is equal to the target\"\"\"\n    return num == target\n\ndef g(target=7):\n    return random.randint(1, 10)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 110,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(num: int, target=7) -> bool:\n    \"\"\"Check if a random number is equal to the target\"\"\"\n    return num == target",
        "solution_func": "def g(target=7):\n    return random.randint(1, 10)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=18) -> bool:\n    \"\"\"Find a row in the matrix where the sum of its elements is equal to the target_sum\"\"\"\n    for row in matrix:\n        if sum(row) == target_sum:\n            return True\n    return False\n\ndef g(target_sum=18):\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 110,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=18) -> bool:\n    \"\"\"Find a row in the matrix where the sum of its elements is equal to the target_sum\"\"\"\n    for row in matrix:\n        if sum(row) == target_sum:\n            return True\n    return False",
        "solution_func": "def g(target_sum=18):\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]], target_distance=5) -> bool:\n    \"\"\"Find a pair of points from the given list that have a distance equal to the target_distance\"\"\"\n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n            if distance == target_distance:\n                return True\n    return False\n\ndef g(target_distance=5):\n    points = [\n        (0, 0),\n        (3, 4),\n        (6, 8),\n        (9, 12)\n    ]\n    return points\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 110,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(points: List[Tuple[int, int]], target_distance=5) -> bool:\n    \"\"\"Find a pair of points from the given list that have a distance equal to the target_distance\"\"\"\n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n            if distance == target_distance:\n                return True\n    return False",
        "solution_func": "def g(target_distance=5):\n    points = [\n        (0, 0),\n        (3, 4),\n        (6, 8),\n        (9, 12)\n    ]\n    return points",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_product=24) -> bool:\n    \"\"\"Find a pair of numbers from the given list that have a product equal to the target_product\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] * numbers[j] == target_product:\n                return True\n    return False\n\ndef g(target_product=24):\n    numbers = [1, 2, 3, 4, 5, 6]\n    return numbers\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 110,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target_product=24) -> bool:\n    \"\"\"Find a pair of numbers from the given list that have a product equal to the target_product\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] * numbers[j] == target_product:\n                return True\n    return False",
        "solution_func": "def g(target_product=24):\n    numbers = [1, 2, 3, 4, 5, 6]\n    return numbers",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, prime_factors=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if a given number is divisible by all the provided prime factors.\nThe number is divisible if the remainder of the division is 0.\"\"\"\n    return all(n % p == 0 for p in prime_factors)\n\ndef g(prime_factors=[2, 3, 5, 7, 11, 13]):\n    return math.prod(prime_factors)\n    \nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 110,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, prime_factors=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if a given number is divisible by all the provided prime factors.\nThe number is divisible if the remainder of the division is 0.\"\"\"\n    return all(n % p == 0 for p in prime_factors)",
        "solution_func": "def g(prime_factors=[2, 3, 5, 7, 11, 13]):\n    return math.prod(prime_factors)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, numbers=[3, 5, 10, 15, 20, 25, 30]) -> bool:\n    \"\"\"Find the sum of all numbers that are divisible by n.\"\"\"\n    return sum((x for x in numbers if x % n == 0)) == n\ndef g(numbers=[3, 5, 10, 15, 20, 25, 30]):\n    return sum(numbers)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 111,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, numbers=[3, 5, 10, 15, 20, 25, 30]) -> bool:\n    \"\"\"Find the sum of all numbers that are divisible by n.\"\"\"\n    return sum((x for x in numbers if x % n == 0)) == n",
        "solution_func": "def g(numbers=[3, 5, 10, 15, 20, 25, 30]):\n    return sum(numbers)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python', vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a word contains all the vowels in a given list.\"\"\"\n    return all((vowel in s for vowel in vowels))\ndef g(word='python', vowels=['a', 'e', 'i', 'o', 'u']):\n    return word + ''.join(vowels)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 111,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, word='python', vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a word contains all the vowels in a given list.\"\"\"\n    return all((vowel in s for vowel in vowels))",
        "solution_func": "def g(word='python', vowels=['a', 'e', 'i', 'o', 'u']):\n    return word + ''.join(vowels)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m: int, matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Check if a given number is present in a matrix.\"\"\"\n    return any((n in row for row in matrix)) and any((n in column for column in zip(*matrix)))\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return sum([row for row in matrix], [])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 111,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m: int, matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Check if a given number is present in a matrix.\"\"\"\n    return any((n in row for row in matrix)) and any((n in column for column in zip(*matrix)))",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return sum([row for row in matrix], [])",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return num >= 0 and int(num**0.5)**2 == num\ndef g():\n    return 25**2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 111,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return num >= 0 and int(num**0.5)**2 == num",
        "solution_func": "def g():\n    return 25**2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if the given word is a substring of the input string s.\"\"\"\n    return word in s\ndef g(word='python'):\n    return 'I love python programming'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 111,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if the given word is a substring of the input string s.\"\"\"\n    return word in s",
        "solution_func": "def g(word='python'):\n    return 'I love python programming'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 111,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=123456789, b=987654321) -> bool:\n    \"\"\"Check if the sum of the squares of two integers is equal to a given number\"\"\"\n    return (math.sqrt(n - a**2) == b) or (math.sqrt(n - b**2) == a)\n    \ndef g(a=123456789, b=987654321):\n    return a**2 + b**2\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 111,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=123456789, b=987654321) -> bool:\n    \"\"\"Check if the sum of the squares of two integers is equal to a given number\"\"\"\n    return (math.sqrt(n - a**2) == b) or (math.sqrt(n - b**2) == a)",
        "solution_func": "def g(a=123456789, b=987654321):\n    return a**2 + b**2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport itertools\n\ndef f(n: int, lst=['a', 'b', 'c', 'd']):\n    \"\"\"Check if there is a subsequence in a list that adds up to a given number\"\"\"\n    subseqs = []\n    for r in range(1, len(lst) + 1):\n        subseqs += list(itertools.combinations(lst, r))\n    \n    for subseq in subseqs:\n        if sum(subseq) == n:\n            return True\n    return False\n\ndef g(lst=['a', 'b', 'c', 'd']):\n    return lst\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 111,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\n\ndef f(n: int, lst=['a', 'b', 'c', 'd']):\n    \"\"\"Check if there is a subsequence in a list that adds up to a given number\"\"\"\n    subseqs = []\n    for r in range(1, len(lst) + 1):\n        subseqs += list(itertools.combinations(lst, r))\n    \n    for subseq in subseqs:\n        if sum(subseq) == n:\n            return True\n    return False",
        "solution_func": "def g(lst=['a', 'b', 'c', 'd']):\n    return lst",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, a=10, b=20, c=30):\n    \"\"\"Check if the sum of three random integers is greater than a given number\"\"\"\n    num1 = random.randint(0, a)\n    num2 = random.randint(0, b)\n    num3 = random.randint(0, c)\n    \n    return (num1 + num2 + num3) > n\n\ndef g(a=10, b=20, c=30):\n    return a + b + c\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 111,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, a=10, b=20, c=30):\n    \"\"\"Check if the sum of three random integers is greater than a given number\"\"\"\n    num1 = random.randint(0, a)\n    num2 = random.randint(0, b)\n    num3 = random.randint(0, c)\n    \n    return (num1 + num2 + num3) > n",
        "solution_func": "def g(a=10, b=20, c=30):\n    return a + b + c",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\ndef f(n: int, x=10, y=5) -> bool:\n    \"\"\"Check if the given number is a perfect square and lies within the range (x, y)\"\"\"\n    return math.isqrt(n)**2 == n and x < n < y\ndef g(x=10, y=5):\n    return (x+y)//2\nassert f(g())\n",
        "emb": null,
        "idx_generation": 111,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\ndef f(n: int, x=10, y=5) -> bool:\n    \"\"\"Check if the given number is a perfect square and lies within the range (x, y)\"\"\"\n    return math.isqrt(n)**2 == n and x < n < y",
        "solution_func": "def g(x=10, y=5):\n    return (x+y)//2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a='hello', b=5) -> bool:\n    \"\"\"Check if a string contains a certain character a certain number of times\"\"\"\n    return x.count(a) == b\ndef g(a='hello', b=5):\n    return a * b\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 112,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, a='hello', b=5) -> bool:\n    \"\"\"Check if a string contains a certain character a certain number of times\"\"\"\n    return x.count(a) == b",
        "solution_func": "def g(a='hello', b=5):\n    return a * b",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: list, a=10, b=3) -> bool:\n    \"\"\"Check if a list contains two numbers that add up to a certain value\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == a:\n                return True\n    return False\ndef g(a=10, b=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, b]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 112,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: list, a=10, b=3) -> bool:\n    \"\"\"Check if a list contains two numbers that add up to a certain value\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == a:\n                return True\n    return False",
        "solution_func": "def g(a=10, b=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, b]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: bool, a=True, b=False) -> bool:\n    \"\"\"Check if a boolean value matches a certain pattern\"\"\"\n    return x == (a and not b)\ndef g(a=True, b=False):\n    return a or b\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 112,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: bool, a=True, b=False) -> bool:\n    \"\"\"Check if a boolean value matches a certain pattern\"\"\"\n    return x == (a and not b)",
        "solution_func": "def g(a=True, b=False):\n    return a or b",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=15) -> bool:\n    \"\"\"Given a list of integers and a target sum, find if there exists a subset of the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if target < 0 or len(nums) == 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=15):\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 112,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=15) -> bool:\n    \"\"\"Given a list of integers and a target sum, find if there exists a subset of the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if target < 0 or len(nums) == 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=15):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, pattern='ABC') -> bool:\n    \"\"\"Check if a given string matches a given pattern, where each letter in the pattern represents a unique character in the string\"\"\"\n    def is_match(string, pattern, mapping, used):\n        if len(string) == 0 and len(pattern) == 0:\n            return True\n        if len(string) == 0 or len(pattern) == 0:\n            return False\n        char = pattern[0]\n        if char in mapping:\n            if string[:len(mapping[char])] != mapping[char]:\n                return False\n            return is_match(string[len(mapping[char]):], pattern[1:], mapping, used)\n        else:\n            for i in range(1, len(string) - len(pattern) + 2):\n                if string[:i] in used:\n                    continue\n                mapping[char] = string[:i]\n                used.add(string[:i])\n                if is_match(string[i:], pattern[1:], mapping, used):\n                    return True\n                del mapping[char]\n                used.remove(string[:i])\n            return False\n    return is_match(string, pattern, {}, set())\ndef g(pattern='ABC'):\n    return pattern\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 112,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, pattern='ABC') -> bool:\n    \"\"\"Check if a given string matches a given pattern, where each letter in the pattern represents a unique character in the string\"\"\"\n    def is_match(string, pattern, mapping, used):\n        if len(string) == 0 and len(pattern) == 0:\n            return True\n        if len(string) == 0 or len(pattern) == 0:\n            return False\n        char = pattern[0]\n        if char in mapping:\n            if string[:len(mapping[char])] != mapping[char]:\n                return False\n            return is_match(string[len(mapping[char]):], pattern[1:], mapping, used)\n        else:\n            for i in range(1, len(string) - len(pattern) + 2):\n                if string[:i] in used:\n                    continue\n                mapping[char] = string[:i]\n                used.add(string[:i])\n                if is_match(string[i:], pattern[1:], mapping, used):\n                    return True\n                del mapping[char]\n                used.remove(string[:i])\n            return False\n    return is_match(string, pattern, {}, set())",
        "solution_func": "def g(pattern='ABC'):\n    return pattern",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target value, find if there exists a pair of numbers in the list that sum up to the target value\"\"\"\n    def two_sum(nums, target):\n        num_set = set()\n        for num in nums:\n            complement = target - num\n            if complement in num_set:\n                return True\n            num_set.add(num)\n        return False\n    return two_sum(nums, target)\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())",
        "emb": null,
        "idx_generation": 112,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target value, find if there exists a pair of numbers in the list that sum up to the target value\"\"\"\n    def two_sum(nums, target):\n        num_set = set()\n        for num in nums:\n            complement = target - num\n            if complement in num_set:\n                return True\n            num_set.add(num)\n        return False\n    return two_sum(nums, target)",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date_str: str, format_str: str) -> bool:\n    \"\"\"Check if the given date string matches the specified format string.\"\"\"\n    try:\n        datetime.strptime(date_str, format_str)\n        return True\n    except ValueError:\n        return False\n\ndef g(format_str: str):\n    return datetime.now().strftime(format_str)\n\nassert f(g(\"%Y-%m-%d %H:%M:%S\"), \"%Y-%m-%d %H:%M:%S\")\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 112,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date_str: str, format_str: str) -> bool:\n    \"\"\"Check if the given date string matches the specified format string.\"\"\"\n    try:\n        datetime.strptime(date_str, format_str)\n        return True\n    except ValueError:\n        return False",
        "solution_func": "def g(format_str: str):\n    return datetime.now().strftime(format_str)",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g(s: str):\n    return s[::-1]\n\nassert f(g(\"racecar\"))\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 112,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g(s: str):\n    return s[::-1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return math.isqrt(n)**2 == n\n\ndef g():\n    return 100\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 112,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return math.isqrt(n)**2 == n",
        "solution_func": "def g():\n    return 100",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Find a string that contains a certain number of consecutive digits\"\"\"\n    for i in range(len(s)-n+1):\n        if s[i:i+n].isdigit():\n            return True\n    return False\ndef g(n=3):\n    return \"abc123xyz\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 112,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Find a string that contains a certain number of consecutive digits\"\"\"\n    for i in range(len(s)-n+1):\n        if s[i:i+n].isdigit():\n            return True\n    return False",
        "solution_func": "def g(n=3):\n    return \"abc123xyz\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[2,4,6,8,10]) -> bool:\n    \"\"\"Check if a given number is present in the list\"\"\"\n    return n in lst\ndef g(lst=[2,4,6,8,10]):\n    return lst[0]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 113,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[2,4,6,8,10]) -> bool:\n    \"\"\"Check if a given number is present in the list\"\"\"\n    return n in lst",
        "solution_func": "def g(lst=[2,4,6,8,10]):\n    return lst[0]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc', count=3) -> bool:\n    \"\"\"Check if a given substring occurs count number of times in a string\"\"\"\n    return s.count(substring) == count\ndef g(substring='abc', count=3):\n    return substring * count\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 113,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='abc', count=3) -> bool:\n    \"\"\"Check if a given substring occurs count number of times in a string\"\"\"\n    return s.count(substring) == count",
        "solution_func": "def g(substring='abc', count=3):\n    return substring * count",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: List[int], n=5, total=10) -> bool:\n    \"\"\"Check if the sum of n elements in the list is equal to a given total\"\"\"\n    return sum(lst[:n]) == total\ndef g(n=5, total=10):\n    return [1] * n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 113,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], n=5, total=10) -> bool:\n    \"\"\"Check if the sum of n elements in the list is equal to a given total\"\"\"\n    return sum(lst[:n]) == total",
        "solution_func": "def g(n=5, total=10):\n    return [1] * n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target_sum\"\"\"\n    return any((nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target_sum=10):\n    return [1, 2, 3, 4, target_sum-10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 113,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target_sum\"\"\"\n    return any((nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(target_sum=10):\n    return [1, 2, 3, 4, target_sum-10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if there exists a substring in s that contains exactly k vowels\"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return any((s[i:j+1].count(vowel) == k for i in range(len(s)) for j in range(i, len(s)) for vowel in vowels))\ndef g(k=3):\n    return 'aeiou' * k\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 113,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if there exists a substring in s that contains exactly k vowels\"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return any((s[i:j+1].count(vowel) == k for i in range(len(s)) for j in range(i, len(s)) for vowel in vowels))",
        "solution_func": "def g(k=3):\n    return 'aeiou' * k",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_row_sum=10) -> bool:\n    \"\"\"Check if there exists a row in the matrix that has a sum equal to the target_row_sum\"\"\"\n    return any((sum(row) == target_row_sum for row in matrix))\ndef g(target_row_sum=10):\n    return [[1, 2, 3], [4, target_row_sum-4, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 113,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_row_sum=10) -> bool:\n    \"\"\"Check if there exists a row in the matrix that has a sum equal to the target_row_sum\"\"\"\n    return any((sum(row) == target_row_sum for row in matrix))",
        "solution_func": "def g(target_row_sum=10):\n    return [[1, 2, 3], [4, target_row_sum-4, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word=\"python\") -> bool:\n    \"\"\"Given a list of words, check if the target word is an anagram of any word in the list.\"\"\"\n    return any(sorted(word) == sorted(target_word) for word in words)\ndef g(target_word=\"python\"):\n    return ['typhon', 'phyton', 'phtyon', 'pyhton', 'pyhton']\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 113,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target_word=\"python\") -> bool:\n    \"\"\"Given a list of words, check if the target word is an anagram of any word in the list.\"\"\"\n    return any(sorted(word) == sorted(target_word) for word in words)",
        "solution_func": "def g(target_word=\"python\"):\n    return ['typhon', 'phyton', 'phtyon', 'pyhton', 'pyhton']",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, volume=523.6) -> bool:\n    \"\"\"Find the radius of a sphere whose volume is close to the target volume.\"\"\"\n    return abs(4/3 * math.pi * radius**3 - volume) < 1e-03\ndef g(volume=523.6):\n    return (3 * volume / (4 * math.pi))**(1/3)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 113,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(radius: float, volume=523.6) -> bool:\n    \"\"\"Find the radius of a sphere whose volume is close to the target volume.\"\"\"\n    return abs(4/3 * math.pi * radius**3 - volume) < 1e-03",
        "solution_func": "def g(volume=523.6):\n    return (3 * volume / (4 * math.pi))**(1/3)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Given a list of numbers, find if there exists a pair of numbers whose sum is equal to the target sum.\"\"\"\n    return any(target_sum - num in numbers for num in numbers)\ndef g(target_sum=100):\n    return [50, 60, 70, 80]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 113,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Given a list of numbers, find if there exists a pair of numbers whose sum is equal to the target sum.\"\"\"\n    return any(target_sum - num in numbers for num in numbers)",
        "solution_func": "def g(target_sum=100):\n    return [50, 60, 70, 80]",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\ndef f(x: int, y: int, z=3) -> bool:\n    \"\"\"Find a value of x such that x raised to the power of y equals z\"\"\"\n    return math.pow(x, y) == z\ndef g(y: int, z=3):\n    return int(math.pow(z, 1/y))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 113,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\ndef f(x: int, y: int, z=3) -> bool:\n    \"\"\"Find a value of x such that x raised to the power of y equals z\"\"\"\n    return math.pow(x, y) == z",
        "solution_func": "def g(y: int, z=3):\n    return int(math.pow(z, 1/y))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Given a matrix of integers and a target value, determine if the target value is present in the matrix.\n    The matrix is sorted row-wise and column-wise in non-decreasing order.\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    \n    i = 0\n    j = n-1\n    \n    while i < m and j >= 0:\n        if matrix[i][j] == target:\n            return True\n        elif matrix[i][j] < target:\n            i += 1\n        else:\n            j -= 1\n    \n    return False\n\ndef g(matrix: List[List[int]], target=10):\n    return matrix\n\n# Test case\nmatrix = [\n    [1, 4, 7, 11, 15],\n    [2, 5, 8, 12, 19],\n    [3, 6, 9, 16, 22],\n    [10, 13, 14, 17, 24],\n    [18, 21, 23, 26, 30]\n]\ntarget = 9\nassert f(g(matrix, target))\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 114,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Given a matrix of integers and a target value, determine if the target value is present in the matrix.\n    The matrix is sorted row-wise and column-wise in non-decreasing order.\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    \n    i = 0\n    j = n-1\n    \n    while i < m and j >= 0:\n        if matrix[i][j] == target:\n            return True\n        elif matrix[i][j] < target:\n            i += 1\n        else:\n            j -= 1\n    \n    return False",
        "solution_func": "def g(matrix: List[List[int]], target=10):\n    return matrix\n\n# Test case\nmatrix = [\n    [1, 4, 7, 11, 15],\n    [2, 5, 8, 12, 19],\n    [3, 6, 9, 16, 22],\n    [10, 13, 14, 17, 24],\n    [18, 21, 23, 26, 30]\n]\ntarget = 9",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Given an array of integers and a target value, determine if there are two integers in the array that sum up to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums: List[int], target=16):\n    return nums\n\n# Test case\nnums = [2, 7, 11, 15, 3, 9, 5]\ntarget = 14\nassert f(g(nums, target))\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 114,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Given an array of integers and a target value, determine if there are two integers in the array that sum up to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(nums: List[int], target=16):\n    return nums\n\n# Test case\nnums = [2, 7, 11, 15, 3, 9, 5]\ntarget = 14",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Given an array of integers and a target value, determine if there is a subset of the array that sums up to the target value.\n    \"\"\"\n    n = len(nums)\n    dp = [[False] * (target+1) for _ in range(n+1)]\n    \n    for i in range(n+1):\n        dp[i][0] = True\n    \n    for i in range(1, n+1):\n        for j in range(1, target+1):\n            if nums[i-1] > j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]]\n    \n    return dp[n][target]\n\ndef g(nums: List[int], target=5):\n    return nums\n\n# Test case\nnums = [2, 4, 6, 8, 10]\ntarget = 12\nassert f(g(nums, target))\n",
        "emb": null,
        "idx_generation": 114,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Given an array of integers and a target value, determine if there is a subset of the array that sums up to the target value.\n    \"\"\"\n    n = len(nums)\n    dp = [[False] * (target+1) for _ in range(n+1)]\n    \n    for i in range(n+1):\n        dp[i][0] = True\n    \n    for i in range(1, n+1):\n        for j in range(1, target+1):\n            if nums[i-1] > j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]]\n    \n    return dp[n][target]",
        "solution_func": "def g(nums: List[int], target=5):\n    return nums\n\n# Test case\nnums = [2, 4, 6, 8, 10]\ntarget = 12",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Check if the string s is a palindrome and has exactly n characters\"\"\"\n    return s == s[::-1] and len(s) == n\ndef g(n=10):\n    s = 'a' * (n // 2)\n    if n % 2 != 0:\n        s += 'b'\n    s += 'a' * (n // 2)\n    return s\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 114,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Check if the string s is a palindrome and has exactly n characters\"\"\"\n    return s == s[::-1] and len(s) == n",
        "solution_func": "def g(n=10):\n    s = 'a' * (n // 2)\n    if n % 2 != 0:\n        s += 'b'\n    s += 'a' * (n // 2)\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there are three numbers in the list nums that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=100):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 114,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there are three numbers in the list nums that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=100):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the matrix is a magic square of order n\"\"\"\n    target_sum = n * (n**2 + 1) // 2\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag_sum = sum(matrix[i][i] for i in range(n))\n    anti_diag_sum = sum(matrix[i][n - i - 1] for i in range(n))\n    return all(s == target_sum for s in row_sums + col_sums + [diag_sum, anti_diag_sum])\ndef g(n=3):\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 114,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the matrix is a magic square of order n\"\"\"\n    target_sum = n * (n**2 + 1) // 2\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag_sum = sum(matrix[i][i] for i in range(n))\n    anti_diag_sum = sum(matrix[i][n - i - 1] for i in range(n))\n    return all(s == target_sum for s in row_sums + col_sums + [diag_sum, anti_diag_sum])",
        "solution_func": "def g(n=3):\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=6) -> bool:\n    \"\"\"Given a string of length n, determine if it is a palindrome.\"\"\"\n    return len(s) == n and s == s[::-1]\ndef g(n=6):\n    s = 'racecar'[:n]\n    return s\nassert f(g())\n",
        "emb": null,
        "idx_generation": 114,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=6) -> bool:\n    \"\"\"Given a string of length n, determine if it is a palindrome.\"\"\"\n    return len(s) == n and s == s[::-1]",
        "solution_func": "def g(n=6):\n    s = 'racecar'[:n]\n    return s",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Given a list of integers, determine if there exists a sublist of length n such that the sum of the elements in the sublist is equal to 0.\"\"\"\n    for i in range(len(arr) - n + 1):\n        if sum(arr[i:i+n]) == 0:\n            return True\n    return False\ndef g(n=5):\n    arr = [1, -2, 3, 4, -5, 6, 7, 8, 9, -10, 11, 12, 13, -14, 15, 16, 17, 18, -19, 20] * 10\n    return arr\nassert f(g())\n",
        "emb": null,
        "idx_generation": 114,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Given a list of integers, determine if there exists a sublist of length n such that the sum of the elements in the sublist is equal to 0.\"\"\"\n    for i in range(len(arr) - n + 1):\n        if sum(arr[i:i+n]) == 0:\n            return True\n    return False",
        "solution_func": "def g(n=5):\n    arr = [1, -2, 3, 4, -5, 6, 7, 8, 9, -10, 11, 12, 13, -14, 15, 16, 17, 18, -19, 20] * 10\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if there exists a pair of integers in the list such that their sum is equal to the target value.\"\"\"\n    s = set()\n    for num in nums:\n        if target - num in s:\n            return True\n        s.add(num)\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 114,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if there exists a pair of integers in the list such that their sum is equal to the target value.\"\"\"\n    s = set()\n    for num in nums:\n        if target - num in s:\n            return True\n        s.add(num)\n    return False",
        "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, s='python') -> bool:\n    \"\"\"Check if a given string contains a specific number of characters\"\"\"\n    return len(s) == n\ndef g(n=6, s='python'):\n    return s\nassert f(g())\n",
        "emb": null,
        "idx_generation": 114,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, s='python') -> bool:\n    \"\"\"Check if a given string contains a specific number of characters\"\"\"\n    return len(s) == n",
        "solution_func": "def g(n=6, s='python'):\n    return s",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, char='a') -> bool:\n    \"\"\"Check if a given character is present in the string\"\"\"\n    return char in string\ndef g(char='a'):\n    return \"Hello World!\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 115,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, char='a') -> bool:\n    \"\"\"Check if a given character is present in the string\"\"\"\n    return char in string",
        "solution_func": "def g(char='a'):\n    return \"Hello World!\"",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers whose sum equals the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 115,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers whose sum equals the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix\"\"\"\n    rows = len(matrix)\n    for row in matrix:\n        if len(row) != rows:\n            return False\n    return True\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 115,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix\"\"\"\n    rows = len(matrix)\n    for row in matrix:\n        if len(row) != rows:\n            return False\n    return True",
        "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=5, m=2) -> bool:\n    \"\"\"Check if a given string is a palindrome.\"\"\"\n    return s[:n] == s[:n][::-1] and s[-m:] == s[-m:][::-1]\ndef g(n=5, m=2):\n    return \"racecar\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 115,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=5, m=2) -> bool:\n    \"\"\"Check if a given string is a palindrome.\"\"\"\n    return s[:n] == s[:n][::-1] and s[-m:] == s[-m:][::-1]",
        "solution_func": "def g(n=5, m=2):\n    return \"racecar\"",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in a list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 115,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in a list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, m=2) -> bool:\n    \"\"\"Check if a given string contains a substring that appears at least n times.\"\"\"\n    count = 0\n    for i in range(len(s)-m+1):\n        if s[i:i+m] == s[i+m:i+2*m]:\n            count += 1\n            if count >= n:\n                return True\n    return False\ndef g(n=3, m=2):\n    return \"abababab\"\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 115,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3, m=2) -> bool:\n    \"\"\"Check if a given string contains a substring that appears at least n times.\"\"\"\n    count = 0\n    for i in range(len(s)-m+1):\n        if s[i:i+m] == s[i+m:i+2*m]:\n            count += 1\n            if count >= n:\n                return True\n    return False",
        "solution_func": "def g(n=3, m=2):\n    return \"abababab\"",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, chars=['a', 'b', 'c']) -> bool:\n    \"\"\"Check if string s contains all characters in chars\"\"\"\n    return all(char in s for char in chars)\ndef g(chars=['a', 'b', 'c']):\n    return ''.join(chars)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 115,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, chars=['a', 'b', 'c']) -> bool:\n    \"\"\"Check if string s contains all characters in chars\"\"\"\n    return all(char in s for char in chars)",
        "solution_func": "def g(chars=['a', 'b', 'c']):\n    return ''.join(chars)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10**9+7) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    return all(n % i != 0 for i in range(2, int(n**0.5) + 1))\ndef g():\n    return 997\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 115,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=10**9+7) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    return all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "solution_func": "def g():\n    return 997",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains any duplicate numbers\"\"\"\n    return len(nums) == len(set(nums))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 115,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains any duplicate numbers\"\"\"\n    return len(nums) == len(set(nums))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target=10) -> bool:\n    \"\"\"Check if the sum of all elements in the list is equal to the target value\"\"\"\n    return sum(x) == target\ndef g(target=10):\n    return [2, 3, 5]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 115,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], target=10) -> bool:\n    \"\"\"Check if the sum of all elements in the list is equal to the target value\"\"\"\n    return sum(x) == target",
        "solution_func": "def g(target=10):\n    return [2, 3, 5]",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Given a string s, check if it contains exactly n occurrences of the letter 'a' (case insensitive).\nSample Input:\ns = \"Abracadabra\"\nn = 3\nSample Output:\nTrue\"\"\"\n    count = 0\n    for c in s.lower():\n        if c == 'a':\n            count += 1\n    return count == n\ndef g(s=\"Abracadabra\", n=3):\n    return s\nassert f(g())\n",
        "emb": null,
        "idx_generation": 116,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Given a string s, check if it contains exactly n occurrences of the letter 'a' (case insensitive).\nSample Input:\ns = \"Abracadabra\"\nn = 3\nSample Output:\nTrue\"\"\"\n    count = 0\n    for c in s.lower():\n        if c == 'a':\n            count += 1\n    return count == n",
        "solution_func": "def g(s=\"Abracadabra\", n=3):\n    return s",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, k=5) -> bool:\n    \"\"\"Given an integer n, check if it is a multiple of k and if the sum of its digits is also a multiple of k.\nSample Input:\nn = 345\nk = 5\nSample Output:\nTrue\"\"\"\n    return n % k == 0 and sum(int(digit) for digit in str(n)) % k == 0\ndef g(n=345, k=5):\n    return n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 116,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, k=5) -> bool:\n    \"\"\"Given an integer n, check if it is a multiple of k and if the sum of its digits is also a multiple of k.\nSample Input:\nn = 345\nk = 5\nSample Output:\nTrue\"\"\"\n    return n % k == 0 and sum(int(digit) for digit in str(n)) % k == 0",
        "solution_func": "def g(n=345, k=5):\n    return n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, t: str, n=3) -> bool:\n    \"\"\"Given two strings s and t, check if s and t have the same length and if the first n characters of s are equal to the last n characters of t.\nSample Input:\ns = \"hello\"\nt = \"worldlo\"\nn = 3\nSample Output:\nTrue\"\"\"\n    return len(s) == len(t) and s[:n] == t[-n:]\ndef g(s=\"hello\", t=\"worldlo\", n=3):\n    return s, t\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 116,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, t: str, n=3) -> bool:\n    \"\"\"Given two strings s and t, check if s and t have the same length and if the first n characters of s are equal to the last n characters of t.\nSample Input:\ns = \"hello\"\nt = \"worldlo\"\nn = 3\nSample Output:\nTrue\"\"\"\n    return len(s) == len(t) and s[:n] == t[-n:]",
        "solution_func": "def g(s=\"hello\", t=\"worldlo\", n=3):\n    return s, t",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='python') -> bool:\n    \"\"\"Check if a given substring appears at least twice in a string.\"\"\"\n    return string.count(substring) >= 2\ndef g(substring='python'):\n    string = substring * 2\n    return string\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 116,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='python') -> bool:\n    \"\"\"Check if a given substring appears at least twice in a string.\"\"\"\n    return string.count(substring) >= 2",
        "solution_func": "def g(substring='python'):\n    string = substring * 2\n    return string",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(num_list: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there are two numbers in a list that sum up to a target value.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=10):\n    num_list = [1, 2, 3, 4, 5]\n    return num_list\nassert f(g())\n",
        "emb": null,
        "idx_generation": 116,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num_list: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there are two numbers in a list that sum up to a target value.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=10):\n    num_list = [1, 2, 3, 4, 5]\n    return num_list",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sum=15) -> bool:\n    \"\"\"Check if any row in a matrix has a sum equal to a target value.\"\"\"\n    for row in matrix:\n        if sum(row) == row_sum:\n            return True\n    return False\ndef g(row_sum=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 116,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row_sum=15) -> bool:\n    \"\"\"Check if any row in a matrix has a sum equal to a target value.\"\"\"\n    for row in matrix:\n        if sum(row) == row_sum:\n            return True\n    return False",
        "solution_func": "def g(row_sum=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that sums up to the target value.\"\"\"\n    for row in matrix:\n        for i in range(len(row)):\n            for j in range(i+1, len(row)):\n                if row[i] + row[j] == target:\n                    return True\n    return False\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 116,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that sums up to the target value.\"\"\"\n    for row in matrix:\n        for i in range(len(row)):\n            for j in range(i+1, len(row)):\n                if row[i] + row[j] == target:\n                    return True\n    return False",
        "solution_func": "def g(matrix: List[List[int]]):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers in the given list that sums up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 116,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers in the given list that sums up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums: List[int]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(strings: List[str], target_length=10) -> bool:\n    \"\"\"Find a pair of strings in the given list that have a combined length equal to the target length.\"\"\"\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if len(strings[i]) + len(strings[j]) == target_length:\n                return True\n    return False\n\ndef g(strings: List[str]):\n    return strings\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 116,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(strings: List[str], target_length=10) -> bool:\n    \"\"\"Find a pair of strings in the given list that have a combined length equal to the target length.\"\"\"\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if len(strings[i]) + len(strings[j]) == target_length:\n                return True\n    return False",
        "solution_func": "def g(strings: List[str]):\n    return strings",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, year=2022, month=7, day=15) -> bool:\n    \"\"\"Check if a given date matches a specific year, month, and day.\"\"\"\n    return date.year == year and date.month == month and date.day == day\n\ndef g(year=2022, month=7, day=15):\n    return datetime.date(year, month, day)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 116,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, year=2022, month=7, day=15) -> bool:\n    \"\"\"Check if a given date matches a specific year, month, and day.\"\"\"\n    return date.year == year and date.month == month and date.day == day",
        "solution_func": "def g(year=2022, month=7, day=15):\n    return datetime.date(year, month, day)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target_sum=100) -> bool:\n    \"\"\"Check if there exists a subset of the array that sums up to the target sum.\"\"\"\n    n = arr.shape[0]\n    memo = np.zeros((n + 1, target_sum + 1), dtype=bool)\n    memo[0, 0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target_sum + 1):\n            if j >= arr[i - 1]:\n                memo[i, j] = memo[i - 1, j] or memo[i - 1, j - arr[i - 1]]\n            else:\n                memo[i, j] = memo[i - 1, j]\n    \n    return memo[n, target_sum]\n\ndef g(arr=np.array([10, 20, 30, 40, 50]), target_sum=100):\n    return arr\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 117,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target_sum=100) -> bool:\n    \"\"\"Check if there exists a subset of the array that sums up to the target sum.\"\"\"\n    n = arr.shape[0]\n    memo = np.zeros((n + 1, target_sum + 1), dtype=bool)\n    memo[0, 0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target_sum + 1):\n            if j >= arr[i - 1]:\n                memo[i, j] = memo[i - 1, j] or memo[i - 1, j - arr[i - 1]]\n            else:\n                memo[i, j] = memo[i - 1, j]\n    \n    return memo[n, target_sum]",
        "solution_func": "def g(arr=np.array([10, 20, 30, 40, 50]), target_sum=100):\n    return arr",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, limit=100) -> bool:\n    \"\"\"Check if n is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(limit=100):\n    primes = []\n    for num in range(2, limit + 1):\n        if f(num):\n            primes.append(num)\n    return primes\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 117,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, limit=100) -> bool:\n    \"\"\"Check if n is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g(limit=100):\n    primes = []\n    for num in range(2, limit + 1):\n        if f(num):\n            primes.append(num)\n    return primes",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: list, target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array whose sum is equal to the target.\"\"\"\n    n = len(arr)\n    hashmap = {}\n    for i in range(n):\n        if target - arr[i] in hashmap:\n            return True\n        hashmap[arr[i]] = i\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], target=7):\n    return arr\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 117,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: list, target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array whose sum is equal to the target.\"\"\"\n    n = len(arr)\n    hashmap = {}\n    for i in range(n):\n        if target - arr[i] in hashmap:\n            return True\n        hashmap[arr[i]] = i\n    return False",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5], target=7):\n    return arr",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100, n=10) -> bool:\n    \"\"\"Find n distinct positive even integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target and all((i >= i % 2 == 0 for i in nums))\ndef g(target=100, n=10):\n    return list(range(2, 2 * n + 1, 2)) + [target - sum(range(2, 2 * n + 1, 2))]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 117,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100, n=10) -> bool:\n    \"\"\"Find n distinct positive even integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target and all((i >= i % 2 == 0 for i in nums))",
        "solution_func": "def g(target=100, n=10):\n    return list(range(2, 2 * n + 1, 2)) + [target - sum(range(2, 2 * n + 1, 2))]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(seq: List[str], target=50, length=5) -> bool:\n    \"\"\"Find a sequence of 'A' and 'B' of a given length that adds up to target\"\"\"\n    return all((i in ['A', 'B'] for i in seq)) and sum(seq) == target and (len(seq) == length)\ndef g(target=50, length=5):\n    return ['A'] * (target - length) + ['B'] * (2 * length - target)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 117,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(seq: List[str], target=50, length=5) -> bool:\n    \"\"\"Find a sequence of 'A' and 'B' of a given length that adds up to target\"\"\"\n    return all((i in ['A', 'B'] for i in seq)) and sum(seq) == target and (len(seq) == length)",
        "solution_func": "def g(target=50, length=5):\n    return ['A'] * (target - length) + ['B'] * (2 * length - target)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int], target=1000, length=250) -> bool:\n    \"\"\"Find a sequence of positive integers that sums up to target\"\"\"\n    return all((i >= 0 for i in seq)) and sum(seq) == target and (len(seq) == length)\ndef g(target=1000, length=250):\n    return [1] * (target - length) + [target - length]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 117,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int], target=1000, length=250) -> bool:\n    \"\"\"Find a sequence of positive integers that sums up to target\"\"\"\n    return all((i >= 0 for i in seq)) and sum(seq) == target and (len(seq) == length)",
        "solution_func": "def g(target=1000, length=250):\n    return [1] * (target - length) + [target - length]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=2, y=3) -> bool:\n    \"\"\"Check if n is a perfect power of x raised to the y-th power\"\"\"\n    return math.isqrt(n) ** y == n\ndef g(x=2, y=3):\n    return x ** y\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 117,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=2, y=3) -> bool:\n    \"\"\"Check if n is a perfect power of x raised to the y-th power\"\"\"\n    return math.isqrt(n) ** y == n",
        "solution_func": "def g(x=2, y=3):\n    return x ** y",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, s='puzzle') -> bool:\n    \"\"\"Check if the string s contains all the characters in the number n\"\"\"\n    return all(str(i) in s for i in range(10))\ndef g(s='puzzle'):\n    return int(''.join(str(i) for i in range(10))) if all(str(i) in s for i in range(10)) else 0\nassert f(g())\n",
        "emb": null,
        "idx_generation": 117,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, s='puzzle') -> bool:\n    \"\"\"Check if the string s contains all the characters in the number n\"\"\"\n    return all(str(i) in s for i in range(10))",
        "solution_func": "def g(s='puzzle'):\n    return int(''.join(str(i) for i in range(10))) if all(str(i) in s for i in range(10)) else 0",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=7, c=9) -> bool:\n    \"\"\"Check if n is a solution to the equation (a + b) / c\"\"\"\n    return (a + b) / c == n\ndef g(a=5, b=7, c=9):\n    return (a + b) / c\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 117,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=5, b=7, c=9) -> bool:\n    \"\"\"Check if n is a solution to the equation (a + b) / c\"\"\"\n    return (a + b) / c == n",
        "solution_func": "def g(a=5, b=7, c=9):\n    return (a + b) / c",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, seq=[13, -7, 8, 11, -5, 9, -2, 6, 1, -3]) -> bool:\n    \"\"\"Find the index of the first occurrence of a number in a sequence\"\"\"\n    return num in seq and seq.index(num) == 0\ndef g(seq=[13, -7, 8, 11, -5, 9, -2, 6, 1, -3]):\n    return seq[0]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 117,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int, seq=[13, -7, 8, 11, -5, 9, -2, 6, 1, -3]) -> bool:\n    \"\"\"Find the index of the first occurrence of a number in a sequence\"\"\"\n    return num in seq and seq.index(num) == 0",
        "solution_func": "def g(seq=[13, -7, 8, 11, -5, 9, -2, 6, 1, -3]):\n    return seq[0]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\nfrom math import floor\n\ndef f(n: float, x=1.5) -> bool:\n    \"\"\"Check if the square root of n is less than x\"\"\"\n    return floor(n ** 0.5) < x\n\ndef g(x=1.5):\n    return (x + 1) ** 2\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 118,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import floor\n\ndef f(n: float, x=1.5) -> bool:\n    \"\"\"Check if the square root of n is less than x\"\"\"\n    return floor(n ** 0.5) < x",
        "solution_func": "def g(x=1.5):\n    return (x + 1) ** 2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(word: str) -> bool:\n    \"\"\"Check if any permutation of the word is a palindrome\"\"\"\n    return any(word == word[::-1] for word in permutations(word))\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 118,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(word: str) -> bool:\n    \"\"\"Check if any permutation of the word is a palindrome\"\"\"\n    return any(word == word[::-1] for word in permutations(word))",
        "solution_func": "def g():\n    return \"racecar\"",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisor=3) -> bool:\n    \"\"\"Check if n is divisible by the divisor\"\"\"\n    return n % divisor == 0\n\ndef g(divisor=3):\n    return divisor * 5\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 118,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, divisor=3) -> bool:\n    \"\"\"Check if n is divisible by the divisor\"\"\"\n    return n % divisor == 0",
        "solution_func": "def g(divisor=3):\n    return divisor * 5",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, n=100) -> bool:\n    \"\"\"Check if x is a prime number up to n\"\"\"\n    if x < 2:\n        return False\n    for i in range(2, int(math.sqrt(x)) + 1):\n        if x % i == 0:\n            return False\n    return True\n\ndef g(n=100):\n    primes = []\n    for num in range(2, n + 1):\n        if f(num):\n            primes.append(num)\n    return primes\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 118,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, n=100) -> bool:\n    \"\"\"Check if x is a prime number up to n\"\"\"\n    if x < 2:\n        return False\n    for i in range(2, int(math.sqrt(x)) + 1):\n        if x % i == 0:\n            return False\n    return True",
        "solution_func": "def g(n=100):\n    primes = []\n    for num in range(2, n + 1):\n        if f(num):\n            primes.append(num)\n    return primes",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: list, target_sum=100) -> bool:\n    \"\"\"Check if there is a subset in the list that sums up to the target_sum\"\"\"\n    n = len(lst)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if j < lst[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - lst[i - 1]]\n    return dp[n][target_sum]\n\ndef g(target_sum=100):\n    lst = [random.randint(1, 50) for _ in range(20)]\n    return lst\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 118,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(lst: list, target_sum=100) -> bool:\n    \"\"\"Check if there is a subset in the list that sums up to the target_sum\"\"\"\n    n = len(lst)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if j < lst[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - lst[i - 1]]\n    return dp[n][target_sum]",
        "solution_func": "def g(target_sum=100):\n    lst = [random.randint(1, 50) for _ in range(20)]\n    return lst",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, year=2022) -> bool:\n    \"\"\"Check if the given datetime is a leap year\"\"\"\n    return dt.year == year and dt.year % 4 == 0 and (dt.year % 100 != 0 or dt.year % 400 == 0)\n\ndef g(year=2022):\n    dt = datetime.datetime(year, 2, 29)\n    return dt\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 118,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, year=2022) -> bool:\n    \"\"\"Check if the given datetime is a leap year\"\"\"\n    return dt.year == year and dt.year % 4 == 0 and (dt.year % 100 != 0 or dt.year % 400 == 0)",
        "solution_func": "def g(year=2022):\n    dt = datetime.datetime(year, 2, 29)\n    return dt",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=20, target_product=100) -> bool:\n    \"\"\"Find two numbers in the list that sum up to target_sum and have a product equal to target_product\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum and arr[i] * arr[j] == target_product:\n                return True\n    return False\n\ndef g(target_sum=20, target_product=100):\n    arr = [5, 10, 2, 15, 8, 6]\n    return arr\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 118,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=20, target_product=100) -> bool:\n    \"\"\"Find two numbers in the list that sum up to target_sum and have a product equal to target_product\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum and arr[i] * arr[j] == target_product:\n                return True\n    return False",
        "solution_func": "def g(target_sum=20, target_product=100):\n    arr = [5, 10, 2, 15, 8, 6]\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=1000) -> bool:\n    \"\"\"Check if a number is divisible by m\"\"\"\n    return n % m == 0\n\ndef g(m=1000):\n    return 5000\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 118,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=1000) -> bool:\n    \"\"\"Check if a number is divisible by m\"\"\"\n    return n % m == 0",
        "solution_func": "def g(m=1000):\n    return 5000",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_char='a', target_count=3) -> bool:\n    \"\"\"Check if a specific character appears a certain number of times in a string\"\"\"\n    return s.count(target_char) == target_count\n\ndef g(target_char='a', target_count=3):\n    return 'banana'\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 118,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target_char='a', target_count=3) -> bool:\n    \"\"\"Check if a specific character appears a certain number of times in a string\"\"\"\n    return s.count(target_char) == target_count",
        "solution_func": "def g(target_char='a', target_count=3):\n    return 'banana'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100, n=4) -> bool:\n    \"\"\"Find n distinct positive integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target\ndef g(target=100, n=4):\n    return list(range(1, n+1))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 118,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100, n=4) -> bool:\n    \"\"\"Find n distinct positive integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target",
        "solution_func": "def g(target=100, n=4):\n    return list(range(1, n+1))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(target - num in arr for num in arr)\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g(), target=9)\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 119,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(target - num in arr for num in arr)",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(target - num1 - num2 in arr for num1 in arr for num2 in arr)\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g(), target=10)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 119,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(target - num1 - num2 in arr for num1 in arr for num2 in arr)",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the list is a palindrome.\"\"\"\n    return arr == arr[::-1]\ndef g():\n    return [1, 2, 3, 2, 1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 119,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the list is a palindrome.\"\"\"\n    return arr == arr[::-1]",
        "solution_func": "def g():\n    return [1, 2, 3, 2, 1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, threshold=0.5) -> bool:\n    \"\"\"Check if the sum of all elements in the array is greater than a given threshold.\"\"\"\n    return np.sum(arr) > threshold\n\ndef g(threshold=0.5, shape=(3,3)):\n    return np.random.rand(*shape)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 119,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, threshold=0.5) -> bool:\n    \"\"\"Check if the sum of all elements in the array is greater than a given threshold.\"\"\"\n    return np.sum(arr) > threshold",
        "solution_func": "def g(threshold=0.5, shape=(3,3)):\n    return np.random.rand(*shape)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, threshold=10) -> bool:\n    \"\"\"Check if the sum of the square roots of x, y, and z is less than a given threshold.\"\"\"\n    return math.sqrt(x) + math.sqrt(y) + math.sqrt(z) < threshold\n\ndef g(threshold=10):\n    x = threshold**2\n    y = threshold**3\n    z = threshold**4\n    return x, y, z\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 119,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, threshold=10) -> bool:\n    \"\"\"Check if the sum of the square roots of x, y, and z is less than a given threshold.\"\"\"\n    return math.sqrt(x) + math.sqrt(y) + math.sqrt(z) < threshold",
        "solution_func": "def g(threshold=10):\n    x = threshold**2\n    y = threshold**3\n    z = threshold**4\n    return x, y, z",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: list, target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target value.\"\"\"\n    return any((x + y == target for x in lst for y in lst))\n\ndef g(target=0, length=10):\n    random.seed(0)\n    return random.sample(range(-10, 11), length)\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 119,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(lst: list, target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target value.\"\"\"\n    return any((x + y == target for x in lst for y in lst))",
        "solution_func": "def g(target=0, length=10):\n    random.seed(0)\n    return random.sample(range(-10, 11), length)",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: list, target: int) -> bool:\n    \"\"\"Given a list of integers, check if there exists a pair of distinct numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=10):\n    \"\"\"Return a pair of distinct numbers from the list that sum up to the target.\"\"\"\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                pairs.append((arr[i], arr[j]))\n    return random.choice(pairs)\n\nassert f(g(), target=10)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 119,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(arr: list, target: int) -> bool:\n    \"\"\"Given a list of integers, check if there exists a pair of distinct numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=10):\n    \"\"\"Return a pair of distinct numbers from the list that sum up to the target.\"\"\"\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                pairs.append((arr[i], arr[j]))\n    return random.choice(pairs)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=4, b=2) -> bool:\n    \"\"\"Check if the square root of n, when rounded to the nearest integer, is equal to a raised to the power of b.\"\"\"\n    return round(math.sqrt(n)) == a ** b\n\ndef g(a=4, b=2):\n    \"\"\"Return a number n such that the square root of n, when rounded to the nearest integer, is equal to a raised to the power of b.\"\"\"\n    return (a ** b) ** 2\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 119,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=4, b=2) -> bool:\n    \"\"\"Check if the square root of n, when rounded to the nearest integer, is equal to a raised to the power of b.\"\"\"\n    return round(math.sqrt(n)) == a ** b",
        "solution_func": "def g(a=4, b=2):\n    \"\"\"Return a number n such that the square root of n, when rounded to the nearest integer, is equal to a raised to the power of b.\"\"\"\n    return (a ** b) ** 2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abcdefghijklmnopqrstuvwxyz') -> bool:\n    \"\"\"Check if the given substring is a subsequence of the given string.\"\"\"\n    substring_index = 0\n    for char in s:\n        if char == substring[substring_index]:\n            substring_index += 1\n        if substring_index == len(substring):\n            return True\n    return False\n\ndef g(substring='abcdefghijklmnopqrstuvwxyz'):\n    \"\"\"Return a string s that contains the given substring as a subsequence.\"\"\"\n    return substring + 'extra_chars'\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 119,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='abcdefghijklmnopqrstuvwxyz') -> bool:\n    \"\"\"Check if the given substring is a subsequence of the given string.\"\"\"\n    substring_index = 0\n    for char in s:\n        if char == substring[substring_index]:\n            substring_index += 1\n        if substring_index == len(substring):\n            return True\n    return False",
        "solution_func": "def g(substring='abcdefghijklmnopqrstuvwxyz'):\n    \"\"\"Return a string s that contains the given substring as a subsequence.\"\"\"\n    return substring + 'extra_chars'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=\"abc\"):\n    \"\"\"Check if a string contains a target substring\"\"\"\n    return target in s\ndef g(target=\"abc\"):\n    return \"abcdefghijklmnopqrstuvwxyz\"[:len(target)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 119,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=\"abc\"):\n    \"\"\"Check if a string contains a target substring\"\"\"\n    return target in s",
        "solution_func": "def g(target=\"abc\"):\n    return \"abcdefghijklmnopqrstuvwxyz\"[:len(target)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int, equation='x * y + z == 17') -> bool:\n    \"\"\"Find values for x, y, and z that satisfy the given equation.\"\"\"\n    return eval(equation)\ndef g():\n    for x in range(-10, 11):\n        for y in range(-10, 11):\n            for z in range(-10, 11):\n                if x * y + z == 17:\n                    return (x, y, z)\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 120,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, y: int, z: int, equation='x * y + z == 17') -> bool:\n    \"\"\"Find values for x, y, and z that satisfy the given equation.\"\"\"\n    return eval(equation)",
        "solution_func": "def g():\n    for x in range(-10, 11):\n        for y in range(-10, 11):\n            for z in range(-10, 11):\n                if x * y + z == 17:\n                    return (x, y, z)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: str, y: str, word='programming') -> bool:\n    \"\"\"Find a string that contains both x and y and has the word 'programming' in it.\"\"\"\n    return x in word and y in word and word in x+y\ndef g():\n    return ('pro', 'gram')\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 120,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, y: str, word='programming') -> bool:\n    \"\"\"Find a string that contains both x and y and has the word 'programming' in it.\"\"\"\n    return x in word and y in word and word in x+y",
        "solution_func": "def g():\n    return ('pro', 'gram')",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int, total=100) -> bool:\n    \"\"\"Find two numbers n and m such that their sum is equal to total.\"\"\"\n    return n + m == total\ndef g(total=100):\n    return (total - 50, 50)\nassert f(*g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 120,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m: int, total=100) -> bool:\n    \"\"\"Find two numbers n and m such that their sum is equal to total.\"\"\"\n    return n + m == total",
        "solution_func": "def g(total=100):\n    return (total - 50, 50)",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: list, k=25) -> bool:\n    \"\"\"Check if the sum of the first k elements in a list is greater than the sum of the last k elements.\"\"\"\n    return sum(lst[:k]) > sum(lst[-k:])\n    \ndef g(k=25):\n    lst = [random.randint(1, 100) for _ in range(50)]\n    return lst\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 120,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(lst: list, k=25) -> bool:\n    \"\"\"Check if the sum of the first k elements in a list is greater than the sum of the last k elements.\"\"\"\n    return sum(lst[:k]) > sum(lst[-k:])",
        "solution_func": "def g(k=25):\n    lst = [random.randint(1, 100) for _ in range(50)]\n    return lst",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: list, target=10) -> bool:\n    \"\"\"Check if there are two numbers in a list that sum up to a specific target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n    \ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 120,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: list, target=10) -> bool:\n    \"\"\"Check if there are two numbers in a list that sum up to a specific target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, area=50*math.pi) -> bool:\n    \"\"\"Check if the area of a circle is equal to a given value.\"\"\"\n    return math.pi * radius ** 2 == area\n    \ndef g(area=50*math.pi):\n    radius = math.sqrt(area / math.pi)\n    return radius\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 120,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(radius: float, area=50*math.pi) -> bool:\n    \"\"\"Check if the area of a circle is equal to a given value.\"\"\"\n    return math.pi * radius ** 2 == area",
        "solution_func": "def g(area=50*math.pi):\n    radius = math.sqrt(area / math.pi)\n    return radius",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float) -> bool:\n    \"\"\"Check if the given numbers can be the side lengths of a right-angled triangle.\"\"\"\n    return math.isclose(math.sqrt(x**2 + y**2), z)\n\ndef g(x: float, y: float):\n    return math.sqrt(x**2 + y**2)\n\nassert f(g(x=3, y=4), z=5)\n",
        "emb": null,
        "idx_generation": 120,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float) -> bool:\n    \"\"\"Check if the given numbers can be the side lengths of a right-angled triangle.\"\"\"\n    return math.isclose(math.sqrt(x**2 + y**2), z)",
        "solution_func": "def g(x: float, y: float):\n    return math.sqrt(x**2 + y**2)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g(s: str):\n    return s[::-1]\n\nassert f(g(\"racecar\"))\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 120,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g(s: str):\n    return s[::-1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, k: int, ls: List[int]) -> bool:\n    \"\"\"Check if there are k numbers in the list that sum up to n.\"\"\"\n    return any(sum(random.sample(ls, k)) == n for _ in range(10))\n\ndef g(n: int, k: int, ls: List[int]):\n    return random.sample(ls, k)\n\nassert f(n=10, k=3, ls=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n",
        "emb": null,
        "idx_generation": 120,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, k: int, ls: List[int]) -> bool:\n    \"\"\"Check if there are k numbers in the list that sum up to n.\"\"\"\n    return any(sum(random.sample(ls, k)) == n for _ in range(10))",
        "solution_func": "def g(n: int, k: int, ls: List[int]):\n    return random.sample(ls, k)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[23, 56, 78, 12], upper_bound=1000) -> bool:\n    \"\"\"Check if the sum of n and any two numbers from the list nums is equal to the upper_bound.\"\"\"\n    return any((n + i + j == upper_bound for i in nums for j in nums))\ndef g(nums=[23, 56, 78, 12], upper_bound=1000):\n    return upper_bound - max(nums) - max(nums)\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 120,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[23, 56, 78, 12], upper_bound=1000) -> bool:\n    \"\"\"Check if the sum of n and any two numbers from the list nums is equal to the upper_bound.\"\"\"\n    return any((n + i + j == upper_bound for i in nums for j in nums))",
        "solution_func": "def g(nums=[23, 56, 78, 12], upper_bound=1000):\n    return upper_bound - max(nums) - max(nums)",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]) -> bool:\n    \"\"\"Check if a given number is a prime number.\"\"\"\n    return n in primes\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]):\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\nassert f(g())\n",
        "emb": null,
        "idx_generation": 121,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]) -> bool:\n    \"\"\"Check if a given number is a prime number.\"\"\"\n    return n in primes",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]):\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if a given string contains a specific substring.\"\"\"\n    return substr in s\ndef g(substr='python'):\n    return \"I love programming in \" + substr\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 121,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if a given string contains a specific substring.\"\"\"\n    return substr in s",
        "solution_func": "def g(substr='python'):\n    return \"I love programming in \" + substr",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sums up to a specific target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 121,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sums up to a specific target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(d: datetime.datetime) -> bool:\n    \"\"\"Check if the year of a given date is a leap year.\"\"\"\n    return d.year % 4 == 0 and (d.year % 100 != 0 or d.year % 400 == 0)\n\ndef g(year=2000, month=2, day=29, hour=0, minute=0, second=0):\n    return datetime.datetime(year, month, day, hour, minute, second)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 121,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(d: datetime.datetime) -> bool:\n    \"\"\"Check if the year of a given date is a leap year.\"\"\"\n    return d.year % 4 == 0 and (d.year % 100 != 0 or d.year % 400 == 0)",
        "solution_func": "def g(year=2000, month=2, day=29, hour=0, minute=0, second=0):\n    return datetime.datetime(year, month, day, hour, minute, second)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return math.isqrt(n)**2 == n\n\ndef g(n=49):\n    return n**2\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 121,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return math.isqrt(n)**2 == n",
        "solution_func": "def g(n=49):\n    return n**2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst: list) -> bool:\n    \"\"\"Check if a given number is in the list.\"\"\"\n    return n in lst\n\ndef g(n=7, lst=[1, 3, 5, 7, 9]):\n    random.shuffle(lst)\n    return n\n\nassert f(g(), g())\n",
        "emb": null,
        "idx_generation": 121,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, lst: list) -> bool:\n    \"\"\"Check if a given number is in the list.\"\"\"\n    return n in lst",
        "solution_func": "def g(n=7, lst=[1, 3, 5, 7, 9]):\n    random.shuffle(lst)\n    return n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, seq=[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]) -> bool:\n    \"\"\"Check if n is a Fibonacci number\"\"\"\n    return n in seq\n\ndef g(seq=[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]):\n    while True:\n        a, b = seq[-2], seq[-1]\n        c = a + b\n        seq.append(c)\n        if c == n:\n            return c\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 121,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, seq=[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]) -> bool:\n    \"\"\"Check if n is a Fibonacci number\"\"\"\n    return n in seq",
        "solution_func": "def g(seq=[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]):\n    while True:\n        a, b = seq[-2], seq[-1]\n        c = a + b\n        seq.append(c)\n        if c == n:\n            return c",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, seq=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    return n in seq\n\ndef g(seq=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]):\n    while True:\n        last = seq[-1]\n        for i in range(last+1, last+100):\n            for j in range(2, int(i ** 0.5) + 1):\n                if i % j == 0:\n                    break\n            else:\n                seq.append(i)\n                if i == n:\n                    return i\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 121,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, seq=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    return n in seq",
        "solution_func": "def g(seq=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]):\n    while True:\n        last = seq[-1]\n        for i in range(last+1, last+100):\n            for j in range(2, int(i ** 0.5) + 1):\n                if i % j == 0:\n                    break\n            else:\n                seq.append(i)\n                if i == n:\n                    return i",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if s is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g(n=3):\n    s = \"\"\n    while len(s) < n:\n        s = input(\"Enter a string: \")\n    return s\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 121,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if s is a palindrome\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g(n=3):\n    s = \"\"\n    while len(s) < n:\n        s = input(\"Enter a string: \")\n    return s",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=0) -> bool:\n    \"\"\"Check if the sum of all elements in the array equals the target value\"\"\"\n    return np.sum(arr) == target\n\ndef g(target=0):\n    return np.zeros((5, 5))\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 121,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=0) -> bool:\n    \"\"\"Check if the sum of all elements in the array equals the target value\"\"\"\n    return np.sum(arr) == target",
        "solution_func": "def g(target=0):\n    return np.zeros((5, 5))",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Check if the given date is a leap year\"\"\"\n    dt = datetime.strptime(date, format)\n    year = dt.year\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\n\ndef g(year=2000):\n    return str(year) + '-02-29'\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 122,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Check if the given date is a leap year\"\"\"\n    dt = datetime.strptime(date, format)\n    year = dt.year\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)",
        "solution_func": "def g(year=2000):\n    return str(year) + '-02-29'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, m=15, k=3) -> bool:\n    \"\"\"Check if n is divisible by m and the sum of its digits is divisible by k\"\"\"\n    return n % m == 0 and sum(int(digit) for digit in str(n)) % k == 0\n\ndef g(m=15, k=3):\n    digits = ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n    n = int(''.join(digits))\n    return n * math.factorial(len(digits))\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 122,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, m=15, k=3) -> bool:\n    \"\"\"Check if n is divisible by m and the sum of its digits is divisible by k\"\"\"\n    return n % m == 0 and sum(int(digit) for digit in str(n)) % k == 0",
        "solution_func": "def g(m=15, k=3):\n    digits = ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n    n = int(''.join(digits))\n    return n * math.factorial(len(digits))",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))\n\ndef g(target=0):\n    nums = list(range(-100, 101))\n    random.shuffle(nums)\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 122,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))",
        "solution_func": "def g(target=0):\n    nums = list(range(-100, 101))\n    random.shuffle(nums)\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string contains the same character repeated n times consecutively\"\"\"\n    return any(s[i:i+n] == s[i]*n for i in range(len(s)-n+1))\ndef g(n=3):\n    return \"a\" * n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 122,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string contains the same character repeated n times consecutively\"\"\"\n    return any(s[i:i+n] == s[i]*n for i in range(len(s)-n+1))",
        "solution_func": "def g(n=3):\n    return \"a\" * n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in a list that sum up to a target value\"\"\"\n    return any(target - x in arr for x in arr)\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 122,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in a list that sum up to a target value\"\"\"\n    return any(target - x in arr for x in arr)",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string is a palindrome when every nth character is removed\"\"\"\n    return s == s[::-n]\ndef g(n=3):\n    return \"abcde\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 122,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string is a palindrome when every nth character is removed\"\"\"\n    return s == s[::-n]",
        "solution_func": "def g(n=3):\n    return \"abcde\"",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the given list that sum up to the target\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 8]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 122,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the given list that sum up to the target\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [2, 8]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[str], prefix='hello') -> bool:\n    \"\"\"Find a string in the given list that starts with the given prefix\"\"\"\n    for string in x:\n        if string.startswith(prefix):\n            return True\n    return False\n\ndef g(prefix='hello'):\n    return ['hello world', 'hi there', 'goodbye']\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 122,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[str], prefix='hello') -> bool:\n    \"\"\"Find a string in the given list that starts with the given prefix\"\"\"\n    for string in x:\n        if string.startswith(prefix):\n            return True\n    return False",
        "solution_func": "def g(prefix='hello'):\n    return ['hello world', 'hi there', 'goodbye']",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], n=4, target=16) -> bool:\n    \"\"\"Find a combination of n numbers from the given list that sum up to the target\"\"\"\n    combinations = itertools.combinations(x, n)\n    for combo in combinations:\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g(n=4, target=16):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 122,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(x: List[int], n=4, target=16) -> bool:\n    \"\"\"Find a combination of n numbers from the given list that sum up to the target\"\"\"\n    combinations = itertools.combinations(x, n)\n    for combo in combinations:\n        if sum(combo) == target:\n            return True\n    return False",
        "solution_func": "def g(n=4, target=16):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int, factor=2) -> bool:\n    \"\"\"Check if a number is a power of a given factor\"\"\"\n    return math.log(num, factor).is_integer()\n\ndef g(factor=2):\n    return factor ** 3\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 122,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(num: int, factor=2) -> bool:\n    \"\"\"Check if a number is a power of a given factor\"\"\"\n    return math.log(num, factor).is_integer()",
        "solution_func": "def g(factor=2):\n    return factor ** 3",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=20) -> bool:\n    \"\"\"Find the value of n that is a perfect square and divisible by x\"\"\"\n    return math.isqrt(n) ** 2 == n and n % x == 0\n\ndef g(x=20):\n    return x ** 2\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 123,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=20) -> bool:\n    \"\"\"Find the value of n that is a perfect square and divisible by x\"\"\"\n    return math.isqrt(n) ** 2 == n and n % x == 0",
        "solution_func": "def g(x=20):\n    return x ** 2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find the value n that is in the list and is divisible by all the other elements\"\"\"\n    return n in lst and all(n % i == 0 for i in lst if i != n)\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    divisors = [i for i in lst if i != 1]\n    n = random.choice(divisors)\n    for i in divisors:\n        n *= i\n    return n\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 123,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find the value n that is in the list and is divisible by all the other elements\"\"\"\n    return n in lst and all(n % i == 0 for i in lst if i != n)",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    divisors = [i for i in lst if i != 1]\n    n = random.choice(divisors)\n    for i in divisors:\n        n *= i\n    return n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, x='x', y='y', z='z') -> bool:\n    \"\"\"Check if the number of occurrences of characters x, y, and z in the string are all equal\"\"\"\n    return string.count(x) == string.count(y) == string.count(z)\n\ndef g(x='x', y='y', z='z'):\n    return x * 3 + y * 3 + z * 3\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 123,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, x='x', y='y', z='z') -> bool:\n    \"\"\"Check if the number of occurrences of characters x, y, and z in the string are all equal\"\"\"\n    return string.count(x) == string.count(y) == string.count(z)",
        "solution_func": "def g(x='x', y='y', z='z'):\n    return x * 3 + y * 3 + z * 3",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: datetime, day=1, month=1, year=2022) -> bool:\n    \"\"\"Check if the given date is in the future\"\"\"\n    return date > datetime(year, month, day)\n    \ndef g(day=1, month=1, year=2022):\n    current_date = datetime.now()\n    future_date = current_date.replace(year=year, month=month, day=day)\n    return future_date\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 123,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date: datetime, day=1, month=1, year=2022) -> bool:\n    \"\"\"Check if the given date is in the future\"\"\"\n    return date > datetime(year, month, day)",
        "solution_func": "def g(day=1, month=1, year=2022):\n    current_date = datetime.now()\n    future_date = current_date.replace(year=year, month=month, day=day)\n    return future_date",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to a given target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 123,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to a given target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int, n=3) -> bool:\n    \"\"\"Check if the given number is a perfect square\"\"\"\n    return math.isqrt(num) ** 2 == num\n\ndef g(n=3):\n    return n ** 2\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 123,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(num: int, n=3) -> bool:\n    \"\"\"Check if the given number is a perfect square\"\"\"\n    return math.isqrt(num) ** 2 == num",
        "solution_func": "def g(n=3):\n    return n ** 2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the sum of the first n elements in the array is greater than or equal to the sum of the last n elements.\"\"\"\n    return sum(arr[:n]) >= sum(arr[-n:])\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return len(arr) // 2\nassert f(g())\n",
        "emb": null,
        "idx_generation": 123,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the sum of the first n elements in the array is greater than or equal to the sum of the last n elements.\"\"\"\n    return sum(arr[:n]) >= sum(arr[-n:])",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return len(arr) // 2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='abcdefg', t='hijklmn') -> bool:\n    \"\"\"Check if the length of s is equal to the length of t and if the first n characters of s are lexicographically smaller than the first n characters of t.\"\"\"\n    return len(s) == len(t) and s[:n] < t[:n]\ndef g(s='abcdefg', t='hijklmn'):\n    return min(len(s), len(t))\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 123,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, s='abcdefg', t='hijklmn') -> bool:\n    \"\"\"Check if the length of s is equal to the length of t and if the first n characters of s are lexicographically smaller than the first n characters of t.\"\"\"\n    return len(s) == len(t) and s[:n] < t[:n]",
        "solution_func": "def g(s='abcdefg', t='hijklmn'):\n    return min(len(s), len(t))",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, chars={'a', 'b', 'c'}) -> bool:\n    \"\"\"Check if all characters in the string s are present in the given set of characters.\"\"\"\n    return set(s).issubset(chars)\ndef g(chars={'a', 'b', 'c'}):\n    return ''.join(chars)\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 123,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, chars={'a', 'b', 'c'}) -> bool:\n    \"\"\"Check if all characters in the string s are present in the given set of characters.\"\"\"\n    return set(s).issubset(chars)",
        "solution_func": "def g(chars={'a', 'b', 'c'}):\n    return ''.join(chars)",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=42) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=42):\n    return [1, target_sum - 1]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 123,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=42) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=42):\n    return [1, target_sum - 1]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, num_rows=2, num_cols=2) -> bool:\n    \"\"\"Check if the given array is a 2D array with a specific number of rows and columns\"\"\"\n    return arr.shape == (num_rows, num_cols)\n    \ndef g(num_rows=2, num_cols=2):\n    return np.zeros((num_rows, num_cols))\n    \nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 124,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, num_rows=2, num_cols=2) -> bool:\n    \"\"\"Check if the given array is a 2D array with a specific number of rows and columns\"\"\"\n    return arr.shape == (num_rows, num_cols)",
        "solution_func": "def g(num_rows=2, num_cols=2):\n    return np.zeros((num_rows, num_cols))",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.datetime, year=2022, month=1, day=1) -> bool:\n    \"\"\"Check if the given date is the first day of a specific year and month\"\"\"\n    return date.year == year and date.month == month and date.day == day\n\ndef g(year=2022, month=1, day=1):\n    return datetime.datetime(year, month, day)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 124,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(date: datetime.datetime, year=2022, month=1, day=1) -> bool:\n    \"\"\"Check if the given date is the first day of a specific year and month\"\"\"\n    return date.year == year and date.month == month and date.day == day",
        "solution_func": "def g(year=2022, month=1, day=1):\n    return datetime.datetime(year, month, day)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nimport random\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to select a combination of numbers from the given list that add up to a specific target\"\"\"\n    return any(sum(comb) == target for r in range(len(nums) + 1) for comb in itertools.combinations(nums, r))\n\ndef g(target=100):\n    nums = list(range(1, 101))\n    random.shuffle(nums)\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 124,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nimport random\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to select a combination of numbers from the given list that add up to a specific target\"\"\"\n    return any(sum(comb) == target for r in range(len(nums) + 1) for comb in itertools.combinations(nums, r))",
        "solution_func": "def g(target=100):\n    nums = list(range(1, 101))\n    random.shuffle(nums)\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=42) -> bool:\n    \"\"\"Find two numbers in the list that add up to a specific target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=42):\n    return [10, 32]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 124,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=42) -> bool:\n    \"\"\"Find two numbers in the list that add up to a specific target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=42):\n    return [10, 32]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find a subarray in the matrix that has a sum equal to a specific target.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(j, cols):\n                    subarray = [matrix[x][y] for x in range(i, k+1) for y in range(j, l+1)]\n                    if sum(subarray) == target:\n                        return True\n    return False\ndef g(target=100):\n    return [[10, 20, 30], [40, 50, 60], [70, 80, 90]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 124,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find a subarray in the matrix that has a sum equal to a specific target.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(j, cols):\n                    subarray = [matrix[x][y] for x in range(i, k+1) for y in range(j, l+1)]\n                    if sum(subarray) == target:\n                        return True\n    return False",
        "solution_func": "def g(target=100):\n    return [[10, 20, 30], [40, 50, 60], [70, 80, 90]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='ost') -> bool:\n    \"\"\"Find a word in the list that has a specific prefix and suffix.\"\"\"\n    for word in words:\n        if word.startswith(prefix) and word.endswith(suffix):\n            return True\n    return False\ndef g(prefix='pre', suffix='ost'):\n    return ['preset', 'posture', 'test', 'program']\nassert f(g())\n",
        "emb": null,
        "idx_generation": 124,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='ost') -> bool:\n    \"\"\"Find a word in the list that has a specific prefix and suffix.\"\"\"\n    for word in words:\n        if word.startswith(prefix) and word.endswith(suffix):\n            return True\n    return False",
        "solution_func": "def g(prefix='pre', suffix='ost'):\n    return ['preset', 'posture', 'test', 'program']",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: str, y: str, z: str, w=6) -> bool:\n    \"\"\"Check if the strings can be rearranged to form a palindrome\"\"\"\n    count = {}\n    for char in x:\n        count[char] = count.get(char, 0) + 1\n    for char in y:\n        count[char] = count.get(char, 0) + 1\n    for char in z:\n        count[char] = count.get(char, 0) + 1\n    odd_count = 0\n    for value in count.values():\n        if value % 2 != 0:\n            odd_count += 1\n    return odd_count <= w\ndef g(x=\"abc\", y=\"def\", z=\"ghi\", w=6):\n    return x + y + z\nassert f(g())\n",
        "emb": null,
        "idx_generation": 124,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, y: str, z: str, w=6) -> bool:\n    \"\"\"Check if the strings can be rearranged to form a palindrome\"\"\"\n    count = {}\n    for char in x:\n        count[char] = count.get(char, 0) + 1\n    for char in y:\n        count[char] = count.get(char, 0) + 1\n    for char in z:\n        count[char] = count.get(char, 0) + 1\n    odd_count = 0\n    for value in count.values():\n        if value % 2 != 0:\n            odd_count += 1\n    return odd_count <= w",
        "solution_func": "def g(x=\"abc\", y=\"def\", z=\"ghi\", w=6):\n    return x + y + z",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, k=3) -> bool:\n    \"\"\"Check if there are k numbers in the list that sum up to the target value\"\"\"\n    def helper(nums, target, k):\n        if k == 0:\n            return target == 0\n        if len(nums) < k or sum(nums[-k:]) < target:\n            return False\n        for i in range(len(nums) - k + 1):\n            if helper(nums[i+1:], target - nums[i], k - 1):\n                return True\n        return False\n    return helper(nums, target, k)\ndef g(nums=[1, 2, 3, 4, 5], target=10, k=3):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 124,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int, k=3) -> bool:\n    \"\"\"Check if there are k numbers in the list that sum up to the target value\"\"\"\n    def helper(nums, target, k):\n        if k == 0:\n            return target == 0\n        if len(nums) < k or sum(nums[-k:]) < target:\n            return False\n        for i in range(len(nums) - k + 1):\n            if helper(nums[i+1:], target - nums[i], k - 1):\n                return True\n        return False\n    return helper(nums, target, k)",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=10, k=3):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"Check if there is a substring of length k that contains all unique characters\"\"\"\n    for i in range(len(s) - k + 1):\n        if len(set(s[i:i+k])) == k:\n            return True\n    return False\ndef g(s=\"abcdefgh\", k=2):\n    return s\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 124,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"Check if there is a substring of length k that contains all unique characters\"\"\"\n    for i in range(len(s) - k + 1):\n        if len(set(s[i:i+k])) == k:\n            return True\n    return False",
        "solution_func": "def g(s=\"abcdefgh\", k=2):\n    return s",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sums up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(length=10, lower_bound=1, upper_bound=100):\n    nums = [random.randint(lower_bound, upper_bound) for _ in range(length)]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 124,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sums up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(length=10, lower_bound=1, upper_bound=100):\n    nums = [random.randint(lower_bound, upper_bound) for _ in range(length)]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=6) -> bool:\n    \"\"\"Given a 2D array filled with integers, check if there exists a subarray whose sum is equal to the target value.\nSample Input:\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ntarget = 12\nSample Output:\nTrue\"\"\"\n    for i in range(arr.shape[0]):\n        for j in range(arr.shape[1]):\n            if np.sum(arr[i:, j:]) == target:\n                return True\n    return False\n\ndef g(arr=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), target=6):\n    subarray = np.array([[1]])\n    for i in range(arr.shape[0]):\n        for j in range(arr.shape[1]):\n            if np.sum(arr[i:, j:]) == target:\n                subarray = arr[i:, j:]\n    return subarray\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 125,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=6) -> bool:\n    \"\"\"Given a 2D array filled with integers, check if there exists a subarray whose sum is equal to the target value.\nSample Input:\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ntarget = 12\nSample Output:\nTrue\"\"\"\n    for i in range(arr.shape[0]):\n        for j in range(arr.shape[1]):\n            if np.sum(arr[i:, j:]) == target:\n                return True\n    return False",
        "solution_func": "def g(arr=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), target=6):\n    subarray = np.array([[1]])\n    for i in range(arr.shape[0]):\n        for j in range(arr.shape[1]):\n            if np.sum(arr[i:, j:]) == target:\n                subarray = arr[i:, j:]\n    return subarray",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6], target=10) -> bool:\n    \"\"\"Given a list of numbers, find if there exists a combination of n numbers that sum up to the target value.\nSample Input:\nn = 3\nnums = [1, 2, 3, 4, 5, 6]\ntarget = 9\nSample Output:\nTrue\"\"\"\n    combinations = itertools.combinations(nums, n)\n    for combo in combinations:\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6], target=10):\n    for n in range(1, len(nums)+1):\n        combinations = itertools.combinations(nums, n)\n        for combo in combinations:\n            if sum(combo) == target:\n                return combo\n    return []\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 125,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6], target=10) -> bool:\n    \"\"\"Given a list of numbers, find if there exists a combination of n numbers that sum up to the target value.\nSample Input:\nn = 3\nnums = [1, 2, 3, 4, 5, 6]\ntarget = 9\nSample Output:\nTrue\"\"\"\n    combinations = itertools.combinations(nums, n)\n    for combo in combinations:\n        if sum(combo) == target:\n            return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6], target=10):\n    for n in range(1, len(nums)+1):\n        combinations = itertools.combinations(nums, n)\n        for combo in combinations:\n            if sum(combo) == target:\n                return combo\n    return []",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray whose product is equal to the target value.\nSample Input:\narr = [1, 2, 3, 4, 5]\ntarget = 60\nSample Output:\nTrue\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            subarray = arr[i:j]\n            if np.prod(subarray) == target:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], target=0):\n    subarray = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            temp = arr[i:j]\n            if np.prod(temp) == target:\n                subarray = temp\n    return subarray\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 125,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray whose product is equal to the target value.\nSample Input:\narr = [1, 2, 3, 4, 5]\ntarget = 60\nSample Output:\nTrue\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            subarray = arr[i:j]\n            if np.prod(subarray) == target:\n                return True\n    return False",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5], target=0):\n    subarray = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            temp = arr[i:j]\n            if np.prod(temp) == target:\n                subarray = temp\n    return subarray",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, k=3) -> bool:\n    \"\"\"Find if there are k numbers in nums that sum up to target\"\"\"\n    combinations = itertools.combinations(nums, k)\n    for combo in combinations:\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g(target=100, k=3):\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 125,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, k=3) -> bool:\n    \"\"\"Find if there are k numbers in nums that sum up to target\"\"\"\n    combinations = itertools.combinations(nums, k)\n    for combo in combinations:\n        if sum(combo) == target:\n            return True\n    return False",
        "solution_func": "def g(target=100, k=3):\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    return nums",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, substring=\"python\", case_sensitive=True) -> bool:\n    \"\"\"Check if the substring is present in the string\"\"\"\n    if case_sensitive:\n        if substring in string:\n            return True\n    else:\n        if substring.lower() in string.lower():\n            return True\n    return False\n\ndef g(substring=\"python\", case_sensitive=True):\n    string = \"I love Python programming\"\n    return string\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 125,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring=\"python\", case_sensitive=True) -> bool:\n    \"\"\"Check if the substring is present in the string\"\"\"\n    if case_sensitive:\n        if substring in string:\n            return True\n    else:\n        if substring.lower() in string.lower():\n            return True\n    return False",
        "solution_func": "def g(substring=\"python\", case_sensitive=True):\n    string = \"I love Python programming\"\n    return string",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the target number is present in the given matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=10):\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9],\n    ]\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 125,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the target number is present in the given matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=10):\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9],\n    ]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100, target_product=2025) -> bool:\n    \"\"\"Given a list of integers, find two numbers whose sum is equal to target_sum and whose product is equal to target_product\"\"\"\n    return any((nums[i] + nums[j] == target_sum and nums[i] * nums[j] == target_product for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(target_sum=100, target_product=2025):\n    return [45, 45]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 125,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=100, target_product=2025) -> bool:\n    \"\"\"Given a list of integers, find two numbers whose sum is equal to target_sum and whose product is equal to target_product\"\"\"\n    return any((nums[i] + nums[j] == target_sum and nums[i] * nums[j] == target_product for i in range(len(nums)) for j in range(i + 1, len(nums))))",
        "solution_func": "def g(target_sum=100, target_product=2025):\n    return [45, 45]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Given a list of integers, find three numbers whose sum is equal to target_sum\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums))))\ndef g(target_sum=100):\n    return [25, 25, 50]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 125,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Given a list of integers, find three numbers whose sum is equal to target_sum\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums))))",
        "solution_func": "def g(target_sum=100):\n    return [25, 25, 50]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Given a list of integers, find four numbers whose sum is equal to target_sum\"\"\"\n    return any((nums[i] + nums[j] + nums[k] + nums[l] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums)) for l in range(k + 1, len(nums))))\ndef g(target_sum=100):\n    return [10, 20, 30, 40]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 125,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Given a list of integers, find four numbers whose sum is equal to target_sum\"\"\"\n    return any((nums[i] + nums[j] + nums[k] + nums[l] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums)) for l in range(k + 1, len(nums))))",
        "solution_func": "def g(target_sum=100):\n    return [10, 20, 30, 40]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello world', case_sensitive=False) -> bool:\n    \"\"\"Check if a string matches the target string\"\"\"\n    if case_sensitive:\n        return s == target\n    else:\n        return s.lower() == target.lower()\ndef g(target='hello world', case_sensitive=False):\n    if case_sensitive:\n        return target\n    else:\n        return target.lower()\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 125,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='hello world', case_sensitive=False) -> bool:\n    \"\"\"Check if a string matches the target string\"\"\"\n    if case_sensitive:\n        return s == target\n    else:\n        return s.lower() == target.lower()",
        "solution_func": "def g(target='hello world', case_sensitive=False):\n    if case_sensitive:\n        return target\n    else:\n        return target.lower()",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, s=7, n=3) -> bool:\n    \"\"\"Find a number that is the sum of n consecutive integers starting from 1, and the sum is equal to s.\"\"\"\n    return sum(range(x, x+n)) == s\ndef g(s=7, n=3):\n    return s - n + 1\nassert f(g())\n",
        "emb": null,
        "idx_generation": 126,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, s=7, n=3) -> bool:\n    \"\"\"Find a number that is the sum of n consecutive integers starting from 1, and the sum is equal to s.\"\"\"\n    return sum(range(x, x+n)) == s",
        "solution_func": "def g(s=7, n=3):\n    return s - n + 1",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, s='racecar') -> bool:\n    \"\"\"Check if a word is a palindrome.\"\"\"\n    return x == x[::-1]\ndef g(s='racecar'):\n    return s\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 126,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, s='racecar') -> bool:\n    \"\"\"Check if a word is a palindrome.\"\"\"\n    return x == x[::-1]",
        "solution_func": "def g(s='racecar'):\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, s='python') -> bool:\n    \"\"\"Check if a string contains all the letters of another string.\"\"\"\n    return all(letter in x for letter in s)\ndef g(s='python'):\n    return ''.join(set(s))\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 126,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, s='python') -> bool:\n    \"\"\"Check if a string contains all the letters of another string.\"\"\"\n    return all(letter in x for letter in s)",
        "solution_func": "def g(s='python'):\n    return ''.join(set(s))",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3, c=5) -> bool:\n    \"\"\"Check if a number is divisible by any of three given numbers.\"\"\"\n    return n % a == 0 or n % b == 0 or n % c == 0\ndef g(a=2, b=3, c=5):\n    return a * b * c\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 126,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=2, b=3, c=5) -> bool:\n    \"\"\"Check if a number is divisible by any of three given numbers.\"\"\"\n    return n % a == 0 or n % b == 0 or n % c == 0",
        "solution_func": "def g(a=2, b=3, c=5):\n    return a * b * c",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=1, b=2, c=3, d=4) -> bool:\n    \"\"\"Check if a number can be expressed as the sum of three other numbers.\"\"\"\n    return any([n == x + y + z for x in range(a) for y in range(b) for z in range(c, d)])\ndef g(a=1, b=2, c=3, d=4):\n    return a + b + c + d\nassert f(g())\n",
        "emb": null,
        "idx_generation": 126,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=1, b=2, c=3, d=4) -> bool:\n    \"\"\"Check if a number can be expressed as the sum of three other numbers.\"\"\"\n    return any([n == x + y + z for x in range(a) for y in range(b) for z in range(c, d)])",
        "solution_func": "def g(a=1, b=2, c=3, d=4):\n    return a + b + c + d",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='hello', b='world', c='!') -> bool:\n    \"\"\"Check if a string is a concatenation of three given strings.\"\"\"\n    return s == a + b + c\ndef g(a='hello', b='world', c='!'):\n    return a + b + c\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 126,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, a='hello', b='world', c='!') -> bool:\n    \"\"\"Check if a string is a concatenation of three given strings.\"\"\"\n    return s == a + b + c",
        "solution_func": "def g(a='hello', b='world', c='!'):\n    return a + b + c",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    return [10, 5, 3, 7]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 126,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=20):\n    return [10, 5, 3, 7]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int, is_prime=True) -> bool:\n    \"\"\"Check if a number is prime\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(is_prime=True):\n    return 13\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 126,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(num: int, is_prime=True) -> bool:\n    \"\"\"Check if a number is prime\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(is_prime=True):\n    return 13",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='world') -> bool:\n    \"\"\"Check if a string contains a specific substring\"\"\"\n    return substring in s\n\ndef g(substring='world'):\n    return \"Hello, world!\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 126,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='world') -> bool:\n    \"\"\"Check if a string contains a specific substring\"\"\"\n    return substring in s",
        "solution_func": "def g(substring='world'):\n    return \"Hello, world!\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list whose sum is equal to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 126,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list whose sum is equal to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n: int = 5, count: int = 10) -> bool:\n    \"\"\"Check if there are at least 'count' occurrences of the substring 's' in 'n' concatenated copies of s\"\"\"\n    return (s * n).count(s) >= count\ndef g(s: str = 'hello', n: int = 5, count: int = 10):\n    return s\nassert f(g())\n",
        "emb": null,
        "idx_generation": 127,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n: int = 5, count: int = 10) -> bool:\n    \"\"\"Check if there are at least 'count' occurrences of the substring 's' in 'n' concatenated copies of s\"\"\"\n    return (s * n).count(s) >= count",
        "solution_func": "def g(s: str = 'hello', n: int = 5, count: int = 10):\n    return s",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there is a pair of distinct numbers in 'nums' that sums up to the 'target'\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 10):\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 127,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there is a pair of distinct numbers in 'nums' that sums up to the 'target'\"\"\"\n    return any(target - num in nums for num in nums)",
        "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 10):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int = 5) -> bool:\n    \"\"\"Check if the length of 's' is divisible by 'n'\"\"\"\n    return len(s) % n == 0\ndef g(s: str = 'hello', n: int = 5):\n    return s\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 127,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n: int = 5) -> bool:\n    \"\"\"Check if the length of 's' is divisible by 'n'\"\"\"\n    return len(s) % n == 0",
        "solution_func": "def g(s: str = 'hello', n: int = 5):\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, a=12515426721927424, b=7) -> bool:\n    \"\"\"Check if x raised to the power of b is equal to a.\"\"\"\n    return x ** b == a\ndef g(a=12515426721927424, b=7):\n    return int(a ** (1/b))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 127,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=12515426721927424, b=7) -> bool:\n    \"\"\"Check if x raised to the power of b is equal to a.\"\"\"\n    return x ** b == a",
        "solution_func": "def g(a=12515426721927424, b=7):\n    return int(a ** (1/b))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: List[int], t=1196610, a=15, e=4376, s=3, b=5) -> bool:\n    \"\"\"Check if the sum of the sublist from index a to index e with step s is equal to t, and if the length of the sublist is divisible by b.\"\"\"\n    return t == sum([x[i] for i in range(a, e, s)]) and len(x[a:e:s]) % b == 0\ndef g(t=1196610, a=15, e=4376, s=3, b=5):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\nassert f(g())\n",
        "emb": null,
        "idx_generation": 127,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], t=1196610, a=15, e=4376, s=3, b=5) -> bool:\n    \"\"\"Check if the sum of the sublist from index a to index e with step s is equal to t, and if the length of the sublist is divisible by b.\"\"\"\n    return t == sum([x[i] for i in range(a, e, s)]) and len(x[a:e:s]) % b == 0",
        "solution_func": "def g(t=1196610, a=15, e=4376, s=3, b=5):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, strings=['vekykothumygochuth', 'xujatajazisiqu', 'vapyvymobymethotexto', 'tygope', 'g', 'ripalotextaj', 'tecehuthojodogucivaj', 'xyjulecometihesej', 'ribo', 'gutachowagexatoset'], c='o') -> bool:\n    \"\"\"Check if the character c appears in the alphabetically last string in the list.\"\"\"\n    return c in strings[-1]\ndef g(strings=['vekykothumygochuth', 'xujatajazisiqu', 'vapyvymobymethotexto', 'tygope', 'g', 'ripalotextaj', 'tecehuthojodogucivaj', 'xyjulecometihesej', 'ribo', 'gutachowagexatoset'], c='o'):\n    return sorted(strings)[-1]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 127,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, strings=['vekykothumygochuth', 'xujatajazisiqu', 'vapyvymobymethotexto', 'tygope', 'g', 'ripalotextaj', 'tecehuthojodogucivaj', 'xyjulecometihesej', 'ribo', 'gutachowagexatoset'], c='o') -> bool:\n    \"\"\"Check if the character c appears in the alphabetically last string in the list.\"\"\"\n    return c in strings[-1]",
        "solution_func": "def g(strings=['vekykothumygochuth', 'xujatajazisiqu', 'vapyvymobymethotexto', 'tygope', 'g', 'ripalotextaj', 'tecehuthojodogucivaj', 'xyjulecometihesej', 'ribo', 'gutachowagexatoset'], c='o'):\n    return sorted(strings)[-1]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, n=5) -> bool:\n    \"\"\"Check if the sum of each row in a given 2D array is equal to a given number.\"\"\"\n    return np.all(np.sum(arr, axis=1) == n)\ndef g(n=5):\n    return np.full((3, 3), n//3)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 127,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, n=5) -> bool:\n    \"\"\"Check if the sum of each row in a given 2D array is equal to a given number.\"\"\"\n    return np.all(np.sum(arr, axis=1) == n)",
        "solution_func": "def g(n=5):\n    return np.full((3, 3), n//3)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, prime_factor=2) -> bool:\n    \"\"\"Check if a number is a power of a given prime factor.\"\"\"\n    while num % prime_factor == 0:\n        num //= prime_factor\n    return num == 1\ndef g(prime_factor=2):\n    return prime_factor ** 3\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 127,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int, prime_factor=2) -> bool:\n    \"\"\"Check if a number is a power of a given prime factor.\"\"\"\n    while num % prime_factor == 0:\n        num //= prime_factor\n    return num == 1",
        "solution_func": "def g(prime_factor=2):\n    return prime_factor ** 3",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string contains the same number of vowels and consonants, ignoring case.\"\"\"\n    vowels = 'aeiou'\n    s = s.lower()\n    vowel_count = sum(1 for char in s if char in vowels)\n    consonant_count = sum(1 for char in s if char.isalpha() and char not in vowels)\n    return vowel_count == consonant_count\ndef g(n=3):\n    return 'a'*n + 'b'*n + 'c'*n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 127,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string contains the same number of vowels and consonants, ignoring case.\"\"\"\n    vowels = 'aeiou'\n    s = s.lower()\n    vowel_count = sum(1 for char in s if char in vowels)\n    consonant_count = sum(1 for char in s if char.isalpha() and char not in vowels)\n    return vowel_count == consonant_count",
        "solution_func": "def g(n=3):\n    return 'a'*n + 'b'*n + 'c'*n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, target=153) -> bool:\n    \"\"\"Find a number that is equal to the sum of the cubes of its digits.\n    The goal is to find a number that satisfies f(num) == True, where num is an integer and target is the desired sum.\"\"\"\n    return sum(int(digit) ** 3 for digit in str(num)) == target\ndef g(target=153):\n    num = 100\n    while not f(num, target):\n        num += 1\n    return num\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 127,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int, target=153) -> bool:\n    \"\"\"Find a number that is equal to the sum of the cubes of its digits.\n    The goal is to find a number that satisfies f(num) == True, where num is an integer and target is the desired sum.\"\"\"\n    return sum(int(digit) ** 3 for digit in str(num)) == target",
        "solution_func": "def g(target=153):\n    num = 100\n    while not f(num, target):\n        num += 1\n    return num",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    return any((target - num) in nums for num in nums)\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 128,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    return any((target - num) in nums for num in nums)",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], count=2) -> bool:\n    \"\"\"Check if there are at least 'count' number of words in the list that start with the same letter.\"\"\"\n    return any((len([word for word in words if word.startswith(letter)]) >= count) for letter in set(word[0] for word in words))\ndef g(count=2):\n    return [\"apple\", \"banana\", \"avocado\", \"blueberry\", \"broccoli\"]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 128,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], count=2) -> bool:\n    \"\"\"Check if there are at least 'count' number of words in the list that start with the same letter.\"\"\"\n    return any((len([word for word in words if word.startswith(letter)]) >= count) for letter in set(word[0] for word in words))",
        "solution_func": "def g(count=2):\n    return [\"apple\", \"banana\", \"avocado\", \"blueberry\", \"broccoli\"]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there is a pair of numbers in the matrix that add up to the target.\"\"\"\n    return any((target - num) in row for row in matrix for num in row)\ndef g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 128,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there is a pair of numbers in the matrix that add up to the target.\"\"\"\n    return any((target - num) in row for row in matrix for num in row)",
        "solution_func": "def g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_length=5) -> bool:\n    \"\"\"Check if a string has a length equal to the target_length.\"\"\"\n    return len(s) == target_length\ndef g(target_length=5):\n    return \"hello\"[:target_length]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0
        ],
        "idx_generation": 128,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target_length=5) -> bool:\n    \"\"\"Check if a string has a length equal to the target_length.\"\"\"\n    return len(s) == target_length",
        "solution_func": "def g(target_length=5):\n    return \"hello\"[:target_length]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\ndef f(n: int, target_sqrt=2) -> bool:\n    \"\"\"Check if the square root of a number is equal to the target_sqrt.\"\"\"\n    return sqrt(n) == target_sqrt\ndef g(target_sqrt=2):\n    return target_sqrt ** 2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 128,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\ndef f(n: int, target_sqrt=2) -> bool:\n    \"\"\"Check if the square root of a number is equal to the target_sqrt.\"\"\"\n    return sqrt(n) == target_sqrt",
        "solution_func": "def g(target_sqrt=2):\n    return target_sqrt ** 2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exist two numbers in a list whose sum is equal to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target_sum-9]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 128,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exist two numbers in a list whose sum is equal to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target_sum-9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if a string has exactly k number of vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = sum(1 for char in s if char.lower() in vowels)\n    return count == k\n\ndef g(k=3):\n    return 'aeiou' * k\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 128,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if a string has exactly k number of vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = sum(1 for char in s if char.lower() in vowels)\n    return count == k",
        "solution_func": "def g(k=3):\n    return 'aeiou' * k",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list such that their sum is equal to 10.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == 10:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 128,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list such that their sum is equal to 10.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == 10:\n                return True\n    return False",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the sum of each column in a matrix is greater than the sum of each row.\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return all(col_sum > row_sum for col_sum, row_sum in zip(col_sums, row_sums))\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 128,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the sum of each column in a matrix is greater than the sum of each row.\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return all(col_sum > row_sum for col_sum, row_sum in zip(col_sums, row_sums))",
        "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=3.14) -> bool:\n    \"\"\"Check if the square root of n is equal to x\"\"\"\n    return math.sqrt(n) == x\n\ndef g(x=3.14):\n    return x ** 2\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 128,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=3.14) -> bool:\n    \"\"\"Check if the square root of n is equal to x\"\"\"\n    return math.sqrt(n) == x",
        "solution_func": "def g(x=3.14):\n    return x ** 2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find if the target number exists in the matrix\"\"\"\n    return any(target in row for row in matrix)\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 129,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find if the target number exists in the matrix\"\"\"\n    return any(target in row for row in matrix)",
        "solution_func": "def g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, area=100) -> bool:\n    \"\"\"Find if the given area is equal to the area of a circle with the given radius\"\"\"\n    return math.isclose(math.pi * radius ** 2, area)\ndef g(area=100):\n    return math.sqrt(area / math.pi)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 129,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(radius: float, area=100) -> bool:\n    \"\"\"Find if the given area is equal to the area of a circle with the given radius\"\"\"\n    return math.isclose(math.pi * radius ** 2, area)",
        "solution_func": "def g(area=100):\n    return math.sqrt(area / math.pi)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=10, count=3) -> bool:\n    \"\"\"Find if there are count numbers in the list that add up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(combo) == target for combo in combinations(numbers, count))\ndef g(target=10, count=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 129,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=10, count=3) -> bool:\n    \"\"\"Find if there are count numbers in the list that add up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(combo) == target for combo in combinations(numbers, count))",
        "solution_func": "def g(target=10, count=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=36) -> bool:\n    \"\"\"Check if there exists a row in the matrix where the sum of all elements is equal to the target\"\"\"\n    return any((sum(row) == target for row in matrix))\ndef g(target=36):\n    matrix = [[2, 10, 15], [5, 12, 19], [8, 14, 21]]\n    return matrix\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 129,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=36) -> bool:\n    \"\"\"Check if there exists a row in the matrix where the sum of all elements is equal to the target\"\"\"\n    return any((sum(row) == target for row in matrix))",
        "solution_func": "def g(target=36):\n    matrix = [[2, 10, 15], [5, 12, 19], [8, 14, 21]]\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g(target=100):\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 129,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))",
        "solution_func": "def g(target=100):\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], target='apple') -> bool:\n    \"\"\"Check if the target string is a prefix of any of the strings in the list\"\"\"\n    return any((s.startswith(target) for s in strings))\ndef g(target='apple'):\n    strings = ['applepie', 'banana', 'apricot', 'grape']\n    return strings\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 129,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(strings: List[str], target='apple') -> bool:\n    \"\"\"Check if the target string is a prefix of any of the strings in the list\"\"\"\n    return any((s.startswith(target) for s in strings))",
        "solution_func": "def g(target='apple'):\n    strings = ['applepie', 'banana', 'apricot', 'grape']\n    return strings",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], target=10) -> bool:\n    \"\"\"Find a sequence of integers that sums up to the target\"\"\"\n    return sum(seq) == target\ndef g(target=10):\n    return [1, 2, 3, 4]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 129,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(seq: List[int], target=10) -> bool:\n    \"\"\"Find a sequence of integers that sums up to the target\"\"\"\n    return sum(seq) == target",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a pair of integers (i, j) such that matrix[i][j] equals the target\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == target:\n                return True\n    return False\ndef g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 129,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a pair of integers (i, j) such that matrix[i][j] equals the target\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring=\"world\") -> bool:\n    \"\"\"Check if a given substring exists in the input string\"\"\"\n    return substring in s\ndef g(substring=\"world\"):\n    return \"Hello, world!\"\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 129,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring=\"world\") -> bool:\n    \"\"\"Check if a given substring exists in the input string\"\"\"\n    return substring in s",
        "solution_func": "def g(substring=\"world\"):\n    return \"Hello, world!\"",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15, length=3) -> bool:\n    \"\"\"Find a sublist of length 'length' in 'nums' whose sum is equal to 'target'\"\"\"\n    return any(sum(nums[i:i+length]) == target for i in range(len(nums)-length+1))\ndef g(target=15, length=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 129,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=15, length=3) -> bool:\n    \"\"\"Find a sublist of length 'length' in 'nums' whose sum is equal to 'target'\"\"\"\n    return any(sum(nums[i:i+length]) == target for i in range(len(nums)-length+1))",
        "solution_func": "def g(target=15, length=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=1000) -> bool:\n    \"\"\"Find three numbers from the list that sum up to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target_sum:\n                    return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 130,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=1000) -> bool:\n    \"\"\"Find three numbers from the list that sum up to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target_sum:\n                    return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a path from the top-left corner to the bottom-right corner in the matrix such that the sum of the values along the path is equal to the target value.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    dp = [[0] * n for _ in range(m)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = matrix[i][j] + min(dp[i-1][j], dp[i][j-1])\n    return dp[m-1][n-1] == target\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 130,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a path from the top-left corner to the bottom-right corner in the matrix such that the sum of the values along the path is equal to the target value.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    dp = [[0] * n for _ in range(m)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = matrix[i][j] + min(dp[i-1][j], dp[i][j-1])\n    return dp[m-1][n-1] == target",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"Find the smallest number that can be expressed as the sum of two cubes in n different ways.\"\"\"\n    cubes = []\n    for i in range(1, int(n**(1/3))+1):\n        cubes.append(i**3)\n    count = 0\n    for i in range(1, target):\n        num_ways = 0\n        for j in range(len(cubes)):\n            for k in range(j, len(cubes)):\n                if cubes[j] + cubes[k] == i:\n                    num_ways += 1\n        if num_ways == n:\n            count += 1\n            if count == 1:\n                return i\n    return False\ndef g(target=100):\n    return target\nassert f(g())\n",
        "emb": null,
        "idx_generation": 130,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"Find the smallest number that can be expressed as the sum of two cubes in n different ways.\"\"\"\n    cubes = []\n    for i in range(1, int(n**(1/3))+1):\n        cubes.append(i**3)\n    count = 0\n    for i in range(1, target):\n        num_ways = 0\n        for j in range(len(cubes)):\n            for k in range(j, len(cubes)):\n                if cubes[j] + cubes[k] == i:\n                    num_ways += 1\n        if num_ways == n:\n            count += 1\n            if count == 1:\n                return i\n    return False",
        "solution_func": "def g(target=100):\n    return target",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a row in the matrix whose sum is equal to the target\"\"\"\n    return any(sum(row) == target for row in matrix)\ndef g(matrix=[[5, 10, 15], [2, 4, 6], [8, 16, 24]]):\n    return matrix[0]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 130,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a row in the matrix whose sum is equal to the target\"\"\"\n    return any(sum(row) == target for row in matrix)",
        "solution_func": "def g(matrix=[[5, 10, 15], [2, 4, 6], [8, 16, 24]]):\n    return matrix[0]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(nums=[25, 10, 30, 20, 15, 5, 35]):\n    return [nums[0], nums[1], nums[2]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 130,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))",
        "solution_func": "def g(nums=[25, 10, 30, 20, 15, 5, 35]):\n    return [nums[0], nums[1], nums[2]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(word: str, letter='e', count=3) -> bool:\n    \"\"\"Find a word in which the given letter appears exactly the given count of times\"\"\"\n    return word.count(letter) == count\ndef g(word='elephant'):\n    return word\nassert f(g())\n",
        "emb": null,
        "idx_generation": 130,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str, letter='e', count=3) -> bool:\n    \"\"\"Find a word in which the given letter appears exactly the given count of times\"\"\"\n    return word.count(letter) == count",
        "solution_func": "def g(word='elephant'):\n    return word",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, num1=14, num2=36) -> bool:\n    \"\"\"Check if the given number is a multiple of either num1 or num2.\"\"\"\n    return n % num1 == 0 or n % num2 == 0\ndef g(num1=14, num2=36):\n    ans = 1\n    while True:\n        if ans % num1 == 0 or ans % num2 == 0:\n            return ans\n        ans += 1\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 130,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, num1=14, num2=36) -> bool:\n    \"\"\"Check if the given number is a multiple of either num1 or num2.\"\"\"\n    return n % num1 == 0 or n % num2 == 0",
        "solution_func": "def g(num1=14, num2=36):\n    ans = 1\n    while True:\n        if ans % num1 == 0 or ans % num2 == 0:\n            return ans\n        ans += 1",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if the given string contains all the vowels.\"\"\"\n    return all((vowel in s.lower() for vowel in vowels))\ndef g(vowels=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(vowels)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 130,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if the given string contains all the vowels.\"\"\"\n    return all((vowel in s.lower() for vowel in vowels))",
        "solution_func": "def g(vowels=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(vowels)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to find 3 numbers from the given list that add up to the target number.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 130,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to find 3 numbers from the given list that add up to the target number.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='python', count=3) -> bool:\n    \"\"\"Check if a given string contains a substring a specified number of times\"\"\"\n    return string.count(substr) == count\ndef g(substr='python', count=3):\n    return substr * count\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 130,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substr='python', count=3) -> bool:\n    \"\"\"Check if a given string contains a substring a specified number of times\"\"\"\n    return string.count(substr) == count",
        "solution_func": "def g(substr='python', count=3):\n    return substr * count",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10, min_length=2, max_length=4) -> bool:\n    \"\"\"Find a subsequence of nums whose sum is equal to target_sum and has a length between min_length and max_length (inclusive)\"\"\"\n    assert all((num >= 0 for num in nums))\n    return any(sum(subseq) == target_sum for length in range(min_length, max_length + 1) for subseq in combinations(nums, length))\ndef g(target_sum=10, min_length=2, max_length=4):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 131,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=10, min_length=2, max_length=4) -> bool:\n    \"\"\"Find a subsequence of nums whose sum is equal to target_sum and has a length between min_length and max_length (inclusive)\"\"\"\n    assert all((num >= 0 for num in nums))\n    return any(sum(subseq) == target_sum for length in range(min_length, max_length + 1) for subseq in combinations(nums, length))",
        "solution_func": "def g(target_sum=10, min_length=2, max_length=4):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a row and a column in the matrix such that the product of the row elements and the sum of the column elements is equal to the target value\"\"\"\n    assert all(len(row) == len(matrix[0]) for row in matrix)\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n    for row in matrix:\n        assert all((num >= 0 for num in row))\n    for row_index in range(num_rows):\n        for col_index in range(num_cols):\n            if sum(matrix[row_index]) * sum(row[col_index] for row in matrix) == target:\n                return (row_index, col_index)\n    return None\ndef g(target=20):\n    return [[2, 4, 1], [3, 5, 2], [1, 2, 3]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 131,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a row and a column in the matrix such that the product of the row elements and the sum of the column elements is equal to the target value\"\"\"\n    assert all(len(row) == len(matrix[0]) for row in matrix)\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n    for row in matrix:\n        assert all((num >= 0 for num in row))\n    for row_index in range(num_rows):\n        for col_index in range(num_cols):\n            if sum(matrix[row_index]) * sum(row[col_index] for row in matrix) == target:\n                return (row_index, col_index)\n    return None",
        "solution_func": "def g(target=20):\n    return [[2, 4, 1], [3, 5, 2], [1, 2, 3]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target_char=\"a\", target_length=4) -> bool:\n    \"\"\"Check if the string contains the target character and has a length greater than or equal to target_length\"\"\"\n    assert len(string) > 0\n    return target_char in string and len(string) >= target_length\ndef g(target_char=\"a\", target_length=4):\n    return \"banana\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 131,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, target_char=\"a\", target_length=4) -> bool:\n    \"\"\"Check if the string contains the target character and has a length greater than or equal to target_length\"\"\"\n    assert len(string) > 0\n    return target_char in string and len(string) >= target_length",
        "solution_func": "def g(target_char=\"a\", target_length=4):\n    return \"banana\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if num < 2:\n        return False\n    for prime in primes:\n        if num % prime == 0:\n            return False\n    return True\ndef g():\n    num = 31\n    return num\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 131,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if num < 2:\n        return False\n    for prime in primes:\n        if num % prime == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    num = 31\n    return num",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring=\"hello\") -> bool:\n    \"\"\"Check if the given string contains the substring 'hello'.\"\"\"\n    return substring in s\ndef g():\n    s = \"hello, how are you?\"\n    return s\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 131,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring=\"hello\") -> bool:\n    \"\"\"Check if the given string contains the substring 'hello'.\"\"\"\n    return substring in s",
        "solution_func": "def g():\n    s = \"hello, how are you?\"\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the given target number is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 131,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the given target number is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=57, b=3) -> bool:\n    \"\"\"Find the smallest n such that the square root of n is a whole number and the sum of the digits of n is equal to a.\"\"\"\n    sqrt_n = math.isqrt(n)\n    sum_digits = sum(int(digit) for digit in str(n))\n    return sqrt_n ** 2 == n and sum_digits == a\n\ndef g(a=57, b=3):\n    n = 1\n    while True:\n        sqrt_n = math.isqrt(n)\n        sum_digits = sum(int(digit) for digit in str(n))\n        if sqrt_n ** 2 == n and sum_digits == a:\n            return n\n        n += 1\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 131,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=57, b=3) -> bool:\n    \"\"\"Find the smallest n such that the square root of n is a whole number and the sum of the digits of n is equal to a.\"\"\"\n    sqrt_n = math.isqrt(n)\n    sum_digits = sum(int(digit) for digit in str(n))\n    return sqrt_n ** 2 == n and sum_digits == a",
        "solution_func": "def g(a=57, b=3):\n    n = 1\n    while True:\n        sqrt_n = math.isqrt(n)\n        sum_digits = sum(int(digit) for digit in str(n))\n        if sqrt_n ** 2 == n and sum_digits == a:\n            return n\n        n += 1",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=6, m=3) -> bool:\n    \"\"\"Find a string with a given pattern of repeating substrings.\"\"\"\n    pattern = s[:n] * m\n    return s == pattern\n\ndef g(n=6, m=3):\n    s = 'abc' * n\n    return s\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 131,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=6, m=3) -> bool:\n    \"\"\"Find a string with a given pattern of repeating substrings.\"\"\"\n    pattern = s[:n] * m\n    return s == pattern",
        "solution_func": "def g(n=6, m=3):\n    s = 'abc' * n\n    return s",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport datetime\n\ndef f(n: int, m=3) -> bool:\n    \"\"\"Find the smallest n such that the n-th day of the current month is a Friday.\"\"\"\n    today = datetime.date.today()\n    current_month = today.month\n    current_year = today.year\n    count = 0\n    for i in range(1, n+1):\n        day = datetime.date(current_year, current_month, i)\n        if day.weekday() == 4:  # Friday\n            count += 1\n            if count == m:\n                return i\n    return False\n\ndef g(m=3):\n    today = datetime.date.today()\n    current_month = today.month\n    current_year = today.year\n    n = 1\n    count = 0\n    while True:\n        day = datetime.date(current_year, current_month, n)\n        if day.weekday() == 4:  # Friday\n            count += 1\n            if count == m:\n                return n\n        n += 1\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 131,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(n: int, m=3) -> bool:\n    \"\"\"Find the smallest n such that the n-th day of the current month is a Friday.\"\"\"\n    today = datetime.date.today()\n    current_month = today.month\n    current_year = today.year\n    count = 0\n    for i in range(1, n+1):\n        day = datetime.date(current_year, current_month, i)\n        if day.weekday() == 4:  # Friday\n            count += 1\n            if count == m:\n                return i\n    return False",
        "solution_func": "def g(m=3):\n    today = datetime.date.today()\n    current_month = today.month\n    current_year = today.year\n    n = 1\n    count = 0\n    while True:\n        day = datetime.date(current_year, current_month, n)\n        if day.weekday() == 4:  # Friday\n            count += 1\n            if count == m:\n                return n\n        n += 1",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], n=5, target=12) -> bool:\n    \"\"\"Find a pair of numbers from the given list that sum up to the target number.\"\"\"\n    return any((i + j == target for i in arr for j in arr if i != j))\ndef g(n=5, target=12):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 131,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], n=5, target=12) -> bool:\n    \"\"\"Find a pair of numbers from the given list that sum up to the target number.\"\"\"\n    return any((i + j == target for i in arr for j in arr if i != j))",
        "solution_func": "def g(n=5, target=12):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target\"\"\"\n    from itertools import combinations\n    for combination in combinations(nums, 3):\n        if sum(combination) == target:\n            return True\n    return False\ndef g(target=0):\n    return [1, 2, -3]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 132,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target\"\"\"\n    from itertools import combinations\n    for combination in combinations(nums, 3):\n        if sum(combination) == target:\n            return True\n    return False",
        "solution_func": "def g(target=0):\n    return [1, 2, -3]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find the indices of two numbers in the matrix that sum up to the target\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[k])):\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return True\n    return False\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 132,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find the indices of two numbers in the matrix that sum up to the target\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[k])):\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return True\n    return False",
        "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find the two numbers in the list that multiply to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\ndef g(target=0):\n    return [2, 4, -5, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 132,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find the two numbers in the list that multiply to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    return [2, 4, -5, 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=99887766, b=112233445566, lower_bound=100000000) -> bool:\n    \"\"\"Find the largest digit in a number that is divisible by n\"\"\"\n    return max([int(digit) for digit in str(a) if int(digit) % n == 0]) == n and max([int(digit) for digit in str(b) if int(digit) % n == 0]) == n and (n >= lower_bound)\ndef g(a=99887766, b=112233445566, lower_bound=100000000):\n    digits_a = [int(digit) for digit in str(a)]\n    digits_b = [int(digit) for digit in str(b)]\n    divisible_digits_a = [digit for digit in digits_a if digit % 2 == 0]\n    divisible_digits_b = [digit for digit in digits_b if digit % 2 == 0]\n    return max(divisible_digits_a + divisible_digits_b)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 132,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=99887766, b=112233445566, lower_bound=100000000) -> bool:\n    \"\"\"Find the largest digit in a number that is divisible by n\"\"\"\n    return max([int(digit) for digit in str(a) if int(digit) % n == 0]) == n and max([int(digit) for digit in str(b) if int(digit) % n == 0]) == n and (n >= lower_bound)",
        "solution_func": "def g(a=99887766, b=112233445566, lower_bound=100000000):\n    digits_a = [int(digit) for digit in str(a)]\n    digits_b = [int(digit) for digit in str(b)]\n    divisible_digits_a = [digit for digit in digits_a if digit % 2 == 0]\n    divisible_digits_b = [digit for digit in digits_b if digit % 2 == 0]\n    return max(divisible_digits_a + divisible_digits_b)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=123456789, b=987654321, c=111111111, d=999999999, e=1000000000) -> bool:\n    \"\"\"Find the number from the given list which is divisible by n\"\"\"\n    return any([num % n == 0 for num in [a, b, c, d, e]])\ndef g(a=123456789, b=987654321, c=111111111, d=999999999, e=1000000000):\n    numbers = [a, b, c, d, e]\n    for num in numbers:\n        if num % 2 == 0:\n            return num\n    return None\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 132,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=123456789, b=987654321, c=111111111, d=999999999, e=1000000000) -> bool:\n    \"\"\"Find the number from the given list which is divisible by n\"\"\"\n    return any([num % n == 0 for num in [a, b, c, d, e]])",
        "solution_func": "def g(a=123456789, b=987654321, c=111111111, d=999999999, e=1000000000):\n    numbers = [a, b, c, d, e]\n    for num in numbers:\n        if num % 2 == 0:\n            return num\n    return None",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int, d: int, e: int, f: int) -> bool:\n    \"\"\"Check if the given values form a valid rectangle\"\"\"\n    return math.sqrt((b-a)**2 + (d-c)**2) == math.sqrt((e-a)**2 + (f-c)**2) and math.sqrt((b-a)**2 + (d-c)**2) == math.sqrt((e-b)**2 + (f-d)**2)\ndef g(a=0, b=3, c=0, d=4, e=3, f=4):\n    return a, b, c, d, e, f\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 132,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int, d: int, e: int, f: int) -> bool:\n    \"\"\"Check if the given values form a valid rectangle\"\"\"\n    return math.sqrt((b-a)**2 + (d-c)**2) == math.sqrt((e-a)**2 + (f-c)**2) and math.sqrt((b-a)**2 + (d-c)**2) == math.sqrt((e-b)**2 + (f-d)**2)",
        "solution_func": "def g(a=0, b=3, c=0, d=4, e=3, f=4):\n    return a, b, c, d, e, f",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=3.14159) -> bool:\n    \"\"\"Check if x is equal to the square root of a\"\"\"\n    return x == math.sqrt(a)\n\ndef g(a=3.14159):\n    return a ** 2\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 132,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=3.14159) -> bool:\n    \"\"\"Check if x is equal to the square root of a\"\"\"\n    return x == math.sqrt(a)",
        "solution_func": "def g(a=3.14159):\n    return a ** 2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: int, a=10, b=20) -> bool:\n    \"\"\"Check if x is between a and b (inclusive)\"\"\"\n    return a <= x <= b\n\ndef g(a=10, b=20):\n    return random.randint(a, b)\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 132,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(x: int, a=10, b=20) -> bool:\n    \"\"\"Check if x is between a and b (inclusive)\"\"\"\n    return a <= x <= b",
        "solution_func": "def g(a=10, b=20):\n    return random.randint(a, b)",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, a='hello', b='world') -> bool:\n    \"\"\"Check if the string contains both a and b\"\"\"\n    return a in string and b in string\n\ndef g(a='hello', b='world'):\n    return a + \" \" + b\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 132,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, a='hello', b='world') -> bool:\n    \"\"\"Check if the string contains both a and b\"\"\"\n    return a in string and b in string",
        "solution_func": "def g(a='hello', b='world'):\n    return a + \" \" + b",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, threshold=10) -> bool:\n    \"\"\"Check if the square root of the sum of squares of three numbers is greater than a threshold\"\"\"\n    return math.sqrt(x**2 + y**2 + z**2) > threshold\n\ndef g(x: int, y: int, z: int, threshold=10):\n    return x + y + z\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 132,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, threshold=10) -> bool:\n    \"\"\"Check if the square root of the sum of squares of three numbers is greater than a threshold\"\"\"\n    return math.sqrt(x**2 + y**2 + z**2) > threshold",
        "solution_func": "def g(x: int, y: int, z: int, threshold=10):\n    return x + y + z",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=4) -> bool:\n    \"\"\"Determine if there are two numbers in the array that add up to k.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == k:\n                return True\n    return False\ndef g(k=4):\n    return [1, 2, 3, k-3]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 133,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], k=4) -> bool:\n    \"\"\"Determine if there are two numbers in the array that add up to k.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == k:\n                return True\n    return False",
        "solution_func": "def g(k=4):\n    return [1, 2, 3, k-3]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that multiply to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, target]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 133,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that multiply to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, target]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Determine if there are exactly n numbers in the array that are divisible by 3.\"\"\"\n    count = 0\n    for num in arr:\n        if num % 3 == 0:\n            count += 1\n    return count == n\ndef g(n=5):\n    return [3, 6, 9, 12, 15, 18, 21, 24][:n]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 133,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Determine if there are exactly n numbers in the array that are divisible by 3.\"\"\"\n    count = 0\n    for num in arr:\n        if num % 3 == 0:\n            count += 1\n    return count == n",
        "solution_func": "def g(n=5):\n    return [3, 6, 9, 12, 15, 18, 21, 24][:n]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, k=4) -> bool:\n    \"\"\"Check if there exists a subset of k integers in the range [1, n] such that their sum is divisible by n.\"\"\"\n    return any(sum(subset) % n == 0 for subset in combinations(range(1, n+1), k))\ndef g(k=4):\n    return [i for i in range(1, k+1)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 133,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, k=4) -> bool:\n    \"\"\"Check if there exists a subset of k integers in the range [1, n] such that their sum is divisible by n.\"\"\"\n    return any(sum(subset) % n == 0 for subset in combinations(range(1, n+1), k))",
        "solution_func": "def g(k=4):\n    return [i for i in range(1, k+1)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=42) -> bool:\n    \"\"\"Check if there exists a row in the matrix such that the sum of its elements is equal to the target value.\"\"\"\n    return any(sum(row) == target for row in matrix)\ndef g(target=42):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 133,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=42) -> bool:\n    \"\"\"Check if there exists a row in the matrix such that the sum of its elements is equal to the target value.\"\"\"\n    return any(sum(row) == target for row in matrix)",
        "solution_func": "def g(target=42):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if there exists a substring of length n in s that consists only of unique characters.\"\"\"\n    return any(len(set(s[i:i+n])) == n for i in range(len(s)-n+1))\ndef g(n=3):\n    return \"abacabadabacaba\"\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 133,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if there exists a substring of length n in s that consists only of unique characters.\"\"\"\n    return any(len(set(s[i:i+n])) == n for i in range(len(s)-n+1))",
        "solution_func": "def g(n=3):\n    return \"abacabadabacaba\"",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=10) -> bool:\n    \"\"\"Check if the sum of the elements in each row of the matrix is equal to the target value.\"\"\"\n    row_sums = np.sum(matrix, axis=1)\n    return np.all(row_sums == target)\n\ndef g(target=10):\n    return np.full((3, 4), target//4)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 133,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=10) -> bool:\n    \"\"\"Check if the sum of the elements in each row of the matrix is equal to the target value.\"\"\"\n    row_sums = np.sum(matrix, axis=1)\n    return np.all(row_sums == target)",
        "solution_func": "def g(target=10):\n    return np.full((3, 4), target//4)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(numbers: list, target=50) -> bool:\n    \"\"\"Check if there are any two numbers in the list that sum up to the target value.\"\"\"\n    for i, num1 in enumerate(numbers):\n        for j, num2 in enumerate(numbers[i+1:]):\n            if num1 + num2 == target:\n                return True\n    return False\n\ndef g(target=50):\n    return random.sample(range(1, 101), k=10)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 133,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(numbers: list, target=50) -> bool:\n    \"\"\"Check if there are any two numbers in the list that sum up to the target value.\"\"\"\n    for i, num1 in enumerate(numbers):\n        for j, num2 in enumerate(numbers[i+1:]):\n            if num1 + num2 == target:\n                return True\n    return False",
        "solution_func": "def g(target=50):\n    return random.sample(range(1, 101), k=10)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport itertools\n\ndef f(letters: str, word='apple') -> bool:\n    \"\"\"Check if the word can be formed using the letters in any order.\"\"\"\n    letter_combinations = itertools.permutations(letters, len(word))\n    for combination in letter_combinations:\n        if ''.join(combination) == word:\n            return True\n    return False\n\ndef g(word='apple'):\n    return ''.join(random.sample(word, len(word)))\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 133,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\nimport itertools\n\ndef f(letters: str, word='apple') -> bool:\n    \"\"\"Check if the word can be formed using the letters in any order.\"\"\"\n    letter_combinations = itertools.permutations(letters, len(word))\n    for combination in letter_combinations:\n        if ''.join(combination) == word:\n            return True\n    return False",
        "solution_func": "def g(word='apple'):\n    return ''.join(random.sample(word, len(word)))",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=13) -> bool:\n    \"\"\"Find a pair of numbers that add up to a specific target.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(target=13):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 133,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=13) -> bool:\n    \"\"\"Find a pair of numbers that add up to a specific target.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))",
        "solution_func": "def g(target=13):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='apple') -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substr in s\ndef g(substr='apple'):\n    s = \"I have an apple\"\n    return s\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 134,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr='apple') -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substr in s",
        "solution_func": "def g(substr='apple'):\n    s = \"I have an apple\"\n    return s",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there are k consecutive odd numbers in a list\"\"\"\n    for i in range(len(nums)-k+1):\n        if all(x % 2 != 0 for x in nums[i:i+k]):\n            return True\n    return False\ndef g(k=3):\n    nums = [1, 3, 5, 7, 9, 2, 4, 6]\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 134,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there are k consecutive odd numbers in a list\"\"\"\n    for i in range(len(nums)-k+1):\n        if all(x % 2 != 0 for x in nums[i:i+k]):\n            return True\n    return False",
        "solution_func": "def g(k=3):\n    nums = [1, 3, 5, 7, 9, 2, 4, 6]\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Check if a given date is a weekend\"\"\"\n    dt = datetime.strptime(date, format)\n    return dt.weekday() >= 5\ndef g(format='%Y-%m-%d'):\n    date = \"2022-12-31\"\n    return date\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 134,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Check if a given date is a weekend\"\"\"\n    dt = datetime.strptime(date, format)\n    return dt.weekday() >= 5",
        "solution_func": "def g(format='%Y-%m-%d'):\n    date = \"2022-12-31\"\n    return date",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Find a pair of distinct rows in the matrix whose sum is equal to the target_sum\"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if sum(matrix[i]) + sum(matrix[j]) == target_sum:\n                return True\n    return False\n\ndef g(target_sum=100):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 134,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Find a pair of distinct rows in the matrix whose sum is equal to the target_sum\"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if sum(matrix[i]) + sum(matrix[j]) == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=100):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word_list: List[str], prefix='pre') -> bool:\n    \"\"\"Find a word in the word_list that starts with the given prefix\"\"\"\n    for word in word_list:\n        if word.startswith(prefix):\n            return True\n    return False\n\ndef g(prefix='pre'):\n    word_list = ['prefix', 'preparation', 'post', 'suffix']\n    return word_list\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 134,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word_list: List[str], prefix='pre') -> bool:\n    \"\"\"Find a word in the word_list that starts with the given prefix\"\"\"\n    for word in word_list:\n        if word.startswith(prefix):\n            return True\n    return False",
        "solution_func": "def g(prefix='pre'):\n    word_list = ['prefix', 'preparation', 'post', 'suffix']\n    return word_list",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of distinct numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 134,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of distinct numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Given a list of numbers, return True if there exists a pair of numbers that adds up to the target, False otherwise.\"\"\"\n    return any((numbers[i] + numbers[j] == target for i in range(len(numbers)) for j in range(i+1, len(numbers))))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 134,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Given a list of numbers, return True if there exists a pair of numbers that adds up to the target, False otherwise.\"\"\"\n    return any((numbers[i] + numbers[j] == target for i in range(len(numbers)) for j in range(i+1, len(numbers))))",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Given a list of words, return True if all words start with the specified prefix, False otherwise.\"\"\"\n    return all((word.startswith(prefix) for word in words))\ndef g(prefix='pre'):\n    return ['prefix', 'preparation', 'prejudice', 'present']\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 134,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Given a list of words, return True if all words start with the specified prefix, False otherwise.\"\"\"\n    return all((word.startswith(prefix) for word in words))",
        "solution_func": "def g(prefix='pre'):\n    return ['prefix', 'preparation', 'prejudice', 'present']",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(moves: List[str], position=(0, 0)) -> bool:\n    \"\"\"Given a list of moves, return True if the final position is the origin (0, 0), False otherwise.\"\"\"\n    x, y = position\n    for move in moves:\n        if move == 'U':\n            y += 1\n        elif move == 'D':\n            y -= 1\n        elif move == 'L':\n            x -= 1\n        elif move == 'R':\n            x += 1\n    return x == 0 and y == 0\ndef g():\n    return ['U', 'D', 'L', 'R']\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 134,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(moves: List[str], position=(0, 0)) -> bool:\n    \"\"\"Given a list of moves, return True if the final position is the origin (0, 0), False otherwise.\"\"\"\n    x, y = position\n    for move in moves:\n        if move == 'U':\n            y += 1\n        elif move == 'D':\n            y -= 1\n        elif move == 'L':\n            x -= 1\n        elif move == 'R':\n            x += 1\n    return x == 0 and y == 0",
        "solution_func": "def g():\n    return ['U', 'D', 'L', 'R']",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, c: str) -> bool:\n    \"\"\"Check if all occurrences of the character c are surrounded by the character s\"\"\"\n    return all(s[i-1] == c and s[i+1] == c for i in range(1, len(s)-1) if s[i] == c)\ndef g(c='a'):\n    return 'b' + c + 'b'\nassert f(g())\n",
        "emb": null,
        "idx_generation": 134,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, c: str) -> bool:\n    \"\"\"Check if all occurrences of the character c are surrounded by the character s\"\"\"\n    return all(s[i-1] == c and s[i+1] == c for i in range(1, len(s)-1) if s[i] == c)",
        "solution_func": "def g(c='a'):\n    return 'b' + c + 'b'",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a combination of numbers from the list that adds up to the target\"\"\"\n    for r in range(1, len(nums) + 1):\n        for combination in combinations(nums, r):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 135,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a combination of numbers from the list that adds up to the target\"\"\"\n    for r in range(1, len(nums) + 1):\n        for combination in combinations(nums, r):\n            if sum(combination) == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that add up to the target\"\"\"\n    for row in matrix:\n        for i in range(len(row)):\n            for j in range(i + 1, len(row)):\n                if row[i] + row[j] == target:\n                    return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 135,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that add up to the target\"\"\"\n    for row in matrix:\n        for i in range(len(row)):\n            for j in range(i + 1, len(row)):\n                if row[i] + row[j] == target:\n                    return True\n    return False",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"Check if the given substring is a prefix of the given string\"\"\"\n    return string.startswith(substr)\n\ndef g(substr='python'):\n    return 'python programming'\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 135,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"Check if the given substring is a prefix of the given string\"\"\"\n    return string.startswith(substr)",
        "solution_func": "def g(substr='python'):\n    return 'python programming'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=10, y=5) -> bool:\n    \"\"\"Check if the given number is a perfect square and lies within the range of x to y (inclusive).\"\"\"\n    return x <= math.isqrt(n) <= y\ndef g(x=10, y=5):\n    for i in range(x, y+1):\n        if math.isqrt(i) ** 2 == i:\n            return i\nassert f(g())\n",
        "emb": null,
        "idx_generation": 135,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=10, y=5) -> bool:\n    \"\"\"Check if the given number is a perfect square and lies within the range of x to y (inclusive).\"\"\"\n    return x <= math.isqrt(n) <= y",
        "solution_func": "def g(x=10, y=5):\n    for i in range(x, y+1):\n        if math.isqrt(i) ** 2 == i:\n            return i",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the given string is a palindrome of length n.\"\"\"\n    return s == s[::-1] and len(s) == n\ndef g(n=5):\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    return ''.join(random.choices(letters, k=n))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 135,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the given string is a palindrome of length n.\"\"\"\n    return s == s[::-1] and len(s) == n",
        "solution_func": "def g(n=5):\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    return ''.join(random.choices(letters, k=n))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the given number n is divisible by m and the sum of its digits is equal to m.\"\"\"\n    return n % m == 0 and sum(int(digit) for digit in str(n)) == m\ndef g(m=10):\n    for n in range(m, 1000, m):\n        if sum(int(digit) for digit in str(n)) == m:\n            return n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 135,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the given number n is divisible by m and the sum of its digits is equal to m.\"\"\"\n    return n % m == 0 and sum(int(digit) for digit in str(n)) == m",
        "solution_func": "def g(m=10):\n    for n in range(m, 1000, m):\n        if sum(int(digit) for digit in str(n)) == m:\n            return n",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10, k=5) -> bool:\n    \"\"\"Find the smallest number n such that the sum of its digits, divided by m, is equal to k.\"\"\"\n    digit_sum = sum(int(d) for d in str(n))\n    return digit_sum % m == k\ndef g(m=10, k=5):\n    n = 1\n    while True:\n        if f(n):\n            return n\n        n += 1\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 135,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=10, k=5) -> bool:\n    \"\"\"Find the smallest number n such that the sum of its digits, divided by m, is equal to k.\"\"\"\n    digit_sum = sum(int(d) for d in str(n))\n    return digit_sum % m == k",
        "solution_func": "def g(m=10, k=5):\n    n = 1\n    while True:\n        if f(n):\n            return n\n        n += 1",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10, max_len=5) -> bool:\n    \"\"\"Find if there exists a sublist of arr with a length less than or equal to max_len that sums up to target.\"\"\"\n    n = len(arr)\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, min(i + max_len, n)):\n            curr_sum += arr[j]\n            if curr_sum == target:\n                return True\n    return False\ndef g(target=10, max_len=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 135,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10, max_len=5) -> bool:\n    \"\"\"Find if there exists a sublist of arr with a length less than or equal to max_len that sums up to target.\"\"\"\n    n = len(arr)\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, min(i + max_len, n)):\n            curr_sum += arr[j]\n            if curr_sum == target:\n                return True\n    return False",
        "solution_func": "def g(target=10, max_len=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_len=6, max_reps=2) -> bool:\n    \"\"\"Check if there is a substring of length target_len that appears at least max_reps times in s.\"\"\"\n    n = len(s)\n    for i in range(n - target_len + 1):\n        substring = s[i:i + target_len]\n        if s.count(substring) >= max_reps:\n            return True\n    return False\ndef g(target_len=6, max_reps=2):\n    return 'abcdefg' * max_reps\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 135,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target_len=6, max_reps=2) -> bool:\n    \"\"\"Check if there is a substring of length target_len that appears at least max_reps times in s.\"\"\"\n    n = len(s)\n    for i in range(n - target_len + 1):\n        substring = s[i:i + target_len]\n        if s.count(substring) >= max_reps:\n            return True\n    return False",
        "solution_func": "def g(target_len=6, max_reps=2):\n    return 'abcdefg' * max_reps",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: list, target=10) -> bool:\n    \"\"\"Given a list of integers, find any two numbers that add up to the target value.\nSample Input:\narr = [1, 2, 3, 4, 5, 6]\ntarget = 10\nSample Output:\n(4, 6)\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(arr=[1, 2, 3, 4, 5, 6], target=10):\n    random.shuffle(arr)\n    return arr\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 135,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(arr: list, target=10) -> bool:\n    \"\"\"Given a list of integers, find any two numbers that add up to the target value.\nSample Input:\narr = [1, 2, 3, 4, 5, 6]\ntarget = 10\nSample Output:\n(4, 6)\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5, 6], target=10):\n    random.shuffle(arr)\n    return arr",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, d={'a':1, 'b':2, 'c':3}) -> bool:\n    \"\"\"Check if the sum of the values of the characters in s is odd\"\"\"\n    return sum(d[ch] for ch in s) % 2 != 0\ndef g(d={'a':1, 'b':2, 'c':3}):\n    return 'abc'\nassert f(g())\n",
        "emb": null,
        "idx_generation": 136,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, d={'a':1, 'b':2, 'c':3}) -> bool:\n    \"\"\"Check if the sum of the values of the characters in s is odd\"\"\"\n    return sum(d[ch] for ch in s) % 2 != 0",
        "solution_func": "def g(d={'a':1, 'b':2, 'c':3}):\n    return 'abc'",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    return n in primes\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19]):\n    return 17\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 136,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    return n in primes",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19]):\n    return 17",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if n is divisible by m\"\"\"\n    return n % m == 0\ndef g():\n    return (15, 3)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 136,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if n is divisible by m\"\"\"\n    return n % m == 0",
        "solution_func": "def g():\n    return (15, 3)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, y: int, a=6, b=9) -> bool:\n    \"\"\"Check if the sum of two integers equals a given product.\"\"\"\n    return x + y == a * b\ndef g(a=6, b=9):\n    return a - b, b - a\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 136,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, y: int, a=6, b=9) -> bool:\n    \"\"\"Check if the sum of two integers equals a given product.\"\"\"\n    return x + y == a * b",
        "solution_func": "def g(a=6, b=9):\n    return a - b, b - a",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(word: str, n: int, a=5, b=2) -> bool:\n    \"\"\"Check if a word repeated n times equals a given concatenation.\"\"\"\n    return word * n == a + b\ndef g(a=5, b=2):\n    return str(a) + str(b), a + b\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 136,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str, n: int, a=5, b=2) -> bool:\n    \"\"\"Check if a word repeated n times equals a given concatenation.\"\"\"\n    return word * n == a + b",
        "solution_func": "def g(a=5, b=2):\n    return str(a) + str(b), a + b",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=7, b=2) -> bool:\n    \"\"\"Check if the difference between two integers equals a given quotient.\"\"\"\n    return n - a == n / b\ndef g(a=7, b=2):\n    return a + b, a - b\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 136,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=7, b=2) -> bool:\n    \"\"\"Check if the difference between two integers equals a given quotient.\"\"\"\n    return n - a == n / b",
        "solution_func": "def g(a=7, b=2):\n    return a + b, a - b",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(primes: List[int], target=1000) -> bool:\n    \"\"\"Check if the summation of primes is equal to the target\"\"\"\n    return sum(primes) == target\ndef g(target=1000):\n    primes = [2]\n    num = 3\n    while sum(primes) < target:\n        is_prime = True\n        for prime in primes:\n            if num % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 2\n    return primes\nassert f(g())\n",
        "emb": null,
        "idx_generation": 136,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(primes: List[int], target=1000) -> bool:\n    \"\"\"Check if the summation of primes is equal to the target\"\"\"\n    return sum(primes) == target",
        "solution_func": "def g(target=1000):\n    primes = [2]\n    num = 3\n    while sum(primes) < target:\n        is_prime = True\n        for prime in primes:\n            if num % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 2\n    return primes",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target='python') -> bool:\n    \"\"\"Check if the target string is present in the given string\"\"\"\n    return target in string.lower()\ndef g(target='python'):\n    return \"I love Python programming\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 136,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, target='python') -> bool:\n    \"\"\"Check if the target string is present in the given string\"\"\"\n    return target in string.lower()",
        "solution_func": "def g(target='python'):\n    return \"I love Python programming\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 136,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50, 60]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100, n=3) -> bool:\n    \"\"\"Find n distinct positive integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target\ndef g(target=100, n=3):\n    return list(range(1, n+1)) + [target - sum(range(1, n+1))]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 136,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100, n=3) -> bool:\n    \"\"\"Find n distinct positive integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target",
        "solution_func": "def g(target=100, n=3):\n    return list(range(1, n+1)) + [target - sum(range(1, n+1))]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=15, b=7, c=3) -> bool:\n    \"\"\"Check if n is a perfect square and the sum of a, b, and c is equal to n\"\"\"\n    return n == a + b + c and int(n ** 0.5) ** 2 == n\ndef g(a=15, b=7, c=3):\n    return a + b + c\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 137,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=15, b=7, c=3) -> bool:\n    \"\"\"Check if n is a perfect square and the sum of a, b, and c is equal to n\"\"\"\n    return n == a + b + c and int(n ** 0.5) ** 2 == n",
        "solution_func": "def g(a=15, b=7, c=3):\n    return a + b + c",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=5, c=2) -> bool:\n    \"\"\"Check if n is divisible by both a and b, but not divisible by c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c != 0\ndef g(a=10, b=5, c=2):\n    return a * b * c\nassert f(g())\n",
        "emb": null,
        "idx_generation": 137,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=10, b=5, c=2) -> bool:\n    \"\"\"Check if n is divisible by both a and b, but not divisible by c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c != 0",
        "solution_func": "def g(a=10, b=5, c=2):\n    return a * b * c",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='python', b='programming') -> bool:\n    \"\"\"Check if s contains both a and b as substrings, regardless of case\"\"\"\n    return a.lower() in s.lower() and b.lower() in s.lower()\ndef g(a='python', b='programming'):\n    return a.capitalize() + ' ' + b.capitalize()\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 137,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, a='python', b='programming') -> bool:\n    \"\"\"Check if s contains both a and b as substrings, regardless of case\"\"\"\n    return a.lower() in s.lower() and b.lower() in s.lower()",
        "solution_func": "def g(a='python', b='programming'):\n    return a.capitalize() + ' ' + b.capitalize()",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(ans: List[int], target=4) -> bool:\n    \"\"\"Find a list of integers where the number of integers that are divisible by 2 or 5 is a given constant\"\"\"\n    count = 0\n    for num in ans:\n        if num % 2 == 0 or num % 5 == 0:\n            count += 1\n    return count == target\ndef g(target=4):\n    return [2, 4, 6, 8, 10] * target\nassert f(g())\n",
        "emb": null,
        "idx_generation": 137,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(ans: List[int], target=4) -> bool:\n    \"\"\"Find a list of integers where the number of integers that are divisible by 2 or 5 is a given constant\"\"\"\n    count = 0\n    for num in ans:\n        if num % 2 == 0 or num % 5 == 0:\n            count += 1\n    return count == target",
        "solution_func": "def g(target=4):\n    return [2, 4, 6, 8, 10] * target",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(cipher: str, target=3) -> bool:\n    \"\"\"Find a string where the number of distinct characters is a given constant\"\"\"\n    unique_chars = set(cipher)\n    return len(unique_chars) == target\ndef g(target=3):\n    return \"abc\" * target\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 137,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(cipher: str, target=3) -> bool:\n    \"\"\"Find a string where the number of distinct characters is a given constant\"\"\"\n    unique_chars = set(cipher)\n    return len(unique_chars) == target",
        "solution_func": "def g(target=3):\n    return \"abc\" * target",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(mat: List[List[int]], target=3) -> bool:\n    \"\"\"Find a matrix where the number of rows that have a sum greater than the target value is a given constant\"\"\"\n    count = 0\n    for row in mat:\n        if sum(row) > target:\n            count += 1\n    return count == target\ndef g(target=3):\n    return [[1, 1, 1]] * target\nassert f(g())\n",
        "emb": null,
        "idx_generation": 137,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(mat: List[List[int]], target=3) -> bool:\n    \"\"\"Find a matrix where the number of rows that have a sum greater than the target value is a given constant\"\"\"\n    count = 0\n    for row in mat:\n        if sum(row) > target:\n            count += 1\n    return count == target",
        "solution_func": "def g(target=3):\n    return [[1, 1, 1]] * target",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, n=3) -> bool:\n    \"\"\"Check if a given numpy array has a diagonal sum greater than n.\"\"\"\n    diagonal_sum = np.trace(arr)\n    return diagonal_sum > n\n\ndef g(n=3):\n    return np.diag(np.arange(1, n+1))\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 137,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, n=3) -> bool:\n    \"\"\"Check if a given numpy array has a diagonal sum greater than n.\"\"\"\n    diagonal_sum = np.trace(arr)\n    return diagonal_sum > n",
        "solution_func": "def g(n=3):\n    return np.diag(np.arange(1, n+1))",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(year: int, month: int, day: int, day_of_week='Sunday') -> bool:\n    \"\"\"Check if a given date falls on a specific day of the week.\"\"\"\n    given_date = datetime.date(year, month, day)\n    return given_date.strftime(\"%A\") == day_of_week\n\ndef g(year=2022, month=1, day=1, day_of_week='Saturday'):\n    return year, month, day, day_of_week\n\nassert f(*g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 137,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(year: int, month: int, day: int, day_of_week='Sunday') -> bool:\n    \"\"\"Check if a given date falls on a specific day of the week.\"\"\"\n    given_date = datetime.date(year, month, day)\n    return given_date.strftime(\"%A\") == day_of_week",
        "solution_func": "def g(year=2022, month=1, day=1, day_of_week='Saturday'):\n    return year, month, day, day_of_week",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, n=2) -> bool:\n    \"\"\"Check if the square root of the sum of squares of three numbers is greater than n.\"\"\"\n    sum_of_squares = x**2 + y**2 + z**2\n    return math.sqrt(sum_of_squares) > n\n\ndef g(x=1, y=2, z=3, n=2):\n    return x, y, z, n\n\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 137,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, n=2) -> bool:\n    \"\"\"Check if the square root of the sum of squares of three numbers is greater than n.\"\"\"\n    sum_of_squares = x**2 + y**2 + z**2\n    return math.sqrt(sum_of_squares) > n",
        "solution_func": "def g(x=1, y=2, z=3, n=2):\n    return x, y, z, n",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=7, lower_bound=5) -> bool:\n    \"\"\"Check if a number is within a certain range and divisible by two other numbers.\"\"\"\n    return (n >= lower_bound) and (n % a == 0) and (n % b == 0)\ndef g(a=10, b=7, lower_bound=5):\n    return a * b * lower_bound\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 137,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=10, b=7, lower_bound=5) -> bool:\n    \"\"\"Check if a number is within a certain range and divisible by two other numbers.\"\"\"\n    return (n >= lower_bound) and (n % a == 0) and (n % b == 0)",
        "solution_func": "def g(a=10, b=7, lower_bound=5):\n    return a * b * lower_bound",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, nums=[16, 25, 36, 49, 64]) -> bool:\n    \"\"\"Check if the square root of every number in the list is an integer and is divisible by n.\"\"\"\n    return all((math.sqrt(i).is_integer() and math.sqrt(i) % n == 0 for i in nums))\n    \ndef g(nums=[16, 25, 36, 49, 64]):\n    return max(nums)\n    \nassert f(g())\n",
        "emb": null,
        "idx_generation": 138,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, nums=[16, 25, 36, 49, 64]) -> bool:\n    \"\"\"Check if the square root of every number in the list is an integer and is divisible by n.\"\"\"\n    return all((math.sqrt(i).is_integer() and math.sqrt(i) % n == 0 for i in nums))",
        "solution_func": "def g(nums=[16, 25, 36, 49, 64]):\n    return max(nums)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"Check if it is possible to find n numbers from the list that add up to the target sum.\"\"\"\n    return any((sum(random.sample(nums, n)) == target for _ in range(100)))\n    \ndef g(nums=[1, 2, 3, 4, 5], target=10):\n    return max(nums)\n    \nassert f(g())\n",
        "emb": null,
        "idx_generation": 138,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"Check if it is possible to find n numbers from the list that add up to the target sum.\"\"\"\n    return any((sum(random.sample(nums, n)) == target for _ in range(100)))",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=10):\n    return max(nums)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, chars=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if all the characters in the string are vowels.\"\"\"\n    return all((c in chars for c in s))\n    \ndef g(chars=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(chars)\n    \nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 138,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, chars=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if all the characters in the string are vowels.\"\"\"\n    return all((c in chars for c in s))",
        "solution_func": "def g(chars=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(chars)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from a list that sum up to a target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target - 9]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 138,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from a list that sum up to a target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target - 9]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"Check if a given substring is present in a string in a specific pattern.\"\"\"\n    return any((string[i:i+len(substr)] == substr for i in range(0, len(string)-len(substr)+1, len(substr))))\ndef g(substr='python'):\n    return 'p'+substr+'t'+substr+'h'+substr+'o'+substr+'n'\nassert f(g())\n",
        "emb": null,
        "idx_generation": 138,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"Check if a given substring is present in a string in a specific pattern.\"\"\"\n    return any((string[i:i+len(substr)] == substr for i in range(0, len(string)-len(substr)+1, len(substr))))",
        "solution_func": "def g(substr='python'):\n    return 'p'+substr+'t'+substr+'h'+substr+'o'+substr+'n'",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a row in the matrix that contains the target value.\"\"\"\n    return any((target in row for row in matrix))\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target], [9, 10, 11]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 138,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a row in the matrix that contains the target value.\"\"\"\n    return any((target in row for row in matrix))",
        "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target], [9, 10, 11]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a given number n can be expressed as a sum of two prime numbers.\"\"\"\n    return any((n - p in primes for p in primes))\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return sum(primes[:2])\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 138,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a given number n can be expressed as a sum of two prime numbers.\"\"\"\n    return any((n - p in primes for p in primes))",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return sum(primes[:2])",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Given a string s, find a substring of length k that contains all unique characters.\"\"\"\n    return len(set(s[:k])) == k\ndef g(k=3):\n    return 'abc' * k\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 138,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Given a string s, find a substring of length k that contains all unique characters.\"\"\"\n    return len(set(s[:k])) == k",
        "solution_func": "def g(k=3):\n    return 'abc' * k",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Given an array of integers arr, find a subarray of length k that has the highest sum.\"\"\"\n    return sum(arr[:k]) == max([sum(arr[i:i+k]) for i in range(len(arr)-k+1)])\ndef g(k=3):\n    return [1] * k\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 138,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Given an array of integers arr, find a subarray of length k that has the highest sum.\"\"\"\n    return sum(arr[:k]) == max([sum(arr[i:i+k]) for i in range(len(arr)-k+1)])",
        "solution_func": "def g(k=3):\n    return [1] * k",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Find a combination of numbers that add up to a specific target.\"\"\"\n    return any(sum(comb) == target for r in range(1, len(nums) + 1) for comb in combinations(nums, r))\n\ndef g(target=12):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 138,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Find a combination of numbers that add up to a specific target.\"\"\"\n    return any(sum(comb) == target for r in range(1, len(nums) + 1) for comb in combinations(nums, r))",
        "solution_func": "def g(target=12):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if the given string s can be formed by concatenating one or more words from the given list of words.\"\"\"\n    return any((s == ''.join(words[i] for i in indices) for indices in itertools.combinations(range(len(words)), len(words) // 2)))\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return ''.join(words)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 139,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if the given string s can be formed by concatenating one or more words from the given list of words.\"\"\"\n    return any((s == ''.join(words[i] for i in indices) for indices in itertools.combinations(range(len(words)), len(words) // 2)))",
        "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return ''.join(words)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Given a matrix of integers and a target number, find whether there exists a path from the top-left cell to the\nbottom-right cell such that the sum of numbers along the path is equal to the target number.\"\"\"\n    def dfs(i, j, curr_sum):\n        if i < 0 or i >= len(matrix) or j < 0 or j >= len(matrix[0]):\n            return False\n        curr_sum += matrix[i][j]\n        if curr_sum == target and i == len(matrix) - 1 and j == len(matrix[0]) - 1:\n            return True\n        return dfs(i + 1, j, curr_sum) or dfs(i, j + 1, curr_sum)\n    return dfs(0, 0, 0)\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 139,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Given a matrix of integers and a target number, find whether there exists a path from the top-left cell to the\nbottom-right cell such that the sum of numbers along the path is equal to the target number.\"\"\"\n    def dfs(i, j, curr_sum):\n        if i < 0 or i >= len(matrix) or j < 0 or j >= len(matrix[0]):\n            return False\n        curr_sum += matrix[i][j]\n        if curr_sum == target and i == len(matrix) - 1 and j == len(matrix[0]) - 1:\n            return True\n        return dfs(i + 1, j, curr_sum) or dfs(i, j + 1, curr_sum)\n    return dfs(0, 0, 0)",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Given a string s, find whether there exists n consecutive occurrences of the same character in the string.\"\"\"\n    return any((s[i] == s[i + 1] == s[i + 2] for i in range(len(s) - 2)))\ndef g(n=3):\n    return 'abc' * n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 139,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Given a string s, find whether there exists n consecutive occurrences of the same character in the string.\"\"\"\n    return any((s[i] == s[i + 1] == s[i + 2] for i in range(len(s) - 2)))",
        "solution_func": "def g(n=3):\n    return 'abc' * n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=10) -> bool:\n    \"\"\"Given a list of integers, check if there exist two numbers whose sum is equal to n\"\"\"\n    return any(n - num in arr for num in arr)\ndef g(n=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 139,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], n=10) -> bool:\n    \"\"\"Given a list of integers, check if there exist two numbers whose sum is equal to n\"\"\"\n    return any(n - num in arr for num in arr)",
        "solution_func": "def g(n=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Given a string, check if it contains exactly n consecutive vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\ndef g(n=3):\n    return \"aeioubcdf\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 139,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Given a string, check if it contains exactly n consecutive vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False",
        "solution_func": "def g(n=3):\n    return \"aeioubcdf\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray whose sum is equal to n\"\"\"\n    for i in range(len(arr)):\n        curr_sum = arr[i]\n        j = i + 1\n        while j <= len(arr):\n            if curr_sum == n:\n                return True\n            if curr_sum > n or j == len(arr):\n                break\n            curr_sum += arr[j]\n            j += 1\n    return False\ndef g(n=5):\n    return [1, 3, 4, 6, 8, 9]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 139,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray whose sum is equal to n\"\"\"\n    for i in range(len(arr)):\n        curr_sum = arr[i]\n        j = i + 1\n        while j <= len(arr):\n            if curr_sum == n:\n                return True\n            if curr_sum > n or j == len(arr):\n                break\n            curr_sum += arr[j]\n            j += 1\n    return False",
        "solution_func": "def g(n=5):\n    return [1, 3, 4, 6, 8, 9]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"Check if the given number is divisible by all the factors\"\"\"\n    for factor in factors:\n        if n % factor != 0:\n            return False\n    return True\n\ndef g(factors=[2, 3, 5]):\n    n = 1\n    for factor in factors:\n        n *= factor\n    return n\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 139,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"Check if the given number is divisible by all the factors\"\"\"\n    for factor in factors:\n        if n % factor != 0:\n            return False\n    return True",
        "solution_func": "def g(factors=[2, 3, 5]):\n    n = 1\n    for factor in factors:\n        n *= factor\n    return n",
        "map_ix": [
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='Hello, World!') -> bool:\n    \"\"\"Check if the given string is equal to the target string\"\"\"\n    return s == target\n\ndef g(target='Hello, World!'):\n    return target\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "idx_generation": 139,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='Hello, World!') -> bool:\n    \"\"\"Check if the given string is equal to the target string\"\"\"\n    return s == target",
        "solution_func": "def g(target='Hello, World!'):\n    return target",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if the given number is a prime number\"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if n % prime == 0:\n            return False\n    return True\n\ndef g(primes=[2, 3, 5, 7, 11, 13]):\n    n = primes[-1] + 2\n    while not f(n, primes):\n        n += 2\n    return n\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 139,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if the given number is a prime number\"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if n % prime == 0:\n            return False\n    return True",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13]):\n    n = primes[-1] + 2\n    while not f(n, primes):\n        n += 2\n    return n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to obtain the target number using the values in the list\"\"\"\n    import itertools\n    operators = ['+', '-', '*', '/']\n    for i in range(1, len(x)):\n        for comb in itertools.combinations(x, i):\n            for perm in itertools.permutations(comb):\n                for ops in itertools.product(operators, repeat=i-1):\n                    expression = ''\n                    for j in range(i-1):\n                        expression += str(perm[j]) + ops[j]\n                    expression += str(perm[-1])\n                    try:\n                        result = eval(expression)\n                        if result == target:\n                            return True\n                    except ZeroDivisionError:\n                        pass\n    return False\n\ndef g(target=100):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 139,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to obtain the target number using the values in the list\"\"\"\n    import itertools\n    operators = ['+', '-', '*', '/']\n    for i in range(1, len(x)):\n        for comb in itertools.combinations(x, i):\n            for perm in itertools.permutations(comb):\n                for ops in itertools.product(operators, repeat=i-1):\n                    expression = ''\n                    for j in range(i-1):\n                        expression += str(perm[j]) + ops[j]\n                    expression += str(perm[-1])\n                    try:\n                        result = eval(expression)\n                        if result == target:\n                            return True\n                    except ZeroDivisionError:\n                        pass\n    return False",
        "solution_func": "def g(target=100):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10, count=3) -> bool:\n    \"\"\"Find a list of count numbers that sum up to the target value.\"\"\"\n    return sum(numbers) == target and len(numbers) == count\ndef g(target=10, count=3):\n    return [target // count] * count\nassert f(g())\n",
        "emb": null,
        "idx_generation": 140,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=10, count=3) -> bool:\n    \"\"\"Find a list of count numbers that sum up to the target value.\"\"\"\n    return sum(numbers) == target and len(numbers) == count",
        "solution_func": "def g(target=10, count=3):\n    return [target // count] * count",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python', length=6) -> bool:\n    \"\"\"Check if the target string is a substring of s with a length equal to the given value.\"\"\"\n    return target in s and len(target) == length\ndef g(target='python', length=6):\n    return target\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 140,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='python', length=6) -> bool:\n    \"\"\"Check if the target string is a substring of s with a length equal to the given value.\"\"\"\n    return target in s and len(target) == length",
        "solution_func": "def g(target='python', length=6):\n    return target",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if any two numbers in the list can be multiplied together to get the target value.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] * numbers[j] == target:\n                return True\n    return False\ndef g(target=100):\n    return [10, 20, 30, 40]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 140,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if any two numbers in the list can be multiplied together to get the target value.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] * numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(r: float, h: float, target_volume: float) -> bool:\n    \"\"\"Find the height of a cylinder with radius r such that its volume is equal to target_volume\"\"\"\n    volume = math.pi * r**2 * h\n    return volume == target_volume\n\ndef g(r: float, target_volume: float):\n    h = target_volume / (math.pi * r**2)\n    return h\n\nassert f(g(2, 25), r=2, target_volume=25)\n",
        "emb": null,
        "idx_generation": 140,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(r: float, h: float, target_volume: float) -> bool:\n    \"\"\"Find the height of a cylinder with radius r such that its volume is equal to target_volume\"\"\"\n    volume = math.pi * r**2 * h\n    return volume == target_volume",
        "solution_func": "def g(r: float, target_volume: float):\n    h = target_volume / (math.pi * r**2)\n    return h",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[float], target_sum: float) -> bool:\n    \"\"\"Find a sublist of li that sums up to target_sum\"\"\"\n    for i in range(len(li)):\n        for j in range(i, len(li)):\n            if sum(li[i:j+1]) == target_sum:\n                return True\n    return False\n\ndef g(target_sum: float):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(20), target_sum=20)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 140,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[float], target_sum: float) -> bool:\n    \"\"\"Find a sublist of li that sums up to target_sum\"\"\"\n    for i in range(len(li)):\n        for j in range(i, len(li)):\n            if sum(li[i:j+1]) == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum: float):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, target: int) -> bool:\n    \"\"\"Find two distinct integers in the range [1, n] whose sum is equal to target\"\"\"\n    for i in range(1, n+1):\n        if target - i != i and 1 <= target - i <= n:\n            return True\n    return False\n\ndef g(target: int):\n    return target // 2\n\nassert f(g(10), target=10)\n",
        "emb": null,
        "idx_generation": 140,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target: int) -> bool:\n    \"\"\"Find two distinct integers in the range [1, n] whose sum is equal to target\"\"\"\n    for i in range(1, n+1):\n        if target - i != i and 1 <= target - i <= n:\n            return True\n    return False",
        "solution_func": "def g(target: int):\n    return target // 2",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target_sum=100) -> bool:\n    \"\"\"Given a square numpy array, find if the sum of any row or column is equal to the target_sum\"\"\"\n    rows, cols = matrix.shape\n    row_sums = np.sum(matrix, axis=1)\n    col_sums = np.sum(matrix, axis=0)\n    return target_sum in row_sums or target_sum in col_sums\n\ndef g(target_sum=100):\n    matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 140,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target_sum=100) -> bool:\n    \"\"\"Given a square numpy array, find if the sum of any row or column is equal to the target_sum\"\"\"\n    rows, cols = matrix.shape\n    row_sums = np.sum(matrix, axis=1)\n    col_sums = np.sum(matrix, axis=0)\n    return target_sum in row_sums or target_sum in col_sums",
        "solution_func": "def g(target_sum=100):\n    matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='Python') -> bool:\n    \"\"\"Check if a given substring exists in the string\"\"\"\n    return substring in string\n\ndef g(substring='Python'):\n    string = \"I love Python programming\"\n    return string\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 140,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='Python') -> bool:\n    \"\"\"Check if a given substring exists in the string\"\"\"\n    return substring in string",
        "solution_func": "def g(substring='Python'):\n    string = \"I love Python programming\"\n    return string",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 140,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False",
        "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, pattern='abc') -> bool:\n    \"\"\"Find a string that contains a given pattern\"\"\"\n    return pattern in string\ndef g(pattern='abc'):\n    return 'xyz' + pattern + 'def'\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 140,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, pattern='abc') -> bool:\n    \"\"\"Find a string that contains a given pattern\"\"\"\n    return pattern in string",
        "solution_func": "def g(pattern='abc'):\n    return 'xyz' + pattern + 'def'",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: list, target=1000) -> bool:\n    \"\"\"Find a sublist of lst whose sum is equal to the target number\"\"\"\n    return sum(lst) == target\n\ndef g(target=1000):\n    lst = []\n    while sum(lst) < target:\n        lst.append(random.randint(1, 100))\n    return lst\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 141,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(lst: list, target=1000) -> bool:\n    \"\"\"Find a sublist of lst whose sum is equal to the target number\"\"\"\n    return sum(lst) == target",
        "solution_func": "def g(target=1000):\n    lst = []\n    while sum(lst) < target:\n        lst.append(random.randint(1, 100))\n    return lst",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(matrix: list, target=0) -> bool:\n    \"\"\"Check if there is a row or column in the matrix whose sum is equal to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    \n    for row in matrix:\n        if sum(row) == target:\n            return True\n    \n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    \n    return False\n\ndef g(target=0):\n    matrix = []\n    n = random.randint(1, 10)\n    m = random.randint(1, 10)\n    for i in range(n):\n        row = [random.randint(0, 10) for _ in range(m)]\n        matrix.append(row)\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 141,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(matrix: list, target=0) -> bool:\n    \"\"\"Check if there is a row or column in the matrix whose sum is equal to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    \n    for row in matrix:\n        if sum(row) == target:\n            return True\n    \n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    \n    return False",
        "solution_func": "def g(target=0):\n    matrix = []\n    n = random.randint(1, 10)\n    m = random.randint(1, 10)\n    for i in range(n):\n        row = [random.randint(0, 10) for _ in range(m)]\n        matrix.append(row)\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if there are at least n occurrences of the same character in a row\"\"\"\n    count = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            count += 1\n            if count >= n:\n                return True\n        else:\n            count = 1\n    return False\n\ndef g(n=5):\n    s = \"\"\n    while len(s) < n:\n        s += random.choice(\"abcdefghijklmnopqrstuvwxyz\")\n    return s\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 141,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if there are at least n occurrences of the same character in a row\"\"\"\n    count = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            count += 1\n            if count >= n:\n                return True\n        else:\n            count = 1\n    return False",
        "solution_func": "def g(n=5):\n    s = \"\"\n    while len(s) < n:\n        s += random.choice(\"abcdefghijklmnopqrstuvwxyz\")\n    return s",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(a: str, b: str, c: str) -> bool:\n    \"\"\"Check if string a is a substring of string b and if string c is a substring of the concatenation of a and b.\"\"\"\n    return a in b and c in a + b\ndef g():\n    return \"python\", \"python programming\", \"program\"\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 141,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(a: str, b: str, c: str) -> bool:\n    \"\"\"Check if string a is a substring of string b and if string c is a substring of the concatenation of a and b.\"\"\"\n    return a in b and c in a + b",
        "solution_func": "def g():\n    return \"python\", \"python programming\", \"program\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Check if n can be written as a sum of a and b, where a and b are positive integers.\"\"\"\n    return any((i * a + j * b == n for i in range(n // a + 1) for j in range(n // b + 1)))\ndef g(a=2, b=3):\n    return a + b\nassert f(g(), g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 141,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Check if n can be written as a sum of a and b, where a and b are positive integers.\"\"\"\n    return any((i * a + j * b == n for i in range(n // a + 1) for j in range(n // b + 1)))",
        "solution_func": "def g(a=2, b=3):\n    return a + b",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(text: str, target: str) -> bool:\n    \"\"\"Check if the number of occurrences of the target string in the text is a prime number.\"\"\"\n    count = text.count(target)\n    return count > 1 and all((count % i != 0 for i in range(2, int(count**0.5) + 1)))\ndef g(text=\"pythonprogramming\", target=\"python\"):\n    return text\nassert f(g(), target=\"programming\")\n",
        "emb": null,
        "idx_generation": 141,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(text: str, target: str) -> bool:\n    \"\"\"Check if the number of occurrences of the target string in the text is a prime number.\"\"\"\n    count = text.count(target)\n    return count > 1 and all((count % i != 0 for i in range(2, int(count**0.5) + 1)))",
        "solution_func": "def g(text=\"pythonprogramming\", target=\"python\"):\n    return text",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\ndef f(s: str, num_digits=3, target_sum=10) -> bool:\n    \"\"\"Check if the sum of the first 'num_digits' digits in a string 's' is greater than 'target_sum'\"\"\"\n    digits = [int(d) for d in s[:num_digits]]\n    return sum(digits) > target_sum\n\ndef g(num_digits=3, target_sum=10):\n    return str(math.factorial(num_digits))\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 141,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\ndef f(s: str, num_digits=3, target_sum=10) -> bool:\n    \"\"\"Check if the sum of the first 'num_digits' digits in a string 's' is greater than 'target_sum'\"\"\"\n    digits = [int(d) for d in s[:num_digits]]\n    return sum(digits) > target_sum",
        "solution_func": "def g(num_digits=3, target_sum=10):\n    return str(math.factorial(num_digits))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target_length=5, desired_sum=100) -> bool:\n    \"\"\"Check if there exists a subarray of length 'target_length' in 'arr' that adds up to 'desired_sum'\"\"\"\n    for i in range(len(arr) - target_length + 1):\n        subarray = arr[i:i+target_length]\n        if sum(subarray) == desired_sum:\n            return True\n    return False\n\ndef g(target_length=5, desired_sum=100):\n    return list(range(1, target_length+1))\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 141,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target_length=5, desired_sum=100) -> bool:\n    \"\"\"Check if there exists a subarray of length 'target_length' in 'arr' that adds up to 'desired_sum'\"\"\"\n    for i in range(len(arr) - target_length + 1):\n        subarray = arr[i:i+target_length]\n        if sum(subarray) == desired_sum:\n            return True\n    return False",
        "solution_func": "def g(target_length=5, desired_sum=100):\n    return list(range(1, target_length+1))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_rows=3, target_cols=3) -> bool:\n    \"\"\"Check if there exists a target submatrix of size target_rows x target_cols in the given matrix\"\"\"\n    for i in range(len(matrix) - target_rows + 1):\n        for j in range(len(matrix[0]) - target_cols + 1):\n            submatrix = [row[j:j+target_cols] for row in matrix[i:i+target_rows]]\n            if all(all(subrow) for subrow in submatrix):\n                return True\n    return False\n\ndef g(target_rows=3, target_cols=3):\n    return [[1] * target_cols] * target_rows\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 141,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_rows=3, target_cols=3) -> bool:\n    \"\"\"Check if there exists a target submatrix of size target_rows x target_cols in the given matrix\"\"\"\n    for i in range(len(matrix) - target_rows + 1):\n        for j in range(len(matrix[0]) - target_cols + 1):\n            submatrix = [row[j:j+target_cols] for row in matrix[i:i+target_rows]]\n            if all(all(subrow) for subrow in submatrix):\n                return True\n    return False",
        "solution_func": "def g(target_rows=3, target_cols=3):\n    return [[1] * target_cols] * target_rows",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(deck: list, target=21) -> bool:\n    \"\"\"Determine if there is a subset of cards in the deck that adds up to the target value\"\"\"\n    return any(sum(subset) == target for subset in subsets(deck))\n\ndef g(deck=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    \"\"\"Return a subset of cards from the deck that adds up to half of the target value\"\"\"\n    target = sum(deck) // 2\n    random.shuffle(deck)\n    subset_sum = 0\n    subset = []\n    for card in deck:\n        if subset_sum + card <= target:\n            subset_sum += card\n            subset.append(card)\n        if subset_sum == target:\n            return subset\n    return None\nassert f(g())\n",
        "emb": null,
        "idx_generation": 141,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(deck: list, target=21) -> bool:\n    \"\"\"Determine if there is a subset of cards in the deck that adds up to the target value\"\"\"\n    return any(sum(subset) == target for subset in subsets(deck))",
        "solution_func": "def g(deck=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    \"\"\"Return a subset of cards from the deck that adds up to half of the target value\"\"\"\n    target = sum(deck) // 2\n    random.shuffle(deck)\n    subset_sum = 0\n    subset = []\n    for card in deck:\n        if subset_sum + card <= target:\n            subset_sum += card\n            subset.append(card)\n        if subset_sum == target:\n            return subset\n    return None",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=16, b=8, c=8) -> bool:\n    \"\"\"Check if a number is a perfect square and has a given number of factors\"\"\"\n    return math.isqrt(n)**2 == n and len([i for i in range(1, n+1) if n % i == 0]) == a and (n % b == 0 or n % c == 0)\ndef g(a=16, b=8, c=8):\n    return a * b * c\nassert f(g())\n",
        "emb": null,
        "idx_generation": 142,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=16, b=8, c=8) -> bool:\n    \"\"\"Check if a number is a perfect square and has a given number of factors\"\"\"\n    return math.isqrt(n)**2 == n and len([i for i in range(1, n+1) if n % i == 0]) == a and (n % b == 0 or n % c == 0)",
        "solution_func": "def g(a=16, b=8, c=8):\n    return a * b * c",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: list, target=5, limit=10) -> bool:\n    \"\"\"Check if the sum of a subarray is equal to the target value\"\"\"\n    subarray = random.sample(arr, limit)\n    return sum(subarray) == target\ndef g(target=5, limit=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 142,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(arr: list, target=5, limit=10) -> bool:\n    \"\"\"Check if the sum of a subarray is equal to the target value\"\"\"\n    subarray = random.sample(arr, limit)\n    return sum(subarray) == target",
        "solution_func": "def g(target=5, limit=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, day=3, month=6, year=2022) -> bool:\n    \"\"\"Check if a given date is a specific day of the week\"\"\"\n    given_date = datetime.datetime.strptime(date, \"%Y-%m-%d\")\n    return given_date.weekday() == day and given_date.month == month and given_date.year == year\ndef g(day=3, month=6, year=2022):\n    return f\"{year}-{month}-{day}\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 142,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(date: str, day=3, month=6, year=2022) -> bool:\n    \"\"\"Check if a given date is a specific day of the week\"\"\"\n    given_date = datetime.datetime.strptime(date, \"%Y-%m-%d\")\n    return given_date.weekday() == day and given_date.month == month and given_date.year == year",
        "solution_func": "def g(day=3, month=6, year=2022):\n    return f\"{year}-{month}-{day}\"",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(primes: List[int], total=100) -> bool:\n    \"\"\"Find a combination of prime numbers that adds up to the given total.\"\"\"\n    return sum(primes) == total and all(is_prime(p) for p in primes)\ndef g(total=100):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = []\n    curr_num = 2\n    while sum(primes) < total:\n        if is_prime(curr_num):\n            primes.append(curr_num)\n        curr_num += 1\n    return primes\nassert f(g())\n",
        "emb": null,
        "idx_generation": 142,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(primes: List[int], total=100) -> bool:\n    \"\"\"Find a combination of prime numbers that adds up to the given total.\"\"\"\n    return sum(primes) == total and all(is_prime(p) for p in primes)",
        "solution_func": "def g(total=100):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = []\n    curr_num = 2\n    while sum(primes) < total:\n        if is_prime(curr_num):\n            primes.append(curr_num)\n        curr_num += 1\n    return primes",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a path from the top-left corner to the bottom-right corner of the matrix\n    where the sum of the numbers along the path is equal to the target.\"\"\"\n    return find_path(matrix, 0, 0, target)\ndef g(matrix=[[1, 3, 5], [2, 4, 7], [5, 6, 9]], target=10):\n    def find_path(matrix, row, col, target):\n        if row == len(matrix) - 1 and col == len(matrix[0]) - 1:\n            return matrix[row][col] == target\n        if row >= len(matrix) or col >= len(matrix[0]):\n            return False\n        if find_path(matrix, row + 1, col, target - matrix[row][col]):\n            return True\n        if find_path(matrix, row, col + 1, target - matrix[row][col]):\n            return True\n        return False\n\n    return find_path(matrix, 0, 0, target)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 142,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a path from the top-left corner to the bottom-right corner of the matrix\n    where the sum of the numbers along the path is equal to the target.\"\"\"\n    return find_path(matrix, 0, 0, target)",
        "solution_func": "def g(matrix=[[1, 3, 5], [2, 4, 7], [5, 6, 9]], target=10):\n    def find_path(matrix, row, col, target):\n        if row == len(matrix) - 1 and col == len(matrix[0]) - 1:\n            return matrix[row][col] == target\n        if row >= len(matrix) or col >= len(matrix[0]):\n            return False\n        if find_path(matrix, row + 1, col, target - matrix[row][col]):\n            return True\n        if find_path(matrix, row, col + 1, target - matrix[row][col]):\n            return True\n        return False\n\n    return find_path(matrix, 0, 0, target)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(pattern: List[int], sequence=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Find if the given pattern appears in the sequence.\"\"\"\n    return is_subsequence(pattern, sequence)\ndef g(sequence=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    def is_subsequence(pattern, sequence):\n        if len(pattern) == 0:\n            return True\n        if len(sequence) == 0:\n            return False\n        if pattern[0] == sequence[0]:\n            return is_subsequence(pattern[1:], sequence[1:])\n        return is_subsequence(pattern, sequence[1:])\n\n    return is_subsequence(pattern, sequence)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 142,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(pattern: List[int], sequence=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Find if the given pattern appears in the sequence.\"\"\"\n    return is_subsequence(pattern, sequence)",
        "solution_func": "def g(sequence=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    def is_subsequence(pattern, sequence):\n        if len(pattern) == 0:\n            return True\n        if len(sequence) == 0:\n            return False\n        if pattern[0] == sequence[0]:\n            return is_subsequence(pattern[1:], sequence[1:])\n        return is_subsequence(pattern, sequence[1:])\n\n    return is_subsequence(pattern, sequence)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: str, y: str, z: str, w: str, string='xyzw') -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return string == string[::-1]\ndef g(x: str, y: str, z: str, w: str):\n    return x + y + z + w\nassert f(g(x='a', y='b', z='c', w='a'))\n",
        "emb": null,
        "idx_generation": 142,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, y: str, z: str, w: str, string='xyzw') -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return string == string[::-1]",
        "solution_func": "def g(x: str, y: str, z: str, w: str):\n    return x + y + z + w",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m: int, a=5, b=7) -> bool:\n    \"\"\"Check if the given numbers are coprime\"\"\"\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return gcd(n, m) == 1\ndef g(a=5, b=7):\n    return a * b\nassert f(g())\n",
        "emb": null,
        "idx_generation": 142,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m: int, a=5, b=7) -> bool:\n    \"\"\"Check if the given numbers are coprime\"\"\"\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return gcd(n, m) == 1",
        "solution_func": "def g(a=5, b=7):\n    return a * b",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], a=1, b=100, target=50) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target number\"\"\"\n    return any(target - n in nums for n in nums)\ndef g(a=1, b=100, target=50):\n    return [n for n in range(a, b + 1)]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 142,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], a=1, b=100, target=50) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target number\"\"\"\n    return any(target - n in nums for n in nums)",
        "solution_func": "def g(a=1, b=100, target=50):\n    return [n for n in range(a, b + 1)]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\ndef f(l: List[int]) -> bool:\n    \"\"\"Find a list of integers where the sum of the squares of all elements is equal to the product of all elements.\"\"\"\n    return sum([i*i for i in l]) == math.prod(l)\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 142,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\ndef f(l: List[int]) -> bool:\n    \"\"\"Find a list of integers where the sum of the squares of all elements is equal to the product of all elements.\"\"\"\n    return sum([i*i for i in l]) == math.prod(l)",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(dates: List[datetime], year=2022, month=10, day=1) -> bool:\n    \"\"\"Find a list of 10 datetime objects that are all in the same month and year\"\"\"\n    return len(dates) == 10 and all((date.year == year and date.month == month for date in dates))\ndef g(year=2022, month=10, day=1):\n    start_date = datetime(year, month, day)\n    return [start_date + timedelta(days=i) for i in range(10)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 143,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(dates: List[datetime], year=2022, month=10, day=1) -> bool:\n    \"\"\"Find a list of 10 datetime objects that are all in the same month and year\"\"\"\n    return len(dates) == 10 and all((date.year == year and date.month == month for date in dates))",
        "solution_func": "def g(year=2022, month=10, day=1):\n    start_date = datetime(year, month, day)\n    return [start_date + timedelta(days=i) for i in range(10)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[float], n=5, m=7) -> bool:\n    \"\"\"Find a list of n distinct floating-point numbers that are all divisible by m\"\"\"\n    return len(nums) == n and all((math.isclose(num % m, 0) for num in nums))\ndef g(n=5, m=7):\n    return [i * m for i in range(1, n + 1)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 143,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(nums: List[float], n=5, m=7) -> bool:\n    \"\"\"Find a list of n distinct floating-point numbers that are all divisible by m\"\"\"\n    return len(nums) == n and all((math.isclose(num % m, 0) for num in nums))",
        "solution_func": "def g(n=5, m=7):\n    return [i * m for i in range(1, n + 1)]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=100, n=10) -> bool:\n    \"\"\"Find a list of n distinct integers that sum up to target\"\"\"\n    return len(nums) == n and sum(nums) == target and all((num in nums for num in range(1, target + 1)))\ndef g(target=100, n=10):\n    nums = random.sample(range(1, target), n - 1)\n    nums.append(target - sum(nums))\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 143,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target=100, n=10) -> bool:\n    \"\"\"Find a list of n distinct integers that sum up to target\"\"\"\n    return len(nums) == n and sum(nums) == target and all((num in nums for num in range(1, target + 1)))",
        "solution_func": "def g(target=100, n=10):\n    nums = random.sample(range(1, target), n - 1)\n    nums.append(target - sum(nums))\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=14) -> bool:\n    \"\"\"Given a list of numbers, find if there exists a subset whose sum is equal to the target value\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]\ndef g(target=14):\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 143,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=14) -> bool:\n    \"\"\"Given a list of numbers, find if there exists a subset whose sum is equal to the target value\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]",
        "solution_func": "def g(target=14):\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], pattern=\"abb\") -> bool:\n    \"\"\"Given a list of words and a pattern, find all words that match the pattern\"\"\"\n    def get_pattern(word):\n        char_map = {}\n        pattern = []\n        unique_char = 0\n        for char in word:\n            if char not in char_map:\n                char_map[char] = unique_char\n                unique_char += 1\n            pattern.append(char_map[char])\n        return pattern\n    pattern = get_pattern(pattern)\n    matching_words = []\n    for word in words:\n        if get_pattern(word) == pattern:\n            matching_words.append(word)\n    return matching_words\ndef g(pattern=\"abb\"):\n    words = [\"red\", \"blue\", \"green\", \"yellow\", \"orange\"]\n    return words\nassert f(g())\n",
        "emb": null,
        "idx_generation": 143,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], pattern=\"abb\") -> bool:\n    \"\"\"Given a list of words and a pattern, find all words that match the pattern\"\"\"\n    def get_pattern(word):\n        char_map = {}\n        pattern = []\n        unique_char = 0\n        for char in word:\n            if char not in char_map:\n                char_map[char] = unique_char\n                unique_char += 1\n            pattern.append(char_map[char])\n        return pattern\n    pattern = get_pattern(pattern)\n    matching_words = []\n    for word in words:\n        if get_pattern(word) == pattern:\n            matching_words.append(word)\n    return matching_words",
        "solution_func": "def g(pattern=\"abb\"):\n    words = [\"red\", \"blue\", \"green\", \"yellow\", \"orange\"]\n    return words",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Given a matrix, find if there exists a path from top-left to bottom-right whose sum is equal to the target value\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    dp = [[False] * (target + 1) for _ in range(m + 1)]\n    dp[0][0] = True\n    for i in range(1, m + 1):\n        dp[i][0] = True\n    for j in range(1, n + 1):\n        dp[0][j] = True\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = dp[i - 1][j] or dp[i][j - 1]\n    return dp[m][n]\ndef g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 143,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Given a matrix, find if there exists a path from top-left to bottom-right whose sum is equal to the target value\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    dp = [[False] * (target + 1) for _ in range(m + 1)]\n    dp[0][0] = True\n    for i in range(1, m + 1):\n        dp[i][0] = True\n    for j in range(1, n + 1):\n        dp[0][j] = True\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = dp[i - 1][j] or dp[i][j - 1]\n    return dp[m][n]",
        "solution_func": "def g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[43, 19, 7, 13, 31, 17, 23, 3, 11, 29, 5, 37, 2]) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(nums=[43, 19, 7, 13, 31, 17, 23, 3, 11, 29, 5, 37, 2]):\n    primes = []\n    for n in nums:\n        if f(n):\n            primes.append(n)\n    return primes\nassert f(g())\n",
        "emb": null,
        "idx_generation": 143,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[43, 19, 7, 13, 31, 17, 23, 3, 11, 29, 5, 37, 2]) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g(nums=[43, 19, 7, 13, 31, 17, 23, 3, 11, 29, 5, 37, 2]):\n    primes = []\n    for n in nums:\n        if f(n):\n            primes.append(n)\n    return primes",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=0, b=1.5) -> bool:\n    \"\"\"Check if the square root of a number is within a certain range\"\"\"\n    return math.isqrt(n) == a and a <= math.sqrt(n) <= b\ndef g(a=0, b=1.5):\n    return (a + b) ** 2\nassert f(g())\n",
        "emb": null,
        "idx_generation": 143,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=0, b=1.5) -> bool:\n    \"\"\"Check if the square root of a number is within a certain range\"\"\"\n    return math.isqrt(n) == a and a <= math.sqrt(n) <= b",
        "solution_func": "def g(a=0, b=1.5):\n    return (a + b) ** 2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a number is in a list\"\"\"\n    return n in lst\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return random.choice(lst)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 143,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a number is in a list\"\"\"\n    return n in lst",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return random.choice(lst)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, k=5) -> bool:\n    \"\"\"Find a number that is divisible by n and has exactly k factors\"\"\"\n    return n % k == 0 and len([i for i in range(1, n + 1) if n % i == 0]) == k\ndef g(k=5):\n    return math.factorial(k)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 143,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, k=5) -> bool:\n    \"\"\"Find a number that is divisible by n and has exactly k factors\"\"\"\n    return n % k == 0 and len([i for i in range(1, n + 1) if n % i == 0]) == k",
        "solution_func": "def g(k=5):\n    return math.factorial(k)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [1, 2, target-3]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 144,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=100):\n    return [1, 2, target-3]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the target string is a substring of s.\"\"\"\n    return target in s\n\ndef g(target='python'):\n    return \"This is a string that contains the target word: \" + target\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 144,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the target string is a substring of s.\"\"\"\n    return target in s",
        "solution_func": "def g(target='python'):\n    return \"This is a string that contains the target word: \" + target",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format_string='%Y-%m-%d') -> bool:\n    \"\"\"Check if the given date string matches the specified format.\"\"\"\n    try:\n        datetime.strptime(date, format_string)\n        return True\n    except ValueError:\n        return False\n\ndef g(format_string='%Y-%m-%d'):\n    return datetime.now().strftime(format_string)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 144,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format_string='%Y-%m-%d') -> bool:\n    \"\"\"Check if the given date string matches the specified format.\"\"\"\n    try:\n        datetime.strptime(date, format_string)\n        return True\n    except ValueError:\n        return False",
        "solution_func": "def g(format_string='%Y-%m-%d'):\n    return datetime.now().strftime(format_string)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a given string is a palindrome of length n\"\"\"\n    return s == s[::-1] and len(s) == n\ndef g(n=3):\n    return 'abc'[:n]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 144,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a given string is a palindrome of length n\"\"\"\n    return s == s[::-1] and len(s) == n",
        "solution_func": "def g(n=3):\n    return 'abc'[:n]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, div=2) -> bool:\n    \"\"\"Check if a given number is divisible by another number\"\"\"\n    return n % div == 0\ndef g(div=2):\n    return 10 * div\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 144,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, div=2) -> bool:\n    \"\"\"Check if a given number is divisible by another number\"\"\"\n    return n % div == 0",
        "solution_func": "def g(div=2):\n    return 10 * div",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if a given number is a perfect square and its square root is divisible by m\"\"\"\n    return math.isqrt(n) ** 2 == n and math.isqrt(n) % m == 0\ndef g(m=5):\n    return m ** 2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 144,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if a given number is a perfect square and its square root is divisible by m\"\"\"\n    return math.isqrt(n) ** 2 == n and math.isqrt(n) % m == 0",
        "solution_func": "def g(m=5):\n    return m ** 2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[4, 6, 2, 8, 5, 7, 9]) -> bool:\n    \"\"\"Check if a given number n exists in the list lst.\"\"\"\n    return n in lst\ndef g(lst=[4, 6, 2, 8, 5, 7, 9]):\n    return lst[3]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 144,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[4, 6, 2, 8, 5, 7, 9]) -> bool:\n    \"\"\"Check if a given number n exists in the list lst.\"\"\"\n    return n in lst",
        "solution_func": "def g(lst=[4, 6, 2, 8, 5, 7, 9]):\n    return lst[3]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, lst=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Check if a given string s is a substring of any of the strings in the list lst.\"\"\"\n    return any(s in word for word in lst)\ndef g(lst=['apple', 'banana', 'cherry', 'date']):\n    return lst[2][:3]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 144,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, lst=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Check if a given string s is a substring of any of the strings in the list lst.\"\"\"\n    return any(s in word for word in lst)",
        "solution_func": "def g(lst=['apple', 'banana', 'cherry', 'date']):\n    return lst[2][:3]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n=50) -> bool:\n    \"\"\"Check if there exists two numbers in the list lst whose sum is equal to n.\"\"\"\n    return any(n - num in lst for num in lst)\ndef g(n=50):\n    return [20, 30, 40, 10, 25, 35]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 144,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], n=50) -> bool:\n    \"\"\"Check if there exists two numbers in the list lst whose sum is equal to n.\"\"\"\n    return any(n - num in lst for num in lst)",
        "solution_func": "def g(n=50):\n    return [20, 30, 40, 10, 25, 35]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=6, b=2) -> bool:\n    \"\"\"Check if a number is divisible by another number raised to a power.\"\"\"\n    return n % (a ** b) == 0\n\ndef g(a=6, b=2):\n    return a ** b * math.ceil(1000 / (a ** b))\n    \nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 144,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=6, b=2) -> bool:\n    \"\"\"Check if a number is divisible by another number raised to a power.\"\"\"\n    return n % (a ** b) == 0",
        "solution_func": "def g(a=6, b=2):\n    return a ** b * math.ceil(1000 / (a ** b))",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='hello') -> bool:\n    \"\"\"Given a string, check if it contains a specific substring.\"\"\"\n    return substring in s\ndef g(substring='hello'):\n    return 'This is a hello world example'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 145,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='hello') -> bool:\n    \"\"\"Given a string, check if it contains a specific substring.\"\"\"\n    return substring in s",
        "solution_func": "def g(substring='hello'):\n    return 'This is a hello world example'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(prices: List[float], target=100.0) -> bool:\n    \"\"\"Given a list of prices, check if there are two prices that sum up to a specific target price.\"\"\"\n    for i in range(len(prices)):\n        for j in range(i+1, len(prices)):\n            if prices[i] + prices[j] == target:\n                return True\n    return False\ndef g(target=100.0):\n    return [25.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 145,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(prices: List[float], target=100.0) -> bool:\n    \"\"\"Given a list of prices, check if there are two prices that sum up to a specific target price.\"\"\"\n    for i in range(len(prices)):\n        for j in range(i+1, len(prices)):\n            if prices[i] + prices[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=100.0):\n    return [25.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Given a matrix of integers, check if there is any row that sums up to a specific target value.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 145,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Given a matrix of integers, check if there is any row that sums up to a specific target value.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False",
        "solution_func": "def g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    return n > 1 and all(n % i != 0 for i in lst)\ndef g(lst=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    n = max(lst) + 1\n    while not f(n, lst):\n        n += 1\n    return n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 145,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    return n > 1 and all(n % i != 0 for i in lst)",
        "solution_func": "def g(lst=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    n = max(lst) + 1\n    while not f(n, lst):\n        n += 1\n    return n",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['python', 'programming', 'puzzle', 'code', 'challenge']) -> bool:\n    \"\"\"Check if a word is an anagram of any word in the given list.\"\"\"\n    sorted_s = ''.join(sorted(s))\n    return any(''.join(sorted(word)) == sorted_s for word in words)\ndef g(words=['python', 'programming', 'puzzle', 'code', 'challenge']):\n    return words[0]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 145,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, words=['python', 'programming', 'puzzle', 'code', 'challenge']) -> bool:\n    \"\"\"Check if a word is an anagram of any word in the given list.\"\"\"\n    sorted_s = ''.join(sorted(s))\n    return any(''.join(sorted(word)) == sorted_s for word in words)",
        "solution_func": "def g(words=['python', 'programming', 'puzzle', 'code', 'challenge']):\n    return words[0]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sums up to the target sum.\"\"\"\n    return any(target_sum - i in lst for i in lst)\ndef g(target_sum=10):\n    return [target_sum // 2, target_sum // 2]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 145,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sums up to the target sum.\"\"\"\n    return any(target_sum - i in lst for i in lst)",
        "solution_func": "def g(target_sum=10):\n    return [target_sum // 2, target_sum // 2]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the array that sum up to the target value\"\"\"\n    return any([(arr[i] + arr[j] == target) for i in range(len(arr)) for j in range(i+1, len(arr))])\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 145,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the array that sum up to the target value\"\"\"\n    return any([(arr[i] + arr[j] == target) for i in range(len(arr)) for j in range(i+1, len(arr))])",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=3) -> bool:\n    \"\"\"Find a number n that is a perfect square and divisible by x\"\"\"\n    return math.isqrt(n) ** 2 == n and n % x == 0\ndef g(x=3):\n    return x ** 2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 145,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=3) -> bool:\n    \"\"\"Find a number n that is a perfect square and divisible by x\"\"\"\n    return math.isqrt(n) ** 2 == n and n % x == 0",
        "solution_func": "def g(x=3):\n    return x ** 2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, div1=7, div2=13) -> bool:\n    \"\"\"Find a number that is divisible by both div1 and div2\"\"\"\n    return num % div1 == 0 and num % div2 == 0\ndef g(div1=7, div2=13):\n    return div1 * div2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 145,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int, div1=7, div2=13) -> bool:\n    \"\"\"Find a number that is divisible by both div1 and div2\"\"\"\n    return num % div1 == 0 and num % div2 == 0",
        "solution_func": "def g(div1=7, div2=13):\n    return div1 * div2",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if the given string has exactly n uppercase letters.\"\"\"\n    return sum(1 for c in s if c.isupper()) == n\ndef g(n: int):\n    return 'A' * n + 'a' * (10 - n)\nassert f(g(5), 5)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 145,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if the given string has exactly n uppercase letters.\"\"\"\n    return sum(1 for c in s if c.isupper()) == n",
        "solution_func": "def g(n: int):\n    return 'A' * n + 'a' * (10 - n)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[10, 15, 20, 25], target=100) -> bool:\n    \"\"\"Given a list of integers and a target number, find if it is possible to add/subtract the numbers in the list\n    to reach the target number. Each number in the list can only be used once.\"\"\"\n    return any((n == target for n in nums)) or any((f(n + nums[i], nums[:i] + nums[i+1:], target) or f(n - nums[i], nums[:i] + nums[i+1:], target) for i in range(len(nums))))\ndef g(nums=[10, 15, 20, 25], target=100):\n    return f(0, nums, target)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 146,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[10, 15, 20, 25], target=100) -> bool:\n    \"\"\"Given a list of integers and a target number, find if it is possible to add/subtract the numbers in the list\n    to reach the target number. Each number in the list can only be used once.\"\"\"\n    return any((n == target for n in nums)) or any((f(n + nums[i], nums[:i] + nums[i+1:], target) or f(n - nums[i], nums[:i] + nums[i+1:], target) for i in range(len(nums))))",
        "solution_func": "def g(nums=[10, 15, 20, 25], target=100):\n    return f(0, nums, target)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[5, 10, 15, 20, 25]) -> bool:\n    \"\"\"Given a list of integers, find if there exists a subset of the list that sums up to a given number.\"\"\"\n    return any((n == 0 for n in nums)) or any((f(n - nums[i], nums[:i] + nums[i+1:]) for i in range(len(nums))))\ndef g(nums=[5, 10, 15, 20, 25]):\n    return f(sum(nums) // 2, nums)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 146,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[5, 10, 15, 20, 25]) -> bool:\n    \"\"\"Given a list of integers, find if there exists a subset of the list that sums up to a given number.\"\"\"\n    return any((n == 0 for n in nums)) or any((f(n - nums[i], nums[:i] + nums[i+1:]) for i in range(len(nums))))",
        "solution_func": "def g(nums=[5, 10, 15, 20, 25]):\n    return f(sum(nums) // 2, nums)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[10, 20, 30, 40, 50]) -> bool:\n    \"\"\"Given a list of integers, find if there exists a subset of the list that sums up to a given number.\n    Each number in the list can only be used once.\"\"\"\n    return any((n == 0 for n in nums)) or any((f(n - nums[i], nums[:i] + nums[i+1:]) for i in range(len(nums))))\ndef g(nums=[10, 20, 30, 40, 50]):\n    return f(sum(nums) // 2, nums)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 146,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[10, 20, 30, 40, 50]) -> bool:\n    \"\"\"Given a list of integers, find if there exists a subset of the list that sums up to a given number.\n    Each number in the list can only be used once.\"\"\"\n    return any((n == 0 for n in nums)) or any((f(n - nums[i], nums[:i] + nums[i+1:]) for i in range(len(nums))))",
        "solution_func": "def g(nums=[10, 20, 30, 40, 50]):\n    return f(sum(nums) // 2, nums)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(li: List[int], target_sum=100) -> bool:\n    \"\"\"Find a sublist of li whose sum is equal to target_sum\"\"\"\n    return sum(li) == target_sum\ndef g(target_sum=100):\n    return list(range(1, target_sum+1))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 146,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int], target_sum=100) -> bool:\n    \"\"\"Find a sublist of li whose sum is equal to target_sum\"\"\"\n    return sum(li) == target_sum",
        "solution_func": "def g(target_sum=100):\n    return list(range(1, target_sum+1))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Find a matrix where the sum of each row is equal to the sum of each column\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return row_sums == col_sums\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 146,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Find a matrix where the sum of each row is equal to the sum of each column\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return row_sums == col_sums",
        "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find an integer that can be expressed as the sum of two different positive perfect squares\"\"\"\n    for i in range(1, int(n**0.5)+1):\n        for j in range(1, int(n**0.5)+1):\n            if i**2 + j**2 == n:\n                return True\n    return False\ndef g():\n    return 10\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 146,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find an integer that can be expressed as the sum of two different positive perfect squares\"\"\"\n    for i in range(1, int(n**0.5)+1):\n        for j in range(1, int(n**0.5)+1):\n            if i**2 + j**2 == n:\n                return True\n    return False",
        "solution_func": "def g():\n    return 10",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target number.\"\"\"\n    return len(x) >= 2 and any((x[i] + x[j] == target for i in range(len(x)) for j in range(i+1, len(x))))\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 146,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target number.\"\"\"\n    return len(x) >= 2 and any((x[i] + x[j] == target for i in range(len(x)) for j in range(i+1, len(x))))",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='abc') -> bool:\n    \"\"\"Check if the target string is a substring of the given string.\"\"\"\n    return target in s\ndef g(target='abc'):\n    return 'xyzabc123'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 146,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='abc') -> bool:\n    \"\"\"Check if the target string is a substring of the given string.\"\"\"\n    return target in s",
        "solution_func": "def g(target='abc'):\n    return 'xyzabc123'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target=5) -> bool:\n    \"\"\"Find the number of elements in the list that are greater than the target number.\"\"\"\n    return len([num for num in x if num > target]) > 0\ndef g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 146,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], target=5) -> bool:\n    \"\"\"Find the number of elements in the list that are greater than the target number.\"\"\"\n    return len([num for num in x if num > target]) > 0",
        "solution_func": "def g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=42) -> bool:\n    \"\"\"Find a target value within a matrix\"\"\"\n    return any(target in row for row in matrix)\ndef g(target=42):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 146,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=42) -> bool:\n    \"\"\"Find a target value within a matrix\"\"\"\n    return any(target in row for row in matrix)",
        "solution_func": "def g(target=42):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst=[2, 3, 5, 7, 11, 13, 17]) -> bool:\n    \"\"\"Check if a given number n is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(lst=[2, 3, 5, 7, 11, 13, 17]):\n    if len(lst) == 0:\n        return 2\n    else:\n        return max(lst) + 1\nassert f(g())\n",
        "emb": null,
        "idx_generation": 147,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[2, 3, 5, 7, 11, 13, 17]) -> bool:\n    \"\"\"Check if a given number n is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g(lst=[2, 3, 5, 7, 11, 13, 17]):\n    if len(lst) == 0:\n        return 2\n    else:\n        return max(lst) + 1",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a given string s contains a palindrome of length n.\"\"\"\n    for i in range(len(s) - n + 1):\n        sub = s[i:i+n]\n        if sub == sub[::-1]:\n            return True\n    return False\ndef g(n=5):\n    return \"racecar\"[:n]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 147,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a given string s contains a palindrome of length n.\"\"\"\n    for i in range(len(s) - n + 1):\n        sub = s[i:i+n]\n        if sub == sub[::-1]:\n            return True\n    return False",
        "solution_func": "def g(n=5):\n    return \"racecar\"[:n]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: list, target=12) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target number.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(target=12):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 147,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: list, target=12) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target number.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=12):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=5, y=12) -> bool:\n    \"\"\"Find n that is a perfect square and is divisible by both x and y\"\"\"\n    return math.isqrt(n)**2 == n and n % x == 0 and n % y == 0\n\ndef g(x=5, y=12):\n    return x * y * (x * y)\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 147,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=5, y=12) -> bool:\n    \"\"\"Find n that is a perfect square and is divisible by both x and y\"\"\"\n    return math.isqrt(n)**2 == n and n % x == 0 and n % y == 0",
        "solution_func": "def g(x=5, y=12):\n    return x * y * (x * y)",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, target=50) -> bool:\n    \"\"\"Find n that is the sum of three random integers between 1 and 10 (inclusive), and the sum is equal to the target\"\"\"\n    numbers = [random.randint(1, 10) for _ in range(3)]\n    return sum(numbers) == target\n\ndef g(target=50):\n    return target\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 147,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, target=50) -> bool:\n    \"\"\"Find n that is the sum of three random integers between 1 and 10 (inclusive), and the sum is equal to the target\"\"\"\n    numbers = [random.randint(1, 10) for _ in range(3)]\n    return sum(numbers) == target",
        "solution_func": "def g(target=50):\n    return target",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=7, b=13, c=2) -> bool:\n    \"\"\"Find n that is a multiple of a, b, and c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\n\ndef g(a=7, b=13, c=2):\n    return a * b * c\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 147,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=7, b=13, c=2) -> bool:\n    \"\"\"Find n that is a multiple of a, b, and c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0",
        "solution_func": "def g(a=7, b=13, c=2):\n    return a * b * c",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=42) -> bool:\n    \"\"\"Determine if a target value exists in the matrix\"\"\"\n    return any(target in row for row in matrix)\ndef g(target=42):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 147,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=42) -> bool:\n    \"\"\"Determine if a target value exists in the matrix\"\"\"\n    return any(target in row for row in matrix)",
        "solution_func": "def g(target=42):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, substring='python') -> bool:\n    \"\"\"Check if a string contains a specific substring\"\"\"\n    return substring in string\ndef g(substring='python'):\n    return \"I love programming in Python\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 147,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='python') -> bool:\n    \"\"\"Check if a string contains a specific substring\"\"\"\n    return substring in string",
        "solution_func": "def g(substring='python'):\n    return \"I love programming in Python\"",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exist two numbers in the list that sum up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 147,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exist two numbers in the list that sum up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, s=\"programming\", n=11) -> bool:\n    \"\"\"Check if the string x is an anagram of the string s\"\"\"\n    return len(x) == n and sorted(x.lower()) == sorted(s.lower())\ndef g(s=\"programming\", n=11):\n    return ''.join(sorted(s.lower()))\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 147,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, s=\"programming\", n=11) -> bool:\n    \"\"\"Check if the string x is an anagram of the string s\"\"\"\n    return len(x) == n and sorted(x.lower()) == sorted(s.lower())",
        "solution_func": "def g(s=\"programming\", n=11):\n    return ''.join(sorted(s.lower()))",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: list, target=15) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    matrix.append(list(range(10, target+1)))\n    return matrix\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 148,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: list, target=15) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    matrix.append(list(range(10, target+1)))\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(sentence: str, word='hello') -> bool:\n    \"\"\"Check if the word is present in the sentence\"\"\"\n    sentence_words = sentence.split()\n    if word in sentence_words:\n        return True\n    return False\ndef g(word='hello'):\n    sentence = \"Hello, how are you today?\"\n    return sentence.lower()\nassert f(g())\n",
        "emb": null,
        "idx_generation": 148,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(sentence: str, word='hello') -> bool:\n    \"\"\"Check if the word is present in the sentence\"\"\"\n    sentence_words = sentence.split()\n    if word in sentence_words:\n        return True\n    return False",
        "solution_func": "def g(word='hello'):\n    sentence = \"Hello, how are you today?\"\n    return sentence.lower()",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: list, target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    for i, num1 in enumerate(numbers):\n        for num2 in numbers[i+1:]:\n            if num1 + num2 == target:\n                return True\n    return False\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5]\n    numbers.append(target - sum(numbers))\n    return numbers\nassert f(g())\n",
        "emb": null,
        "idx_generation": 148,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: list, target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    for i, num1 in enumerate(numbers):\n        for num2 in numbers[i+1:]:\n            if num1 + num2 == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    numbers = [1, 2, 3, 4, 5]\n    numbers.append(target - sum(numbers))\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target sum\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 3):\n        if sum(combo) == target_sum:\n            return True\n    return False\n\ndef g(target_sum=100):\n    return [25, 50, target_sum-75]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 148,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target sum\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 3):\n        if sum(combo) == target_sum:\n            return True\n    return False",
        "solution_func": "def g(target_sum=100):\n    return [25, 50, target_sum-75]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string\"\"\"\n    return substring in s\n\ndef g(substring='abc'):\n    return \"xyz\" + substring + \"def\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 148,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string\"\"\"\n    return substring in s",
        "solution_func": "def g(substring='abc'):\n    return \"xyz\" + substring + \"def\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Check if there exists a row in the matrix where the sum of its elements is equal to the target sum\"\"\"\n    for row in matrix:\n        if sum(row) == target_sum:\n            return True\n    return False\n\ndef g(target_sum=100):\n    return [[10, 20, 30], [40, 50, target_sum-80], [60, 70, 80]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 148,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Check if there exists a row in the matrix where the sum of its elements is equal to the target sum\"\"\"\n    for row in matrix:\n        if sum(row) == target_sum:\n            return True\n    return False",
        "solution_func": "def g(target_sum=100):\n    return [[10, 20, 30], [40, 50, target_sum-80], [60, 70, 80]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=3, b=5) -> bool:\n    \"\"\"Check if the square root of x plus y divided by z is equal to a raised to the power of b\"\"\"\n    return math.sqrt(x + y) / z == a ** b\n\ndef g(x=7, y=2, z=4, a=3, b=5):\n    return x + y * z\nassert f(g())\n",
        "emb": null,
        "idx_generation": 148,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=3, b=5) -> bool:\n    \"\"\"Check if the square root of x plus y divided by z is equal to a raised to the power of b\"\"\"\n    return math.sqrt(x + y) / z == a ** b",
        "solution_func": "def g(x=7, y=2, z=4, a=3, b=5):\n    return x + y * z",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=3, reverse=True) -> bool:\n    \"\"\"Check if the nth letter of the string is equal to the last letter of the reversed string\"\"\"\n    return s[n-1] == s[::-1][0]\n\ndef g(s='python', n=3, reverse=True):\n    return s[::-1] if reverse else s\nassert f(g())\n",
        "emb": null,
        "idx_generation": 148,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3, reverse=True) -> bool:\n    \"\"\"Check if the nth letter of the string is equal to the last letter of the reversed string\"\"\"\n    return s[n-1] == s[::-1][0]",
        "solution_func": "def g(s='python', n=3, reverse=True):\n    return s[::-1] if reverse else s",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: list, target=10, max_value=100) -> bool:\n    \"\"\"Check if the sum of the numbers in the list is equal to the target number\"\"\"\n    return sum(lst) == target\n\ndef g(target=10, max_value=100):\n    lst = [random.randint(1, max_value) for _ in range(5)]\n    return lst\nassert f(g())\n",
        "emb": null,
        "idx_generation": 148,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(lst: list, target=10, max_value=100) -> bool:\n    \"\"\"Check if the sum of the numbers in the list is equal to the target number\"\"\"\n    return sum(lst) == target",
        "solution_func": "def g(target=10, max_value=100):\n    lst = [random.randint(1, max_value) for _ in range(5)]\n    return lst",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int, digits=3) -> bool:\n    \"\"\"Check if the given number is a perfect square with a specified number of digits.\"\"\"\n    return len(str(num)) == digits and math.isqrt(num) ** 2 == num\ndef g(digits=3):\n    num = int(math.pow(10, digits - 1))\n    return num ** 2\nassert f(g())\n",
        "emb": null,
        "idx_generation": 148,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(num: int, digits=3) -> bool:\n    \"\"\"Check if the given number is a perfect square with a specified number of digits.\"\"\"\n    return len(str(num)) == digits and math.isqrt(num) ** 2 == num",
        "solution_func": "def g(digits=3):\n    num = int(math.pow(10, digits - 1))\n    return num ** 2",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, m: int, result=20) -> bool:\n    \"\"\"Find the largest number that divides both n and m and is less than or equal to result\"\"\"\n    return result == math.gcd(n, m)\ndef g(n: int, m: int):\n    return min(n, m)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 149,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, m: int, result=20) -> bool:\n    \"\"\"Find the largest number that divides both n and m and is less than or equal to result\"\"\"\n    return result == math.gcd(n, m)",
        "solution_func": "def g(n: int, m: int):\n    return min(n, m)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(cards: List[int], target=21) -> bool:\n    \"\"\"Find a subset of cards that sums up to the target value\"\"\"\n    return sum(cards) == target\ndef g(target=21):\n    cards = [random.randint(1, 10) for _ in range(4)]\n    return cards\nassert f(g())\n",
        "emb": null,
        "idx_generation": 149,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(cards: List[int], target=21) -> bool:\n    \"\"\"Find a subset of cards that sums up to the target value\"\"\"\n    return sum(cards) == target",
        "solution_func": "def g(target=21):\n    cards = [random.randint(1, 10) for _ in range(4)]\n    return cards",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']) -> bool:\n    \"\"\"Find the longest common substring between s and any of the substrings\"\"\"\n    return any(sub in s for sub in substrings)\ndef g(substrings=['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']):\n    return substrings[0]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 149,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']) -> bool:\n    \"\"\"Find the longest common substring between s and any of the substrings\"\"\"\n    return any(sub in s for sub in substrings)",
        "solution_func": "def g(substrings=['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']):\n    return substrings[0]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\ndef g(arr=[10, 20, 30, 40, 50, 60, 70]):\n    return arr\nassert f(g())\n",
        "emb": null,
        "idx_generation": 149,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(arr=[10, 20, 30, 40, 50, 60, 70]):\n    return arr",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, m: int, x=2) -> bool:\n    \"\"\"Check if the given number n is a power of m raised to the x-th power.\"\"\"\n    return n == math.pow(m, x)\ndef g(x=2):\n    return int(math.pow(4, x))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 149,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, m: int, x=2) -> bool:\n    \"\"\"Check if the given number n is a power of m raised to the x-th power.\"\"\"\n    return n == math.pow(m, x)",
        "solution_func": "def g(x=2):\n    return int(math.pow(4, x))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, k: int, substr='abc') -> bool:\n    \"\"\"Check if the given string s has at least k occurrences of the substring substr.\"\"\"\n    count = 0\n    start = 0\n    while start < len(s):\n        index = s.find(substr, start)\n        if index == -1:\n            break\n        count += 1\n        start = index + 1\n    return count >= k\ndef g(substr='abc'):\n    return substr * 3\nassert f(g())\n",
        "emb": null,
        "idx_generation": 149,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, k: int, substr='abc') -> bool:\n    \"\"\"Check if the given string s has at least k occurrences of the substring substr.\"\"\"\n    count = 0\n    start = 0\n    while start < len(s):\n        index = s.find(substr, start)\n        if index == -1:\n            break\n        count += 1\n        start = index + 1\n    return count >= k",
        "solution_func": "def g(substr='abc'):\n    return substr * 3",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the given number n is a perfect square and if the sum of the list elements is equal to n.\"\"\"\n    return n in (i ** 2 for i in range(1, int(n ** 0.5) + 1)) and sum(lst) == n\ndef g(lst=[1, 2, 3, 4, 5]):\n    n = sum(lst)\n    return n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 149,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the given number n is a perfect square and if the sum of the list elements is equal to n.\"\"\"\n    return n in (i ** 2 for i in range(1, int(n ** 0.5) + 1)) and sum(lst) == n",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    n = sum(lst)\n    return n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5], k=3) -> bool:\n    \"\"\"Check if the given number n is divisible by k and if all elements in the list are divisible by k.\"\"\"\n    return n % k == 0 and all(i % k == 0 for i in lst)\ndef g(lst=[1, 2, 3, 4, 5], k=3):\n    n = sum(lst)\n    return n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 149,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5], k=3) -> bool:\n    \"\"\"Check if the given number n is divisible by k and if all elements in the list are divisible by k.\"\"\"\n    return n % k == 0 and all(i % k == 0 for i in lst)",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5], k=3):\n    n = sum(lst)\n    return n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target number.\"\"\"\n    return any(lst[i] + lst[j] == target for i in range(len(lst)) for j in range(i+1, len(lst)))\ndef g(target=20):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 149,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target number.\"\"\"\n    return any(lst[i] + lst[j] == target for i in range(len(lst)) for j in range(i+1, len(lst)))",
        "solution_func": "def g(target=20):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Given a list of integers, find the pair of numbers whose sum is equal to n\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == n:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 149,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Given a list of integers, find the pair of numbers whose sum is equal to n\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == n:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=3, c=2) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\ndef g(a=5, b=3, c=2):\n    return -a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 150,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=5, b=3, c=2) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])",
        "solution_func": "def g(a=5, b=3, c=2):\n    return -a + sum([b * i for i in range(c)])",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=5, lower=-100, seq=[1, -2, 3, -4, 5]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose product is maximal, possibly looping around\"\"\"\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower\ndef g(k=5, lower=-100, seq=[1, -2, 3, -4, 5]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 150,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(start: int, k=5, lower=-100, seq=[1, -2, 3, -4, 5]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose product is maximal, possibly looping around\"\"\"\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower",
        "solution_func": "def g(k=5, lower=-100, seq=[1, -2, 3, -4, 5]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=-10, b=15) -> bool:\n    \"\"\"Solve a subtraction problem\"\"\"\n    return a - x == b\ndef g(a=-10, b=15):\n    return a - b\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 150,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=-10, b=15) -> bool:\n    \"\"\"Solve a subtraction problem\"\"\"\n    return a - x == b",
        "solution_func": "def g(a=-10, b=15):\n    return a - b",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 150,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that add up to the target value.\"\"\"\n    return any((matrix[i][j] + matrix[k][l] == target) for i in range(len(matrix)) for j in range(len(matrix[i])) for k in range(len(matrix)) for l in range(len(matrix[k])) if (i != k or j != l))\ndef g(target=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 150,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that add up to the target value.\"\"\"\n    return any((matrix[i][j] + matrix[k][l] == target) for i in range(len(matrix)) for j in range(len(matrix[i])) for k in range(len(matrix)) for l in range(len(matrix[k])) if (i != k or j != l))",
        "solution_func": "def g(target=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": [
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]], target=50) -> bool:\n    \"\"\"Find three points in the list such that the sum of their x-coordinates and the sum of their y-coordinates add up to the target value.\"\"\"\n    return any((points[i][0] + points[j][0] + points[k][0] == target and points[i][1] + points[j][1] + points[k][1] == target) for i in range(len(points)) for j in range(i+1, len(points)) for k in range(j+1, len(points)))\ndef g(target=50):\n    return [(1, 2), (3, 4), (5, 6), (7, 8)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 150,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(points: List[Tuple[int, int]], target=50) -> bool:\n    \"\"\"Find three points in the list such that the sum of their x-coordinates and the sum of their y-coordinates add up to the target value.\"\"\"\n    return any((points[i][0] + points[j][0] + points[k][0] == target and points[i][1] + points[j][1] + points[k][1] == target) for i in range(len(points)) for j in range(i+1, len(points)) for k in range(j+1, len(points)))",
        "solution_func": "def g(target=50):\n    return [(1, 2), (3, 4), (5, 6), (7, 8)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(m: int, n: int) -> bool:\n    \"\"\"Check if two positive integers are coprime (i.e. their greatest common divisor is 1).\"\"\"\n    return gcd(m, n) == 1\n\ndef g():\n    return 17, 23\n\nassert f(*g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 150,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(m: int, n: int) -> bool:\n    \"\"\"Check if two positive integers are coprime (i.e. their greatest common divisor is 1).\"\"\"\n    return gcd(m, n) == 1",
        "solution_func": "def g():\n    return 17, 23",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 150,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"racecar\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if a list contains a subsequence of length 3 that is an arithmetic progression.\"\"\"\n    perms = permutations(lst, 3)\n    for perm in perms:\n        if perm[1] - perm[0] == perm[2] - perm[1]:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 150,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if a list contains a subsequence of length 3 that is an arithmetic progression.\"\"\"\n    perms = permutations(lst, 3)\n    for perm in perms:\n        if perm[1] - perm[0] == perm[2] - perm[1]:\n            return True\n    return False",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the sum of any two elements in the list is equal to the given number\"\"\"\n    return any([lst[i] + lst[j] == n for i in range(len(lst)) for j in range(i+1, len(lst))])\n    \ndef g(lst: List[int]):\n    return lst\n\nassert f(10, g([1, 2, 3, 4, 5]))\n",
        "emb": null,
        "idx_generation": 150,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the sum of any two elements in the list is equal to the given number\"\"\"\n    return any([lst[i] + lst[j] == n for i in range(len(lst)) for j in range(i+1, len(lst))])",
        "solution_func": "def g(lst: List[int]):\n    return lst",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, lst=['apple', 'banana', 'cherry'], target=2) -> bool:\n    \"\"\"You are given a list of strings. Find the index of the first string that has a length greater than or equal to the target length.\n    Sample Input:\n    `['apple', 'banana', 'cherry']`\n    Sample Output:\n    `1`\"\"\"\n    for i, s in enumerate(lst):\n        if len(s) >= target:\n            return i == result\n    return False\n\ndef g(lst=['apple', 'banana', 'cherry'], target=2):\n    for i, s in enumerate(lst):\n        if len(s) >= target:\n            return i\n    return None\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 151,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(result: int, lst=['apple', 'banana', 'cherry'], target=2) -> bool:\n    \"\"\"You are given a list of strings. Find the index of the first string that has a length greater than or equal to the target length.\n    Sample Input:\n    `['apple', 'banana', 'cherry']`\n    Sample Output:\n    `1`\"\"\"\n    for i, s in enumerate(lst):\n        if len(s) >= target:\n            return i == result\n    return False",
        "solution_func": "def g(lst=['apple', 'banana', 'cherry'], target=2):\n    for i, s in enumerate(lst):\n        if len(s) >= target:\n            return i\n    return None",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(res: str, s='alphabet', target='a') -> bool:\n    \"\"\"You are given a string and a target character. Find the first occurrence of the target character in the string.\n    Sample Input:\n    `'alphabet', 'a'`\n    Sample Output:\n    `'a'`\"\"\"\n    for c in s:\n        if c == target:\n            return c == res\n    return False\n\ndef g(s='alphabet', target='a'):\n    for c in s:\n        if c == target:\n            return c\n    return None\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 151,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(res: str, s='alphabet', target='a') -> bool:\n    \"\"\"You are given a string and a target character. Find the first occurrence of the target character in the string.\n    Sample Input:\n    `'alphabet', 'a'`\n    Sample Output:\n    `'a'`\"\"\"\n    for c in s:\n        if c == target:\n            return c == res\n    return False",
        "solution_func": "def g(s='alphabet', target='a'):\n    for c in s:\n        if c == target:\n            return c\n    return None",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(res: int, x=5, y=10) -> bool:\n    \"\"\"Find the sum of all numbers between x and y (inclusive) that are divisible by 3.\n    Sample Input:\n    `5, 10`\n    Sample Output:\n    `18`\"\"\"\n    total = 0\n    for num in range(x, y+1):\n        if num % 3 == 0:\n            total += num\n    return total == res\n\ndef g(x=5, y=10):\n    total = 0\n    for num in range(x, y+1):\n        if num % 3 == 0:\n            total += num\n    return total\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 151,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(res: int, x=5, y=10) -> bool:\n    \"\"\"Find the sum of all numbers between x and y (inclusive) that are divisible by 3.\n    Sample Input:\n    `5, 10`\n    Sample Output:\n    `18`\"\"\"\n    total = 0\n    for num in range(x, y+1):\n        if num % 3 == 0:\n            total += num\n    return total == res",
        "solution_func": "def g(x=5, y=10):\n    total = 0\n    for num in range(x, y+1):\n        if num % 3 == 0:\n            total += num\n    return total",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, k=4, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find the index of the first occurrence of k consecutive numbers in the sequence that sum up to n.\"\"\"\n    return n in [sum(seq[i:i+k]) for i in range(len(seq)-k+1)]\ndef g(k=4, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    for i in range(len(seq)-k+1):\n        if sum(seq[i:i+k]) == 10:\n            return i\nassert f(g())\n",
        "emb": null,
        "idx_generation": 151,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, k=4, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find the index of the first occurrence of k consecutive numbers in the sequence that sum up to n.\"\"\"\n    return n in [sum(seq[i:i+k]) for i in range(len(seq)-k+1)]",
        "solution_func": "def g(k=4, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    for i in range(len(seq)-k+1):\n        if sum(seq[i:i+k]) == 10:\n            return i",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find the index of the first occurrence of two consecutive numbers in the sequence whose sum is equal to n.\"\"\"\n    return n in [seq[i] + seq[i+1] for i in range(len(seq)-1)]\ndef g(seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    for i in range(len(seq)-1):\n        if seq[i] + seq[i+1] == 10:\n            return i\nassert f(g())\n",
        "emb": null,
        "idx_generation": 151,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find the index of the first occurrence of two consecutive numbers in the sequence whose sum is equal to n.\"\"\"\n    return n in [seq[i] + seq[i+1] for i in range(len(seq)-1)]",
        "solution_func": "def g(seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    for i in range(len(seq)-1):\n        if seq[i] + seq[i+1] == 10:\n            return i",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, k=3, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find the index of the first occurrence of a subsequence of length k in the sequence that sums up to n.\"\"\"\n    def find_seq(n, k, seq, i):\n        if n == 0 and k == 0:\n            return True\n        if n != 0 and k == 0:\n            return False\n        if i == len(seq):\n            return False\n        return find_seq(n-seq[i], k-1, seq, i+1) or find_seq(n, k, seq, i+1)\n    return find_seq(n, k, seq, 0)\ndef g(k=3, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    for i in range(len(seq)-k+1):\n        if sum(seq[i:i+k]) == 10:\n            return i\nassert f(g())\n",
        "emb": null,
        "idx_generation": 151,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, k=3, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find the index of the first occurrence of a subsequence of length k in the sequence that sums up to n.\"\"\"\n    def find_seq(n, k, seq, i):\n        if n == 0 and k == 0:\n            return True\n        if n != 0 and k == 0:\n            return False\n        if i == len(seq):\n            return False\n        return find_seq(n-seq[i], k-1, seq, i+1) or find_seq(n, k, seq, i+1)\n    return find_seq(n, k, seq, 0)",
        "solution_func": "def g(k=3, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    for i in range(len(seq)-k+1):\n        if sum(seq[i:i+k]) == 10:\n            return i",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=5, threshold=0.5) -> bool:\n    \"\"\"Check if the mean of the array is greater than the target and if the standard deviation is less than the threshold\"\"\"\n    return np.mean(arr) > target and np.std(arr) < threshold\n\ndef g(target=5, threshold=0.5):\n    arr = np.random.random(100)\n    return arr\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 151,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=5, threshold=0.5) -> bool:\n    \"\"\"Check if the mean of the array is greater than the target and if the standard deviation is less than the threshold\"\"\"\n    return np.mean(arr) > target and np.std(arr) < threshold",
        "solution_func": "def g(target=5, threshold=0.5):\n    arr = np.random.random(100)\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport pandas as pd\n\ndef f(df: pd.DataFrame, col_name='age', min_age=18, max_age=30) -> bool:\n    \"\"\"Check if there are any values in a specific column of a dataframe that are outside the specified age range\"\"\"\n    return any((val < min_age or val > max_age for val in df[col_name]))\n\ndef g(col_name='age', min_age=18, max_age=30):\n    data = {'name': ['Alice', 'Bob', 'Charlie'],\n            'age': [25, 32, 20]}\n    df = pd.DataFrame(data)\n    return df\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 151,
        "target_skills": null,
        "problem_func": "from typing import*\nimport pandas as pd\n\ndef f(df: pd.DataFrame, col_name='age', min_age=18, max_age=30) -> bool:\n    \"\"\"Check if there are any values in a specific column of a dataframe that are outside the specified age range\"\"\"\n    return any((val < min_age or val > max_age for val in df[col_name]))",
        "solution_func": "def g(col_name='age', min_age=18, max_age=30):\n    data = {'name': ['Alice', 'Bob', 'Charlie'],\n            'age': [25, 32, 20]}\n    df = pd.DataFrame(data)\n    return df",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, year=2022, month=12, day=31) -> bool:\n    \"\"\"Check if the given date is the last day of the specified year and month\"\"\"\n    return date.year == year and date.month == month and date.day == day\n\ndef g(year=2022, month=12, day=31):\n    date = datetime.date(year, month, day)\n    return date\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 151,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, year=2022, month=12, day=31) -> bool:\n    \"\"\"Check if the given date is the last day of the specified year and month\"\"\"\n    return date.year == year and date.month == month and date.day == day",
        "solution_func": "def g(year=2022, month=12, day=31):\n    date = datetime.date(year, month, day)\n    return date",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=7, b=3) -> bool:\n    \"\"\"Check if x is a multiple of a and b.\"\"\"\n    return x % a == 0 and x % b == 0\ndef g(a=7, b=3):\n    return a * b\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 151,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=7, b=3) -> bool:\n    \"\"\"Check if x is a multiple of a and b.\"\"\"\n    return x % a == 0 and x % b == 0",
        "solution_func": "def g(a=7, b=3):\n    return a * b",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\n    \ndef g(nums=[10, 20, 30, 40, 50]):\n    return nums\n    \nassert f(g())\n",
        "emb": null,
        "idx_generation": 152,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(nums=[10, 20, 30, 40, 50]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a number in the list that is equal to the target\"\"\"\n    return target in nums\n    \ndef g(nums=[10, 20, 30, 40, 50]):\n    return nums\n    \nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 152,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a number in the list that is equal to the target\"\"\"\n    return target in nums",
        "solution_func": "def g(nums=[10, 20, 30, 40, 50]):\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport statistics\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if the average of the numbers in the list is equal to the target\"\"\"\n    return statistics.mean(nums) == target\n    \ndef g(nums=[10, 20, 30, 40, 50]):\n    return nums\n    \nassert f(g())\n",
        "emb": null,
        "idx_generation": 152,
        "target_skills": null,
        "problem_func": "from typing import*\nimport statistics\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if the average of the numbers in the list is equal to the target\"\"\"\n    return statistics.mean(nums) == target",
        "solution_func": "def g(nums=[10, 20, 30, 40, 50]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=100) -> bool:\n    \"\"\"Check if a number is a perfect square within a given range.\"\"\"\n    return a <= n <= b and int(n**0.5)**2 == n\ndef g(a=10, b=100):\n    for i in range(a, b+1):\n        if int(i**0.5)**2 == i:\n            return i\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 152,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=10, b=100) -> bool:\n    \"\"\"Check if a number is a perfect square within a given range.\"\"\"\n    return a <= n <= b and int(n**0.5)**2 == n",
        "solution_func": "def g(a=10, b=100):\n    for i in range(a, b+1):\n        if int(i**0.5)**2 == i:\n            return i",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=0, b=100) -> bool:\n    \"\"\"Check if a number is a prime number within a given range.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return a <= n <= b\ndef g(a=0, b=100):\n    for i in range(a, b+1):\n        if i < 2:\n            continue\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return i\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 152,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=0, b=100) -> bool:\n    \"\"\"Check if a number is a prime number within a given range.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return a <= n <= b",
        "solution_func": "def g(a=0, b=100):\n    for i in range(a, b+1):\n        if i < 2:\n            continue\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return i",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=1, b=100) -> bool:\n    \"\"\"Check if a number is a Fibonacci number within a given range.\"\"\"\n    fib_list = [0, 1]\n    while fib_list[-1] < b:\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    return a <= n <= b and n in fib_list\ndef g(a=1, b=100):\n    fib_list = [0, 1]\n    while fib_list[-1] < b:\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    for num in fib_list:\n        if a <= num <= b:\n            return num\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 152,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=1, b=100) -> bool:\n    \"\"\"Check if a number is a Fibonacci number within a given range.\"\"\"\n    fib_list = [0, 1]\n    while fib_list[-1] < b:\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    return a <= n <= b and n in fib_list",
        "solution_func": "def g(a=1, b=100):\n    fib_list = [0, 1]\n    while fib_list[-1] < b:\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    for num in fib_list:\n        if a <= num <= b:\n            return num",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(word: str, n=6, m=3) -> bool:\n    \"\"\"Find the word that is formed by concatenating the first n characters of each string in the list m times.\"\"\"\n    strings = ['apple', 'banana', 'cherry', 'date', 'elderberry']\n    concat_word = ''\n    for s in strings:\n        concat_word += s[:n]\n    return word == concat_word * m\n\ndef g(n=6, m=3):\n    strings = ['apple', 'banana', 'cherry', 'date', 'elderberry']\n    concat_word = ''\n    for s in strings:\n        concat_word += s[:n]\n    return concat_word\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 152,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str, n=6, m=3) -> bool:\n    \"\"\"Find the word that is formed by concatenating the first n characters of each string in the list m times.\"\"\"\n    strings = ['apple', 'banana', 'cherry', 'date', 'elderberry']\n    concat_word = ''\n    for s in strings:\n        concat_word += s[:n]\n    return word == concat_word * m",
        "solution_func": "def g(n=6, m=3):\n    strings = ['apple', 'banana', 'cherry', 'date', 'elderberry']\n    concat_word = ''\n    for s in strings:\n        concat_word += s[:n]\n    return concat_word",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], threshold=50) -> bool:\n    \"\"\"Find the sum of all even numbers in the matrix that are greater than the threshold.\"\"\"\n    even_sum = 0\n    for row in matrix:\n        for num in row:\n            if num > threshold and num % 2 == 0:\n                even_sum += num\n    return even_sum\n\ndef g(threshold=50):\n    matrix = [[72, 35, 48, 23, 56], [11, 62, 43, 89, 72], [21, 64, 18, 77, 58], [45, 37, 14, 67, 95]]\n    even_sum = 0\n    for row in matrix:\n        for num in row:\n            if num > threshold and num % 2 == 0:\n                even_sum += num\n    return even_sum\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 152,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], threshold=50) -> bool:\n    \"\"\"Find the sum of all even numbers in the matrix that are greater than the threshold.\"\"\"\n    even_sum = 0\n    for row in matrix:\n        for num in row:\n            if num > threshold and num % 2 == 0:\n                even_sum += num\n    return even_sum",
        "solution_func": "def g(threshold=50):\n    matrix = [[72, 35, 48, 23, 56], [11, 62, 43, 89, 72], [21, 64, 18, 77, 58], [45, 37, 14, 67, 95]]\n    even_sum = 0\n    for row in matrix:\n        for num in row:\n            if num > threshold and num % 2 == 0:\n                even_sum += num\n    return even_sum",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find the product of the two numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return nums[i] * nums[j]\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return nums[i] * nums[j]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 152,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find the product of the two numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return nums[i] * nums[j]",
        "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return nums[i] * nums[j]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    return n in primes\ndef g(n=67):\n    return n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 152,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    return n in primes",
        "solution_func": "def g(n=67):\n    return n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, s='apple', t='banana') -> bool:\n    \"\"\"Check if s and t are anagrams of each other.\"\"\"\n    return sorted(s.lower()) == sorted(t.lower())\ndef g(s='apple', t='banana'):\n    return s[::-1]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 153,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, s='apple', t='banana') -> bool:\n    \"\"\"Check if s and t are anagrams of each other.\"\"\"\n    return sorted(s.lower()) == sorted(t.lower())",
        "solution_func": "def g(s='apple', t='banana'):\n    return s[::-1]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, n=3) -> bool:\n    \"\"\"Check if a string x is a palindrome of length n.\"\"\"\n    return x == x[::-1] and len(x) == n\ndef g(n=3):\n    return str(n) * n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 153,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, n=3) -> bool:\n    \"\"\"Check if a string x is a palindrome of length n.\"\"\"\n    return x == x[::-1] and len(x) == n",
        "solution_func": "def g(n=3):\n    return str(n) * n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, y: str) -> bool:\n    \"\"\"Check if x and y are anagrams of each other.\"\"\"\n    return sorted(x.lower()) == sorted(y.lower())\ndef g():\n    return 'listen', 'silent'\nassert f(*g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 153,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, y: str) -> bool:\n    \"\"\"Check if x and y are anagrams of each other.\"\"\"\n    return sorted(x.lower()) == sorted(y.lower())",
        "solution_func": "def g():\n    return 'listen', 'silent'",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a pair of distinct numbers from the list 'nums' whose sum is equal to the product of the other two numbers.\"\"\"\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if i != j:\n                if nums[i] + nums[j] == nums[i] * nums[j]:\n                    return True\n    return False\ndef g():\n    return [1, 2, 3, 4]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 153,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a pair of distinct numbers from the list 'nums' whose sum is equal to the product of the other two numbers.\"\"\"\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if i != j:\n                if nums[i] + nums[j] == nums[i] * nums[j]:\n                    return True\n    return False",
        "solution_func": "def g():\n    return [1, 2, 3, 4]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"Find a pair of words from the list 'words' such that the first word is a substring of the second word.\"\"\"\n    for i in range(len(words)):\n        for j in range(len(words)):\n            if i != j:\n                if words[i] in words[j]:\n                    return True\n    return False\ndef g():\n    return [\"cat\", \"bat\", \"hat\"]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 153,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"Find a pair of words from the list 'words' such that the first word is a substring of the second word.\"\"\"\n    for i in range(len(words)):\n        for j in range(len(words)):\n            if i != j:\n                if words[i] in words[j]:\n                    return True\n    return False",
        "solution_func": "def g():\n    return [\"cat\", \"bat\", \"hat\"]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a square matrix 'matrix', find a pair of distinct rows that have the same sum of elements.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix)):\n            if i != j:\n                if sum(matrix[i]) == sum(matrix[j]):\n                    return True\n    return False\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 153,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a square matrix 'matrix', find a pair of distinct rows that have the same sum of elements.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix)):\n            if i != j:\n                if sum(matrix[i]) == sum(matrix[j]):\n                    return True\n    return False",
        "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char_count=3) -> bool:\n    \"\"\"Check if the given string has exactly char_count occurrences of a specific character\"\"\"\n    return s.count('a') == char_count\ndef g(char_count=3):\n    return 'a' * char_count + 'b'\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 153,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char_count=3) -> bool:\n    \"\"\"Check if the given string has exactly char_count occurrences of a specific character\"\"\"\n    return s.count('a') == char_count",
        "solution_func": "def g(char_count=3):\n    return 'a' * char_count + 'b'",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, digits_sum=10) -> bool:\n    \"\"\"Check if the sum of the digits of n is equal to digits_sum\"\"\"\n    return sum([int(d) for d in str(n)]) == digits_sum\ndef g(digits_sum=10):\n    return int('9' * (digits_sum // 9) + str(digits_sum % 9))\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 153,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, digits_sum=10) -> bool:\n    \"\"\"Check if the sum of the digits of n is equal to digits_sum\"\"\"\n    return sum([int(d) for d in str(n)]) == digits_sum",
        "solution_func": "def g(digits_sum=10):\n    return int('9' * (digits_sum // 9) + str(digits_sum % 9))",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, prime_factors=[2, 3, 5]) -> bool:\n    \"\"\"Check if n is divisible by all prime factors in prime_factors list\"\"\"\n    for factor in prime_factors:\n        if n % factor != 0:\n            return False\n    return True\ndef g(prime_factors=[2, 3, 5]):\n    return prime_factors[0] * prime_factors[1] * prime_factors[2]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 153,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, prime_factors=[2, 3, 5]) -> bool:\n    \"\"\"Check if n is divisible by all prime factors in prime_factors list\"\"\"\n    for factor in prime_factors:\n        if n % factor != 0:\n            return False\n    return True",
        "solution_func": "def g(prime_factors=[2, 3, 5]):\n    return prime_factors[0] * prime_factors[1] * prime_factors[2]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=100, a=5, b=10) -> bool:\n    \"\"\"Check if the list contains a subsequence that sums up to a given value.\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if sum(x[i:j+1]) == n:\n                return True\n    return False\n\ndef g(n=100, a=5, b=10):\n    return list(range(a, b+1)) * (n//(b-a+1)) + list(range(a, a+(n%(b-a+1))))\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 153,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=100, a=5, b=10) -> bool:\n    \"\"\"Check if the list contains a subsequence that sums up to a given value.\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if sum(x[i:j+1]) == n:\n                return True\n    return False",
        "solution_func": "def g(n=100, a=5, b=10):\n    return list(range(a, b+1)) * (n//(b-a+1)) + list(range(a, a+(n%(b-a+1))))",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, days=10) -> bool:\n    \"\"\"Check if the given date is in the future by a certain number of days\"\"\"\n    return dt > datetime.datetime.now() + datetime.timedelta(days=days)\n\ndef g(days=10):\n    return datetime.datetime.now() + datetime.timedelta(days=days)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 154,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, days=10) -> bool:\n    \"\"\"Check if the given date is in the future by a certain number of days\"\"\"\n    return dt > datetime.datetime.now() + datetime.timedelta(days=days)",
        "solution_func": "def g(days=10):\n    return datetime.datetime.now() + datetime.timedelta(days=days)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(num: int, target=5) -> bool:\n    \"\"\"Check if the given number is within a certain range\"\"\"\n    return target - 2 <= num <= target + 2\n\ndef g(target=5):\n    return random.randint(target-2, target+2)\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 154,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(num: int, target=5) -> bool:\n    \"\"\"Check if the given number is within a certain range\"\"\"\n    return target - 2 <= num <= target + 2",
        "solution_func": "def g(target=5):\n    return random.randint(target-2, target+2)",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\nimport math\n\ndef f(num: int, power=3) -> bool:\n    \"\"\"Check if the given number is a perfect cube\"\"\"\n    return math.isqrt(num) ** 3 == num\n\ndef g(power=3):\n    num = random.randint(1, 100)\n    return num ** power\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 154,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\nimport math\n\ndef f(num: int, power=3) -> bool:\n    \"\"\"Check if the given number is a perfect cube\"\"\"\n    return math.isqrt(num) ** 3 == num",
        "solution_func": "def g(power=3):\n    num = random.randint(1, 100)\n    return num ** power",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to n\"\"\"\n    return any(n - num in nums for num in nums)\ndef g(nums=[1, 2, 3, 4, 5]):\n    import random\n    r = random.Random(0)\n    return r.choice(nums), r.choice(nums)\nassert f(g()[0])\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 154,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to n\"\"\"\n    return any(n - num in nums for num in nums)",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    import random\n    r = random.Random(0)\n    return r.choice(nums), r.choice(nums)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subarray of nums that sums up to target\"\"\"\n    return any(sum(nums[i:j]) == target for i in range(len(nums)) for j in range(i+1, len(nums)+1))\ndef g():\n    import random\n    r = random.Random(0)\n    return [r.randint(1, 10) for _ in range(5)], r.randint(1, 20)\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 154,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subarray of nums that sums up to target\"\"\"\n    return any(sum(nums[i:j]) == target for i in range(len(nums)) for j in range(i+1, len(nums)+1))",
        "solution_func": "def g():\n    import random\n    r = random.Random(0)\n    return [r.randint(1, 10) for _ in range(5)], r.randint(1, 20)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a submatrix in the matrix that sums up to target\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(j, cols):\n                    submatrix = [matrix[x][y] for x in range(i, k+1) for y in range(j, l+1)]\n                    if sum(submatrix) == target:\n                        return True\n    return False\ndef g():\n    import random\n    r = random.Random(0)\n    return [[r.randint(-10, 10) for _ in range(3)] for _ in range(3)], r.randint(-20, 20)\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 154,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a submatrix in the matrix that sums up to target\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(j, cols):\n                    submatrix = [matrix[x][y] for x in range(i, k+1) for y in range(j, l+1)]\n                    if sum(submatrix) == target:\n                        return True\n    return False",
        "solution_func": "def g():\n    import random\n    r = random.Random(0)\n    return [[r.randint(-10, 10) for _ in range(3)] for _ in range(3)], r.randint(-20, 20)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, determine if there exists a pair of numbers whose sum is equal to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 154,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, determine if there exists a pair of numbers whose sum is equal to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub='abc') -> bool:\n    \"\"\"Given a string, determine if there exists a substring that is equal to a given subsequence.\"\"\"\n    return any((sub in s[i:] for i in range(len(s) - len(sub) + 1)))\ndef g(sub='abc'):\n    return sub\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 154,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, sub='abc') -> bool:\n    \"\"\"Given a string, determine if there exists a substring that is equal to a given subsequence.\"\"\"\n    return any((sub in s[i:] for i in range(len(s) - len(sub) + 1)))",
        "solution_func": "def g(sub='abc'):\n    return sub",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Given a list of integers, determine if there exists a pair of numbers whose difference is equal to the given value k.\"\"\"\n    return any((abs(nums[i] - nums[j]) == k for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums=[1, 5, 3, 8, 2, 7, 4]):\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 154,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Given a list of integers, determine if there exists a pair of numbers whose difference is equal to the given value k.\"\"\"\n    return any((abs(nums[i] - nums[j]) == k for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(nums=[1, 5, 3, 8, 2, 7, 4]):\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Find two numbers in the array that add up to the target sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=10):\n    return [2, 8, 5, 3, 1, 6, 9]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 154,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Find two numbers in the array that add up to the target sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=10):\n    return [2, 8, 5, 3, 1, 6, 9]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=7, min_val=2) -> bool:\n    \"\"\"Find if there exists a submatrix in a given matrix such that the sum of all elements in the submatrix is greater than or equal to a target value\"\"\"\n    submatrix_sums = []\n    for i in range(matrix.shape[0]):\n        for j in range(matrix.shape[1]):\n            for k in range(i, matrix.shape[0]):\n                for l in range(j, matrix.shape[1]):\n                    submatrix = matrix[i:k+1, j:l+1]\n                    submatrix_sum = np.sum(submatrix)\n                    submatrix_sums.append(submatrix_sum)\n    return any(submatrix_sum >= target for submatrix_sum in submatrix_sums) and np.min(matrix) >= min_val\n\ndef g(target=7, min_val=2):\n    matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 155,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=7, min_val=2) -> bool:\n    \"\"\"Find if there exists a submatrix in a given matrix such that the sum of all elements in the submatrix is greater than or equal to a target value\"\"\"\n    submatrix_sums = []\n    for i in range(matrix.shape[0]):\n        for j in range(matrix.shape[1]):\n            for k in range(i, matrix.shape[0]):\n                for l in range(j, matrix.shape[1]):\n                    submatrix = matrix[i:k+1, j:l+1]\n                    submatrix_sum = np.sum(submatrix)\n                    submatrix_sums.append(submatrix_sum)\n    return any(submatrix_sum >= target for submatrix_sum in submatrix_sums) and np.min(matrix) >= min_val",
        "solution_func": "def g(target=7, min_val=2):\n    matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target_sum=10, num_elements=3) -> bool:\n    \"\"\"Find if there exists a combination of a given number of elements in a list that adds up to a target sum\"\"\"\n    from itertools import combinations\n    for combination in combinations(numbers, num_elements):\n        if sum(combination) == target_sum:\n            return True\n    return False\n\ndef g(target_sum=10, num_elements=3):\n    numbers = [1, 2, 3, 4, 5]\n    return numbers\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 155,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target_sum=10, num_elements=3) -> bool:\n    \"\"\"Find if there exists a combination of a given number of elements in a list that adds up to a target sum\"\"\"\n    from itertools import combinations\n    for combination in combinations(numbers, num_elements):\n        if sum(combination) == target_sum:\n            return True\n    return False",
        "solution_func": "def g(target_sum=10, num_elements=3):\n    numbers = [1, 2, 3, 4, 5]\n    return numbers",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(password: str, num_attempts=5) -> bool:\n    \"\"\"Find if a given password can be guessed correctly within a certain number of attempts\"\"\"\n    for _ in range(num_attempts):\n        guess = ''.join(random.choices('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=len(password)))\n        if guess == password:\n            return True\n    return False\n\ndef g(num_attempts=5):\n    password = 'Password123'\n    return password\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 155,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(password: str, num_attempts=5) -> bool:\n    \"\"\"Find if a given password can be guessed correctly within a certain number of attempts\"\"\"\n    for _ in range(num_attempts):\n        guess = ''.join(random.choices('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=len(password)))\n        if guess == password:\n            return True\n    return False",
        "solution_func": "def g(num_attempts=5):\n    password = 'Password123'\n    return password",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=5, y=10) -> bool:\n    \"\"\"Check if the given number is a perfect square and lies within the range [x, y]\"\"\"\n    return math.isqrt(n)**2 == n and x <= n <= y\n\ndef g(x=5, y=10):\n    return [i**2 for i in range(int(math.sqrt(x)), int(math.sqrt(y))+1)]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 155,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=5, y=10) -> bool:\n    \"\"\"Check if the given number is a perfect square and lies within the range [x, y]\"\"\"\n    return math.isqrt(n)**2 == n and x <= n <= y",
        "solution_func": "def g(x=5, y=10):\n    return [i**2 for i in range(int(math.sqrt(x)), int(math.sqrt(y))+1)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of distinct numbers in the array that sum up to the target\"\"\"\n    return any((True for i in range(len(arr)) for j in range(i+1, len(arr)) if arr[i] + arr[j] == target))\n\ndef g(target=10):\n    arr = random.sample(range(1, 20), 10)\n    return arr\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 155,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of distinct numbers in the array that sum up to the target\"\"\"\n    return any((True for i in range(len(arr)) for j in range(i+1, len(arr)) if arr[i] + arr[j] == target))",
        "solution_func": "def g(target=10):\n    arr = random.sample(range(1, 20), 10)\n    return arr",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, days=5) -> bool:\n    \"\"\"Check if the given date is a Friday and falls within the next 'days' days\"\"\"\n    return dt.weekday() == 4 and (dt + datetime.timedelta(days=days)).weekday() == 4\n\ndef g(days=5):\n    return datetime.datetime.now() + datetime.timedelta(days=days)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 155,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, days=5) -> bool:\n    \"\"\"Check if the given date is a Friday and falls within the next 'days' days\"\"\"\n    return dt.weekday() == 4 and (dt + datetime.timedelta(days=days)).weekday() == 4",
        "solution_func": "def g(days=5):\n    return datetime.datetime.now() + datetime.timedelta(days=days)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10, k=3) -> bool:\n    \"\"\"Find k numbers in a list that sum up to the target value.\"\"\"\n    def backtrack(curr_sum, curr_nums, start):\n        if curr_sum == target and len(curr_nums) == k:\n            return True\n        if curr_sum > target or len(curr_nums) > k:\n            return False\n        for i in range(start, len(nums)):\n            if backtrack(curr_sum + nums[i], curr_nums + [nums[i]], i + 1):\n                return True\n        return False\n    return backtrack(0, [], 0)\ndef g(nums=[2, 4, 6, 8, 10, 12]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 155,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10, k=3) -> bool:\n    \"\"\"Find k numbers in a list that sum up to the target value.\"\"\"\n    def backtrack(curr_sum, curr_nums, start):\n        if curr_sum == target and len(curr_nums) == k:\n            return True\n        if curr_sum > target or len(curr_nums) > k:\n            return False\n        for i in range(start, len(nums)):\n            if backtrack(curr_sum + nums[i], curr_nums + [nums[i]], i + 1):\n                return True\n        return False\n    return backtrack(0, [], 0)",
        "solution_func": "def g(nums=[2, 4, 6, 8, 10, 12]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find a path in a matrix that sums up to the target value.\"\"\"\n    def backtrack(curr_sum, i, j):\n        if curr_sum == target:\n            return True\n        if i >= len(matrix) or j >= len(matrix[0]) or curr_sum > target:\n            return False\n        return backtrack(curr_sum + matrix[i][j], i + 1, j) or backtrack(curr_sum + matrix[i][j], i, j + 1)\n    return backtrack(0, 0, 0)\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 155,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find a path in a matrix that sums up to the target value.\"\"\"\n    def backtrack(curr_sum, i, j):\n        if curr_sum == target:\n            return True\n        if i >= len(matrix) or j >= len(matrix[0]) or curr_sum > target:\n            return False\n        return backtrack(curr_sum + matrix[i][j], i + 1, j) or backtrack(curr_sum + matrix[i][j], i, j + 1)\n    return backtrack(0, 0, 0)",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there are three numbers in a list that sum up to the target value.\"\"\"\n    def backtrack(curr_sum, curr_nums, start):\n        if curr_sum == target and len(curr_nums) == 3:\n            return True\n        if curr_sum > target or len(curr_nums) > 3:\n            return False\n        for i in range(start, len(nums)):\n            if backtrack(curr_sum + nums[i], curr_nums + [nums[i]], i + 1):\n                return True\n        return False\n    return backtrack(0, [], 0)\ndef g(nums=[5, 10, 15, 20, 25]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 155,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there are three numbers in a list that sum up to the target value.\"\"\"\n    def backtrack(curr_sum, curr_nums, start):\n        if curr_sum == target and len(curr_nums) == 3:\n            return True\n        if curr_sum > target or len(curr_nums) > 3:\n            return False\n        for i in range(start, len(nums)):\n            if backtrack(curr_sum + nums[i], curr_nums + [nums[i]], i + 1):\n                return True\n        return False\n    return backtrack(0, [], 0)",
        "solution_func": "def g(nums=[5, 10, 15, 20, 25]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=2.718281828459045) -> bool:\n    \"\"\"Check if x is the square root of a\"\"\"\n    return math.isclose(x**2, a)\n    \ndef g(a=2.718281828459045):\n    return math.sqrt(a)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 155,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=2.718281828459045) -> bool:\n    \"\"\"Check if x is the square root of a\"\"\"\n    return math.isclose(x**2, a)",
        "solution_func": "def g(a=2.718281828459045):\n    return math.sqrt(a)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, find two numbers such that they add up to a specific target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target: int):\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g(), target=9)\n",
        "emb": null,
        "idx_generation": 156,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, find two numbers such that they add up to a specific target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target: int):\n    nums = [1, 2, 3, 4, 5]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix of integers, determine if it is a toeplitz matrix. A Toeplitz matrix is one where every\n    diagonal from top-left to bottom-right has the same element.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    for i in range(rows - 1):\n        for j in range(cols - 1):\n            if matrix[i][j] != matrix[i+1][j+1]:\n                return False\n    return True\n\ndef g():\n    matrix = [[1, 2, 3, 4],\n              [5, 1, 2, 3],\n              [9, 5, 1, 2]]\n    return matrix\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 156,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix of integers, determine if it is a toeplitz matrix. A Toeplitz matrix is one where every\n    diagonal from top-left to bottom-right has the same element.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    for i in range(rows - 1):\n        for j in range(cols - 1):\n            if matrix[i][j] != matrix[i+1][j+1]:\n                return False\n    return True",
        "solution_func": "def g():\n    matrix = [[1, 2, 3, 4],\n              [5, 1, 2, 3],\n              [9, 5, 1, 2]]\n    return matrix",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Determine if a number is a perfect square.\"\"\"\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    left = 1\n    right = n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n\ndef g():\n    return 16\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 156,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Determine if a number is a perfect square.\"\"\"\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    left = 1\n    right = n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False",
        "solution_func": "def g():\n    return 16",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the given string contains all the characters of the target string in order, without skipping any characters.\"\"\"\n    return target in s\ndef g(target='python'):\n    return ''.join([c for c in target])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 156,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the given string contains all the characters of the target string in order, without skipping any characters.\"\"\"\n    return target in s",
        "solution_func": "def g(target='python'):\n    return ''.join([c for c in target])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there are exactly k consecutive numbers in the given list.\"\"\"\n    return any(all(nums[i+j] == nums[i]+j for j in range(k)) for i in range(len(nums)-k+1))\ndef g(k=3):\n    return list(range(1, 10))\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 156,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there are exactly k consecutive numbers in the given list.\"\"\"\n    return any(all(nums[i+j] == nums[i]+j for j in range(k)) for i in range(len(nums)-k+1))",
        "solution_func": "def g(k=3):\n    return list(range(1, 10))",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"Check if the target number is present in any row or column of the given matrix.\"\"\"\n    return any(target in row or target in col for row in matrix for col in zip(*matrix))\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 156,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"Check if the target number is present in any row or column of the given matrix.\"\"\"\n    return any(target in row or target in col for row in matrix for col in zip(*matrix))",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a list of numbers whose product is equal to the target\"\"\"\n    return math.prod(numbers) == target\n\ndef g(target=10):\n    return [2, 5]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 156,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a list of numbers whose product is equal to the target\"\"\"\n    return math.prod(numbers) == target",
        "solution_func": "def g(target=10):\n    return [2, 5]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a list of numbers whose sum is equal to the target\"\"\"\n    return sum(numbers) == target\n\ndef g(target=100):\n    return random.choices(range(1, 101), k=10)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 156,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a list of numbers whose sum is equal to the target\"\"\"\n    return sum(numbers) == target",
        "solution_func": "def g(target=100):\n    return random.choices(range(1, 101), k=10)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, substring='code') -> bool:\n    \"\"\"Find if a given substring is a palindrome\"\"\"\n    return substring == substring[::-1]\n\ndef g(substring='code'):\n    return substring\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 156,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='code') -> bool:\n    \"\"\"Find if a given substring is a palindrome\"\"\"\n    return substring == substring[::-1]",
        "solution_func": "def g(substring='code'):\n    return substring",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=\"racecar\") -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1] and s == target\ndef g(target=\"racecar\"):\n    return target\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 156,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=\"racecar\") -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1] and s == target",
        "solution_func": "def g(target=\"racecar\"):\n    return target",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target_sum=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in num_list that sum up to target_sum\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 157,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num_list: List[int], target_sum=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in num_list that sum up to target_sum\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word='Python') -> bool:\n    \"\"\"Check if target_word is an anagram of any word in words list\"\"\"\n    sorted_target = ''.join(sorted(target_word.lower()))\n    for word in words:\n        sorted_word = ''.join(sorted(word.lower()))\n        if sorted_word == sorted_target:\n            return True\n    return False\n\ndef g(target_word='Python'):\n    return ['Python', 'Java', 'Ruby', 'C++', 'PHP']\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 157,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target_word='Python') -> bool:\n    \"\"\"Check if target_word is an anagram of any word in words list\"\"\"\n    sorted_target = ''.join(sorted(target_word.lower()))\n    for word in words:\n        sorted_word = ''.join(sorted(word.lower()))\n        if sorted_word == sorted_target:\n            return True\n    return False",
        "solution_func": "def g(target_word='Python'):\n    return ['Python', 'Java', 'Ruby', 'C++', 'PHP']",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=50) -> bool:\n    \"\"\"Check if any row or column in the matrix has a sum equal to target_sum\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(matrix[i][j] for i in range(n)) for j in range(m)]\n    if target_sum in row_sums or target_sum in col_sums:\n        return True\n    return False\n\ndef g(target_sum=50):\n    return [\n        [10, 20, 30],\n        [5, 15, 25],\n        [40, 10, 0]\n    ]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 157,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=50) -> bool:\n    \"\"\"Check if any row or column in the matrix has a sum equal to target_sum\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(matrix[i][j] for i in range(n)) for j in range(m)]\n    if target_sum in row_sums or target_sum in col_sums:\n        return True\n    return False",
        "solution_func": "def g(target_sum=50):\n    return [\n        [10, 20, 30],\n        [5, 15, 25],\n        [40, 10, 0]\n    ]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, power=3, result=27) -> bool:\n    \"\"\"Find a number that when raised to a certain power gives a specific result.\"\"\"\n    return x ** power == result\ndef g(power=3, result=27):\n    return int(result ** (1/power))\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 157,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, power=3, result=27) -> bool:\n    \"\"\"Find a number that when raised to a certain power gives a specific result.\"\"\"\n    return x ** power == result",
        "solution_func": "def g(power=3, result=27):\n    return int(result ** (1/power))",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(items: List[str], target='python') -> bool:\n    \"\"\"Check if a specific item is present in a list.\"\"\"\n    return target in items\ndef g(target='python'):\n    return [target]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 157,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(items: List[str], target='python') -> bool:\n    \"\"\"Check if a specific item is present in a list.\"\"\"\n    return target in items",
        "solution_func": "def g(target='python'):\n    return [target]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a list that when added together give a certain target sum.\"\"\"\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i+1, n):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, target-1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 157,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a list that when added together give a certain target sum.\"\"\"\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i+1, n):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, target-1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=1000) -> bool:\n    \"\"\"Find a subset of numbers that add up to a target value\"\"\"\n    return sum(nums) == target\ndef g(target=1000):\n    return [target]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 157,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=1000) -> bool:\n    \"\"\"Find a subset of numbers that add up to a target value\"\"\"\n    return sum(nums) == target",
        "solution_func": "def g(target=1000):\n    return [target]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"Check if a target word is an anagram of any of the given words\"\"\"\n    sorted_target = sorted(target_word)\n    for word in words:\n        if sorted(word) == sorted_target:\n            return True\n    return False\ndef g(target_word='python'):\n    return ['typhon', 'jython', 'notanagram']\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 157,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"Check if a target word is an anagram of any of the given words\"\"\"\n    sorted_target = sorted(target_word)\n    for word in words:\n        if sorted(word) == sorted_target:\n            return True\n    return False",
        "solution_func": "def g(target_word='python'):\n    return ['typhon', 'jython', 'notanagram']",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find a path from the top left corner to the bottom right corner in the matrix,\n    where the sum of values in the path is equal to the target\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    dp = [[0] * n for _ in range(m)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = matrix[i][j] + max(dp[i-1][j], dp[i][j-1])\n    return dp[m-1][n-1] == target\ndef g(target=100):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 157,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find a path from the top left corner to the bottom right corner in the matrix,\n    where the sum of values in the path is equal to the target\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    dp = [[0] * n for _ in range(m)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = matrix[i][j] + max(dp[i-1][j], dp[i][j-1])\n    return dp[m-1][n-1] == target",
        "solution_func": "def g(target=100):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=100, b=200, c=300) -> bool:\n    \"\"\"Check if x is between the sum of a and b, and the product of b and c.\"\"\"\n    return a + b < x < b * c\ndef g(a=100, b=200, c=300):\n    return (a + b + b * c) // 2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 157,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=100, b=200, c=300) -> bool:\n    \"\"\"Check if x is between the sum of a and b, and the product of b and c.\"\"\"\n    return a + b < x < b * c",
        "solution_func": "def g(a=100, b=200, c=300):\n    return (a + b + b * c) // 2",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='hello', b='world') -> bool:\n    \"\"\"Check if s is a concatenation of strings a and b\"\"\"\n    return s == a + b\ndef g(a='hello', b='world'):\n    return a + b\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 158,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, a='hello', b='world') -> bool:\n    \"\"\"Check if s is a concatenation of strings a and b\"\"\"\n    return s == a + b",
        "solution_func": "def g(a='hello', b='world'):\n    return a + b",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=15) -> bool:\n    \"\"\"Check if there are two elements in arr that add up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 158,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=15) -> bool:\n    \"\"\"Check if there are two elements in arr that add up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, c='a') -> bool:\n    \"\"\"Check if character c is the first character of string s\"\"\"\n    return s[0] == c\ndef g(c='a'):\n    return c + 'bcdefghijklmnopqrstuvwxyz'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 158,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, c='a') -> bool:\n    \"\"\"Check if character c is the first character of string s\"\"\"\n    return s[0] == c",
        "solution_func": "def g(c='a'):\n    return c + 'bcdefghijklmnopqrstuvwxyz'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if n is a multiple of any number in the list nums.\"\"\"\n    return any(n % num == 0 for num in nums)\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return random.choice(nums)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 158,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if n is a multiple of any number in the list nums.\"\"\"\n    return any(n % num == 0 for num in nums)",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return random.choice(nums)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\nimport math\n\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Check if n can be expressed as the sum of squares of a and b.\"\"\"\n    return n == a**2 + b**2\n\ndef g(a=2, b=3):\n    return math.sqrt(random.randint(1, 100))\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 158,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\nimport math\n\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Check if n can be expressed as the sum of squares of a and b.\"\"\"\n    return n == a**2 + b**2",
        "solution_func": "def g(a=2, b=3):\n    return math.sqrt(random.randint(1, 100))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=3, char='o') -> bool:\n    \"\"\"Check if the character char appears exactly n times in the string.\"\"\"\n    return string.count(char) == n\n\ndef g(n=3, char='o'):\n    return char * n\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 158,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, n=3, char='o') -> bool:\n    \"\"\"Check if the character char appears exactly n times in the string.\"\"\"\n    return string.count(char) == n",
        "solution_func": "def g(n=3, char='o'):\n    return char * n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n=3) -> bool:\n    \"\"\"Given a list of integers and a number n, determine if the sum of the first n elements of the list is equal to the given result\"\"\"\n    return sum(lst[:n]) == result\n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n=3):\n    return sum(lst[:n])\n\nassert f(g(), lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n=3)\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 158,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(result: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n=3) -> bool:\n    \"\"\"Given a list of integers and a number n, determine if the sum of the first n elements of the list is equal to the given result\"\"\"\n    return sum(lst[:n]) == result",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n=3):\n    return sum(lst[:n])",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n=3) -> bool:\n    \"\"\"Given a list of integers and a number n, determine if the sum of the first n elements of the list is equal to the given result\"\"\"\n    return sum(lst[:n]) == result\n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n=3):\n    return sum(lst[:n])\n\nassert f(g(), lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n=3)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 158,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(result: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n=3) -> bool:\n    \"\"\"Given a list of integers and a number n, determine if the sum of the first n elements of the list is equal to the given result\"\"\"\n    return sum(lst[:n]) == result",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n=3):\n    return sum(lst[:n])",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(palindrome: str, s=\"racecar\") -> bool:\n    \"\"\"Given a string, determine if it is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g(s=\"racecar\"):\n    return s\n\nassert f(g(), s=\"racecar\")\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 158,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(palindrome: str, s=\"racecar\") -> bool:\n    \"\"\"Given a string, determine if it is a palindrome\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g(s=\"racecar\"):\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find a subset of nums that adds up to target_sum\"\"\"\n    def subset_sum(nums, target_sum):\n        n = len(nums)\n        dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            dp[i][0] = True\n        for i in range(1, n + 1):\n            for j in range(1, target_sum + 1):\n                if nums[i - 1] <= j:\n                    dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[n][target_sum]\n    return subset_sum(nums, target_sum)\ndef g(target_sum=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 158,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find a subset of nums that adds up to target_sum\"\"\"\n    def subset_sum(nums, target_sum):\n        n = len(nums)\n        dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            dp[i][0] = True\n        for i in range(1, n + 1):\n            for j in range(1, target_sum + 1):\n                if nums[i - 1] <= j:\n                    dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[n][target_sum]\n    return subset_sum(nums, target_sum)",
        "solution_func": "def g(target_sum=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=15) -> bool:\n    \"\"\"Find a matrix where the sum of each row and column is equal to the target\"\"\"\n    row_sums = np.sum(matrix, axis=1)\n    col_sums = np.sum(matrix, axis=0)\n    return np.all(row_sums == target) and np.all(col_sums == target)\n\ndef g(target=15):\n    matrix = np.zeros((3, 3))\n    for i in range(3):\n        for j in range(3):\n            matrix[i][j] = target // 3\n    return matrix\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 159,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=15) -> bool:\n    \"\"\"Find a matrix where the sum of each row and column is equal to the target\"\"\"\n    row_sums = np.sum(matrix, axis=1)\n    col_sums = np.sum(matrix, axis=0)\n    return np.all(row_sums == target) and np.all(col_sums == target)",
        "solution_func": "def g(target=15):\n    matrix = np.zeros((3, 3))\n    for i in range(3):\n        for j in range(3):\n            matrix[i][j] = target // 3\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport itertools\n\ndef f(pairs: list, target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that sums up to the target\"\"\"\n    return any(x + y == target for x, y in pairs)\n\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5]\n    return list(itertools.combinations(numbers, 2))\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 159,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\n\ndef f(pairs: list, target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that sums up to the target\"\"\"\n    return any(x + y == target for x, y in pairs)",
        "solution_func": "def g(target=10):\n    numbers = [1, 2, 3, 4, 5]\n    return list(itertools.combinations(numbers, 2))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, pattern='abc') -> bool:\n    \"\"\"Find a substring in the string that matches the pattern\"\"\"\n    return pattern in string\n\ndef g(pattern='abc'):\n    string = 'abcdabcabcde'\n    return string\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 159,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, pattern='abc') -> bool:\n    \"\"\"Find a substring in the string that matches the pattern\"\"\"\n    return pattern in string",
        "solution_func": "def g(pattern='abc'):\n    string = 'abcdabcabcde'\n    return string",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the given string s contains all the characters in the target string in the same order.\"\"\"\n    target_index = 0\n    for char in s:\n        if char == target[target_index]:\n            target_index += 1\n        if target_index == len(target):\n            return True\n    return False\ndef g(target='python'):\n    s = 'abcdefghijklmnop' + target + 'qrstuvwxyz'\n    return s\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 159,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the given string s contains all the characters in the target string in the same order.\"\"\"\n    target_index = 0\n    for char in s:\n        if char == target[target_index]:\n            target_index += 1\n        if target_index == len(target):\n            return True\n    return False",
        "solution_func": "def g(target='python'):\n    s = 'abcdefghijklmnop' + target + 'qrstuvwxyz'\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of integers contains any duplicate numbers.\"\"\"\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return True\n        num_set.add(num)\n    return False\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 159,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of integers contains any duplicate numbers.\"\"\"\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return True\n        num_set.add(num)\n    return False",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, pattern='abc') -> bool:\n    \"\"\"Check if the given string s contains the given pattern string in a repeating manner.\"\"\"\n    pattern_index = 0\n    for char in s:\n        if char == pattern[pattern_index]:\n            pattern_index += 1\n        if pattern_index == len(pattern):\n            pattern_index = 0\n    return pattern_index == 0\ndef g(pattern='abc'):\n    s = pattern * 10\n    return s\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 159,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, pattern='abc') -> bool:\n    \"\"\"Check if the given string s contains the given pattern string in a repeating manner.\"\"\"\n    pattern_index = 0\n    for char in s:\n        if char == pattern[pattern_index]:\n            pattern_index += 1\n        if pattern_index == len(pattern):\n            pattern_index = 0\n    return pattern_index == 0",
        "solution_func": "def g(pattern='abc'):\n    s = pattern * 10\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date_str: str, format_str='%Y-%m-%d %H:%M:%S') -> bool:\n    \"\"\"Check if the given date string matches the specified format.\"\"\"\n    try:\n        datetime.strptime(date_str, format_str)\n        return True\n    except ValueError:\n        return False\n\ndef g(format_str='%Y-%m-%d %H:%M:%S'):\n    return datetime.now().strftime(format_str)\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 159,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date_str: str, format_str='%Y-%m-%d %H:%M:%S') -> bool:\n    \"\"\"Check if the given date string matches the specified format.\"\"\"\n    try:\n        datetime.strptime(date_str, format_str)\n        return True\n    except ValueError:\n        return False",
        "solution_func": "def g(format_str='%Y-%m-%d %H:%M:%S'):\n    return datetime.now().strftime(format_str)",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if any two numbers in the list add up to the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(length=10, target_sum=10):\n    numbers = [random.randint(1, 10) for _ in range(length)]\n    return numbers\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 159,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if any two numbers in the list add up to the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(length=10, target_sum=10):\n    numbers = [random.randint(1, 10) for _ in range(length)]\n    return numbers",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(n=3):\n    matrix = [[1 if i >= j else 0 for j in range(n)] for i in range(n)]\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 159,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True",
        "solution_func": "def g(n=3):\n    matrix = [[1 if i >= j else 0 for j in range(n)] for i in range(n)]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Find a list of prime numbers that are factors of n\"\"\"\n    return all(n % p == 0 for p in primes)\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return [p for p in primes if n % p == 0]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 159,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Find a list of prime numbers that are factors of n\"\"\"\n    return all(n % p == 0 for p in primes)",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return [p for p in primes if n % p == 0]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, nums=[3, 7, 11, 15, 19, 23], threshold=20) -> bool:\n    \"\"\"Determine if there exists a list of n numbers from nums such that the sum of their squares is greater than or equal to the threshold value.\"\"\"\n    return sum([num**2 for num in nums[:n]]) >= threshold\ndef g(nums=[3, 7, 11, 15, 19, 23], threshold=20):\n    return math.ceil(math.sqrt(threshold/len(nums)))\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 160,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, nums=[3, 7, 11, 15, 19, 23], threshold=20) -> bool:\n    \"\"\"Determine if there exists a list of n numbers from nums such that the sum of their squares is greater than or equal to the threshold value.\"\"\"\n    return sum([num**2 for num in nums[:n]]) >= threshold",
        "solution_func": "def g(nums=[3, 7, 11, 15, 19, 23], threshold=20):\n    return math.ceil(math.sqrt(threshold/len(nums)))",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry'], k=2) -> bool:\n    \"\"\"Determine if there are at least k words in the list words that are substrings of string s.\"\"\"\n    return sum([1 for word in words if word in s]) >= k\ndef g(words=['apple', 'banana', 'cherry'], k=2):\n    return ' '.join(words)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 160,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry'], k=2) -> bool:\n    \"\"\"Determine if there are at least k words in the list words that are substrings of string s.\"\"\"\n    return sum([1 for word in words if word in s]) >= k",
        "solution_func": "def g(words=['apple', 'banana', 'cherry'], k=2):\n    return ' '.join(words)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[5, 10, 15, 20, 25, 30], target=50) -> bool:\n    \"\"\"Determine if there exists a subset of n numbers from nums that add up to the target value.\"\"\"\n    def subset_sum(nums, target, n):\n        if target == 0:\n            return True\n        if n == 0 and target != 0:\n            return False\n        \n        if nums[n-1] > target:\n            return subset_sum(nums, target, n-1)\n        \n        return subset_sum(nums, target, n-1) or subset_sum(nums, target-nums[n-1], n-1)\n    \n    return subset_sum(nums, target, len(nums)) >= n\ndef g(nums=[5, 10, 15, 20, 25, 30], target=50):\n    return len(nums) - 1\nassert f(g())\n",
        "emb": null,
        "idx_generation": 160,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[5, 10, 15, 20, 25, 30], target=50) -> bool:\n    \"\"\"Determine if there exists a subset of n numbers from nums that add up to the target value.\"\"\"\n    def subset_sum(nums, target, n):\n        if target == 0:\n            return True\n        if n == 0 and target != 0:\n            return False\n        \n        if nums[n-1] > target:\n            return subset_sum(nums, target, n-1)\n        \n        return subset_sum(nums, target, n-1) or subset_sum(nums, target-nums[n-1], n-1)\n    \n    return subset_sum(nums, target, len(nums)) >= n",
        "solution_func": "def g(nums=[5, 10, 15, 20, 25, 30], target=50):\n    return len(nums) - 1",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=42) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=42):\n    nums = [1, 5, 10, 15, 20]\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 160,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=42) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(target=42):\n    nums = [1, 5, 10, 15, 20]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if all words in the list start with the given prefix\"\"\"\n    return all((word.startswith(prefix) for word in words))\ndef g(prefix='pre'):\n    words = ['prefix', 'previously', 'pretend', 'post', 'apple']\n    return words\nassert f(g())\n",
        "emb": null,
        "idx_generation": 160,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if all words in the list start with the given prefix\"\"\"\n    return all((word.startswith(prefix) for word in words))",
        "solution_func": "def g(prefix='pre'):\n    words = ['prefix', 'previously', 'pretend', 'post', 'apple']\n    return words",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Check if any row in the matrix sums up to the target\"\"\"\n    return any((sum(row) == target for row in matrix))\ndef g(target=100):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 160,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Check if any row in the matrix sums up to the target\"\"\"\n    return any((sum(row) == target for row in matrix))",
        "solution_func": "def g(target=100):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"Check if a given n x n matrix is symmetric along its main diagonal.\"\"\"\n    assert len(matrix) == n and all(len(row) == n for row in matrix), 'Invalid matrix dimensions'\n    return all(matrix[i][j] == matrix[j][i] for i in range(n) for j in range(n))\ndef g(n=4):\n    from random import randint\n    return [[randint(1, 9) for _ in range(n)] for _ in range(n)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 160,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"Check if a given n x n matrix is symmetric along its main diagonal.\"\"\"\n    assert len(matrix) == n and all(len(row) == n for row in matrix), 'Invalid matrix dimensions'\n    return all(matrix[i][j] == matrix[j][i] for i in range(n) for j in range(n))",
        "solution_func": "def g(n=4):\n    from random import randint\n    return [[randint(1, 9) for _ in range(n)] for _ in range(n)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10000) -> bool:\n    \"\"\"Check if it is possible to create the target number by combining the numbers in the given list using addition.\"\"\"\n    def dfs(i, curr_sum):\n        if i == len(numbers):\n            return curr_sum == target\n        return dfs(i+1, curr_sum + numbers[i]) or dfs(i+1, curr_sum - numbers[i])\n    return dfs(0, 0)\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 160,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=10000) -> bool:\n    \"\"\"Check if it is possible to create the target number by combining the numbers in the given list using addition.\"\"\"\n    def dfs(i, curr_sum):\n        if i == len(numbers):\n            return curr_sum == target\n        return dfs(i+1, curr_sum + numbers[i]) or dfs(i+1, curr_sum - numbers[i])\n    return dfs(0, 0)",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a given string has a repeating substring of length n.\"\"\"\n    assert len(s) >= n, 'String is too short'\n    substrings = set()\n    for i in range(len(s)-n+1):\n        substrings.add(s[i:i+n])\n    return len(substrings) != len(s) - n + 1\ndef g(n=3):\n    return 'abcdefg'\nassert f(g())\n",
        "emb": null,
        "idx_generation": 160,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a given string has a repeating substring of length n.\"\"\"\n    assert len(s) >= n, 'String is too short'\n    substrings = set()\n    for i in range(len(s)-n+1):\n        substrings.add(s[i:i+n])\n    return len(substrings) != len(s) - n + 1",
        "solution_func": "def g(n=3):\n    return 'abcdefg'",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by all given divisors\"\"\"\n    return all((n % d == 0 for d in divisors))\ndef g(divisors=[2, 3, 5]):\n    n = 1\n    for d in divisors:\n        n *= d\n    return n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 160,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, divisors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by all given divisors\"\"\"\n    return all((n % d == 0 for d in divisors))",
        "solution_func": "def g(divisors=[2, 3, 5]):\n    n = 1\n    for d in divisors:\n        n *= d\n    return n",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Find a pair of numbers in the given array that sum up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(size: int, target: int):\n    arr = [random.randint(1, 100) for _ in range(size)]\n    return arr\n\nassert f(g(size=100, target=150))\n",
        "emb": null,
        "idx_generation": 161,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Find a pair of numbers in the given array that sum up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(size: int, target: int):\n    arr = [random.randint(1, 100) for _ in range(size)]\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string that is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 161,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string that is a palindrome\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"racecar\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return math.isqrt(n)**2 == n\n\ndef g():\n    return random.randint(1, 1000)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 161,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return math.isqrt(n)**2 == n",
        "solution_func": "def g():\n    return random.randint(1, 1000)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(x: str, dt=datetime(2022, 1, 1, 0, 0, 0)) -> bool:\n    \"\"\"Check if a given string represents a date in the future.\"\"\"\n    given_dt = datetime.strptime(x, '%Y-%m-%d %H:%M:%S')\n    return given_dt > dt\n\ndef g(dt=datetime(2022, 1, 1, 0, 0, 0)):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 161,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(x: str, dt=datetime(2022, 1, 1, 0, 0, 0)) -> bool:\n    \"\"\"Check if a given string represents a date in the future.\"\"\"\n    given_dt = datetime.strptime(x, '%Y-%m-%d %H:%M:%S')\n    return given_dt > dt",
        "solution_func": "def g(dt=datetime(2022, 1, 1, 0, 0, 0)):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(x: int, y: int, z: int, d=gcd(10, 5)) -> bool:\n    \"\"\"Check if given three numbers have a common divisor that is equal to d.\"\"\"\n    return all((num % d == 0 for num in [x, y, z]))\n\ndef g(d=gcd(10, 5)):\n    return d\n\nassert f(10, 20, 30, g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 161,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(x: int, y: int, z: int, d=gcd(10, 5)) -> bool:\n    \"\"\"Check if given three numbers have a common divisor that is equal to d.\"\"\"\n    return all((num % d == 0 for num in [x, y, z]))",
        "solution_func": "def g(d=gcd(10, 5)):\n    return d",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: str, y: int, z: list, l=3) -> bool:\n    \"\"\"Check if a given string contains at least l occurrences of the character y in the list z.\"\"\"\n    count = 0\n    for char in x:\n        if char == z[y]:\n            count += 1\n    return count >= l\n\ndef g(y=2, z=['a', 'b', 'c']):\n    return z[y] * 3\n\nassert f(\"abacaba\", 2, g())\n",
        "emb": null,
        "idx_generation": 161,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, y: int, z: list, l=3) -> bool:\n    \"\"\"Check if a given string contains at least l occurrences of the character y in the list z.\"\"\"\n    count = 0\n    for char in x:\n        if char == z[y]:\n            count += 1\n    return count >= l",
        "solution_func": "def g(y=2, z=['a', 'b', 'c']):\n    return z[y] * 3",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(n: float, x=2.5) -> bool:\n    \"\"\"Check if the square root of n is greater than x.\"\"\"\n    return math.sqrt(n) > x\ndef g(n=9, x=2.5):\n    return n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 161,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\ndef f(n: float, x=2.5) -> bool:\n    \"\"\"Check if the square root of n is greater than x.\"\"\"\n    return math.sqrt(n) > x",
        "solution_func": "def g(n=9, x=2.5):\n    return n",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the length of the string is greater than or equal to n.\"\"\"\n    return len(s) >= n\ndef g(s='Hello', n=3):\n    return s\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 161,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the length of the string is greater than or equal to n.\"\"\"\n    return len(s) >= n",
        "solution_func": "def g(s='Hello', n=3):\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\ndef f(n: int, x=0, y=10) -> bool:\n    \"\"\"Check if n is between x and y (inclusive).\"\"\"\n    return x <= n <= y\ndef g(x=0, y=10):\n    return random.randint(x, y)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 161,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\ndef f(n: int, x=0, y=10) -> bool:\n    \"\"\"Check if n is between x and y (inclusive).\"\"\"\n    return x <= n <= y",
        "solution_func": "def g(x=0, y=10):\n    return random.randint(x, y)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: list, target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=100):\n    return [50, 60, 70, 80, 90, 100]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 161,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: list, target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [50, 60, 70, 80, 90, 100]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there are three numbers in a list that add up to a target\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 3):\n        if sum(combo) == target:\n            return True\n    return False\ndef g(nums: List[int]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 162,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there are three numbers in a list that add up to a target\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 3):\n        if sum(combo) == target:\n            return True\n    return False",
        "solution_func": "def g(nums: List[int]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], n=4) -> bool:\n    \"\"\"Check if there are any words in a list that have a length greater than n\"\"\"\n    return any(len(word) > n for word in words)\ndef g(words: List[str]):\n    return words\nassert f(g())\n",
        "emb": null,
        "idx_generation": 162,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], n=4) -> bool:\n    \"\"\"Check if there are any words in a list that have a length greater than n\"\"\"\n    return any(len(word) > n for word in words)",
        "solution_func": "def g(words: List[str]):\n    return words",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(generated: str, n=20) -> bool:\n    \"\"\"Check if a generated string is a palindrome\"\"\"\n    return generated == generated[::-1] and len(generated) == n\ndef g(n=20):\n    import random\n    chars = 'abcdefghijklmnopqrstuvwxyz'\n    return ''.join(random.choice(chars) for _ in range(n))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 162,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(generated: str, n=20) -> bool:\n    \"\"\"Check if a generated string is a palindrome\"\"\"\n    return generated == generated[::-1] and len(generated) == n",
        "solution_func": "def g(n=20):\n    import random\n    chars = 'abcdefghijklmnopqrstuvwxyz'\n    return ''.join(random.choice(chars) for _ in range(n))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, a=50, b=5) -> bool:\n    \"\"\"Check if a number is divisible by another number\"\"\"\n    return x % a == b\ndef g(a=50, b=5):\n    return a * b\nassert f(g())\n",
        "emb": null,
        "idx_generation": 162,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=50, b=5) -> bool:\n    \"\"\"Check if a number is divisible by another number\"\"\"\n    return x % a == b",
        "solution_func": "def g(a=50, b=5):\n    return a * b",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, n=4, s=\"abcd\") -> bool:\n    \"\"\"Check if a string contains all characters of another string\"\"\"\n    return len(set(x)) == n and all([c in x for c in s])\ndef g(n=4, s=\"abcd\"):\n    return s * n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 162,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, n=4, s=\"abcd\") -> bool:\n    \"\"\"Check if a string contains all characters of another string\"\"\"\n    return len(set(x)) == n and all([c in x for c in s])",
        "solution_func": "def g(n=4, s=\"abcd\"):\n    return s * n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=6, s=21) -> bool:\n    \"\"\"Find a subset of a list that sums up to a target value\"\"\"\n    subsets = [[x[j] for j in range(n) if (i & (1 << j))] for i in range(1, 2**n)]\n    return any([sum(subset) == s for subset in subsets])\ndef g(n=6, s=21):\n    return [1, 2, 3, 4, 5, s - 15]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 162,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=6, s=21) -> bool:\n    \"\"\"Find a subset of a list that sums up to a target value\"\"\"\n    subsets = [[x[j] for j in range(n) if (i & (1 << j))] for i in range(1, 2**n)]\n    return any([sum(subset) == s for subset in subsets])",
        "solution_func": "def g(n=6, s=21):\n    return [1, 2, 3, 4, 5, s - 15]",
        "map_ix": [
            1,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=27) -> bool:\n    \"\"\"Find n such that n * a == b raised to the power of n\"\"\"\n    return n * a == b**n\ndef g(a=3, b=27):\n    if a == 0:\n        return 0\n    else:\n        return int(b**(1/a))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 162,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=27) -> bool:\n    \"\"\"Find n such that n * a == b raised to the power of n\"\"\"\n    return n * a == b**n",
        "solution_func": "def g(a=3, b=27):\n    if a == 0:\n        return 0\n    else:\n        return int(b**(1/a))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=6, c=7) -> bool:\n    \"\"\"Find n such that n multiplied by a is divisible by both b and c\"\"\"\n    return n * a % b == 0 and n * a % c == 0\ndef g(a=5, b=6, c=7):\n    return b * c // a\nassert f(g())\n",
        "emb": null,
        "idx_generation": 162,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=5, b=6, c=7) -> bool:\n    \"\"\"Find n such that n multiplied by a is divisible by both b and c\"\"\"\n    return n * a % b == 0 and n * a % c == 0",
        "solution_func": "def g(a=5, b=6, c=7):\n    return b * c // a",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Find s such that s concatenated with itself n times is a palindrome\"\"\"\n    return (s * n) == (s * n)[::-1]\ndef g(n=3):\n    return \"a\" * (2 * n - 1)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 162,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Find s such that s concatenated with itself n times is a palindrome\"\"\"\n    return (s * n) == (s * n)[::-1]",
        "solution_func": "def g(n=3):\n    return \"a\" * (2 * n - 1)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a word contains all the vowels\"\"\"\n    word = word.lower()\n    for vowel in vowels:\n        if vowel not in word:\n            return False\n    return True\ndef g(vowels=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(vowels)\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 162,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a word contains all the vowels\"\"\"\n    word = word.lower()\n    for vowel in vowels:\n        if vowel not in word:\n            return False\n    return True",
        "solution_func": "def g(vowels=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(vowels)",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi', 'jkl']) -> bool:\n    \"\"\"Check if all substrings are present in the given string\"\"\"\n    return all(sub in s for sub in substrings)\ndef g(substrings=['abc', 'def', 'ghi', 'jkl']):\n    return ''.join(substrings)\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 163,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi', 'jkl']) -> bool:\n    \"\"\"Check if all substrings are present in the given string\"\"\"\n    return all(sub in s for sub in substrings)",
        "solution_func": "def g(substrings=['abc', 'def', 'ghi', 'jkl']):\n    return ''.join(substrings)",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, numbers=[2, 5, 7, 9, 12, 15, 18, 20, 22, 25]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to n\"\"\"\n    return any(n - num in numbers for num in numbers)\ndef g(numbers=[2, 5, 7, 9, 12, 15, 18, 20, 22, 25]):\n    return sum(numbers)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 163,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, numbers=[2, 5, 7, 9, 12, 15, 18, 20, 22, 25]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to n\"\"\"\n    return any(n - num in numbers for num in numbers)",
        "solution_func": "def g(numbers=[2, 5, 7, 9, 12, 15, 18, 20, 22, 25]):\n    return sum(numbers)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if x is present in the list\"\"\"\n    return x in lst\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    random.shuffle(lst)\n    return lst[random.randint(0, len(lst)-1)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 163,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(x: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if x is present in the list\"\"\"\n    return x in lst",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    random.shuffle(lst)\n    return lst[random.randint(0, len(lst)-1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=42) -> bool:\n    \"\"\"Find a pair of numbers from the list that add up to the target number\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums: List[int]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 163,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=42) -> bool:\n    \"\"\"Find a pair of numbers from the list that add up to the target number\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(nums: List[int]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Find a word from the list that starts with the given prefix\"\"\"\n    return any((word.startswith(prefix) for word in words))\ndef g(words: List[str]):\n    return words\nassert f(g())\n",
        "emb": null,
        "idx_generation": 163,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Find a word from the list that starts with the given prefix\"\"\"\n    return any((word.startswith(prefix) for word in words))",
        "solution_func": "def g(words: List[str]):\n    return words",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(grid: List[List[int]], target=7) -> bool:\n    \"\"\"Find a path from the top-left corner to the bottom-right corner in the grid that adds up to the target number\"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n    dp = [[False] * cols for _ in range(rows)]\n    dp[0][0] = grid[0][0] == target\n    for i in range(rows):\n        for j in range(cols):\n            if i > 0:\n                dp[i][j] = dp[i][j] or (dp[i-1][j] and grid[i][j] == target)\n            if j > 0:\n                dp[i][j] = dp[i][j] or (dp[i][j-1] and grid[i][j] == target)\n    return dp[rows-1][cols-1]\ndef g(grid: List[List[int]]):\n    return grid\nassert f(g())\n",
        "emb": null,
        "idx_generation": 163,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(grid: List[List[int]], target=7) -> bool:\n    \"\"\"Find a path from the top-left corner to the bottom-right corner in the grid that adds up to the target number\"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n    dp = [[False] * cols for _ in range(rows)]\n    dp[0][0] = grid[0][0] == target\n    for i in range(rows):\n        for j in range(cols):\n            if i > 0:\n                dp[i][j] = dp[i][j] or (dp[i-1][j] and grid[i][j] == target)\n            if j > 0:\n                dp[i][j] = dp[i][j] or (dp[i][j-1] and grid[i][j] == target)\n    return dp[rows-1][cols-1]",
        "solution_func": "def g(grid: List[List[int]]):\n    return grid",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, d=5) -> bool:\n    \"\"\"Check if a string contains exactly d consecutive vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n            if count == d:\n                return True\n        else:\n            count = 0\n    return False\ndef g(d=5):\n    return \"aeiou\" * d\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 163,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, d=5) -> bool:\n    \"\"\"Check if a string contains exactly d consecutive vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n            if count == d:\n                return True\n        else:\n            count = 0\n    return False",
        "solution_func": "def g(d=5):\n    return \"aeiou\" * d",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, li=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if the product of n and any element in the list is divisible by 12.\"\"\"\n    for num in li:\n        if n * num % 12 == 0:\n            return True\n    return False\ndef g(li=[2, 4, 6, 8, 10]):\n    return 12 // li[0]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 163,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, li=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if the product of n and any element in the list is divisible by 12.\"\"\"\n    for num in li:\n        if n * num % 12 == 0:\n            return True\n    return False",
        "solution_func": "def g(li=[2, 4, 6, 8, 10]):\n    return 12 // li[0]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if a string starts and ends with the same character.\"\"\"\n    return s[0] == s[-1] == char\ndef g(char='a'):\n    return char + 'bc' + char\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 163,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if a string starts and ends with the same character.\"\"\"\n    return s[0] == s[-1] == char",
        "solution_func": "def g(char='a'):\n    return char + 'bc' + char",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if a given substring is present in the given string.\"\"\"\n    return substring in s\ndef g(substring='abc'):\n    return 'abcdefg' + substring + 'hijklmnop'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 163,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if a given substring is present in the given string.\"\"\"\n    return substring in s",
        "solution_func": "def g(substring='abc'):\n    return 'abcdefg' + substring + 'hijklmnop'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Find two numbers in a list that add up to a target sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=10):\n    return [1, target_sum - 1]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 164,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Find two numbers in a list that add up to a target sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=10):\n    return [1, target_sum - 1]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=20) -> bool:\n    \"\"\"Find two numbers in a matrix that add up to a target sum.\"\"\"\n    for row in matrix:\n        for i in range(len(row)):\n            for j in range(i + 1, len(row)):\n                if row[i] + row[j] == target_sum:\n                    return True\n    return False\ndef g(target_sum=20):\n    return [[5, 6, 7, 8], [12, 9, 1, target_sum - 22]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 164,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=20) -> bool:\n    \"\"\"Find two numbers in a matrix that add up to a target sum.\"\"\"\n    for row in matrix:\n        for i in range(len(row)):\n            for j in range(i + 1, len(row)):\n                if row[i] + row[j] == target_sum:\n                    return True\n    return False",
        "solution_func": "def g(target_sum=20):\n    return [[5, 6, 7, 8], [12, 9, 1, target_sum - 22]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find three numbers in a list that add up to a target sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target_sum:\n                    return True\n    return False\ndef g(target_sum=100):\n    return [25, 50, target_sum - 75]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 164,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find three numbers in a list that add up to a target sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target_sum:\n                    return True\n    return False",
        "solution_func": "def g(target_sum=100):\n    return [25, 50, target_sum - 75]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=15) -> bool:\n    \"\"\"Find three numbers from a list that sum up to the target value.\"\"\"\n    numbers = [1, 2, 3, 4, 5, 6]\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\ndef g(target=15):\n    return target\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 164,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target=15) -> bool:\n    \"\"\"Find three numbers from a list that sum up to the target value.\"\"\"\n    numbers = [1, 2, 3, 4, 5, 6]\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=15):\n    return target",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there exists a row or column in the matrix whose sum is equal to the target value.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        row_sum = sum(matrix[i])\n        if row_sum == target:\n            return True\n    for j in range(cols):\n        col_sum = sum(matrix[i][j] for i in range(rows))\n        if col_sum == target:\n            return True\n    return False\ndef g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 164,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there exists a row or column in the matrix whose sum is equal to the target value.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        row_sum = sum(matrix[i])\n        if row_sum == target:\n            return True\n    for j in range(cols):\n        col_sum = sum(matrix[i][j] for i in range(rows))\n        if col_sum == target:\n            return True\n    return False",
        "solution_func": "def g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if a given substring exists in a given string.\"\"\"\n    if substr in s:\n        return True\n    return False\ndef g(substr='abc'):\n    s = \"defghijabcklmnop\"\n    return s\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 164,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if a given substring exists in a given string.\"\"\"\n    if substr in s:\n        return True\n    return False",
        "solution_func": "def g(substr='abc'):\n    s = \"defghijabcklmnop\"\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, target=8) -> bool:\n    \"\"\"Given an integer n, find the smallest integer power of 2 that is greater than or equal to n.\nSample Input:\n`10`\nSample Output:\n`16`\"\"\"\n    return math.ceil(math.log2(n)) >= target\ndef g(target=8):\n    return 2 ** target\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 164,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, target=8) -> bool:\n    \"\"\"Given an integer n, find the smallest integer power of 2 that is greater than or equal to n.\nSample Input:\n`10`\nSample Output:\n`16`\"\"\"\n    return math.ceil(math.log2(n)) >= target",
        "solution_func": "def g(target=8):\n    return 2 ** target",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=4) -> bool:\n    \"\"\"Given a list of integers, find if there are any three elements that sum up to a target value.\nSample Input:\n`[1, 2, 3, 4, 5]`\nSample Output:\n`True`\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target) for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(target=4):\n    return [1, 2, target-3, target-2, target-1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 164,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=4) -> bool:\n    \"\"\"Given a list of integers, find if there are any three elements that sum up to a target value.\nSample Input:\n`[1, 2, 3, 4, 5]`\nSample Output:\n`True`\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target) for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))",
        "solution_func": "def g(target=4):\n    return [1, 2, target-3, target-2, target-1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='word') -> bool:\n    \"\"\"Given a string, find if it contains a target word. Ignore case sensitivity.\nSample Input:\n`'Hello World'`\nSample Output:\n`True`\"\"\"\n    return target.lower() in s.lower()\ndef g(target='word'):\n    return 'Hello ' + target.capitalize()\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 164,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='word') -> bool:\n    \"\"\"Given a string, find if it contains a target word. Ignore case sensitivity.\nSample Input:\n`'Hello World'`\nSample Output:\n`True`\"\"\"\n    return target.lower() in s.lower()",
        "solution_func": "def g(target='word'):\n    return 'Hello ' + target.capitalize()",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=15) -> bool:\n    \"\"\"Find two numbers in a list that add up to a specific target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, target - 14]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 164,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=15) -> bool:\n    \"\"\"Find two numbers in a list that add up to a specific target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, target - 14]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=100) -> bool:\n    \"\"\"Determine if a number is a perfect square\"\"\"\n    return n**0.5 == a\ndef g(a=10, b=100):\n    return a**2\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 165,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=10, b=100) -> bool:\n    \"\"\"Determine if a number is a perfect square\"\"\"\n    return n**0.5 == a",
        "solution_func": "def g(a=10, b=100):\n    return a**2",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=5) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return s == s[::-1] and len(s) >= target\ndef g(target=5):\n    return 'racecar'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 165,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=5) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return s == s[::-1] and len(s) >= target",
        "solution_func": "def g(target=5):\n    return 'racecar'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a list that add up to a given target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [2, 8]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 165,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a list that add up to a given target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [2, 8]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Determine if there is a row or column in the matrix that sums up to the target value\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for row in range(rows):\n        if sum(matrix[row]) == target:\n            return True\n    for col in range(cols):\n        col_sum = 0\n        for row in range(rows):\n            col_sum += matrix[row][col]\n        if col_sum == target:\n            return True\n    return False\n    \ndef g(rows=3, cols=3, target=15):\n    import random\n    matrix = [[random.randint(1, 10) for _ in range(cols)] for _ in range(rows)]\n    return matrix\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 165,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Determine if there is a row or column in the matrix that sums up to the target value\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for row in range(rows):\n        if sum(matrix[row]) == target:\n            return True\n    for col in range(cols):\n        col_sum = 0\n        for row in range(rows):\n            col_sum += matrix[row][col]\n        if col_sum == target:\n            return True\n    return False",
        "solution_func": "def g(rows=3, cols=3, target=15):\n    import random\n    matrix = [[random.randint(1, 10) for _ in range(cols)] for _ in range(rows)]\n    return matrix",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nimport random\nfrom typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find three numbers from the list that sum up to the target value\"\"\"\n    from itertools import combinations\n    for comb in combinations(nums, 3):\n        if sum(comb) == target:\n            return True\n    return False\n\ndef g(length=5, target=20):\n    import random\n    nums = [random.randint(1, 10) for _ in range(length)]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 165,
        "target_skills": null,
        "problem_func": "import itertools\nimport random\nfrom typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find three numbers from the list that sum up to the target value\"\"\"\n    from itertools import combinations\n    for comb in combinations(nums, 3):\n        if sum(comb) == target:\n            return True\n    return False",
        "solution_func": "def g(length=5, target=20):\n    import random\n    nums = [random.randint(1, 10) for _ in range(length)]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(word: str, length=3) -> bool:\n    \"\"\"Check if the word contains a substring of a specific length that is a palindrome\"\"\"\n    for i in range(len(word)-length+1):\n        if word[i:i+length] == word[i:i+length][::-1]:\n            return True\n    return False\n\ndef g(length=3):\n    import string\n    import random\n    word = ''.join(random.choice(string.ascii_lowercase) for _ in range(10))\n    return word\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 165,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(word: str, length=3) -> bool:\n    \"\"\"Check if the word contains a substring of a specific length that is a palindrome\"\"\"\n    for i in range(len(word)-length+1):\n        if word[i:i+length] == word[i:i+length][::-1]:\n            return True\n    return False",
        "solution_func": "def g(length=3):\n    import string\n    import random\n    word = ''.join(random.choice(string.ascii_lowercase) for _ in range(10))\n    return word",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, t: float, r: float, s=24.0) -> bool:\n    \"\"\"Find values for x, y, z, t, and r such that the equation is satisfied.\"\"\"\n    return math.isclose((x * y) / (z * t) + r, s)\n\ndef g(x=2.0, y=3.0, z=4.0, t=5.0, s=24.0):\n    return (s -  r) * (z * t) / y\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 165,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, t: float, r: float, s=24.0) -> bool:\n    \"\"\"Find values for x, y, z, t, and r such that the equation is satisfied.\"\"\"\n    return math.isclose((x * y) / (z * t) + r, s)",
        "solution_func": "def g(x=2.0, y=3.0, z=4.0, t=5.0, s=24.0):\n    return (s -  r) * (z * t) / y",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(x: int, y: int, z: int, target_sum=6) -> bool:\n    \"\"\"Find values for x, y, and z such that the sum of two random numbers is equal to the target_sum.\"\"\"\n    return x + y == target_sum\n\ndef g(target_sum=6):\n    x = random.randint(1, target_sum - 1)\n    return x, target_sum - x\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 165,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(x: int, y: int, z: int, target_sum=6) -> bool:\n    \"\"\"Find values for x, y, and z such that the sum of two random numbers is equal to the target_sum.\"\"\"\n    return x + y == target_sum",
        "solution_func": "def g(target_sum=6):\n    x = random.randint(1, target_sum - 1)\n    return x, target_sum - x",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Check if a string is an anagram of another string.\"\"\"\n    return sorted(s) == sorted(t)\n\ndef g():\n    return \"listen\", \"silent\"\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 165,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Check if a string is an anagram of another string.\"\"\"\n    return sorted(s) == sorted(t)",
        "solution_func": "def g():\n    return \"listen\", \"silent\"",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find a number that can be formed by adding three distinct numbers from the list lst\"\"\"\n    import itertools\n    combinations = itertools.combinations(lst, 3)\n    for combo in combinations:\n        if sum(combo) == n:\n            return True\n    return False\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return sum(lst[:3])\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 165,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find a number that can be formed by adding three distinct numbers from the list lst\"\"\"\n    import itertools\n    combinations = itertools.combinations(lst, 3)\n    for combo in combinations:\n        if sum(combo) == n:\n            return True\n    return False",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return sum(lst[:3])",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in a list that add up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n    return (nums, target)\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 166,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in a list that add up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g():\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n    return (nums, target)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"Find if there exists a pair of elements in a list whose difference is k.\"\"\"\n    return any((nums[i] - nums[j] == k for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    k = 2\n    return (nums, k)\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 166,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"Find if there exists a pair of elements in a list whose difference is k.\"\"\"\n    return any((nums[i] - nums[j] == k for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g():\n    nums = [1, 2, 3, 4, 5]\n    k = 2\n    return (nums, k)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find three numbers in a list that add up to the target value.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n    return (nums, target)\nassert f(*g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 166,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find three numbers in a list that add up to the target value.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))",
        "solution_func": "def g():\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n    return (nums, target)",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(numbers: list, target=100) -> bool:\n    \"\"\"Determine if it is possible to obtain the target number by combining the numbers in the list using addition,\n    subtraction, multiplication, or division, without changing their order.\"\"\"\n    result = numbers[0]\n    for i in range(1, len(numbers)):\n        op = random.choice(['+', '-', '*', '/'])\n        if op == '+':\n            result += numbers[i]\n        elif op == '-':\n            result -= numbers[i]\n        elif op == '*':\n            result *= numbers[i]\n        elif op == '/':\n            if numbers[i] == 0:\n                continue\n            result /= numbers[i]\n    return result == target\n\ndef g(numbers=[10, 5, 2, 3, 6]):\n    return numbers\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 166,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(numbers: list, target=100) -> bool:\n    \"\"\"Determine if it is possible to obtain the target number by combining the numbers in the list using addition,\n    subtraction, multiplication, or division, without changing their order.\"\"\"\n    result = numbers[0]\n    for i in range(1, len(numbers)):\n        op = random.choice(['+', '-', '*', '/'])\n        if op == '+':\n            result += numbers[i]\n        elif op == '-':\n            result -= numbers[i]\n        elif op == '*':\n            result *= numbers[i]\n        elif op == '/':\n            if numbers[i] == 0:\n                continue\n            result /= numbers[i]\n    return result == target",
        "solution_func": "def g(numbers=[10, 5, 2, 3, 6]):\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: list, target_sum=100) -> bool:\n    \"\"\"Determine if it is possible to obtain the target sum by selecting one element from each row of the matrix.\"\"\"\n    for row in matrix:\n        if target_sum not in row:\n            return False\n    return True\n\ndef g(matrix=[[10, 20, 30], [40, 50, 60], [70, 80, 90]]):\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 166,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: list, target_sum=100) -> bool:\n    \"\"\"Determine if it is possible to obtain the target sum by selecting one element from each row of the matrix.\"\"\"\n    for row in matrix:\n        if target_sum not in row:\n            return False\n    return True",
        "solution_func": "def g(matrix=[[10, 20, 30], [40, 50, 60], [70, 80, 90]]):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(numbers: list, target_sum=100) -> bool:\n    \"\"\"Determine if it is possible to obtain the target sum by selecting a subset of numbers from the list.\"\"\"\n    for r in range(1, len(numbers) + 1):\n        for combination in itertools.combinations(numbers, r):\n            if sum(combination) == target_sum:\n                return True\n    return False\n\ndef g(numbers=[10, 20, 30, 40, 50]):\n    return numbers\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 166,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\n\ndef f(numbers: list, target_sum=100) -> bool:\n    \"\"\"Determine if it is possible to obtain the target sum by selecting a subset of numbers from the list.\"\"\"\n    for r in range(1, len(numbers) + 1):\n        for combination in itertools.combinations(numbers, r):\n            if sum(combination) == target_sum:\n                return True\n    return False",
        "solution_func": "def g(numbers=[10, 20, 30, 40, 50]):\n    return numbers",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"Find the sum of the first n natural numbers such that it is equal to the target.\"\"\"\n    return sum(range(n+1)) == target\ndef g(target=100):\n    n = 1\n    while True:\n        if sum(range(n+1)) == target:\n            return n\n        n += 1\nassert f(g())\n",
        "emb": null,
        "idx_generation": 166,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"Find the sum of the first n natural numbers such that it is equal to the target.\"\"\"\n    return sum(range(n+1)) == target",
        "solution_func": "def g(target=100):\n    n = 1\n    while True:\n        if sum(range(n+1)) == target:\n            return n\n        n += 1",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"Find n such that it is divisible by all the numbers in the factors list.\"\"\"\n    return all(n % factor == 0 for factor in factors)\ndef g(factors=[2, 3, 5]):\n    n = 1\n    while True:\n        if all(n % factor == 0 for factor in factors):\n            return n\n        n += 1\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 166,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"Find n such that it is divisible by all the numbers in the factors list.\"\"\"\n    return all(n % factor == 0 for factor in factors)",
        "solution_func": "def g(factors=[2, 3, 5]):\n    n = 1\n    while True:\n        if all(n % factor == 0 for factor in factors):\n            return n\n        n += 1",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, li=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find the index of an item in a list such that its value is equal to n.\"\"\"\n    return li.index(n) == n\ndef g(li=[1, 2, 3, 4, 5]):\n    return li[li.index(len(li))]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 166,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, li=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find the index of an item in a list such that its value is equal to n.\"\"\"\n    return li.index(n) == n",
        "solution_func": "def g(li=[1, 2, 3, 4, 5]):\n    return li[li.index(len(li))]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=42) -> bool:\n    \"\"\"Find two distinct numbers in the list that sum up to the target number.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=42):\n    return list(range(1, target))\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 166,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=42) -> bool:\n    \"\"\"Find two distinct numbers in the list that sum up to the target number.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=42):\n    return list(range(1, target))",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, target=15) -> bool:\n    \"\"\"Find the smallest integer that is a perfect square and greater than or equal to n\"\"\"\n    return math.isqrt(n) ** 2 == n and n >= target\n\ndef g(target=15):\n    return target ** 2\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 167,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, target=15) -> bool:\n    \"\"\"Find the smallest integer that is a perfect square and greater than or equal to n\"\"\"\n    return math.isqrt(n) ** 2 == n and n >= target",
        "solution_func": "def g(target=15):\n    return target ** 2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"Check if a number is a prime and greater than the target number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return n > target\n\ndef g(target=100):\n    i = target + 1\n    while True:\n        if f(i, target):\n            return i\n        i += 1\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 167,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"Check if a number is a prime and greater than the target number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return n > target",
        "solution_func": "def g(target=100):\n    i = target + 1\n    while True:\n        if f(i, target):\n            return i\n        i += 1",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"Check if a number is a palindrome and greater than the target number\"\"\"\n    return str(n) == str(n)[::-1] and n > target\n\ndef g(target=100):\n    i = target + 1\n    while True:\n        if f(i, target):\n            return i\n        i += 1\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 167,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"Check if a number is a palindrome and greater than the target number\"\"\"\n    return str(n) == str(n)[::-1] and n > target",
        "solution_func": "def g(target=100):\n    i = target + 1\n    while True:\n        if f(i, target):\n            return i\n        i += 1",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 167,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a path from the top-left corner to the bottom-right corner in the matrix, where the sum of the path is equal to the target.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    dp = [[0] * cols for _ in range(rows)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, rows):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for j in range(1, cols):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    return dp[rows-1][cols-1] == target\n\ndef g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 167,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a path from the top-left corner to the bottom-right corner in the matrix, where the sum of the path is equal to the target.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    dp = [[0] * cols for _ in range(rows)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, rows):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for j in range(1, cols):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    return dp[rows-1][cols-1] == target",
        "solution_func": "def g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Find the kth largest element in the list.\"\"\"\n    nums.sort(reverse=True)\n    return nums[k-1]\n\ndef g(k=3):\n    return [1, 5, 2, 4, 3]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 167,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Find the kth largest element in the list.\"\"\"\n    nums.sort(reverse=True)\n    return nums[k-1]",
        "solution_func": "def g(k=3):\n    return [1, 5, 2, 4, 3]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=31) -> bool:\n    \"\"\"Find a row in the matrix that sums up to a target value\"\"\"\n    return any(np.sum(row) == target for row in matrix)\n\ndef g(target=31):\n    return np.array([[7, 3, 10], [4, 6, 5], [9, 1, 8]])\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 167,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=31) -> bool:\n    \"\"\"Find a row in the matrix that sums up to a target value\"\"\"\n    return any(np.sum(row) == target for row in matrix)",
        "solution_func": "def g(target=31):\n    return np.array([[7, 3, 10], [4, 6, 5], [9, 1, 8]])",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(numbers: List[int], target=12) -> bool:\n    \"\"\"Find two numbers in the list that multiply to the target value\"\"\"\n    return any(a * b == target for a in numbers for b in numbers if a != b)\n\ndef g(target=12):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 167,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(numbers: List[int], target=12) -> bool:\n    \"\"\"Find two numbers in the list that multiply to the target value\"\"\"\n    return any(a * b == target for a in numbers for b in numbers if a != b)",
        "solution_func": "def g(target=12):\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, indices: List[int], target='hello') -> bool:\n    \"\"\"Rearrange the characters in s based on the given indices to form the target string\"\"\"\n    return ''.join(s[i] for i in indices) == target\n\ndef g(target='hello'):\n    s = 'hleol'\n    indices = [0, 3, 1, 2, 4]\n    return s, indices\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 167,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, indices: List[int], target='hello') -> bool:\n    \"\"\"Rearrange the characters in s based on the given indices to form the target string\"\"\"\n    return ''.join(s[i] for i in indices) == target",
        "solution_func": "def g(target='hello'):\n    s = 'hleol'\n    indices = [0, 3, 1, 2, 4]\n    return s, indices",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Find the number of pairs in a list of integers where the sum of the pair is equal to a given target.\"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                count += 1\n    return count\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g(), target=7)\n",
        "emb": null,
        "idx_generation": 167,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Find the number of pairs in a list of integers where the sum of the pair is equal to a given target.\"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                count += 1\n    return count",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find the two numbers in the list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 168,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find the two numbers in the list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find the three numbers in the list that multiply to the target value\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 3):\n        if combo[0] * combo[1] * combo[2] == target:\n            return True\n    return False\ndef g(nums=[10, 5, 2, 4, 20]):\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 168,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find the three numbers in the list that multiply to the target value\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 3):\n        if combo[0] * combo[1] * combo[2] == target:\n            return True\n    return False",
        "solution_func": "def g(nums=[10, 5, 2, 4, 20]):\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Find a pair of numbers in the list that when squared and added together, give the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i]**2 + nums[j]**2 == target:\n                return True\n    return False\ndef g(nums=[3, 4, 5, 6, 7]):\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 168,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Find a pair of numbers in the list that when squared and added together, give the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i]**2 + nums[j]**2 == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[3, 4, 5, 6, 7]):\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(n: int, a=27, b=45) -> bool:\n    \"\"\"Check if n is a common divisor of a and b\"\"\"\n    return gcd(a, b) % n == 0\n\ndef g(a=27, b=45):\n    return gcd(a, b)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 168,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(n: int, a=27, b=45) -> bool:\n    \"\"\"Check if n is a common divisor of a and b\"\"\"\n    return gcd(a, b) % n == 0",
        "solution_func": "def g(a=27, b=45):\n    return gcd(a, b)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=9, b=8) -> bool:\n    \"\"\"Check if n is a perfect square and a multiple of b\"\"\"\n    return n ** 0.5 % 1 == 0 and n % b == 0\n\ndef g(a=9, b=8):\n    return a * b * b\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 168,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=9, b=8) -> bool:\n    \"\"\"Check if n is a perfect square and a multiple of b\"\"\"\n    return n ** 0.5 % 1 == 0 and n % b == 0",
        "solution_func": "def g(a=9, b=8):\n    return a * b * b",
        "map_ix": [
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=7, b=2) -> bool:\n    \"\"\"Check if n is a multiple of a and not divisible by b\"\"\"\n    return n % a == 0 and n % b != 0\n\ndef g(a=7, b=2):\n    return a * b\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 168,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=7, b=2) -> bool:\n    \"\"\"Check if n is a multiple of a and not divisible by b\"\"\"\n    return n % a == 0 and n % b != 0",
        "solution_func": "def g(a=7, b=2):\n    return a * b",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(num_list: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target sum\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 168,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num_list: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target sum\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by all the given divisors\"\"\"\n    for divisor in divisors:\n        if n % divisor != 0:\n            return False\n    return True\n\ndef g(divisors=[2, 3, 5]):\n    return 30\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 168,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, divisors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by all the given divisors\"\"\"\n    for divisor in divisors:\n        if n % divisor != 0:\n            return False\n    return True",
        "solution_func": "def g(divisors=[2, 3, 5]):\n    return 30",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word_list: List[str], letter='a') -> bool:\n    \"\"\"Check if all words in the list start with the given letter\"\"\"\n    for word in word_list:\n        if word[0] != letter:\n            return False\n    return True\n\ndef g(letter='a'):\n    return ['apple', 'ant', 'avocado']\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 168,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word_list: List[str], letter='a') -> bool:\n    \"\"\"Check if all words in the list start with the given letter\"\"\"\n    for word in word_list:\n        if word[0] != letter:\n            return False\n    return True",
        "solution_func": "def g(letter='a'):\n    return ['apple', 'ant', 'avocado']",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, divisor = 7) -> bool:\n    \"\"\"Check if a number is divisible by a given divisor\"\"\"\n    return num % divisor == 0\ndef g(divisor = 7):\n    return divisor * 2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 168,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int, divisor = 7) -> bool:\n    \"\"\"Check if a number is divisible by a given divisor\"\"\"\n    return num % divisor == 0",
        "solution_func": "def g(divisor = 7):\n    return divisor * 2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if a given substring exists in a larger string. Return True if it does, False otherwise.\"\"\"\n    return substr in s\ndef g(substr='python'):\n    return substr\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 169,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if a given substring exists in a larger string. Return True if it does, False otherwise.\"\"\"\n    return substr in s",
        "solution_func": "def g(substr='python'):\n    return substr",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Given a matrix of integers, check if a target number exists in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 169,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Given a matrix of integers, check if a target number exists in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if a given number is divisible by the first m positive integers.\"\"\"\n    return all((n % i == 0 for i in range(1, m+1)))\ndef g(m=10):\n    return m\nassert f(g())\n",
        "emb": null,
        "idx_generation": 169,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if a given number is divisible by the first m positive integers.\"\"\"\n    return all((n % i == 0 for i in range(1, m+1)))",
        "solution_func": "def g(m=10):\n    return m",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=3) -> bool:\n    \"\"\"Find the kth largest number in the list of n numbers\"\"\"\n    return sorted(nums)[-k] == nums[k-1]\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=3):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 169,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=3) -> bool:\n    \"\"\"Find the kth largest number in the list of n numbers\"\"\"\n    return sorted(nums)[-k] == nums[k-1]",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=3):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew'], target='e') -> bool:\n    \"\"\"Find the number of words in the list that contain the target character\"\"\"\n    return sum((1 for word in words if target in word)) == n\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew'], target='e'):\n    return words\nassert f(g())\n",
        "emb": null,
        "idx_generation": 169,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew'], target='e') -> bool:\n    \"\"\"Find the number of words in the list that contain the target character\"\"\"\n    return sum((1 for word in words if target in word)) == n",
        "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew'], target='e'):\n    return words",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=15) -> bool:\n    \"\"\"Find if there is a pair of numbers in the list that sums up to the target\"\"\"\n    return any((lst[i] + lst[j] == target for i in range(len(lst)) for j in range(i+1, len(lst)))) == n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=15):\n    return lst\nassert f(g())\n",
        "emb": null,
        "idx_generation": 169,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=15) -> bool:\n    \"\"\"Find if there is a pair of numbers in the list that sums up to the target\"\"\"\n    return any((lst[i] + lst[j] == target for i in range(len(lst)) for j in range(i+1, len(lst)))) == n",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=15):\n    return lst",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='abc', t='cba') -> bool:\n    \"\"\"Check if s and t are anagrams of each other.\"\"\"\n    return sorted(s.lower()) == sorted(t.lower())\n\ndef g(s='abc', t='cba'):\n    return sorted(s.lower()) == sorted(t.lower())\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 169,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, s='abc', t='cba') -> bool:\n    \"\"\"Check if s and t are anagrams of each other.\"\"\"\n    return sorted(s.lower()) == sorted(t.lower())",
        "solution_func": "def g(s='abc', t='cba'):\n    return sorted(s.lower()) == sorted(t.lower())",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the array that add up to the target.\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    seen = set()\n    for num in arr:\n        if 10 - num in seen:\n            return True\n        seen.add(num)\n    return False\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 169,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the array that add up to the target.\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5]):\n    seen = set()\n    for num in arr:\n        if 10 - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(sentence: str, vowels='aeiou') -> bool:\n    \"\"\"Check if the sentence contains all the vowels at least once.\"\"\"\n    return all(vowel in sentence.lower() for vowel in vowels)\n\ndef g(sentence='The quick brown fox jumps over the lazy dog'):\n    return all(vowel in sentence.lower() for vowel in 'aeiou')\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 169,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(sentence: str, vowels='aeiou') -> bool:\n    \"\"\"Check if the sentence contains all the vowels at least once.\"\"\"\n    return all(vowel in sentence.lower() for vowel in vowels)",
        "solution_func": "def g(sentence='The quick brown fox jumps over the lazy dog'):\n    return all(vowel in sentence.lower() for vowel in 'aeiou')",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(a: list[int], b: list[int], target: int = 0) -> bool:\n    \"\"\"Given two lists of integers, find a pair of numbers where the sum is equal to the target value.\n    Return True if such a pair exists, False otherwise.\"\"\"\n    for num1 in a:\n        for num2 in b:\n            if num1 + num2 == target:\n                return True\n    return False\n\ndef g(target: int = 0):\n    a = [1, 2, 3, 4, 5]\n    b = [6, 7, 8, 9, 10]\n    return (a, b, target)\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 169,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(a: list[int], b: list[int], target: int = 0) -> bool:\n    \"\"\"Given two lists of integers, find a pair of numbers where the sum is equal to the target value.\n    Return True if such a pair exists, False otherwise.\"\"\"\n    for num1 in a:\n        for num2 in b:\n            if num1 + num2 == target:\n                return True\n    return False",
        "solution_func": "def g(target: int = 0):\n    a = [1, 2, 3, 4, 5]\n    b = [6, 7, 8, 9, 10]\n    return (a, b, target)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(arr: list) -> bool:\n    \"\"\"Check if the sum of the list elements is equal to the square of the length of the list\"\"\"\n    return sum(arr) == len(arr) ** 2\n\ndef g():\n    return [4, 7, 2, 1, 9]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 170,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(arr: list) -> bool:\n    \"\"\"Check if the sum of the list elements is equal to the square of the length of the list\"\"\"\n    return sum(arr) == len(arr) ** 2",
        "solution_func": "def g():\n    return [4, 7, 2, 1, 9]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, arr: list) -> bool:\n    \"\"\"Check if the given number is present in the list\"\"\"\n    return n in arr\n\ndef g(arr: list):\n    n = random.choice(arr)\n    return n, arr\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 170,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, arr: list) -> bool:\n    \"\"\"Check if the given number is present in the list\"\"\"\n    return n in arr",
        "solution_func": "def g(arr: list):\n    n = random.choice(arr)\n    return n, arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(year: int) -> bool:\n    \"\"\"Check if the given year is a leap year\"\"\"\n    return datetime.datetime(year, 2, 29).strftime(\"%Y\") == str(year)\n\ndef g():\n    return 2020\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 170,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(year: int) -> bool:\n    \"\"\"Check if the given year is a leap year\"\"\"\n    return datetime.datetime(year, 2, 29).strftime(\"%Y\") == str(year)",
        "solution_func": "def g():\n    return 2020",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=688) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=688):\n    return [i for i in range(target-100, target+1)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 170,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=688) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=688):\n    return [i for i in range(target-100, target+1)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find two numbers in the list that multiply to give the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\ndef g(target=100):\n    return [i for i in range(1, target+1)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 170,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find two numbers in the list that multiply to give the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [i for i in range(1, target+1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=999) -> bool:\n    \"\"\"Find the number in the list that is the closest to the target\"\"\"\n    closest = float('inf')\n    for num in nums:\n        if abs(num - target) < abs(closest - target):\n            closest = num\n    return closest\ndef g(target=999):\n    return [i for i in range(target-100, target+1)]\nassert f(g())",
        "emb": null,
        "idx_generation": 170,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=999) -> bool:\n    \"\"\"Find the number in the list that is the closest to the target\"\"\"\n    closest = float('inf')\n    for num in nums:\n        if abs(num - target) < abs(closest - target):\n            closest = num\n    return closest",
        "solution_func": "def g(target=999):\n    return [i for i in range(target-100, target+1)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in a list that add up to a specific target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=10):\n    return [3, 7, 5, 2, 8, 4]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 170,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in a list that add up to a specific target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=10):\n    return [3, 7, 5, 2, 8, 4]",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a square matrix is symmetric.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 170,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a square matrix is symmetric.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True",
        "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there are three numbers in a list that add up to a specific target.\"\"\"\n    for i in range(len(nums) - 2):\n        for j in range(i+1, len(nums) - 1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=5):\n    return [1, 2, 3, 4]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 170,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there are three numbers in a list that add up to a specific target.\"\"\"\n    for i in range(len(nums) - 2):\n        for j in range(i+1, len(nums) - 1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=5):\n    return [1, 2, 3, 4]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a sublist of integers from nums that sums up to target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 170,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a sublist of integers from nums that sums up to target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, k=3, p='xyz', q='abc') -> bool:\n    \"\"\"Given a string s, find if it can be transformed into p by replacing k consecutive characters of s with q\"\"\"\n    return p in [s[i:i+k].replace(s[i:i+k], q) for i in range(len(s)-k+1)]\ndef g(k=3, p='xyz', q='abc'):\n    return 'xyzabcxyz'\nassert f(g())\n",
        "emb": null,
        "idx_generation": 171,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, k=3, p='xyz', q='abc') -> bool:\n    \"\"\"Given a string s, find if it can be transformed into p by replacing k consecutive characters of s with q\"\"\"\n    return p in [s[i:i+k].replace(s[i:i+k], q) for i in range(len(s)-k+1)]",
        "solution_func": "def g(k=3, p='xyz', q='abc'):\n    return 'xyzabcxyz'",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers in the list whose sum is equal to target\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 171,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers in the list whose sum is equal to target\"\"\"\n    return any(target - num in nums for num in nums)",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, x=2, y=5) -> bool:\n    \"\"\"Find the smallest number greater than n that is divisible by both x and y\"\"\"\n    while True:\n        n += 1\n        if n % x == 0 and n % y == 0:\n            return n\ndef g(x=2, y=5):\n    return 0\nassert f(g())\n",
        "emb": null,
        "idx_generation": 171,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, x=2, y=5) -> bool:\n    \"\"\"Find the smallest number greater than n that is divisible by both x and y\"\"\"\n    while True:\n        n += 1\n        if n % x == 0 and n % y == 0:\n            return n",
        "solution_func": "def g(x=2, y=5):\n    return 0",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, max_length=4) -> bool:\n    \"\"\"Find a combination of at most max_length numbers from the list nums that adds up to the target value.\"\"\"\n    return sum(nums) == target and len(nums) <= max_length\ndef g(target=10, max_length=4):\n    from itertools import combinations\n    for n in range(1, max_length + 1):\n        for c in combinations(nums, n):\n            if sum(c) == target:\n                return list(c)\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 171,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, max_length=4) -> bool:\n    \"\"\"Find a combination of at most max_length numbers from the list nums that adds up to the target value.\"\"\"\n    return sum(nums) == target and len(nums) <= max_length",
        "solution_func": "def g(target=10, max_length=4):\n    from itertools import combinations\n    for n in range(1, max_length + 1):\n        for c in combinations(nums, n):\n            if sum(c) == target:\n                return list(c)\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"Check if the given grid represents a valid sudoku solution.\"\"\"\n    def is_valid(nums: List[int]) -> bool:\n        return sorted(nums) == list(range(1, 10))\n    for row in grid:\n        if not is_valid(row):\n            return False\n    for col in zip(*grid):\n        if not is_valid(col):\n            return False\n    for i in range(0, 9, 3):\n        for j in range(0, 9, 3):\n            square = [grid[x][y] for x in range(i, i+3) for y in range(j, j+3)]\n            if not is_valid(square):\n                return False\n    return True\ndef g():\n    grid = [\n        [5, 3, 0, 0, 7, 0, 0, 0, 0],\n        [6, 0, 0, 1, 9, 5, 0, 0, 0],\n        [0, 9, 8, 0, 0, 0, 0, 6, 0],\n        [8, 0, 0, 0, 6, 0, 0, 0, 3],\n        [4, 0, 0, 8, 0, 3, 0, 0, 1],\n        [7, 0, 0, 0, 2, 0, 0, 0, 6],\n        [0, 6, 0, 0, 0, 0, 2, 8, 0],\n        [0, 0, 0, 4, 1, 9, 0, 0, 5],\n        [0, 0, 0, 0, 8, 0, 0, 7, 9]\n    ]\n    return grid\nassert f(g())\n",
        "emb": null,
        "idx_generation": 171,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"Check if the given grid represents a valid sudoku solution.\"\"\"\n    def is_valid(nums: List[int]) -> bool:\n        return sorted(nums) == list(range(1, 10))\n    for row in grid:\n        if not is_valid(row):\n            return False\n    for col in zip(*grid):\n        if not is_valid(col):\n            return False\n    for i in range(0, 9, 3):\n        for j in range(0, 9, 3):\n            square = [grid[x][y] for x in range(i, i+3) for y in range(j, j+3)]\n            if not is_valid(square):\n                return False\n    return True",
        "solution_func": "def g():\n    grid = [\n        [5, 3, 0, 0, 7, 0, 0, 0, 0],\n        [6, 0, 0, 1, 9, 5, 0, 0, 0],\n        [0, 9, 8, 0, 0, 0, 0, 6, 0],\n        [8, 0, 0, 0, 6, 0, 0, 0, 3],\n        [4, 0, 0, 8, 0, 3, 0, 0, 1],\n        [7, 0, 0, 0, 2, 0, 0, 0, 6],\n        [0, 6, 0, 0, 0, 0, 2, 8, 0],\n        [0, 0, 0, 4, 1, 9, 0, 0, 5],\n        [0, 0, 0, 0, 8, 0, 0, 7, 9]\n    ]\n    return grid",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = n * (n ** 2 + 1) // 2\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag_sum1 = sum(matrix[i][i] for i in range(n))\n    diag_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(s == target_sum for s in row_sums + col_sums + [diag_sum1, diag_sum2])\ndef g():\n    matrix = [\n        [2, 7, 6],\n        [9, 5, 1],\n        [4, 3, 8]\n    ]\n    return matrix\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 171,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = n * (n ** 2 + 1) // 2\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag_sum1 = sum(matrix[i][i] for i in range(n))\n    diag_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(s == target_sum for s in row_sums + col_sums + [diag_sum1, diag_sum2])",
        "solution_func": "def g():\n    matrix = [\n        [2, 7, 6],\n        [9, 5, 1],\n        [4, 3, 8]\n    ]\n    return matrix",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"Check if a given substring is present in a given string\"\"\"\n    return substr in string\ndef g(substr='python'):\n    return 'Hello, I love python programming!'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 171,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"Check if a given substring is present in a given string\"\"\"\n    return substr in string",
        "solution_func": "def g(substr='python'):\n    return 'Hello, I love python programming!'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if a given target number is present in a given matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 171,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if a given target number is present in a given matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if any two numbers in a given list add up to a target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=50):\n    return [10, 20, 30, 40]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 171,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if any two numbers in a given list add up to a target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=50):\n    return [10, 20, 30, 40]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], rows=0, columns=0, target=0) -> bool:\n    \"\"\"Find a target value in a submatrix of size rows x columns in the given matrix.\"\"\"\n    assert rows <= len(matrix) and columns <= len(matrix[0]), \"Submatrix size is larger than matrix size\"\n    return any(target in row for row in matrix[:rows])\ndef g(rows=0, columns=0, target=0):\n    matrix = [[i + j for j in range(columns)] for i in range(rows)]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 171,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], rows=0, columns=0, target=0) -> bool:\n    \"\"\"Find a target value in a submatrix of size rows x columns in the given matrix.\"\"\"\n    assert rows <= len(matrix) and columns <= len(matrix[0]), \"Submatrix size is larger than matrix size\"\n    return any(target in row for row in matrix[:rows])",
        "solution_func": "def g(rows=0, columns=0, target=0):\n    matrix = [[i + j for j in range(columns)] for i in range(rows)]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 172,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the matrix is a magic square.\"\"\"\n    def is_magic_square(matrix: List[List[int]]) -> bool:\n        size = len(matrix)\n        target_sum = size * (size**2 + 1) // 2\n\n        # Check rows\n        for row in matrix:\n            if sum(row) != target_sum:\n                return False\n\n        # Check columns\n        for i in range(size):\n            if sum(matrix[j][i] for j in range(size)) != target_sum:\n                return False\n\n        # Check diagonals\n        if sum(matrix[i][i] for i in range(size)) != target_sum:\n            return False\n        if sum(matrix[i][size-i-1] for i in range(size)) != target_sum:\n            return False\n\n        return True\n\n    return is_magic_square(matrix)\ndef g(n=3):\n    return [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 172,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the matrix is a magic square.\"\"\"\n    def is_magic_square(matrix: List[List[int]]) -> bool:\n        size = len(matrix)\n        target_sum = size * (size**2 + 1) // 2\n\n        # Check rows\n        for row in matrix:\n            if sum(row) != target_sum:\n                return False\n\n        # Check columns\n        for i in range(size):\n            if sum(matrix[j][i] for j in range(size)) != target_sum:\n                return False\n\n        # Check diagonals\n        if sum(matrix[i][i] for i in range(size)) != target_sum:\n            return False\n        if sum(matrix[i][size-i-1] for i in range(size)) != target_sum:\n            return False\n\n        return True\n\n    return is_magic_square(matrix)",
        "solution_func": "def g(n=3):\n    return [[8, 1, 6], [3, 5, 7], [4, 9, 2]]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], length=5) -> bool:\n    \"\"\"Check if there is a word in the list with the given length.\"\"\"\n    for word in words:\n        if len(word) == length:\n            return True\n    return False\ndef g(length=5):\n    return ['apple', 'banana', 'cherry', 'date', 'elderberry']\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 172,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], length=5) -> bool:\n    \"\"\"Check if there is a word in the list with the given length.\"\"\"\n    for word in words:\n        if len(word) == length:\n            return True\n    return False",
        "solution_func": "def g(length=5):\n    return ['apple', 'banana', 'cherry', 'date', 'elderberry']",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    return any(target - num in arr for num in arr)\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target - 9]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 172,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    return any(target - num in arr for num in arr)",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target - 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='fix') -> bool:\n    \"\"\"Check if there is a word in the list that starts with the prefix and ends with the suffix\"\"\"\n    return any(word.startswith(prefix) and word.endswith(suffix) for word in words)\ndef g(prefix='pre', suffix='fix'):\n    return ['prefix', 'suffix', prefix + 'word' + suffix]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 172,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='fix') -> bool:\n    \"\"\"Check if there is a word in the list that starts with the prefix and ends with the suffix\"\"\"\n    return any(word.startswith(prefix) and word.endswith(suffix) for word in words)",
        "solution_func": "def g(prefix='pre', suffix='fix'):\n    return ['prefix', 'suffix', prefix + 'word' + suffix]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], row=2, col=3) -> bool:\n    \"\"\"Check if the element at the specified row and column in the matrix is a prime number\"\"\"\n    num = matrix[row][col]\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g(row=2, col=3):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 172,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row=2, col=3) -> bool:\n    \"\"\"Check if the element at the specified row and column in the matrix is a prime number\"\"\"\n    num = matrix[row][col]\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(row=2, col=3):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import isqrt\n\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if x is a perfect square, y is a perfect cube, and z is a perfect fourth power.\"\"\"\n    return isqrt(x)**2 == x and int(y**(1/3))**3 == y and int(z**(1/4))**4 == z\n\ndef g(x: int = 16, y: int = 27, z: int = 16):\n    \"\"\"Return values for x, y, and z that satisfy the conditions.\"\"\"\n    return x, y, z\n\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 172,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import isqrt\n\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if x is a perfect square, y is a perfect cube, and z is a perfect fourth power.\"\"\"\n    return isqrt(x)**2 == x and int(y**(1/3))**3 == y and int(z**(1/4))**4 == z",
        "solution_func": "def g(x: int = 16, y: int = 27, z: int = 16):\n    \"\"\"Return values for x, y, and z that satisfy the conditions.\"\"\"\n    return x, y, z",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if s1 and s2 are anagrams of each other.\"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g(s1: str = \"listen\", s2: str = \"silent\"):\n    \"\"\"Return values for s1 and s2 that are anagrams of each other.\"\"\"\n    return s1, s2\n\nassert f(*g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 172,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if s1 and s2 are anagrams of each other.\"\"\"\n    return sorted(s1) == sorted(s2)",
        "solution_func": "def g(s1: str = \"listen\", s2: str = \"silent\"):\n    \"\"\"Return values for s1 and s2 that are anagrams of each other.\"\"\"\n    return s1, s2",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: list) -> bool:\n    \"\"\"Check if lst is sorted in non-decreasing order.\"\"\"\n    return lst == sorted(lst)\n\ndef g(lst: list = [random.randint(1, 100) for _ in range(10)]):\n    \"\"\"Return a list that is sorted in non-decreasing order.\"\"\"\n    return sorted(lst)\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "idx_generation": 172,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(lst: list) -> bool:\n    \"\"\"Check if lst is sorted in non-decreasing order.\"\"\"\n    return lst == sorted(lst)",
        "solution_func": "def g(lst: list = [random.randint(1, 100) for _ in range(10)]):\n    \"\"\"Return a list that is sorted in non-decreasing order.\"\"\"\n    return sorted(lst)",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the sum of the first n elements in the list is divisible by 3.\"\"\"\n    return sum(lst[:n]) % 3 == 0\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return len(lst)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 172,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the sum of the first n elements in the list is divisible by 3.\"\"\"\n    return sum(lst[:n]) % 3 == 0",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return len(lst)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: int, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find the sum of all the elements in a list and check if it matches the given result.\"\"\"\n    return sum(num_list) == result\ndef g(num_list=[1, 2, 3, 4, 5]):\n    return sum(num_list)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 173,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(result: int, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find the sum of all the elements in a list and check if it matches the given result.\"\"\"\n    return sum(num_list) == result",
        "solution_func": "def g(num_list=[1, 2, 3, 4, 5]):\n    return sum(num_list)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word_list=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Find the longest word in a list and check if it matches the given string.\"\"\"\n    return s == max(word_list, key=len)\ndef g(word_list=['apple', 'banana', 'cherry', 'date']):\n    return max(word_list, key=len)\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 173,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, word_list=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Find the longest word in a list and check if it matches the given string.\"\"\"\n    return s == max(word_list, key=len)",
        "solution_func": "def g(word_list=['apple', 'banana', 'cherry', 'date']):\n    return max(word_list, key=len)",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the given number is present in the list.\"\"\"\n    return num in num_list\ndef g(num_list=[1, 2, 3, 4, 5]):\n    return num_list[0]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 173,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the given number is present in the list.\"\"\"\n    return num in num_list",
        "solution_func": "def g(num_list=[1, 2, 3, 4, 5]):\n    return num_list[0]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10], k=3) -> bool:\n    \"\"\"Given a list of integers and an integer k, determine if there exist k numbers in the list that sum to n.\"\"\"\n    return any((sum(c) == n for c in combinations(nums, k)))\ndef g(nums=[2, 4, 6, 8, 10], k=3):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 173,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10], k=3) -> bool:\n    \"\"\"Given a list of integers and an integer k, determine if there exist k numbers in the list that sum to n.\"\"\"\n    return any((sum(c) == n for c in combinations(nums, k)))",
        "solution_func": "def g(nums=[2, 4, 6, 8, 10], k=3):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, words=['apple', 'banana', 'cherry', 'date', 'elderberry'], k=2) -> bool:\n    \"\"\"Given a list of words and an integer k, determine if there are k words in the list that have a length greater than n.\"\"\"\n    return sum((len(w) > n for w in words)) >= k\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry'], k=2):\n    return words\nassert f(g())\n",
        "emb": null,
        "idx_generation": 173,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, words=['apple', 'banana', 'cherry', 'date', 'elderberry'], k=2) -> bool:\n    \"\"\"Given a list of words and an integer k, determine if there are k words in the list that have a length greater than n.\"\"\"\n    return sum((len(w) > n for w in words)) >= k",
        "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date', 'elderberry'], k=2):\n    return words",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5], k=3) -> bool:\n    \"\"\"Given a list of integers and an integer k, determine if there are k numbers in the list that are divisible by n.\"\"\"\n    return sum((x % n == 0 for x in nums)) >= k\ndef g(nums=[1, 2, 3, 4, 5], k=3):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 173,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5], k=3) -> bool:\n    \"\"\"Given a list of integers and an integer k, determine if there are k numbers in the list that are divisible by n.\"\"\"\n    return sum((x % n == 0 for x in nums)) >= k",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5], k=3):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m: int, matrix: List[List[int]]) -> bool:\n    \"\"\"Given an n x m matrix of integers, determine if it is a magic square.\"\"\"\n    return all((sum(row) == sum(matrix[0]) for row in matrix)) and all((sum(col) == sum(matrix[0]) for col in zip(*matrix))) and sum(matrix[i][i] for i in range(n)) == sum(matrix[i][n - i - 1] for i in range(n))\ndef g(n: int, m: int):\n    matrix = [[i + j for j in range(m)] for i in range(n)]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 173,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m: int, matrix: List[List[int]]) -> bool:\n    \"\"\"Given an n x m matrix of integers, determine if it is a magic square.\"\"\"\n    return all((sum(row) == sum(matrix[0]) for row in matrix)) and all((sum(col) == sum(matrix[0]) for col in zip(*matrix))) and sum(matrix[i][i] for i in range(n)) == sum(matrix[i][n - i - 1] for i in range(n))",
        "solution_func": "def g(n: int, m: int):\n    matrix = [[i + j for j in range(m)] for i in range(n)]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, k: int, nums: List[int]) -> bool:\n    \"\"\"Given a list of integers nums, determine if there exists two distinct indices i and j such that nums[i] = nums[j] and abs(i - j) <= k.\"\"\"\n    return any((nums[i] == nums[j] and abs(i - j) <= k for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(n: int, k: int):\n    nums = [i % 3 for i in range(n)]\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 173,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, k: int, nums: List[int]) -> bool:\n    \"\"\"Given a list of integers nums, determine if there exists two distinct indices i and j such that nums[i] = nums[j] and abs(i - j) <= k.\"\"\"\n    return any((nums[i] == nums[j] and abs(i - j) <= k for i in range(len(nums)) for j in range(i + 1, len(nums))))",
        "solution_func": "def g(n: int, k: int):\n    nums = [i % 3 for i in range(n)]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Given a string s, determine if it is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 173,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Given a string s, determine if it is a palindrome.\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"racecar\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a number that is a perfect square and a perfect cube.\"\"\"\n    return int(n ** (1/2)) ** 2 == n and int(n ** (1/3)) ** 3 == n\ndef g():\n    return 64\nassert f(g())\n",
        "emb": null,
        "idx_generation": 173,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a number that is a perfect square and a perfect cube.\"\"\"\n    return int(n ** (1/2)) ** 2 == n and int(n ** (1/3)) ** 3 == n",
        "solution_func": "def g():\n    return 64",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: float, digits=3) -> bool:\n    \"\"\"Check if the given number has the same first 'digits' digits after squaring it.\"\"\"\n    return str(int(num**2))[:digits] == str(int(num))[:digits]\n\ndef g(digits=3):\n    num = 10 ** (digits - 1)\n    return num\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 174,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(num: float, digits=3) -> bool:\n    \"\"\"Check if the given number has the same first 'digits' digits after squaring it.\"\"\"\n    return str(int(num**2))[:digits] == str(int(num))[:digits]",
        "solution_func": "def g(digits=3):\n    num = 10 ** (digits - 1)\n    return num",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, sub_length=3, sub_count=2) -> bool:\n    \"\"\"Check if there are 'sub_count' number of substrings of length 'sub_length' in the given string that are palindromes.\"\"\"\n    count = 0\n    for i in range(len(string) - sub_length + 1):\n        substring = string[i:i + sub_length]\n        if substring == substring[::-1]:\n            count += 1\n    return count == sub_count\n\ndef g(sub_length=3, sub_count=2):\n    string = \"racecar\" * sub_count\n    return string\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 174,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, sub_length=3, sub_count=2) -> bool:\n    \"\"\"Check if there are 'sub_count' number of substrings of length 'sub_length' in the given string that are palindromes.\"\"\"\n    count = 0\n    for i in range(len(string) - sub_length + 1):\n        substring = string[i:i + sub_length]\n        if substring == substring[::-1]:\n            count += 1\n    return count == sub_count",
        "solution_func": "def g(sub_length=3, sub_count=2):\n    string = \"racecar\" * sub_count\n    return string",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, days=7) -> bool:\n    \"\"\"Check if the given date is a weekend, and if adding 'days' number of days to the date will result in a weekday.\"\"\"\n    given_date = datetime.datetime.strptime(date, \"%Y-%m-%d\").date()\n    is_weekend = given_date.weekday() >= 5\n    new_date = given_date + datetime.timedelta(days=days)\n    is_weekday = new_date.weekday() < 5\n    return is_weekend and is_weekday\n\ndef g(days=7):\n    date = \"2022-01-01\"\n    return date\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 174,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(date: str, days=7) -> bool:\n    \"\"\"Check if the given date is a weekend, and if adding 'days' number of days to the date will result in a weekday.\"\"\"\n    given_date = datetime.datetime.strptime(date, \"%Y-%m-%d\").date()\n    is_weekend = given_date.weekday() >= 5\n    new_date = given_date + datetime.timedelta(days=days)\n    is_weekday = new_date.weekday() < 5\n    return is_weekend and is_weekday",
        "solution_func": "def g(days=7):\n    date = \"2022-01-01\"\n    return date",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes: List[int]) -> bool:\n    \"\"\"Check if the number n is a product of two distinct prime numbers from the given list.\"\"\"\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if primes[i] * primes[j] == n:\n                return True\n    return False\n\ndef g(primes: List[int], target: int):\n    return target, primes\n\nassert f(*g([2, 3, 5, 7, 11, 13], 35))\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 174,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes: List[int]) -> bool:\n    \"\"\"Check if the number n is a product of two distinct prime numbers from the given list.\"\"\"\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if primes[i] * primes[j] == n:\n                return True\n    return False",
        "solution_func": "def g(primes: List[int], target: int):\n    return target, primes",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(a: float, b: float, c: float) -> bool:\n    \"\"\"Check if the given values a, b, and c form a Pythagorean triple.\"\"\"\n    return math.isclose(a**2 + b**2, c**2)\n\ndef g(a: float, b: float, c: float):\n    return a, b, c\n\nassert f(*g(3, 4, 5))\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 174,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(a: float, b: float, c: float) -> bool:\n    \"\"\"Check if the given values a, b, and c form a Pythagorean triple.\"\"\"\n    return math.isclose(a**2 + b**2, c**2)",
        "solution_func": "def g(a: float, b: float, c: float):\n    return a, b, c",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if the number n is a multiple of m.\"\"\"\n    return n % m == 0\n\ndef g(n: int, m: int):\n    return n, m\n\nassert f(*g(15, 3))\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 174,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if the number n is a multiple of m.\"\"\"\n    return n % m == 0",
        "solution_func": "def g(n: int, m: int):\n    return n, m",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(numbers: list, target=100) -> bool:\n    \"\"\"Find a combination of numbers that add up to a target value\"\"\"\n    return sum(numbers) == target\n\ndef g(target=100):\n    numbers = [random.randint(1, 10) for _ in range(10)]\n    return numbers\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 174,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(numbers: list, target=100) -> bool:\n    \"\"\"Find a combination of numbers that add up to a target value\"\"\"\n    return sum(numbers) == target",
        "solution_func": "def g(target=100):\n    numbers = [random.randint(1, 10) for _ in range(10)]\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport itertools\n\ndef f(perm: tuple, n=4) -> bool:\n    \"\"\"Find a permutation of numbers from 1 to n\"\"\"\n    return perm == tuple(range(1, n+1))\n\ndef g(n=4):\n    perms = list(itertools.permutations(range(1, n+1)))\n    return random.choice(perms)\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 174,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\nimport itertools\n\ndef f(perm: tuple, n=4) -> bool:\n    \"\"\"Find a permutation of numbers from 1 to n\"\"\"\n    return perm == tuple(range(1, n+1))",
        "solution_func": "def g(n=4):\n    perms = list(itertools.permutations(range(1, n+1)))\n    return random.choice(perms)",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: list, n=3) -> bool:\n    \"\"\"Find a matrix with all elements equal to a given number\"\"\"\n    return all(all(x == n for x in row) for row in matrix)\n\ndef g(n=3):\n    matrix = [[n] * n for _ in range(n)]\n    return matrix\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 174,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: list, n=3) -> bool:\n    \"\"\"Find a matrix with all elements equal to a given number\"\"\"\n    return all(all(x == n for x in row) for row in matrix)",
        "solution_func": "def g(n=3):\n    matrix = [[n] * n for _ in range(n)]\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=1, b=2) -> bool:\n    \"\"\"Check if x is a perfect square and is greater than a\"\"\"\n    return math.isqrt(x) ** 2 == x and x > a\n\ndef g(a=1, b=2):\n    return (b ** 2) + a + 1\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 174,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=1, b=2) -> bool:\n    \"\"\"Check if x is a perfect square and is greater than a\"\"\"\n    return math.isqrt(x) ** 2 == x and x > a",
        "solution_func": "def g(a=1, b=2):\n    return (b ** 2) + a + 1",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, a=8, b=2) -> bool:\n    \"\"\"Check if x is the result of raising a to the power of b\"\"\"\n    return x == math.pow(a, b)\n\ndef g(a=8, b=2):\n    return int(math.pow(a, b))\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 175,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: int, a=8, b=2) -> bool:\n    \"\"\"Check if x is the result of raising a to the power of b\"\"\"\n    return x == math.pow(a, b)",
        "solution_func": "def g(a=8, b=2):\n    return int(math.pow(a, b))",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, s='racecar') -> bool:\n    \"\"\"Check if x is a palindrome\"\"\"\n    return x == s[::-1]\n\ndef g(s='racecar'):\n    return s\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 175,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, s='racecar') -> bool:\n    \"\"\"Check if x is a palindrome\"\"\"\n    return x == s[::-1]",
        "solution_func": "def g(s='racecar'):\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: list, n=5) -> bool:\n    \"\"\"Check if x is a list containing n elements\"\"\"\n    return len(x) == n\n\ndef g(n=5):\n    return [None] * n\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 175,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: list, n=5) -> bool:\n    \"\"\"Check if x is a list containing n elements\"\"\"\n    return len(x) == n",
        "solution_func": "def g(n=5):\n    return [None] * n",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Check if the given number is present in the list.\"\"\"\n    return n in nums\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return nums[0]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 175,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Check if the given number is present in the list.\"\"\"\n    return n in nums",
        "solution_func": "def g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return nums[0]",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr=\"hello\", case_sensitive=False) -> bool:\n    \"\"\"Check if the given substring is present in the string.\"\"\"\n    if case_sensitive:\n        return substr in string\n    else:\n        return substr.lower() in string.lower()\ndef g(substr=\"hello\", case_sensitive=False):\n    if case_sensitive:\n        return substr\n    else:\n        return substr.lower()\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 175,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substr=\"hello\", case_sensitive=False) -> bool:\n    \"\"\"Check if the given substring is present in the string.\"\"\"\n    if case_sensitive:\n        return substr in string\n    else:\n        return substr.lower() in string.lower()",
        "solution_func": "def g(substr=\"hello\", case_sensitive=False):\n    if case_sensitive:\n        return substr\n    else:\n        return substr.lower()",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is a perfect square.\"\"\"\n    return math.isqrt(n) ** 2 == n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[-1]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 175,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is a perfect square.\"\"\"\n    return math.isqrt(n) ** 2 == n",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[-1]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float) -> bool:\n    \"\"\"Check if the given values form a Pythagorean triple.\"\"\"\n    return math.isclose(math.sqrt(x**2 + y**2), z)\n\ndef g(x: float, y: float):\n    if x == 0 or y == 0:\n        return 0\n    else:\n        return math.sqrt(x**2 + y**2)\n\nassert f(g(x=3.0, y=4.0), x=3.0, y=4.0)\n",
        "emb": null,
        "idx_generation": 175,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float) -> bool:\n    \"\"\"Check if the given values form a Pythagorean triple.\"\"\"\n    return math.isclose(math.sqrt(x**2 + y**2), z)",
        "solution_func": "def g(x: float, y: float):\n    if x == 0 or y == 0:\n        return 0\n    else:\n        return math.sqrt(x**2 + y**2)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if the given string contains the substring 'python'.\"\"\"\n    return substring in s\n\ndef g(s: str):\n    return s + \"python\"\n\nassert f(g(s=\"I love \"), s=\"I love python\")\n",
        "emb": null,
        "idx_generation": 175,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if the given string contains the substring 'python'.\"\"\"\n    return substring in s",
        "solution_func": "def g(s: str):\n    return s + \"python\"",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the given number is in the list.\"\"\"\n    return n in lst\n\ndef g(lst: List[int]):\n    return random.choice(lst)\n\nassert f(g(lst=[1, 2, 3, 4, 5]), lst=[1, 2, 3, 4, 5])\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 175,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the given number is in the list.\"\"\"\n    return n in lst",
        "solution_func": "def g(lst: List[int]):\n    return random.choice(lst)",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], a=5, b=10, count=3) -> bool:\n    \"\"\"Find a list of count or more numbers each between a and b (inclusive) that are divisible by 3\"\"\"\n    return len([n for n in nums if a <= n <= b and n % 3 == 0]) >= count\ndef g(a=5, b=10, count=3):\n    return [n for n in range(a, b + 1) if n % 3 == 0]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 175,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], a=5, b=10, count=3) -> bool:\n    \"\"\"Find a list of count or more numbers each between a and b (inclusive) that are divisible by 3\"\"\"\n    return len([n for n in nums if a <= n <= b and n % 3 == 0]) >= count",
        "solution_func": "def g(a=5, b=10, count=3):\n    return [n for n in range(a, b + 1) if n % 3 == 0]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Find a pair of numbers in the array that sums up to the target\"\"\"\n    return any(x + y == target for x in arr for y in arr if x != y)\ndef g(target=20):\n    arr = random.sample(range(1, 30), 10)\n    return arr\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 176,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Find a pair of numbers in the array that sums up to the target\"\"\"\n    return any(x + y == target for x in arr for y in arr if x != y)",
        "solution_func": "def g(target=20):\n    arr = random.sample(range(1, 30), 10)\n    return arr",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['Python', 'programming'], count=2) -> bool:\n    \"\"\"Find a count number of substrings in the given string\"\"\"\n    return sum(sub in s for sub in substrings) == count\ndef g(substrings=['Python', 'programming'], count=2):\n    return ' '.join(substrings) + ' is fun! ' * count\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 176,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substrings=['Python', 'programming'], count=2) -> bool:\n    \"\"\"Find a count number of substrings in the given string\"\"\"\n    return sum(sub in s for sub in substrings) == count",
        "solution_func": "def g(substrings=['Python', 'programming'], count=2):\n    return ' '.join(substrings) + ' is fun! ' * count",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"Find a pair of numbers in the array that multiplies to the target\"\"\"\n    return any(x * y == target for x in arr for y in arr if x != y)\ndef g(target=50):\n    arr = [2, 10, 5, 8, 4, 7]\n    return arr\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 176,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"Find a pair of numbers in the array that multiplies to the target\"\"\"\n    return any(x * y == target for x in arr for y in arr if x != y)",
        "solution_func": "def g(target=50):\n    arr = [2, 10, 5, 8, 4, 7]\n    return arr",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a sublist of 'nums' that adds up to the target value\"\"\"\n    return any((sum(sublist) == target for sublist in nums))\ndef g(nums: List[int]):\n    random.shuffle(nums)\n    return [nums[0], nums[1]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 176,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a sublist of 'nums' that adds up to the target value\"\"\"\n    return any((sum(sublist) == target for sublist in nums))",
        "solution_func": "def g(nums: List[int]):\n    random.shuffle(nums)\n    return [nums[0], nums[1]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Find a combination of four numbers from 'nums' that can be combined using the operators +, -, *, and / to equal the target value\"\"\"\n    return any((eval(\"\".join(str(num) + op for num, op in zip(subset, operators)) + str(subset[-1])) == target for subset in itertools.combinations(nums, 4) for operators in itertools.product(\"+-*/\", repeat=3)))\ndef g(nums: List[int]):\n    return nums[:4]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 176,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\n\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Find a combination of four numbers from 'nums' that can be combined using the operators +, -, *, and / to equal the target value\"\"\"\n    return any((eval(\"\".join(str(num) + op for num, op in zip(subset, operators)) + str(subset[-1])) == target for subset in itertools.combinations(nums, 4) for operators in itertools.product(\"+-*/\", repeat=3)))",
        "solution_func": "def g(nums: List[int]):\n    return nums[:4]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int], target=2020) -> bool:\n    \"\"\"Find a pair of numbers from 'nums' whose sum is equal to the target value and whose product is a perfect square\"\"\"\n    return any((num1 + num2 == target and math.isqrt(num1 * num2) ** 2 == num1 * num2 for num1 in nums for num2 in nums if num1 != num2))\ndef g(nums: List[int]):\n    return [nums[0], nums[1]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 176,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(nums: List[int], target=2020) -> bool:\n    \"\"\"Find a pair of numbers from 'nums' whose sum is equal to the target value and whose product is a perfect square\"\"\"\n    return any((num1 + num2 == target and math.isqrt(num1 * num2) ** 2 == num1 * num2 for num1 in nums for num2 in nums if num1 != num2))",
        "solution_func": "def g(nums: List[int]):\n    return [nums[0], nums[1]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that adds up to the target\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=100):\n    return list(range(target//2))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 176,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that adds up to the target\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=100):\n    return list(range(target//2))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"Check if the substring is present in the string\"\"\"\n    return substr in string\ndef g(substr='abc'):\n    return 'xyz' + substr\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 176,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"Check if the substring is present in the string\"\"\"\n    return substr in string",
        "solution_func": "def g(substr='abc'):\n    return 'xyz' + substr",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    return any((target in row) for row in matrix)\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 176,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    return any((target in row) for row in matrix)",
        "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, year=2021, month=12, day=25) -> bool:\n    \"\"\"Check if a given date is on a specific day\"\"\"\n    return date.strftime(\"%Y-%m-%d\") == f\"{year}-{month}-{day}\"\n\ndef g(year=2021, month=12, day=25):\n    return datetime.date(year, month, day)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 176,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(date: str, year=2021, month=12, day=25) -> bool:\n    \"\"\"Check if a given date is on a specific day\"\"\"\n    return date.strftime(\"%Y-%m-%d\") == f\"{year}-{month}-{day}\"",
        "solution_func": "def g(year=2021, month=12, day=25):\n    return datetime.date(year, month, day)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Find a permutation of [1, 2, ..., 1000] such that the sum of any two adjacent elements is a perfect square.\"\"\"\n    return sorted(li) == list(range(1, 1001)) and all((is_perfect_square(li[i] + li[i+1]) for i in range(len(li)-1)))\ndef g():\n    li = [1]\n    for i in range(2, 1001):\n        for j in range(len(li)):\n            if is_perfect_square(li[j] + i) and (j == len(li)-1 or is_perfect_square(li[j+1] + i)):\n                li.insert(j+1, i)\n                break\n    return li\ndef is_perfect_square(n: int) -> bool:\n    return int(n**0.5)**2 == n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 177,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Find a permutation of [1, 2, ..., 1000] such that the sum of any two adjacent elements is a perfect square.\"\"\"\n    return sorted(li) == list(range(1, 1001)) and all((is_perfect_square(li[i] + li[i+1]) for i in range(len(li)-1)))",
        "solution_func": "def g():\n    li = [1]\n    for i in range(2, 1001):\n        for j in range(len(li)):\n            if is_perfect_square(li[j] + i) and (j == len(li)-1 or is_perfect_square(li[j+1] + i)):\n                li.insert(j+1, i)\n                break\n    return li\ndef is_perfect_square(n: int) -> bool:\n    return int(n**0.5)**2 == n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"Given a list of words, return True if there exists a word that is a palindrome and has all vowels in it, and False otherwise.\"\"\"\n    return any((is_palindrome(word) and has_all_vowels(word) for word in words))\ndef g():\n    return [\"racecar\", \"python\", \"hello\", \"level\"]\ndef is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef has_all_vowels(s: str) -> bool:\n    vowels = set(\"aeiou\")\n    return vowels.issubset(set(s.lower()))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 177,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"Given a list of words, return True if there exists a word that is a palindrome and has all vowels in it, and False otherwise.\"\"\"\n    return any((is_palindrome(word) and has_all_vowels(word) for word in words))",
        "solution_func": "def g():\n    return [\"racecar\", \"python\", \"hello\", \"level\"]\ndef is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef has_all_vowels(s: str) -> bool:\n    vowels = set(\"aeiou\")\n    return vowels.issubset(set(s.lower()))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Find a permutation of [1, 2, ..., 1000] such that the product of any two adjacent elements is a perfect cube.\"\"\"\n    return sorted(li) == list(range(1, 1001)) and all((is_perfect_cube(li[i] * li[i+1]) for i in range(len(li)-1)))\ndef g():\n    li = [1]\n    for i in range(2, 1001):\n        for j in range(len(li)):\n            if is_perfect_cube(li[j] * i) and (j == len(li)-1 or is_perfect_cube(li[j+1] * i)):\n                li.insert(j+1, i)\n                break\n    return li\ndef is_perfect_cube(n: int) -> bool:\n    return int(n**(1/3))**3 == n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 177,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Find a permutation of [1, 2, ..., 1000] such that the product of any two adjacent elements is a perfect cube.\"\"\"\n    return sorted(li) == list(range(1, 1001)) and all((is_perfect_cube(li[i] * li[i+1]) for i in range(len(li)-1)))",
        "solution_func": "def g():\n    li = [1]\n    for i in range(2, 1001):\n        for j in range(len(li)):\n            if is_perfect_cube(li[j] * i) and (j == len(li)-1 or is_perfect_cube(li[j+1] * i)):\n                li.insert(j+1, i)\n                break\n    return li\ndef is_perfect_cube(n: int) -> bool:\n    return int(n**(1/3))**3 == n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find if there exist two numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [2, 8]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 177,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find if there exist two numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [2, 8]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if a given character is present in the string.\"\"\"\n    return char in s\ndef g(char='a'):\n    return \"apple\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 177,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if a given character is present in the string.\"\"\"\n    return char in s",
        "solution_func": "def g(char='a'):\n    return \"apple\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Find if there exist three numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=5):\n    return [1, 2, 2]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 177,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Find if there exist three numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=5):\n    return [1, 2, 2]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, num_list=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Given a list of numbers, return True if the nth number is divisible by 2 and 3, and False otherwise.\"\"\"\n    return num_list[n] % 2 == 0 and num_list[n] % 3 == 0\ndef g(num_list=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return [num % 2 == 0 and num % 3 == 0 for num in num_list]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 177,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, num_list=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Given a list of numbers, return True if the nth number is divisible by 2 and 3, and False otherwise.\"\"\"\n    return num_list[n] % 2 == 0 and num_list[n] % 3 == 0",
        "solution_func": "def g(num_list=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return [num % 2 == 0 and num % 3 == 0 for num in num_list]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig']) -> bool:\n    \"\"\"Given a string and a list of words, return True if the string contains any word from the list, and False otherwise.\"\"\"\n    return any(word in s for word in words)\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig']):\n    return words[0]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 177,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig']) -> bool:\n    \"\"\"Given a string and a list of words, return True if the string contains any word from the list, and False otherwise.\"\"\"\n    return any(word in s for word in words)",
        "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig']):\n    return words[0]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Given a matrix and an integer n, return True if the sum of the nth row is equal to the sum of the nth column,\nand False otherwise.\"\"\"\n    row_sum = sum(matrix[n])\n    col_sum = sum(row[n] for row in matrix)\n    return row_sum == col_sum\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return 1\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 177,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Given a matrix and an integer n, return True if the sum of the nth row is equal to the sum of the nth column,\nand False otherwise.\"\"\"\n    row_sum = sum(matrix[n])\n    col_sum = sum(row[n] for row in matrix)\n    return row_sum == col_sum",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return 1",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=15) -> bool:\n    \"\"\"Check if any row or column in the matrix sums up to the target value\"\"\"\n    row_sums = np.sum(matrix, axis=1)\n    col_sums = np.sum(matrix, axis=0)\n    return any((row == target or col == target for row, col in zip(row_sums, col_sums)))\n\ndef g(target=15):\n    matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    return matrix\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 177,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=15) -> bool:\n    \"\"\"Check if any row or column in the matrix sums up to the target value\"\"\"\n    row_sums = np.sum(matrix, axis=1)\n    col_sums = np.sum(matrix, axis=0)\n    return any((row == target or col == target for row, col in zip(row_sums, col_sums)))",
        "solution_func": "def g(target=15):\n    matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    return matrix",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k: int) -> bool:\n    \"\"\"Given a string s and an integer k, determine if there exists a substring of s of length k that contains\nexactly three distinct characters.\"\"\"\n    if len(s) < k:\n        return False\n    for i in range(len(s)-k+1):\n        substring = s[i:i+k]\n        distinct_chars = len(set(substring))\n        if distinct_chars == 3:\n            return True\n    return False\ndef g(s=\"abcaabca\", k=4):\n    return s\nassert f(g(), k=4)\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 178,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, k: int) -> bool:\n    \"\"\"Given a string s and an integer k, determine if there exists a substring of s of length k that contains\nexactly three distinct characters.\"\"\"\n    if len(s) < k:\n        return False\n    for i in range(len(s)-k+1):\n        substring = s[i:i+k]\n        distinct_chars = len(set(substring))\n        if distinct_chars == 3:\n            return True\n    return False",
        "solution_func": "def g(s=\"abcaabca\", k=4):\n    return s",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers nums and an integer target, find two distinct indices i and j in the list such that\nnums[i] + nums[j] == target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[2, 4, 6, 8, 10], target=14):\n    return nums, target\nassert f(*g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 178,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers nums and an integer target, find two distinct indices i and j in the list such that\nnums[i] + nums[j] == target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[2, 4, 6, 8, 10], target=14):\n    return nums, target",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Given a sorted 2D matrix of integers matrix and an integer target, determine if target is in the matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    row = 0\n    col = cols - 1\n    while row < rows and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False\ndef g(matrix=[[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 60]], target=16):\n    return matrix, target\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 178,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Given a sorted 2D matrix of integers matrix and an integer target, determine if target is in the matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    row = 0\n    col = cols - 1\n    while row < rows and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False",
        "solution_func": "def g(matrix=[[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 60]], target=16):\n    return matrix, target",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abcde') -> bool:\n    \"\"\"Check if a string contains a given substring\"\"\"\n    return substr in s\ndef g(substr='abcde'):\n    return 'abcdefgh'.replace('f', substr)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 178,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr='abcde') -> bool:\n    \"\"\"Check if a string contains a given substring\"\"\"\n    return substr in s",
        "solution_func": "def g(substr='abcde'):\n    return 'abcdefgh'.replace('f', substr)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: list, target=10) -> bool:\n    \"\"\"Check if any two numbers in a list sum to a given target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 178,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: list, target=10) -> bool:\n    \"\"\"Check if any two numbers in a list sum to a given target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by all the given divisors\"\"\"\n    for divisor in divisors:\n        if n % divisor != 0:\n            return False\n    return True\ndef g(divisors=[2, 3, 5]):\n    return 30\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 178,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, divisors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by all the given divisors\"\"\"\n    for divisor in divisors:\n        if n % divisor != 0:\n            return False\n    return True",
        "solution_func": "def g(divisors=[2, 3, 5]):\n    return 30",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=20, total_sum=100) -> bool:\n    \"\"\"Find a combination of numbers from the list that add up to the target value and the sum of the combination is equal to the total_sum\"\"\"\n    from itertools import combinations\n    for r in range(len(nums) + 1):\n        for subset in combinations(nums, r):\n            if sum(subset) == target and sum(subset) == total_sum:\n                return True\n    return False\ndef g(target=20, total_sum=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 178,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=20, total_sum=100) -> bool:\n    \"\"\"Find a combination of numbers from the list that add up to the target value and the sum of the combination is equal to the total_sum\"\"\"\n    from itertools import combinations\n    for r in range(len(nums) + 1):\n        for subset in combinations(nums, r):\n            if sum(subset) == target and sum(subset) == total_sum:\n                return True\n    return False",
        "solution_func": "def g(target=20, total_sum=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sum=10, column_sum=15) -> bool:\n    \"\"\"Find a row and column combination in the matrix such that the sum of the row is equal to row_sum and the sum of the column is equal to column_sum\"\"\"\n    for i in range(len(matrix)):\n        if sum(matrix[i]) == row_sum:\n            for j in range(len(matrix[0])):\n                if sum(row[j] for row in matrix) == column_sum:\n                    return True\n    return False\ndef g(row_sum=10, column_sum=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 178,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row_sum=10, column_sum=15) -> bool:\n    \"\"\"Find a row and column combination in the matrix such that the sum of the row is equal to row_sum and the sum of the column is equal to column_sum\"\"\"\n    for i in range(len(matrix)):\n        if sum(matrix[i]) == row_sum:\n            for j in range(len(matrix[0])):\n                if sum(row[j] for row in matrix) == column_sum:\n                    return True\n    return False",
        "solution_func": "def g(row_sum=10, column_sum=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(words: List[str], length=5, char_count=10) -> bool:\n    \"\"\"Find a combination of words from the list such that the concatenated string has a length of 'length' and contains 'char_count' number of characters\"\"\"\n    from itertools import permutations\n    for r in range(len(words) + 1):\n        for subset in permutations(words, r):\n            concatenated = ''.join(subset)\n            if len(concatenated) == length and len(set(concatenated)) == char_count:\n                return True\n    return False\ndef g(length=5, char_count=10):\n    return ['cat', 'dog', 'bat']\nassert f(g())\n",
        "emb": null,
        "idx_generation": 178,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(words: List[str], length=5, char_count=10) -> bool:\n    \"\"\"Find a combination of words from the list such that the concatenated string has a length of 'length' and contains 'char_count' number of characters\"\"\"\n    from itertools import permutations\n    for r in range(len(words) + 1):\n        for subset in permutations(words, r):\n            concatenated = ''.join(subset)\n            if len(concatenated) == length and len(set(concatenated)) == char_count:\n                return True\n    return False",
        "solution_func": "def g(length=5, char_count=10):\n    return ['cat', 'dog', 'bat']",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, a=10110101) -> bool:\n    \"\"\"Check if x is a palindrome\"\"\"\n    return str(x) == str(x)[::-1]\ndef g(a=10110101):\n    return int(str(a)[::-1])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 178,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=10110101) -> bool:\n    \"\"\"Check if x is a palindrome\"\"\"\n    return str(x) == str(x)[::-1]",
        "solution_func": "def g(a=10110101):\n    return int(str(a)[::-1])",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=10) -> bool:\n    \"\"\"Check if the sum of any row or column of a 2D array is equal to the target\"\"\"\n    return np.any(np.sum(arr, axis=0) == target) or np.any(np.sum(arr, axis=1) == target)\n\ndef g(arr=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), target=10):\n    return arr\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 179,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=10) -> bool:\n    \"\"\"Check if the sum of any row or column of a 2D array is equal to the target\"\"\"\n    return np.any(np.sum(arr, axis=0) == target) or np.any(np.sum(arr, axis=1) == target)",
        "solution_func": "def g(arr=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), target=10):\n    return arr",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport itertools\n\ndef f(digits: list, target=100) -> bool:\n    \"\"\"Find a combination of digits that equals the target when multiplied\"\"\"\n    for r in range(1, len(digits) + 1):\n        for combination in itertools.combinations(digits, r):\n            if np.prod(combination) == target:\n                return True\n    return False\n\ndef g(digits=[1, 2, 3, 4, 5], target=100):\n    return digits\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 179,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\n\ndef f(digits: list, target=100) -> bool:\n    \"\"\"Find a combination of digits that equals the target when multiplied\"\"\"\n    for r in range(1, len(digits) + 1):\n        for combination in itertools.combinations(digits, r):\n            if np.prod(combination) == target:\n                return True\n    return False",
        "solution_func": "def g(digits=[1, 2, 3, 4, 5], target=100):\n    return digits",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, upper=100) -> bool:\n    \"\"\"Check if a randomly generated number is greater than the upper limit\"\"\"\n    return n > upper\n\ndef g(upper=100):\n    return random.randint(1, 1000)\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 179,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, upper=100) -> bool:\n    \"\"\"Check if a randomly generated number is greater than the upper limit\"\"\"\n    return n > upper",
        "solution_func": "def g(upper=100):\n    return random.randint(1, 1000)",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: int, y: int, z: int, target: int = 10) -> bool:\n    \"\"\"Check if the sum of three numbers is equal to the target\"\"\"\n    return x + y + z == target\n\ndef g(target: int = 10):\n    x = random.randint(1, 10)\n    y = random.randint(1, 10)\n    z = target - x - y\n    return x, y, z\n\nassert f(*g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 179,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(x: int, y: int, z: int, target: int = 10) -> bool:\n    \"\"\"Check if the sum of three numbers is equal to the target\"\"\"\n    return x + y + z == target",
        "solution_func": "def g(target: int = 10):\n    x = random.randint(1, 10)\n    y = random.randint(1, 10)\n    z = target - x - y\n    return x, y, z",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, char_count: int = 3) -> bool:\n    \"\"\"Check if a particular character appears a certain number of times in the given word\"\"\"\n    return word.count(\"a\") == char_count\n\ndef g(char_count: int = 3):\n    word = \"banana\"\n    return word, char_count\n\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 179,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str, char_count: int = 3) -> bool:\n    \"\"\"Check if a particular character appears a certain number of times in the given word\"\"\"\n    return word.count(\"a\") == char_count",
        "solution_func": "def g(char_count: int = 3):\n    word = \"banana\"\n    return word, char_count",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\nimport math\n\ndef f(x: int, y: int, z: int, target: int = 10) -> bool:\n    \"\"\"Check if the sum of the squares of three numbers is equal to the square of the target\"\"\"\n    return x**2 + y**2 + z**2 == target**2\n\ndef g(target: int = 10):\n    x = math.sqrt(random.randint(1, target))\n    y = math.sqrt(random.randint(1, target))\n    z = math.sqrt(target**2 - x**2 - y**2)\n    return int(x), int(y), int(z)\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 179,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\nimport math\n\ndef f(x: int, y: int, z: int, target: int = 10) -> bool:\n    \"\"\"Check if the sum of the squares of three numbers is equal to the square of the target\"\"\"\n    return x**2 + y**2 + z**2 == target**2",
        "solution_func": "def g(target: int = 10):\n    x = math.sqrt(random.randint(1, target))\n    y = math.sqrt(random.randint(1, target))\n    z = math.sqrt(target**2 - x**2 - y**2)\n    return int(x), int(y), int(z)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, find if there exists a subarray such that the sum of its elements is equal to n.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if sum(arr[i:j]) == n:\n                return True\n    return False\ndef g(arr: List[int]):\n    return sum(arr)//2\nassert f(g(), arr=[-1, 2, 3, 8, 5])\n",
        "emb": null,
        "idx_generation": 179,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, find if there exists a subarray such that the sum of its elements is equal to n.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if sum(arr[i:j]) == n:\n                return True\n    return False",
        "solution_func": "def g(arr: List[int]):\n    return sum(arr)//2",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, find if there exists a subsequence such that the product of its elements is equal to n.\"\"\"\n    def dfs(arr, k, product):\n        if k == len(arr):\n            return product == n\n        return dfs(arr, k+1, product) or dfs(arr, k+1, product*arr[k])\n    return dfs(arr, 0, 1)\ndef g(arr: List[int]):\n    return arr[0] * arr[1]\nassert f(g(), arr=[2, 4, 6, 8, 10])\n",
        "emb": null,
        "idx_generation": 179,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, find if there exists a subsequence such that the product of its elements is equal to n.\"\"\"\n    def dfs(arr, k, product):\n        if k == len(arr):\n            return product == n\n        return dfs(arr, k+1, product) or dfs(arr, k+1, product*arr[k])\n    return dfs(arr, 0, 1)",
        "solution_func": "def g(arr: List[int]):\n    return arr[0] * arr[1]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(m: int, n: int) -> bool:\n    \"\"\"Given two positive integers m and n, find if it is possible to construct a matrix of size m x n such that\n    every row and every column has exactly one occurrence of each digit from 1 to min(m, n).\"\"\"\n    def check_rows(matrix):\n        for row in matrix:\n            if len(set(row)) != min(m, n):\n                return False\n        return True\n    \n    def check_columns(matrix):\n        for j in range(n):\n            column = [matrix[i][j] for i in range(m)]\n            if len(set(column)) != min(m, n):\n                return False\n        return True\n    \n    matrix = [[0] * n for _ in range(m)]\n    digits = list(range(1, min(m, n)+1))\n    \n    def dfs(matrix, i, j):\n        if i == m:\n            return check_rows(matrix) and check_columns(matrix)\n        if j == n:\n            return dfs(matrix, i+1, 0)\n        \n        for digit in digits:\n            if (digit not in matrix[i]) and all(matrix[row][j] != digit for row in range(i)):\n                matrix[i][j] = digit\n                if dfs(matrix, i, j+1):\n                    return True\n                matrix[i][j] = 0\n        \n        return False\n    \n    return dfs(matrix, 0, 0)\ndef g(m: int, n: int):\n    return min(m, n)\nassert f(g(), n=4)\n",
        "emb": null,
        "idx_generation": 179,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(m: int, n: int) -> bool:\n    \"\"\"Given two positive integers m and n, find if it is possible to construct a matrix of size m x n such that\n    every row and every column has exactly one occurrence of each digit from 1 to min(m, n).\"\"\"\n    def check_rows(matrix):\n        for row in matrix:\n            if len(set(row)) != min(m, n):\n                return False\n        return True\n    \n    def check_columns(matrix):\n        for j in range(n):\n            column = [matrix[i][j] for i in range(m)]\n            if len(set(column)) != min(m, n):\n                return False\n        return True\n    \n    matrix = [[0] * n for _ in range(m)]\n    digits = list(range(1, min(m, n)+1))\n    \n    def dfs(matrix, i, j):\n        if i == m:\n            return check_rows(matrix) and check_columns(matrix)\n        if j == n:\n            return dfs(matrix, i+1, 0)\n        \n        for digit in digits:\n            if (digit not in matrix[i]) and all(matrix[row][j] != digit for row in range(i)):\n                matrix[i][j] = digit\n                if dfs(matrix, i, j+1):\n                    return True\n                matrix[i][j] = 0\n        \n        return False\n    \n    return dfs(matrix, 0, 0)",
        "solution_func": "def g(m: int, n: int):\n    return min(m, n)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, threshold=0.5) -> bool:\n    \"\"\"Check if the average of the array elements is above the threshold\"\"\"\n    return np.mean(arr) > threshold\n\ndef g(size=100, threshold=0.5):\n    return np.random.random(size=size)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 179,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, threshold=0.5) -> bool:\n    \"\"\"Check if the average of the array elements is above the threshold\"\"\"\n    return np.mean(arr) > threshold",
        "solution_func": "def g(size=100, threshold=0.5):\n    return np.random.random(size=size)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=5, b=7, c=13) -> bool:\n    \"\"\"Check if a number is divisible by either a, b, or c.\"\"\"\n    return x % a == 0 or x % b == 0 or x % c == 0\ndef g(a=5, b=7, c=13):\n    return a * b * c\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 180,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=5, b=7, c=13) -> bool:\n    \"\"\"Check if a number is divisible by either a, b, or c.\"\"\"\n    return x % a == 0 or x % b == 0 or x % c == 0",
        "solution_func": "def g(a=5, b=7, c=13):\n    return a * b * c",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, a=17, b=23) -> bool:\n    \"\"\"Check if a number is a perfect square and if its square root is divisible by both a and b.\"\"\"\n    return math.isqrt(x) ** 2 == x and math.isqrt(x) % a == 0 and math.isqrt(x) % b == 0\ndef g(a=17, b=23):\n    return a * b\nassert f(g())\n",
        "emb": null,
        "idx_generation": 180,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: int, a=17, b=23) -> bool:\n    \"\"\"Check if a number is a perfect square and if its square root is divisible by both a and b.\"\"\"\n    return math.isqrt(x) ** 2 == x and math.isqrt(x) % a == 0 and math.isqrt(x) % b == 0",
        "solution_func": "def g(a=17, b=23):\n    return a * b",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, a=3, b=5, c=7) -> bool:\n    \"\"\"Check if a number is a prime number and if it is greater than a, b, and c.\"\"\"\n    if x <= 1:\n        return False\n    for i in range(2, int(x ** 0.5) + 1):\n        if x % i == 0:\n            return False\n    return x > a and x > b and x > c\ndef g(a=3, b=5, c=7):\n    return max(a, b, c) + 1\nassert f(g())\n",
        "emb": null,
        "idx_generation": 180,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=3, b=5, c=7) -> bool:\n    \"\"\"Check if a number is a prime number and if it is greater than a, b, and c.\"\"\"\n    if x <= 1:\n        return False\n    for i in range(2, int(x ** 0.5) + 1):\n        if x % i == 0:\n            return False\n    return x > a and x > b and x > c",
        "solution_func": "def g(a=3, b=5, c=7):\n    return max(a, b, c) + 1",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(s: str, num_list=[16, 25, 36, 49, 64, 81]) -> bool:\n    \"\"\"Find if the square root of s is in the num_list\"\"\"\n    return math.sqrt(s) in num_list\n\ndef g(num_list=[16, 25, 36, 49, 64, 81]):\n    return num_list[0]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 180,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(s: str, num_list=[16, 25, 36, 49, 64, 81]) -> bool:\n    \"\"\"Find if the square root of s is in the num_list\"\"\"\n    return math.sqrt(s) in num_list",
        "solution_func": "def g(num_list=[16, 25, 36, 49, 64, 81]):\n    return num_list[0]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, a='banana', b='apple') -> bool:\n    \"\"\"Find if the string s is a substring of both a and b\"\"\"\n    return s in a and s in b\n\ndef g(a='banana', b='apple'):\n    return a[1:3]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 180,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, a='banana', b='apple') -> bool:\n    \"\"\"Find if the string s is a substring of both a and b\"\"\"\n    return s in a and s in b",
        "solution_func": "def g(a='banana', b='apple'):\n    return a[1:3]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find if there is a pair of numbers in nums that sum up to the target\"\"\"\n    for i, num in enumerate(nums):\n        if target - num in nums[i+1:]:\n            return True\n    return False\n\ndef g(target=15):\n    return [4, 5, 6, 7, 8]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 180,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find if there is a pair of numbers in nums that sum up to the target\"\"\"\n    for i, num in enumerate(nums):\n        if target - num in nums[i+1:]:\n            return True\n    return False",
        "solution_func": "def g(target=15):\n    return [4, 5, 6, 7, 8]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(d: datetime, day='Monday') -> bool:\n    \"\"\"Check if the given date falls on a specific day of the week\"\"\"\n    return d.strftime('%A') == day\ndef g(day='Monday'):\n    return datetime.strptime('2022-01-01', '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 180,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(d: datetime, day='Monday') -> bool:\n    \"\"\"Check if the given date falls on a specific day of the week\"\"\"\n    return d.strftime('%A') == day",
        "solution_func": "def g(day='Monday'):\n    return datetime.strptime('2022-01-01', '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m=5, p=2) -> bool:\n    \"\"\"Check if the sum of the digits of a number is divisible by another number\"\"\"\n    return sum(int(digit) for digit in str(n)) % p == 0\ndef g(m=5, p=2):\n    return int('9' * m)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 180,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=5, p=2) -> bool:\n    \"\"\"Check if the sum of the digits of a number is divisible by another number\"\"\"\n    return sum(int(digit) for digit in str(n)) % p == 0",
        "solution_func": "def g(m=5, p=2):\n    return int('9' * m)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, prefix=\"hello\", suffix=\"world\") -> bool:\n    \"\"\"Check if a string starts with a specific prefix and ends with a specific suffix\"\"\"\n    return s.startswith(prefix) and s.endswith(suffix)\ndef g(prefix=\"hello\", suffix=\"world\"):\n    return prefix.upper() + ' Python ' + suffix.upper()\nassert f(g())\n",
        "emb": null,
        "idx_generation": 180,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, prefix=\"hello\", suffix=\"world\") -> bool:\n    \"\"\"Check if a string starts with a specific prefix and ends with a specific suffix\"\"\"\n    return s.startswith(prefix) and s.endswith(suffix)",
        "solution_func": "def g(prefix=\"hello\", suffix=\"world\"):\n    return prefix.upper() + ' Python ' + suffix.upper()",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from the given list that add up to the target value\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [2, 8]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 180,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from the given list that add up to the target value\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=10):\n    return [2, 8]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['python', 'coding', 'puzzle', 'challenge']) -> bool:\n    \"\"\"Check if a string contains all the substrings in a specific order\"\"\"\n    indices = [s.find(sub) for sub in substrings]\n    return all(i != -1 for i in indices) and sorted(indices) == indices\ndef g(substrings=['python', 'coding', 'puzzle', 'challenge']):\n    return ''.join(substrings)\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 181,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substrings=['python', 'coding', 'puzzle', 'challenge']) -> bool:\n    \"\"\"Check if a string contains all the substrings in a specific order\"\"\"\n    indices = [s.find(sub) for sub in substrings]\n    return all(i != -1 for i in indices) and sorted(indices) == indices",
        "solution_func": "def g(substrings=['python', 'coding', 'puzzle', 'challenge']):\n    return ''.join(substrings)",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: list, target=100, k=3) -> bool:\n    \"\"\"Find if there exists a combination of k numbers that sum up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))\ndef g(target=100, k=3):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 181,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: list, target=100, k=3) -> bool:\n    \"\"\"Find if there exists a combination of k numbers that sum up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))",
        "solution_func": "def g(target=100, k=3):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: list, row_sums=[15, 15, 15], col_sums=[15, 15, 15]) -> bool:\n    \"\"\"Check if a matrix satisfies the given row and column sums\"\"\"\n    return all(sum(row) == row_sum for row, row_sum in zip(matrix, row_sums)) and all(sum(col) == col_sum for col, col_sum in zip(zip(*matrix), col_sums))\ndef g(row_sums=[15, 15, 15], col_sums=[15, 15, 15]):\n    return [[5, 5, 5], [5, 5, 5], [5, 5, 5]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 181,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: list, row_sums=[15, 15, 15], col_sums=[15, 15, 15]) -> bool:\n    \"\"\"Check if a matrix satisfies the given row and column sums\"\"\"\n    return all(sum(row) == row_sum for row, row_sum in zip(matrix, row_sums)) and all(sum(col) == col_sum for col, col_sum in zip(zip(*matrix), col_sums))",
        "solution_func": "def g(row_sums=[15, 15, 15], col_sums=[15, 15, 15]):\n    return [[5, 5, 5], [5, 5, 5], [5, 5, 5]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, row_sum=54, col_sum=45) -> bool:\n    \"\"\"Check if the sum of each row and each column of the matrix is equal to the given values\"\"\"\n    row_sum_check = np.all(np.sum(matrix, axis=1) == row_sum)\n    col_sum_check = np.all(np.sum(matrix, axis=0) == col_sum)\n    return row_sum_check and col_sum_check\n\ndef g(row_sum=54, col_sum=45):\n    matrix = np.full((3, 3), 3)\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 181,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, row_sum=54, col_sum=45) -> bool:\n    \"\"\"Check if the sum of each row and each column of the matrix is equal to the given values\"\"\"\n    row_sum_check = np.all(np.sum(matrix, axis=1) == row_sum)\n    col_sum_check = np.all(np.sum(matrix, axis=0) == col_sum)\n    return row_sum_check and col_sum_check",
        "solution_func": "def g(row_sum=54, col_sum=45):\n    matrix = np.full((3, 3), 3)\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(numbers: list, target=200) -> bool:\n    \"\"\"Check if it is possible to find two numbers in the list whose sum is equal to the target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=200):\n    numbers = random.sample(range(1, 101), 10)\n    return numbers\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 181,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(numbers: list, target=200) -> bool:\n    \"\"\"Check if it is possible to find two numbers in the list whose sum is equal to the target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=200):\n    numbers = random.sample(range(1, 101), 10)\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=3, length=12) -> bool:\n    \"\"\"Check if the string contains a certain number of copies of a given substring and matches the given length\"\"\"\n    return string.count(substring) == count and len(string) == length\n\ndef g(substring='abc', count=3, length=12):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * c\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 181,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='abc', count=3, length=12) -> bool:\n    \"\"\"Check if the string contains a certain number of copies of a given substring and matches the given length\"\"\"\n    return string.count(substring) == count and len(string) == length",
        "solution_func": "def g(substring='abc', count=3, length=12):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * c",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Given a list of positive integers, find a subset of numbers that sum up to a target sum.\"\"\"\n    def subset_sum(arr, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if arr[n-1] > target_sum:\n            return subset_sum(arr, n-1, target_sum)\n        return subset_sum(arr, n-1, target_sum) or subset_sum(arr, n-1, target_sum-arr[n-1])\n\n    return subset_sum(arr, len(arr), target_sum)\n\ndef g():\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 181,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Given a list of positive integers, find a subset of numbers that sum up to a target sum.\"\"\"\n    def subset_sum(arr, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if arr[n-1] > target_sum:\n            return subset_sum(arr, n-1, target_sum)\n        return subset_sum(arr, n-1, target_sum) or subset_sum(arr, n-1, target_sum-arr[n-1])\n\n    return subset_sum(arr, len(arr), target_sum)",
        "solution_func": "def g():\n    return [10, 20, 30, 40, 50]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Given an integer n, find a list of k prime numbers that sum up to n.\"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    i = 2\n    while len(primes) < k:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n\n    return sum(primes) == n\n\ndef g(k=3):\n    return k*2\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 181,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Given an integer n, find a list of k prime numbers that sum up to n.\"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    i = 2\n    while len(primes) < k:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n\n    return sum(primes) == n",
        "solution_func": "def g(k=3):\n    return k*2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Given a string, find if it contains a substring that starts with 'abc' and ends with 'xyz'.\"\"\"\n    return substr in s\n\ndef g():\n    return \"xyzabc123\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 181,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Given a string, find if it contains a substring that starts with 'abc' and ends with 'xyz'.\"\"\"\n    return substr in s",
        "solution_func": "def g():\n    return \"xyzabc123\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(result: int, target=42) -> bool:\n    \"\"\"Generate a random sequence of numbers and find the sum of the numbers that add up to the target.\"\"\"\n    sequence = [random.randint(1, 10) for _ in range(10)]\n    current_sum = 0\n    for num in sequence:\n        current_sum += num\n        if current_sum == target:\n            return True\n        elif current_sum > target:\n            current_sum = num\n    return False\n\ndef g(target=42):\n    return target\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 181,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(result: int, target=42) -> bool:\n    \"\"\"Generate a random sequence of numbers and find the sum of the numbers that add up to the target.\"\"\"\n    sequence = [random.randint(1, 10) for _ in range(10)]\n    current_sum = 0\n    for num in sequence:\n        current_sum += num\n        if current_sum == target:\n            return True\n        elif current_sum > target:\n            current_sum = num\n    return False",
        "solution_func": "def g(target=42):\n    return target",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find two numbers in a list that add up to a target value.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 182,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find two numbers in a list that add up to a target value.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], row=2, col=2) -> bool:\n    \"\"\"Find the sum of the elements in a specific row and column of a matrix.\"\"\"\n    return sum(matrix[row]) == sum(row[col] for row in matrix)\ndef g(row=2, col=2):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 182,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row=2, col=2) -> bool:\n    \"\"\"Find the sum of the elements in a specific row and column of a matrix.\"\"\"\n    return sum(matrix[row]) == sum(row[col] for row in matrix)",
        "solution_func": "def g(row=2, col=2):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], prefix='Dr.') -> bool:\n    \"\"\"Check if all names in a list have a specific prefix.\"\"\"\n    return all(name.startswith(prefix) for name in names)\ndef g(prefix='Dr.'):\n    return ['Dr. John', 'Dr. Jane', 'Dr. David']\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 182,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(names: List[str], prefix='Dr.') -> bool:\n    \"\"\"Check if all names in a list have a specific prefix.\"\"\"\n    return all(name.startswith(prefix) for name in names)",
        "solution_func": "def g(prefix='Dr.'):\n    return ['Dr. John', 'Dr. Jane', 'Dr. David']",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Determine if a string contains a substring that appears exactly n times.\"\"\"\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j] == s[:j-i]:\n                count += 1\n    return count == n\ndef g(s=\"ababab\"):\n    return s\nassert f(g())\n",
        "emb": null,
        "idx_generation": 182,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Determine if a string contains a substring that appears exactly n times.\"\"\"\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j] == s[:j-i]:\n                count += 1\n    return count == n",
        "solution_func": "def g(s=\"ababab\"):\n    return s",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find if the sum of any two numbers in a list equals a target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\nassert f(g())\n",
        "emb": null,
        "idx_generation": 182,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find if the sum of any two numbers in a list equals a target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5]):\n    return arr",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], row=2, col=2) -> bool:\n    \"\"\"Check if the given element is the maximum in its row and minimum in its column in a matrix.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] > matrix[row][col] and (i != row or j != col):\n                return False\n            if matrix[i][j] < matrix[row][col] and (i != row or j != col):\n                return False\n    return True\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 182,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row=2, col=2) -> bool:\n    \"\"\"Check if the given element is the maximum in its row and minimum in its column in a matrix.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] > matrix[row][col] and (i != row or j != col):\n                return False\n            if matrix[i][j] < matrix[row][col] and (i != row or j != col):\n                return False\n    return True",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=100, count=5) -> bool:\n    \"\"\"Find a list of count numbers that add up to the target number\"\"\"\n    return sum(nums) == target and len(nums) == count\ndef g(target=100, count=5):\n    nums = []\n    while sum(nums) < target:\n        nums.append(random.randint(1, 10))\n    if sum(nums) > target:\n        nums.pop()\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 182,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target=100, count=5) -> bool:\n    \"\"\"Find a list of count numbers that add up to the target number\"\"\"\n    return sum(nums) == target and len(nums) == count",
        "solution_func": "def g(target=100, count=5):\n    nums = []\n    while sum(nums) < target:\n        nums.append(random.randint(1, 10))\n    if sum(nums) > target:\n        nums.pop()\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=2) -> bool:\n    \"\"\"Find a substring with a certain count in a given string\"\"\"\n    return string.count(substring) == count\ndef g(substring='abc', count=2):\n    string = substring * count\n    return string\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 182,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='abc', count=2) -> bool:\n    \"\"\"Find a substring with a certain count in a given string\"\"\"\n    return string.count(substring) == count",
        "solution_func": "def g(substring='abc', count=2):\n    string = substring * count\n    return string",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\nimport math\n\ndef f(num: int, a=2, b=5) -> bool:\n    \"\"\"Check if a number is a power of another number within a given range\"\"\"\n    return any(a ** i == num for i in range(b + 1))\ndef g(a=2, b=5):\n    num = random.randint(a ** b, math.floor(a ** b * 10))\n    return num\nassert f(g())\n",
        "emb": null,
        "idx_generation": 182,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\nimport math\n\ndef f(num: int, a=2, b=5) -> bool:\n    \"\"\"Check if a number is a power of another number within a given range\"\"\"\n    return any(a ** i == num for i in range(b + 1))",
        "solution_func": "def g(a=2, b=5):\n    num = random.randint(a ** b, math.floor(a ** b * 10))\n    return num",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, day_of_week='Monday') -> bool:\n    \"\"\"Check if the given date is on a specific day of the week.\"\"\"\n    weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    d = datetime.datetime.strptime(date, '%Y-%m-%d')\n    return weekdays[d.weekday()] == day_of_week\n\ndef g(day_of_week='Monday'):\n    today = datetime.datetime.now()\n    days_ahead = (weekdays.index(day_of_week) - today.weekday()) % 7\n    target_date = today + datetime.timedelta(days=days_ahead)\n    return target_date.strftime('%Y-%m-%d')\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 182,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(date: str, day_of_week='Monday') -> bool:\n    \"\"\"Check if the given date is on a specific day of the week.\"\"\"\n    weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    d = datetime.datetime.strptime(date, '%Y-%m-%d')\n    return weekdays[d.weekday()] == day_of_week",
        "solution_func": "def g(day_of_week='Monday'):\n    today = datetime.datetime.now()\n    days_ahead = (weekdays.index(day_of_week) - today.weekday()) % 7\n    target_date = today + datetime.timedelta(days=days_ahead)\n    return target_date.strftime('%Y-%m-%d')",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], target_sum=100) -> bool:\n    \"\"\"Find a subset of x that adds up to target_sum\"\"\"\n    import itertools\n    subset_sums = [sum(comb) for r in range(len(x)+1) for comb in itertools.combinations(x, r)]\n    return target_sum in subset_sums\ndef g(target_sum=100):\n    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return x\nassert f(g())\n",
        "emb": null,
        "idx_generation": 183,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(x: List[int], target_sum=100) -> bool:\n    \"\"\"Find a subset of x that adds up to target_sum\"\"\"\n    import itertools\n    subset_sums = [sum(comb) for r in range(len(x)+1) for comb in itertools.combinations(x, r)]\n    return target_sum in subset_sums",
        "solution_func": "def g(target_sum=100):\n    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return x",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], target=24) -> bool:\n    \"\"\"Find a way to combine the numbers in x using the operations +, -, *, and / to equal the target number\"\"\"\n    import itertools\n    operators = ['+', '-', '*', '/']\n    expressions = [''.join(comb) for r in range(1, len(x)+1) for comb in itertools.product(x, repeat=r) for op_comb in itertools.product(operators, repeat=r-1)]\n    results = [eval(expression) for expression in expressions]\n    return target in results\ndef g(target=24):\n    x = [4, 6, 8, 12]\n    return x\nassert f(g())\n",
        "emb": null,
        "idx_generation": 183,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(x: List[int], target=24) -> bool:\n    \"\"\"Find a way to combine the numbers in x using the operations +, -, *, and / to equal the target number\"\"\"\n    import itertools\n    operators = ['+', '-', '*', '/']\n    expressions = [''.join(comb) for r in range(1, len(x)+1) for comb in itertools.product(x, repeat=r) for op_comb in itertools.product(operators, repeat=r-1)]\n    results = [eval(expression) for expression in expressions]\n    return target in results",
        "solution_func": "def g(target=24):\n    x = [4, 6, 8, 12]\n    return x",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"Find a combination of n positive integers that add up to target\"\"\"\n    import itertools\n    combinations = [comb for comb in itertools.combinations(range(1, target+1), n) if sum(comb) == target]\n    return len(combinations) > 0\ndef g(target=100):\n    n = 5\n    return n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 183,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"Find a combination of n positive integers that add up to target\"\"\"\n    import itertools\n    combinations = [comb for comb in itertools.combinations(range(1, target+1), n) if sum(comb) == target]\n    return len(combinations) > 0",
        "solution_func": "def g(target=100):\n    n = 5\n    return n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23]) -> bool:\n    \"\"\"Check if a number is divisible by all primes in the list\"\"\"\n    for prime in primes:\n        if n % prime != 0:\n            return False\n    return True\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23]):\n    ans = 1\n    for prime in primes:\n        ans *= prime\n    return ans\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 183,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23]) -> bool:\n    \"\"\"Check if a number is divisible by all primes in the list\"\"\"\n    for prime in primes:\n        if n % prime != 0:\n            return False\n    return True",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23]):\n    ans = 1\n    for prime in primes:\n        ans *= prime\n    return ans",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 5, 7, 8, 10, 11, 13, 14]) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to n\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == n:\n                return True\n    return False\ndef g(nums=[2, 4, 5, 7, 8, 10, 11, 13, 14]):\n    return nums[0] + nums[1]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 183,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[2, 4, 5, 7, 8, 10, 11, 13, 14]) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to n\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == n:\n                return True\n    return False",
        "solution_func": "def g(nums=[2, 4, 5, 7, 8, 10, 11, 13, 14]):\n    return nums[0] + nums[1]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if all vowels in the word are in the list\"\"\"\n    for char in word:\n        if char.lower() in vowels:\n            return False\n    return True\ndef g(vowels=['a', 'e', 'i', 'o', 'u']):\n    return \"bcdfghjklmnpqrstvwxyz\"\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 183,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if all vowels in the word are in the list\"\"\"\n    for char in word:\n        if char.lower() in vowels:\n            return False\n    return True",
        "solution_func": "def g(vowels=['a', 'e', 'i', 'o', 'u']):\n    return \"bcdfghjklmnpqrstvwxyz\"",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(seq: List[int], target: int = 10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the sequence that adds up to the target\"\"\"\n    return any((seq[i] + seq[j] == target) for i in range(len(seq)) for j in range(i+1, len(seq)))\ndef g(target: int = 10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 183,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(seq: List[int], target: int = 10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the sequence that adds up to the target\"\"\"\n    return any((seq[i] + seq[j] == target) for i in range(len(seq)) for j in range(i+1, len(seq)))",
        "solution_func": "def g(target: int = 10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"Determine if there exists a triplet of numbers in the list that adds up to the target\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target) for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(target: int = 0):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 183,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"Determine if there exists a triplet of numbers in the list that adds up to the target\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target) for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))",
        "solution_func": "def g(target: int = 0):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if the given matrix is symmetric along its main diagonal\"\"\"\n    return all((matrix[i][j] == matrix[j][i]) for i in range(len(matrix)) for j in range(len(matrix[0])))\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 183,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if the given matrix is symmetric along its main diagonal\"\"\"\n    return all((matrix[i][j] == matrix[j][i]) for i in range(len(matrix)) for j in range(len(matrix[0])))",
        "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=9) -> bool:\n    \"\"\"Find a target number in the given matrix\"\"\"\n    return any(target in row for row in matrix)\ndef g(target=9):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 183,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=9) -> bool:\n    \"\"\"Find a target number in the given matrix\"\"\"\n    return any(target in row for row in matrix)",
        "solution_func": "def g(target=9):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target\"\"\"\n    return any((s[i] + s[j] == target) for i in range(len(s)) for j in range(i+1, len(s)))\ndef g(target=10):\n    return [2, 4, 6, 8]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 184,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target\"\"\"\n    return any((s[i] + s[j] == target) for i in range(len(s)) for j in range(i+1, len(s)))",
        "solution_func": "def g(target=10):\n    return [2, 4, 6, 8]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the string is a palindrome and has length n\"\"\"\n    return len(s) == n and s == s[::-1]\ndef g(n=5):\n    return \"radar\"\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 184,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the string is a palindrome and has length n\"\"\"\n    return len(s) == n and s == s[::-1]",
        "solution_func": "def g(n=5):\n    return \"radar\"",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: List[int], target=20) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target\"\"\"\n    return any((s[i] + s[j] + s[k] == target) for i in range(len(s)) for j in range(i+1, len(s)) for k in range(j+1, len(s)))\ndef g(target=20):\n    return [5, 10, 2, 8, 15]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 184,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: List[int], target=20) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target\"\"\"\n    return any((s[i] + s[j] + s[k] == target) for i in range(len(s)) for j in range(i+1, len(s)) for k in range(j+1, len(s)))",
        "solution_func": "def g(target=20):\n    return [5, 10, 2, 8, 15]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, character='a', count=3) -> bool:\n    \"\"\"Find if a given character appears count or more times in the given string\"\"\"\n    return string.count(character) >= count\ndef g(character='a', count=3):\n    return character * count\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 184,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, character='a', count=3) -> bool:\n    \"\"\"Find if a given character appears count or more times in the given string\"\"\"\n    return string.count(character) >= count",
        "solution_func": "def g(character='a', count=3):\n    return character * count",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum=100, count=5) -> bool:\n    \"\"\"Find a list of count or more numbers from the given list that sum up to target_sum\"\"\"\n    assert sum(nums) >= target_sum\n    combinations = []\n    for i in range(1, len(nums) + 1):\n        combinations += list(itertools.combinations(nums, i))\n    for comb in combinations:\n        if sum(comb) == target_sum and len(comb) >= count:\n            return True\n    return False\ndef g(target_sum=100, count=5):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return list(itertools.combinations(nums, count))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 184,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum=100, count=5) -> bool:\n    \"\"\"Find a list of count or more numbers from the given list that sum up to target_sum\"\"\"\n    assert sum(nums) >= target_sum\n    combinations = []\n    for i in range(1, len(nums) + 1):\n        combinations += list(itertools.combinations(nums, i))\n    for comb in combinations:\n        if sum(comb) == target_sum and len(comb) >= count:\n            return True\n    return False",
        "solution_func": "def g(target_sum=100, count=5):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return list(itertools.combinations(nums, count))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_num=7, count=2) -> bool:\n    \"\"\"Find if there are count or more occurrences of target_num in the matrix\"\"\"\n    return sum(row.count(target_num) for row in matrix) >= count\ndef g(target_num=7, count=2):\n    matrix = [[1, 2, 3, 4, 5],\n              [6, 7, 8, 9, 10],\n              [11, 12, 13, 14, 15],\n              [16, 17, 18, 19, 20],\n              [21, 22, 23, 24, 25]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 184,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_num=7, count=2) -> bool:\n    \"\"\"Find if there are count or more occurrences of target_num in the matrix\"\"\"\n    return sum(row.count(target_num) for row in matrix) >= count",
        "solution_func": "def g(target_num=7, count=2):\n    matrix = [[1, 2, 3, 4, 5],\n              [6, 7, 8, 9, 10],\n              [11, 12, 13, 14, 15],\n              [16, 17, 18, 19, 20],\n              [21, 22, 23, 24, 25]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, m=1000) -> bool:\n    \"\"\"Find a number that is divisible by n and less than or equal to m.\"\"\"\n    return m % n == 0 and m // n <= m\ndef g(n=3, m=1000):\n    import random\n    return random.randint(1, m // n) * n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 184,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(n: int, m=1000) -> bool:\n    \"\"\"Find a number that is divisible by n and less than or equal to m.\"\"\"\n    return m % n == 0 and m // n <= m",
        "solution_func": "def g(n=3, m=1000):\n    import random\n    return random.randint(1, m // n) * n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Find a string that contains n consecutive occurrences of the letter 'a'.\"\"\"\n    return 'a' * n in s\ndef g(n=3):\n    import random\n    return 'a' * (random.randint(1, 10) * n)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 184,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Find a string that contains n consecutive occurrences of the letter 'a'.\"\"\"\n    return 'a' * n in s",
        "solution_func": "def g(n=3):\n    import random\n    return 'a' * (random.randint(1, 10) * n)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, k=5) -> bool:\n    \"\"\"Find a string that contains at least k vowels.\"\"\"\n    vowels = 'aeiou'\n    return sum(1 for c in s if c.lower() in vowels) >= k\ndef g(k=5):\n    import random\n    vowels = 'aeiou'\n    return ''.join(random.choice(vowels) for _ in range(k))\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 184,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(s: str, k=5) -> bool:\n    \"\"\"Find a string that contains at least k vowels.\"\"\"\n    vowels = 'aeiou'\n    return sum(1 for c in s if c.lower() in vowels) >= k",
        "solution_func": "def g(k=5):\n    import random\n    vowels = 'aeiou'\n    return ''.join(random.choice(vowels) for _ in range(k))",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=3) -> bool:\n    \"\"\"Given a list of integers and an integer k, determine if there exists a subsequence of length k\n    such that the sum of its elements is divisible by n.\"\"\"\n    assert len(nums) >= k, 'Hint: Number of elements in the list should be greater than or equal to k'\n    subsequences = [comb for comb in combinations(nums, k)]\n    return any((sum(subseq) % n == 0 for subseq in subsequences))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=3):\n    return nums[:k]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 184,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=3) -> bool:\n    \"\"\"Given a list of integers and an integer k, determine if there exists a subsequence of length k\n    such that the sum of its elements is divisible by n.\"\"\"\n    assert len(nums) >= k, 'Hint: Number of elements in the list should be greater than or equal to k'\n    subsequences = [comb for comb in combinations(nums, k)]\n    return any((sum(subseq) % n == 0 for subseq in subsequences))",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=3):\n    return nums[:k]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target_sum=21) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target_sum\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            for k in range(j+1, len(x)):\n                if x[i] + x[j] + x[k] == target_sum:\n                    return True\n    return False\n\ndef g(target_sum=21):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 185,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target_sum=21) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target_sum\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            for k in range(j+1, len(x)):\n                if x[i] + x[j] + x[k] == target_sum:\n                    return True\n    return False",
        "solution_func": "def g(target_sum=21):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, n=3) -> bool:\n    \"\"\"Check if the string contains n consecutive vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in x:\n        if char in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(n=3):\n    return \"helloaeiouworld\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 185,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, n=3) -> bool:\n    \"\"\"Check if the string contains n consecutive vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in x:\n        if char in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False",
        "solution_func": "def g(n=3):\n    return \"helloaeiouworld\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(x: int, n=10) -> bool:\n    \"\"\"Check if the number is a perfect square and its square root is divisible by n\"\"\"\n    import math\n    if math.isqrt(x)**2 == x and math.isqrt(x) % n == 0:\n        return True\n    return False\n\ndef g(n=10):\n    return n**2\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 185,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\ndef f(x: int, n=10) -> bool:\n    \"\"\"Check if the number is a perfect square and its square root is divisible by n\"\"\"\n    import math\n    if math.isqrt(x)**2 == x and math.isqrt(x) % n == 0:\n        return True\n    return False",
        "solution_func": "def g(n=10):\n    return n**2",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], a=100, b=200, c=300) -> bool:\n    \"\"\"Check if all values in the list are within the range of a, b, and c\"\"\"\n    return all([a <= i <= c for i in x]) and len(set(x)) == len(x)\n    \ndef g(a=100, b=200, c=300):\n    return list(range(a, c+1))\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 185,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], a=100, b=200, c=300) -> bool:\n    \"\"\"Check if all values in the list are within the range of a, b, and c\"\"\"\n    return all([a <= i <= c for i in x]) and len(set(x)) == len(x)",
        "solution_func": "def g(a=100, b=200, c=300):\n    return list(range(a, c+1))",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, x=5) -> bool:\n    \"\"\"Check if the given string contains exactly x number of vowels\"\"\"\n    vowels = 'aeiou'\n    return sum([1 for char in s.lower() if char in vowels]) == x\n\ndef g(x=5):\n    vowels = 'aeiou'\n    return vowels * x\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 185,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, x=5) -> bool:\n    \"\"\"Check if the given string contains exactly x number of vowels\"\"\"\n    vowels = 'aeiou'\n    return sum([1 for char in s.lower() if char in vowels]) == x",
        "solution_func": "def g(x=5):\n    vowels = 'aeiou'\n    return vowels * x",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if the given year, month, and day form a valid date\"\"\"\n    try:\n        datetime(x, y, z)\n        return True\n    except ValueError:\n        return False\n\ndef g(y=2021, m=1, d=1):\n    return y, m, d\n\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 185,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if the given year, month, and day form a valid date\"\"\"\n    try:\n        datetime(x, y, z)\n        return True\n    except ValueError:\n        return False",
        "solution_func": "def g(y=2021, m=1, d=1):\n    return y, m, d",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers from the given list that adds up to the target number.\"\"\"\n    return any(sum(combo) == target for combo in math.combinations(nums, 2))\n\ndef g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 185,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers from the given list that adds up to the target number.\"\"\"\n    return any(sum(combo) == target for combo in math.combinations(nums, 2))",
        "solution_func": "def g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Find if the target word can be formed by concatenating the given list of words.\"\"\"\n    return ''.join(words) == target\n\ndef g():\n    return ['p', 'y', 't', 'h', 'o', 'n']\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 185,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Find if the target word can be formed by concatenating the given list of words.\"\"\"\n    return ''.join(words) == target",
        "solution_func": "def g():\n    return ['p', 'y', 't', 'h', 'o', 'n']",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], rows=3, cols=3) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag_sum1 = sum(matrix[i][i] for i in range(rows))\n    diag_sum2 = sum(matrix[i][rows-i-1] for i in range(rows))\n    return all(s == row_sums[0] for s in row_sums) and all(s == col_sums[0] for s in col_sums) and diag_sum1 == diag_sum2 == row_sums[0]\n\ndef g(rows=3, cols=3):\n    return [[2, 7, 6],\n            [9, 5, 1],\n            [4, 3, 8]]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 185,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], rows=3, cols=3) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag_sum1 = sum(matrix[i][i] for i in range(rows))\n    diag_sum2 = sum(matrix[i][rows-i-1] for i in range(rows))\n    return all(s == row_sums[0] for s in row_sums) and all(s == col_sums[0] for s in col_sums) and diag_sum1 == diag_sum2 == row_sums[0]",
        "solution_func": "def g(rows=3, cols=3):\n    return [[2, 7, 6],\n            [9, 5, 1],\n            [4, 3, 8]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find if a target value exists in a given matrix.\"\"\"\n    return any(target in row for row in matrix)\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 185,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find if a target value exists in a given matrix.\"\"\"\n    return any(target in row for row in matrix)",
        "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m: int, r: int, c: int) -> bool:\n    \"\"\"Given a grid of size n x m, determine if it is possible to move a knight from position (r, c) to every other position in the grid exactly once, following the rules of chess.\nNote: The knight can move in an L-shape: two steps in one direction (horizontal or vertical) and then one step perpendicular to that.\nExample:\nn = 3, m = 3, r = 0, c = 0\nOutput: True\nExplanation: The knight can move to the following positions: (2, 1), (1, 2)\n\"\"\"\n    visited = [[False] * m for _ in range(n)]\n    visited[r][c] = True\n    moves = [(2, 1), (1, 2), (-2, 1), (-1, 2), (2, -1), (1, -2), (-2, -1), (-1, -2)]\n\n    def dfs(x, y):\n        nonlocal visited\n        visited[x][y] = True\n        for dx, dy in moves:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny]:\n                dfs(nx, ny)\n\n    dfs(r, c)\n\n    return all(all(row) for row in visited)\n\ndef g(n=3, m=3, r=0, c=0):\n    return n, m, r, c\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 186,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m: int, r: int, c: int) -> bool:\n    \"\"\"Given a grid of size n x m, determine if it is possible to move a knight from position (r, c) to every other position in the grid exactly once, following the rules of chess.\nNote: The knight can move in an L-shape: two steps in one direction (horizontal or vertical) and then one step perpendicular to that.\nExample:\nn = 3, m = 3, r = 0, c = 0\nOutput: True\nExplanation: The knight can move to the following positions: (2, 1), (1, 2)\n\"\"\"\n    visited = [[False] * m for _ in range(n)]\n    visited[r][c] = True\n    moves = [(2, 1), (1, 2), (-2, 1), (-1, 2), (2, -1), (1, -2), (-2, -1), (-1, -2)]\n\n    def dfs(x, y):\n        nonlocal visited\n        visited[x][y] = True\n        for dx, dy in moves:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny]:\n                dfs(nx, ny)\n\n    dfs(r, c)\n\n    return all(all(row) for row in visited)",
        "solution_func": "def g(n=3, m=3, r=0, c=0):\n    return n, m, r, c",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"Given a positive integer n, determine if it is possible to express n as a sum of k distinct powers of 2.\nExample:\nn = 10, k = 3\nOutput: True\nExplanation: 10 can be expressed as 2^0 + 2^1 + 2^3 = 1 + 2 + 8 = 10\n\"\"\"\n    def is_possible(n, k, i):\n        if n == 0 and k == 0:\n            return True\n        if n <= 0 or k <= 0 or i < 0:\n            return False\n        return is_possible(n - 2 ** i, k - 1, i - 1) or is_possible(n, k, i - 1)\n\n    return is_possible(n, k, int(n ** 0.5))\n\ndef g(n=10, k=3):\n    return n, k\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 186,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"Given a positive integer n, determine if it is possible to express n as a sum of k distinct powers of 2.\nExample:\nn = 10, k = 3\nOutput: True\nExplanation: 10 can be expressed as 2^0 + 2^1 + 2^3 = 1 + 2 + 8 = 10\n\"\"\"\n    def is_possible(n, k, i):\n        if n == 0 and k == 0:\n            return True\n        if n <= 0 or k <= 0 or i < 0:\n            return False\n        return is_possible(n - 2 ** i, k - 1, i - 1) or is_possible(n, k, i - 1)\n\n    return is_possible(n, k, int(n ** 0.5))",
        "solution_func": "def g(n=10, k=3):\n    return n, k",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Given a string s, determine if it can be rearranged to form a palindrome.\nExample:\ns = \"aab\"\nOutput: True\nExplanation: \"aab\" can be rearranged to \"aba\", which is a palindrome.\n\"\"\"\n    freq = {}\n    for c in s:\n        freq[c] = freq.get(c, 0) + 1\n\n    odd_count = 0\n    for val in freq.values():\n        if val % 2 != 0:\n            odd_count += 1\n\n    return odd_count <= 1\n\ndef g(s=\"aab\"):\n    return s\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 186,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Given a string s, determine if it can be rearranged to form a palindrome.\nExample:\ns = \"aab\"\nOutput: True\nExplanation: \"aab\" can be rearranged to \"aba\", which is a palindrome.\n\"\"\"\n    freq = {}\n    for c in s:\n        freq[c] = freq.get(c, 0) + 1\n\n    odd_count = 0\n    for val in freq.values():\n        if val % 2 != 0:\n            odd_count += 1\n\n    return odd_count <= 1",
        "solution_func": "def g(s=\"aab\"):\n    return s",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=0, max_nums=3, options=[-1, 1, 2]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers from the list that add up to the target value.\"\"\"\n    for num in lst:\n        assert num in options\n    return len(lst) <= max_nums and sum(lst) == target\ndef g(target=0, max_nums=3, options=[-1, 1, 2]):\n    from itertools import combinations\n    for n in range(max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 186,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=0, max_nums=3, options=[-1, 1, 2]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers from the list that add up to the target value.\"\"\"\n    for num in lst:\n        assert num in options\n    return len(lst) <= max_nums and sum(lst) == target",
        "solution_func": "def g(target=0, max_nums=3, options=[-1, 1, 2]):\n    from itertools import combinations\n    for n in range(max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, start='Py', end='on') -> bool:\n    \"\"\"Check if the given string starts with the start string and ends with the end string.\"\"\"\n    return s.startswith(start) and s.endswith(end)\ndef g(start='Py', end='on'):\n    return start + 'th' + end\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 186,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, start='Py', end='on') -> bool:\n    \"\"\"Check if the given string starts with the start string and ends with the end string.\"\"\"\n    return s.startswith(start) and s.endswith(end)",
        "solution_func": "def g(start='Py', end='on'):\n    return start + 'th' + end",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=100, max_nums=5, options=[10, 20, 30]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers from the list that multiply to the target value.\"\"\"\n    for num in lst:\n        assert num in options\n    product = 1\n    for num in lst:\n        product *= num\n    return len(lst) <= max_nums and product == target\ndef g(target=100, max_nums=5, options=[10, 20, 30]):\n    from itertools import combinations\n    for n in range(max_nums + 1):\n        for c in combinations(options, n):\n            product = 1\n            for num in c:\n                product *= num\n            if product == target:\n                return list(c)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 186,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=100, max_nums=5, options=[10, 20, 30]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers from the list that multiply to the target value.\"\"\"\n    for num in lst:\n        assert num in options\n    product = 1\n    for num in lst:\n        product *= num\n    return len(lst) <= max_nums and product == target",
        "solution_func": "def g(target=100, max_nums=5, options=[10, 20, 30]):\n    from itertools import combinations\n    for n in range(max_nums + 1):\n        for c in combinations(options, n):\n            product = 1\n            for num in c:\n                product *= num\n            if product == target:\n                return list(c)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59], target=30) -> bool:\n    \"\"\"Determine if a target number is in a list and if it is at an even index.\"\"\"\n    return target in nums and nums.index(target) % 2 == 0\n\ndef g(nums=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59], target=30):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 186,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59], target=30) -> bool:\n    \"\"\"Determine if a target number is in a list and if it is at an even index.\"\"\"\n    return target in nums and nums.index(target) % 2 == 0",
        "solution_func": "def g(nums=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59], target=30):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50], target=36) -> bool:\n    \"\"\"Determine if a target number is in a list and if it is at an odd index.\"\"\"\n    return target in nums and nums.index(target) % 2 == 1\n\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50], target=36):\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 186,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50], target=36) -> bool:\n    \"\"\"Determine if a target number is in a list and if it is at an odd index.\"\"\"\n    return target in nums and nums.index(target) % 2 == 1",
        "solution_func": "def g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50], target=36):\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[-3, -6, -9, -12, -15, -18, -21, -24, -27, -30, -33, -36, -39, -42, -45, -48, -51, -54, -57, -60], target=-39) -> bool:\n    \"\"\"Determine if a target number is in a list and if it is at an even index.\"\"\"\n    return target in nums and nums.index(target) % 2 == 0\n\ndef g(nums=[-3, -6, -9, -12, -15, -18, -21, -24, -27, -30, -33, -36, -39, -42, -45, -48, -51, -54, -57, -60], target=-39):\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 186,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[-3, -6, -9, -12, -15, -18, -21, -24, -27, -30, -33, -36, -39, -42, -45, -48, -51, -54, -57, -60], target=-39) -> bool:\n    \"\"\"Determine if a target number is in a list and if it is at an even index.\"\"\"\n    return target in nums and nums.index(target) % 2 == 0",
        "solution_func": "def g(nums=[-3, -6, -9, -12, -15, -18, -21, -24, -27, -30, -33, -36, -39, -42, -45, -48, -51, -54, -57, -60], target=-39):\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Check if a date is in the past.\"\"\"\n    current_date = datetime.now().strftime(format)\n    return datetime.strptime(date, format) < datetime.strptime(current_date, format)\n\ndef g(format='%Y-%m-%d'):\n    current_date = datetime.now().strftime(format)\n    return current_date\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 186,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Check if a date is in the past.\"\"\"\n    current_date = datetime.now().strftime(format)\n    return datetime.strptime(date, format) < datetime.strptime(current_date, format)",
        "solution_func": "def g(format='%Y-%m-%d'):\n    current_date = datetime.now().strftime(format)\n    return current_date",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[3, 7, 9, 12, 15, 18, 21]) -> bool:\n    \"\"\"Check if n is divisible by all numbers in the list.\"\"\"\n    return all(n % num == 0 for num in nums)\ndef g(nums=[3, 7, 9, 12, 15, 18, 21]):\n    return nums[-1] * 100\nassert f(g())\n",
        "emb": null,
        "idx_generation": 187,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[3, 7, 9, 12, 15, 18, 21]) -> bool:\n    \"\"\"Check if n is divisible by all numbers in the list.\"\"\"\n    return all(n % num == 0 for num in nums)",
        "solution_func": "def g(nums=[3, 7, 9, 12, 15, 18, 21]):\n    return nums[-1] * 100",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Check if any row in the matrix has a sum equal to the target_sum.\"\"\"\n    return any(sum(row) == target_sum for row in matrix)\ndef g(target_sum=100):\n    return [[10, 20, 30], [40, 50, 60], [70, 80, 90], [100, 110, 120]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 187,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Check if any row in the matrix has a sum equal to the target_sum.\"\"\"\n    return any(sum(row) == target_sum for row in matrix)",
        "solution_func": "def g(target_sum=100):\n    return [[10, 20, 30], [40, 50, 60], [70, 80, 90], [100, 110, 120]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are any two numbers in the list that sum up to the target.\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 187,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are any two numbers in the list that sum up to the target.\"\"\"\n    return any(target - num in nums for num in nums)",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=3, b=2*math.pi) -> bool:\n    \"\"\"Check if the sum of x, y, and z is equal to the circumference of a circle with radius a\"\"\"\n    return x + y + z == 2 * math.pi * a\n\ndef g(a=3, b=2*math.pi):\n    return a\n\nassert f(g(), 1, 2*math.pi-1)\n",
        "emb": null,
        "idx_generation": 187,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=3, b=2*math.pi) -> bool:\n    \"\"\"Check if the sum of x, y, and z is equal to the circumference of a circle with radius a\"\"\"\n    return x + y + z == 2 * math.pi * a",
        "solution_func": "def g(a=3, b=2*math.pi):\n    return a",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: list, y: list, a=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if x and y have the same elements, regardless of order\"\"\"\n    return set(x) == set(y)\n\ndef g(a=[1, 2, 3, 4, 5, 6]):\n    return a\n\nassert f(g(), [3, 2, 1, 6, 5, 4])\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 187,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: list, y: list, a=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if x and y have the same elements, regardless of order\"\"\"\n    return set(x) == set(y)",
        "solution_func": "def g(a=[1, 2, 3, 4, 5, 6]):\n    return a",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: str, a='hello world') -> bool:\n    \"\"\"Check if x is a substring of a\"\"\"\n    return x in a\n\ndef g(a='hello world'):\n    return a\n\nassert f(g(), 'world')\n",
        "emb": null,
        "idx_generation": 187,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, a='hello world') -> bool:\n    \"\"\"Check if x is a substring of a\"\"\"\n    return x in a",
        "solution_func": "def g(a='hello world'):\n    return a",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='xyz', count=10, length=30) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring='xyz', count=10, length=30):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 187,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='xyz', count=10, length=30) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length",
        "solution_func": "def g(substring='xyz', count=10, length=30):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * '^'",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=50, b=10, c=5) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\ndef g(a=50, b=10, c=5):\n    return -a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 187,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=50, b=10, c=5) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])",
        "solution_func": "def g(a=50, b=10, c=5):\n    return -a + sum([b * i for i in range(c)])",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=50, s=2500) -> bool:\n    \"\"\"Construct a list of n distinct integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n=50, s=2500):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n    x = x + [s - sum(x)]\n    return x\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 187,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=50, s=2500) -> bool:\n    \"\"\"Construct a list of n distinct integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)",
        "solution_func": "def g(n=50, s=2500):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n    x = x + [s - sum(x)]\n    return x",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10, limit=100) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target number\"\"\"\n    return any(num1 + num2 == target for num1 in nums for num2 in nums if num1 != num2 and num1 + num2 <= limit)\ndef g(target=10, limit=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 187,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10, limit=100) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target number\"\"\"\n    return any(num1 + num2 == target for num1 in nums for num2 in nums if num1 != num2 and num1 + num2 <= limit)",
        "solution_func": "def g(target=10, limit=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(s: str, n=6, target=12) -> bool:\n    \"\"\"Find a string that has exactly n characters and contains the letter 'a' target times.\"\"\"\n    return len(s) == n and s.count('a') == target\ndef g(n=6, target=12):\n    return 'a' * target + 'b' * (n - target)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 188,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(s: str, n=6, target=12) -> bool:\n    \"\"\"Find a string that has exactly n characters and contains the letter 'a' target times.\"\"\"\n    return len(s) == n and s.count('a') == target",
        "solution_func": "def g(n=6, target=12):\n    return 'a' * target + 'b' * (n - target)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in a list that sums up to a target value.\"\"\"\n    return any(x + y == target for x in nums for y in nums if x != y)\ndef g(target=100):\n    return [1, target - 1]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 188,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in a list that sums up to a target value.\"\"\"\n    return any(x + y == target for x in nums for y in nums if x != y)",
        "solution_func": "def g(target=100):\n    return [1, target - 1]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5, target=3) -> bool:\n    \"\"\"Find a string that has exactly n characters and contains the letter 'a' as the target-th character.\"\"\"\n    return len(s) == n and s[target - 1] == 'a'\ndef g(n=5, target=3):\n    return 'b' * (target - 1) + 'a' + 'b' * (n - target)\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 188,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=5, target=3) -> bool:\n    \"\"\"Find a string that has exactly n characters and contains the letter 'a' as the target-th character.\"\"\"\n    return len(s) == n and s[target - 1] == 'a'",
        "solution_func": "def g(n=5, target=3):\n    return 'b' * (target - 1) + 'a' + 'b' * (n - target)",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, lst=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) -> bool:\n    \"\"\"Check if x is in the list lst\"\"\"\n    return x in lst\ndef g(lst=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]):\n    return lst[0]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 188,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, lst=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) -> bool:\n    \"\"\"Check if x is in the list lst\"\"\"\n    return x in lst",
        "solution_func": "def g(lst=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]):\n    return lst[0]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: list, n=5) -> bool:\n    \"\"\"Check if the sum of elements in lst is equal to n\"\"\"\n    return sum(lst) == n\ndef g(n=5):\n    if n == 0:\n        return []\n    return list(range(1, n+1))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 188,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: list, n=5) -> bool:\n    \"\"\"Check if the sum of elements in lst is equal to n\"\"\"\n    return sum(lst) == n",
        "solution_func": "def g(n=5):\n    if n == 0:\n        return []\n    return list(range(1, n+1))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\ndef f(x: float, y: float, z: float, tolerance=1e-6) -> bool:\n    \"\"\"Check if the absolute difference between x/y and z is less than tolerance\"\"\"\n    return abs(x/y - z) < tolerance\ndef g():\n    return math.pi, math.sqrt(2), 1.414213\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 188,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\ndef f(x: float, y: float, z: float, tolerance=1e-6) -> bool:\n    \"\"\"Check if the absolute difference between x/y and z is less than tolerance\"\"\"\n    return abs(x/y - z) < tolerance",
        "solution_func": "def g():\n    return math.pi, math.sqrt(2), 1.414213",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=4, b=5, c=6) -> bool:\n    \"\"\"Check if n is a Pythagorean triple, i.e., if it satisfies the equation a^2 + b^2 = c^2.\"\"\"\n    return n == math.sqrt(a**2 + b**2) or n == math.sqrt(b**2 + c**2) or n == math.sqrt(a**2 + c**2)\n\ndef g(a=4, b=5, c=6):\n    return math.sqrt(a**2 + b**2)\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 188,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=4, b=5, c=6) -> bool:\n    \"\"\"Check if n is a Pythagorean triple, i.e., if it satisfies the equation a^2 + b^2 = c^2.\"\"\"\n    return n == math.sqrt(a**2 + b**2) or n == math.sqrt(b**2 + c**2) or n == math.sqrt(a**2 + c**2)",
        "solution_func": "def g(a=4, b=5, c=6):\n    return math.sqrt(a**2 + b**2)",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, substr='abc') -> bool:\n    \"\"\"Check if string s contains the substring substr at least n times.\"\"\"\n    return s.count(substr) >= n\n\ndef g(n=3, substr='abc'):\n    return substr * n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 188,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3, substr='abc') -> bool:\n    \"\"\"Check if string s contains the substring substr at least n times.\"\"\"\n    return s.count(substr) >= n",
        "solution_func": "def g(n=3, substr='abc'):\n    return substr * n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list nums that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums: List[int], target=10):\n    random.shuffle(nums)\n    return nums\nassert f(g())",
        "emb": null,
        "idx_generation": 188,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list nums that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums: List[int], target=10):\n    random.shuffle(nums)\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a string contains exactly n number of vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count == n\n\ndef g(n=5):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = \"\"\n    for _ in range(n):\n        s += vowels[_]\n    return s\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 188,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a string contains exactly n number of vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count == n",
        "solution_func": "def g(n=5):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = \"\"\n    for _ in range(n):\n        s += vowels[_]\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(x: np.ndarray, m=3, n=4) -> bool:\n    \"\"\"Check if the given matrix is a magic square\"\"\"\n    row_sum = np.sum(x, axis=1)\n    col_sum = np.sum(x, axis=0)\n    diag_sum = np.trace(x)\n    anti_diag_sum = np.trace(np.fliplr(x))\n    return len(set(row_sum)) == len(set(col_sum)) == len(set([diag_sum, anti_diag_sum])) == 1\n\ndef g(m=3, n=4):\n    return np.array([[8, 1, 6, 3],\n                     [3, 5, 7, 9],\n                     [4, 9, 2, 8]])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 189,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(x: np.ndarray, m=3, n=4) -> bool:\n    \"\"\"Check if the given matrix is a magic square\"\"\"\n    row_sum = np.sum(x, axis=1)\n    col_sum = np.sum(x, axis=0)\n    diag_sum = np.trace(x)\n    anti_diag_sum = np.trace(np.fliplr(x))\n    return len(set(row_sum)) == len(set(col_sum)) == len(set([diag_sum, anti_diag_sum])) == 1",
        "solution_func": "def g(m=3, n=4):\n    return np.array([[8, 1, 6, 3],\n                     [3, 5, 7, 9],\n                     [4, 9, 2, 8]])",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=\"python\", count=3) -> bool:\n    \"\"\"Check if the target string appears count times in the given string\"\"\"\n    return s.count(target) == count\n\ndef g(target=\"python\", count=3):\n    return target * count\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 189,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=\"python\", count=3) -> bool:\n    \"\"\"Check if the target string appears count times in the given string\"\"\"\n    return s.count(target) == count",
        "solution_func": "def g(target=\"python\", count=3):\n    return target * count",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there are two distinct elements in the list that sum up to the target_sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 189,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there are two distinct elements in the list that sum up to the target_sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, m=4) -> bool:\n    \"\"\"Check if there exists a subgrid of size n x m in the grid s where all elements are the same\"\"\"\n    for i in range(len(s) - n + 1):\n        for j in range(len(s[0]) - m + 1):\n            subgrid = [row[j:j+m] for row in s[i:i+n]]\n            if all(all(cell == subgrid[0][0] for cell in row) for row in subgrid):\n                return True\n    return False\ndef g(n=3, m=4):\n    grid = [['A', 'A', 'A', 'A', 'B'],\n            ['A', 'A', 'A', 'A', 'B'],\n            ['A', 'A', 'A', 'A', 'B'],\n            ['A', 'A', 'A', 'A', 'B'],\n            ['C', 'C', 'C', 'C', 'D']]\n    return grid\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 189,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3, m=4) -> bool:\n    \"\"\"Check if there exists a subgrid of size n x m in the grid s where all elements are the same\"\"\"\n    for i in range(len(s) - n + 1):\n        for j in range(len(s[0]) - m + 1):\n            subgrid = [row[j:j+m] for row in s[i:i+n]]\n            if all(all(cell == subgrid[0][0] for cell in row) for row in subgrid):\n                return True\n    return False",
        "solution_func": "def g(n=3, m=4):\n    grid = [['A', 'A', 'A', 'A', 'B'],\n            ['A', 'A', 'A', 'A', 'B'],\n            ['A', 'A', 'A', 'A', 'B'],\n            ['A', 'A', 'A', 'A', 'B'],\n            ['C', 'C', 'C', 'C', 'D']]\n    return grid",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the string s contains all the characters in the target string in the same order\"\"\"\n    target_index = 0\n    for char in s:\n        if char == target[target_index]:\n            target_index += 1\n            if target_index == len(target):\n                return True\n    return False\ndef g(target='python'):\n    return 'jython programming'\nassert f(g())\n",
        "emb": null,
        "idx_generation": 189,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the string s contains all the characters in the target string in the same order\"\"\"\n    target_index = 0\n    for char in s:\n        if char == target[target_index]:\n            target_index += 1\n            if target_index == len(target):\n                return True\n    return False",
        "solution_func": "def g(target='python'):\n    return 'jython programming'",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m=0) -> bool:\n    \"\"\"Check if the number n is a palindrome and the sum of its digits is equal to m\"\"\"\n    n_str = str(n)\n    if n_str == n_str[::-1] and sum(int(digit) for digit in n_str) == m:\n        return True\n    return False\ndef g(m=0):\n    return 12321\nassert f(g())\n",
        "emb": null,
        "idx_generation": 189,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=0) -> bool:\n    \"\"\"Check if the number n is a palindrome and the sum of its digits is equal to m\"\"\"\n    n_str = str(n)\n    if n_str == n_str[::-1] and sum(int(digit) for digit in n_str) == m:\n        return True\n    return False",
        "solution_func": "def g(m=0):\n    return 12321",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python', max_len=5) -> bool:\n    \"\"\"Check if a given string is a substring of a longer word, and if it is, check if the substring is at most a certain length.\"\"\"\n    if len(word) <= max_len:\n        return word == s\n    return s in word and len(s) <= max_len\ndef g(word='python', max_len=5):\n    if len(word) <= max_len:\n        return word\n    substr_idx = len(word) // 2\n    return word[substr_idx - max_len//2: substr_idx + max_len//2 + 1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 189,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, word='python', max_len=5) -> bool:\n    \"\"\"Check if a given string is a substring of a longer word, and if it is, check if the substring is at most a certain length.\"\"\"\n    if len(word) <= max_len:\n        return word == s\n    return s in word and len(s) <= max_len",
        "solution_func": "def g(word='python', max_len=5):\n    if len(word) <= max_len:\n        return word\n    substr_idx = len(word) // 2\n    return word[substr_idx - max_len//2: substr_idx + max_len//2 + 1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, perm='abcde', target='acdb') -> bool:\n    \"\"\"Rearrange a given string according to a given permutation of characters and check if it matches a target string.\"\"\"\n    return ''.join([perm[char] for char in s]) == target\ndef g(perm='abcde', target='acdb'):\n    return ''.join([char for char in target if char in perm])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 189,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, perm='abcde', target='acdb') -> bool:\n    \"\"\"Rearrange a given string according to a given permutation of characters and check if it matches a target string.\"\"\"\n    return ''.join([perm[char] for char in s]) == target",
        "solution_func": "def g(perm='abcde', target='acdb'):\n    return ''.join([char for char in target if char in perm])",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a given string can be converted into a list of integers that is equal to a given list of numbers.\"\"\"\n    try:\n        nums = list(map(int, s.split()))\n        return nums == num_list\n    except:\n        return False\ndef g(num_list=[1, 2, 3, 4, 5]):\n    return ' '.join(list(map(str, num_list)))\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 189,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a given string can be converted into a list of integers that is equal to a given list of numbers.\"\"\"\n    try:\n        nums = list(map(int, s.split()))\n        return nums == num_list\n    except:\n        return False",
        "solution_func": "def g(num_list=[1, 2, 3, 4, 5]):\n    return ' '.join(list(map(str, num_list)))",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=5, y=2) -> bool:\n    \"\"\"Find the smallest positive integer n such that when it is divided by x, the result is y.\"\"\"\n    return n % x == y\ndef g(x=5, y=2):\n    n = y\n    while n % x != y:\n        n += 1\n    return n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 189,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=5, y=2) -> bool:\n    \"\"\"Find the smallest positive integer n such that when it is divided by x, the result is y.\"\"\"\n    return n % x == y",
        "solution_func": "def g(x=5, y=2):\n    n = y\n    while n % x != y:\n        n += 1\n    return n",
        "map_ix": [
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, lst=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig']) -> bool:\n    \"\"\"Check if a string is present in the list and contains the same letters as the first element in the list.\"\"\"\n    return s in lst and sorted(s.lower()) == sorted(lst[0].lower())\ndef g(lst=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig']):\n    return lst[0]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 190,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, lst=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig']) -> bool:\n    \"\"\"Check if a string is present in the list and contains the same letters as the first element in the list.\"\"\"\n    return s in lst and sorted(s.lower()) == sorted(lst[0].lower())",
        "solution_func": "def g(lst=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig']):\n    return lst[0]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Check if the sum of the first n elements in a list is divisible by n.\"\"\"\n    return sum(lst[:n]) % n == 0\ndef g(lst=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return len(lst)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 190,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Check if the sum of the first n elements in a list is divisible by n.\"\"\"\n    return sum(lst[:n]) % n == 0",
        "solution_func": "def g(lst=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return len(lst)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[3, 6, 9, 12, 15, 18, 21, 24, 27, 30]) -> bool:\n    \"\"\"Check if the product of the first n elements in a list is divisible by n.\"\"\"\n    product = 1\n    for i in range(n):\n        product *= lst[i]\n    return product % n == 0\ndef g(lst=[3, 6, 9, 12, 15, 18, 21, 24, 27, 30]):\n    return len(lst)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 190,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[3, 6, 9, 12, 15, 18, 21, 24, 27, 30]) -> bool:\n    \"\"\"Check if the product of the first n elements in a list is divisible by n.\"\"\"\n    product = 1\n    for i in range(n):\n        product *= lst[i]\n    return product % n == 0",
        "solution_func": "def g(lst=[3, 6, 9, 12, 15, 18, 21, 24, 27, 30]):\n    return len(lst)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit']) -> bool:\n    \"\"\"Check if a given string is a substring of any word in the list.\"\"\"\n    return any(s in word for word in words)\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit']):\n    return words[2] + 'berry'\nassert f(g())\n",
        "emb": null,
        "idx_generation": 190,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit']) -> bool:\n    \"\"\"Check if a given string is a substring of any word in the list.\"\"\"\n    return any(s in word for word in words)",
        "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit']):\n    return words[2] + 'berry'",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, matrices=[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[9, 8, 7], [6, 5, 4], [3, 2, 1]], [[2, 4, 6], [8, 10, 12], [14, 16, 18]], [[3, 6, 9], [12, 15, 18], [21, 24, 27]], [[4, 8, 12], [16, 20, 24], [28, 32, 36]], [[5, 10, 15], [20, 25, 30], [35, 40, 45]], [[6, 12, 18], [24, 30, 36], [42, 48, 54]], [[7, 14, 21], [28, 35, 42], [49, 56, 63]], [[8, 16, 24], [32, 40, 48], [56, 64, 72]], [[9, 18, 27], [36, 45, 54], [63, 72, 81]]]) -> bool:\n    \"\"\"Check if a given number is found in any of the matrices.\"\"\"\n    return any(n in matrix for matrix in matrices)\ndef g(matrices=[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[9, 8, 7], [6, 5, 4], [3, 2, 1]], [[2, 4, 6], [8, 10, 12], [14, 16, 18]], [[3, 6, 9], [12, 15, 18], [21, 24, 27]], [[4, 8, 12], [16, 20, 24], [28, 32, 36]], [[5, 10, 15], [20, 25, 30], [35, 40, 45]], [[6, 12, 18], [24, 30, 36], [42, 48, 54]], [[7, 14, 21], [28, 35, 42], [49, 56, 63]], [[8, 16, 24], [32, 40, 48], [56, 64, 72]], [[9, 18, 27], [36, 45, 54], [63, 72, 81]]]):\n    return matrices[3][2][1]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 190,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, matrices=[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[9, 8, 7], [6, 5, 4], [3, 2, 1]], [[2, 4, 6], [8, 10, 12], [14, 16, 18]], [[3, 6, 9], [12, 15, 18], [21, 24, 27]], [[4, 8, 12], [16, 20, 24], [28, 32, 36]], [[5, 10, 15], [20, 25, 30], [35, 40, 45]], [[6, 12, 18], [24, 30, 36], [42, 48, 54]], [[7, 14, 21], [28, 35, 42], [49, 56, 63]], [[8, 16, 24], [32, 40, 48], [56, 64, 72]], [[9, 18, 27], [36, 45, 54], [63, 72, 81]]]) -> bool:\n    \"\"\"Check if a given number is found in any of the matrices.\"\"\"\n    return any(n in matrix for matrix in matrices)",
        "solution_func": "def g(matrices=[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[9, 8, 7], [6, 5, 4], [3, 2, 1]], [[2, 4, 6], [8, 10, 12], [14, 16, 18]], [[3, 6, 9], [12, 15, 18], [21, 24, 27]], [[4, 8, 12], [16, 20, 24], [28, 32, 36]], [[5, 10, 15], [20, 25, 30], [35, 40, 45]], [[6, 12, 18], [24, 30, 36], [42, 48, 54]], [[7, 14, 21], [28, 35, 42], [49, 56, 63]], [[8, 16, 24], [32, 40, 48], [56, 64, 72]], [[9, 18, 27], [36, 45, 54], [63, 72, 81]]]):\n    return matrices[3][2][1]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(l: list, n=3, k=5) -> bool:\n    \"\"\"Check if a given list contains k numbers that sum to n.\"\"\"\n    for _ in range(k):\n        random.shuffle(l)\n        if sum(l[:k]) == n:\n            return True\n    return False\n\ndef g(n=3, k=5):\n    return [1, 1, 1, 1, 1, 1]\n  \nassert f(g())\n",
        "emb": null,
        "idx_generation": 190,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(l: list, n=3, k=5) -> bool:\n    \"\"\"Check if a given list contains k numbers that sum to n.\"\"\"\n    for _ in range(k):\n        random.shuffle(l)\n        if sum(l[:k]) == n:\n            return True\n    return False",
        "solution_func": "def g(n=3, k=5):\n    return [1, 1, 1, 1, 1, 1]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Given a list of integers, find a subset of numbers that add up to the target sum.\n    The goal is to determine if there exists a subset that satisfies the condition.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        for j in range(target_sum + 1):\n            if j >= nums[i - 1]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target_sum]\ndef g(target_sum=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 190,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Given a list of integers, find a subset of numbers that add up to the target sum.\n    The goal is to determine if there exists a subset that satisfies the condition.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        for j in range(target_sum + 1):\n            if j >= nums[i - 1]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target_sum]",
        "solution_func": "def g(target_sum=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Given a string, find a substring of length target_length that contains all unique characters.\n    The goal is to determine if there exists a substring that satisfies the condition.\"\"\"\n    n = len(s)\n    if n < target_length:\n        return False\n    unique_chars = set()\n    for i in range(n - target_length + 1):\n        substring = s[i:i + target_length]\n        if len(set(substring)) == target_length:\n            return True\n    return False\ndef g(target_length=10):\n    return \"abcdefghijklmnopqrstuvwxyz\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 190,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Given a string, find a substring of length target_length that contains all unique characters.\n    The goal is to determine if there exists a substring that satisfies the condition.\"\"\"\n    n = len(s)\n    if n < target_length:\n        return False\n    unique_chars = set()\n    for i in range(n - target_length + 1):\n        substring = s[i:i + target_length]\n        if len(set(substring)) == target_length:\n            return True\n    return False",
        "solution_func": "def g(target_length=10):\n    return \"abcdefghijklmnopqrstuvwxyz\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]], target_distance=10) -> bool:\n    \"\"\"Given a list of 2D points, find two points that have a Euclidean distance of target_distance.\n    The goal is to determine if there exists a pair of points that satisfies the condition.\"\"\"\n    n = len(points)\n    for i in range(n):\n        for j in range(i + 1, n):\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n            if abs(distance - target_distance) < 1e-06:\n                return True\n    return False\ndef g(target_distance=10):\n    return [(0, 0), (3, 4), (5, 12), (8, 15), (9, 12), (10, 6)]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 190,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(points: List[Tuple[int, int]], target_distance=10) -> bool:\n    \"\"\"Given a list of 2D points, find two points that have a Euclidean distance of target_distance.\n    The goal is to determine if there exists a pair of points that satisfies the condition.\"\"\"\n    n = len(points)\n    for i in range(n):\n        for j in range(i + 1, n):\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n            if abs(distance - target_distance) < 1e-06:\n                return True\n    return False",
        "solution_func": "def g(target_distance=10):\n    return [(0, 0), (3, 4), (5, 12), (8, 15), (9, 12), (10, 6)]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], sum_target=10) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that sum up to the sum_target\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for x in range(i, len(matrix)):\n                for y in range(len(matrix[x])):\n                    if i == x and j == y:\n                        continue\n                    if matrix[i][j] + matrix[x][y] == sum_target:\n                        return True\n    return False\ndef g(sum_target=10):\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 190,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], sum_target=10) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that sum up to the sum_target\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for x in range(i, len(matrix)):\n                for y in range(len(matrix[x])):\n                    if i == x and j == y:\n                        continue\n                    if matrix[i][j] + matrix[x][y] == sum_target:\n                        return True\n    return False",
        "solution_func": "def g(sum_target=10):\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, substring='ABC', count=3) -> bool:\n    \"\"\"Find the number of times a given substring appears in a string.\"\"\"\n    return x.count(substring) == count\ndef g(substring='ABC', count=3):\n    return substring * count + 'XYZ'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 191,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, substring='ABC', count=3) -> bool:\n    \"\"\"Find the number of times a given substring appears in a string.\"\"\"\n    return x.count(substring) == count",
        "solution_func": "def g(substring='ABC', count=3):\n    return substring * count + 'XYZ'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, result=1000) -> bool:\n    \"\"\"Find the values of x, y, and z such that x^2 + y^2 + z^2 = result\"\"\"\n    return math.isqrt(x**2 + y**2 + z**2) == int(math.sqrt(result))\ndef g(result=1000):\n    for x in range(int(math.sqrt(result))+1):\n        for y in range(int(math.sqrt(result))+1):\n            for z in range(int(math.sqrt(result))+1):\n                if x**2 + y**2 + z**2 == result:\n                    return x, y, z\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 191,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, result=1000) -> bool:\n    \"\"\"Find the values of x, y, and z such that x^2 + y^2 + z^2 = result\"\"\"\n    return math.isqrt(x**2 + y**2 + z**2) == int(math.sqrt(result))",
        "solution_func": "def g(result=1000):\n    for x in range(int(math.sqrt(result))+1):\n        for y in range(int(math.sqrt(result))+1):\n            for z in range(int(math.sqrt(result))+1):\n                if x**2 + y**2 + z**2 == result:\n                    return x, y, z",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(x: List[int], target=24) -> bool:\n    \"\"\"Find a combination of four numbers in a list that can be used with the operators +, -, *, and / to get the target number\"\"\"\n    operators = ['+', '-', '*', '/']\n    for perm in permutations(x, 4):\n        for op1 in operators:\n            for op2 in operators:\n                for op3 in operators:\n                    expression = f\"(({perm[0]} {op1} {perm[1]}) {op2} {perm[2]}) {op3} {perm[3]}\"\n                    try:\n                        result = eval(expression)\n                        if result == target:\n                            return True\n                    except ZeroDivisionError:\n                        continue\n    return False\ndef g(target=24):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 191,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(x: List[int], target=24) -> bool:\n    \"\"\"Find a combination of four numbers in a list that can be used with the operators +, -, *, and / to get the target number\"\"\"\n    operators = ['+', '-', '*', '/']\n    for perm in permutations(x, 4):\n        for op1 in operators:\n            for op2 in operators:\n                for op3 in operators:\n                    expression = f\"(({perm[0]} {op1} {perm[1]}) {op2} {perm[2]}) {op3} {perm[3]}\"\n                    try:\n                        result = eval(expression)\n                        if result == target:\n                            return True\n                    except ZeroDivisionError:\n                        continue\n    return False",
        "solution_func": "def g(target=24):\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(strings: List[str], target_len=5) -> bool:\n    \"\"\"Check if the target string is present in the list of strings\"\"\"\n    return any((len(s) == target_len and 'target' in s for s in strings))\ndef g(target_len=5):\n    return ['word', 'another', 'target', 'string']\nassert f(g())\n",
        "emb": null,
        "idx_generation": 191,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(strings: List[str], target_len=5) -> bool:\n    \"\"\"Check if the target string is present in the list of strings\"\"\"\n    return any((len(s) == target_len and 'target' in s for s in strings))",
        "solution_func": "def g(target_len=5):\n    return ['word', 'another', 'target', 'string']",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=20) -> bool:\n    \"\"\"Check if there exists two numbers in the list whose sum is equal to the target sum\"\"\"\n    return any((n1 + n2 == target_sum for i, n1 in enumerate(numbers) for n2 in numbers[i+1:]))\ndef g(target_sum=20):\n    return [5, 10, 15, 20, 25]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 191,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target_sum=20) -> bool:\n    \"\"\"Check if there exists two numbers in the list whose sum is equal to the target sum\"\"\"\n    return any((n1 + n2 == target_sum for i, n1 in enumerate(numbers) for n2 in numbers[i+1:]))",
        "solution_func": "def g(target_sum=20):\n    return [5, 10, 15, 20, 25]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_product=24) -> bool:\n    \"\"\"Check if there exists three numbers in the list whose product is equal to the target product\"\"\"\n    return any((n1 * n2 * n3 == target_product for i, n1 in enumerate(numbers) for j, n2 in enumerate(numbers[i+1:]) for n3 in numbers[j+1:]))\ndef g(target_product=24):\n    return [2, 3, 4, 6, 8]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 191,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target_product=24) -> bool:\n    \"\"\"Check if there exists three numbers in the list whose product is equal to the target product\"\"\"\n    return any((n1 * n2 * n3 == target_product for i, n1 in enumerate(numbers) for j, n2 in enumerate(numbers[i+1:]) for n3 in numbers[j+1:]))",
        "solution_func": "def g(target_product=24):\n    return [2, 3, 4, 6, 8]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if a given number is divisible by all the elements of a list\"\"\"\n    return all(n % num == 0 for num in nums)\ndef g(nums=[2, 4, 6, 8, 10]):\n    return max(nums)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 191,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if a given number is divisible by all the elements of a list\"\"\"\n    return all(n % num == 0 for num in nums)",
        "solution_func": "def g(nums=[2, 4, 6, 8, 10]):\n    return max(nums)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, r=5) -> bool:\n    \"\"\"Check if a given number is a perfect square and a multiple of a given number\"\"\"\n    return math.isqrt(n)**2 == n and n % r == 0\ndef g(r=5):\n    return r**2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 191,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, r=5) -> bool:\n    \"\"\"Check if a given number is a perfect square and a multiple of a given number\"\"\"\n    return math.isqrt(n)**2 == n and n % r == 0",
        "solution_func": "def g(r=5):\n    return r**2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s=\"Hello, World!\") -> bool:\n    \"\"\"Check if a given number is equal to the number of characters in a string\"\"\"\n    return n == len(s)\ndef g(s=\"Hello, World!\"):\n    return len(s)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 191,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, s=\"Hello, World!\") -> bool:\n    \"\"\"Check if a given number is equal to the number of characters in a string\"\"\"\n    return n == len(s)",
        "solution_func": "def g(s=\"Hello, World!\"):\n    return len(s)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if x is in the list lst\"\"\"\n    return x in lst\n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return random.choice(lst)\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 191,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(x: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if x is in the list lst\"\"\"\n    return x in lst",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return random.choice(lst)",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a given number is present in a list of numbers\"\"\"\n    return n in nums\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return random.choice(nums)\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 192,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a given number is present in a list of numbers\"\"\"\n    return n in nums",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return random.choice(nums)",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if a given character is present in a string\"\"\"\n    return char in s\ndef g(char='a'):\n    return char + 'bcdefghijklmnopqrstuvwxyz'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 192,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if a given character is present in a string\"\"\"\n    return char in s",
        "solution_func": "def g(char='a'):\n    return char + 'bcdefghijklmnopqrstuvwxyz'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=12, b=5, c=2) -> bool:\n    \"\"\"Check if a given number is divisible by a and b but not divisible by c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c != 0\ndef g(a=12, b=5, c=2):\n    return a * b * c\nassert f(g())\n",
        "emb": null,
        "idx_generation": 192,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=12, b=5, c=2) -> bool:\n    \"\"\"Check if a given number is divisible by a and b but not divisible by c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c != 0",
        "solution_func": "def g(a=12, b=5, c=2):\n    return a * b * c",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(l: List[int]) -> bool:\n    \"\"\"Find a sublist of l that sums to 0.\"\"\"\n    n = len(l)\n    for i in range(n):\n        for j in range(i, n):\n            if sum(l[i:j+1]) == 0:\n                return True\n    return False\ndef g():\n    return [1, -1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 192,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(l: List[int]) -> bool:\n    \"\"\"Find a sublist of l that sums to 0.\"\"\"\n    n = len(l)\n    for i in range(n):\n        for j in range(i, n):\n            if sum(l[i:j+1]) == 0:\n                return True\n    return False",
        "solution_func": "def g():\n    return [1, -1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string that is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 192,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string that is a palindrome.\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"racecar\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string that contains all vowels (a, e, i, o, u) in order.\"\"\"\n    vowels = 'aeiou'\n    index = 0\n    for char in s:\n        if char == vowels[index]:\n            index += 1\n            if index == 5:\n                return True\n    return False\ndef g():\n    return \"aebiodeau\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 192,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string that contains all vowels (a, e, i, o, u) in order.\"\"\"\n    vowels = 'aeiou'\n    index = 0\n    for char in s:\n        if char == vowels[index]:\n            index += 1\n            if index == 5:\n                return True\n    return False",
        "solution_func": "def g():\n    return \"aebiodeau\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.datetime, days=7) -> bool:\n    \"\"\"Find a date that is exactly 'days' days after the given date.\"\"\"\n    target_date = date + datetime.timedelta(days=days)\n    return target_date == datetime.datetime(year=2022, month=1, day=1)\n    \ndef g(year=2021, month=12, day=25, days=7):\n    initial_date = datetime.datetime(year=year, month=month, day=day)\n    target_date = initial_date + datetime.timedelta(days=days)\n    return target_date\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 192,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(date: datetime.datetime, days=7) -> bool:\n    \"\"\"Find a date that is exactly 'days' days after the given date.\"\"\"\n    target_date = date + datetime.timedelta(days=days)\n    return target_date == datetime.datetime(year=2022, month=1, day=1)",
        "solution_func": "def g(year=2021, month=12, day=25, days=7):\n    initial_date = datetime.datetime(year=year, month=month, day=day)\n    target_date = initial_date + datetime.timedelta(days=days)\n    return target_date",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: List[int], target_sum=100, num_elements=10) -> bool:\n    \"\"\"Find a sublist from 'arr' that sums up to 'target_sum' and contains exactly 'num_elements' elements.\"\"\"\n    for i in range(len(arr) - num_elements + 1):\n        sublist = arr[i:i+num_elements]\n        if sum(sublist) == target_sum:\n            return True\n    return False\n\ndef g(arr=[random.randint(1, 50) for _ in range(20)], target_sum=100, num_elements=10):\n    return arr\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 192,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(arr: List[int], target_sum=100, num_elements=10) -> bool:\n    \"\"\"Find a sublist from 'arr' that sums up to 'target_sum' and contains exactly 'num_elements' elements.\"\"\"\n    for i in range(len(arr) - num_elements + 1):\n        sublist = arr[i:i+num_elements]\n        if sum(sublist) == target_sum:\n            return True\n    return False",
        "solution_func": "def g(arr=[random.randint(1, 50) for _ in range(20)], target_sum=100, num_elements=10):\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, height=10, volume=1000) -> bool:\n    \"\"\"Find a radius that, when used to calculate the volume of a cone with given height, results in 'volume'.\"\"\"\n    cone_volume = (1/3) * math.pi * radius**2 * height\n    return abs(cone_volume - volume) < 1e-6\n\ndef g(height=10, volume=1000):\n    radius = (3 * volume / (math.pi * height))**(1/2)\n    return radius\n\nassert f(g())",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 192,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(radius: float, height=10, volume=1000) -> bool:\n    \"\"\"Find a radius that, when used to calculate the volume of a cone with given height, results in 'volume'.\"\"\"\n    cone_volume = (1/3) * math.pi * radius**2 * height\n    return abs(cone_volume - volume) < 1e-6",
        "solution_func": "def g(height=10, volume=1000):\n    radius = (3 * volume / (math.pi * height))**(1/2)\n    return radius",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=5, m=10) -> bool:\n    \"\"\"Check if the string contains the same number of vowels and consonants\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    consonant_count = 0\n    for char in s:\n        if char.lower() in vowels:\n            vowel_count += 1\n        else:\n            consonant_count += 1\n    return vowel_count == consonant_count\ndef g(n=5, m=10):\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    s = vowels * n + consonants * m\n    return s\nassert f(g())\n",
        "emb": null,
        "idx_generation": 192,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=5, m=10) -> bool:\n    \"\"\"Check if the string contains the same number of vowels and consonants\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    consonant_count = 0\n    for char in s:\n        if char.lower() in vowels:\n            vowel_count += 1\n        else:\n            consonant_count += 1\n    return vowel_count == consonant_count",
        "solution_func": "def g(n=5, m=10):\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    s = vowels * n + consonants * m\n    return s",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str = 'python', n: int = 3) -> bool:\n    \"\"\"Given a string s and a target string, find if there are n occurrences of the target string in s\"\"\"\n    count = s.count(target)\n    return count == n\ndef g(target: str = 'python', n: int = 3):\n    s = target * n\n    return s\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 193,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target: str = 'python', n: int = 3) -> bool:\n    \"\"\"Given a string s and a target string, find if there are n occurrences of the target string in s\"\"\"\n    count = s.count(target)\n    return count == n",
        "solution_func": "def g(target: str = 'python', n: int = 3):\n    s = target * n\n    return s",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int = 10) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers in the list that sums up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target: int = 10):\n    arr = [1, 2, 3, 4, 5]\n    return arr\nassert f(g())\n",
        "emb": null,
        "idx_generation": 193,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target: int = 10) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers in the list that sums up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target: int = 10):\n    arr = [1, 2, 3, 4, 5]\n    return arr",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Given a target number n and a list of integers, find if there exists a subarray in the list that sums up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if sum(arr[i:j+1]) == n:\n                return True\n    return False\ndef g(n: int):\n    arr = random.choices(range(1, 10), k=10)\n    return n, arr\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 193,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Given a target number n and a list of integers, find if there exists a subarray in the list that sums up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if sum(arr[i:j+1]) == n:\n                return True\n    return False",
        "solution_func": "def g(n: int):\n    arr = random.choices(range(1, 10), k=10)\n    return n, arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, vowels='aeiou') -> bool:\n    \"\"\"Check if all the vowels in the word are in the specified set of vowels\"\"\"\n    return all((c in vowels for c in word if c.lower() in vowels))\ndef g(vowels='aeiou'):\n    word = \"Hello, World!\"\n    return word\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 193,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str, vowels='aeiou') -> bool:\n    \"\"\"Check if all the vowels in the word are in the specified set of vowels\"\"\"\n    return all((c in vowels for c in word if c.lower() in vowels))",
        "solution_func": "def g(vowels='aeiou'):\n    word = \"Hello, World!\"\n    return word",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(target=0):\n    nums = [-1, 2, 3, 5, 6, 7]\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 193,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))",
        "solution_func": "def g(target=0):\n    nums = [-1, 2, 3, 5, 6, 7]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the sum of the elements in each row of the matrix is equal to n\"\"\"\n    return all((sum(row) == n for row in matrix))\ndef g(n=3):\n    matrix = [[1, 1, 1], [2, 2, 2], [3, 3, 3]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 193,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the sum of the elements in each row of the matrix is equal to n\"\"\"\n    return all((sum(row) == n for row in matrix))",
        "solution_func": "def g(n=3):\n    matrix = [[1, 1, 1], [2, 2, 2], [3, 3, 3]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, nums=[684, 475, 293, 875, 102], target=131) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[684, 475, 293, 875, 102], target=131):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 193,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, nums=[684, 475, 293, 875, 102], target=131) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[684, 475, 293, 875, 102], target=131):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=6) -> bool:\n    \"\"\"Find a sublist of numbers that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            sublist = nums[i:j+1]\n            if sum(sublist) == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=6):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 193,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=6) -> bool:\n    \"\"\"Find a sublist of numbers that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            sublist = nums[i:j+1]\n            if sum(sublist) == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=6):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=9) -> bool:\n    \"\"\"Check if the sum of all elements in the matrix is equal to the target\"\"\"\n    return np.sum(matrix) == target\n\ndef g(target=9):\n    matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 193,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=9) -> bool:\n    \"\"\"Check if the sum of all elements in the matrix is equal to the target\"\"\"\n    return np.sum(matrix) == target",
        "solution_func": "def g(target=9):\n    matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string s contains exactly n vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = sum([1 for char in s if char.lower() in vowels])\n    return count == n\ndef g(n=3):\n    return 'aeiou'[:n]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 193,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string s contains exactly n vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = sum([1 for char in s if char.lower() in vowels])\n    return count == n",
        "solution_func": "def g(n=3):\n    return 'aeiou'[:n]",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=['unus', 'duo', 'tres', 'quattuor', 'quinque', 'sex', 'septem', 'octo', 'novem', 'decem']) -> bool:\n    \"\"\"Check if the sum of the digits in the Roman numeral representation of a number is equal to the number itself.\n    The Roman numeral representation of a number is obtained by replacing each digit with its corresponding string in the given list.\n    Sample input:\n    8\n    Sample output:\n    True\n    The Roman numeral representation of 8 is 'octo' and the sum of the digits in 'octo' is 8, which matches the original number.\"\"\"\n    roman = nums[n]\n    return sum(int(d) for d in roman if d.isdigit()) == n\n\ndef g(nums=['unus', 'duo', 'tres', 'quattuor', 'quinque', 'sex', 'septem', 'octo', 'novem', 'decem']):\n    return nums.index(str(sum(range(10))))\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 194,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=['unus', 'duo', 'tres', 'quattuor', 'quinque', 'sex', 'septem', 'octo', 'novem', 'decem']) -> bool:\n    \"\"\"Check if the sum of the digits in the Roman numeral representation of a number is equal to the number itself.\n    The Roman numeral representation of a number is obtained by replacing each digit with its corresponding string in the given list.\n    Sample input:\n    8\n    Sample output:\n    True\n    The Roman numeral representation of 8 is 'octo' and the sum of the digits in 'octo' is 8, which matches the original number.\"\"\"\n    roman = nums[n]\n    return sum(int(d) for d in roman if d.isdigit()) == n",
        "solution_func": "def g(nums=['unus', 'duo', 'tres', 'quattuor', 'quinque', 'sex', 'septem', 'octo', 'novem', 'decem']):\n    return nums.index(str(sum(range(10))))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Check if the given string is a palindrome and if the sum of the digits in the string is equal to the given number.\n    Sample input:\n    'racecar'\n    Sample output:\n    True\n    The string 'racecar' is a palindrome and the sum of the digits in 'racecar' is 10, which matches the given number.\"\"\"\n    return s == s[::-1] and sum(int(d) for d in s if d.isdigit()) == n\n\ndef g(n=10):\n    return str(n) * n\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 194,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Check if the given string is a palindrome and if the sum of the digits in the string is equal to the given number.\n    Sample input:\n    'racecar'\n    Sample output:\n    True\n    The string 'racecar' is a palindrome and the sum of the digits in 'racecar' is 10, which matches the given number.\"\"\"\n    return s == s[::-1] and sum(int(d) for d in s if d.isdigit()) == n",
        "solution_func": "def g(n=10):\n    return str(n) * n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if it is possible to form the given target number by combining the given list of numbers using addition or subtraction.\n    Each number in the list can be used only once.\n    Sample input:\n    [4, 5, 6, 7, 8]\n    Sample output:\n    True\n    It is possible to form the target number 20 by adding 4, 5, 6, and 5 and subtracting 7 and 8.\"\"\"\n    def backtrack(nums, target, curr_sum, index):\n        if curr_sum == target:\n            return True\n        if index >= len(nums):\n            return False\n        return backtrack(nums, target, curr_sum + nums[index], index + 1) or backtrack(nums, target, curr_sum - nums[index], index + 1)\n\n    return backtrack(nums, target, 0, 0)\n\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 194,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if it is possible to form the given target number by combining the given list of numbers using addition or subtraction.\n    Each number in the list can be used only once.\n    Sample input:\n    [4, 5, 6, 7, 8]\n    Sample output:\n    True\n    It is possible to form the target number 20 by adding 4, 5, 6, and 5 and subtracting 7 and 8.\"\"\"\n    def backtrack(nums, target, curr_sum, index):\n        if curr_sum == target:\n            return True\n        if index >= len(nums):\n            return False\n        return backtrack(nums, target, curr_sum + nums[index], index + 1) or backtrack(nums, target, curr_sum - nums[index], index + 1)\n\n    return backtrack(nums, target, 0, 0)",
        "solution_func": "def g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date_str: str, format_str='%Y-%m-%d') -> bool:\n    \"\"\"Check if a given date string matches a specific format.\"\"\"\n    try:\n        datetime.strptime(date_str, format_str)\n        return True\n    except ValueError:\n        return False\n\ndef g(format_str='%Y-%m-%d'):\n    return datetime.now().strftime(format_str)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 194,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date_str: str, format_str='%Y-%m-%d') -> bool:\n    \"\"\"Check if a given date string matches a specific format.\"\"\"\n    try:\n        datetime.strptime(date_str, format_str)\n        return True\n    except ValueError:\n        return False",
        "solution_func": "def g(format_str='%Y-%m-%d'):\n    return datetime.now().strftime(format_str)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Determine if there exists a subset of a given list of integers that adds up to a target sum.\"\"\"\n    dp = [False] * (target_sum + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target_sum, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target_sum]\n\ndef g(target_sum=100):\n    random.seed(0)\n    nums = random.choices(range(1, 101), k=10)\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 194,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Determine if there exists a subset of a given list of integers that adds up to a target sum.\"\"\"\n    dp = [False] * (target_sum + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target_sum, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target_sum]",
        "solution_func": "def g(target_sum=100):\n    random.seed(0)\n    nums = random.choices(range(1, 101), k=10)\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a given list that sum up to a target value.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(target=0):\n    return [math.floor(target/2), math.ceil(target/2)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 194,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a given list that sum up to a target value.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False",
        "solution_func": "def g(target=0):\n    return [math.floor(target/2), math.ceil(target/2)]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, threshold=0.5) -> bool:\n    \"\"\"Given a numpy array, return True if the average value of the array is greater than a threshold value, \n    and False otherwise.\"\"\"\n    return np.mean(arr) > threshold\n\ndef g(shape=(3,3), threshold=0.5):\n    return np.random.rand(*shape)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 194,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, threshold=0.5) -> bool:\n    \"\"\"Given a numpy array, return True if the average value of the array is greater than a threshold value, \n    and False otherwise.\"\"\"\n    return np.mean(arr) > threshold",
        "solution_func": "def g(shape=(3,3), threshold=0.5):\n    return np.random.rand(*shape)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\nimport pandas as pd\n\ndef f(df: pd.DataFrame, target_column='target', threshold=0.5) -> bool:\n    \"\"\"Given a pandas DataFrame, return True if the mean value of the target column is greater than a threshold, \n    and False otherwise.\"\"\"\n    return df[target_column].mean() > threshold\n\ndef g(num_rows=10, threshold=0.5):\n    df = pd.DataFrame({'target': np.random.rand(num_rows)})\n    return df\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 194,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\nimport pandas as pd\n\ndef f(df: pd.DataFrame, target_column='target', threshold=0.5) -> bool:\n    \"\"\"Given a pandas DataFrame, return True if the mean value of the target column is greater than a threshold, \n    and False otherwise.\"\"\"\n    return df[target_column].mean() > threshold",
        "solution_func": "def g(num_rows=10, threshold=0.5):\n    df = pd.DataFrame({'target': np.random.rand(num_rows)})\n    return df",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: datetime, target_year=2022) -> bool:\n    \"\"\"Given a datetime object, return True if the year of the datetime object is equal to the target year, \n    and False otherwise.\"\"\"\n    return date.year == target_year\n\ndef g(target_year=2022):\n    return datetime(year=target_year, month=1, day=1)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 194,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date: datetime, target_year=2022) -> bool:\n    \"\"\"Given a datetime object, return True if the year of the datetime object is equal to the target year, \n    and False otherwise.\"\"\"\n    return date.year == target_year",
        "solution_func": "def g(target_year=2022):\n    return datetime(year=target_year, month=1, day=1)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], n=0) -> bool:\n    \"\"\"Check if the maximum value in arr is less than or equal to n\"\"\"\n    return max(arr) <= n\n\ndef g(n=0):\n    return list(range(n+1))\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 194,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], n=0) -> bool:\n    \"\"\"Check if the maximum value in arr is less than or equal to n\"\"\"\n    return max(arr) <= n",
        "solution_func": "def g(n=0):\n    return list(range(n+1))",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, length=5) -> bool:\n    \"\"\"Given a list of integers, find a subsequence of length `length` that sums up to `target`.\"\"\"\n    from itertools import combinations\n    for comb in combinations(nums, length):\n        if sum(comb) == target:\n            return True\n    return False\ndef g(length=5):\n    return length\nassert f([1, 2, 3, 4, 5, 6, 7, 8, 9], 15, g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 195,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, length=5) -> bool:\n    \"\"\"Given a list of integers, find a subsequence of length `length` that sums up to `target`.\"\"\"\n    from itertools import combinations\n    for comb in combinations(nums, length):\n        if sum(comb) == target:\n            return True\n    return False",
        "solution_func": "def g(length=5):\n    return length",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if all words in the list have the given prefix.\"\"\"\n    return all(word.startswith(prefix) for word in words)\ndef g(prefix='pre'):\n    return [prefix + str(i) for i in range(1, 6)]\nassert f(g(), prefix='pre')\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 195,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if all words in the list have the given prefix.\"\"\"\n    return all(word.startswith(prefix) for word in words)",
        "solution_func": "def g(prefix='pre'):\n    return [prefix + str(i) for i in range(1, 6)]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find a pair of numbers in the list that sums up to the target.\"\"\"\n    return any((x + y == target) for x in nums for y in nums if x != y)\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g(), 10)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 195,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find a pair of numbers in the list that sums up to the target.\"\"\"\n    return any((x + y == target) for x in nums for y in nums if x != y)",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[float], threshold=5.0) -> bool:\n    \"\"\"Check if the average of a list of numbers is above a certain threshold.\"\"\"\n    return sum(x) / len(x) > threshold\n\ndef g(threshold=5.0):\n    return [6.0, 7.0, 8.0, 9.0, 10.0]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 195,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[float], threshold=5.0) -> bool:\n    \"\"\"Check if the average of a list of numbers is above a certain threshold.\"\"\"\n    return sum(x) / len(x) > threshold",
        "solution_func": "def g(threshold=5.0):\n    return [6.0, 7.0, 8.0, 9.0, 10.0]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if a given string contains a specific substring.\"\"\"\n    return substring in s\n\ndef g(substring='abc'):\n    return 'defabcghi'\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 195,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if a given string contains a specific substring.\"\"\"\n    return substring in s",
        "solution_func": "def g(substring='abc'):\n    return 'defabcghi'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find a pair of numbers in a list that sum up to a given target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))\n\ndef g(target=20):\n    return [5, 10, 15]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 195,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find a pair of numbers in a list that sum up to a given target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))",
        "solution_func": "def g(target=20):\n    return [5, 10, 15]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, day_of_week='Monday') -> bool:\n    \"\"\"Check if the given date falls on a specific day of the week.\"\"\"\n    return date.strftime(\"%A\") == day_of_week\n\ndef g(day_of_week='Monday'):\n    today = datetime.date.today()\n    while today.strftime(\"%A\") != day_of_week:\n        today += datetime.timedelta(days=1)\n    return today\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 195,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, day_of_week='Monday') -> bool:\n    \"\"\"Check if the given date falls on a specific day of the week.\"\"\"\n    return date.strftime(\"%A\") == day_of_week",
        "solution_func": "def g(day_of_week='Monday'):\n    today = datetime.date.today()\n    while today.strftime(\"%A\") != day_of_week:\n        today += datetime.timedelta(days=1)\n    return today",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=100):\n    nums = random.sample(range(1, 1000), 10)\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 195,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=100):\n    nums = random.sample(range(1, 1000), 10)\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(sentence: str, word_count=5) -> bool:\n    \"\"\"Check if the sentence has the specified number of words.\"\"\"\n    words = sentence.split()\n    return len(words) == word_count\n\ndef g(word_count=5):\n    sentence = \"The quick brown fox jumps over the lazy dog.\"\n    return sentence\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 195,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(sentence: str, word_count=5) -> bool:\n    \"\"\"Check if the sentence has the specified number of words.\"\"\"\n    words = sentence.split()\n    return len(words) == word_count",
        "solution_func": "def g(word_count=5):\n    sentence = \"The quick brown fox jumps over the lazy dog.\"\n    return sentence",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Check if a given date string is in the specified format.\"\"\"\n    try:\n        datetime.strptime(date, format)\n        return True\n    except ValueError:\n        return False\n\ndef g(format='%Y-%m-%d'):\n    return datetime.now().strftime(format)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 195,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Check if a given date string is in the specified format.\"\"\"\n    try:\n        datetime.strptime(date, format)\n        return True\n    except ValueError:\n        return False",
        "solution_func": "def g(format='%Y-%m-%d'):\n    return datetime.now().strftime(format)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=17, length=5) -> bool:\n    \"\"\"Find if there exists a sublist of a given length that adds up to the target value\"\"\"\n    sublists = [nums[i:i+length] for i in range(len(nums)-length+1)]\n    return any(sum(sublist) == target for sublist in sublists)\ndef g(target=17, length=5):\n    return [i for i in range(1, target+1)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 196,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=17, length=5) -> bool:\n    \"\"\"Find if there exists a sublist of a given length that adds up to the target value\"\"\"\n    sublists = [nums[i:i+length] for i in range(len(nums)-length+1)]\n    return any(sum(sublist) == target for sublist in sublists)",
        "solution_func": "def g(target=17, length=5):\n    return [i for i in range(1, target+1)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5, row=2, col=3) -> bool:\n    \"\"\"Check if the target value is present in the given row and column of the matrix\"\"\"\n    return matrix[row][col] == target\ndef g(target=5, row=2, col=3):\n    matrix = [[i+j for j in range(5)] for i in range(5)]\n    return matrix\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 196,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=5, row=2, col=3) -> bool:\n    \"\"\"Check if the target value is present in the given row and column of the matrix\"\"\"\n    return matrix[row][col] == target",
        "solution_func": "def g(target=5, row=2, col=3):\n    matrix = [[i+j for j in range(5)] for i in range(5)]\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], length=5) -> bool:\n    \"\"\"Check if all words in the list have a length equal to the given length\"\"\"\n    return all(len(word) == length for word in words)\ndef g(length=5):\n    words = ['apple', 'banana', 'cherry', 'date', 'elderberry']\n    return words\nassert f(g())\n",
        "emb": null,
        "idx_generation": 196,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], length=5) -> bool:\n    \"\"\"Check if all words in the list have a length equal to the given length\"\"\"\n    return all(len(word) == length for word in words)",
        "solution_func": "def g(length=5):\n    words = ['apple', 'banana', 'cherry', 'date', 'elderberry']\n    return words",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 4, 7, 10, 13, 16, 19, 22, 25]) -> bool:\n    \"\"\"Given a list of numbers, determine if the number n is a perfect square.\nA perfect square is an integer that is equal to the square of another integer.\nSample Input:\nn = 9\nSample Output:\nTrue\"\"\"\n    return n in [x ** 2 for x in nums]\ndef g(nums=[1, 4, 7, 10, 13, 16, 19, 22, 25]):\n    return [int(x ** 0.5) for x in nums]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 196,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 4, 7, 10, 13, 16, 19, 22, 25]) -> bool:\n    \"\"\"Given a list of numbers, determine if the number n is a perfect square.\nA perfect square is an integer that is equal to the square of another integer.\nSample Input:\nn = 9\nSample Output:\nTrue\"\"\"\n    return n in [x ** 2 for x in nums]",
        "solution_func": "def g(nums=[1, 4, 7, 10, 13, 16, 19, 22, 25]):\n    return [int(x ** 0.5) for x in nums]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(word: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Given a list of strings, determine if the word is a palindrome.\nA palindrome is a word that is the same when read forwards and backwards.\nSample Input:\nword = 'racecar'\nSample Output:\nTrue\"\"\"\n    return word[::-1] in strings\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return [x[::-1] for x in strings]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 196,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Given a list of strings, determine if the word is a palindrome.\nA palindrome is a word that is the same when read forwards and backwards.\nSample Input:\nword = 'racecar'\nSample Output:\nTrue\"\"\"\n    return word[::-1] in strings",
        "solution_func": "def g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return [x[::-1] for x in strings]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, lst=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Given a list of strings, determine if the string s is an anagram of any of the strings in the list.\nAn anagram is a word or phrase formed by rearranging the letters of a different word or phrase.\nSample Input:\ns = 'race'\nSample Output:\nTrue\"\"\"\n    return sorted(s) in [sorted(x) for x in lst]\ndef g(lst=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return [''.join(sorted(x)) for x in lst]\nassert f(g())",
        "emb": null,
        "idx_generation": 196,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, lst=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Given a list of strings, determine if the string s is an anagram of any of the strings in the list.\nAn anagram is a word or phrase formed by rearranging the letters of a different word or phrase.\nSample Input:\ns = 'race'\nSample Output:\nTrue\"\"\"\n    return sorted(s) in [sorted(x) for x in lst]",
        "solution_func": "def g(lst=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return [''.join(sorted(x)) for x in lst]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=3, target=20) -> bool:\n    \"\"\"Find a number that is a multiple of a given number and is greater than a target number\"\"\"\n    return n % m == 0 and n > target\ndef g(m=3, target=20):\n    return m * (target // m + 1)\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "idx_generation": 196,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=3, target=20) -> bool:\n    \"\"\"Find a number that is a multiple of a given number and is greater than a target number\"\"\"\n    return n % m == 0 and n > target",
        "solution_func": "def g(m=3, target=20):\n    return m * (target // m + 1)",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Given a list of numbers, find a pair of numbers that adds up to a target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=5):\n    return [1, target - 1]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 196,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Given a list of numbers, find a pair of numbers that adds up to a target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=5):\n    return [1, target - 1]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Given a matrix of numbers, find any two numbers that add up to a target number\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[0])):\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return True\n    return False\ndef g(target=50):\n    return [[1, 2], [target - 1, 48]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 196,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Given a matrix of numbers, find any two numbers that add up to a target number\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[0])):\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return True\n    return False",
        "solution_func": "def g(target=50):\n    return [[1, 2], [target - 1, 48]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, target=153) -> bool:\n    \"\"\"Find a number that can be expressed as the sum of the cubes of its digits\"\"\"\n    return sum(int(x) ** 3 for x in str(num)) == target\ndef g(target=153):\n    num = 0\n    while True:\n        if sum(int(x) ** 3 for x in str(num)) == target:\n            return num\n        num += 1\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 196,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int, target=153) -> bool:\n    \"\"\"Find a number that can be expressed as the sum of the cubes of its digits\"\"\"\n    return sum(int(x) ** 3 for x in str(num)) == target",
        "solution_func": "def g(target=153):\n    num = 0\n    while True:\n        if sum(int(x) ** 3 for x in str(num)) == target:\n            return num\n        num += 1",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if n is the average of two distinct numbers in the list\"\"\"\n    return any([(nums[i] + nums[j]) / 2 == n for i in range(len(nums)) for j in range(len(nums)) if i != j])\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return sum(nums) / len(nums)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 197,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if n is the average of two distinct numbers in the list\"\"\"\n    return any([(nums[i] + nums[j]) / 2 == n for i in range(len(nums)) for j in range(len(nums)) if i != j])",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return sum(nums) / len(nums)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if any row in the matrix has all elements equal to the target\"\"\"\n    return any([all([element == target for element in row]) for row in matrix])\ndef g(matrix: List[List[int]]):\n    return [[10 for _ in range(len(matrix[0]))] for _ in range(len(matrix))]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 197,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if any row in the matrix has all elements equal to the target\"\"\"\n    return any([all([element == target for element in row]) for row in matrix])",
        "solution_func": "def g(matrix: List[List[int]]):\n    return [[10 for _ in range(len(matrix[0]))] for _ in range(len(matrix))]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string s contains exactly n occurrences of each character\"\"\"\n    return all([s.count(char) == n for char in set(s)])\ndef g(n=3):\n    return ''.join([chr(ord('a') + i) * n for i in range(26)])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 197,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string s contains exactly n occurrences of each character\"\"\"\n    return all([s.count(char) == n for char in set(s)])",
        "solution_func": "def g(n=3):\n    return ''.join([chr(ord('a') + i) * n for i in range(26)])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array that sum up to the target_sum\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return np.array([1, 2, 3, 4, 5])\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 197,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array that sum up to the target_sum\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=10):\n    return np.array([1, 2, 3, 4, 5])",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: list, target_count=3, target_sum=10) -> bool:\n    \"\"\"Check if there exists a subset of 'target_count' elements in the list that sum up to the target_sum\"\"\"\n    subsets = []\n    n = len(arr)\n    for i in range(2**n):\n        subset = [arr[j] for j in range(n) if (i & (1 << j)) != 0]\n        if len(subset) == target_count and sum(subset) == target_sum:\n            return True\n    return False\n\ndef g(target_count=3, target_sum=10):\n    return random.sample(range(1, 10), 5)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 197,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(arr: list, target_count=3, target_sum=10) -> bool:\n    \"\"\"Check if there exists a subset of 'target_count' elements in the list that sum up to the target_sum\"\"\"\n    subsets = []\n    n = len(arr)\n    for i in range(2**n):\n        subset = [arr[j] for j in range(n) if (i & (1 << j)) != 0]\n        if len(subset) == target_count and sum(subset) == target_sum:\n            return True\n    return False",
        "solution_func": "def g(target_count=3, target_sum=10):\n    return random.sample(range(1, 10), 5)",
        "map_ix": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_len=10) -> bool:\n    \"\"\"Check if the given string has length equal to the target_len\"\"\"\n    return len(s) == target_len\n\ndef g(target_len=10):\n    return \"HelloWorld\"\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 197,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target_len=10) -> bool:\n    \"\"\"Check if the given string has length equal to the target_len\"\"\"\n    return len(s) == target_len",
        "solution_func": "def g(target_len=10):\n    return \"HelloWorld\"",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=15, k=3) -> bool:\n    \"\"\"Find if there exists a combination of k numbers in the list that add up to the target value.\"\"\"\n    from itertools import combinations\n    for c in combinations(nums, k):\n        if sum(c) == target:\n            return True\n    return False\ndef g(target=15, k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 197,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=15, k=3) -> bool:\n    \"\"\"Find if there exists a combination of k numbers in the list that add up to the target value.\"\"\"\n    from itertools import combinations\n    for c in combinations(nums, k):\n        if sum(c) == target:\n            return True\n    return False",
        "solution_func": "def g(target=15, k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the matrix that add up to the target value.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for x in range(i, len(matrix)):\n                for y in range(len(matrix[x])):\n                    if i != x or j != y:\n                        if matrix[i][j] + matrix[x][y] == target:\n                            return True\n    return False\ndef g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 197,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the matrix that add up to the target value.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for x in range(i, len(matrix)):\n                for y in range(len(matrix[x])):\n                    if i != x or j != y:\n                        if matrix[i][j] + matrix[x][y] == target:\n                            return True\n    return False",
        "solution_func": "def g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Find if there exists a combination of numbers in the list that multiply to the target value.\"\"\"\n    from itertools import combinations\n    for n in range(1, len(nums) + 1):\n        for c in combinations(nums, n):\n            if all(i != 0 for i in c) and target % (reduce((lambda x, y: x * y), c)) == 0:\n                return True\n    return False\ndef g(target=50):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 197,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Find if there exists a combination of numbers in the list that multiply to the target value.\"\"\"\n    from itertools import combinations\n    for n in range(1, len(nums) + 1):\n        for c in combinations(nums, n):\n            if all(i != 0 for i in c) and target % (reduce((lambda x, y: x * y), c)) == 0:\n                return True\n    return False",
        "solution_func": "def g(target=50):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=1234) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=1234):\n    return [target // 2, target // 2]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 197,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=1234) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(target=1234):\n    return [target // 2, target // 2]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=2.5, b=-3.8) -> bool:\n    \"\"\"Solve an exponential equation\"\"\"\n    return math.exp(a * x) == b\n\ndef g(a=2.5, b=-3.8):\n    return math.log(b) / a\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 198,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=2.5, b=-3.8) -> bool:\n    \"\"\"Solve an exponential equation\"\"\"\n    return math.exp(a * x) == b",
        "solution_func": "def g(a=2.5, b=-3.8):\n    return math.log(b) / a",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: list, num=7) -> bool:\n    \"\"\"Check if a number is present in a specific pattern in a list\"\"\"\n    return any(all(lst[i+j] == num for j in range(3)) for i in range(len(lst)-2))\n\ndef g(num=7):\n    lst = [random.choice([num, random.randint(1, 10)]) for _ in range(10)]\n    return lst\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 198,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(lst: list, num=7) -> bool:\n    \"\"\"Check if a number is present in a specific pattern in a list\"\"\"\n    return any(all(lst[i+j] == num for j in range(3)) for i in range(len(lst)-2))",
        "solution_func": "def g(num=7):\n    lst = [random.choice([num, random.randint(1, 10)]) for _ in range(10)]\n    return lst",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=3, m=5) -> bool:\n    \"\"\"Check if a string contains a specific pattern of characters\"\"\"\n    return s[:n] == s[-n:] and len(s) > m\n\ndef g(n=3, m=5):\n    s = 'abcde' * (m // 5) + 'xyz'\n    return s\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 198,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3, m=5) -> bool:\n    \"\"\"Check if a string contains a specific pattern of characters\"\"\"\n    return s[:n] == s[-n:] and len(s) > m",
        "solution_func": "def g(n=3, m=5):\n    s = 'abcde' * (m // 5) + 'xyz'\n    return s",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=2022) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target number\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=2022):\n    return [i for i in range(1, target//2+1)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 198,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=2022) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target number\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(target=2022):\n    return [i for i in range(1, target//2+1)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target number\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g(target=100):\n    return [i for i in range(1, target//3+1)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 198,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target number\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))",
        "solution_func": "def g(target=100):\n    return [i for i in range(1, target//3+1)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find four numbers in the list that add up to the target number\"\"\"\n    return any((nums[i] + nums[j] + nums[k] + nums[l] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)) for l in range(k+1, len(nums))))\ndef g(target=20):\n    return [i for i in range(1, target//4+1)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 198,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find four numbers in the list that add up to the target number\"\"\"\n    return any((nums[i] + nums[j] + nums[k] + nums[l] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)) for l in range(k+1, len(nums))))",
        "solution_func": "def g(target=20):\n    return [i for i in range(1, target//4+1)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers from the list that adds up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(1, len(nums) + 1) for comb in combinations(nums, r))\ndef g(target=100):\n    nums = [1, 20, 3, 45, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 198,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers from the list that adds up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(1, len(nums) + 1) for comb in combinations(nums, r))",
        "solution_func": "def g(target=100):\n    nums = [1, 20, 3, 45, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(words: List[str], substring='ing') -> bool:\n    \"\"\"Find a word in the list that contains the given substring\"\"\"\n    return any(substring in word for word in words)\ndef g(substring='ing'):\n    words = ['programming', 'mathematics', 'science', 'history', 'geography']\n    return words\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 198,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\ndef f(words: List[str], substring='ing') -> bool:\n    \"\"\"Find a word in the list that contains the given substring\"\"\"\n    return any(substring in word for word in words)",
        "solution_func": "def g(substring='ing'):\n    words = ['programming', 'mathematics', 'science', 'history', 'geography']\n    return words",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from the list that sums up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 198,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from the list that sums up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if a given string is an anagram of the target string\"\"\"\n    return sorted(s.lower()) == sorted(target.lower())\ndef g(target='hello'):\n    import random\n    letters = list(target)\n    random.shuffle(letters)\n    return ''.join(letters)\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 198,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if a given string is an anagram of the target string\"\"\"\n    return sorted(s.lower()) == sorted(target.lower())",
        "solution_func": "def g(target='hello'):\n    import random\n    letters = list(target)\n    random.shuffle(letters)\n    return ''.join(letters)",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(d: datetime.date, weekday='Monday') -> bool:\n    \"\"\"Check if the given date is on the specified weekday\"\"\"\n    return d.strftime('%A') == weekday\n\ndef g(weekday='Monday'):\n    today = datetime.date.today()\n    while today.strftime('%A') != weekday:\n        today += datetime.timedelta(days=1)\n    return today\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 199,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(d: datetime.date, weekday='Monday') -> bool:\n    \"\"\"Check if the given date is on the specified weekday\"\"\"\n    return d.strftime('%A') == weekday",
        "solution_func": "def g(weekday='Monday'):\n    today = datetime.date.today()\n    while today.strftime('%A') != weekday:\n        today += datetime.timedelta(days=1)\n    return today",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, value=0) -> bool:\n    \"\"\"Check if the given array contains the specified value\"\"\"\n    return np.any(arr == value)\n\ndef g(value=0):\n    arr = np.random.randint(10, size=(5, 5))\n    return arr\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 199,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, value=0) -> bool:\n    \"\"\"Check if the given array contains the specified value\"\"\"\n    return np.any(arr == value)",
        "solution_func": "def g(value=0):\n    arr = np.random.randint(10, size=(5, 5))\n    return arr",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(s: str, pattern='[0-9a-f]+') -> bool:\n    \"\"\"Check if the given string matches the specified pattern\"\"\"\n    return bool(re.fullmatch(pattern, s))\n\ndef g(pattern='[0-9a-f]+'):\n    s = '0a2b4c6d8e'\n    return s\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 199,
        "target_skills": null,
        "problem_func": "from typing import*\nimport re\n\ndef f(s: str, pattern='[0-9a-f]+') -> bool:\n    \"\"\"Check if the given string matches the specified pattern\"\"\"\n    return bool(re.fullmatch(pattern, s))",
        "solution_func": "def g(pattern='[0-9a-f]+'):\n    s = '0a2b4c6d8e'\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, target=1000) -> bool:\n    \"\"\"Given an integer n, determine if it is possible to find two integers a and b such that a + b = target\"\"\"\n    return any(a + b == target for a in range(n) for b in range(n))\ndef g(target=1000):\n    return target // 2, target // 2\nassert f(g())\n",
        "emb": null,
        "idx_generation": 199,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target=1000) -> bool:\n    \"\"\"Given an integer n, determine if it is possible to find two integers a and b such that a + b = target\"\"\"\n    return any(a + b == target for a in range(n) for b in range(n))",
        "solution_func": "def g(target=1000):\n    return target // 2, target // 2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers in the list such that their sum is equal to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 199,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers in the list such that their sum is equal to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Given a list of integers, find if there exists three numbers in the list such that their sum is equal to 0\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == 0 for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g():\n    return [1, 2, -3, 4, -1, 0]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 199,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Given a list of integers, find if there exists three numbers in the list such that their sum is equal to 0\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == 0 for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))",
        "solution_func": "def g():\n    return [1, 2, -3, 4, -1, 0]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(li: List[int], n=5) -> bool:\n    \"\"\"Given n, find n integers such that li[i] + li[i+1] == li[i+2], for i = 0, 1, ..., n-1\nwhere indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\nthat are multiples of 3 (as proven in the IMO problem).\nSample input:\n5\nSample output:\n[_, _, _, _, _]\n(Sample output hidden because showing sample output would give away too much information.)\"\"\"\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == li[(i + 1) % n] + li[i] for i in range(n)))\ndef g(n=5):\n    return [1, 2, 3] * (n // 3)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 199,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int], n=5) -> bool:\n    \"\"\"Given n, find n integers such that li[i] + li[i+1] == li[i+2], for i = 0, 1, ..., n-1\nwhere indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\nthat are multiples of 3 (as proven in the IMO problem).\nSample input:\n5\nSample output:\n[_, _, _, _, _]\n(Sample output hidden because showing sample output would give away too much information.)\"\"\"\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == li[(i + 1) % n] + li[i] for i in range(n)))",
        "solution_func": "def g(n=5):\n    return [1, 2, 3] * (n // 3)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Find the first string in a list that contains the reverse of s as a substring.\"\"\"\n    return any((s[::-1] in t for t in strings))\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return next((t for t in strings if s[::-1] in t), None)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 199,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Find the first string in a list that contains the reverse of s as a substring.\"\"\"\n    return any((s[::-1] in t for t in strings))",
        "solution_func": "def g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return next((t for t in strings if s[::-1] in t), None)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(start: int, k=5, lower=-20, seq=[1, -5, 2, -3, 4, -1, 0, -2, 3]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is minimal\"\"\"\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= lower\ndef g(k=5, lower=-20, seq=[1, -5, 2, -3, 4, -1, 0, -2, 3]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 199,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(start: int, k=5, lower=-20, seq=[1, -5, 2, -3, 4, -1, 0, -2, 3]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is minimal\"\"\"\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= lower",
        "solution_func": "def g(k=5, lower=-20, seq=[1, -5, 2, -3, 4, -1, 0, -2, 3]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(d: datetime, y=2022, m=1, day=1) -> bool:\n    \"\"\"Check if a given date is the start of a new year\"\"\"\n    return d.year == y and d.month == m and d.day == day\n\ndef g(y=2022, m=1, day=1):\n    return datetime(y, m, day)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 199,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(d: datetime, y=2022, m=1, day=1) -> bool:\n    \"\"\"Check if a given date is the start of a new year\"\"\"\n    return d.year == y and d.month == m and d.day == day",
        "solution_func": "def g(y=2022, m=1, day=1):\n    return datetime(y, m, day)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry', 'date'], k=2) -> bool:\n    \"\"\"Check if a string can be formed by concatenating k distinct substrings from a given list of substrings.\"\"\"\n    return len(s) == sum(len(sub) for sub in substrings) * k and all(s.count(sub) == k for sub in substrings)\ndef g(substrings=['apple', 'banana', 'cherry', 'date'], k=2):\n    return ''.join(sub for sub in substrings for _ in range(k))\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 200,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry', 'date'], k=2) -> bool:\n    \"\"\"Check if a string can be formed by concatenating k distinct substrings from a given list of substrings.\"\"\"\n    return len(s) == sum(len(sub) for sub in substrings) * k and all(s.count(sub) == k for sub in substrings)",
        "solution_func": "def g(substrings=['apple', 'banana', 'cherry', 'date'], k=2):\n    return ''.join(sub for sub in substrings for _ in range(k))",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if a target sum can be achieved by adding/subtracting elements from a given list of integers.\"\"\"\n    import itertools\n    return any(sum(combo) == target for combo in itertools.product([-1, 1], repeat=len(arr)))\ndef g(target=100):\n    return [1] * target\nassert f(g())\n",
        "emb": null,
        "idx_generation": 200,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if a target sum can be achieved by adding/subtracting elements from a given list of integers.\"\"\"\n    import itertools\n    return any(sum(combo) == target for combo in itertools.product([-1, 1], repeat=len(arr)))",
        "solution_func": "def g(target=100):\n    return [1] * target",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sums=[6, 15, 10], col_sums=[5, 7]) -> bool:\n    \"\"\"Check if a matrix can be formed with given row and column sums.\"\"\"\n    return all(sum(row) == row_sums[i] for i, row in enumerate(matrix)) and all(sum(col) == col_sums[i] for i, col in enumerate(zip(*matrix)))\ndef g(row_sums=[6, 15, 10], col_sums=[5, 7]):\n    return [[1] * len(col_sums) for _ in range(len(row_sums))]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 200,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row_sums=[6, 15, 10], col_sums=[5, 7]) -> bool:\n    \"\"\"Check if a matrix can be formed with given row and column sums.\"\"\"\n    return all(sum(row) == row_sums[i] for i, row in enumerate(matrix)) and all(sum(col) == col_sums[i] for i, col in enumerate(zip(*matrix)))",
        "solution_func": "def g(row_sums=[6, 15, 10], col_sums=[5, 7]):\n    return [[1] * len(col_sums) for _ in range(len(row_sums))]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(amount: int, coins=[1, 2, 5, 10, 20, 50, 100, 200]) -> bool:\n    \"\"\"Determine the number of ways to make change for a given amount using a set of coins.\"\"\"\n    dp = [0] * (amount + 1)\n    dp[0] = 1\n    for coin in coins:\n        for i in range(coin, amount + 1):\n            dp[i] += dp[i - coin]\n    return dp[amount]\ndef g(coins=[1, 2, 5, 10, 20, 50, 100, 200]):\n    return 200\nassert f(g()) == True\n",
        "emb": null,
        "idx_generation": 200,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(amount: int, coins=[1, 2, 5, 10, 20, 50, 100, 200]) -> bool:\n    \"\"\"Determine the number of ways to make change for a given amount using a set of coins.\"\"\"\n    dp = [0] * (amount + 1)\n    dp[0] = 1\n    for coin in coins:\n        for i in range(coin, amount + 1):\n            dp[i] += dp[i - coin]\n    return dp[amount]",
        "solution_func": "def g(coins=[1, 2, 5, 10, 20, 50, 100, 200]):\n    return 200",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, t: str, k: int = 3) -> bool:\n    \"\"\"Determine if two strings are k-anagrams.\"\"\"\n    if len(s) != len(t):\n        return False\n    count = [0] * 26\n    for i in range(len(s)):\n        count[ord(s[i]) - ord('a')] += 1\n        count[ord(t[i]) - ord('a')] -= 1\n    return all(x == 0 for x in count)\ndef g(k: int = 3):\n    return 'k-anagram'\nassert f(g(), g()) == True\n",
        "emb": null,
        "idx_generation": 200,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, t: str, k: int = 3) -> bool:\n    \"\"\"Determine if two strings are k-anagrams.\"\"\"\n    if len(s) != len(t):\n        return False\n    count = [0] * 26\n    for i in range(len(s)):\n        count[ord(s[i]) - ord('a')] += 1\n        count[ord(t[i]) - ord('a')] -= 1\n    return all(x == 0 for x in count)",
        "solution_func": "def g(k: int = 3):\n    return 'k-anagram'",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Determine if there exist three elements in a given array that sum to the given target.\"\"\"\n    nums.sort()\n    for i in range(len(nums) - 2):\n        left = i + 1\n        right = len(nums) - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\ndef g(target: int):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g(), g()) == True\n",
        "emb": null,
        "idx_generation": 200,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Determine if there exist three elements in a given array that sum to the given target.\"\"\"\n    nums.sort()\n    for i in range(len(nums) - 2):\n        left = i + 1\n        right = len(nums) - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False",
        "solution_func": "def g(target: int):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=42) -> bool:\n    \"\"\"Find a row in the matrix that contains all the elements that sum up to the target\"\"\"\n    return any((sum(row) == target for row in matrix))\n    \ndef g(matrix: List[List[int]], target=42):\n    return [target] * len(matrix[0])\n    \nassert f(g())\n",
        "emb": null,
        "idx_generation": 200,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=42) -> bool:\n    \"\"\"Find a row in the matrix that contains all the elements that sum up to the target\"\"\"\n    return any((sum(row) == target for row in matrix))",
        "solution_func": "def g(matrix: List[List[int]], target=42):\n    return [target] * len(matrix[0])",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that sums up to the target\"\"\"\n    from itertools import combinations\n    return any((sum(comb) == target for comb in combinations(numbers, 2)))\n    \ndef g(numbers: List[int], target=100):\n    return numbers\n    \nassert f(g())\n",
        "emb": null,
        "idx_generation": 200,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that sums up to the target\"\"\"\n    from itertools import combinations\n    return any((sum(comb) == target for comb in combinations(numbers, 2)))",
        "solution_func": "def g(numbers: List[int], target=100):\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], max_length=7) -> bool:\n    \"\"\"Check if any word in the list has a length greater than the max_length\"\"\"\n    return any((len(word) > max_length for word in words))\n    \ndef g(words: List[str], max_length=7):\n    return words + ['abcdefghijklmno']\n    \nassert f(g())\n",
        "emb": null,
        "idx_generation": 200,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], max_length=7) -> bool:\n    \"\"\"Check if any word in the list has a length greater than the max_length\"\"\"\n    return any((len(word) > max_length for word in words))",
        "solution_func": "def g(words: List[str], max_length=7):\n    return words + ['abcdefghijklmno']",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=8) -> bool:\n    \"\"\"Given a list of integers, return True if there are two distinct numbers in the list that sum up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums: List[int]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 200,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=8) -> bool:\n    \"\"\"Given a list of integers, return True if there are two distinct numbers in the list that sum up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(nums: List[int]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=18, max_nums=3, options=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose sum is the target value.\"\"\"\n    for n in nums:\n        assert n in options\n    return len(nums) <= max_nums and sum(nums) == target\ndef g(target=18, max_nums=3, options=[1, 2, 3, 4, 5]):\n    from itertools import combinations\n    for n in range(max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 201,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=18, max_nums=3, options=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose sum is the target value.\"\"\"\n    for n in nums:\n        assert n in options\n    return len(nums) <= max_nums and sum(nums) == target",
        "solution_func": "def g(target=18, max_nums=3, options=[1, 2, 3, 4, 5]):\n    from itertools import combinations\n    for n in range(max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(words: List[str], target_length=10, max_words=3, options=['cat', 'dog', 'bird', 'elephant', 'tiger']) -> bool:\n    \"\"\"Find a combination of at most max_words words whose concatenated length is the target_length value.\"\"\"\n    for w in words:\n        assert w in options\n    return len(words) <= max_words and len(''.join(words)) == target_length\ndef g(target_length=10, max_words=3, options=['cat', 'dog', 'bird', 'elephant', 'tiger']):\n    from itertools import combinations\n    for n in range(max_words + 1):\n        for c in combinations(options, n):\n            if len(''.join(c)) == target_length:\n                return list(c)\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 201,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(words: List[str], target_length=10, max_words=3, options=['cat', 'dog', 'bird', 'elephant', 'tiger']) -> bool:\n    \"\"\"Find a combination of at most max_words words whose concatenated length is the target_length value.\"\"\"\n    for w in words:\n        assert w in options\n    return len(words) <= max_words and len(''.join(words)) == target_length",
        "solution_func": "def g(target_length=10, max_words=3, options=['cat', 'dog', 'bird', 'elephant', 'tiger']):\n    from itertools import combinations\n    for n in range(max_words + 1):\n        for c in combinations(options, n):\n            if len(''.join(c)) == target_length:\n                return list(c)",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], target_sum=15, max_elements=3, options=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find a combination of at most max_elements elements from the matrix whose sum is the target_sum value.\"\"\"\n    for row in matrix:\n        for elem in row:\n            assert elem in options\n    return sum([elem for row in matrix for elem in row]) == target_sum\ndef g(target_sum=15, max_elements=3, options=[1, 2, 3, 4, 5]):\n    from itertools import combinations\n    for n in range(max_elements + 1):\n        for c in combinations([elem for row in matrix for elem in row], n):\n            if sum(c) == target_sum:\n                return list(c)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 201,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], target_sum=15, max_elements=3, options=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find a combination of at most max_elements elements from the matrix whose sum is the target_sum value.\"\"\"\n    for row in matrix:\n        for elem in row:\n            assert elem in options\n    return sum([elem for row in matrix for elem in row]) == target_sum",
        "solution_func": "def g(target_sum=15, max_elements=3, options=[1, 2, 3, 4, 5]):\n    from itertools import combinations\n    for n in range(max_elements + 1):\n        for c in combinations([elem for row in matrix for elem in row], n):\n            if sum(c) == target_sum:\n                return list(c)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x=15, y=7) -> bool:\n    \"\"\"Check if n is a multiple of both x and y.\"\"\"\n    return n % x == 0 and n % y == 0\ndef g(x=15, y=7):\n    return x * y\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 201,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, x=15, y=7) -> bool:\n    \"\"\"Check if n is a multiple of both x and y.\"\"\"\n    return n % x == 0 and n % y == 0",
        "solution_func": "def g(x=15, y=7):\n    return x * y",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=5, lower_bound=10) -> bool:\n    \"\"\"Check if n is a multiple of k and greater than or equal to lower_bound.\"\"\"\n    return n % k == 0 and n >= lower_bound\ndef g(k=5, lower_bound=10):\n    return k * lower_bound\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 201,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, k=5, lower_bound=10) -> bool:\n    \"\"\"Check if n is a multiple of k and greater than or equal to lower_bound.\"\"\"\n    return n % k == 0 and n >= lower_bound",
        "solution_func": "def g(k=5, lower_bound=10):\n    return k * lower_bound",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=8, b=4, c=2, d=1) -> bool:\n    \"\"\"Check if n can be expressed as the sum of a, b, c, and d.\"\"\"\n    return n == a + b + c + d\ndef g(a=8, b=4, c=2, d=1):\n    return a + b + c + d\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 201,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=8, b=4, c=2, d=1) -> bool:\n    \"\"\"Check if n can be expressed as the sum of a, b, c, and d.\"\"\"\n    return n == a + b + c + d",
        "solution_func": "def g(a=8, b=4, c=2, d=1):\n    return a + b + c + d",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that adds up to the given number n.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == n for r in range(len(nums)+1) for comb in combinations(nums, r))\ndef g(nums=[1, 2, 3, 4, 5]):\n    return sum(nums) // 2\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 201,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that adds up to the given number n.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == n for r in range(len(nums)+1) for comb in combinations(nums, r))",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return sum(nums) // 2",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if there exists a substring of length n that contains all unique characters in the given string s.\"\"\"\n    return any(len(set(s[i:i+n])) == n for i in range(len(s)-n+1))\ndef g(n=3):\n    return \"abcdefghijklmnopqrstuvwxyz\"[:n]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 201,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if there exists a substring of length n that contains all unique characters in the given string s.\"\"\"\n    return any(len(set(s[i:i+n])) == n for i in range(len(s)-n+1))",
        "solution_func": "def g(n=3):\n    return \"abcdefghijklmnopqrstuvwxyz\"[:n]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the given list that adds up to the target number.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)-1) for j in range(i+1, len(nums)))\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 201,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the given list that adds up to the target number.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)-1) for j in range(i+1, len(nums)))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, n=1000) -> bool:\n    \"\"\"Check if the equation (x^2 + y^2 = z^2) has at least n distinct solutions.\"\"\"\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if math.gcd(i, j) == 1 and i**2 + j**2 == z**2:\n                count += 1\n    return count >= n\n\ndef g(n=1000):\n    return n\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 201,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, n=1000) -> bool:\n    \"\"\"Check if the equation (x^2 + y^2 = z^2) has at least n distinct solutions.\"\"\"\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if math.gcd(i, j) == 1 and i**2 + j**2 == z**2:\n                count += 1\n    return count >= n",
        "solution_func": "def g(n=1000):\n    return n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=0, y=0) -> bool:\n    \"\"\"Determine whether a given point (x, y) lies inside the circle centered at the origin (0, 0) with radius n.\"\"\"\n    return math.sqrt(x ** 2 + y ** 2) < n\n\ndef g(x=0, y=0):\n    return [x, y]\nassert f(g(), n=5)\n",
        "emb": null,
        "idx_generation": 202,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=0, y=0) -> bool:\n    \"\"\"Determine whether a given point (x, y) lies inside the circle centered at the origin (0, 0) with radius n.\"\"\"\n    return math.sqrt(x ** 2 + y ** 2) < n",
        "solution_func": "def g(x=0, y=0):\n    return [x, y]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Determine whether a given number n is present in the list of numbers.\"\"\"\n    return n in nums\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return random.choice(nums)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 202,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Determine whether a given number n is present in the list of numbers.\"\"\"\n    return n in nums",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return random.choice(nums)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, string='hello') -> bool:\n    \"\"\"Determine whether a given character n is present in the string.\"\"\"\n    return n in string\n\ndef g(string='hello'):\n    return random.choice(string)\nassert f(g())",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 202,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(n: int, string='hello') -> bool:\n    \"\"\"Determine whether a given character n is present in the string.\"\"\"\n    return n in string",
        "solution_func": "def g(string='hello'):\n    return random.choice(string)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(num: int, max_factor=10) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g(max_factor=10):\n    return max_factor\nassert f(g())\n",
        "emb": null,
        "idx_generation": 202,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int, max_factor=10) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(max_factor=10):\n    return max_factor",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str, s3: str) -> bool:\n    \"\"\"Check if the characters in s3 can be formed by interleaving characters from s1 and s2\"\"\"\n    if len(s1) + len(s2) != len(s3):\n        return False\n    dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n    dp[0][0] = True\n    for i in range(len(s1) + 1):\n        for j in range(len(s2) + 1):\n            if i > 0 and s1[i-1] == s3[i+j-1]:\n                dp[i][j] |= dp[i-1][j]\n            if j > 0 and s2[j-1] == s3[i+j-1]:\n                dp[i][j] |= dp[i][j-1]\n    return dp[-1][-1]\ndef g(s1='abc', s2='def', s3='adbecf'):\n    return s1, s2, s3\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 202,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s1: str, s2: str, s3: str) -> bool:\n    \"\"\"Check if the characters in s3 can be formed by interleaving characters from s1 and s2\"\"\"\n    if len(s1) + len(s2) != len(s3):\n        return False\n    dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n    dp[0][0] = True\n    for i in range(len(s1) + 1):\n        for j in range(len(s2) + 1):\n            if i > 0 and s1[i-1] == s3[i+j-1]:\n                dp[i][j] |= dp[i-1][j]\n            if j > 0 and s2[j-1] == s3[i+j-1]:\n                dp[i][j] |= dp[i][j-1]\n    return dp[-1][-1]",
        "solution_func": "def g(s1='abc', s2='def', s3='adbecf'):\n    return s1, s2, s3",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there are two numbers in the list that add up to the target\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5], target\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 202,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there are two numbers in the list that add up to the target\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5], target",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a='hello', b='world') -> bool:\n    \"\"\"Check if the input string is a concatenation of a and b\"\"\"\n    return x == a + b\ndef g(a='hello', b='world'):\n    return a + b\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 202,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, a='hello', b='world') -> bool:\n    \"\"\"Check if the input string is a concatenation of a and b\"\"\"\n    return x == a + b",
        "solution_func": "def g(a='hello', b='world'):\n    return a + b",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=5, b=7, c=12) -> bool:\n    \"\"\"Check if the input number is divisible by the sum of a, b, and c\"\"\"\n    return x % (a + b + c) == 0\ndef g(a=5, b=7, c=12):\n    return (a + b + c) * 3\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 202,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=5, b=7, c=12) -> bool:\n    \"\"\"Check if the input number is divisible by the sum of a, b, and c\"\"\"\n    return x % (a + b + c) == 0",
        "solution_func": "def g(a=5, b=7, c=12):\n    return (a + b + c) * 3",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: list, a=[1, 2, 3], b=[4, 5, 6]) -> bool:\n    \"\"\"Check if the input list is a combination of a and b\"\"\"\n    return sorted(x) == sorted(a + b)\ndef g(a=[1, 2, 3], b=[4, 5, 6]):\n    return a + b\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 202,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: list, a=[1, 2, 3], b=[4, 5, 6]) -> bool:\n    \"\"\"Check if the input list is a combination of a and b\"\"\"\n    return sorted(x) == sorted(a + b)",
        "solution_func": "def g(a=[1, 2, 3], b=[4, 5, 6]):\n    return a + b",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Find a number that is a prime factor of the given number n.\"\"\"\n    return any(n % num == 0 for num in nums)\ndef g(nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return nums[0]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 202,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Find a number that is a prime factor of the given number n.\"\"\"\n    return any(n % num == 0 for num in nums)",
        "solution_func": "def g(nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return nums[0]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(nums: List[int], count=3, target=10) -> bool:\n    \"\"\"Find a list of count or more numbers such that the sum of the squares of the numbers is equal to the target number\"\"\"\n    return sum([n**2 for n in nums]) == target\ndef g(count=3, target=10):\n    return [int(sqrt(target/count))] * count\nassert f(g())\n",
        "emb": null,
        "idx_generation": 203,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(nums: List[int], count=3, target=10) -> bool:\n    \"\"\"Find a list of count or more numbers such that the sum of the squares of the numbers is equal to the target number\"\"\"\n    return sum([n**2 for n in nums]) == target",
        "solution_func": "def g(count=3, target=10):\n    return [int(sqrt(target/count))] * count",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(ans: List[str], target=3) -> bool:\n    \"\"\"Find a list of target or more strings that are palindromes\"\"\"\n    return all([s == s[::-1] for s in ans])\ndef g(target=3):\n    return ['racecar'] * target\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 203,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(ans: List[str], target=3) -> bool:\n    \"\"\"Find a list of target or more strings that are palindromes\"\"\"\n    return all([s == s[::-1] for s in ans])",
        "solution_func": "def g(target=3):\n    return ['racecar'] * target",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(res: str, target_length=10) -> bool:\n    \"\"\"Find a string of target_length that is composed of randomly selected lowercase letters\"\"\"\n    return len(res) == target_length and res.islower()\ndef g(target_length=10):\n    return ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(target_length))\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 203,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(res: str, target_length=10) -> bool:\n    \"\"\"Find a string of target_length that is composed of randomly selected lowercase letters\"\"\"\n    return len(res) == target_length and res.islower()",
        "solution_func": "def g(target_length=10):\n    return ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(target_length))",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, numbers=[2, 3, 5, 7, 11]) -> bool:\n    \"\"\"Check if n is divisible by all numbers in the list.\"\"\"\n    return all(n % num == 0 for num in numbers)\ndef g(numbers=[2, 3, 5, 7, 11]):\n    return numbers[-1] * 2\nassert f(g())\n",
        "emb": null,
        "idx_generation": 203,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, numbers=[2, 3, 5, 7, 11]) -> bool:\n    \"\"\"Check if n is divisible by all numbers in the list.\"\"\"\n    return all(n % num == 0 for num in numbers)",
        "solution_func": "def g(numbers=[2, 3, 5, 7, 11]):\n    return numbers[-1] * 2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if the string contains all the substrings.\"\"\"\n    return all(sub in string for sub in substrings)\ndef g(substrings=['apple', 'banana', 'cherry']):\n    return ''.join(substrings)\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 203,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if the string contains all the substrings.\"\"\"\n    return all(sub in string for sub in substrings)",
        "solution_func": "def g(substrings=['apple', 'banana', 'cherry']):\n    return ''.join(substrings)",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if n is divisible by any of the prime numbers in the list.\"\"\"\n    return any(n % num == 0 for num in primes)\ndef g(primes=[2, 3, 5, 7, 11, 13]):\n    return primes[0] * primes[1]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 203,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if n is divisible by any of the prime numbers in the list.\"\"\"\n    return any(n % num == 0 for num in primes)",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13]):\n    return primes[0] * primes[1]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(t1: datetime, t2: datetime, diff=3600) -> bool:\n    \"\"\"Check if the difference between two given timestamps is equal to a specified time difference in seconds\"\"\"\n    return (t2 - t1).total_seconds() == diff\n\ndef g(diff=3600):\n    t1 = datetime(2022, 1, 1, 12, 0, 0)\n    t2 = t1 + timedelta(seconds=diff)\n    return t1, t2\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 203,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(t1: datetime, t2: datetime, diff=3600) -> bool:\n    \"\"\"Check if the difference between two given timestamps is equal to a specified time difference in seconds\"\"\"\n    return (t2 - t1).total_seconds() == diff",
        "solution_func": "def g(diff=3600):\n    t1 = datetime(2022, 1, 1, 12, 0, 0)\n    t2 = t1 + timedelta(seconds=diff)\n    return t1, t2",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], x=5, y=10) -> bool:\n    \"\"\"Check if a specified range of numbers is present in a given list\"\"\"\n    return all((num in lst for num in range(x, y+1)))\n\ndef g(x=5, y=10):\n    lst = random.sample(range(1, 20), 10)\n    return lst, x, y\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 203,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(lst: List[int], x=5, y=10) -> bool:\n    \"\"\"Check if a specified range of numbers is present in a given list\"\"\"\n    return all((num in lst for num in range(x, y+1)))",
        "solution_func": "def g(x=5, y=10):\n    lst = random.sample(range(1, 20), 10)\n    return lst, x, y",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Check if the given list contains n perfect square numbers\"\"\"\n    return sum((math.isqrt(num)**2 == num for num in nums)) == n\n\ndef g(n=3):\n    nums = [1, 4, 9, 16, 25, 36, 49]\n    return nums, n\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 203,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Check if the given list contains n perfect square numbers\"\"\"\n    return sum((math.isqrt(num)**2 == num for num in nums)) == n",
        "solution_func": "def g(n=3):\n    nums = [1, 4, 9, 16, 25, 36, 49]\n    return nums, n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(a: float, b=2.0, c=3.0) -> bool:\n    \"\"\"Check if the square root of a divided by b is equal to c\"\"\"\n    return math.sqrt(a/b) == c\n\ndef g(b=2.0, c=3.0):\n    return (c**2)*b\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 203,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(a: float, b=2.0, c=3.0) -> bool:\n    \"\"\"Check if the square root of a divided by b is equal to c\"\"\"\n    return math.sqrt(a/b) == c",
        "solution_func": "def g(b=2.0, c=3.0):\n    return (c**2)*b",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=10):\n    return lst\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 204,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=10):\n    return lst",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, target='abc') -> bool:\n    \"\"\"Check if the string contains the target substring repeated n times.\"\"\"\n    return target * n in s\ndef g(n=3, target='abc'):\n    return target * n + 'xyz'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 204,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3, target='abc') -> bool:\n    \"\"\"Check if the string contains the target substring repeated n times.\"\"\"\n    return target * n in s",
        "solution_func": "def g(n=3, target='abc'):\n    return target * n + 'xyz'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, lst=[4, 9, 16, 25, 36], target=2) -> bool:\n    \"\"\"Check if the target is a perfect square root of any number in the list.\"\"\"\n    return any(math.isqrt(num) == target for num in lst)\ndef g(lst=[4, 9, 16, 25, 36], target=2):\n    return lst\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 204,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, lst=[4, 9, 16, 25, 36], target=2) -> bool:\n    \"\"\"Check if the target is a perfect square root of any number in the list.\"\"\"\n    return any(math.isqrt(num) == target for num in lst)",
        "solution_func": "def g(lst=[4, 9, 16, 25, 36], target=2):\n    return lst",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: list, target=20) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\n    \ndef g(target=20):\n    return [10, 8, 12, 5, 15, -2, 7]\n    \nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 204,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(nums: list, target=20) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=20):\n    return [10, 8, 12, 5, 15, -2, 7]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: list, target=100) -> bool:\n    \"\"\"Find a row in the matrix that has a sum equal to the target value\"\"\"\n    return any((sum(row) == target) for row in matrix)\n    \ndef g(target=100):\n    return [[5, 10, 15, 20], [30, 40, 50, 60], [70, 80, 90, 100], [110, 120, 130, 140]]\n    \nassert f(g())\n",
        "emb": null,
        "idx_generation": 204,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: list, target=100) -> bool:\n    \"\"\"Find a row in the matrix that has a sum equal to the target value\"\"\"\n    return any((sum(row) == target) for row in matrix)",
        "solution_func": "def g(target=100):\n    return [[5, 10, 15, 20], [30, 40, 50, 60], [70, 80, 90, 100], [110, 120, 130, 140]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: list, target=50) -> bool:\n    \"\"\"Find three numbers in the list that multiply to the target value\"\"\"\n    return any((nums[i] * nums[j] * nums[k] == target) for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\n    \ndef g(target=50):\n    return [2, 5, 10, 4, 8, 6, 3]\n    \nassert f(g())\n",
        "emb": null,
        "idx_generation": 204,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: list, target=50) -> bool:\n    \"\"\"Find three numbers in the list that multiply to the target value\"\"\"\n    return any((nums[i] * nums[j] * nums[k] == target) for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))",
        "solution_func": "def g(target=50):\n    return [2, 5, 10, 4, 8, 6, 3]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, c='a', n=3) -> bool:\n    \"\"\"Check if a specific character appears n times in a string.\"\"\"\n    return s.count(c) == n\ndef g(c='a', n=3):\n    return c * n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 204,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, c='a', n=3) -> bool:\n    \"\"\"Check if a specific character appears n times in a string.\"\"\"\n    return s.count(c) == n",
        "solution_func": "def g(c='a', n=3):\n    return c * n",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, n=3) -> bool:\n    \"\"\"Find a combination of n numbers from a list that adds up to the target.\"\"\"\n    from itertools import combinations\n    for c in combinations(nums, n):\n        if sum(c) == target:\n            return True\n    return False\ndef g(target=10, n=3):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 204,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, n=3) -> bool:\n    \"\"\"Find a combination of n numbers from a list that adds up to the target.\"\"\"\n    from itertools import combinations\n    for c in combinations(nums, n):\n        if sum(c) == target:\n            return True\n    return False",
        "solution_func": "def g(target=10, n=3):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Find a row in a matrix that has a sum equal to the target.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False\ndef g(target=50):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 204,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Find a row in a matrix that has a sum equal to the target.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False",
        "solution_func": "def g(target=50):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the given array that sums up to the target\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 204,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the given array that sums up to the target\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Given a string s and a list of words, determine if it is possible to form the string s using the given words.\n    Each word can be used multiple times and the words can be rearranged in any order.\"\"\"\n    def dfs(s, words, memo):\n        if not s:\n            return True\n        if s in memo:\n            return memo[s]\n        for word in words:\n            if s.startswith(word) and dfs(s[len(word):], words, memo):\n                memo[s] = True\n                return True\n        memo[s] = False\n        return False\n    return dfs(s, words, {})\ndef g(words=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(words)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 205,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Given a string s and a list of words, determine if it is possible to form the string s using the given words.\n    Each word can be used multiple times and the words can be rearranged in any order.\"\"\"\n    def dfs(s, words, memo):\n        if not s:\n            return True\n        if s in memo:\n            return memo[s]\n        for word in words:\n            if s.startswith(word) and dfs(s[len(word):], words, memo):\n                memo[s] = True\n                return True\n        memo[s] = False\n        return False\n    return dfs(s, words, {})",
        "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(words)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Given a 2D matrix and a target number, determine if there exists a path from the top left corner to the bottom right corner\n    such that the sum of the numbers along the path is equal to the target number.\"\"\"\n    def dfs(matrix, i, j, target, memo):\n        if i < 0 or j < 0:\n            return False\n        if i == 0 and j == 0:\n            return matrix[i][j] == target\n        if (i, j) in memo:\n            return memo[(i, j)]\n        if dfs(matrix, i-1, j, target - matrix[i][j], memo) or dfs(matrix, i, j-1, target - matrix[i][j], memo):\n            memo[(i, j)] = True\n            return True\n        memo[(i, j)] = False\n        return False\n    m, n = len(matrix), len(matrix[0])\n    return dfs(matrix, m-1, n-1, target, {})\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 205,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Given a 2D matrix and a target number, determine if there exists a path from the top left corner to the bottom right corner\n    such that the sum of the numbers along the path is equal to the target number.\"\"\"\n    def dfs(matrix, i, j, target, memo):\n        if i < 0 or j < 0:\n            return False\n        if i == 0 and j == 0:\n            return matrix[i][j] == target\n        if (i, j) in memo:\n            return memo[(i, j)]\n        if dfs(matrix, i-1, j, target - matrix[i][j], memo) or dfs(matrix, i, j-1, target - matrix[i][j], memo):\n            memo[(i, j)] = True\n            return True\n        memo[(i, j)] = False\n        return False\n    m, n = len(matrix), len(matrix[0])\n    return dfs(matrix, m-1, n-1, target, {})",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list\n    whose sum is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(nums=[-1, 2, 5, -3, 7]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 205,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list\n    whose sum is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(nums=[-1, 2, 5, -3, 7]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=546576, b=89765) -> bool:\n    \"\"\"Check if the sum of two integers is equal to a given number.\"\"\"\n    return x + a == b\ndef g(a=546576, b=89765):\n    return b - a\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 205,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=546576, b=89765) -> bool:\n    \"\"\"Check if the sum of two integers is equal to a given number.\"\"\"\n    return x + a == b",
        "solution_func": "def g(a=546576, b=89765):\n    return b - a",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a='racecar') -> bool:\n    \"\"\"Determine if a given string is a palindrome.\"\"\"\n    return x == a[::-1]\ndef g(a='racecar'):\n    return a\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 205,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, a='racecar') -> bool:\n    \"\"\"Determine if a given string is a palindrome.\"\"\"\n    return x == a[::-1]",
        "solution_func": "def g(a='racecar'):\n    return a",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=9.81, b=10) -> bool:\n    \"\"\"Check if the square root of a number is within a given range.\"\"\"\n    return math.isclose(math.sqrt(x), a, rel_tol=b)\ndef g(a=9.81, b=10):\n    return a ** 2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "idx_generation": 205,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=9.81, b=10) -> bool:\n    \"\"\"Check if the square root of a number is within a given range.\"\"\"\n    return math.isclose(math.sqrt(x), a, rel_tol=b)",
        "solution_func": "def g(a=9.81, b=10):\n    return a ** 2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, nums=[12, 15, 18, 21, 24], target=36) -> bool:\n    \"\"\"Find two numbers whose product is equal to the target number.\"\"\"\n    return any((math.prod(pair) == target for pair in combinations(nums, 2))) and n == target\ndef g(nums=[12, 15, 18, 21, 24], target=36):\n    return target\nassert f(g())\n",
        "emb": null,
        "idx_generation": 205,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, nums=[12, 15, 18, 21, 24], target=36) -> bool:\n    \"\"\"Find two numbers whose product is equal to the target number.\"\"\"\n    return any((math.prod(pair) == target for pair in combinations(nums, 2))) and n == target",
        "solution_func": "def g(nums=[12, 15, 18, 21, 24], target=36):\n    return target",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport string\n\ndef f(s: str, target=\"abcde\") -> bool:\n    \"\"\"Check if a string contains all the letters from a given target string.\"\"\"\n    return all((c in s for c in target))\ndef g(target=\"abcde\"):\n    return string.ascii_lowercase\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 205,
        "target_skills": null,
        "problem_func": "from typing import*\nimport string\n\ndef f(s: str, target=\"abcde\") -> bool:\n    \"\"\"Check if a string contains all the letters from a given target string.\"\"\"\n    return all((c in s for c in target))",
        "solution_func": "def g(target=\"abcde\"):\n    return string.ascii_lowercase",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that adds up to the target number.\"\"\"\n    return any((sum(combination) == target for r in range(len(nums)+1) for combination in combinations(nums, r)))\ndef g():\n    return random.sample(range(1, 101), 5)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 205,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that adds up to the target number.\"\"\"\n    return any((sum(combination) == target for r in range(len(nums)+1) for combination in combinations(nums, r)))",
        "solution_func": "def g():\n    return random.sample(range(1, 101), 5)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if there is a substring of length k that consists of only unique characters.\"\"\"\n    return any(s[i:i+k] == ''.join(set(s[i:i+k])) for i in range(len(s) - k + 1))\ndef g(s='aabbcdeffgh', k=3):\n    return s\nassert f(g())\n",
        "emb": null,
        "idx_generation": 205,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if there is a substring of length k that consists of only unique characters.\"\"\"\n    return any(s[i:i+k] == ''.join(set(s[i:i+k])) for i in range(len(s) - k + 1))",
        "solution_func": "def g(s='aabbcdeffgh', k=3):\n    return s",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=3) -> bool:\n    \"\"\"Check if there exists a subarray in arr whose sum is equal to target\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(arr[i:j]) == target:\n                return True\n    return False\n\ndef g(target=3):\n    return [1, 2, target]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 206,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=3) -> bool:\n    \"\"\"Check if there exists a subarray in arr whose sum is equal to target\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(arr[i:j]) == target:\n                return True\n    return False",
        "solution_func": "def g(target=3):\n    return [1, 2, target]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if there exist n consecutive letters in s that are in alphabetical order\"\"\"\n    for i in range(len(s)-n+1):\n        if s[i:i+n] == ''.join(sorted(s[i:i+n])):\n            return True\n    return False\n\ndef g(n=3):\n    return 'abc' + 'def' * (n-1)\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 206,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if there exist n consecutive letters in s that are in alphabetical order\"\"\"\n    for i in range(len(s)-n+1):\n        if s[i:i+n] == ''.join(sorted(s[i:i+n])):\n            return True\n    return False",
        "solution_func": "def g(n=3):\n    return 'abc' + 'def' * (n-1)",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=7) -> bool:\n    \"\"\"Check if there exists a pair of numbers in arr whose sum is equal to target\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=7):\n    return [1, 2, target-3, 4]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 206,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=7) -> bool:\n    \"\"\"Check if there exists a pair of numbers in arr whose sum is equal to target\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=7):\n    return [1, 2, target-3, 4]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, char='a', count=3) -> bool:\n    \"\"\"Check if the given character appears at least the specified number of times in the string\"\"\"\n    return string.count(char) >= count\ndef g(string=\"banana\", char='a', count=3):\n    return string\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 206,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, char='a', count=3) -> bool:\n    \"\"\"Check if the given character appears at least the specified number of times in the string\"\"\"\n    return string.count(char) >= count",
        "solution_func": "def g(string=\"banana\", char='a', count=3):\n    return string",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: list, target=10) -> bool:\n    \"\"\"Check if there are two distinct elements in the list that sum up to the target value\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst\nassert f(g())\n",
        "emb": null,
        "idx_generation": 206,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: list, target=10) -> bool:\n    \"\"\"Check if there are two distinct elements in the list that sum up to the target value\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    return lst",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, volume=100) -> bool:\n    \"\"\"Check if the volume of a sphere with the given radius is less than or equal to the target volume\"\"\"\n    return (4/3) * math.pi * radius**3 <= volume\ndef g(radius=3, volume=100):\n    return radius\nassert f(g())\n",
        "emb": null,
        "idx_generation": 206,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(radius: float, volume=100) -> bool:\n    \"\"\"Check if the volume of a sphere with the given radius is less than or equal to the target volume\"\"\"\n    return (4/3) * math.pi * radius**3 <= volume",
        "solution_func": "def g(radius=3, volume=100):\n    return radius",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x=3, y=5) -> bool:\n    \"\"\"Check if n is divisible by both x and y\"\"\"\n    return n % x == 0 and n % y == 0\ndef g(x=3, y=5):\n    return x * y\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 206,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, x=3, y=5) -> bool:\n    \"\"\"Check if n is divisible by both x and y\"\"\"\n    return n % x == 0 and n % y == 0",
        "solution_func": "def g(x=3, y=5):\n    return x * y",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given string contains the specified substring\"\"\"\n    return substring in s\ndef g(substring='abc'):\n    return substring * 2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 206,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given string contains the specified substring\"\"\"\n    return substring in s",
        "solution_func": "def g(substring='abc'):\n    return substring * 2",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list that add up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 206,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list that add up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": [
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: List[int], n=5, m=3) -> bool:\n    \"\"\"Find a list of n integers whose sum is m.\"\"\"\n    return len(x) == n and sum(x) == m\ndef g(n=5, m=3):\n    return [1] * n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 206,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=5, m=3) -> bool:\n    \"\"\"Find a list of n integers whose sum is m.\"\"\"\n    return len(x) == n and sum(x) == m",
        "solution_func": "def g(n=5, m=3):\n    return [1] * n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4]) -> bool:\n    \"\"\"Find a sublist of length n that contains all even numbers\"\"\"\n    sub = lst[:n]\n    return all(x % 2 == 0 for x in sub)\ndef g(lst=[1, 2, 3, 4]):\n    return [x for x in lst if x % 2 == 0][:len(lst)//2]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 207,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4]) -> bool:\n    \"\"\"Find a sublist of length n that contains all even numbers\"\"\"\n    sub = lst[:n]\n    return all(x % 2 == 0 for x in sub)",
        "solution_func": "def g(lst=[1, 2, 3, 4]):\n    return [x for x in lst if x % 2 == 0][:len(lst)//2]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Find the first index where the given substring is found\"\"\"\n    return s.find(substr) >= 0\ndef g(substr='abc'):\n    return substr + 'def'\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 207,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Find the first index where the given substring is found\"\"\"\n    return s.find(substr) >= 0",
        "solution_func": "def g(substr='abc'):\n    return substr + 'def'",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5], target=9) -> bool:\n    \"\"\"Find a pair of distinct numbers from the list that sum up to the target\"\"\"\n    for i in range(n):\n        for j in range(n):\n            if i != j and lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(lst=[1, 2, 3, 4, 5], target=9):\n    return lst\nassert f(g())\n",
        "emb": null,
        "idx_generation": 207,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5], target=9) -> bool:\n    \"\"\"Find a pair of distinct numbers from the list that sum up to the target\"\"\"\n    for i in range(n):\n        for j in range(n):\n            if i != j and lst[i] + lst[j] == target:\n                return True\n    return False",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5], target=9):\n    return lst",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: datetime) -> bool:\n    \"\"\"Check if the given date is a weekday.\"\"\"\n    return date.weekday() < 5\n\ndef g():\n    \"\"\"Return the current date and time.\"\"\"\n    return datetime.now()\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 207,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date: datetime) -> bool:\n    \"\"\"Check if the given date is a weekday.\"\"\"\n    return date.weekday() < 5",
        "solution_func": "def g():\n    \"\"\"Return the current date and time.\"\"\"\n    return datetime.now()",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char_count={}) -> bool:\n    \"\"\"Check if the given string contains at least one occurrence of each character in char_count dictionary.\"\"\"\n    return all((s.count(c) >= count for c, count in char_count.items()))\n\ndef g(char_count={'a': 2, 'b': 1, 'c': 1}):\n    \"\"\"Return a string that contains the characters and their counts as specified in char_count dictionary.\"\"\"\n    return ''.join([c * count for c, count in char_count.items()])\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 207,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char_count={}) -> bool:\n    \"\"\"Check if the given string contains at least one occurrence of each character in char_count dictionary.\"\"\"\n    return all((s.count(c) >= count for c, count in char_count.items()))",
        "solution_func": "def g(char_count={'a': 2, 'b': 1, 'c': 1}):\n    \"\"\"Return a string that contains the characters and their counts as specified in char_count dictionary.\"\"\"\n    return ''.join([c * count for c, count in char_count.items()])",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray) -> bool:\n    \"\"\"Check if all elements in the given numpy array are positive.\"\"\"\n    return np.all(arr > 0)\n\ndef g():\n    \"\"\"Return a 3x3 numpy array with all elements set to 1.\"\"\"\n    return np.ones((3, 3))\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 207,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray) -> bool:\n    \"\"\"Check if all elements in the given numpy array are positive.\"\"\"\n    return np.all(arr > 0)",
        "solution_func": "def g():\n    \"\"\"Return a 3x3 numpy array with all elements set to 1.\"\"\"\n    return np.ones((3, 3))",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(primes: List[int], target=100) -> bool:\n    \"\"\"Given a list of prime numbers, find the product of all the primes that are less than or equal to the target number.\n    Sample Input:\n    [2, 3, 5, 7, 11, 13]\n    Sample Output:\n    30030\"\"\"\n    result = math.prod(primes)\n    return result <= target\n\ndef g(target=100):\n    primes = []\n    for num in range(2, target + 1):\n        if all(num % i != 0 for i in range(2, int(math.sqrt(num)) + 1)):\n            primes.append(num)\n    return primes\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 207,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(primes: List[int], target=100) -> bool:\n    \"\"\"Given a list of prime numbers, find the product of all the primes that are less than or equal to the target number.\n    Sample Input:\n    [2, 3, 5, 7, 11, 13]\n    Sample Output:\n    30030\"\"\"\n    result = math.prod(primes)\n    return result <= target",
        "solution_func": "def g(target=100):\n    primes = []\n    for num in range(2, target + 1):\n        if all(num % i != 0 for i in range(2, int(math.sqrt(num)) + 1)):\n            primes.append(num)\n    return primes",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(deck: List[int], target=13) -> bool:\n    \"\"\"Given a deck of cards represented by a list of integers, determine if it is possible to select a subset of cards from the deck that sum up to the target number.\n    Sample Input:\n    [1, 3, 5, 7, 9, 11]\n    Sample Output:\n    True\"\"\"\n    n = len(deck)\n    for i in range(1, 2**n):\n        subset = [deck[j] for j in range(n) if (i & (1 << j))]\n        if sum(subset) == target:\n            return True\n    return False\n\ndef g(target=13):\n    deck = [1, 3, 5, 7, 9, 11]\n    random.shuffle(deck)\n    return deck\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 207,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(deck: List[int], target=13) -> bool:\n    \"\"\"Given a deck of cards represented by a list of integers, determine if it is possible to select a subset of cards from the deck that sum up to the target number.\n    Sample Input:\n    [1, 3, 5, 7, 9, 11]\n    Sample Output:\n    True\"\"\"\n    n = len(deck)\n    for i in range(1, 2**n):\n        subset = [deck[j] for j in range(n) if (i & (1 << j))]\n        if sum(subset) == target:\n            return True\n    return False",
        "solution_func": "def g(target=13):\n    deck = [1, 3, 5, 7, 9, 11]\n    random.shuffle(deck)\n    return deck",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Given a matrix represented by a list of lists, determine if the target number exists in the matrix.\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n    Sample Output:\n    False\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=0):\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 207,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Given a matrix represented by a list of lists, determine if the target number exists in the matrix.\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n    Sample Output:\n    False\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=0):\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\nfrom math import gcd\ndef f(x: int, y: int, z: int, a=42, b=63) -> bool:\n    \"\"\"Check if the greatest common divisor of x, y, and z is equal to the greatest common divisor of a and b.\"\"\"\n    return gcd(x, y, z) == gcd(a, b)\ndef g(a=42, b=63):\n    return gcd(a, b)\nassert f(g(), 12, 18, 36)\n",
        "emb": null,
        "idx_generation": 207,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import gcd\ndef f(x: int, y: int, z: int, a=42, b=63) -> bool:\n    \"\"\"Check if the greatest common divisor of x, y, and z is equal to the greatest common divisor of a and b.\"\"\"\n    return gcd(x, y, z) == gcd(a, b)",
        "solution_func": "def g(a=42, b=63):\n    return gcd(a, b)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 208,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the sum of each row and column in the matrix is equal to n\"\"\"\n    m = len(matrix)\n    for i in range(m):\n        row_sum = sum(matrix[i])\n        if row_sum != n:\n            return False\n        col_sum = sum(matrix[j][i] for j in range(m))\n        if col_sum != n:\n            return False\n    return True\ndef g(n=3):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 208,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the sum of each row and column in the matrix is equal to n\"\"\"\n    m = len(matrix)\n    for i in range(m):\n        row_sum = sum(matrix[i])\n        if row_sum != n:\n            return False\n        col_sum = sum(matrix[j][i] for j in range(m))\n        if col_sum != n:\n            return False\n    return True",
        "solution_func": "def g(n=3):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a subset of the list that sums up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if len(nums) == 0:\n            return False\n        if nums[0] > target:\n            return subset_sum(nums[1:], target)\n        return subset_sum(nums[1:], target) or subset_sum(nums[1:], target - nums[0])\n    return subset_sum(nums, target)\ndef g(target=5):\n    return [1, 2, 3, 4, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 208,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a subset of the list that sums up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if len(nums) == 0:\n            return False\n        if nums[0] > target:\n            return subset_sum(nums[1:], target)\n        return subset_sum(nums[1:], target) or subset_sum(nums[1:], target - nums[0])\n    return subset_sum(nums, target)",
        "solution_func": "def g(target=5):\n    return [1, 2, 3, 4, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find three integers that sum up to the target number.\"\"\"\n    return any((i + j + k == target for i in nums for j in nums for k in nums))\ndef g(target=10):\n    return [1, 2, target - 3]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 208,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find three integers that sum up to the target number.\"\"\"\n    return any((i + j + k == target for i in nums for j in nums for k in nums))",
        "solution_func": "def g(target=10):\n    return [1, 2, target - 3]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], product=24) -> bool:\n    \"\"\"Find four integers that multiply to give the product.\"\"\"\n    return any((i * j * k * l == product for i in nums for j in nums for k in nums for l in nums))\ndef g(product=24):\n    return [1, 2, 3, product // 6]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 208,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], product=24) -> bool:\n    \"\"\"Find four integers that multiply to give the product.\"\"\"\n    return any((i * j * k * l == product for i in nums for j in nums for k in nums for l in nums))",
        "solution_func": "def g(product=24):\n    return [1, 2, 3, product // 6]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Find n integers whose squares sum to a perfect square.\"\"\"\n    return any((sum((i ** 2 for i in subset)) == int(sum((i ** 2 for i in subset))) ** 2 for subset in itertools.combinations(nums, n)))\ndef g(n=3):\n    return [1, 2, 3]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 208,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Find n integers whose squares sum to a perfect square.\"\"\"\n    return any((sum((i ** 2 for i in subset)) == int(sum((i ** 2 for i in subset))) ** 2 for subset in itertools.combinations(nums, n)))",
        "solution_func": "def g(n=3):\n    return [1, 2, 3]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='world') -> bool:\n    \"\"\"Check if a substring exists in a given string.\"\"\"\n    return substr in s\ndef g(substr='world'):\n    s = \"Hello, world!\"\n    return s\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 208,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr='world') -> bool:\n    \"\"\"Check if a substring exists in a given string.\"\"\"\n    return substr in s",
        "solution_func": "def g(substr='world'):\n    s = \"Hello, world!\"\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sum up to a target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 208,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sum up to a target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=7) -> bool:\n    \"\"\"Check if a target value exists in a 2D matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=7):\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 208,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=7) -> bool:\n    \"\"\"Check if a target value exists in a 2D matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=7):\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime) -> bool:\n    \"\"\"Find a date that is exactly 30 days before the given date.\"\"\"\n    return dt - datetime.timedelta(days=30) == datetime.datetime(2022, 1, 1)\ndef g():\n    return datetime.datetime(2022, 1, 31)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 208,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime) -> bool:\n    \"\"\"Find a date that is exactly 30 days before the given date.\"\"\"\n    return dt - datetime.timedelta(days=30) == datetime.datetime(2022, 1, 1)",
        "solution_func": "def g():\n    return datetime.datetime(2022, 1, 31)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub: str = 'abc') -> bool:\n    \"\"\"Check if a string contains a specific substring.\"\"\"\n    return sub in s\ndef g(sub: str = 'abc'):\n    return 'abc' + sub + 'xyz'\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 209,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, sub: str = 'abc') -> bool:\n    \"\"\"Check if a string contains a specific substring.\"\"\"\n    return sub in s",
        "solution_func": "def g(sub: str = 'abc'):\n    return 'abc' + sub + 'xyz'",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"Find two numbers in a list that add up to a specific target.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target: int = 10):\n    return [1, 2, 3, 4, 5, target-15]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 209,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"Find two numbers in a list that add up to a specific target.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target: int = 10):\n    return [1, 2, 3, 4, 5, target-15]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], n: int = 3) -> bool:\n    \"\"\"Check if there exists a consecutive subarray in the list whose sum equals a specific number.\"\"\"\n    return any(sum(arr[i:i+n]) == n for i in range(len(arr)-n+1))\ndef g(n: int = 3):\n    return [1, 2, 3, 4, 5, n]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 209,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], n: int = 3) -> bool:\n    \"\"\"Check if there exists a consecutive subarray in the list whose sum equals a specific number.\"\"\"\n    return any(sum(arr[i:i+n]) == n for i in range(len(arr)-n+1))",
        "solution_func": "def g(n: int = 3):\n    return [1, 2, 3, 4, 5, n]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, m: int, x: int) -> bool:\n    \"\"\"Check if x is a perfect square between n and m (inclusive)\"\"\"\n    return n <= x <= m and math.isqrt(x) ** 2 == x\n\ndef g(n=1, m=100):\n    for i in range(n, m+1):\n        if math.isqrt(i) ** 2 == i:\n            return i\n    return None\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 209,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, m: int, x: int) -> bool:\n    \"\"\"Check if x is a perfect square between n and m (inclusive)\"\"\"\n    return n <= x <= m and math.isqrt(x) ** 2 == x",
        "solution_func": "def g(n=1, m=100):\n    for i in range(n, m+1):\n        if math.isqrt(i) ** 2 == i:\n            return i\n    return None",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target number can be obtained by adding any two numbers from the given list\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    random.shuffle(nums)\n    return nums, target\n\nassert f(*g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 209,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target number can be obtained by adding any two numbers from the given list\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=9):\n    random.shuffle(nums)\n    return nums, target",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target number can be obtained by adding any three numbers from the given list\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 209,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target number can be obtained by adding any three numbers from the given list\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=2, y=3) -> bool:\n    \"\"\"Check if n is a perfect square and its square root is divisible by x and y.\"\"\"\n    return math.isqrt(n) ** 2 == n and math.isqrt(n) % x == 0 and math.isqrt(n) % y == 0\n\ndef g(x=2, y=3):\n    return x**2 * y**2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 209,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=2, y=3) -> bool:\n    \"\"\"Check if n is a perfect square and its square root is divisible by x and y.\"\"\"\n    return math.isqrt(n) ** 2 == n and math.isqrt(n) % x == 0 and math.isqrt(n) % y == 0",
        "solution_func": "def g(x=2, y=3):\n    return x**2 * y**2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a', n=5) -> bool:\n    \"\"\"Check if the given character appears exactly n times in the string.\"\"\"\n    return s.count(char) == n\n\ndef g(char='a', n=5):\n    return char * n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 209,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char='a', n=5) -> bool:\n    \"\"\"Check if the given character appears exactly n times in the string.\"\"\"\n    return s.count(char) == n",
        "solution_func": "def g(char='a', n=5):\n    return char * n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Check if there are exactly n even numbers in the list.\"\"\"\n    return len([x for x in arr if x % 2 == 0]) == n\n\ndef g(n=5):\n    return random.choices(range(0, 100), k=n)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 209,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Check if there are exactly n even numbers in the list.\"\"\"\n    return len([x for x in arr if x % 2 == 0]) == n",
        "solution_func": "def g(n=5):\n    return random.choices(range(0, 100), k=n)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, num=-320) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return s == s[::-1]\ndef g(num=-320):\n    return str(num)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 209,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, num=-320) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g(num=-320):\n    return str(num)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=4) -> bool:\n    \"\"\"You are given a string consisting of only 'a's and 'b's. Find the length of the longest substring that contains\nan equal number of 'a's and 'b's.\nSample Input:\n`\"aabbbb\"`\nSample Output:\n`4`\"\"\"\n    count_a = 0\n    count_b = 0\n    max_length = 0\n    for c in s:\n        if c == 'a':\n            count_a += 1\n        elif c == 'b':\n            count_b += 1\n        if count_a == count_b:\n            max_length = max(max_length, count_a + count_b)\n    return max_length >= target\ndef g():\n    return \"aabbbb\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 210,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=4) -> bool:\n    \"\"\"You are given a string consisting of only 'a's and 'b's. Find the length of the longest substring that contains\nan equal number of 'a's and 'b's.\nSample Input:\n`\"aabbbb\"`\nSample Output:\n`4`\"\"\"\n    count_a = 0\n    count_b = 0\n    max_length = 0\n    for c in s:\n        if c == 'a':\n            count_a += 1\n        elif c == 'b':\n            count_b += 1\n        if count_a == count_b:\n            max_length = max(max_length, count_a + count_b)\n    return max_length >= target",
        "solution_func": "def g():\n    return \"aabbbb\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=10) -> bool:\n    \"\"\"You are given a positive integer. Determine if it can be expressed as the sum of two cubes in two different ways.\nSample Input:\n`1729`\nSample Output:\n`True`\"\"\"\n    for i in range(1, int(n**(1/3))+1):\n        cube1 = i**3\n        for j in range(i, int(n**(1/3))+1):\n            cube2 = j**3\n            if cube1 + cube2 == n and cube1 != cube2:\n                return True\n    return False\ndef g():\n    return 1729\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 210,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target=10) -> bool:\n    \"\"\"You are given a positive integer. Determine if it can be expressed as the sum of two cubes in two different ways.\nSample Input:\n`1729`\nSample Output:\n`True`\"\"\"\n    for i in range(1, int(n**(1/3))+1):\n        cube1 = i**3\n        for j in range(i, int(n**(1/3))+1):\n            cube2 = j**3\n            if cube1 + cube2 == n and cube1 != cube2:\n                return True\n    return False",
        "solution_func": "def g():\n    return 1729",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=12) -> bool:\n    \"\"\"You are given a positive integer. Determine if it is a prime number.\nSample Input:\n`17`\nSample Output:\n`True`\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 210,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target=12) -> bool:\n    \"\"\"You are given a positive integer. Determine if it is a prime number.\nSample Input:\n`17`\nSample Output:\n`True`\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(num_list: list, target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in num_list that adds up to the target_sum.\"\"\"\n    return any([(num_list[i] + num_list[j] == target_sum) for i in range(len(num_list)) for j in range(i+1, len(num_list))])\n\ndef g(num_list: list, target_sum=100):\n    \"\"\"Generate a list of random integers between 1 and 1000.\"\"\"\n    return random.choices(range(1, 1001), k=num_list)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 210,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(num_list: list, target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in num_list that adds up to the target_sum.\"\"\"\n    return any([(num_list[i] + num_list[j] == target_sum) for i in range(len(num_list)) for j in range(i+1, len(num_list))])",
        "solution_func": "def g(num_list: list, target_sum=100):\n    \"\"\"Generate a list of random integers between 1 and 1000.\"\"\"\n    return random.choices(range(1, 1001), k=num_list)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, sub_string='abc') -> bool:\n    \"\"\"Check if the sub_string exists in the string.\"\"\"\n    return sub_string in string\n\ndef g(string: str, sub_string='abc'):\n    \"\"\"Generate a string with multiple repetitions of sub_string.\"\"\"\n    return sub_string * 5 + string + sub_string * 3\nassert f(g())\n",
        "emb": null,
        "idx_generation": 210,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, sub_string='abc') -> bool:\n    \"\"\"Check if the sub_string exists in the string.\"\"\"\n    return sub_string in string",
        "solution_func": "def g(string: str, sub_string='abc'):\n    \"\"\"Generate a string with multiple repetitions of sub_string.\"\"\"\n    return sub_string * 5 + string + sub_string * 3",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(matrix: list, target_num=10) -> bool:\n    \"\"\"Check if the target_num exists in the matrix.\"\"\"\n    return any(target_num in row for row in matrix)\n\ndef g(matrix: list, target_num=10):\n    \"\"\"Generate a matrix with random numbers between 1 and 20.\"\"\"\n    return [[random.randint(1, 20) for _ in range(len(matrix[0]))] for _ in range(len(matrix))]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 210,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(matrix: list, target_num=10) -> bool:\n    \"\"\"Check if the target_num exists in the matrix.\"\"\"\n    return any(target_num in row for row in matrix)",
        "solution_func": "def g(matrix: list, target_num=10):\n    \"\"\"Generate a matrix with random numbers between 1 and 20.\"\"\"\n    return [[random.randint(1, 20) for _ in range(len(matrix[0]))] for _ in range(len(matrix))]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m=100, k=10) -> bool:\n    \"\"\"Find the largest number less than m that is divisible by k and contains n as a digit.\"\"\"\n    return max(i for i in range(m) if i % k == 0 and str(n) in str(i))\ndef g(m=100, k=10):\n    return max(i for i in range(m) if i % k == 0)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 210,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=100, k=10) -> bool:\n    \"\"\"Find the largest number less than m that is divisible by k and contains n as a digit.\"\"\"\n    return max(i for i in range(m) if i % k == 0 and str(n) in str(i))",
        "solution_func": "def g(m=100, k=10):\n    return max(i for i in range(m) if i % k == 0)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers from the list that adds up to the target number.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(len(nums) + 1) for comb in combinations(nums, r))\ndef g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 210,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers from the list that adds up to the target number.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(len(nums) + 1) for comb in combinations(nums, r))",
        "solution_func": "def g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, word='python', count=2) -> bool:\n    \"\"\"Find the number of occurrences of the word in the string.\"\"\"\n    return string.count(word) >= count\ndef g(word='python', count=2):\n    return 'I love python and python is the best language. Python is amazing!'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 210,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, word='python', count=2) -> bool:\n    \"\"\"Find the number of occurrences of the word in the string.\"\"\"\n    return string.count(word) >= count",
        "solution_func": "def g(word='python', count=2):\n    return 'I love python and python is the best language. Python is amazing!'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, letters=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if all letters in the given string are vowels.\"\"\"\n    return all(letter in letters for letter in string)\ndef g(string=\"hello\"):\n    return string\nassert f(g())\n",
        "emb": null,
        "idx_generation": 210,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, letters=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if all letters in the given string are vowels.\"\"\"\n    return all(letter in letters for letter in string)",
        "solution_func": "def g(string=\"hello\"):\n    return string",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find three distinct integers in the array that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [1, 2, target-3]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 211,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find three distinct integers in the array that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=100):\n    return [1, 2, target-3]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string contains at least n distinct vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for vowel in vowels:\n        if vowel in s:\n            count += 1\n        if count == n:\n            return True\n    return False\n\ndef g(n=3):\n    return \"aeiou\" * n\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 211,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string contains at least n distinct vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for vowel in vowels:\n        if vowel in s:\n            count += 1\n        if count == n:\n            return True\n    return False",
        "solution_func": "def g(n=3):\n    return \"aeiou\" * n",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], k=2) -> bool:\n    \"\"\"Check if there are k consecutive elements in the array that are prime numbers.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    for i in range(len(arr) - k + 1):\n        if all(is_prime(arr[i+j]) for j in range(k)):\n            return True\n    return False\n\ndef g(k=2):\n    start = 2\n    primes = []\n    while len(primes) < k:\n        if is_prime(start):\n            primes.append(start)\n        start += 1\n    return primes\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 211,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], k=2) -> bool:\n    \"\"\"Check if there are k consecutive elements in the array that are prime numbers.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    for i in range(len(arr) - k + 1):\n        if all(is_prime(arr[i+j]) for j in range(k)):\n            return True\n    return False",
        "solution_func": "def g(k=2):\n    start = 2\n    primes = []\n    while len(primes) < k:\n        if is_prime(start):\n            primes.append(start)\n        start += 1\n    return primes",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=50, k=2) -> bool:\n    \"\"\"Find if there are k numbers in the array whose sum is equal to the target\"\"\"\n    return any(sum(comb) == target for comb in combinations(arr, k))\ndef g(arr=[10, 20, 30, 40, 50, 60]):\n    return arr\nassert f(g())\n",
        "emb": null,
        "idx_generation": 211,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=50, k=2) -> bool:\n    \"\"\"Find if there are k numbers in the array whose sum is equal to the target\"\"\"\n    return any(sum(comb) == target for comb in combinations(arr, k))",
        "solution_func": "def g(arr=[10, 20, 30, 40, 50, 60]):\n    return arr",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists two numbers in the list such that their sum is equal to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 211,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists two numbers in the list such that their sum is equal to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='abc', n=2) -> bool:\n    \"\"\"Find if the substring appears exactly n times in the string\"\"\"\n    return string.count(substr) == n\ndef g(substr='abc', n=2):\n    return substr * n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 211,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substr='abc', n=2) -> bool:\n    \"\"\"Find if the substring appears exactly n times in the string\"\"\"\n    return string.count(substr) == n",
        "solution_func": "def g(substr='abc', n=2):\n    return substr * n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, num_list=[5, 10, 15, 20, 25]) -> bool:\n    \"\"\"Check if the given integer is divisible by any number in the list.\"\"\"\n    for num in num_list:\n        if x % num == 0:\n            return True\n    return False\ndef g(num_list=[5, 10, 15, 20, 25]):\n    x = max(num_list) * 2\n    return x\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 211,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, num_list=[5, 10, 15, 20, 25]) -> bool:\n    \"\"\"Check if the given integer is divisible by any number in the list.\"\"\"\n    for num in num_list:\n        if x % num == 0:\n            return True\n    return False",
        "solution_func": "def g(num_list=[5, 10, 15, 20, 25]):\n    x = max(num_list) * 2\n    return x",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 211,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sum=15) -> bool:\n    \"\"\"Check if the sum of each row in the matrix is equal to the given row sum.\"\"\"\n    for row in matrix:\n        if sum(row) != row_sum:\n            return False\n    return True\ndef g(row_sum=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 211,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row_sum=15) -> bool:\n    \"\"\"Check if the sum of each row in the matrix is equal to the given row sum.\"\"\"\n    for row in matrix:\n        if sum(row) != row_sum:\n            return False\n    return True",
        "solution_func": "def g(row_sum=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(word: str, palindrome_length=5) -> bool:\n    \"\"\"Check if a given word is a palindrome with a certain length\"\"\"\n    return word == word[::-1] and len(word) == palindrome_length\ndef g(palindrome_length=5):\n    return 'levelo'\nassert f(g())\n",
        "emb": null,
        "idx_generation": 211,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str, palindrome_length=5) -> bool:\n    \"\"\"Check if a given word is a palindrome with a certain length\"\"\"\n    return word == word[::-1] and len(word) == palindrome_length",
        "solution_func": "def g(palindrome_length=5):\n    return 'levelo'",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10, k=2) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    return any([nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))]) and len(nums) >= k\ndef g(target=10, k=2):\n    return list(range(1, target-k+1)) + [target]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 212,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10, k=2) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    return any([nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))]) and len(nums) >= k",
        "solution_func": "def g(target=10, k=2):\n    return list(range(1, target-k+1)) + [target]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find if there exists a subset of numbers whose sum is equal to the target.\"\"\"\n    def subset_sum(nums, n, target):\n        if target == 0:\n            return True\n        if n == 0:\n            return False\n        if nums[n-1] > target:\n            return subset_sum(nums, n-1, target)\n        return subset_sum(nums, n-1, target) or subset_sum(nums, n-1, target-nums[n-1])\n    return subset_sum(nums, len(nums), target)\ndef g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 212,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find if there exists a subset of numbers whose sum is equal to the target.\"\"\"\n    def subset_sum(nums, n, target):\n        if target == 0:\n            return True\n        if n == 0:\n            return False\n        if nums[n-1] > target:\n            return subset_sum(nums, n-1, target)\n        return subset_sum(nums, n-1, target) or subset_sum(nums, n-1, target-nums[n-1])\n    return subset_sum(nums, len(nums), target)",
        "solution_func": "def g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Find if there exists a subarray of numbers whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\ndef g(k=3):\n    return [5, 10, 15, 20, 25]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 212,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Find if there exists a subarray of numbers whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False",
        "solution_func": "def g(k=3):\n    return [5, 10, 15, 20, 25]",
        "map_ix": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that adds up to the target sum.\"\"\"\n    return any((arr[i] + arr[j] == target_sum for i in range(len(arr)) for j in range(i+1, len(arr))))\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\nassert f(g())\n",
        "emb": null,
        "idx_generation": 212,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that adds up to the target sum.\"\"\"\n    return any((arr[i] + arr[j] == target_sum for i in range(len(arr)) for j in range(i+1, len(arr))))",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5]):\n    return arr",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_value=0) -> bool:\n    \"\"\"Find if the target value exists in the matrix.\"\"\"\n    return any((target_value in row for row in matrix))\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 212,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_value=0) -> bool:\n    \"\"\"Find if the target value exists in the matrix.\"\"\"\n    return any((target_value in row for row in matrix))",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring=\"hello\") -> bool:\n    \"\"\"Find if the substring exists in the string.\"\"\"\n    return substring in string\ndef g(string=\"hello world\"):\n    return string\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 212,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring=\"hello\") -> bool:\n    \"\"\"Find if the substring exists in the string.\"\"\"\n    return substring in string",
        "solution_func": "def g(string=\"hello world\"):\n    return string",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array that add up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(n=10, target=15):\n    arr = np.random.randint(1, 10, n)\n    return arr\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 212,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array that add up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(n=10, target=15):\n    arr = np.random.randint(1, 10, n)\n    return arr",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray in the array whose sum is divisible by k\"\"\"\n    prefix_sum = 0\n    mod_sum = [0] * k\n    for num in arr:\n        prefix_sum += num\n        mod_sum[prefix_sum % k] += 1\n    return mod_sum[0] > 1 or any([count > 1 for count in mod_sum[1:]])\n\ndef g(n=10, k=3):\n    arr = [i for i in range(1, n+1)]\n    return arr\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 212,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray in the array whose sum is divisible by k\"\"\"\n    prefix_sum = 0\n    mod_sum = [0] * k\n    for num in arr:\n        prefix_sum += num\n        mod_sum[prefix_sum % k] += 1\n    return mod_sum[0] > 1 or any([count > 1 for count in mod_sum[1:]])",
        "solution_func": "def g(n=10, k=3):\n    arr = [i for i in range(1, n+1)]\n    return arr",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exists a path in the matrix that adds up to the target value\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    visited = [[False] * n for _ in range(m)]\n\n    def dfs(i, j, curr_sum):\n        if i < 0 or i >= m or j < 0 or j >= n or visited[i][j]:\n            return False\n        curr_sum += matrix[i][j]\n        if curr_sum == target:\n            return True\n        visited[i][j] = True\n        result = dfs(i+1, j, curr_sum) or dfs(i-1, j, curr_sum) or dfs(i, j+1, curr_sum) or dfs(i, j-1, curr_sum)\n        visited[i][j] = False\n        return result\n\n    for i in range(m):\n        for j in range(n):\n            if dfs(i, j, 0):\n                return True\n    return False\n\ndef g(m=3, n=3, target=20):\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    return matrix\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 212,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exists a path in the matrix that adds up to the target value\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    visited = [[False] * n for _ in range(m)]\n\n    def dfs(i, j, curr_sum):\n        if i < 0 or i >= m or j < 0 or j >= n or visited[i][j]:\n            return False\n        curr_sum += matrix[i][j]\n        if curr_sum == target:\n            return True\n        visited[i][j] = True\n        result = dfs(i+1, j, curr_sum) or dfs(i-1, j, curr_sum) or dfs(i, j+1, curr_sum) or dfs(i, j-1, curr_sum)\n        visited[i][j] = False\n        return result\n\n    for i in range(m):\n        for j in range(n):\n            if dfs(i, j, 0):\n                return True\n    return False",
        "solution_func": "def g(m=3, n=3, target=20):\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    return matrix",
        "map_ix": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the array that add up to the target value\"\"\"\n    return any([(arr[i] + arr[j] == target) for i in range(len(arr)) for j in range(i+1, len(arr))])\ndef g(target=10):\n    arr = [2, 4, 6, 8]\n    return arr\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 212,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the array that add up to the target value\"\"\"\n    return any([(arr[i] + arr[j] == target) for i in range(len(arr)) for j in range(i+1, len(arr))])",
        "solution_func": "def g(target=10):\n    arr = [2, 4, 6, 8]\n    return arr",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, res: int, s='abcdefghijklmnopqrstuvwxyz') -> bool:\n    \"\"\"Find a string that repeats n times and its length is res\"\"\"\n    return len(s*n) == res and s*n == s*n[::-1]\ndef g(res=26, n=2):\n    return 'a'*res\nassert f(g())\n",
        "emb": null,
        "idx_generation": 213,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, res: int, s='abcdefghijklmnopqrstuvwxyz') -> bool:\n    \"\"\"Find a string that repeats n times and its length is res\"\"\"\n    return len(s*n) == res and s*n == s*n[::-1]",
        "solution_func": "def g(res=26, n=2):\n    return 'a'*res",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, res: int, s='abcdefghijklmnopqrstuvwxyz') -> bool:\n    \"\"\"Find a string that repeats n times and its length is res\"\"\"\n    return len(s*n) == res and s*n == s*n[::-1]\ndef g(res=30, n=3):\n    return 'abc'*n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 213,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, res: int, s='abcdefghijklmnopqrstuvwxyz') -> bool:\n    \"\"\"Find a string that repeats n times and its length is res\"\"\"\n    return len(s*n) == res and s*n == s*n[::-1]",
        "solution_func": "def g(res=30, n=3):\n    return 'abc'*n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, res: int, s='abcdefghijklmnopqrstuvwxyz') -> bool:\n    \"\"\"Find a string that repeats n times and its length is res\"\"\"\n    return len(s*n) == res and all((c == s[0] for c in s*n))\ndef g(res=26, n=2):\n    return 'a'*res\nassert f(g())\n",
        "emb": null,
        "idx_generation": 213,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, res: int, s='abcdefghijklmnopqrstuvwxyz') -> bool:\n    \"\"\"Find a string that repeats n times and its length is res\"\"\"\n    return len(s*n) == res and all((c == s[0] for c in s*n))",
        "solution_func": "def g(res=26, n=2):\n    return 'a'*res",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, n=5, m=7) -> bool:\n    \"\"\"Check if x is divisible by both n and m\"\"\"\n    return x % n == 0 and x % m == 0\ndef g(n=5, m=7):\n    return n * m\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 213,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, n=5, m=7) -> bool:\n    \"\"\"Check if x is divisible by both n and m\"\"\"\n    return x % n == 0 and x % m == 0",
        "solution_func": "def g(n=5, m=7):\n    return n * m",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a='hello', b='world') -> bool:\n    \"\"\"Check if x is a concatenation of a and b\"\"\"\n    return x == a + b\ndef g(a='hello', b='world'):\n    return a + b\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 213,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, a='hello', b='world') -> bool:\n    \"\"\"Check if x is a concatenation of a and b\"\"\"\n    return x == a + b",
        "solution_func": "def g(a='hello', b='world'):\n    return a + b",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: int, n=5) -> bool:\n    \"\"\"Check if x is a multiple of n and is an even number\"\"\"\n    return x % n == 0 and x % 2 == 0\ndef g(n=5):\n    return random.randint(1, 100) * n * 2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 213,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(x: int, n=5) -> bool:\n    \"\"\"Check if x is a multiple of n and is an even number\"\"\"\n    return x % n == 0 and x % 2 == 0",
        "solution_func": "def g(n=5):\n    return random.randint(1, 100) * n * 2",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m=10, c='red') -> bool:\n    \"\"\"Check if the sum of all numbers from 1 to n is equal to m and if c is a valid color.\"\"\"\n    return sum(range(1, n+1)) == m and c in ['red', 'blue', 'green']\ndef g(m=10, c='red'):\n    return sum(range(1, m+1)), c\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 213,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=10, c='red') -> bool:\n    \"\"\"Check if the sum of all numbers from 1 to n is equal to m and if c is a valid color.\"\"\"\n    return sum(range(1, n+1)) == m and c in ['red', 'blue', 'green']",
        "solution_func": "def g(m=10, c='red'):\n    return sum(range(1, m+1)), c",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=1000) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, 3))\ndef g(target=1000):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], target\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 213,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=1000) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, 3))",
        "solution_func": "def g(target=1000):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], target",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string.\"\"\"\n    return substring in s\ndef g(substring='abc'):\n    return 'abcdefg', substring\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 213,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string.\"\"\"\n    return substring in s",
        "solution_func": "def g(substring='abc'):\n    return 'abcdefg', substring",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Find a pair of numbers in the array that sum up to a target sum\"\"\"\n    return any(arr[i] + arr[j] == target_sum for i in range(len(arr)) for j in range(i+1, len(arr)))\ndef g(target_sum=10):\n    return [1, 2, 3, 4, target_sum - 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 213,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Find a pair of numbers in the array that sum up to a target sum\"\"\"\n    return any(arr[i] + arr[j] == target_sum for i in range(len(arr)) for j in range(i+1, len(arr)))",
        "solution_func": "def g(target_sum=10):\n    return [1, 2, 3, 4, target_sum - 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    return any(target - num in nums for num in nums)\ndef g():\n    return [1, 2, 3, 4, 5], 9\nassert f(*g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 214,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    return any(target - num in nums for num in nums)",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5], 9",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 214,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"racecar\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 214,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(s: str, n=1) -> bool:\n    \"\"\"Check if the sum of the ASCII values of the string is equal to n\"\"\"\n    ascii_sum = sum(ord(char) for char in s)\n    return ascii_sum == n\n\ndef g(n=1):\n    return chr(n)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 214,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(s: str, n=1) -> bool:\n    \"\"\"Check if the sum of the ASCII values of the string is equal to n\"\"\"\n    ascii_sum = sum(ord(char) for char in s)\n    return ascii_sum == n",
        "solution_func": "def g(n=1):\n    return chr(n)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: list, target=20) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    nums = [random.randint(1, 10) for _ in range(5)]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 214,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(nums: list, target=20) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=20):\n    nums = [random.randint(1, 10) for _ in range(5)]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(year: int, month=12, day=25) -> bool:\n    \"\"\"Check if the given date is a weekend\"\"\"\n    date = datetime.date(year, month, day)\n    return date.weekday() >= 5\n\ndef g(year=2022, month=12, day=25):\n    return year\n\nassert f(g())",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 214,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(year: int, month=12, day=25) -> bool:\n    \"\"\"Check if the given date is a weekend\"\"\"\n    date = datetime.date(year, month, day)\n    return date.weekday() >= 5",
        "solution_func": "def g(year=2022, month=12, day=25):\n    return year",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=2, b=3) -> bool:\n    \"\"\"Check if the given values satisfy the equation: x^a + y^b = z\"\"\"\n    return math.pow(x, a) + math.pow(y, b) == z\n\ndef g(x=2, y=3, a=2, b=3):\n    return math.pow(x, a) + math.pow(y, b)\n    \nassert f(g())\n",
        "emb": null,
        "idx_generation": 214,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=2, b=3) -> bool:\n    \"\"\"Check if the given values satisfy the equation: x^a + y^b = z\"\"\"\n    return math.pow(x, a) + math.pow(y, b) == z",
        "solution_func": "def g(x=2, y=3, a=2, b=3):\n    return math.pow(x, a) + math.pow(y, b)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(num_list: list, target: int, n=5) -> bool:\n    \"\"\"Check if any n numbers from the given list add up to the target value\"\"\"\n    combinations = random.sample(num_list, n)\n    return sum(combinations) == target\n\ndef g(num_list=[1, 2, 3, 4, 5], target=10, n=5):\n    combinations = random.sample(num_list, n)\n    return sum(combinations)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 214,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(num_list: list, target: int, n=5) -> bool:\n    \"\"\"Check if any n numbers from the given list add up to the target value\"\"\"\n    combinations = random.sample(num_list, n)\n    return sum(combinations) == target",
        "solution_func": "def g(num_list=[1, 2, 3, 4, 5], target=10, n=5):\n    combinations = random.sample(num_list, n)\n    return sum(combinations)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date_str: str, day: int, month: int, year: int) -> bool:\n    \"\"\"Check if the given date matches the specified day, month, and year\"\"\"\n    date = datetime.datetime.strptime(date_str, \"%Y-%m-%d\")\n    return date.day == day and date.month == month and date.year == year\n\ndef g(day=1, month=1, year=2022):\n    return f\"{year}-{month}-{day}\"\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 214,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(date_str: str, day: int, month: int, year: int) -> bool:\n    \"\"\"Check if the given date matches the specified day, month, and year\"\"\"\n    date = datetime.datetime.strptime(date_str, \"%Y-%m-%d\")\n    return date.day == day and date.month == month and date.year == year",
        "solution_func": "def g(day=1, month=1, year=2022):\n    return f\"{year}-{month}-{day}\"",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=\"Python\") -> bool:\n    \"\"\"Check if a given string contains the target substring.\"\"\"\n    return target in s\ndef g(target=\"Python\"):\n    return f\"This is a Python programming puzzle. The target is {target}.\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 214,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=\"Python\") -> bool:\n    \"\"\"Check if a given string contains the target substring.\"\"\"\n    return target in s",
        "solution_func": "def g(target=\"Python\"):\n    return f\"This is a Python programming puzzle. The target is {target}.\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(li: List[int], target=500, n=10) -> bool:\n    \"\"\"Find a list that when shuffled n times and summed gives the target number\"\"\"\n    random.shuffle(li)\n    for _ in range(n-1):\n        random.shuffle(li)\n        target -= sum(li)\n    return sum(li) == target\n\ndef g(target=500, n=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target - 45]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 215,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(li: List[int], target=500, n=10) -> bool:\n    \"\"\"Find a list that when shuffled n times and summed gives the target number\"\"\"\n    random.shuffle(li)\n    for _ in range(n-1):\n        random.shuffle(li)\n        target -= sum(li)\n    return sum(li) == target",
        "solution_func": "def g(target=500, n=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target - 45]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find a list that when multiplied by its length and square rooted gives the target number\"\"\"\n    return math.isclose(math.sqrt(len(li) * math.prod(li)), target)\n\ndef g(target=100):\n    return [target // i for i in range(1, int(math.sqrt(target)) + 1) if target % i == 0]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 215,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find a list that when multiplied by its length and square rooted gives the target number\"\"\"\n    return math.isclose(math.sqrt(len(li) * math.prod(li)), target)",
        "solution_func": "def g(target=100):\n    return [target // i for i in range(1, int(math.sqrt(target)) + 1) if target % i == 0]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport itertools\n\ndef f(s: str, length=4) -> bool:\n    \"\"\"Find a string that contains all possible combinations of a given length\"\"\"\n    combinations = [''.join(comb) for comb in itertools.combinations(s, length)]\n    return set(combinations) == set(s)\n\ndef g(length=4):\n    return ''.join([chr(ord('a') + i % 26) for i in range(length)])\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 215,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\n\ndef f(s: str, length=4) -> bool:\n    \"\"\"Find a string that contains all possible combinations of a given length\"\"\"\n    combinations = [''.join(comb) for comb in itertools.combinations(s, length)]\n    return set(combinations) == set(s)",
        "solution_func": "def g(length=4):\n    return ''.join([chr(ord('a') + i % 26) for i in range(length)])",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13], target=2310) -> bool:\n    \"\"\"Check if a number is divisible by all the numbers in a given list.\"\"\"\n    return all((n % i == 0 for i in nums)) and n == target\n\ndef g(nums=[2, 3, 5, 7, 11, 13], target=2310):\n    return math.prod(nums)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 215,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13], target=2310) -> bool:\n    \"\"\"Check if a number is divisible by all the numbers in a given list.\"\"\"\n    return all((n % i == 0 for i in nums)) and n == target",
        "solution_func": "def g(nums=[2, 3, 5, 7, 11, 13], target=2310):\n    return math.prod(nums)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, chars=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a string contains all the specified characters.\"\"\"\n    return all((c in s for c in chars))\n\ndef g(chars=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(chars)\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 215,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, chars=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a string contains all the specified characters.\"\"\"\n    return all((c in s for c in chars))",
        "solution_func": "def g(chars=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(chars)",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=15) -> bool:\n    \"\"\"Check if the sum of a list of numbers is equal to a target number.\"\"\"\n    return sum(nums) == target\n\ndef g(nums=[1, 2, 3, 4, 5], target=15):\n    random.shuffle(nums)\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 215,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=15) -> bool:\n    \"\"\"Check if the sum of a list of numbers is equal to a target number.\"\"\"\n    return sum(nums) == target",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=15):\n    random.shuffle(nums)\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Find if there are any three numbers in the list that add up to the given target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for z in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[z] == k:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], k=3):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 215,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Find if there are any three numbers in the list that add up to the given target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for z in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[z] == k:\n                    return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5], k=3):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Find if there is a saddle point in the given matrix, where the element is the minimum in its row and maximum in its column.\"\"\"\n    for row in matrix:\n        min_val = min(row)\n        col_idx = row.index(min_val)\n        column = [row[col_idx] for row in matrix]\n        max_val = max(column)\n        if min_val == max_val:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 215,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Find if there is a saddle point in the given matrix, where the element is the minimum in its row and maximum in its column.\"\"\"\n    for row in matrix:\n        min_val = min(row)\n        col_idx = row.index(min_val)\n        column = [row[col_idx] for row in matrix]\n        max_val = max(column)\n        if min_val == max_val:\n            return True\n    return False",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, pattern='abc') -> bool:\n    \"\"\"Find if the given string contains the given pattern as a substring.\"\"\"\n    return pattern in s\n\ndef g(s='abcdefg', pattern='abc'):\n    return s\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 215,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, pattern='abc') -> bool:\n    \"\"\"Find if the given string contains the given pattern as a substring.\"\"\"\n    return pattern in s",
        "solution_func": "def g(s='abcdefg', pattern='abc'):\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=5, m=3) -> bool:\n    \"\"\"Check if there exists an n x m matrix where each row and column is a palindrome and the values are equal to their\n    indices (0-based).\"\"\"\n    matrix = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            matrix[i][j] = i == j\n    for row in matrix:\n        if row != row[::-1]:\n            return False\n    for col in zip(*matrix):\n        if col != col[::-1]:\n            return False\n    return True\ndef g(n=5, m=3):\n    return n >= 1 and m >= 1\nassert f(g())\n",
        "emb": null,
        "idx_generation": 215,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=5, m=3) -> bool:\n    \"\"\"Check if there exists an n x m matrix where each row and column is a palindrome and the values are equal to their\n    indices (0-based).\"\"\"\n    matrix = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            matrix[i][j] = i == j\n    for row in matrix:\n        if row != row[::-1]:\n            return False\n    for col in zip(*matrix):\n        if col != col[::-1]:\n            return False\n    return True",
        "solution_func": "def g(n=5, m=3):\n    return n >= 1 and m >= 1",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(a: List[int], b: List[int], c: List[int], d: List[int], e: List[int], f: List[int], g: List[int]) -> bool:\n    \"\"\"Determine if there is a way to divide the elements of lists a, b, c, d, e, f, and g into two groups such that the sum of elements in each group is equal.\"\"\"\n    total_sum = sum(a) + sum(b) + sum(c) + sum(d) + sum(e) + sum(f) + sum(g)\n    if total_sum % 2 != 0:\n        return False\n    target_sum = total_sum // 2\n    \n    def subset_sum(arr, n, target):\n        if target == 0:\n            return True\n        if n == 0 and target != 0:\n            return False\n        if arr[n-1] > target:\n            return subset_sum(arr, n-1, target)\n        return subset_sum(arr, n-1, target) or subset_sum(arr, n-1, target-arr[n-1])\n    \n    return subset_sum(a, len(a), target_sum) or subset_sum(b, len(b), target_sum) or subset_sum(c, len(c), target_sum) or subset_sum(d, len(d), target_sum) or subset_sum(e, len(e), target_sum) or subset_sum(f, len(f), target_sum) or subset_sum(g, len(g), target_sum)\n\ndef g(a=[1, 2, 3], b=[4, 5, 6], c=[7, 8, 9], d=[10, 11, 12], e=[13, 14, 15], f=[16, 17, 18], g=[19, 20, 21]):\n    return a + b + c + d + e + f + g\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 216,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(a: List[int], b: List[int], c: List[int], d: List[int], e: List[int], f: List[int], g: List[int]) -> bool:\n    \"\"\"Determine if there is a way to divide the elements of lists a, b, c, d, e, f, and g into two groups such that the sum of elements in each group is equal.\"\"\"\n    total_sum = sum(a) + sum(b) + sum(c) + sum(d) + sum(e) + sum(f) + sum(g)\n    if total_sum % 2 != 0:\n        return False\n    target_sum = total_sum // 2\n    \n    def subset_sum(arr, n, target):\n        if target == 0:\n            return True\n        if n == 0 and target != 0:\n            return False\n        if arr[n-1] > target:\n            return subset_sum(arr, n-1, target)\n        return subset_sum(arr, n-1, target) or subset_sum(arr, n-1, target-arr[n-1])\n    \n    return subset_sum(a, len(a), target_sum) or subset_sum(b, len(b), target_sum) or subset_sum(c, len(c), target_sum) or subset_sum(d, len(d), target_sum) or subset_sum(e, len(e), target_sum) or subset_sum(f, len(f), target_sum) or subset_sum(g, len(g), target_sum)",
        "solution_func": "def g(a=[1, 2, 3], b=[4, 5, 6], c=[7, 8, 9], d=[10, 11, 12], e=[13, 14, 15], f=[16, 17, 18], g=[19, 20, 21]):\n    return a + b + c + d + e + f + g",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, substr: str, num: int) -> bool:\n    \"\"\"Determine if there are exactly num occurrences of a given substring in a given string.\"\"\"\n    return string.count(substr) == num\n\ndef g(substr=\"abc\", num=3):\n    return substr * num\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 216,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substr: str, num: int) -> bool:\n    \"\"\"Determine if there are exactly num occurrences of a given substring in a given string.\"\"\"\n    return string.count(substr) == num",
        "solution_func": "def g(substr=\"abc\", num=3):\n    return substr * num",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if a given matrix is symmetric.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 216,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if a given matrix is symmetric.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True",
        "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target.\"\"\"\n    return len(lst) >= 3 and any(sum(comb) == target for comb in combinations(lst, 3))\ndef g(target=10):\n    return [1, 2, target - 3]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 216,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target.\"\"\"\n    return len(lst) >= 3 and any(sum(comb) == target for comb in combinations(lst, 3))",
        "solution_func": "def g(target=10):\n    return [1, 2, target - 3]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if a string contains exactly n vowels.\"\"\"\n    vowel_count = sum(ch in 'aeiou' for ch in s)\n    return vowel_count == n\ndef g(n=4):\n    return 'aeiou' * (n // 5) + 'aeiou'[:n%5]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 216,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if a string contains exactly n vowels.\"\"\"\n    vowel_count = sum(ch in 'aeiou' for ch in s)\n    return vowel_count == n",
        "solution_func": "def g(n=4):\n    return 'aeiou' * (n // 5) + 'aeiou'[:n%5]",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    num_set = set(nums)\n    return any(target - num in num_set for num in nums)\ndef g(target=20):\n    return [10, target - 10]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 216,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    num_set = set(nums)\n    return any(target - num in num_set for num in nums)",
        "solution_func": "def g(target=20):\n    return [10, target - 10]",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in a list that sum up to a given target.\"\"\"\n    return any([nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))])\ndef g(target=10):\n    return [1, 9]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 216,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in a list that sum up to a given target.\"\"\"\n    return any([nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))])",
        "solution_func": "def g(target=10):\n    return [1, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a submatrix in a matrix where the sum of the elements is equal to a given target.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            for k in range(i, len(matrix)):\n                for l in range(j, len(matrix[0])):\n                    submatrix = [row[j:l+1] for row in matrix[i:k+1]]\n                    if sum([sum(row) for row in submatrix]) == target:\n                        return True\n    return False\ndef g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 216,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a submatrix in a matrix where the sum of the elements is equal to a given target.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            for k in range(i, len(matrix)):\n                for l in range(j, len(matrix[0])):\n                    submatrix = [row[j:l+1] for row in matrix[i:k+1]]\n                    if sum([sum(row) for row in submatrix]) == target:\n                        return True\n    return False",
        "solution_func": "def g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"Check if a given substring is present in a string.\"\"\"\n    return substr in string\ndef g(substr='python'):\n    return \"I love python programming\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 216,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"Check if a given substring is present in a string.\"\"\"\n    return substr in string",
        "solution_func": "def g(substr='python'):\n    return \"I love python programming\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(num: int, arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a given number is divisible by all numbers in a list\"\"\"\n    return all((num % i == 0 for i in arr))\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    num = max(arr) * 2\n    return num\nassert f(g())\n",
        "emb": null,
        "idx_generation": 216,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int, arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a given number is divisible by all numbers in a list\"\"\"\n    return all((num % i == 0 for i in arr))",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    num = max(arr) * 2\n    return num",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(perm: tuple, n=4) -> bool:\n    \"\"\"Given a permutation of numbers from 1 to n, check if the difference between any two adjacent numbers is greater than 1\"\"\"\n    return all((abs(perm[i] - perm[i+1]) > 1 for i in range(n-1)))\n\ndef g(n=4):\n    perms = list(permutations(range(1, n+1)))\n    for perm in perms:\n        if f(perm):\n            return perm\n    assert False\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 217,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(perm: tuple, n=4) -> bool:\n    \"\"\"Given a permutation of numbers from 1 to n, check if the difference between any two adjacent numbers is greater than 1\"\"\"\n    return all((abs(perm[i] - perm[i+1]) > 1 for i in range(n-1)))",
        "solution_func": "def g(n=4):\n    perms = list(permutations(range(1, n+1)))\n    for perm in perms:\n        if f(perm):\n            return perm",
        "map_ix": [
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(a: float, b: float, c: float, x: float) -> bool:\n    \"\"\"Given coefficients a, b, c of a quadratic equation ax^2 + bx + c = 0, check if x is a solution\"\"\"\n    return a*x**2 + b*x + c == 0\n\ndef g(a=1.0, b=2.0, c=-3.0):\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0:\n        x1 = (-b + sqrt(discriminant)) / (2*a)\n        return x1\n    else:\n        assert False\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 217,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(a: float, b: float, c: float, x: float) -> bool:\n    \"\"\"Given coefficients a, b, c of a quadratic equation ax^2 + bx + c = 0, check if x is a solution\"\"\"\n    return a*x**2 + b*x + c == 0",
        "solution_func": "def g(a=1.0, b=2.0, c=-3.0):\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0:\n        x1 = (-b + sqrt(discriminant)) / (2*a)\n        return x1\n    else:",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(word: str, letter='a', count=3) -> bool:\n    \"\"\"Count the number of times a given letter appears in a word and check if it equals the given count\"\"\"\n    return word.count(letter) == count\n\ndef g(word='apple', letter='a', count=3):\n    return word\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 217,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str, letter='a', count=3) -> bool:\n    \"\"\"Count the number of times a given letter appears in a word and check if it equals the given count\"\"\"\n    return word.count(letter) == count",
        "solution_func": "def g(word='apple', letter='a', count=3):\n    return word",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=30) -> bool:\n    \"\"\"Given a list of positive integers and a target number, find a combination of numbers from the list that adds up to the target number.\n    Each number in the list can be used multiple times.\"\"\"\n    combinations = []\n    def backtrack(curr_combination, curr_sum, start):\n        nonlocal combinations\n        if curr_sum == target:\n            combinations.append(curr_combination)\n            return\n        if curr_sum > target:\n            return\n        for i in range(start, len(numbers)):\n            backtrack(curr_combination + [numbers[i]], curr_sum + numbers[i], i)\n    backtrack([], 0, 0)\n    return len(combinations) > 0\ndef g(numbers: List[int], target=30):\n    return numbers\nassert f(g())\n",
        "emb": null,
        "idx_generation": 217,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=30) -> bool:\n    \"\"\"Given a list of positive integers and a target number, find a combination of numbers from the list that adds up to the target number.\n    Each number in the list can be used multiple times.\"\"\"\n    combinations = []\n    def backtrack(curr_combination, curr_sum, start):\n        nonlocal combinations\n        if curr_sum == target:\n            combinations.append(curr_combination)\n            return\n        if curr_sum > target:\n            return\n        for i in range(start, len(numbers)):\n            backtrack(curr_combination + [numbers[i]], curr_sum + numbers[i], i)\n    backtrack([], 0, 0)\n    return len(combinations) > 0",
        "solution_func": "def g(numbers: List[int], target=30):\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(number: int, limit=1000) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if number < 2:\n        return False\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\ndef g(number=997):\n    return number\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 217,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(number: int, limit=1000) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if number < 2:\n        return False\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n    return True",
        "solution_func": "def g(number=997):\n    return number",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m: int, matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix of size n x m, return the sum of all the elements in the matrix.\"\"\"\n    return sum(sum(row) for row in matrix)\ndef g(n=3, m=3, matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return n, m, matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 217,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m: int, matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix of size n x m, return the sum of all the elements in the matrix.\"\"\"\n    return sum(sum(row) for row in matrix)",
        "solution_func": "def g(n=3, m=3, matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return n, m, matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Find if the string 's' contains exactly 'n' vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = sum(1 for char in s if char.lower() in vowels)\n    return count == n\ndef g(n: int):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = ''.join(vowels * (n // len(vowels))) + vowels[:n % len(vowels)]\n    return s\nassert f(g(), 5)\n",
        "emb": null,
        "idx_generation": 217,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Find if the string 's' contains exactly 'n' vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = sum(1 for char in s if char.lower() in vowels)\n    return count == n",
        "solution_func": "def g(n: int):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = ''.join(vowels * (n // len(vowels))) + vowels[:n % len(vowels)]\n    return s",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list 'nums' contains at least one pair of numbers that add up to 10.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = 10 - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 217,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list 'nums' contains at least one pair of numbers that add up to 10.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = 10 - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square (a square matrix where the sums of each row, each column, and both diagonals are the same).\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    for i in range(1, n):\n        if sum(matrix[i]) != target_sum:\n            return False\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) != target_sum:\n            return False\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n    return True\ndef g():\n    matrix = [[2, 9, 4], [7, 5, 3], [6, 1, 8]]\n    return matrix\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 217,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square (a square matrix where the sums of each row, each column, and both diagonals are the same).\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    for i in range(1, n):\n        if sum(matrix[i]) != target_sum:\n            return False\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) != target_sum:\n            return False\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n    return True",
        "solution_func": "def g():\n    matrix = [[2, 9, 4], [7, 5, 3], [6, 1, 8]]\n    return matrix",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(text: str, target='world') -> bool:\n    \"\"\"Check if the target string is present in the given text.\"\"\"\n    return target in text\ndef g(target='world'):\n    return 'Hello ' + target\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 217,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(text: str, target='world') -> bool:\n    \"\"\"Check if the target string is present in the given text.\"\"\"\n    return target in text",
        "solution_func": "def g(target='world'):\n    return 'Hello ' + target",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find a subset of integers from the array that sums up to the target value\"\"\"\n    return sum(arr) == target\ndef g(target=100):\n    arr = random.choices(range(1, 101), k=10)\n    return arr\nassert f(g())\n",
        "emb": null,
        "idx_generation": 218,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find a subset of integers from the array that sums up to the target value\"\"\"\n    return sum(arr) == target",
        "solution_func": "def g(target=100):\n    arr = random.choices(range(1, 101), k=10)\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of integers in the array that sums up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=10):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 218,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of integers in the array that sums up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport itertools\ndef f(arr: List[int], r=3) -> bool:\n    \"\"\"Check if there exists a combination of r integers from the array that sums up to zero\"\"\"\n    combinations = itertools.combinations(arr, r)\n    for combo in combinations:\n        if sum(combo) == 0:\n            return True\n    return False\ndef g(r=3):\n    arr = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n    return arr\nassert f(g())\n",
        "emb": null,
        "idx_generation": 218,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\ndef f(arr: List[int], r=3) -> bool:\n    \"\"\"Check if there exists a combination of r integers from the array that sums up to zero\"\"\"\n    combinations = itertools.combinations(arr, r)\n    for combo in combinations:\n        if sum(combo) == 0:\n            return True\n    return False",
        "solution_func": "def g(r=3):\n    arr = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n    return arr",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(num_list: list, target_sum=100) -> bool:\n    \"\"\"Find a list of numbers that add up to the target_sum\"\"\"\n    return sum(num_list) == target_sum\n\ndef g(target_sum=100):\n    num_list = []\n    while sum(num_list) != target_sum:\n        num_list.append(random.randint(1, 10))\n    return num_list\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 218,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(num_list: list, target_sum=100) -> bool:\n    \"\"\"Find a list of numbers that add up to the target_sum\"\"\"\n    return sum(num_list) == target_sum",
        "solution_func": "def g(target_sum=100):\n    num_list = []\n    while sum(num_list) != target_sum:\n        num_list.append(random.randint(1, 10))\n    return num_list",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=100) -> bool:\n    \"\"\"Check if the square root of a number is equal to x\"\"\"\n    return math.sqrt(a) == x\n\ndef g(a=100):\n    return math.sqrt(a)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 218,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=100) -> bool:\n    \"\"\"Check if the square root of a number is equal to x\"\"\"\n    return math.sqrt(a) == x",
        "solution_func": "def g(a=100):\n    return math.sqrt(a)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(matrix: np.array, target_sum=100) -> bool:\n    \"\"\"Check if the sum of all elements in a matrix is equal to the target_sum\"\"\"\n    return np.sum(matrix) == target_sum\n\ndef g(target_sum=100):\n    matrix = np.random.randint(1, 10, size=(5, 5))\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 218,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(matrix: np.array, target_sum=100) -> bool:\n    \"\"\"Check if the sum of all elements in a matrix is equal to the target_sum\"\"\"\n    return np.sum(matrix) == target_sum",
        "solution_func": "def g(target_sum=100):\n    matrix = np.random.randint(1, 10, size=(5, 5))\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(tri: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    \"\"\"Find any triangle in the given directed graph.\"\"\"\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    from itertools import combinations\n    for (i, j, k) in combinations(range(max(max(e) for e in edges) + 1), 3):\n        if [i, j] in edges and [j, k] in edges and [k, i] in edges:\n            return [i, j, k]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 218,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(tri: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    \"\"\"Find any triangle in the given directed graph.\"\"\"\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)",
        "solution_func": "def g(edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    from itertools import combinations\n    for (i, j, k) in combinations(range(max(max(e) for e in edges) + 1), 3):\n        if [i, j] in edges and [j, k] in edges and [k, i] in edges:\n            return [i, j, k]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    \"\"\"Find a path from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == 1 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    paths = [[0]]\n    while paths:\n        current_path = paths.pop(0)\n        current_node = current_path[-1]\n        if current_node == 1:\n            return current_path\n        for (i, j) in edges:\n            if i == current_node:\n                new_path = current_path + [j]\n                paths.append(new_path)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 218,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    \"\"\"Find a path from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == 1 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])",
        "solution_func": "def g(edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    paths = [[0]]\n    while paths:\n        current_path = paths.pop(0)\n        current_node = current_path[-1]\n        if current_node == 1:\n            return current_path\n        for (i, j) in edges:\n            if i == current_node:\n                new_path = current_path + [j]\n                paths.append(new_path)",
        "map_ix": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: str, parts=['I!!', '!love', 'dumplings', '!', ''], string='I!!!!!love!!dumplings!!!!!') -> bool:\n    \"\"\"Find a separator that when used to join a given string gives a certain result.\nThis is related to the previous problem but there are some edge cases that differ.\"\"\"\n    return x.join(parts) == string\ndef g(parts=['I!!', '!love', 'dumplings', '!', ''], string='I!!!!!love!!dumplings!!!!!'):\n    if len(parts) <= 1:\n        return ''\n    length = (len(string) - len(''.join(parts))) // (len(parts) - 1)\n    return ''.join([s + '!' * length for s in parts[:-1]]) + parts[-1]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 218,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, parts=['I!!', '!love', 'dumplings', '!', ''], string='I!!!!!love!!dumplings!!!!!') -> bool:\n    \"\"\"Find a separator that when used to join a given string gives a certain result.\nThis is related to the previous problem but there are some edge cases that differ.\"\"\"\n    return x.join(parts) == string",
        "solution_func": "def g(parts=['I!!', '!love', 'dumplings', '!', ''], string='I!!!!!love!!dumplings!!!!!'):\n    if len(parts) <= 1:\n        return ''\n    length = (len(string) - len(''.join(parts))) // (len(parts) - 1)\n    return ''.join([s + '!' * length for s in parts[:-1]]) + parts[-1]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\ndef f(nums: List[int], target=100000) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target number.\"\"\"\n    return any((i + j + k == target for i in nums for j in nums for k in nums))\ndef g(target=100000):\n    n = math.floor(target / 3)\n    return [n, n, n]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 218,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\ndef f(nums: List[int], target=100000) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target number.\"\"\"\n    return any((i + j + k == target for i in nums for j in nums for k in nums))",
        "solution_func": "def g(target=100000):\n    n = math.floor(target / 3)\n    return [n, n, n]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a list that add up to a given target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums[:2]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 219,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a list that add up to a given target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums)))",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums[:2]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find a pair of numbers, one from each row of a given matrix, that add up to a given target\"\"\"\n    return any(matrix[i][j] + matrix[i+1][j] == target for i in range(len(matrix) - 1) for j in range(len(matrix[0])))\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return [matrix[i][:2] for i in range(len(matrix) - 1)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 219,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find a pair of numbers, one from each row of a given matrix, that add up to a given target\"\"\"\n    return any(matrix[i][j] + matrix[i+1][j] == target for i in range(len(matrix) - 1) for j in range(len(matrix[0])))",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return [matrix[i][:2] for i in range(len(matrix) - 1)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='python', count=3) -> bool:\n    \"\"\"Check if a given substring appears a certain number of times in a string\"\"\"\n    return s.count(substr) == count\ndef g(substr='python', count=3):\n    return substr * count\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 219,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr='python', count=3) -> bool:\n    \"\"\"Check if a given substring appears a certain number of times in a string\"\"\"\n    return s.count(substr) == count",
        "solution_func": "def g(substr='python', count=3):\n    return substr * count",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(d: datetime.date, y=2022, m=2, dt=18) -> bool:\n    \"\"\"Check if the given date is the same as the specified year, month, and day.\"\"\"\n    return d.year == y and d.month == m and d.day == dt\n\ndef g(y=2022, m=2, dt=18):\n    return datetime.date(y, m, dt)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 219,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(d: datetime.date, y=2022, m=2, dt=18) -> bool:\n    \"\"\"Check if the given date is the same as the specified year, month, and day.\"\"\"\n    return d.year == y and d.month == m and d.day == dt",
        "solution_func": "def g(y=2022, m=2, dt=18):\n    return datetime.date(y, m, dt)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(l: list, n=5) -> bool:\n    \"\"\"Check if the given list contains exactly n distinct even numbers.\"\"\"\n    return len(l) == n and all(num % 2 == 0 for num in l) and len(set(l)) == n\n\ndef g(n=5):\n    l = []\n    while len(l) < n:\n        num = random.randint(0, 100)\n        if num % 2 == 0 and num not in l:\n            l.append(num)\n    return l\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 219,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(l: list, n=5) -> bool:\n    \"\"\"Check if the given list contains exactly n distinct even numbers.\"\"\"\n    return len(l) == n and all(num % 2 == 0 for num in l) and len(set(l)) == n",
        "solution_func": "def g(n=5):\n    l = []\n    while len(l) < n:\n        num = random.randint(0, 100)\n        if num % 2 == 0 and num not in l:\n            l.append(num)\n    return l",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=16.0) -> bool:\n    \"\"\"Check if the given number equals the square root of a.\"\"\"\n    return math.isclose(x, math.sqrt(a))\n\ndef g(a=16.0):\n    return math.sqrt(a)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 219,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=16.0) -> bool:\n    \"\"\"Check if the given number equals the square root of a.\"\"\"\n    return math.isclose(x, math.sqrt(a))",
        "solution_func": "def g(a=16.0):\n    return math.sqrt(a)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], n=3, target=100) -> bool:\n    \"\"\"Find a combination of n numbers from a list that add up to a target value\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, n):\n        if sum(combo) == target:\n            return True\n    return False\ndef g(nums: List[int], n=3, target=100):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 219,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], n=3, target=100) -> bool:\n    \"\"\"Find a combination of n numbers from a list that add up to a target value\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, n):\n        if sum(combo) == target:\n            return True\n    return False",
        "solution_func": "def g(nums: List[int], n=3, target=100):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if a given string contains a specific substring\"\"\"\n    return substring in s\ndef g(substring='abc'):\n    return 'This is a test string with abc in it.'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 219,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if a given string contains a specific substring\"\"\"\n    return substring in s",
        "solution_func": "def g(substring='abc'):\n    return 'This is a test string with abc in it.'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from a list that add up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 219,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from a list that add up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3, target='aaa') -> bool:\n    \"\"\"Check if a target string appears at least k times consecutively in the given string.\"\"\"\n    return s.count(target*k) > 0\ndef g(k=3, target='aaa'):\n    return target*k\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 219,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, k=3, target='aaa') -> bool:\n    \"\"\"Check if a target string appears at least k times consecutively in the given string.\"\"\"\n    return s.count(target*k) > 0",
        "solution_func": "def g(k=3, target='aaa'):\n    return target*k",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, k=3, n=10) -> bool:\n    \"\"\"Check if there exists a substring of length k that occurs at least n times in the string s\"\"\"\n    from collections import Counter\n    counts = Counter([s[i:i+k] for i in range(len(s)-k+1)])\n    for substring, count in counts.items():\n        if count >= n:\n            return True\n    return False\ndef g():\n    return \"ab\"*5 + \"cde\"*3 + \"fghij\"*2\nassert f(g())\n",
        "emb": null,
        "idx_generation": 220,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, k=3, n=10) -> bool:\n    \"\"\"Check if there exists a substring of length k that occurs at least n times in the string s\"\"\"\n    from collections import Counter\n    counts = Counter([s[i:i+k] for i in range(len(s)-k+1)])\n    for substring, count in counts.items():\n        if count >= n:\n            return True\n    return False",
        "solution_func": "def g():\n    return \"ab\"*5 + \"cde\"*3 + \"fghij\"*2",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, k: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if there exists a prime number p_i in the list of primes such that p_i is divisible by n and the sum of the digits of p_i is divisible by k\"\"\"\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n    for prime in primes:\n        if prime % n == 0 and sum_digits(prime) % k == 0:\n            return True\n    return False\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return 4, 5, primes\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 220,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, k: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if there exists a prime number p_i in the list of primes such that p_i is divisible by n and the sum of the digits of p_i is divisible by k\"\"\"\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n    for prime in primes:\n        if prime % n == 0 and sum_digits(prime) % k == 0:\n            return True\n    return False",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return 4, 5, primes",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k: int, n=2) -> bool:\n    \"\"\"Check if there exists a subarray of length n in the array arr such that the sum of the subarray is divisible by k\"\"\"\n    for i in range(len(arr)-n+1):\n        subarray = arr[i:i+n]\n        if sum(subarray) % k == 0:\n            return True\n    return False\ndef g():\n    return [1, 2, 3, 4, 5], 3\nassert f(*g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 220,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], k: int, n=2) -> bool:\n    \"\"\"Check if there exists a subarray of length n in the array arr such that the sum of the subarray is divisible by k\"\"\"\n    for i in range(len(arr)-n+1):\n        subarray = arr[i:i+n]\n        if sum(subarray) % k == 0:\n            return True\n    return False",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5], 3",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(primes: List[int], target_sum=100) -> bool:\n    \"\"\"Find a subset of prime numbers that sums up to the target_sum.\"\"\"\n    assert all((is_prime(p) for p in primes))\n    return sum(primes) == target_sum\n\ndef g(target_sum=100):\n    from sympy import primerange\n    primes = list(primerange(2, target_sum))\n    return primes\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 220,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(primes: List[int], target_sum=100) -> bool:\n    \"\"\"Find a subset of prime numbers that sums up to the target_sum.\"\"\"\n    assert all((is_prime(p) for p in primes))\n    return sum(primes) == target_sum",
        "solution_func": "def g(target_sum=100):\n    from sympy import primerange\n    primes = list(primerange(2, target_sum))\n    return primes",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Check if it is possible to get 24 by combining four numbers with the basic arithmetic operators.\"\"\"\n    assert len(nums) == 4 and all((isinstance(n, int) for n in nums))\n    return target in get_combinations(nums)\n\ndef g(target=24):\n    from itertools import permutations, product\n    nums = [1, 2, 3, 4]\n    operators = ['+', '-', '*', '/']\n    combinations = []\n    for p in permutations(nums):\n        for op in product(operators, repeat=3):\n            expression = '{} {} {} {} {} {} {}'.format(p[0], op[0], p[1], op[1], p[2], op[2], p[3])\n            try:\n                result = eval(expression)\n                if result == target:\n                    combinations.append(expression)\n            except ZeroDivisionError:\n                pass\n    return combinations\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 220,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Check if it is possible to get 24 by combining four numbers with the basic arithmetic operators.\"\"\"\n    assert len(nums) == 4 and all((isinstance(n, int) for n in nums))\n    return target in get_combinations(nums)",
        "solution_func": "def g(target=24):\n    from itertools import permutations, product\n    nums = [1, 2, 3, 4]\n    operators = ['+', '-', '*', '/']\n    combinations = []\n    for p in permutations(nums):\n        for op in product(operators, repeat=3):\n            expression = '{} {} {} {} {} {} {}'.format(p[0], op[0], p[1], op[1], p[2], op[2], p[3])\n            try:\n                result = eval(expression)\n                if result == target:\n                    combinations.append(expression)\n            except ZeroDivisionError:\n                pass\n    return combinations",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"Check if the target_word can be formed by concatenating the given words.\"\"\"\n    assert all((isinstance(w, str) for w in words))\n    return target_word in get_combinations(words)\n\ndef g(target_word='python'):\n    words = ['py', 'th', 'on', 'programming']\n    return words\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 220,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"Check if the target_word can be formed by concatenating the given words.\"\"\"\n    assert all((isinstance(w, str) for w in words))\n    return target_word in get_combinations(words)",
        "solution_func": "def g(target_word='python'):\n    words = ['py', 'th', 'on', 'programming']\n    return words",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Check if it is possible to obtain the target number using all four numbers in nums\"\"\"\n    ops = ['+', '-', '*', '/']\n\n    def dfs(nums):\n        if len(nums) == 1:\n            return abs(nums[0] - target) < 1e-6\n\n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                if i != j:\n                    new_nums = [nums[k] for k in range(len(nums)) if k != i and k != j]\n\n                    for op in ops:\n                        if op == '+':\n                            new_nums.append(nums[i] + nums[j])\n                        elif op == '-':\n                            new_nums.append(nums[i] - nums[j])\n                        elif op == '*':\n                            new_nums.append(nums[i] * nums[j])\n                        elif op == '/':\n                            if nums[j] != 0:\n                                new_nums.append(nums[i] / nums[j])\n\n                        if dfs(new_nums):\n                            return True\n                        new_nums.pop()\n\n        return False\n\n    return dfs(nums)\n\n\ndef g(nums=[4, 7, 8, 12]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 220,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Check if it is possible to obtain the target number using all four numbers in nums\"\"\"\n    ops = ['+', '-', '*', '/']\n\n    def dfs(nums):\n        if len(nums) == 1:\n            return abs(nums[0] - target) < 1e-6\n\n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                if i != j:\n                    new_nums = [nums[k] for k in range(len(nums)) if k != i and k != j]\n\n                    for op in ops:\n                        if op == '+':\n                            new_nums.append(nums[i] + nums[j])\n                        elif op == '-':\n                            new_nums.append(nums[i] - nums[j])\n                        elif op == '*':\n                            new_nums.append(nums[i] * nums[j])\n                        elif op == '/':\n                            if nums[j] != 0:\n                                new_nums.append(nums[i] / nums[j])\n\n                        if dfs(new_nums):\n                            return True\n                        new_nums.pop()\n\n        return False\n\n    return dfs(nums)",
        "solution_func": "def g(nums=[4, 7, 8, 12]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"Check if there are exactly k distinct characters in the string s\"\"\"\n    return len(set(s)) == k\n\ndef g(k=2):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return alphabet[:k]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 220,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"Check if there are exactly k distinct characters in the string s\"\"\"\n    return len(set(s)) == k",
        "solution_func": "def g(k=2):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return alphabet[:k]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[List[int]], target=10) -> bool:\n    \"\"\"Find if there exists a path from the top left corner to the bottom right corner of the grid where the sum of all numbers along the path is equal to the target\"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    dp = [[0] * cols for _ in range(rows)]\n\n    dp[0][0] = arr[0][0]\n\n    for i in range(1, rows):\n        dp[i][0] = dp[i-1][0] + arr[i][0]\n\n    for j in range(1, cols):\n        dp[0][j] = dp[0][j-1] + arr[0][j]\n\n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + arr[i][j]\n\n    return dp[rows-1][cols-1] == target\n\n\ndef g(arr=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 220,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[List[int]], target=10) -> bool:\n    \"\"\"Find if there exists a path from the top left corner to the bottom right corner of the grid where the sum of all numbers along the path is equal to the target\"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    dp = [[0] * cols for _ in range(rows)]\n\n    dp[0][0] = arr[0][0]\n\n    for i in range(1, rows):\n        dp[i][0] = dp[i-1][0] + arr[i][0]\n\n    for j in range(1, cols):\n        dp[0][j] = dp[0][j-1] + arr[0][j]\n\n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + arr[i][j]\n\n    return dp[rows-1][cols-1] == target",
        "solution_func": "def g(arr=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[10, 20, 30, 40, 50]) -> bool:\n    \"\"\"Check if the given number n is present in the list lst.\"\"\"\n    return n in lst\ndef g(lst=[10, 20, 30, 40, 50]):\n    return lst[0]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 220,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[10, 20, 30, 40, 50]) -> bool:\n    \"\"\"Check if the given number n is present in the list lst.\"\"\"\n    return n in lst",
        "solution_func": "def g(lst=[10, 20, 30, 40, 50]):\n    return lst[0]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"Given a list of integers, find if there are three distinct elements in the list whose sum is equal to the target value.\nSample Input:\narr = [1, 2, 3, 4, 5]\nSample Output:\nTrue\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 221,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"Given a list of integers, find if there are three distinct elements in the list whose sum is equal to the target value.\nSample Input:\narr = [1, 2, 3, 4, 5]\nSample Output:\nTrue\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5]):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, target=3) -> bool:\n    \"\"\"Given a string, find if there is a substring of length target that contains only unique characters.\nSample Input:\ns = \"hello\"\nSample Output:\nTrue\"\"\"\n    for i in range(len(s)-target+1):\n        if len(set(s[i:i+target])) == target:\n            return True\n    return False\n\ndef g(s=\"hello\", target=3):\n    for i in range(len(s)-target+1):\n        if len(set(s[i:i+target])) == target:\n            return True\n    return False\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 221,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=3) -> bool:\n    \"\"\"Given a string, find if there is a substring of length target that contains only unique characters.\nSample Input:\ns = \"hello\"\nSample Output:\nTrue\"\"\"\n    for i in range(len(s)-target+1):\n        if len(set(s[i:i+target])) == target:\n            return True\n    return False",
        "solution_func": "def g(s=\"hello\", target=3):\n    for i in range(len(s)-target+1):\n        if len(set(s[i:i+target])) == target:\n            return True\n    return False",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Given a matrix, find if there exists a submatrix such that the sum of all its elements is equal to the target value.\nSample Input:\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nSample Output:\nTrue\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(j, cols):\n                    submatrix_sum = sum(matrix[x][y] for x in range(i, k+1) for y in range(j, l+1))\n                    if submatrix_sum == target:\n                        return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(j, cols):\n                    submatrix_sum = sum(matrix[x][y] for x in range(i, k+1) for y in range(j, l+1))\n                    if submatrix_sum == target:\n                        return True\n    return False\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 221,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Given a matrix, find if there exists a submatrix such that the sum of all its elements is equal to the target value.\nSample Input:\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nSample Output:\nTrue\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(j, cols):\n                    submatrix_sum = sum(matrix[x][y] for x in range(i, k+1) for y in range(j, l+1))\n                    if submatrix_sum == target:\n                        return True\n    return False",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(j, cols):\n                    submatrix_sum = sum(matrix[x][y] for x in range(i, k+1) for y in range(j, l+1))\n                    if submatrix_sum == target:\n                        return True\n    return False",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int, digits=3, power=2) -> bool:\n    \"\"\"Check if a number is an Armstrong number.\"\"\"\n    return sum(int(digit) ** power for digit in str(num)) == num\n\ndef g(digits=3, power=2):\n    num = 10 ** (digits - 1)\n    while True:\n        if f(num):\n            return num\n        num += 1\nassert f(g())\n",
        "emb": null,
        "idx_generation": 221,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(num: int, digits=3, power=2) -> bool:\n    \"\"\"Check if a number is an Armstrong number.\"\"\"\n    return sum(int(digit) ** power for digit in str(num)) == num",
        "solution_func": "def g(digits=3, power=2):\n    num = 10 ** (digits - 1)\n    while True:\n        if f(num):\n            return num\n        num += 1",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(array: list) -> bool:\n    \"\"\"Check if an array can be partitioned into two subsets with equal sum.\"\"\"\n    total_sum = sum(array)\n    if total_sum % 2 != 0:\n        return False\n    target_sum = total_sum // 2\n    n = len(array)\n\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if array[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - array[i - 1]]\n\n    return dp[n][target_sum]\n\ndef g(array=[1, 5, 11, 5]):\n    return array\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 221,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(array: list) -> bool:\n    \"\"\"Check if an array can be partitioned into two subsets with equal sum.\"\"\"\n    total_sum = sum(array)\n    if total_sum % 2 != 0:\n        return False\n    target_sum = total_sum // 2\n    n = len(array)\n\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if array[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - array[i - 1]]\n\n    return dp[n][target_sum]",
        "solution_func": "def g(array=[1, 5, 11, 5]):\n    return array",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\nimport itertools\n\ndef f(array: list) -> bool:\n    \"\"\"Check if a list of integers can form a valid Sudoku solution.\"\"\"\n    n = len(array)\n    m = int(math.sqrt(n))\n\n    def is_valid_row(row):\n        return len(row) == n and len(set(row)) == n\n\n    def is_valid_column(col):\n        return len(col) == n and len(set(col)) == n\n\n    def is_valid_subgrid(subgrid):\n        flattened_subgrid = [num for row in subgrid for num in row]\n        return len(flattened_subgrid) == n and len(set(flattened_subgrid)) == n\n\n    def get_subgrids():\n        subgrids = []\n        for i in range(0, n, m):\n            for j in range(0, n, m):\n                subgrid = [array[x][j:j+m] for x in range(i, i+m)]\n                subgrids.append(subgrid)\n        return subgrids\n\n    rows = array\n    columns = [[array[j][i] for j in range(n)] for i in range(n)]\n    subgrids = get_subgrids()\n\n    return all([is_valid_row(row) for row in rows]) and \\\n           all([is_valid_column(col) for col in columns]) and \\\n           all([is_valid_subgrid(subgrid) for subgrid in subgrids])\n\ndef g(array=[[5, 3, 0, 0, 7, 0, 0, 0, 0],\n             [6, 0, 0, 1, 9, 5, 0, 0, 0],\n             [0, 9, 8, 0, 0, 0, 0, 6, 0],\n             [8, 0, 0, 0, 6, 0, 0, 0, 3],\n             [4, 0, 0, 8, 0, 3, 0, 0, 1],\n             [7, 0, 0, 0, 2, 0, 0, 0, 6],\n             [0, 6, 0, 0, 0, 0, 2, 8, 0],\n             [0, 0, 0, 4, 1, 9, 0, 0, 5],\n             [0, 0, 0, 0, 8, 0, 0, 7, 9]]):\n    return array\nassert f(g())\n",
        "emb": null,
        "idx_generation": 221,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nimport itertools\n\ndef f(array: list) -> bool:\n    \"\"\"Check if a list of integers can form a valid Sudoku solution.\"\"\"\n    n = len(array)\n    m = int(math.sqrt(n))\n\n    def is_valid_row(row):\n        return len(row) == n and len(set(row)) == n\n\n    def is_valid_column(col):\n        return len(col) == n and len(set(col)) == n\n\n    def is_valid_subgrid(subgrid):\n        flattened_subgrid = [num for row in subgrid for num in row]\n        return len(flattened_subgrid) == n and len(set(flattened_subgrid)) == n\n\n    def get_subgrids():\n        subgrids = []\n        for i in range(0, n, m):\n            for j in range(0, n, m):\n                subgrid = [array[x][j:j+m] for x in range(i, i+m)]\n                subgrids.append(subgrid)\n        return subgrids\n\n    rows = array\n    columns = [[array[j][i] for j in range(n)] for i in range(n)]\n    subgrids = get_subgrids()\n\n    return all([is_valid_row(row) for row in rows]) and \\\n           all([is_valid_column(col) for col in columns]) and \\\n           all([is_valid_subgrid(subgrid) for subgrid in subgrids])",
        "solution_func": "def g(array=[[5, 3, 0, 0, 7, 0, 0, 0, 0],\n             [6, 0, 0, 1, 9, 5, 0, 0, 0],\n             [0, 9, 8, 0, 0, 0, 0, 6, 0],\n             [8, 0, 0, 0, 6, 0, 0, 0, 3],\n             [4, 0, 0, 8, 0, 3, 0, 0, 1],\n             [7, 0, 0, 0, 2, 0, 0, 0, 6],\n             [0, 6, 0, 0, 0, 0, 2, 8, 0],\n             [0, 0, 0, 4, 1, 9, 0, 0, 5],\n             [0, 0, 0, 0, 8, 0, 0, 7, 9]]):\n    return array",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list that sums up to the target value.\"\"\"\n    return any((True for i in range(len(arr)) for j in range(i+1, len(arr)) if arr[i] + arr[j] == target))\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return arr\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 221,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list that sums up to the target value.\"\"\"\n    return any((True for i in range(len(arr)) for j in range(i+1, len(arr)) if arr[i] + arr[j] == target))",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return arr",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if the given character is the most frequent character in the given string.\"\"\"\n    return s.count(char) > s.count(max(set(s), key=s.count))\ndef g(char='a'):\n    return \"abracadabra\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 221,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if the given character is the most frequent character in the given string.\"\"\"\n    return s.count(char) > s.count(max(set(s), key=s.count))",
        "solution_func": "def g(char='a'):\n    return \"abracadabra\"",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(start: datetime, end: datetime, minutes=30) -> bool:\n    \"\"\"Check if the given time difference is greater than or equal to the specified minutes.\"\"\"\n    return (end - start).total_seconds() >= minutes * 60\ndef g(minutes=30):\n    start = datetime(2022, 1, 1, 12, 0, 0)\n    end = datetime(2022, 1, 1, 12, minutes, 0)\n    return start, end\nassert f(*g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 221,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(start: datetime, end: datetime, minutes=30) -> bool:\n    \"\"\"Check if the given time difference is greater than or equal to the specified minutes.\"\"\"\n    return (end - start).total_seconds() >= minutes * 60",
        "solution_func": "def g(minutes=30):\n    start = datetime(2022, 1, 1, 12, 0, 0)\n    end = datetime(2022, 1, 1, 12, minutes, 0)\n    return start, end",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, target=\"hello\", max_repeats=2) -> bool:\n    \"\"\"Check if the target string can be formed by repeating the input string at most max_repeats times.\"\"\"\n    return s * max_repeats == target\ndef g(target=\"hello\", max_repeats=2):\n    return target * max_repeats\nassert f(g())\n",
        "emb": null,
        "idx_generation": 221,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=\"hello\", max_repeats=2) -> bool:\n    \"\"\"Check if the target string can be formed by repeating the input string at most max_repeats times.\"\"\"\n    return s * max_repeats == target",
        "solution_func": "def g(target=\"hello\", max_repeats=2):\n    return target * max_repeats",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers, find any pair of numbers that adds up to the target.\n    Sample Input:\n    [1, 2, 3, 4, 5]\n    Sample Output:\n    (2, 3)\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums) - 1) for j in range(i + 1, len(nums))))\n    \ndef g(nums: List[int], target=100):\n    random.shuffle(nums)\n    return (nums[0], target - nums[0])\nassert f(g([1, 2, 3, 4, 5]))\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 222,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers, find any pair of numbers that adds up to the target.\n    Sample Input:\n    [1, 2, 3, 4, 5]\n    Sample Output:\n    (2, 3)\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums) - 1) for j in range(i + 1, len(nums))))",
        "solution_func": "def g(nums: List[int], target=100):\n    random.shuffle(nums)\n    return (nums[0], target - nums[0])",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, k=10) -> bool:\n    \"\"\"Given a number n, find any k-th root of n.\n    Sample Input:\n    27\n    Sample Output:\n    3\"\"\"\n    return math.isclose(n ** (1 / k), round(n ** (1 / k)), abs_tol=1e-9)\n\ndef g(n: int, k=10):\n    return round(n ** (1 / k))\nassert f(g(27))\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 222,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, k=10) -> bool:\n    \"\"\"Given a number n, find any k-th root of n.\n    Sample Input:\n    27\n    Sample Output:\n    3\"\"\"\n    return math.isclose(n ** (1 / k), round(n ** (1 / k)), abs_tol=1e-9)",
        "solution_func": "def g(n: int, k=10):\n    return round(n ** (1 / k))",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Given a matrix, find any column that contains the target number.\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n    Sample Output:\n    [0, 1, 2]\"\"\"\n    return any((target in column for column in np.transpose(matrix)))\n\ndef g(matrix: List[List[int]], target=0):\n    return [i for i, column in enumerate(np.transpose(matrix)) if target in column]\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n",
        "emb": null,
        "idx_generation": 222,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Given a matrix, find any column that contains the target number.\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n    Sample Output:\n    [0, 1, 2]\"\"\"\n    return any((target in column for column in np.transpose(matrix)))",
        "solution_func": "def g(matrix: List[List[int]], target=0):\n    return [i for i, column in enumerate(np.transpose(matrix)) if target in column]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[3, 5, 7, 11, 13, 17]) -> bool:\n    \"\"\"Check if a number is in a sorted list\"\"\"\n    return n in lst\ndef g(lst=[3, 5, 7, 11, 13, 17]):\n    return lst[len(lst) // 2]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 222,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[3, 5, 7, 11, 13, 17]) -> bool:\n    \"\"\"Check if a number is in a sorted list\"\"\"\n    return n in lst",
        "solution_func": "def g(lst=[3, 5, 7, 11, 13, 17]):\n    return lst[len(lst) // 2]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, s=\"Hello, World!\") -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return s == s[::-1]\ndef g(s=\"Hello, World!\"):\n    return s[::-1]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 222,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, s=\"Hello, World!\") -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g(s=\"Hello, World!\"):\n    return s[::-1]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\nfrom math import isqrt\n\ndef f(n: int, a=5, b=7, c=9) -> bool:\n    \"\"\"Check if a number is a perfect square and lies within a given range\"\"\"\n    return isqrt(n) ** 2 == n and a <= n <= b and b <= c\ndef g(a=5, b=7, c=9):\n    return b ** 2\nassert f(g())\n",
        "emb": null,
        "idx_generation": 222,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import isqrt\n\ndef f(n: int, a=5, b=7, c=9) -> bool:\n    \"\"\"Check if a number is a perfect square and lies within a given range\"\"\"\n    return isqrt(n) ** 2 == n and a <= n <= b and b <= c",
        "solution_func": "def g(a=5, b=7, c=9):\n    return b ** 2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"Check if a number is divisible by all the prime numbers in a given list.\"\"\"\n    return all(n % p == 0 for p in primes)\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19]):\n    n = 1\n    for p in primes:\n        n *= p\n    return n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 222,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"Check if a number is divisible by all the prime numbers in a given list.\"\"\"\n    return all(n % p == 0 for p in primes)",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19]):\n    n = 1\n    for p in primes:\n        n *= p\n    return n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a palindrome.\"\"\"\n    return str(n) == str(n)[::-1]\ndef g():\n    return 12321\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 222,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a palindrome.\"\"\"\n    return str(n) == str(n)[::-1]",
        "solution_func": "def g():\n    return 12321",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a word is an isogram (a word that has no repeating letters).\"\"\"\n    return len(set(s)) == len(s)\ndef g():\n    return \"python\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 222,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a word is an isogram (a word that has no repeating letters).\"\"\"\n    return len(set(s)) == len(s)",
        "solution_func": "def g():\n    return \"python\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='palindrome') -> bool:\n    \"\"\"Check if the string s can be rearranged to form the target string\"\"\"\n    return sorted(s) == sorted(target)\ndef g(target='palindrome'):\n    return ''.join(sorted(target))\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 222,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='palindrome') -> bool:\n    \"\"\"Check if the string s can be rearranged to form the target string\"\"\"\n    return sorted(s) == sorted(target)",
        "solution_func": "def g(target='palindrome'):\n    return ''.join(sorted(target))",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"Find a word in the list of words that contains all the letters of the target word.\"\"\"\n    return any(all(letter in word for letter in target_word) for word in words)\ndef g(target_word='python'):\n    return [word for word in ['python', 'programming', 'code', 'algorithm'] if all(letter in word for letter in target_word)][0]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 223,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"Find a word in the list of words that contains all the letters of the target word.\"\"\"\n    return any(all(letter in word for letter in target_word) for word in words)",
        "solution_func": "def g(target_word='python'):\n    return [word for word in ['python', 'programming', 'code', 'algorithm'] if all(letter in word for letter in target_word)][0]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=10) -> bool:\n    \"\"\"Find a row in the matrix such that the sum of its elements is equal to the target sum.\"\"\"\n    return any(sum(row) == target_sum for row in matrix)\ndef g(target_sum=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]][next((i for i, row in enumerate([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) if sum(row) == target_sum), -1))]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 223,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=10) -> bool:\n    \"\"\"Find a row in the matrix such that the sum of its elements is equal to the target sum.\"\"\"\n    return any(sum(row) == target_sum for row in matrix)",
        "solution_func": "def g(target_sum=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]][next((i for i, row in enumerate([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) if sum(row) == target_sum), -1))]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_product=24) -> bool:\n    \"\"\"Find a pair of numbers in the list whose product is equal to the target product.\"\"\"\n    return any(a * b == target_product for a in numbers for b in numbers if a != b)\ndef g(target_product=24):\n    return next((a, b) for a in [2, 3, 4, 5] for b in [2, 3, 4, 5] if a * b == target_product and a != b)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 223,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target_product=24) -> bool:\n    \"\"\"Find a pair of numbers in the list whose product is equal to the target product.\"\"\"\n    return any(a * b == target_product for a in numbers for b in numbers if a != b)",
        "solution_func": "def g(target_product=24):\n    return next((a, b) for a in [2, 3, 4, 5] for b in [2, 3, 4, 5] if a * b == target_product and a != b)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\nfrom math import isqrt\n\ndef f(n: int, a=1234, b=5678) -> bool:\n    \"\"\"Find a number that is a multiple of a and a factor of b\"\"\"\n    return n % a == 0 and b % n == 0\n\ndef g(a=1234, b=5678):\n    return isqrt(a) * isqrt(b)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 223,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import isqrt\n\ndef f(n: int, a=1234, b=5678) -> bool:\n    \"\"\"Find a number that is a multiple of a and a factor of b\"\"\"\n    return n % a == 0 and b % n == 0",
        "solution_func": "def g(a=1234, b=5678):\n    return isqrt(a) * isqrt(b)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that adds up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [1, target-1]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 223,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that adds up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [1, target-1]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Find a substring of length n that appears twice in the string\"\"\"\n    for i in range(len(s)-n):\n        if s[i:i+n] in s[i+n:]:\n            return True\n    return False\n\ndef g(n=4):\n    return \"a\" * (2*n)\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 223,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Find a substring of length n that appears twice in the string\"\"\"\n    for i in range(len(s)-n):\n        if s[i:i+n] in s[i+n:]:\n            return True\n    return False",
        "solution_func": "def g(n=4):\n    return \"a\" * (2*n)",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=5) -> bool:\n    \"\"\"Check if the target value is present in the array.\"\"\"\n    return target in arr\ndef g(target=5):\n    return np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 223,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=5) -> bool:\n    \"\"\"Check if the target value is present in the array.\"\"\"\n    return target in arr",
        "solution_func": "def g(target=5):\n    return np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport pandas as pd\n\ndef f(df: pd.DataFrame, column='name', value='Alice') -> bool:\n    \"\"\"Check if a given value is present in a specific column of a DataFrame.\"\"\"\n    return value in df[column].values\ndef g(column='name', value='Alice'):\n    data = {'name': ['Alice', 'Bob', 'Charlie'], 'age': [25, 30, 35]}\n    return pd.DataFrame(data)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 223,
        "target_skills": null,
        "problem_func": "from typing import*\nimport pandas as pd\n\ndef f(df: pd.DataFrame, column='name', value='Alice') -> bool:\n    \"\"\"Check if a given value is present in a specific column of a DataFrame.\"\"\"\n    return value in df[column].values",
        "solution_func": "def g(column='name', value='Alice'):\n    data = {'name': ['Alice', 'Bob', 'Charlie'], 'age': [25, 30, 35]}\n    return pd.DataFrame(data)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(a: int, b: int, c: int, d: int) -> bool:\n    \"\"\"Check if the sum of two random numbers is equal to the product of the other two random numbers.\"\"\"\n    nums = [a, b, c, d]\n    random.shuffle(nums)\n    return nums[0] + nums[1] == nums[2] * nums[3]\ndef g():\n    return random.randint(1, 10), random.randint(1, 10), random.randint(1, 10), random.randint(1, 10)\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 223,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(a: int, b: int, c: int, d: int) -> bool:\n    \"\"\"Check if the sum of two random numbers is equal to the product of the other two random numbers.\"\"\"\n    nums = [a, b, c, d]\n    random.shuffle(nums)\n    return nums[0] + nums[1] == nums[2] * nums[3]",
        "solution_func": "def g():\n    return random.randint(1, 10), random.randint(1, 10), random.randint(1, 10), random.randint(1, 10)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if the sum of any row or column in the matrix is equal to the target.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    for col in zip(*matrix):\n        if sum(col) == target:\n            return True\n    return False\n\ndef g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 223,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if the sum of any row or column in the matrix is equal to the target.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    for col in zip(*matrix):\n        if sum(col) == target:\n            return True\n    return False",
        "solution_func": "def g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Find a path through the matrix that adds up to the target value.\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    def dfs(i, j, curr_sum):\n        if curr_sum == target:\n            return True\n        if i < 0 or i >= n or j < 0 or j >= m or curr_sum > target:\n            return False\n        curr_sum += matrix[i][j]\n        return dfs(i+1, j, curr_sum) or dfs(i, j+1, curr_sum)\n    return dfs(0, 0, 0)\ndef g(matrix: List[List[int]], target=15):\n    n = len(matrix)\n    m = len(matrix[0])\n    path = []\n    def dfs(i, j, curr_sum):\n        if curr_sum == target:\n            return True\n        if i < 0 or i >= n or j < 0 or j >= m or curr_sum > target:\n            return False\n        curr_sum += matrix[i][j]\n        path.append(matrix[i][j])\n        return dfs(i+1, j, curr_sum) or dfs(i, j+1, curr_sum)\n    found = dfs(0, 0, 0)\n    if found:\n        return path\n    else:\n        return None\nassert f(g())\n",
        "emb": null,
        "idx_generation": 224,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Find a path through the matrix that adds up to the target value.\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    def dfs(i, j, curr_sum):\n        if curr_sum == target:\n            return True\n        if i < 0 or i >= n or j < 0 or j >= m or curr_sum > target:\n            return False\n        curr_sum += matrix[i][j]\n        return dfs(i+1, j, curr_sum) or dfs(i, j+1, curr_sum)\n    return dfs(0, 0, 0)",
        "solution_func": "def g(matrix: List[List[int]], target=15):\n    n = len(matrix)\n    m = len(matrix[0])\n    path = []\n    def dfs(i, j, curr_sum):\n        if curr_sum == target:\n            return True\n        if i < 0 or i >= n or j < 0 or j >= m or curr_sum > target:\n            return False\n        curr_sum += matrix[i][j]\n        path.append(matrix[i][j])\n        return dfs(i+1, j, curr_sum) or dfs(i, j+1, curr_sum)\n    found = dfs(0, 0, 0)\n    if found:\n        return path\n    else:\n        return None",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    n = len(nums)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums: List[int], target=10):\n    n = len(nums)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return [nums[i], nums[j]]\n    return None\nassert f(g())\n",
        "emb": null,
        "idx_generation": 224,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    n = len(nums)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums: List[int], target=10):\n    n = len(nums)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return [nums[i], nums[j]]\n    return None",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find four numbers in the list that add up to the target value.\"\"\"\n    n = len(nums)\n    for i in range(n-3):\n        for j in range(i+1, n-2):\n            for k in range(j+1, n-1):\n                for l in range(k+1, n):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return True\n    return False\ndef g(nums: List[int], target=100):\n    n = len(nums)\n    for i in range(n-3):\n        for j in range(i+1, n-2):\n            for k in range(j+1, n-1):\n                for l in range(k+1, n):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return [nums[i], nums[j], nums[k], nums[l]]\n    return None\nassert f(g())\n",
        "emb": null,
        "idx_generation": 224,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find four numbers in the list that add up to the target value.\"\"\"\n    n = len(nums)\n    for i in range(n-3):\n        for j in range(i+1, n-2):\n            for k in range(j+1, n-1):\n                for l in range(k+1, n):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return True\n    return False",
        "solution_func": "def g(nums: List[int], target=100):\n    n = len(nums)\n    for i in range(n-3):\n        for j in range(i+1, n-2):\n            for k in range(j+1, n-1):\n                for l in range(k+1, n):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return [nums[i], nums[j], nums[k], nums[l]]\n    return None",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=3, b=4) -> bool:\n    \"\"\"Check if the sum of two numbers raised to the power of n is equal to the sum of two other numbers raised to the power of n+1\"\"\"\n    return math.pow(a, n) + math.pow(b, n) == math.pow(a, n+1) + math.pow(b, n+1)\n\ndef g(a=3, b=4):\n    return a + b\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 224,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=3, b=4) -> bool:\n    \"\"\"Check if the sum of two numbers raised to the power of n is equal to the sum of two other numbers raised to the power of n+1\"\"\"\n    return math.pow(a, n) + math.pow(b, n) == math.pow(a, n+1) + math.pow(b, n+1)",
        "solution_func": "def g(a=3, b=4):\n    return a + b",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=7) -> bool:\n    \"\"\"Check if the string s is a palindrome and the sum of its digits is equal to n\"\"\"\n    return s == s[::-1] and sum(int(d) for d in s) == n\n\ndef g(n=7):\n    return str(n) * n\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 224,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=7) -> bool:\n    \"\"\"Check if the string s is a palindrome and the sum of its digits is equal to n\"\"\"\n    return s == s[::-1] and sum(int(d) for d in s) == n",
        "solution_func": "def g(n=7):\n    return str(n) * n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\nimport random\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list contains a prime number that is greater than the sum of all other numbers in the list\"\"\"\n    primes = [num for num in lst if all(num % i != 0 for i in range(2, int(math.sqrt(num)) + 1))]\n    return any(p > sum(lst) - p for p in primes)\n\ndef g():\n    return [random.randint(1, 100) for _ in range(10)]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 224,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nimport random\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list contains a prime number that is greater than the sum of all other numbers in the list\"\"\"\n    primes = [num for num in lst if all(num % i != 0 for i in range(2, int(math.sqrt(num)) + 1))]\n    return any(p > sum(lst) - p for p in primes)",
        "solution_func": "def g():\n    return [random.randint(1, 100) for _ in range(10)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], sum_row=35) -> bool:\n    \"\"\"Find a matrix where the sum of each row is equal to sum_row\"\"\"\n    return all((sum(row) == sum_row for row in matrix))\ndef g(sum_row=35):\n    return [[i for i in range(1, 6)]] * 5\nassert f(g())\n",
        "emb": null,
        "idx_generation": 224,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], sum_row=35) -> bool:\n    \"\"\"Find a matrix where the sum of each row is equal to sum_row\"\"\"\n    return all((sum(row) == sum_row for row in matrix))",
        "solution_func": "def g(sum_row=35):\n    return [[i for i in range(1, 6)]] * 5",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\ndef f(nums: List[int], target=100, product=39916800) -> bool:\n    \"\"\"Find a list of numbers whose product is equal to product and sum is equal to target\"\"\"\n    return sum(nums) == target and math.prod(nums) == product\ndef g(target=100, product=39916800):\n    return [1] * (target - 1) + [target - (target - 1)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 224,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\ndef f(nums: List[int], target=100, product=39916800) -> bool:\n    \"\"\"Find a list of numbers whose product is equal to product and sum is equal to target\"\"\"\n    return sum(nums) == target and math.prod(nums) == product",
        "solution_func": "def g(target=100, product=39916800):\n    return [1] * (target - 1) + [target - (target - 1)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(strings: List[str], substring='python', count=3) -> bool:\n    \"\"\"Find a list of strings that contain at least count occurrences of substring\"\"\"\n    return sum((string.count(substring) >= count for string in strings)) == len(strings)\ndef g(substring='python', count=3):\n    return [substring] * count\nassert f(g())\n",
        "emb": null,
        "idx_generation": 224,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(strings: List[str], substring='python', count=3) -> bool:\n    \"\"\"Find a list of strings that contain at least count occurrences of substring\"\"\"\n    return sum((string.count(substring) >= count for string in strings)) == len(strings)",
        "solution_func": "def g(substring='python', count=3):\n    return [substring] * count",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=8) -> bool:\n    \"\"\"Find two numbers in the array that sum up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr: List[int]):\n    return arr\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 224,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=8) -> bool:\n    \"\"\"Find two numbers in the array that sum up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(arr: List[int]):\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any((x + y == target for x in numbers for y in numbers if x != y))\ndef g(target=50):\n    return [10, 20, 30, 40, 50]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 225,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any((x + y == target for x in numbers for y in numbers if x != y))",
        "solution_func": "def g(target=50):\n    return [10, 20, 30, 40, 50]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Check if the sum of the elements in each row is equal to the target value.\"\"\"\n    return all((sum(row) == target for row in matrix))\ndef g(target=100):\n    return [[10, 20, 30, 40], [50, 60, 70], [80, 90, 100]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 225,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Check if the sum of the elements in each row is equal to the target value.\"\"\"\n    return all((sum(row) == target for row in matrix))",
        "solution_func": "def g(target=100):\n    return [[10, 20, 30, 40], [50, 60, 70], [80, 90, 100]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, target='python', case_sensitive=True) -> bool:\n    \"\"\"Check if the target string is present in the given string.\"\"\"\n    if case_sensitive:\n        return target in string\n    else:\n        return target.lower() in string.lower()\ndef g(target='python', case_sensitive=True):\n    return \"I love Python programming\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 225,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, target='python', case_sensitive=True) -> bool:\n    \"\"\"Check if the target string is present in the given string.\"\"\"\n    if case_sensitive:\n        return target in string\n    else:\n        return target.lower() in string.lower()",
        "solution_func": "def g(target='python', case_sensitive=True):\n    return \"I love Python programming\"",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if n is in the list lst and if the number of occurrences of n is greater than or equal to 2.\"\"\"\n    return lst.count(n) >= 2\ndef g(lst=[1, 2, 3, 4, 5]):\n    return random.choice(lst)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 225,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if n is in the list lst and if the number of occurrences of n is greater than or equal to 2.\"\"\"\n    return lst.count(n) >= 2",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    return random.choice(lst)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, num=3, char='a') -> bool:\n    \"\"\"Check if the character 'char' appears exactly 'num' times in the string 's'.\"\"\"\n    return s.count(char) == num\ndef g(num=3, char='a'):\n    return char * num\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 225,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, num=3, char='a') -> bool:\n    \"\"\"Check if the character 'char' appears exactly 'num' times in the string 's'.\"\"\"\n    return s.count(char) == num",
        "solution_func": "def g(num=3, char='a'):\n    return char * num",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(dt: datetime, year=2022) -> bool:\n    \"\"\"Check if the year of the datetime object 'dt' is greater than or equal to 'year'.\"\"\"\n    return dt.year >= year\ndef g(year=2022):\n    return datetime(year, 1, 1)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "idx_generation": 225,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(dt: datetime, year=2022) -> bool:\n    \"\"\"Check if the year of the datetime object 'dt' is greater than or equal to 'year'.\"\"\"\n    return dt.year >= year",
        "solution_func": "def g(year=2022):\n    return datetime(year, 1, 1)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, target: int=20) -> bool:\n    \"\"\"Determine if a number is a perfect square and if its square root is equal to the target.\"\"\"\n    return n > 0 and sqrt(n) == target\ndef g(target: int=20):\n    return target ** 2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 225,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, target: int=20) -> bool:\n    \"\"\"Determine if a number is a perfect square and if its square root is equal to the target.\"\"\"\n    return n > 0 and sqrt(n) == target",
        "solution_func": "def g(target: int=20):\n    return target ** 2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, target: str=\"world\") -> bool:\n    \"\"\"Check if a string is a palindrome and if it matches the target.\"\"\"\n    return s.lower() == s.lower()[::-1] and s == target\ndef g(target: str=\"world\"):\n    return target\nassert f(g())\n",
        "emb": null,
        "idx_generation": 225,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target: str=\"world\") -> bool:\n    \"\"\"Check if a string is a palindrome and if it matches the target.\"\"\"\n    return s.lower() == s.lower()[::-1] and s == target",
        "solution_func": "def g(target: str=\"world\"):\n    return target",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(a: int, b: int, c: int, target: int=0) -> bool:\n    \"\"\"Check if the sum of three numbers is equal to the target.\"\"\"\n    return a + b + c == target\ndef g(target: int=0):\n    a = 1\n    b = 2\n    c = target - a - b\n    return a, b, c\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 225,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(a: int, b: int, c: int, target: int=0) -> bool:\n    \"\"\"Check if the sum of three numbers is equal to the target.\"\"\"\n    return a + b + c == target",
        "solution_func": "def g(target: int=0):\n    a = 1\n    b = 2\n    c = target - a - b\n    return a, b, c",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\ndef f(x: float, y: float, z: float, tolerance=1e-6) -> bool:\n    \"\"\"Check if the given values are within a certain tolerance of each other.\"\"\"\n    return math.isclose(x, y, rel_tol=tolerance) and math.isclose(y, z, rel_tol=tolerance) and math.isclose(z, x, rel_tol=tolerance)\ndef g(x=3.14, y=3.14159, z=3.1416, tolerance=1e-6):\n    return x, y, z\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 225,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\ndef f(x: float, y: float, z: float, tolerance=1e-6) -> bool:\n    \"\"\"Check if the given values are within a certain tolerance of each other.\"\"\"\n    return math.isclose(x, y, rel_tol=tolerance) and math.isclose(y, z, rel_tol=tolerance) and math.isclose(z, x, rel_tol=tolerance)",
        "solution_func": "def g(x=3.14, y=3.14159, z=3.1416, tolerance=1e-6):\n    return x, y, z",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=42) -> bool:\n    \"\"\"Check if the target value is present in any row or column of the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    for col in zip(*matrix):\n        if target in col:\n            return True\n    return False\n\ndef g(matrix: List[List[int]], target=42):\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 226,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=42) -> bool:\n    \"\"\"Check if the target value is present in any row or column of the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    for col in zip(*matrix):\n        if target in col:\n            return True\n    return False",
        "solution_func": "def g(matrix: List[List[int]], target=42):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"Check if the given substring is present in the given string.\"\"\"\n    return substr in string\n\ndef g(string: str, substr='python'):\n    return string\nassert f(g())\n",
        "emb": null,
        "idx_generation": 226,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"Check if the given substring is present in the given string.\"\"\"\n    return substr in string",
        "solution_func": "def g(string: str, substr='python'):\n    return string",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums: List[int], target=0):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 226,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums: List[int], target=0):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=5, m=3, words=['apple', 'banana', 'cherry', 'date', 'elderberry'], letters=['a', 'b', 'c', 'd', 'e']) -> bool:\n    \"\"\"Given a list of words and a list of letters, find if it is possible to form a string s of length n by selecting m words from the list and concatenating their first m letters, such that each of the selected words contains all the letters in the list\"\"\"\n    selected_words = []\n    for word in words:\n        if all(letter in word for letter in letters):\n            selected_words.append(word)\n    return len(selected_words) >= m and len(''.join([word[:m] for word in selected_words])) == n\ndef g(n=5, m=3, words=['apple', 'banana', 'cherry', 'date', 'elderberry'], letters=['a', 'b', 'c', 'd', 'e']):\n    selected_words = []\n    for word in words:\n        if all(letter in word for letter in letters):\n            selected_words.append(word)\n    return ''.join([word[:m] for word in selected_words])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 226,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=5, m=3, words=['apple', 'banana', 'cherry', 'date', 'elderberry'], letters=['a', 'b', 'c', 'd', 'e']) -> bool:\n    \"\"\"Given a list of words and a list of letters, find if it is possible to form a string s of length n by selecting m words from the list and concatenating their first m letters, such that each of the selected words contains all the letters in the list\"\"\"\n    selected_words = []\n    for word in words:\n        if all(letter in word for letter in letters):\n            selected_words.append(word)\n    return len(selected_words) >= m and len(''.join([word[:m] for word in selected_words])) == n",
        "solution_func": "def g(n=5, m=3, words=['apple', 'banana', 'cherry', 'date', 'elderberry'], letters=['a', 'b', 'c', 'd', 'e']):\n    selected_words = []\n    for word in words:\n        if all(letter in word for letter in letters):\n            selected_words.append(word)\n    return ''.join([word[:m] for word in selected_words])",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10, row_sum=15, col_sum=10) -> bool:\n    \"\"\"Given a matrix, check if it is possible to obtain the target sum by selecting one number from each row and one number from each column, such that the sum of each row is equal to row_sum and the sum of each column is equal to col_sum\"\"\"\n    for row in matrix:\n        if sum(row) != row_sum:\n            return False\n    for col in zip(*matrix):\n        if sum(col) != col_sum:\n            return False\n    return True\ndef g(target=10, row_sum=15, col_sum=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 226,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10, row_sum=15, col_sum=10) -> bool:\n    \"\"\"Given a matrix, check if it is possible to obtain the target sum by selecting one number from each row and one number from each column, such that the sum of each row is equal to row_sum and the sum of each column is equal to col_sum\"\"\"\n    for row in matrix:\n        if sum(row) != row_sum:\n            return False\n    for col in zip(*matrix):\n        if sum(col) != col_sum:\n            return False\n    return True",
        "solution_func": "def g(target=10, row_sum=15, col_sum=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of numbers, find if it is possible to obtain the target sum by selecting a contiguous subarray from the list\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 226,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of numbers, find if it is possible to obtain the target sum by selecting a contiguous subarray from the list\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target value, find a pair of numbers in the list whose sum is equal to the target value.\nReturn True if such a pair exists, False otherwise.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [2, 8, 4, 6]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 226,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target value, find a pair of numbers in the list whose sum is equal to the target value.\nReturn True if such a pair exists, False otherwise.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=10):\n    return [2, 8, 4, 6]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, pattern='abc') -> bool:\n    \"\"\"Given a string and a pattern, determine if the pattern can be formed by rearranging the characters of the string.\nReturn True if the pattern can be formed, False otherwise.\"\"\"\n    return sorted(s) == sorted(pattern)\ndef g(pattern='abc'):\n    return 'cab'\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 226,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, pattern='abc') -> bool:\n    \"\"\"Given a string and a pattern, determine if the pattern can be formed by rearranging the characters of the string.\nReturn True if the pattern can be formed, False otherwise.\"\"\"\n    return sorted(s) == sorted(pattern)",
        "solution_func": "def g(pattern='abc'):\n    return 'cab'",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=42) -> bool:\n    \"\"\"Given a matrix (2D list of integers) and a target value, determine if there exists a row or column in the matrix\nwhose sum is equal to the target value. Return True if such a row or column exists, False otherwise.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    row_sums = [sum(matrix[i]) for i in range(rows)]\n    col_sums = [sum(matrix[i][j] for i in range(rows)) for j in range(cols)]\n    return target in row_sums or target in col_sums\ndef g(target=42):\n    return [[10, 20, 12],\n            [5, 10, 15],\n            [2, 4, 6]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 226,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=42) -> bool:\n    \"\"\"Given a matrix (2D list of integers) and a target value, determine if there exists a row or column in the matrix\nwhose sum is equal to the target value. Return True if such a row or column exists, False otherwise.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    row_sums = [sum(matrix[i]) for i in range(rows)]\n    col_sums = [sum(matrix[i][j] for i in range(rows)) for j in range(cols)]\n    return target in row_sums or target in col_sums",
        "solution_func": "def g(target=42):\n    return [[10, 20, 12],\n            [5, 10, 15],\n            [2, 4, 6]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], a=100, b=200, odd_count=5) -> bool:\n    \"\"\"Check if there are at least odd_count odd numbers between a and b (inclusive) in the given list\"\"\"\n    return sum(1 for n in nums if a <= n <= b and n % 2 != 0) >= odd_count\ndef g(a=100, b=200, odd_count=5):\n    return [n for n in range(a, b + 1) if n % 2 != 0]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 226,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], a=100, b=200, odd_count=5) -> bool:\n    \"\"\"Check if there are at least odd_count odd numbers between a and b (inclusive) in the given list\"\"\"\n    return sum(1 for n in nums if a <= n <= b and n % 2 != 0) >= odd_count",
        "solution_func": "def g(a=100, b=200, odd_count=5):\n    return [n for n in range(a, b + 1) if n % 2 != 0]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, target=0.5) -> bool:\n    \"\"\"Given three floating-point numbers x, y, and z, find an integer n such that \n    x^n + y^n = z^n, where n > 1.\n    Sample Input:\n    x = 2.5\n    y = 3.2\n    z = 7.1\n    Sample Output:\n    n = 2\"\"\"\n    return abs(x**target + y**target - z**target) < 0.0001\n\ndef g(x=2.5, y=3.2, z=7.1):\n    return math.log(z, max(x, y))\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 227,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, target=0.5) -> bool:\n    \"\"\"Given three floating-point numbers x, y, and z, find an integer n such that \n    x^n + y^n = z^n, where n > 1.\n    Sample Input:\n    x = 2.5\n    y = 3.2\n    z = 7.1\n    Sample Output:\n    n = 2\"\"\"\n    return abs(x**target + y**target - z**target) < 0.0001",
        "solution_func": "def g(x=2.5, y=3.2, z=7.1):\n    return math.log(z, max(x, y))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Given an integer n, find a list of prime numbers that can be summed up to n.\n    Sample Input:\n    n = 20\n    Sample Output:\n    [2, 3, 5, 7, 11]\"\"\"\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    def prime_sum(n):\n        if n == 0:\n            return []\n        for prime in primes:\n            if n - prime >= 0:\n                result = prime_sum(n - prime)\n                if result is not None:\n                    return [prime] + result\n        return None\n\n    return prime_sum(n) is not None\n\ndef g(n=20, primes=[2, 3, 5, 7, 11, 13]):\n    return [prime for prime in primes if prime <= n]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 227,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Given an integer n, find a list of prime numbers that can be summed up to n.\n    Sample Input:\n    n = 20\n    Sample Output:\n    [2, 3, 5, 7, 11]\"\"\"\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    def prime_sum(n):\n        if n == 0:\n            return []\n        for prime in primes:\n            if n - prime >= 0:\n                result = prime_sum(n - prime)\n                if result is not None:\n                    return [prime] + result\n        return None\n\n    return prime_sum(n) is not None",
        "solution_func": "def g(n=20, primes=[2, 3, 5, 7, 11, 13]):\n    return [prime for prime in primes if prime <= n]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: list, target=10) -> bool:\n    \"\"\"Given a list x with integers, find a subset of x that sums up to the target value.\n    Sample Input:\n    x = [1, 2, 3, 4, 5]\n    Sample Output:\n    [3, 5]\"\"\"\n    def subset_sum(numbers, target, partial=[]):\n        s = sum(partial)\n\n        if s == target:\n            return partial\n\n        if s > target:\n            return None\n\n        for i in range(len(numbers)):\n            n = numbers[i]\n            remaining = numbers[i+1:]\n            result = subset_sum(remaining, target, partial + [n])\n            if result:\n                return result\n\n        return None\n\n    return subset_sum(x, target) is not None\n\ndef g(x=[1, 2, 3, 4, 5], target=10):\n    return random.sample(x, random.randint(1, len(x)))\n\nassert f(g())",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 227,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(x: list, target=10) -> bool:\n    \"\"\"Given a list x with integers, find a subset of x that sums up to the target value.\n    Sample Input:\n    x = [1, 2, 3, 4, 5]\n    Sample Output:\n    [3, 5]\"\"\"\n    def subset_sum(numbers, target, partial=[]):\n        s = sum(partial)\n\n        if s == target:\n            return partial\n\n        if s > target:\n            return None\n\n        for i in range(len(numbers)):\n            n = numbers[i]\n            remaining = numbers[i+1:]\n            result = subset_sum(remaining, target, partial + [n])\n            if result:\n                return result\n\n        return None\n\n    return subset_sum(x, target) is not None",
        "solution_func": "def g(x=[1, 2, 3, 4, 5], target=10):\n    return random.sample(x, random.randint(1, len(x)))",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=4, target=2) -> bool:\n    \"\"\"Given a string s, check if there are at least n distinct substrings of length target.\n    Sample Input:\n    `\"ababab\"`\n    Sample Output:\n    `True`\"\"\"\n    substrings = set()\n    for i in range(len(s) - target + 1):\n        substrings.add(s[i:i+target])\n    return len(substrings) >= n\ndef g(n=4, target=2):\n    return \"a\" * target + \"b\" * target\nassert f(g())\n",
        "emb": null,
        "idx_generation": 227,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=4, target=2) -> bool:\n    \"\"\"Given a string s, check if there are at least n distinct substrings of length target.\n    Sample Input:\n    `\"ababab\"`\n    Sample Output:\n    `True`\"\"\"\n    substrings = set()\n    for i in range(len(s) - target + 1):\n        substrings.add(s[i:i+target])\n    return len(substrings) >= n",
        "solution_func": "def g(n=4, target=2):\n    return \"a\" * target + \"b\" * target",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], n=3, target=5) -> bool:\n    \"\"\"Given a list of integers arr, check if there exists a sublist of length n whose sum is equal to target.\n    Sample Input:\n    `[2, 3, 4, 5, 6, 7]`\n    Sample Output:\n    `True`\"\"\"\n    for i in range(len(arr) - n + 1):\n        if sum(arr[i:i+n]) == target:\n            return True\n    return False\ndef g(n=3, target=5):\n    return [1] * n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 227,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], n=3, target=5) -> bool:\n    \"\"\"Given a list of integers arr, check if there exists a sublist of length n whose sum is equal to target.\n    Sample Input:\n    `[2, 3, 4, 5, 6, 7]`\n    Sample Output:\n    `True`\"\"\"\n    for i in range(len(arr) - n + 1):\n        if sum(arr[i:i+n]) == target:\n            return True\n    return False",
        "solution_func": "def g(n=3, target=5):\n    return [1] * n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Given a matrix (list of lists) of integers, check if there exists a row such that the sum of its elements is equal to target.\n    Sample Input:\n    `[[1, 2, 3], [4, 5, 6], [7, 8, 9]]`\n    Sample Output:\n    `True`\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 227,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Given a matrix (list of lists) of integers, check if there exists a row such that the sum of its elements is equal to target.\n    Sample Input:\n    `[[1, 2, 3], [4, 5, 6], [7, 8, 9]]`\n    Sample Output:\n    `True`\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False",
        "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(s: str, pattern='a*b*c*') -> bool:\n    \"\"\"Check if string s matches the given pattern\"\"\"\n    return bool(re.fullmatch(pattern, s))\ndef g(pattern='a*b*c*'):\n    return pattern.replace('*', '')\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 227,
        "target_skills": null,
        "problem_func": "from typing import*\nimport re\n\ndef f(s: str, pattern='a*b*c*') -> bool:\n    \"\"\"Check if string s matches the given pattern\"\"\"\n    return bool(re.fullmatch(pattern, s))",
        "solution_func": "def g(pattern='a*b*c*'):\n    return pattern.replace('*', '')",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two distinct numbers from the list that sum up to the target\"\"\"\n    return any(sum(comb) == target for comb in combinations(nums, 2))\ndef g(target=10):\n    return [1, target-1]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 227,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two distinct numbers from the list that sum up to the target\"\"\"\n    return any(sum(comb) == target for comb in combinations(nums, 2))",
        "solution_func": "def g(target=10):\n    return [1, target-1]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport datetime\n\ndef f(year: int, month=12, day=31) -> bool:\n    \"\"\"Check if the given date is the last day of the month\"\"\"\n    date = datetime.date(year, month, day)\n    return date == date.replace(day=date.day).replace(day=1) - datetime.timedelta(days=1)\ndef g(year: int):\n    return year, 12, 31\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 227,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(year: int, month=12, day=31) -> bool:\n    \"\"\"Check if the given date is the last day of the month\"\"\"\n    date = datetime.date(year, month, day)\n    return date == date.replace(day=date.day).replace(day=1) - datetime.timedelta(days=1)",
        "solution_func": "def g(year: int):\n    return year, 12, 31",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, substr='abc', index=3) -> bool:\n    \"\"\"Find a string whose *last* index of substr is index\"\"\"\n    return s.rindex(substr) == index\ndef g(substr='abc', index=3):\n    i = ord('A')\n    while chr(i) in s:\n        i += 1\n    return s + chr(i) * index + substr\nassert f(g())\n",
        "emb": null,
        "idx_generation": 227,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr='abc', index=3) -> bool:\n    \"\"\"Find a string whose *last* index of substr is index\"\"\"\n    return s.rindex(substr) == index",
        "solution_func": "def g(substr='abc', index=3):\n    i = ord('A')\n    while chr(i) in s:\n        i += 1\n    return s + chr(i) * index + substr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a string s contains all vowels at least n times.\"\"\"\n    vowels = 'aeiou'\n    return all((s.count(vowel) >= n for vowel in vowels))\ndef g(n=5):\n    vowels = 'aeiou'\n    return ''.join([vowel * n for vowel in vowels])\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 228,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a string s contains all vowels at least n times.\"\"\"\n    vowels = 'aeiou'\n    return all((s.count(vowel) >= n for vowel in vowels))",
        "solution_func": "def g(n=5):\n    vowels = 'aeiou'\n    return ''.join([vowel * n for vowel in vowels])",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Check if the given list contains two elements that add up to 10.\"\"\"\n    return any((li[i] + li[j] == 10 for i in range(len(li)) for j in range(i+1, len(li))))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 228,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Check if the given list contains two elements that add up to 10.\"\"\"\n    return any((li[i] + li[j] == 10 for i in range(len(li)) for j in range(i+1, len(li))))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    return 'racecar'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 228,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g():\n    return 'racecar'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(num: int, target=8, factors=[2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if a number can be expressed as the sum of any combination of the given factors.\"\"\"\n    from itertools import combinations_with_replacement\n    for n in range(len(factors) + 1):\n        for c in combinations_with_replacement(factors, n):\n            if sum(c) == target:\n                return True\n    return False\ndef g(target=8, factors=[2, 3, 4, 5, 6]):\n    return target\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 228,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(num: int, target=8, factors=[2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if a number can be expressed as the sum of any combination of the given factors.\"\"\"\n    from itertools import combinations_with_replacement\n    for n in range(len(factors) + 1):\n        for c in combinations_with_replacement(factors, n):\n            if sum(c) == target:\n                return True\n    return False",
        "solution_func": "def g(target=8, factors=[2, 3, 4, 5, 6]):\n    return target",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=0, n=3) -> bool:\n    \"\"\"Check if there exists a sublist of length n in the given list whose sum is equal to the target.\"\"\"\n    from itertools import combinations\n    for c in combinations(arr, n):\n        if sum(c) == target:\n            return True\n    return False\ndef g(target=0, n=3):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 228,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=0, n=3) -> bool:\n    \"\"\"Check if there exists a sublist of length n in the given list whose sum is equal to the target.\"\"\"\n    from itertools import combinations\n    for c in combinations(arr, n):\n        if sum(c) == target:\n            return True\n    return False",
        "solution_func": "def g(target=0, n=3):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc', n=2) -> bool:\n    \"\"\"Check if a substring appears at least n times in the given string.\"\"\"\n    count = s.count(substring)\n    return count >= n\ndef g(substring='abc', n=2):\n    return \"abcabcabc\"\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 228,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='abc', n=2) -> bool:\n    \"\"\"Check if a substring appears at least n times in the given string.\"\"\"\n    count = s.count(substring)\n    return count >= n",
        "solution_func": "def g(substring='abc', n=2):\n    return \"abcabcabc\"",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exists a path from the top-left corner to the bottom-right corner of the matrix, such that the sum of all elements along the path is equal to the target.\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    def dfs(i, j, curr_sum):\n        if i == m-1 and j == n-1:\n            return curr_sum + matrix[i][j] == target\n        if i >= m or j >= n:\n            return False\n        return dfs(i+1, j, curr_sum + matrix[i][j]) or dfs(i, j+1, curr_sum + matrix[i][j])\n    return dfs(0, 0, 0)\ndef g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target-36]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 228,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exists a path from the top-left corner to the bottom-right corner of the matrix, such that the sum of all elements along the path is equal to the target.\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    def dfs(i, j, curr_sum):\n        if i == m-1 and j == n-1:\n            return curr_sum + matrix[i][j] == target\n        if i >= m or j >= n:\n            return False\n        return dfs(i+1, j, curr_sum + matrix[i][j]) or dfs(i, j+1, curr_sum + matrix[i][j])\n    return dfs(0, 0, 0)",
        "solution_func": "def g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target-36]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two distinct indices i and j in the list such that nums[i] + nums[j] == target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False\ndef g(target=10):\n    return [1, 2, 3, target-6]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 228,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two distinct indices i and j in the list such that nums[i] + nums[j] == target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, target-6]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if the target word can be formed by concatenating words in the list, without any duplicates.\"\"\"\n    def dfs(curr_word, remaining_words):\n        if curr_word == target:\n            return True\n        for word in remaining_words:\n            if target.startswith(curr_word+word):\n                if dfs(curr_word+word, remaining_words.difference({word})):\n                    return True\n        return False\n    return dfs('', set(words))\ndef g(target='python'):\n    return ['py', 'th', 'on']\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 228,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if the target word can be formed by concatenating words in the list, without any duplicates.\"\"\"\n    def dfs(curr_word, remaining_words):\n        if curr_word == target:\n            return True\n        for word in remaining_words:\n            if target.startswith(curr_word+word):\n                if dfs(curr_word+word, remaining_words.difference({word})):\n                    return True\n        return False\n    return dfs('', set(words))",
        "solution_func": "def g(target='python'):\n    return ['py', 'th', 'on']",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix of integers, determine if there exists a row where the sum of the elements is even.\"\"\"\n    return any(sum(row) % 2 == 0 for row in matrix)\n\ndef g(n=3, m=3, min_val=0, max_val=10):\n    matrix = [[random.randint(min_val, max_val) for _ in range(m)] for _ in range(n)]\n    return matrix\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 228,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix of integers, determine if there exists a row where the sum of the elements is even.\"\"\"\n    return any(sum(row) % 2 == 0 for row in matrix)",
        "solution_func": "def g(n=3, m=3, min_val=0, max_val=10):\n    matrix = [[random.randint(min_val, max_val) for _ in range(m)] for _ in range(n)]\n    return matrix",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, n: int = 3, m: int = 4) -> bool:\n    \"\"\"Check if the sum of each column in a matrix is divisible by n.\"\"\"\n    column_sums = np.sum(matrix, axis=0)\n    return all((s % n == 0 for s in column_sums))\n\ndef g(n: int = 3, m: int = 4):\n    return np.random.randint(1, 10, size=(n, m))\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 229,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, n: int = 3, m: int = 4) -> bool:\n    \"\"\"Check if the sum of each column in a matrix is divisible by n.\"\"\"\n    column_sums = np.sum(matrix, axis=0)\n    return all((s % n == 0 for s in column_sums))",
        "solution_func": "def g(n: int = 3, m: int = 4):\n    return np.random.randint(1, 10, size=(n, m))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(perm: tuple, string: str = 'abcde') -> bool:\n    \"\"\"Check if a permutation of characters in a string results in a specific order.\"\"\"\n    perm_string = ''.join(perm)\n    return perm_string == string\n\ndef g(string: str = 'abcde'):\n    return tuple(permutations(string))\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 229,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(perm: tuple, string: str = 'abcde') -> bool:\n    \"\"\"Check if a permutation of characters in a string results in a specific order.\"\"\"\n    perm_string = ''.join(perm)\n    return perm_string == string",
        "solution_func": "def g(string: str = 'abcde'):\n    return tuple(permutations(string))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, weekday: int = 4) -> bool:\n    \"\"\"Check if a given date falls on a specific weekday.\"\"\"\n    return date.weekday() == weekday\n\ndef g(weekday: int = 4):\n    date = datetime.date.today()\n    while date.weekday() != weekday:\n        date += datetime.timedelta(days=1)\n    return date\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 229,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, weekday: int = 4) -> bool:\n    \"\"\"Check if a given date falls on a specific weekday.\"\"\"\n    return date.weekday() == weekday",
        "solution_func": "def g(weekday: int = 4):\n    date = datetime.date.today()\n    while date.weekday() != weekday:\n        date += datetime.timedelta(days=1)\n    return date",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(num_list: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 229,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num_list: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, char='a') -> bool:\n    \"\"\"Check if the given character is the first letter of the word.\"\"\"\n    return word[0] == char\n\ndef g(char='a'):\n    return \"apple\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 229,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str, char='a') -> bool:\n    \"\"\"Check if the given character is the first letter of the word.\"\"\"\n    return word[0] == char",
        "solution_func": "def g(char='a'):\n    return \"apple\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], length=5) -> bool:\n    \"\"\"Check if the sum of the first 'length' numbers in the list is greater than 100.\"\"\"\n    return sum(num_list[:length]) > 100\n\ndef g(length=5):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 229,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num_list: List[int], length=5) -> bool:\n    \"\"\"Check if the sum of the first 'length' numbers in the list is greater than 100.\"\"\"\n    return sum(num_list[:length]) > 100",
        "solution_func": "def g(length=5):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], target=100, k=3) -> bool:\n    \"\"\"Check if there are k numbers in x that add up to target\"\"\"\n    from itertools import combinations\n    for comb in combinations(x, k):\n        if sum(comb) == target:\n            return True\n    return False\n\ndef g(target=100, k=3):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 229,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(x: List[int], target=100, k=3) -> bool:\n    \"\"\"Check if there are k numbers in x that add up to target\"\"\"\n    from itertools import combinations\n    for comb in combinations(x, k):\n        if sum(comb) == target:\n            return True\n    return False",
        "solution_func": "def g(target=100, k=3):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=3, t='abc') -> bool:\n    \"\"\"Check if there are n occurrences of t in s\"\"\"\n    return s.count(t) == n\n\ndef g(n=3, t='abc'):\n    return 'abcabcabcxyzabc'\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 229,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3, t='abc') -> bool:\n    \"\"\"Check if there are n occurrences of t in s\"\"\"\n    return s.count(t) == n",
        "solution_func": "def g(n=3, t='abc'):\n    return 'abcabcabcxyzabc'",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: List[int], t=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in x that add up to t\"\"\"\n    seen = set()\n    for num in x:\n        if t - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(t=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 229,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], t=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in x that add up to t\"\"\"\n    seen = set()\n    for num in x:\n        if t - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(t=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], p=3) -> bool:\n    \"\"\"Check if a number is a prime.\"\"\"\n    assert all((math.isprime(p) for p in primes)), 'Hint: primes must be a list of prime numbers'\n    return n in primes and primes.index(n) >= p\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], p=3):\n    return primes[p]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 229,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], p=3) -> bool:\n    \"\"\"Check if a number is a prime.\"\"\"\n    assert all((math.isprime(p) for p in primes)), 'Hint: primes must be a list of prime numbers'\n    return n in primes and primes.index(n) >= p",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], p=3):\n    return primes[p]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Sum to target\nGiven a list of integers, find a subset of the list that sums to the target value.\n\"\"\"\n    return sum(arr) == target\ndef g(target=100):\n    return [10, 20, 30, 40]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 230,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Sum to target\nGiven a list of integers, find a subset of the list that sums to the target value.\n\"\"\"\n    return sum(arr) == target",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]], rows=3, cols=3) -> bool:\n    \"\"\"Magic Square\nGiven a grid of integers, determine if it forms a magic square. A magic square is a square grid\nwhere the sums of the numbers in each row, each column, and both main diagonals are the same.\n\"\"\"\n    target_sum = sum(grid[0])\n    for row in grid:\n        if sum(row) != target_sum:\n            return False\n    for col in range(cols):\n        if sum(grid[row][col] for row in range(rows)) != target_sum:\n            return False\n    if sum(grid[i][i] for i in range(rows)) != target_sum:\n        return False\n    if sum(grid[i][cols-1-i] for i in range(rows)) != target_sum:\n        return False\n    return True\ndef g(rows=3, cols=3):\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 230,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(grid: List[List[int]], rows=3, cols=3) -> bool:\n    \"\"\"Magic Square\nGiven a grid of integers, determine if it forms a magic square. A magic square is a square grid\nwhere the sums of the numbers in each row, each column, and both main diagonals are the same.\n\"\"\"\n    target_sum = sum(grid[0])\n    for row in grid:\n        if sum(row) != target_sum:\n            return False\n    for col in range(cols):\n        if sum(grid[row][col] for row in range(rows)) != target_sum:\n            return False\n    if sum(grid[i][i] for i in range(rows)) != target_sum:\n        return False\n    if sum(grid[i][cols-1-i] for i in range(rows)) != target_sum:\n        return False\n    return True",
        "solution_func": "def g(rows=3, cols=3):\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Palindrome\nGiven a string, determine if it is a palindrome. A palindrome is a string that reads the same\nforwards and backwards.\n\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"level\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 230,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Palindrome\nGiven a string, determine if it is a palindrome. A palindrome is a string that reads the same\nforwards and backwards.\n\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"level\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(num: int, divisors=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if a number is divisible by all the given divisors\"\"\"\n    return all(num % d == 0 for d in divisors)\ndef g(divisors=[2, 3, 5, 7, 11, 13]):\n    import random\n    num = random.randint(1, 1000)\n    while not f(num, divisors):\n        num += 1\n    return num\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 230,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(num: int, divisors=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if a number is divisible by all the given divisors\"\"\"\n    return all(num % d == 0 for d in divisors)",
        "solution_func": "def g(divisors=[2, 3, 5, 7, 11, 13]):\n    import random\n    num = random.randint(1, 1000)\n    while not f(num, divisors):\n        num += 1\n    return num",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(word: str, vowels='aeiou') -> bool:\n    \"\"\"Check if all the vowels in the word are in alphabetical order\"\"\"\n    vowels_in_word = [c for c in word if c in vowels]\n    return vowels_in_word == sorted(vowels_in_word)\ndef g(vowels='aeiou'):\n    import random\n    word = ''.join(random.choices(vowels, k=10))\n    while not f(word, vowels):\n        word = ''.join(random.choices(vowels, k=10))\n    return word\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 230,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(word: str, vowels='aeiou') -> bool:\n    \"\"\"Check if all the vowels in the word are in alphabetical order\"\"\"\n    vowels_in_word = [c for c in word if c in vowels]\n    return vowels_in_word == sorted(vowels_in_word)",
        "solution_func": "def g(vowels='aeiou'):\n    import random\n    word = ''.join(random.choices(vowels, k=10))\n    while not f(word, vowels):\n        word = ''.join(random.choices(vowels, k=10))\n    return word",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(num: int, digits=[1, 3, 5, 7, 9]) -> bool:\n    \"\"\"Check if a number contains only the given digits\"\"\"\n    num_str = str(num)\n    return all(int(d) in digits for d in num_str)\ndef g(digits=[1, 3, 5, 7, 9]):\n    import random\n    num = random.randint(1, 1000)\n    while not f(num, digits):\n        num += 1\n    return num\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 230,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(num: int, digits=[1, 3, 5, 7, 9]) -> bool:\n    \"\"\"Check if a number contains only the given digits\"\"\"\n    num_str = str(num)\n    return all(int(d) in digits for d in num_str)",
        "solution_func": "def g(digits=[1, 3, 5, 7, 9]):\n    import random\n    num = random.randint(1, 1000)\n    while not f(num, digits):\n        num += 1\n    return num",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Given a square matrix, check if the sum of the elements in any of its submatrices of size n is divisible by n.\nSample Input:\nmatrix = [[1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9]]\nn = 2\nSample Output:\nTrue\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows - n + 1):\n        for j in range(cols - n + 1):\n            submatrix_sum = sum(sum(row[j:j+n]) for row in matrix[i:i+n])\n            if submatrix_sum % n == 0:\n                return True\n    return False\n\ndef g(n=3):\n    return [[i+j for j in range(n)] for i in range(n)]\n\nassert f(g(), n=2)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 230,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Given a square matrix, check if the sum of the elements in any of its submatrices of size n is divisible by n.\nSample Input:\nmatrix = [[1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9]]\nn = 2\nSample Output:\nTrue\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows - n + 1):\n        for j in range(cols - n + 1):\n            submatrix_sum = sum(sum(row[j:j+n]) for row in matrix[i:i+n])\n            if submatrix_sum % n == 0:\n                return True\n    return False",
        "solution_func": "def g(n=3):\n    return [[i+j for j in range(n)] for i in range(n)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if the word 'python' can be formed from the characters in the string s by rearranging them.\nSample Input:\ns = \"thpyno\"\nSample Output:\nTrue\"\"\"\n    count_s = {c: s.count(c) for c in set(s)}\n    count_word = {c: word.count(c) for c in set(word)}\n    return count_s == count_word\n\ndef g(word='python'):\n    return ''.join(sorted(word))\n\nassert f(g(), word='python')\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 230,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if the word 'python' can be formed from the characters in the string s by rearranging them.\nSample Input:\ns = \"thpyno\"\nSample Output:\nTrue\"\"\"\n    count_s = {c: s.count(c) for c in set(s)}\n    count_word = {c: word.count(c) for c in set(word)}\n    return count_s == count_word",
        "solution_func": "def g(word='python'):\n    return ''.join(sorted(word))",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a contiguous subarray of length k in the list nums that sums up to 0.\nSample Input:\nnums = [4, -2, 1, -3, 5, 6, -7, 8, 2]\nk = 4\nSample Output:\nFalse\"\"\"\n    prefix_sum = [0]\n    for num in nums:\n        prefix_sum.append(prefix_sum[-1] + num)\n    for i in range(k, len(prefix_sum)):\n        if prefix_sum[i] - prefix_sum[i-k] == 0:\n            return True\n    return False\n\ndef g(k=3):\n    return [1] * k\n\nassert not f(g(), k=4)\n\nassert f(g()) == True",
        "emb": null,
        "idx_generation": 230,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a contiguous subarray of length k in the list nums that sums up to 0.\nSample Input:\nnums = [4, -2, 1, -3, 5, 6, -7, 8, 2]\nk = 4\nSample Output:\nFalse\"\"\"\n    prefix_sum = [0]\n    for num in nums:\n        prefix_sum.append(prefix_sum[-1] + num)\n    for i in range(k, len(prefix_sum)):\n        if prefix_sum[i] - prefix_sum[i-k] == 0:\n            return True\n    return False",
        "solution_func": "def g(k=3):\n    return [1] * k",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(res: int, n=5, m=100) -> bool:\n    \"\"\"Find the result of calculating the sum of the first n natural numbers, then multiplying the result by m.\"\"\"\n    return res == (n*(n+1)//2) * m\ndef g(n=5, m=100):\n    return (n*(n+1)//2) * m\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 230,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(res: int, n=5, m=100) -> bool:\n    \"\"\"Find the result of calculating the sum of the first n natural numbers, then multiplying the result by m.\"\"\"\n    return res == (n*(n+1)//2) * m",
        "solution_func": "def g(n=5, m=100):\n    return (n*(n+1)//2) * m",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    return any(target - x in nums for x in nums)\ndef g(target=0):\n    nums = [1, 4, 7, -3, 9, 2, -2]\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 231,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    return any(target - x in nums for x in nums)",
        "solution_func": "def g(target=0):\n    nums = [1, 4, 7, -3, 9, 2, -2]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=18) -> bool:\n    \"\"\"Find the location of the target value in the matrix.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                return (i, j)\n    return None\ndef g(target=18):\n    matrix = [[3, 5, 2], [9, 8, 4], [6, 1, 7]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 231,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=18) -> bool:\n    \"\"\"Find the location of the target value in the matrix.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                return (i, j)\n    return None",
        "solution_func": "def g(target=18):\n    matrix = [[3, 5, 2], [9, 8, 4], [6, 1, 7]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='ca') -> bool:\n    \"\"\"Check if any word in the list starts with the given prefix.\"\"\"\n    return any(word.startswith(prefix) for word in words)\ndef g(prefix='ca'):\n    words = ['cat', 'car', 'bat', 'dog']\n    return words\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 231,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], prefix='ca') -> bool:\n    \"\"\"Check if any word in the list starts with the given prefix.\"\"\"\n    return any(word.startswith(prefix) for word in words)",
        "solution_func": "def g(prefix='ca'):\n    words = ['cat', 'car', 'bat', 'dog']\n    return words",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(num: int, lst=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]) -> bool:\n    \"\"\"Check if the number is in the Fibonacci sequence.\"\"\"\n    return num in lst\ndef g(lst=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]):\n    return lst\nassert f(g())\n",
        "emb": null,
        "idx_generation": 231,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int, lst=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]) -> bool:\n    \"\"\"Check if the number is in the Fibonacci sequence.\"\"\"\n    return num in lst",
        "solution_func": "def g(lst=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]):\n    return lst",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, d='abcdefghijklmnopqrstuvwxyz') -> bool:\n    \"\"\"Check if the given string contains all the letters of the alphabet.\"\"\"\n    return set(s.lower()) == set(d)\ndef g(d='abcdefghijklmnopqrstuvwxyz'):\n    return ''.join(d)\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 231,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, d='abcdefghijklmnopqrstuvwxyz') -> bool:\n    \"\"\"Check if the given string contains all the letters of the alphabet.\"\"\"\n    return set(s.lower()) == set(d)",
        "solution_func": "def g(d='abcdefghijklmnopqrstuvwxyz'):\n    return ''.join(d)",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is a multiple of any number in the list.\"\"\"\n    return any(n % num == 0 for num in lst)\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst\nassert f(g())\n",
        "emb": null,
        "idx_generation": 231,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is a multiple of any number in the list.\"\"\"\n    return any(n % num == 0 for num in lst)",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, char='a') -> bool:\n    \"\"\"Check if a specific character appears n times in a string.\"\"\"\n    return s.count(char) == n\ndef g(n=3, char='a'):\n    return char * n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 231,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3, char='a') -> bool:\n    \"\"\"Check if a specific character appears n times in a string.\"\"\"\n    return s.count(char) == n",
        "solution_func": "def g(n=3, char='a'):\n    return char * n",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Check if there are two distinct elements in the list that sum up to the target.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(target=0):\n    return [target//2, target//2 + 1]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 231,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Check if there are two distinct elements in the list that sum up to the target.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    return [target//2, target//2 + 1]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(n: int, a=1, b=10) -> bool:\n    \"\"\"Check if a number n is a perfect square between a and b (inclusive).\"\"\"\n    return a <= math.isqrt(n) ** 2 <= b\ndef g(a=1, b=10):\n    return int(math.sqrt(a))\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 231,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\ndef f(n: int, a=1, b=10) -> bool:\n    \"\"\"Check if a number n is a perfect square between a and b (inclusive).\"\"\"\n    return a <= math.isqrt(n) ** 2 <= b",
        "solution_func": "def g(a=1, b=10):\n    return int(math.sqrt(a))",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: list, target=5, length=10) -> bool:\n    \"\"\"Check if a list contains a certain number of elements equal to a given target value and has a specified length\"\"\"\n    return lst.count(target) == target and len(lst) == length\n\ndef g(target=5, length=10):\n    lst = [random.randint(1, 10) for _ in range(length)]\n    return lst\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 231,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(lst: list, target=5, length=10) -> bool:\n    \"\"\"Check if a list contains a certain number of elements equal to a given target value and has a specified length\"\"\"\n    return lst.count(target) == target and len(lst) == length",
        "solution_func": "def g(target=5, length=10):\n    lst = [random.randint(1, 10) for _ in range(length)]\n    return lst",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: list, target_sum=100) -> bool:\n    \"\"\"Given a list of numbers, determine if there exists a subset whose sum is equal to the target_sum.\"\"\"\n    import itertools\n    return any((sum(subset) == target_sum for r in range(len(numbers)+1) for subset in itertools.combinations(numbers, r)))\ndef g(target_sum=100):\n    return [10, 20, 30, 40, 50, 60]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 232,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(numbers: list, target_sum=100) -> bool:\n    \"\"\"Given a list of numbers, determine if there exists a subset whose sum is equal to the target_sum.\"\"\"\n    import itertools\n    return any((sum(subset) == target_sum for r in range(len(numbers)+1) for subset in itertools.combinations(numbers, r)))",
        "solution_func": "def g(target_sum=100):\n    return [10, 20, 30, 40, 50, 60]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, vowels='aeiou') -> bool:\n    \"\"\"Check if all the vowels in a given string are in the specified list of vowels.\"\"\"\n    return all((c in vowels for c in s.lower() if c in vowels))\ndef g(vowels='aeiou'):\n    return 'Hello World'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 232,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, vowels='aeiou') -> bool:\n    \"\"\"Check if all the vowels in a given string are in the specified list of vowels.\"\"\"\n    return all((c in vowels for c in s.lower() if c in vowels))",
        "solution_func": "def g(vowels='aeiou'):\n    return 'Hello World'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, fibonacci=[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]) -> bool:\n    \"\"\"Check if the nth number in the Fibonacci sequence is in the given list.\"\"\"\n    return fibonacci[n] in fibonacci\ndef g(fibonacci=[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]):\n    return 6\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 232,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, fibonacci=[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]) -> bool:\n    \"\"\"Check if the nth number in the Fibonacci sequence is in the given list.\"\"\"\n    return fibonacci[n] in fibonacci",
        "solution_func": "def g(fibonacci=[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]):\n    return 6",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6], target=10) -> bool:\n    \"\"\"Find n numbers from the given list that sum up to the target number\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(lst, n))\ndef g(lst=[1, 2, 3, 4, 5, 6], target=10):\n    return lst[:3]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 232,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6], target=10) -> bool:\n    \"\"\"Find n numbers from the given list that sum up to the target number\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(lst, n))",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6], target=10):\n    return lst[:3]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6], target=10) -> bool:\n    \"\"\"Find n numbers from the given list that multiply to the target number\"\"\"\n    from itertools import combinations\n    from functools import reduce\n    return any(reduce(lambda x, y: x*y, comb) == target for comb in combinations(lst, n))\ndef g(lst=[1, 2, 3, 4, 5, 6], target=10):\n    return lst[:2]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 232,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6], target=10) -> bool:\n    \"\"\"Find n numbers from the given list that multiply to the target number\"\"\"\n    from itertools import combinations\n    from functools import reduce\n    return any(reduce(lambda x, y: x*y, comb) == target for comb in combinations(lst, n))",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6], target=10):\n    return lst[:2]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6], target=10) -> bool:\n    \"\"\"Determine if it is possible to partition the given list into two sublists, \n    such that the sum of elements in one sublist is equal to the target number\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(lst, n))\ndef g(lst=[1, 2, 3, 4, 5, 6], target=10):\n    return lst[:3]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 232,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6], target=10) -> bool:\n    \"\"\"Determine if it is possible to partition the given list into two sublists, \n    such that the sum of elements in one sublist is equal to the target number\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(lst, n))",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6], target=10):\n    return lst[:3]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 232,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sum=15) -> bool:\n    \"\"\"Check if every row in the matrix has a sum equal to the row_sum\"\"\"\n    for row in matrix:\n        if sum(row) != row_sum:\n            return False\n    return True\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 232,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row_sum=15) -> bool:\n    \"\"\"Check if every row in the matrix has a sum equal to the row_sum\"\"\"\n    for row in matrix:\n        if sum(row) != row_sum:\n            return False\n    return True",
        "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], prefix='hello') -> bool:\n    \"\"\"Check if any of the strings in the list start with the prefix\"\"\"\n    return any(s.startswith(prefix) for s in strings)\ndef g():\n    return ['hello world', 'hi', 'hey there', 'howdy']\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 232,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(strings: List[str], prefix='hello') -> bool:\n    \"\"\"Check if any of the strings in the list start with the prefix\"\"\"\n    return any(s.startswith(prefix) for s in strings)",
        "solution_func": "def g():\n    return ['hello world', 'hi', 'hey there', 'howdy']",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=2) -> bool:\n    \"\"\"Check if the given number is a perfect n-th power of x.\"\"\"\n    return math.isclose(x ** n, int(x ** n))\n\ndef g(x=2):\n    return x ** 3\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 232,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=2) -> bool:\n    \"\"\"Check if the given number is a perfect n-th power of x.\"\"\"\n    return math.isclose(x ** n, int(x ** n))",
        "solution_func": "def g(x=2):\n    return x ** 3",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 5, 10, 20, 50], target=250) -> bool:\n    \"\"\"Find a combination of denominations that adds up to a given target value.\"\"\"\n    return sum((num * count for num, count in zip(nums, n))) == target\ndef g(nums=[2, 5, 10, 20, 50], target=250):\n    count = [0] * len(nums)\n    for i in range(len(nums)):\n        while target >= nums[i]:\n            target -= nums[i]\n            count[i] += 1\n    return tuple(count)\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 233,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[2, 5, 10, 20, 50], target=250) -> bool:\n    \"\"\"Find a combination of denominations that adds up to a given target value.\"\"\"\n    return sum((num * count for num, count in zip(nums, n))) == target",
        "solution_func": "def g(nums=[2, 5, 10, 20, 50], target=250):\n    count = [0] * len(nums)\n    for i in range(len(nums)):\n        while target >= nums[i]:\n            target -= nums[i]\n            count[i] += 1\n    return tuple(count)",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[3, 6, 9, 12, 15], target=15) -> bool:\n    \"\"\"Check if a number can be expressed as a sum of any two numbers from a given list.\"\"\"\n    return any((n - i in nums for i in nums))\ndef g(nums=[3, 6, 9, 12, 15], target=15):\n    return target\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 233,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[3, 6, 9, 12, 15], target=15) -> bool:\n    \"\"\"Check if a number can be expressed as a sum of any two numbers from a given list.\"\"\"\n    return any((n - i in nums for i in nums))",
        "solution_func": "def g(nums=[3, 6, 9, 12, 15], target=15):\n    return target",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(t: str, s='abcde', target='ebcda') -> bool:\n    \"\"\"Check if a string is a circular rotation of another string.\"\"\"\n    return t in s * 2 and len(t) == len(s)\ndef g(s='abcde', target='ebcda'):\n    return target\nassert f(g())\n",
        "emb": null,
        "idx_generation": 233,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(t: str, s='abcde', target='ebcda') -> bool:\n    \"\"\"Check if a string is a circular rotation of another string.\"\"\"\n    return t in s * 2 and len(t) == len(s)",
        "solution_func": "def g(s='abcde', target='ebcda'):\n    return target",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if there exists a substring of length k that appears exactly twice in the string s\"\"\"\n    def count_substring(sub, string) -> int:\n        count = 0\n        index = string.find(sub)\n        while index != -1:\n            count += 1\n            index = string.find(sub, index + 1)\n        return count\n    return any(count_substring(s[i:i+k], s) == 2 for i in range(len(s)-k+1))\ndef g(k=3):\n    s = \"ababcabcde\"\n    return s\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 233,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if there exists a substring of length k that appears exactly twice in the string s\"\"\"\n    def count_substring(sub, string) -> int:\n        count = 0\n        index = string.find(sub)\n        while index != -1:\n            count += 1\n            index = string.find(sub, index + 1)\n        return count\n    return any(count_substring(s[i:i+k], s) == 2 for i in range(len(s)-k+1))",
        "solution_func": "def g(k=3):\n    s = \"ababcabcde\"\n    return s",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exist two numbers in the list nums whose sum is equal to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=20):\n    nums = [10, 5, 7, 12, 3, 8]\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 233,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exist two numbers in the list nums whose sum is equal to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=20):\n    nums = [10, 5, 7, 12, 3, 8]\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, k=4) -> bool:\n    \"\"\"Check if there exists a substring of length k that is a palindrome\"\"\"\n    return any(s[i:i+k] == s[i:i+k][::-1] for i in range(len(s)-k+1))\ndef g(k=4):\n    s = \"racecar\"\n    return s\nassert f(g())\n",
        "emb": null,
        "idx_generation": 233,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, k=4) -> bool:\n    \"\"\"Check if there exists a substring of length k that is a palindrome\"\"\"\n    return any(s[i:i+k] == s[i:i+k][::-1] for i in range(len(s)-k+1))",
        "solution_func": "def g(k=4):\n    s = \"racecar\"\n    return s",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=73, rows=4, cols=4) -> bool:\n    \"\"\"Find a matrix with a target sum and specified dimensions\"\"\"\n    return len(matrix) == rows and all([len(row) == cols for row in matrix]) and sum([sum(row) for row in matrix]) == target\ndef g(target=73, rows=4, cols=4):\n    return [[target//(rows*cols)]*cols for _ in range(rows)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 233,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=73, rows=4, cols=4) -> bool:\n    \"\"\"Find a matrix with a target sum and specified dimensions\"\"\"\n    return len(matrix) == rows and all([len(row) == cols for row in matrix]) and sum([sum(row) for row in matrix]) == target",
        "solution_func": "def g(target=73, rows=4, cols=4):\n    return [[target//(rows*cols)]*cols for _ in range(rows)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=15, n=4) -> bool:\n    \"\"\"Find a list of integers with a target sum and a specified length\"\"\"\n    return len(arr) == n and sum(arr) == target\ndef g(target=15, n=4):\n    return [target//n] * n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 233,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=15, n=4) -> bool:\n    \"\"\"Find a list of integers with a target sum and a specified length\"\"\"\n    return len(arr) == n and sum(arr) == target",
        "solution_func": "def g(target=15, n=4):\n    return [target//n] * n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='hello', count=3, length=48) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring='hello', count=3, length=48):\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 233,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='hello', count=3, length=48) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length",
        "solution_func": "def g(substring='hello', count=3, length=48):\n    return substring * count + (length - len(substring) * count) * '^'",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, n=4, m=2) -> bool:\n    \"\"\"Check if a number is divisible by both n and m.\"\"\"\n    return x % n == 0 and x % m == 0\ndef g(n=4, m=2):\n    return n * m\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 233,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, n=4, m=2) -> bool:\n    \"\"\"Check if a number is divisible by both n and m.\"\"\"\n    return x % n == 0 and x % m == 0",
        "solution_func": "def g(n=4, m=2):\n    return n * m",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=42, n=6) -> bool:\n    \"\"\"Find n distinct positive integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target\ndef g(target=42, n=6):\n    return [target // 2 - n + i for i in range(n)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 234,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=42, n=6) -> bool:\n    \"\"\"Find n distinct positive integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target",
        "solution_func": "def g(target=42, n=6):\n    return [target // 2 - n + i for i in range(n)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], n=5) -> bool:\n    \"\"\"Check if there are exactly n words that start with the same letter\"\"\"\n    return len(words) == n and len(set([w[0] for w in words])) == 1\ndef g(n=5):\n    return ['word' + str(i) for i in range(n)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 234,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], n=5) -> bool:\n    \"\"\"Check if there are exactly n words that start with the same letter\"\"\"\n    return len(words) == n and len(set([w[0] for w in words])) == 1",
        "solution_func": "def g(n=5):\n    return ['word' + str(i) for i in range(n)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[i])))\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 234,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[i])))",
        "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(ls: List[int]) -> bool:\n    \"\"\"Check if the sum of the list is divisible by the length of the list.\"\"\"\n    return sum(ls) % len(ls) == 0\ndef g():\n    return [4, 6, 8, 10]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 234,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(ls: List[int]) -> bool:\n    \"\"\"Check if the sum of the list is divisible by the length of the list.\"\"\"\n    return sum(ls) % len(ls) == 0",
        "solution_func": "def g():\n    return [4, 6, 8, 10]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(ls: List[int]) -> bool:\n    \"\"\"Check if the list contains any duplicate numbers.\"\"\"\n    return len(set(ls)) != len(ls)\ndef g():\n    return random.sample(range(1, 11), 7)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 234,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(ls: List[int]) -> bool:\n    \"\"\"Check if the list contains any duplicate numbers.\"\"\"\n    return len(set(ls)) != len(ls)",
        "solution_func": "def g():\n    return random.sample(range(1, 11), 7)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char_count=5) -> bool:\n    \"\"\"Check if the string has at least 'char_count' number of unique characters.\"\"\"\n    return len(set(s)) >= char_count\ndef g(char_count=5):\n    return \"pythonprogramming\"\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 234,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char_count=5) -> bool:\n    \"\"\"Check if the string has at least 'char_count' number of unique characters.\"\"\"\n    return len(set(s)) >= char_count",
        "solution_func": "def g(char_count=5):\n    return \"pythonprogramming\"",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3, c=4) -> bool:\n    \"\"\"Check if a number is divisible by the sum of its digits\"\"\"\n    return n % (a+b+c) == 0\ndef g(a=2, b=3, c=4):\n    return a + b + c\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 234,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=2, b=3, c=4) -> bool:\n    \"\"\"Check if a number is divisible by the sum of its digits\"\"\"\n    return n % (a+b+c) == 0",
        "solution_func": "def g(a=2, b=3, c=4):\n    return a + b + c",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a string has a length greater than a given number\"\"\"\n    return len(s) > n\ndef g(n=5):\n    return \"Hello World!\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 234,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a string has a length greater than a given number\"\"\"\n    return len(s) > n",
        "solution_func": "def g(n=5):\n    return \"Hello World!\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there are two numbers in a list that add up to a given target sum\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 234,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there are two numbers in a list that add up to a given target sum\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 234,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(year: int, month: int, day: int, weekday: str='Monday') -> bool:\n    \"\"\"Check if a given date falls on a specific weekday\"\"\"\n    date = datetime(year, month, day)\n    return date.strftime('%A') == weekday\ndef g(year: int, month: int, day: int, weekday: str='Monday'):\n    return year, month, day, weekday\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 235,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(year: int, month: int, day: int, weekday: str='Monday') -> bool:\n    \"\"\"Check if a given date falls on a specific weekday\"\"\"\n    date = datetime(year, month, day)\n    return date.strftime('%A') == weekday",
        "solution_func": "def g(year: int, month: int, day: int, weekday: str='Monday'):\n    return year, month, day, weekday",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if any combination of numbers in a list sums up to a target number\"\"\"\n    n = len(nums)\n    for i in range(2 ** n):\n        combination = [nums[j] for j in range(n) if (i & (1 << j))]\n        if sum(combination) == target:\n            return True\n    return False\ndef g(nums: List[int], target: int):\n    return nums, target\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 235,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if any combination of numbers in a list sums up to a target number\"\"\"\n    n = len(nums)\n    for i in range(2 ** n):\n        combination = [nums[j] for j in range(n) if (i & (1 << j))]\n        if sum(combination) == target:\n            return True\n    return False",
        "solution_func": "def g(nums: List[int], target: int):\n    return nums, target",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(phrase: str, *words: str) -> bool:\n    \"\"\"Check if a phrase contains all the specified words\"\"\"\n    return all(word in phrase for word in words)\ndef g(phrase: str, *words: str):\n    return phrase, words\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 235,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(phrase: str, *words: str) -> bool:\n    \"\"\"Check if a phrase contains all the specified words\"\"\"\n    return all(word in phrase for word in words)",
        "solution_func": "def g(phrase: str, *words: str):\n    return phrase, words",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: datetime, date_format='%Y-%m-%d %H:%M:%S') -> bool:\n    \"\"\"Check if the given date matches the specified format\"\"\"\n    return date.strftime(date_format) == '2021-12-25 00:00:00'\n\ndef g(date_format='%Y-%m-%d %H:%M:%S'):\n    return datetime.strptime('2021-12-25 00:00:00', date_format)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 235,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date: datetime, date_format='%Y-%m-%d %H:%M:%S') -> bool:\n    \"\"\"Check if the given date matches the specified format\"\"\"\n    return date.strftime(date_format) == '2021-12-25 00:00:00'",
        "solution_func": "def g(date_format='%Y-%m-%d %H:%M:%S'):\n    return datetime.strptime('2021-12-25 00:00:00', date_format)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int, result=12) -> bool:\n    \"\"\"Check if the given number is a perfect square and its square root is equal to the result\"\"\"\n    return math.isqrt(num) ** 2 == num and math.isqrt(num) == result\n\ndef g(result=12):\n    return result ** 2\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 235,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(num: int, result=12) -> bool:\n    \"\"\"Check if the given number is a perfect square and its square root is equal to the result\"\"\"\n    return math.isqrt(num) ** 2 == num and math.isqrt(num) == result",
        "solution_func": "def g(result=12):\n    return result ** 2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=10):\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, target]\n    ]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 235,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=10):\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, target]\n    ]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=25) -> bool:\n    \"\"\"Return True if there exists a pair of numbers in the list whose sum is equal to the target number.\"\"\"\n    return any((x + y == target) for i, x in enumerate(lst) for j, y in enumerate(lst[i + 1:]))\ndef g(lst=[10, 5, 15, 20, 30]):\n    return lst\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 235,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=25) -> bool:\n    \"\"\"Return True if there exists a pair of numbers in the list whose sum is equal to the target number.\"\"\"\n    return any((x + y == target) for i, x in enumerate(lst) for j, y in enumerate(lst[i + 1:]))",
        "solution_func": "def g(lst=[10, 5, 15, 20, 30]):\n    return lst",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Return True if the given character appears in the string more than once.\"\"\"\n    return s.count(char) > 1\ndef g(s='banana'):\n    return s\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 235,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Return True if the given character appears in the string more than once.\"\"\"\n    return s.count(char) > 1",
        "solution_func": "def g(s='banana'):\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Return True if the given number is a multiple of any number in the list.\"\"\"\n    return any((n % num == 0) for num in nums)\ndef g(nums=[2, 4, 6, 8, 10]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 235,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Return True if the given number is a multiple of any number in the list.\"\"\"\n    return any((n % num == 0) for num in nums)",
        "solution_func": "def g(nums=[2, 4, 6, 8, 10]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, pattern='ABACADABRA') -> bool:\n    \"\"\"Check if a given pattern is present in the string\"\"\"\n    return pattern in s\ndef g(pattern='ABACADABRA'):\n    return pattern\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 235,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, pattern='ABACADABRA') -> bool:\n    \"\"\"Check if a given pattern is present in the string\"\"\"\n    return pattern in s",
        "solution_func": "def g(pattern='ABACADABRA'):\n    return pattern",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: list, row_sum=27) -> bool:\n    \"\"\"Check if the sum of each row in a matrix is equal to a given value.\"\"\"\n    return all(sum(row) == row_sum for row in matrix)\ndef g(row_sum=27):\n    return [[3, 7, 5], [6, 9, 12], [9, 3, 15]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 236,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: list, row_sum=27) -> bool:\n    \"\"\"Check if the sum of each row in a matrix is equal to a given value.\"\"\"\n    return all(sum(row) == row_sum for row in matrix)",
        "solution_func": "def g(row_sum=27):\n    return [[3, 7, 5], [6, 9, 12], [9, 3, 15]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: list, target=20) -> bool:\n    \"\"\"Check if there are three numbers in a list that add up to a given target.\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(target=20):\n    return [2, 8, 5, 10, 3, 15, 7]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 236,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: list, target=20) -> bool:\n    \"\"\"Check if there are three numbers in a list that add up to a given target.\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))",
        "solution_func": "def g(target=20):\n    return [2, 8, 5, 10, 3, 15, 7]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, char_count=2) -> bool:\n    \"\"\"Check if a string contains a specific character a certain number of times.\"\"\"\n    return s.count('a') == char_count\ndef g(char_count=2):\n    return \"banana\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 236,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char_count=2) -> bool:\n    \"\"\"Check if a string contains a specific character a certain number of times.\"\"\"\n    return s.count('a') == char_count",
        "solution_func": "def g(char_count=2):\n    return \"banana\"",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target: int) -> bool:\n    \"\"\"Check if there exists two numbers in the input array that sum up to the target value.\"\"\"\n    return any(target - num in arr for num in arr)\n\ndef g(arr: np.ndarray, target: int):\n    return arr\n\n# Example usage\narr = np.array([1, 2, 3, 4, 5])\ntarget = 7\nassert f(g(arr, target))\n",
        "emb": null,
        "idx_generation": 236,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target: int) -> bool:\n    \"\"\"Check if there exists two numbers in the input array that sum up to the target value.\"\"\"\n    return any(target - num in arr for num in arr)",
        "solution_func": "def g(arr: np.ndarray, target: int):\n    return arr\n\n# Example usage\narr = np.array([1, 2, 3, 4, 5])\ntarget = 7",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, pattern: str) -> bool:\n    \"\"\"Check if a given pattern can be repeated n times to form a string of length n.\"\"\"\n    return n % len(pattern) == 0 and pattern * (n // len(pattern)) == pattern\n\ndef g(n: int, pattern: str):\n    return pattern\n\n# Example usage\nn = 12\npattern = \"ab\"\nassert f(g(n, pattern))\n",
        "emb": null,
        "idx_generation": 236,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, pattern: str) -> bool:\n    \"\"\"Check if a given pattern can be repeated n times to form a string of length n.\"\"\"\n    return n % len(pattern) == 0 and pattern * (n // len(pattern)) == pattern",
        "solution_func": "def g(n: int, pattern: str):\n    return pattern\n\n# Example usage\nn = 12\npattern = \"ab\"",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date) -> bool:\n    \"\"\"Check if the input date is a leap year.\"\"\"\n    return date.year % 4 == 0 and (date.year % 100 != 0 or date.year % 400 == 0)\n\ndef g(date: datetime.date):\n    return date\n\n# Example usage\ndate = datetime.date(2024, 2, 29)\nassert f(g(date))\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 236,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(date: datetime.date) -> bool:\n    \"\"\"Check if the input date is a leap year.\"\"\"\n    return date.year % 4 == 0 and (date.year % 100 != 0 or date.year % 400 == 0)",
        "solution_func": "def g(date: datetime.date):\n    return date\n\n# Example usage\ndate = datetime.date(2024, 2, 29)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if n is divisible by all prime numbers in the list primes\"\"\"\n    return all((n % p == 0 for p in primes))\ndef g(primes=[2, 3, 5, 7, 11, 13]):\n    product = 1\n    for p in primes:\n        product *= p\n    return product\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 236,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if n is divisible by all prime numbers in the list primes\"\"\"\n    return all((n % p == 0 for p in primes))",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13]):\n    product = 1\n    for p in primes:\n        product *= p\n    return product",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\ndef f(matrix: np.ndarray, target=10) -> bool:\n    \"\"\"Check if the sum of the diagonal elements in the matrix is equal to the target\"\"\"\n    diagonal_sum = np.trace(matrix)\n    return diagonal_sum == target\ndef g(target=10):\n    matrix = np.eye(3) * target\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 236,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\ndef f(matrix: np.ndarray, target=10) -> bool:\n    \"\"\"Check if the sum of the diagonal elements in the matrix is equal to the target\"\"\"\n    diagonal_sum = np.trace(matrix)\n    return diagonal_sum == target",
        "solution_func": "def g(target=10):\n    matrix = np.eye(3) * target\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\ndef f(lst: list, num: int) -> bool:\n    \"\"\"Check if the number num is present at least twice in the list\"\"\"\n    return lst.count(num) >= 2\ndef g(num: int):\n    lst = [random.randint(1, 10) for _ in range(5)]\n    lst.append(num)\n    return lst\nassert f(g())\n",
        "emb": null,
        "idx_generation": 236,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\ndef f(lst: list, num: int) -> bool:\n    \"\"\"Check if the number num is present at least twice in the list\"\"\"\n    return lst.count(num) >= 2",
        "solution_func": "def g(num: int):\n    lst = [random.randint(1, 10) for _ in range(5)]\n    lst.append(num)\n    return lst",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, limit=100) -> bool:\n    \"\"\"Find n such that the sum of all numbers divisible by 3 or 5 below n is equal to or greater than the limit.\"\"\"\n    return sum(i for i in range(n) if i % 3 == 0 or i % 5 == 0) >= limit\ndef g(limit=100):\n    n = 1\n    while True:\n        if sum(i for i in range(n) if i % 3 == 0 or i % 5 == 0) >= limit:\n            return n\n        n += 1\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 236,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, limit=100) -> bool:\n    \"\"\"Find n such that the sum of all numbers divisible by 3 or 5 below n is equal to or greater than the limit.\"\"\"\n    return sum(i for i in range(n) if i % 3 == 0 or i % 5 == 0) >= limit",
        "solution_func": "def g(limit=100):\n    n = 1\n    while True:\n        if sum(i for i in range(n) if i % 3 == 0 or i % 5 == 0) >= limit:\n            return n\n        n += 1",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Given a matrix of integers, find a row such that the sum of its elements is equal to the target\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False\ndef g():\n    return [[1, 5, 7], [2, 3, 10], [4, 6, 10]]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 237,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Given a matrix of integers, find a row such that the sum of its elements is equal to the target\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False",
        "solution_func": "def g():\n    return [[1, 5, 7], [2, 3, 10], [4, 6, 10]]",
        "map_ix": [
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a subset of numbers in the list that add up to the target value\"\"\"\n    from itertools import combinations\n    for r in range(len(nums) + 1):\n        for subset in combinations(nums, r):\n            if sum(subset) == target:\n                return True\n    return False\ndef g():\n    return [10, 20, 30, 40, 50]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 237,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a subset of numbers in the list that add up to the target value\"\"\"\n    from itertools import combinations\n    for r in range(len(nums) + 1):\n        for subset in combinations(nums, r):\n            if sum(subset) == target:\n                return True\n    return False",
        "solution_func": "def g():\n    return [10, 20, 30, 40, 50]",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Find two numbers in the list whose sum is equal to the target value\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 237,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Find two numbers in the list whose sum is equal to the target value\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 4, 9, 16, 25, 36, 49, 64, 81, 100], k=3) -> bool:\n    \"\"\"Given a list of non-decreasing integers and given an integer k, determine if the kth element is a perfect square.\"\"\"\n    assert all((nums[i] <= nums[i + 1] for i in range(len(nums) - 1))), 'Hint: nums are non-decreasing'\n    return nums[k] == int(nums[k] ** 0.5) ** 2\ndef g(nums=[1, 4, 9, 16, 25, 36, 49, 64, 81, 100], k=3):\n    return nums[k]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 237,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 4, 9, 16, 25, 36, 49, 64, 81, 100], k=3) -> bool:\n    \"\"\"Given a list of non-decreasing integers and given an integer k, determine if the kth element is a perfect square.\"\"\"\n    assert all((nums[i] <= nums[i + 1] for i in range(len(nums) - 1))), 'Hint: nums are non-decreasing'\n    return nums[k] == int(nums[k] ** 0.5) ** 2",
        "solution_func": "def g(nums=[1, 4, 9, 16, 25, 36, 49, 64, 81, 100], k=3):\n    return nums[k]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig'], k=5) -> bool:\n    \"\"\"Given a list of words in alphabetical order and given an integer k, determine if the kth word has more than 6 characters.\"\"\"\n    assert all((words[i] <= words[i + 1] for i in range(len(words) - 1))), 'Hint: words are in alphabetical order'\n    return len(words[k]) > 6\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig'], k=5):\n    return words[k]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 237,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig'], k=5) -> bool:\n    \"\"\"Given a list of words in alphabetical order and given an integer k, determine if the kth word has more than 6 characters.\"\"\"\n    assert all((words[i] <= words[i + 1] for i in range(len(words) - 1))), 'Hint: words are in alphabetical order'\n    return len(words[k]) > 6",
        "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig'], k=5):\n    return words[k]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=4) -> bool:\n    \"\"\"Given a list of integers and given an integer k, determine if the kth element is equal to a random integer between 1 and 10 (inclusive).\"\"\"\n    return lst[k] == random.randint(1, 10)\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=4):\n    return lst[k]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 237,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=4) -> bool:\n    \"\"\"Given a list of integers and given an integer k, determine if the kth element is equal to a random integer between 1 and 10 (inclusive).\"\"\"\n    return lst[k] == random.randint(1, 10)",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=4):\n    return lst[k]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], x=250, y=500, count=10) -> bool:\n    \"\"\"Find a list of count or more numbers between x and y that are divisible by both 3 and 5\"\"\"\n    assert all((n % 3 == 0 and n % 5 == 0 for n in nums))\n    return len(nums) >= count\ndef g(x=250, y=500, count=10):\n    return [n for n in range(x, y + 1) if n % 3 == 0 and n % 5 == 0]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 237,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], x=250, y=500, count=10) -> bool:\n    \"\"\"Find a list of count or more numbers between x and y that are divisible by both 3 and 5\"\"\"\n    assert all((n % 3 == 0 and n % 5 == 0 for n in nums))\n    return len(nums) >= count",
        "solution_func": "def g(x=250, y=500, count=10):\n    return [n for n in range(x, y + 1) if n % 3 == 0 and n % 5 == 0]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=50, row=2, col=3) -> bool:\n    \"\"\"Find a matrix where the sum of elements in the specified row and column is equal to the target\"\"\"\n    assert all((sum(matrix[row]) == target and sum(row[col] for row in matrix) == target))\n    return True\ndef g(target=50, row=2, col=3):\n    return [[target - col if r == row else target - row if c == col else 0 for c in range(col + 1)] for r in range(row + 1)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 237,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=50, row=2, col=3) -> bool:\n    \"\"\"Find a matrix where the sum of elements in the specified row and column is equal to the target\"\"\"\n    assert all((sum(matrix[row]) == target and sum(row[col] for row in matrix) == target))\n    return True",
        "solution_func": "def g(target=50, row=2, col=3):\n    return [[target - col if r == row else target - row if c == col else 0 for c in range(col + 1)] for r in range(row + 1)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='hello', count=3) -> bool:\n    \"\"\"Find a string that contains at least count copies of the given substring\"\"\"\n    return string.count(substring) >= count\ndef g(substring='hello', count=3):\n    return substring * count\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 237,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='hello', count=3) -> bool:\n    \"\"\"Find a string that contains at least count copies of the given substring\"\"\"\n    return string.count(substring) >= count",
        "solution_func": "def g(substring='hello', count=3):\n    return substring * count",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=3, c=2, d=1) -> bool:\n    \"\"\"Find n such that n is a perfect square and a^n + b^n + c^n = d^n\"\"\"\n    return n ** 2 == a ** n + b ** n + c ** n - d ** n\n\ndef g(a=5, b=3, c=2, d=1):\n    # Find the maximum value of n such that a^n + b^n + c^n is less than d^n\n    n = 0\n    while a ** n + b ** n + c ** n < d ** n:\n        n += 1\n    return n\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 237,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=5, b=3, c=2, d=1) -> bool:\n    \"\"\"Find n such that n is a perfect square and a^n + b^n + c^n = d^n\"\"\"\n    return n ** 2 == a ** n + b ** n + c ** n - d ** n",
        "solution_func": "def g(a=5, b=3, c=2, d=1):\n    # Find the maximum value of n such that a^n + b^n + c^n is less than d^n\n    n = 0\n    while a ** n + b ** n + c ** n < d ** n:\n        n += 1\n    return n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello', length=5) -> bool:\n    \"\"\"Check if the given string contains a substring of the given length that matches the target string.\"\"\"\n    return any(s[i:i+length] == target for i in range(len(s)-length+1))\ndef g(target='hello', length=5):\n    return target\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 238,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='hello', length=5) -> bool:\n    \"\"\"Check if the given string contains a substring of the given length that matches the target string.\"\"\"\n    return any(s[i:i+length] == target for i in range(len(s)-length+1))",
        "solution_func": "def g(target='hello', length=5):\n    return target",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the given list that add up to the target number.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [3, 5, 2, 7, 4]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 238,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the given list that add up to the target number.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=10):\n    return [3, 5, 2, 7, 4]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom collections import Counter\n\ndef f(s: str, target='racecar') -> bool:\n    \"\"\"Check if the given string is an anagram of the target string.\"\"\"\n    return Counter(s) == Counter(target)\ndef g(target='racecar'):\n    return 'racecar'\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 238,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom collections import Counter\n\ndef f(s: str, target='racecar') -> bool:\n    \"\"\"Check if the given string is an anagram of the target string.\"\"\"\n    return Counter(s) == Counter(target)",
        "solution_func": "def g(target='racecar'):\n    return 'racecar'",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x=2021, y=2022) -> bool:\n    \"\"\"Find if the given number is a multiple of both x and y.\"\"\"\n    return n % x == 0 and n % y == 0\ndef g(x=2021, y=2022):\n    return x * y\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 238,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, x=2021, y=2022) -> bool:\n    \"\"\"Find if the given number is a multiple of both x and y.\"\"\"\n    return n % x == 0 and n % y == 0",
        "solution_func": "def g(x=2021, y=2022):\n    return x * y",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=1000000) -> bool:\n    \"\"\"Find if the given number is a palindrome and greater than m.\"\"\"\n    return str(n) == str(n)[::-1] and n > m\ndef g(m=1000000):\n    return int(str(m)[::-1]) + m\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 238,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=1000000) -> bool:\n    \"\"\"Find if the given number is a palindrome and greater than m.\"\"\"\n    return str(n) == str(n)[::-1] and n > m",
        "solution_func": "def g(m=1000000):\n    return int(str(m)[::-1]) + m",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=20, c=30) -> bool:\n    \"\"\"Find if the given number is between the range (a, b) and not equal to c.\"\"\"\n    return a < n < b and n != c\ndef g(a=10, b=20, c=30):\n    return (a + b) // 2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 238,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=10, b=20, c=30) -> bool:\n    \"\"\"Find if the given number is between the range (a, b) and not equal to c.\"\"\"\n    return a < n < b and n != c",
        "solution_func": "def g(a=10, b=20, c=30):\n    return (a + b) // 2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"Check if a square matrix is symmetric.\"\"\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g(n=4):\n    return [[1, 2, 3, 4],\n            [2, 5, 6, 7],\n            [3, 6, 8, 9],\n            [4, 7, 9, 0]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 238,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"Check if a square matrix is symmetric.\"\"\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True",
        "solution_func": "def g(n=4):\n    return [[1, 2, 3, 4],\n            [2, 5, 6, 7],\n            [3, 6, 8, 9],\n            [4, 7, 9, 0]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=5) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return string == string[::-1]\ndef g(n=5):\n    return \"radar\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 238,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, n=5) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return string == string[::-1]",
        "solution_func": "def g(n=5):\n    return \"radar\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=4) -> bool:\n    \"\"\"Check if a list contains all unique elements.\"\"\"\n    return len(nums) == len(set(nums))\ndef g(n=4):\n    return [1, 2, 3, 4]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 238,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], n=4) -> bool:\n    \"\"\"Check if a list contains all unique elements.\"\"\"\n    return len(nums) == len(set(nums))",
        "solution_func": "def g(n=4):\n    return [1, 2, 3, 4]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=2) -> bool:\n    \"\"\"Given a string, find the longest substring that contains only two unique characters.\n    Sample Input:\n    `\"abcabcabc\"`\n    Sample Output:\n    `\"abca\"`\"\"\"\n    return len(s) >= target and all((s[i] != s[i + 1] for i in range(len(s) - 1)))\n    \ndef g(target=2):\n    return \"abca\"\n    \nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 238,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=2) -> bool:\n    \"\"\"Given a string, find the longest substring that contains only two unique characters.\n    Sample Input:\n    `\"abcabcabc\"`\n    Sample Output:\n    `\"abca\"`\"\"\"\n    return len(s) >= target and all((s[i] != s[i + 1] for i in range(len(s) - 1)))",
        "solution_func": "def g(target=2):\n    return \"abca\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a', n=3) -> bool:\n    \"\"\"Check if a specific character appears n times in a string\"\"\"\n    return s.count(char) == n\ndef g(char='a', n=3):\n    return char * n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 239,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char='a', n=3) -> bool:\n    \"\"\"Check if a specific character appears n times in a string\"\"\"\n    return s.count(char) == n",
        "solution_func": "def g(char='a', n=3):\n    return char * n",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, r=5) -> bool:\n    \"\"\"Check if a point is inside a circle\"\"\"\n    return math.sqrt(x ** 2 + y ** 2) <= r\ndef g(r=5):\n    return (0, 0)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 239,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, r=5) -> bool:\n    \"\"\"Check if a point is inside a circle\"\"\"\n    return math.sqrt(x ** 2 + y ** 2) <= r",
        "solution_func": "def g(r=5):\n    return (0, 0)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in a list that add up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 9, 2, 8, 3, 7, 4, 6, 5]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 239,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in a list that add up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 9, 2, 8, 3, 7, 4, 6, 5]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Given a list of numbers and a target value, find two numbers in the list that add up to the target.\nReturn True if such a pair exists, False otherwise.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=12):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 239,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Given a list of numbers and a target value, find two numbers in the list that add up to the target.\nReturn True if such a pair exists, False otherwise.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=12):\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=18) -> bool:\n    \"\"\"Given a matrix of numbers and a target value, find a path from the top-left corner to the bottom-right corner\nthat maximizes the sum of the numbers along the path. Return True if the maximum sum is equal to the target,\nFalse otherwise.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    dp = [[0] * cols for _ in range(rows)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, rows):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for j in range(1, cols):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    return dp[rows-1][cols-1] == target\ndef g(target=18):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 239,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=18) -> bool:\n    \"\"\"Given a matrix of numbers and a target value, find a path from the top-left corner to the bottom-right corner\nthat maximizes the sum of the numbers along the path. Return True if the maximum sum is equal to the target,\nFalse otherwise.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    dp = [[0] * cols for _ in range(rows)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, rows):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for j in range(1, cols):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    return dp[rows-1][cols-1] == target",
        "solution_func": "def g(target=18):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Given a list of numbers and a target value, find three numbers in the list that add up to the target.\nReturn True if such a triplet exists, False otherwise.\"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\ndef g(target=5):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 239,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Given a list of numbers and a target value, find three numbers in the list that add up to the target.\nReturn True if such a triplet exists, False otherwise.\"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False",
        "solution_func": "def g(target=5):\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=100):\n    return [i for i in range(1, target_sum//2+1)]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 239,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=100):\n    return [i for i in range(1, target_sum//2+1)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target_count=10) -> bool:\n    \"\"\"Find a list of distinct random numbers from 1 to 100 with length equal to target_count.\"\"\"\n    return len(set(nums)) == target_count and all(num in range(1, 101) for num in nums)\n\ndef g(target_count=10):\n    return random.sample(range(1, 101), target_count)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 239,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target_count=10) -> bool:\n    \"\"\"Find a list of distinct random numbers from 1 to 100 with length equal to target_count.\"\"\"\n    return len(set(nums)) == target_count and all(num in range(1, 101) for num in nums)",
        "solution_func": "def g(target_count=10):\n    return random.sample(range(1, 101), target_count)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target_length=3) -> bool:\n    \"\"\"Find a combination of target_length numbers from the list that adds up to 100.\"\"\"\n    for comb in combinations(nums, target_length):\n        if sum(comb) == 100:\n            return True\n    return False\n\ndef g(target_length=3):\n    return [i for i in range(1, 101)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 239,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target_length=3) -> bool:\n    \"\"\"Find a combination of target_length numbers from the list that adds up to 100.\"\"\"\n    for comb in combinations(nums, target_length):\n        if sum(comb) == 100:\n            return True\n    return False",
        "solution_func": "def g(target_length=3):\n    return [i for i in range(1, 101)]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 5, 10, 15], upper_bound=100) -> bool:\n    \"\"\"Check if n is divisible by all elements in nums and is within the upper bound.\"\"\"\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums=[2, 5, 10, 15], upper_bound=100):\n    ans = 1\n    for i in nums:\n        ans *= i\n    return ans\nassert f(g())\n",
        "emb": null,
        "idx_generation": 239,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[2, 5, 10, 15], upper_bound=100) -> bool:\n    \"\"\"Check if n is divisible by all elements in nums and is within the upper bound.\"\"\"\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound",
        "solution_func": "def g(nums=[2, 5, 10, 15], upper_bound=100):\n    ans = 1\n    for i in nums:\n        ans *= i\n    return ans",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the array whose sum is equal to the target value.\"\"\"\n    return any((arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr))))\ndef g(target=100):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr\nassert f(g())\n",
        "emb": null,
        "idx_generation": 240,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the array whose sum is equal to the target value.\"\"\"\n    return any((arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr))))",
        "solution_func": "def g(target=100):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=3, c='a') -> bool:\n    \"\"\"Check if the given character appears n times consecutively in the string s.\"\"\"\n    return any((s[i:i+n] == c * n for i in range(len(s) - n + 1)))\ndef g(n=3, c='a'):\n    s = \"abcd\" * n\n    return s\nassert f(g())\n",
        "emb": null,
        "idx_generation": 240,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3, c='a') -> bool:\n    \"\"\"Check if the given character appears n times consecutively in the string s.\"\"\"\n    return any((s[i:i+n] == c * n for i in range(len(s) - n + 1)))",
        "solution_func": "def g(n=3, c='a'):\n    s = \"abcd\" * n\n    return s",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in the array that sum up to the target value.\"\"\"\n    return any((arr[i] + arr[j] + arr[k] == target for i in range(len(arr)) for j in range(i+1, len(arr)) for k in range(j+1, len(arr))))\ndef g(target=0):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr\nassert f(g())\n",
        "emb": null,
        "idx_generation": 240,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in the array that sum up to the target value.\"\"\"\n    return any((arr[i] + arr[j] + arr[k] == target for i in range(len(arr)) for j in range(i+1, len(arr)) for k in range(j+1, len(arr))))",
        "solution_func": "def g(target=0):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: float, a=999, b=654321) -> bool:\n    \"\"\"Check if the sum of x and a is equal to b\"\"\"\n    return x + a == b\ndef g(a=999, b=654321):\n    return b - a\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 240,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: float, a=999, b=654321) -> bool:\n    \"\"\"Check if the sum of x and a is equal to b\"\"\"\n    return x + a == b",
        "solution_func": "def g(a=999, b=654321):\n    return b - a",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: str, a='Python', b='Programming') -> bool:\n    \"\"\"Check if the concatenation of x and a is equal to b\"\"\"\n    return x + a == b\ndef g(a='Python', b='Programming'):\n    return b - a\nassert f(g())\n",
        "emb": null,
        "idx_generation": 240,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, a='Python', b='Programming') -> bool:\n    \"\"\"Check if the concatenation of x and a is equal to b\"\"\"\n    return x + a == b",
        "solution_func": "def g(a='Python', b='Programming'):\n    return b - a",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: list, a=[1, 2, 3, 4], b=[4, 3, 2, 1]) -> bool:\n    \"\"\"Check if the reversed list of x is equal to a\"\"\"\n    return x[::-1] == a\ndef g(a=[1, 2, 3, 4], b=[4, 3, 2, 1]):\n    return a[::-1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 240,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: list, a=[1, 2, 3, 4], b=[4, 3, 2, 1]) -> bool:\n    \"\"\"Check if the reversed list of x is equal to a\"\"\"\n    return x[::-1] == a",
        "solution_func": "def g(a=[1, 2, 3, 4], b=[4, 3, 2, 1]):\n    return a[::-1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, target=8) -> bool:\n    \"\"\"Check if the string s can be split into three parts such that the sum of the first part is equal to the sum of the second part, and the sum of the second part is equal to the sum of the third part. The target is the sum of each part.\"\"\"\n    parts = s.split(',')\n    if len(parts) != 3:\n        return False\n    sums = [sum(map(int, part.split())) for part in parts]\n    return all(s == target for s in sums)\ndef g(target=8):\n    a = [1, 2, 3]\n    b = [target - sum(a) - i for i in a]\n    s = ','.join([','.join(map(str, a)), ','.join(map(str, b)), ','.join(map(str, b))])\n    return s\nassert f(g())\n",
        "emb": null,
        "idx_generation": 240,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=8) -> bool:\n    \"\"\"Check if the string s can be split into three parts such that the sum of the first part is equal to the sum of the second part, and the sum of the second part is equal to the sum of the third part. The target is the sum of each part.\"\"\"\n    parts = s.split(',')\n    if len(parts) != 3:\n        return False\n    sums = [sum(map(int, part.split())) for part in parts]\n    return all(s == target for s in sums)",
        "solution_func": "def g(target=8):\n    a = [1, 2, 3]\n    b = [target - sum(a) - i for i in a]\n    s = ','.join([','.join(map(str, a)), ','.join(map(str, b)), ','.join(map(str, b))])\n    return s",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list nums that sum up to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=100):\n    nums = [50, 20, 30]\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 240,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list nums that sum up to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=100):\n    nums = [50, 20, 30]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if any word in the list words contains the target word as a substring.\"\"\"\n    for word in words:\n        if target in word:\n            return True\n    return False\ndef g(target='python'):\n    words = ['hello', 'world', 'pythonista']\n    return words\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 240,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if any word in the list words contains the target word as a substring.\"\"\"\n    for word in words:\n        if target in word:\n            return True\n    return False",
        "solution_func": "def g(target='python'):\n    words = ['hello', 'world', 'pythonista']\n    return words",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct positive integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target\ndef g(target=100, n=5):\n    return list(range(1, n+1)) + [target - sum(range(1, n+1))]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 240,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct positive integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target",
        "solution_func": "def g(target=100, n=5):\n    return list(range(1, n+1)) + [target - sum(range(1, n+1))]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a number n is present in the given array.\"\"\"\n    return n in arr\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr[0]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 241,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a number n is present in the given array.\"\"\"\n    return n in arr",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5]):\n    return arr[0]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, char='a', index=0) -> bool:\n    \"\"\"Check if a given character is present at a specific index in the given word.\"\"\"\n    return word[index] == char\ndef g(char='a', index=0):\n    return char * (index + 1)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 241,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str, char='a', index=0) -> bool:\n    \"\"\"Check if a given character is present at a specific index in the given word.\"\"\"\n    return word[index] == char",
        "solution_func": "def g(char='a', index=0):\n    return char * (index + 1)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"Check if the sum of n numbers in the array equals the target number.\"\"\"\n    return sum(arr[:n]) == target\ndef g(arr=[1, 2, 3, 4, 5], target=10):\n    return len(arr) - 1\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 241,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"Check if the sum of n numbers in the array equals the target number.\"\"\"\n    return sum(arr[:n]) == target",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5], target=10):\n    return len(arr) - 1",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Find a string that has the same hash value as s and is n characters long\"\"\"\n    return hash(s) == hash('a' * n)\ndef g(n=10):\n    return 'a' * n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 241,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Find a string that has the same hash value as s and is n characters long\"\"\"\n    return hash(s) == hash('a' * n)",
        "solution_func": "def g(n=10):\n    return 'a' * n",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(p: int, q=3, r=7) -> bool:\n    \"\"\"Find p such that q^p is congruent to 1 modulo r\"\"\"\n    return q**p % r == 1\ndef g(q=3, r=7):\n    p = r - 1\n    while True:\n        if f(p, q, r):\n            return p\n        p += r - 1\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 241,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(p: int, q=3, r=7) -> bool:\n    \"\"\"Find p such that q^p is congruent to 1 modulo r\"\"\"\n    return q**p % r == 1",
        "solution_func": "def g(q=3, r=7):\n    p = r - 1\n    while True:\n        if f(p, q, r):\n            return p\n        p += r - 1",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[4, 8, 2, 1]) -> bool:\n    \"\"\"Find the number of integers from the list nums that divide n evenly\"\"\"\n    return sum(1 for num in nums if n % num == 0)\ndef g(nums=[4, 8, 2, 1]):\n    return len(nums)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 241,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[4, 8, 2, 1]) -> bool:\n    \"\"\"Find the number of integers from the list nums that divide n evenly\"\"\"\n    return sum(1 for num in nums if n % num == 0)",
        "solution_func": "def g(nums=[4, 8, 2, 1]):\n    return len(nums)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Given a list of integers, find two numbers such that their sum is equal to the target value.\n    Return True if such numbers exist, otherwise return False.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 241,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Given a list of integers, find two numbers such that their sum is equal to the target value.\n    Return True if such numbers exist, otherwise return False.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='hello') -> bool:\n    \"\"\"Given a string, check if a substring exists within the string.\n    Return True if the substring is found, otherwise return False.\"\"\"\n    return substr in string\ndef g(string='hello world'):\n    return string\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 241,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substr='hello') -> bool:\n    \"\"\"Given a string, check if a substring exists within the string.\n    Return True if the substring is found, otherwise return False.\"\"\"\n    return substr in string",
        "solution_func": "def g(string='hello world'):\n    return string",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=7) -> bool:\n    \"\"\"Given a matrix of integers, find if the target value exists in the matrix.\n    Return True if the target value is found, otherwise return False.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 241,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=7) -> bool:\n    \"\"\"Given a matrix of integers, find if the target value exists in the matrix.\n    Return True if the target value is found, otherwise return False.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the array that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 241,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the array that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Given a list of numbers, find two numbers that add up to the target value.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 242,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Given a list of numbers, find two numbers that add up to the target value.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring=\"\") -> bool:\n    \"\"\"Check if a given string contains a specific substring.\"\"\"\n    return substring in string\ndef g(substring=\"\"):\n    return \"Hello, World!\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 242,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring=\"\") -> bool:\n    \"\"\"Check if a given string contains a specific substring.\"\"\"\n    return substring in string",
        "solution_func": "def g(substring=\"\"):\n    return \"Hello, World!\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Given a matrix of numbers, find the target value in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 242,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Given a matrix of numbers, find the target value in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, divisors=[2, 3, 5]) -> bool:\n    \"\"\"Check if n can be evenly divided by all numbers in divisors\"\"\"\n    return all(n % d == 0 for d in divisors)\ndef g(divisors=[2, 3, 5]):\n    return max(divisors) * (10 ** (len(divisors)-1))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 242,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, divisors=[2, 3, 5]) -> bool:\n    \"\"\"Check if n can be evenly divided by all numbers in divisors\"\"\"\n    return all(n % d == 0 for d in divisors)",
        "solution_func": "def g(divisors=[2, 3, 5]):\n    return max(divisors) * (10 ** (len(divisors)-1))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find a path in the matrix that sums up to the target\"\"\"\n    def dfs(matrix, i, j, curr_sum):\n        if i < 0 or i >= len(matrix) or j < 0 or j >= len(matrix[0]):\n            return False\n        curr_sum += matrix[i][j]\n        if curr_sum == target:\n            return True\n        return dfs(matrix, i+1, j, curr_sum) or dfs(matrix, i, j+1, curr_sum)\n    \n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if dfs(matrix, i, j, 0):\n                return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 242,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find a path in the matrix that sums up to the target\"\"\"\n    def dfs(matrix, i, j, curr_sum):\n        if i < 0 or i >= len(matrix) or j < 0 or j >= len(matrix[0]):\n            return False\n        curr_sum += matrix[i][j]\n        if curr_sum == target:\n            return True\n        return dfs(matrix, i+1, j, curr_sum) or dfs(matrix, i, j+1, curr_sum)\n    \n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if dfs(matrix, i, j, 0):\n                return True\n    return False",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list that sum up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 242,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list that sum up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='', length=0) -> bool:\n    \"\"\"Check if the concatenation of the target string n times is equal to the given string\"\"\"\n    return target * length == s\ndef g(target='', length=0):\n    if length == 0:\n        return ''\n    return target * length\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 242,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='', length=0) -> bool:\n    \"\"\"Check if the concatenation of the target string n times is equal to the given string\"\"\"\n    return target * length == s",
        "solution_func": "def g(target='', length=0):\n    if length == 0:\n        return ''\n    return target * length",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 242,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(li: List[int], target=0, n=0) -> bool:\n    \"\"\"Check if there are n numbers in the list that add up to the target\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return target in li\n    for i in range(len(li)):\n        if f(li[i+1:], target-li[i], n-1):\n            return True\n    return False\ndef g(target=0, n=0):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 242,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int], target=0, n=0) -> bool:\n    \"\"\"Check if there are n numbers in the list that add up to the target\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return target in li\n    for i in range(len(li)):\n        if f(li[i+1:], target-li[i], n-1):\n            return True\n    return False",
        "solution_func": "def g(target=0, n=0):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a given number n is divisible by any of the prime numbers in the list primes\"\"\"\n    for prime in primes:\n        if n % prime == 0:\n            return True\n    return False\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    n = 1\n    while True:\n        if f(n, primes):\n            return n\n        n += 1\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 242,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a given number n is divisible by any of the prime numbers in the list primes\"\"\"\n    for prime in primes:\n        if n % prime == 0:\n            return True\n    return False",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    n = 1\n    while True:\n        if f(n, primes):\n            return n\n        n += 1",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10, target_count=2) -> bool:\n    \"\"\"Find if there are target_count numbers in the list that sum up to target_sum\"\"\"\n    assert len(nums) >= target_count\n    return any(sum(comb) == target_sum for comb in combinations(nums, target_count))\ndef g(target_sum=10, target_count=2):\n    return list(range(1, target_sum+1))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 243,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=10, target_count=2) -> bool:\n    \"\"\"Find if there are target_count numbers in the list that sum up to target_sum\"\"\"\n    assert len(nums) >= target_count\n    return any(sum(comb) == target_sum for comb in combinations(nums, target_count))",
        "solution_func": "def g(target_sum=10, target_count=2):\n    return list(range(1, target_sum+1))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find if the target number is in the matrix\"\"\"\n    return any(target in row for row in matrix)\ndef g(target=0):\n    return [[i+j for i in range(5)] for j in range(5)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 243,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find if the target number is in the matrix\"\"\"\n    return any(target in row for row in matrix)",
        "solution_func": "def g(target=0):\n    return [[i+j for i in range(5)] for j in range(5)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_length=5) -> bool:\n    \"\"\"Find if the string s has target_length number of vowels\"\"\"\n    vowels = set('aeiou')\n    return sum(1 for char in s if char.lower() in vowels) == target_length\ndef g(target_length=5):\n    return 'aeiou' + 'x'*(target_length-5)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "idx_generation": 243,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target_length=5) -> bool:\n    \"\"\"Find if the string s has target_length number of vowels\"\"\"\n    vowels = set('aeiou')\n    return sum(1 for char in s if char.lower() in vowels) == target_length",
        "solution_func": "def g(target_length=5):\n    return 'aeiou' + 'x'*(target_length-5)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], pivot=10) -> bool:\n    \"\"\"Check if a list can be divided into two sublists, where the sum of the first sublist is equal to the sum of the second sublist\"\"\"\n    total_sum = sum(nums)\n    prefix_sum = 0\n    for i in range(len(nums)):\n        prefix_sum += nums[i]\n        if prefix_sum == total_sum - prefix_sum:\n            pivot = i+1\n            break\n    return pivot != 10\ndef g():\n    return [1, 2, 3, 4, 5, 5, 4, 3, 2, 1]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 243,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], pivot=10) -> bool:\n    \"\"\"Check if a list can be divided into two sublists, where the sum of the first sublist is equal to the sum of the second sublist\"\"\"\n    total_sum = sum(nums)\n    prefix_sum = 0\n    for i in range(len(nums)):\n        prefix_sum += nums[i]\n        if prefix_sum == total_sum - prefix_sum:\n            pivot = i+1\n            break\n    return pivot != 10",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 5, 4, 3, 2, 1]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], n=5) -> bool:\n    \"\"\"Check if a list of words contains at least n words that are palindromes\"\"\"\n    count = 0\n    for word in words:\n        if word == word[::-1]:\n            count += 1\n            if count == n:\n                return True\n    return False\ndef g(n=5):\n    return [\"level\", \"python\", \"radar\", \"algorithm\", \"madam\", \"puzzle\", \"racecar\"]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 243,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], n=5) -> bool:\n    \"\"\"Check if a list of words contains at least n words that are palindromes\"\"\"\n    count = 0\n    for word in words:\n        if word == word[::-1]:\n            count += 1\n            if count == n:\n                return True\n    return False",
        "solution_func": "def g(n=5):\n    return [\"level\", \"python\", \"radar\", \"algorithm\", \"madam\", \"puzzle\", \"racecar\"]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exists a path in a matrix from the top-left corner to the bottom-right corner, where the sum of the numbers along the path is equal to a given target\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    dp = [[0] * cols for _ in range(rows)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, rows):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for j in range(1, cols):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    return dp[-1][-1] == target\ndef g(target=20):\n    return [[1, 3, 5], [2, 4, 7], [6, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 243,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exists a path in a matrix from the top-left corner to the bottom-right corner, where the sum of the numbers along the path is equal to a given target\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    dp = [[0] * cols for _ in range(rows)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, rows):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for j in range(1, cols):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    return dp[-1][-1] == target",
        "solution_func": "def g(target=20):\n    return [[1, 3, 5], [2, 4, 7], [6, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, strings=['banana', 'apple', 'mango', 'grapefruit', 'orange']) -> bool:\n    \"\"\"Check if a given string is a substring of any string in a list.\"\"\"\n    return any((s in string for string in strings))\ndef g(strings=['banana', 'apple', 'mango', 'grapefruit', 'orange']):\n    return strings[0][1:-1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 243,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, strings=['banana', 'apple', 'mango', 'grapefruit', 'orange']) -> bool:\n    \"\"\"Check if a given string is a substring of any string in a list.\"\"\"\n    return any((s in string for string in strings))",
        "solution_func": "def g(strings=['banana', 'apple', 'mango', 'grapefruit', 'orange']):\n    return strings[0][1:-1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if any two numbers in a list add up to a given target number.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=100):\n    return [50, 75, 25, 10, 90]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 243,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if any two numbers in a list add up to a given target number.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(target=100):\n    return [50, 75, 25, 10, 90]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport datetime\n\ndef f(d: datetime.date, year=2022, month=3, day=14) -> bool:\n    \"\"\"Check if a given date is the same as a specific date.\"\"\"\n    return d == datetime.date(year, month, day)\ndef g(year=2022, month=3, day=14):\n    return datetime.date.today()\nassert f(g())\n",
        "emb": null,
        "idx_generation": 243,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(d: datetime.date, year=2022, month=3, day=14) -> bool:\n    \"\"\"Check if a given date is the same as a specific date.\"\"\"\n    return d == datetime.date(year, month, day)",
        "solution_func": "def g(year=2022, month=3, day=14):\n    return datetime.date.today()",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(num_list: list, k=3) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the list\"\"\"\n    return any(num_list[i:i+k] == list(range(num_list[i], num_list[i]+k)) for i in range(len(num_list)-k+1))\n\ndef g(k=3):\n    start = random.randint(1,10)\n    return list(range(start, start+k+1))\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 243,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(num_list: list, k=3) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the list\"\"\"\n    return any(num_list[i:i+k] == list(range(num_list[i], num_list[i]+k)) for i in range(len(num_list)-k+1))",
        "solution_func": "def g(k=3):\n    start = random.randint(1,10)\n    return list(range(start, start+k+1))",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, nums=[2, 4, 6, 8]) -> bool:\n    \"\"\"Check if there exists a subset of nums whose sum is equal to n\"\"\"\n    from itertools import combinations\n    return any(sum(subset) == n for r in range(len(nums) + 1) for subset in combinations(nums, r))\ndef g(nums=[2, 4, 6, 8]):\n    return sum(nums) // 2\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 244,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, nums=[2, 4, 6, 8]) -> bool:\n    \"\"\"Check if there exists a subset of nums whose sum is equal to n\"\"\"\n    from itertools import combinations\n    return any(sum(subset) == n for r in range(len(nums) + 1) for subset in combinations(nums, r))",
        "solution_func": "def g(nums=[2, 4, 6, 8]):\n    return sum(nums) // 2",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if there exists a substring in s that starts and ends with the same character\"\"\"\n    return any(sub in s for sub in substrings if sub[0] == sub[-1])\ndef g(substrings=['apple', 'banana', 'cherry']):\n    return ''.join(substrings)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 244,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if there exists a substring in s that starts and ends with the same character\"\"\"\n    return any(sub in s for sub in substrings if sub[0] == sub[-1])",
        "solution_func": "def g(substrings=['apple', 'banana', 'cherry']):\n    return ''.join(substrings)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in nums that sums up to n\"\"\"\n    return any(nums[i] + nums[j] == n for i in range(len(nums)-1) for j in range(i+1, len(nums)))\ndef g(nums=[1, 2, 3, 4, 5, 6]):\n    return sum(nums) // 2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 244,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in nums that sums up to n\"\"\"\n    return any(nums[i] + nums[j] == n for i in range(len(nums)-1) for j in range(i+1, len(nums)))",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6]):\n    return sum(nums) // 2",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(m: int, n: int, res: int) -> bool:\n    \"\"\"Find the result of adding the digits of an integer m, n times, and check if it is equal to res.\"\"\"\n    for i in range(n):\n        m = sum([int(digit) for digit in str(m)])\n    return res == m\ndef g(m=12345, n=3, res=15):\n    for i in range(n):\n        m = sum([int(digit) for digit in str(m)])\n    return m\nassert f(g())\n",
        "emb": null,
        "idx_generation": 244,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(m: int, n: int, res: int) -> bool:\n    \"\"\"Find the result of adding the digits of an integer m, n times, and check if it is equal to res.\"\"\"\n    for i in range(n):\n        m = sum([int(digit) for digit in str(m)])\n    return res == m",
        "solution_func": "def g(m=12345, n=3, res=15):\n    for i in range(n):\n        m = sum([int(digit) for digit in str(m)])\n    return m",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, res: int) -> bool:\n    \"\"\"Find the result of multiplying the ASCII values of the characters in a string s, and check if it is equal to res.\"\"\"\n    product = 1\n    for char in s:\n        product *= ord(char)\n    return res == product\ndef g(s='Hello', res=94150874880):\n    product = 1\n    for char in s:\n        product *= ord(char)\n    return product\nassert f(g())\n",
        "emb": null,
        "idx_generation": 244,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, res: int) -> bool:\n    \"\"\"Find the result of multiplying the ASCII values of the characters in a string s, and check if it is equal to res.\"\"\"\n    product = 1\n    for char in s:\n        product *= ord(char)\n    return res == product",
        "solution_func": "def g(s='Hello', res=94150874880):\n    product = 1\n    for char in s:\n        product *= ord(char)\n    return product",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum: int, res: bool) -> bool:\n    \"\"\"Check if it is possible to obtain target_sum by adding the elements of an array arr.\"\"\"\n    def helper(arr, target_sum):\n        if target_sum == 0:\n            return True\n        if len(arr) == 0:\n            return False\n        return helper(arr[1:], target_sum - arr[0]) or helper(arr[1:], target_sum)\n    return res == helper(arr, target_sum)\ndef g(arr=[1, 2, 3, 4, 5], target_sum=9, res=True):\n    def helper(arr, target_sum):\n        if target_sum == 0:\n            return True\n        if len(arr) == 0:\n            return False\n        return helper(arr[1:], target_sum - arr[0]) or helper(arr[1:], target_sum)\n    return helper(arr, target_sum)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 244,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target_sum: int, res: bool) -> bool:\n    \"\"\"Check if it is possible to obtain target_sum by adding the elements of an array arr.\"\"\"\n    def helper(arr, target_sum):\n        if target_sum == 0:\n            return True\n        if len(arr) == 0:\n            return False\n        return helper(arr[1:], target_sum - arr[0]) or helper(arr[1:], target_sum)\n    return res == helper(arr, target_sum)",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5], target_sum=9, res=True):\n    def helper(arr, target_sum):\n        if target_sum == 0:\n            return True\n        if len(arr) == 0:\n            return False\n        return helper(arr[1:], target_sum - arr[0]) or helper(arr[1:], target_sum)\n    return helper(arr, target_sum)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, y=0, z=0) -> bool:\n    \"\"\"Check if x is a perfect square and y and z are prime numbers\"\"\"\n    return math.isqrt(x)**2 == x and is_prime(y) and is_prime(z)\n\ndef g(y=2, z=3):\n    return 25\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Check if a number is prime\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 244,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: int, y=0, z=0) -> bool:\n    \"\"\"Check if x is a perfect square and y and z are prime numbers\"\"\"\n    return math.isqrt(x)**2 == x and is_prime(y) and is_prime(z)",
        "solution_func": "def g(y=2, z=3):\n    return 25\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Check if a number is prime\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: str, y='world', z=3) -> bool:\n    \"\"\"Check if x is a palindrome and y is a substring of x and z is a factor of 12\"\"\"\n    return x == x[::-1] and y in x and 12 % z == 0\n\ndef g(y='orl', z=4):\n    return 'hello'\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 244,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, y='world', z=3) -> bool:\n    \"\"\"Check if x is a palindrome and y is a substring of x and z is a factor of 12\"\"\"\n    return x == x[::-1] and y in x and 12 % z == 0",
        "solution_func": "def g(y='orl', z=4):\n    return 'hello'",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: list, y=100, z=3.14) -> bool:\n    \"\"\"Check if x contains y and the average of x is greater than z\"\"\"\n    return y in x and sum(x) / len(x) > z\n\ndef g(y=50, z=2.5):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 244,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: list, y=100, z=3.14) -> bool:\n    \"\"\"Check if x contains y and the average of x is greater than z\"\"\"\n    return y in x and sum(x) / len(x) > z",
        "solution_func": "def g(y=50, z=2.5):\n    return [10, 20, 30, 40, 50]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if a given character is the first and last character of the string.\"\"\"\n    return s[0] == char and s[-1] == char\ndef g(char='a'):\n    return f'{char}a{char}'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 244,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if a given character is the first and last character of the string.\"\"\"\n    return s[0] == char and s[-1] == char",
        "solution_func": "def g(char='a'):\n    return f'{char}a{char}'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find three numbers from a list that add up to a given target.\"\"\"\n    return any(sum(comb) == target for comb in combinations(nums, 3))\ndef g(target=15):\n    return [1, 2, target-3]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 245,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find three numbers from a list that add up to a given target.\"\"\"\n    return any(sum(comb) == target for comb in combinations(nums, 3))",
        "solution_func": "def g(target=15):\n    return [1, 2, target-3]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find two numbers from a list that multiply to a given target.\"\"\"\n    return any(a * b == target for a, b in combinations(nums, 2))\ndef g(target=100):\n    return [10, target//10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 245,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find two numbers from a list that multiply to a given target.\"\"\"\n    return any(a * b == target for a, b in combinations(nums, 2))",
        "solution_func": "def g(target=100):\n    return [10, target//10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, sub='world', target='Hello world!') -> bool:\n    \"\"\"Check if a given string contains a specific substring.\"\"\"\n    return sub in s\ndef g(sub='world', target='Hello world!'):\n    return target.replace(sub, '')\nassert f(g())\n",
        "emb": null,
        "idx_generation": 245,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, sub='world', target='Hello world!') -> bool:\n    \"\"\"Check if a given string contains a specific substring.\"\"\"\n    return sub in s",
        "solution_func": "def g(sub='world', target='Hello world!'):\n    return target.replace(sub, '')",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in a list that sum up to a target value\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=0):\n    return [1, -1, 2, -2]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 245,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in a list that sum up to a target value\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(target=0):\n    return [1, -1, 2, -2]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find a row and column in a matrix where the sum of the elements is equal to the target value\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if sum(matrix[i]) == target or sum(row[j] for row in matrix) == target:\n                return True\n    return False\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 245,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find a row and column in a matrix where the sum of the elements is equal to the target value\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if sum(matrix[i]) == target or sum(row[j] for row in matrix) == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Find a word in a list of words that is an anagram of the target word\"\"\"\n    from collections import Counter\n    target_counter = Counter(target)\n    for word in words:\n        if Counter(word) == target_counter:\n            return True\n    return False\ndef g(target='python'):\n    return ['typhon', 'nothy', 'thonpy', 'notpyh']\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 245,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Find a word in a list of words that is an anagram of the target word\"\"\"\n    from collections import Counter\n    target_counter = Counter(target)\n    for word in words:\n        if Counter(word) == target_counter:\n            return True\n    return False",
        "solution_func": "def g(target='python'):\n    return ['typhon', 'nothy', 'thonpy', 'notpyh']",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11]) -> bool:\n    \"\"\"Find an integer n that is divisible by all the primes in the list primes\"\"\"\n    return all(n % p == 0 for p in primes)\ndef g(primes=[2, 3, 5, 7, 11]):\n    return primes[-1] * primes[-2] * primes[-3]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 245,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11]) -> bool:\n    \"\"\"Find an integer n that is divisible by all the primes in the list primes\"\"\"\n    return all(n % p == 0 for p in primes)",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11]):\n    return primes[-1] * primes[-2] * primes[-3]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m: int, k: int) -> bool:\n    \"\"\"Find an integer n that is divisible by m and the sum of its digits is equal to k\"\"\"\n    return n % m == 0 and sum(int(d) for d in str(n)) == k\ndef g(m=7, k=10):\n    return int('1' + '0' * k) * m\nassert f(g())\n",
        "emb": null,
        "idx_generation": 245,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m: int, k: int) -> bool:\n    \"\"\"Find an integer n that is divisible by m and the sum of its digits is equal to k\"\"\"\n    return n % m == 0 and sum(int(d) for d in str(n)) == k",
        "solution_func": "def g(m=7, k=10):\n    return int('1' + '0' * k) * m",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=7, c=11) -> bool:\n    \"\"\"Find an integer n that satisfies a^n + b^n = c^n\"\"\"\n    return a ** n + b ** n == c ** n\ndef g(a=5, b=7, c=11):\n    return 1\nassert f(g())\n",
        "emb": null,
        "idx_generation": 245,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=5, b=7, c=11) -> bool:\n    \"\"\"Find an integer n that satisfies a^n + b^n = c^n\"\"\"\n    return a ** n + b ** n == c ** n",
        "solution_func": "def g(a=5, b=7, c=11):\n    return 1",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='cat', n=2) -> bool:\n    \"\"\"Find the count of a substring within a larger string.\"\"\"\n    return s.count(substr) == n\ndef g(substr='cat', n=2):\n    s = substr * n\n    return s\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 245,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr='cat', n=2) -> bool:\n    \"\"\"Find the count of a substring within a larger string.\"\"\"\n    return s.count(substr) == n",
        "solution_func": "def g(substr='cat', n=2):\n    s = substr * n\n    return s",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(num: int, a=1, b=4, c=3) -> bool:\n    \"\"\"Check if a number is a solution to a quadratic equation.\"\"\"\n    return a*num**2 + b*num + c == 0\n\ndef g(a=1, b=4, c=3):\n    return (-b + sqrt(b**2 - 4*a*c)) / (2*a)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 246,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(num: int, a=1, b=4, c=3) -> bool:\n    \"\"\"Check if a number is a solution to a quadratic equation.\"\"\"\n    return a*num**2 + b*num + c == 0",
        "solution_func": "def g(a=1, b=4, c=3):\n    return (-b + sqrt(b**2 - 4*a*c)) / (2*a)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target: int, threshold=5) -> bool:\n    \"\"\"Check if the sum of any two numbers in a list is greater than a target value.\"\"\"\n    return any((nums[i] + nums[j] > target for i in range(len(nums)) for j in range(i+1, len(nums)))) and len(nums) > threshold\n\ndef g(target: int, threshold=5):\n    nums = [random.randint(1, 100) for _ in range(threshold+1)]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 246,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target: int, threshold=5) -> bool:\n    \"\"\"Check if the sum of any two numbers in a list is greater than a target value.\"\"\"\n    return any((nums[i] + nums[j] > target for i in range(len(nums)) for j in range(i+1, len(nums)))) and len(nums) > threshold",
        "solution_func": "def g(target: int, threshold=5):\n    nums = [random.randint(1, 100) for _ in range(threshold+1)]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, threshold=5) -> bool:\n    \"\"\"Check if the sum of any two numbers in a list is greater than a target value.\"\"\"\n    return any((nums[i] + nums[j] > target for i in range(len(nums)) for j in range(i+1, len(nums)))) and len(nums) > threshold\n\ndef g(target: int, threshold=5):\n    nums = [i for i in range(1, threshold+1)]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 246,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int, threshold=5) -> bool:\n    \"\"\"Check if the sum of any two numbers in a list is greater than a target value.\"\"\"\n    return any((nums[i] + nums[j] > target for i in range(len(nums)) for j in range(i+1, len(nums)))) and len(nums) > threshold",
        "solution_func": "def g(target: int, threshold=5):\n    nums = [i for i in range(1, threshold+1)]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, char_count={'a': 2, 'b': 3, 'c': 1}) -> bool:\n    \"\"\"Check if the given word can be formed using the characters and their respective counts\"\"\"\n    return all((word.count(char) == count for char, count in char_count.items()))\ndef g(char_count={'a': 2, 'b': 3, 'c': 1}):\n    return ''.join([char * count for char, count in char_count.items()])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 246,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str, char_count={'a': 2, 'b': 3, 'c': 1}) -> bool:\n    \"\"\"Check if the given word can be formed using the characters and their respective counts\"\"\"\n    return all((word.count(char) == count for char, count in char_count.items()))",
        "solution_func": "def g(char_count={'a': 2, 'b': 3, 'c': 1}):\n    return ''.join([char * count for char, count in char_count.items()])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exist three distinct numbers in the list that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g(target=20):\n    return [1, 2, target-3]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 246,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exist three distinct numbers in the list that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))",
        "solution_func": "def g(target=20):\n    return [1, 2, target-3]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sum=[15, 18, 12], col_sum=[7, 13, 25]) -> bool:\n    \"\"\"Check if the matrix can be formed with given row sums and column sums\"\"\"\n    return all((sum(row) == row_sum[i] for i, row in enumerate(matrix))) and all((sum(col) == col_sum[i] for i, col in enumerate(zip(*matrix))))\ndef g(row_sum=[15, 18, 12], col_sum=[7, 13, 25]):\n    return [[min(row_sum[i], col_sum[j]) for j in range(len(col_sum))] for i in range(len(row_sum))]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 246,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row_sum=[15, 18, 12], col_sum=[7, 13, 25]) -> bool:\n    \"\"\"Check if the matrix can be formed with given row sums and column sums\"\"\"\n    return all((sum(row) == row_sum[i] for i, row in enumerate(matrix))) and all((sum(col) == col_sum[i] for i, col in enumerate(zip(*matrix))))",
        "solution_func": "def g(row_sum=[15, 18, 12], col_sum=[7, 13, 25]):\n    return [[min(row_sum[i], col_sum[j]) for j in range(len(col_sum))] for i in range(len(row_sum))]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, y: int, r=5) -> bool:\n    \"\"\"Check if a point (x, y) is inside a circle with radius r\"\"\"\n    return math.sqrt(x**2 + y**2) <= r\ndef g(x=3, y=4, r=5):\n    return x, y, r\nassert f(*g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 246,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: int, y: int, r=5) -> bool:\n    \"\"\"Check if a point (x, y) is inside a circle with radius r\"\"\"\n    return math.sqrt(x**2 + y**2) <= r",
        "solution_func": "def g(x=3, y=4, r=5):\n    return x, y, r",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: list, n=3, m=5) -> bool:\n    \"\"\"Check if a given list has exactly n elements and the sum of its elements is equal to m\"\"\"\n    return len(lst) == n and sum(lst) == m\ndef g(n=3, m=5):\n    return [1, 1, 3], n, m\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 246,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: list, n=3, m=5) -> bool:\n    \"\"\"Check if a given list has exactly n elements and the sum of its elements is equal to m\"\"\"\n    return len(lst) == n and sum(lst) == m",
        "solution_func": "def g(n=3, m=5):\n    return [1, 1, 3], n, m",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if n is divisible by k\"\"\"\n    return n % k == 0\ndef g(k=3):\n    return k**2, k\nassert f(*g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 246,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if n is divisible by k\"\"\"\n    return n % k == 0",
        "solution_func": "def g(k=3):\n    return k**2, k",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, pi=3.14159) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return math.isqrt(n)**2 == n\ndef g(pi=3.14159):\n    return int(math.sqrt(pi))\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 246,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, pi=3.14159) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return math.isqrt(n)**2 == n",
        "solution_func": "def g(pi=3.14159):\n    return int(math.sqrt(pi))",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(dt: datetime, year=2022, month=5, day=10) -> bool:\n    \"\"\"Check if a given date matches the specified year, month, and day\"\"\"\n    return dt.year == year and dt.month == month and dt.day == day\n\ndef g(year=2022, month=5, day=10):\n    return datetime(year, month, day)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 247,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(dt: datetime, year=2022, month=5, day=10) -> bool:\n    \"\"\"Check if a given date matches the specified year, month, and day\"\"\"\n    return dt.year == year and dt.month == month and dt.day == day",
        "solution_func": "def g(year=2022, month=5, day=10):\n    return datetime(year, month, day)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], target=100, num_elements=10) -> bool:\n    \"\"\"Check if there exists a sublist of a given list that sums up to a target value\"\"\"\n    sublists = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublists.append(lst[i:j])\n    return any((sum(sublist) == target for sublist in sublists)) and len(sublists) >= num_elements\n\ndef g(target=100, num_elements=10):\n    lst = random.choices(range(1, 50), k=20)\n    return lst\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 247,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(lst: List[int], target=100, num_elements=10) -> bool:\n    \"\"\"Check if there exists a sublist of a given list that sums up to a target value\"\"\"\n    sublists = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublists.append(lst[i:j])\n    return any((sum(sublist) == target for sublist in sublists)) and len(sublists) >= num_elements",
        "solution_func": "def g(target=100, num_elements=10):\n    lst = random.choices(range(1, 50), k=20)\n    return lst",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='puzzle') -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substr.lower() in s.lower()\n\ndef g(substr='puzzle'):\n    s = \"This is a puzzle to solve.\"\n    return s\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 247,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr='puzzle') -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substr.lower() in s.lower()",
        "solution_func": "def g(substr='puzzle'):\n    s = \"This is a puzzle to solve.\"\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, c='a', n=5) -> bool:\n    \"\"\"Find a string with a given character c repeated n times\"\"\"\n    return s.count(c) == n and len(s) == n\ndef g(c='a', n=5):\n    return c * n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 247,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, c='a', n=5) -> bool:\n    \"\"\"Find a string with a given character c repeated n times\"\"\"\n    return s.count(c) == n and len(s) == n",
        "solution_func": "def g(c='a', n=5):\n    return c * n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target\ndef g(target=100, n=5):\n    return list(range(1, n+1))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 247,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target",
        "solution_func": "def g(target=100, n=5):\n    return list(range(1, n+1))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target\ndef g(target=100, n=5):\n    return list(range(1, n+1))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 247,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target",
        "solution_func": "def g(target=100, n=5):\n    return list(range(1, n+1))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Find a value of n such that n is a power of a and the sum of the digits of n is equal to b.\"\"\"\n    return n == a ** int(math.log(n, a)) and sum(int(digit) for digit in str(n)) == b\ndef g(a=2, b=3):\n    n = a\n    while True:\n        if n == a ** int(math.log(n, a)) and sum(int(digit) for digit in str(n)) == b:\n            return n\n        n += 1\nassert f(g())\n",
        "emb": null,
        "idx_generation": 247,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Find a value of n such that n is a power of a and the sum of the digits of n is equal to b.\"\"\"\n    return n == a ** int(math.log(n, a)) and sum(int(digit) for digit in str(n)) == b",
        "solution_func": "def g(a=2, b=3):\n    n = a\n    while True:\n        if n == a ** int(math.log(n, a)) and sum(int(digit) for digit in str(n)) == b:\n            return n\n        n += 1",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=2) -> bool:\n    \"\"\"Find a substring of a given string that appears consecutively n times.\"\"\"\n    return string in string * n\ndef g(n=2):\n    string = \"hello\"\n    return string\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 247,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, n=2) -> bool:\n    \"\"\"Find a substring of a given string that appears consecutively n times.\"\"\"\n    return string in string * n",
        "solution_func": "def g(n=2):\n    string = \"hello\"\n    return string",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, k: int, a=3, b=4) -> bool:\n    \"\"\"Find a pair of integers (x,y) such that x is divisible by a, y is divisible by b, and x + y = n.\"\"\"\n    return n % a == 0 and n % b == 0\ndef g(a=3, b=4):\n    n = a * b\n    return n, n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 247,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, k: int, a=3, b=4) -> bool:\n    \"\"\"Find a pair of integers (x,y) such that x is divisible by a, y is divisible by b, and x + y = n.\"\"\"\n    return n % a == 0 and n % b == 0",
        "solution_func": "def g(a=3, b=4):\n    n = a * b\n    return n, n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(palindrome: str) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return palindrome == palindrome[::-1]\ndef g(palindrome='racecar'):\n    return palindrome\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 247,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(palindrome: str) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return palindrome == palindrome[::-1]",
        "solution_func": "def g(palindrome='racecar'):\n    return palindrome",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], k=4, target=19) -> bool:\n    \"\"\"Find if there exists a subset of k elements in the array that sums up to the target value.\"\"\"\n    subsets = combinations(arr, k)\n    for subset in subsets:\n        if sum(subset) == target:\n            return True\n    return False\n\ndef g(k=4, target=19):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 248,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], k=4, target=19) -> bool:\n    \"\"\"Find if there exists a subset of k elements in the array that sums up to the target value.\"\"\"\n    subsets = combinations(arr, k)\n    for subset in subsets:\n        if sum(subset) == target:\n            return True\n    return False",
        "solution_func": "def g(k=4, target=19):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if there exists a substring of length k in s that contains all unique characters.\"\"\"\n    for i in range(len(s) - k + 1):\n        if len(set(s[i:i+k])) == k:\n            return True\n    return False\n\ndef g(k=3):\n    return \"abcdefghij\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 248,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if there exists a substring of length k in s that contains all unique characters.\"\"\"\n    for i in range(len(s) - k + 1):\n        if len(set(s[i:i+k])) == k:\n            return True\n    return False",
        "solution_func": "def g(k=3):\n    return \"abcdefghij\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there exists a path in the matrix that sums up to the target value.\"\"\"\n    def dfs(row, col, curr_sum):\n        if row < 0 or row >= len(matrix) or col < 0 or col >= len(matrix[0]):\n            return False\n        if curr_sum + matrix[row][col] == target:\n            return True\n        return dfs(row + 1, col, curr_sum + matrix[row][col]) or dfs(row, col + 1, curr_sum + matrix[row][col])\n    \n    return dfs(0, 0, 0)\n\ndef g(target=10):\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 248,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there exists a path in the matrix that sums up to the target value.\"\"\"\n    def dfs(row, col, curr_sum):\n        if row < 0 or row >= len(matrix) or col < 0 or col >= len(matrix[0]):\n            return False\n        if curr_sum + matrix[row][col] == target:\n            return True\n        return dfs(row + 1, col, curr_sum + matrix[row][col]) or dfs(row, col + 1, curr_sum + matrix[row][col])\n    \n    return dfs(0, 0, 0)",
        "solution_func": "def g(target=10):\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=2) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=2):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 248,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=2) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=2):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if all words in the list start with the given prefix\"\"\"\n    return all(word.startswith(prefix) for word in words)\ndef g(prefix='pre'):\n    return ['prefix', 'pretext', 'preserve', 'predator']\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 248,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if all words in the list start with the given prefix\"\"\"\n    return all(word.startswith(prefix) for word in words)",
        "solution_func": "def g(prefix='pre'):\n    return ['prefix', 'pretext', 'preserve', 'predator']",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the given target number exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 248,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the given target number exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the number n is a multiple of any number in the given list.\"\"\"\n    return any(n % num == 0 for num in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[-1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 248,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the number n is a multiple of any number in the given list.\"\"\"\n    return any(n % num == 0 for num in nums)",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[-1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(month: str, months=['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']) -> bool:\n    \"\"\"Check if the given month is the last month of the year.\"\"\"\n    return month == months[-1]\ndef g(months=['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']):\n    return months[-1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 248,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(month: str, months=['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']) -> bool:\n    \"\"\"Check if the given month is the last month of the year.\"\"\"\n    return month == months[-1]",
        "solution_func": "def g(months=['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']):\n    return months[-1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], num=5) -> bool:\n    \"\"\"Check if the number 'num' appears in the given list.\"\"\"\n    return num in lst\ndef g(num=5):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 248,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], num=5) -> bool:\n    \"\"\"Check if the number 'num' appears in the given list.\"\"\"\n    return num in lst",
        "solution_func": "def g(num=5):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: float, y: float, z: float, a=5.0, b=3.0) -> bool:\n    \"\"\"Check if three numbers satisfy a mathematical condition.\"\"\"\n    return (sqrt(x) + sqrt(y) + sqrt(z)) / (a + b) == 1.0\ndef g(a=5.0, b=3.0):\n    return [(a + b)**2, (a + b)**2, (a + b)**2]\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 248,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: float, y: float, z: float, a=5.0, b=3.0) -> bool:\n    \"\"\"Check if three numbers satisfy a mathematical condition.\"\"\"\n    return (sqrt(x) + sqrt(y) + sqrt(z)) / (a + b) == 1.0",
        "solution_func": "def g(a=5.0, b=3.0):\n    return [(a + b)**2, (a + b)**2, (a + b)**2]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(words: List[str], target_length=7, target_count=3) -> bool:\n    \"\"\"Find a list of words that have a length of target_length and appear target_count times in the input list.\"\"\"\n    for w in words:\n        assert len(w) == target_length\n    counts = {w: words.count(w) for w in set(words)}\n    return sum(counts.values()) >= target_count and all(count >= target_count for count in counts.values())\ndef g(target_length=7, target_count=3):\n    from itertools import permutations\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    perms = permutations(letters, target_length)\n    return [''.join(p) for p in perms]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 249,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(words: List[str], target_length=7, target_count=3) -> bool:\n    \"\"\"Find a list of words that have a length of target_length and appear target_count times in the input list.\"\"\"\n    for w in words:\n        assert len(w) == target_length\n    counts = {w: words.count(w) for w in set(words)}\n    return sum(counts.values()) >= target_count and all(count >= target_count for count in counts.values())",
        "solution_func": "def g(target_length=7, target_count=3):\n    from itertools import permutations\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    perms = permutations(letters, target_length)\n    return [''.join(p) for p in perms]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(pairs: List[Tuple[int, int]], target=100) -> bool:\n    \"\"\"Find a pair of numbers whose sum is equal to the target value.\"\"\"\n    return any(a + b == target for (a, b) in pairs)\ndef g(target=100):\n    from random import randint\n    pairs = [(randint(1, target), randint(1, target)) for _ in range(100)]\n    return pairs\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 249,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(pairs: List[Tuple[int, int]], target=100) -> bool:\n    \"\"\"Find a pair of numbers whose sum is equal to the target value.\"\"\"\n    return any(a + b == target for (a, b) in pairs)",
        "solution_func": "def g(target=100):\n    from random import randint\n    pairs = [(randint(1, target), randint(1, target)) for _ in range(100)]\n    return pairs",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find a pair of numbers in the matrix whose sum is equal to the target value.\"\"\"\n    return any(a + b == target for row in matrix for a in row for b in row)\ndef g(target=0):\n    from random import randint\n    matrix = [[randint(-100, 100) for _ in range(10)] for _ in range(10)]\n    return matrix\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 249,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find a pair of numbers in the matrix whose sum is equal to the target value.\"\"\"\n    return any(a + b == target for row in matrix for a in row for b in row)",
        "solution_func": "def g(target=0):\n    from random import randint\n    matrix = [[randint(-100, 100) for _ in range(10)] for _ in range(10)]\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(a: float, b=5.6, c=10) -> bool:\n    \"\"\"Find a value of 'a' such that a^2 + b^2 = c^2\"\"\"\n    return math.isclose(a**2 + b**2, c**2)\ndef g(b=5.6, c=10):\n    return math.sqrt(c**2 - b**2)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 249,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(a: float, b=5.6, c=10) -> bool:\n    \"\"\"Find a value of 'a' such that a^2 + b^2 = c^2\"\"\"\n    return math.isclose(a**2 + b**2, c**2)",
        "solution_func": "def g(b=5.6, c=10):\n    return math.sqrt(c**2 - b**2)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [3, 7, 2, 5, 6, 4]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 249,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [3, 7, 2, 5, 6, 4]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Find a substring of length n that appears twice consecutively in the given string.\"\"\"\n    for i in range(len(s) - n):\n        if s[i:i+n] == s[i+n:i+2*n]:\n            return True\n    return False\ndef g(n=3):\n    return \"abccba\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 249,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Find a substring of length n that appears twice consecutively in the given string.\"\"\"\n    for i in range(len(s) - n):\n        if s[i:i+n] == s[i+n:i+2*n]:\n            return True\n    return False",
        "solution_func": "def g(n=3):\n    return \"abccba\"",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: str, y: str, z: str, a=3, b=5, c=7) -> bool:\n    \"\"\"Check if the concatenation of x, y, and z is equal to a*b*c\"\"\"\n    return x + y + z == a * b * c\ndef g(a=3, b=5, c=7):\n    return str(a * b * c), str(a), str(b), str(c)\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 249,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, y: str, z: str, a=3, b=5, c=7) -> bool:\n    \"\"\"Check if the concatenation of x, y, and z is equal to a*b*c\"\"\"\n    return x + y + z == a * b * c",
        "solution_func": "def g(a=3, b=5, c=7):\n    return str(a * b * c), str(a), str(b), str(c)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, a=10, b=20, c=30) -> bool:\n    \"\"\"Check if the sum of the square roots of x, y, and z is equal to the square root of a*b*c\"\"\"\n    return math.isclose(math.sqrt(x) + math.sqrt(y) + math.sqrt(z), math.sqrt(a*b*c))\ndef g(a=10, b=20, c=30):\n    return a**2, b**2, c**2\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 249,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, a=10, b=20, c=30) -> bool:\n    \"\"\"Check if the sum of the square roots of x, y, and z is equal to the square root of a*b*c\"\"\"\n    return math.isclose(math.sqrt(x) + math.sqrt(y) + math.sqrt(z), math.sqrt(a*b*c))",
        "solution_func": "def g(a=10, b=20, c=30):\n    return a**2, b**2, c**2",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(x: int, y: int, z: int, a=100, b=200, c=300) -> bool:\n    \"\"\"Check if the product of x, y, and z is equal to a*b*c\"\"\"\n    return x * y * z == a * b * c\ndef g(a=100, b=200, c=300):\n    return random.randint(1, 100), random.randint(1, 200), random.randint(1, 300)\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 249,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(x: int, y: int, z: int, a=100, b=200, c=300) -> bool:\n    \"\"\"Check if the product of x, y, and z is equal to a*b*c\"\"\"\n    return x * y * z == a * b * c",
        "solution_func": "def g(a=100, b=200, c=300):\n    return random.randint(1, 100), random.randint(1, 200), random.randint(1, 300)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x: float) -> bool:\n    \"\"\"Find a number m such that n is equal to the square root of m\"\"\"\n    return n == math.sqrt(x)\n    \ndef g(n: int):\n    return n**2\n    \nassert f(g(9), 9)\n",
        "emb": null,
        "idx_generation": 249,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x: float) -> bool:\n    \"\"\"Find a number m such that n is equal to the square root of m\"\"\"\n    return n == math.sqrt(x)",
        "solution_func": "def g(n: int):\n    return n**2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, factors=[2, 3, 5, 7]) -> bool:\n    \"\"\"Check if a number is divisible by all the factors\"\"\"\n    return all((n % f == 0 for f in factors))\ndef g(factors=[2, 3, 5, 7]):\n    n = 1\n    for f in factors:\n        n *= f\n    return n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 250,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, factors=[2, 3, 5, 7]) -> bool:\n    \"\"\"Check if a number is divisible by all the factors\"\"\"\n    return all((n % f == 0 for f in factors))",
        "solution_func": "def g(factors=[2, 3, 5, 7]):\n    n = 1\n    for f in factors:\n        n *= f\n    return n",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substrings=['abc', 'def', 'ghi', 'jkl']) -> bool:\n    \"\"\"Check if a string contains all the given substrings\"\"\"\n    return all((s in string for s in substrings))\ndef g(substrings=['abc', 'def', 'ghi', 'jkl']):\n    string = ''.join(substrings)\n    return string\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 250,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substrings=['abc', 'def', 'ghi', 'jkl']) -> bool:\n    \"\"\"Check if a string contains all the given substrings\"\"\"\n    return all((s in string for s in substrings))",
        "solution_func": "def g(substrings=['abc', 'def', 'ghi', 'jkl']):\n    string = ''.join(substrings)\n    return string",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    return n in primes\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19]):\n    return primes[-1]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 250,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    return n in primes",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19]):\n    return primes[-1]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, s=10) -> bool:\n    \"\"\"Find a number that is divisible by a specific value.\"\"\"\n    return int(x) % s == 0\ndef g(s=10):\n    return str(s) * s\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 250,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, s=10) -> bool:\n    \"\"\"Find a number that is divisible by a specific value.\"\"\"\n    return int(x) % s == 0",
        "solution_func": "def g(s=10):\n    return str(s) * s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=5) -> bool:\n    \"\"\"Find a matrix that has a specific number of rows and columns.\"\"\"\n    return len(matrix) == len(matrix[0]) == n\ndef g(n=5):\n    return [[1] * n for _ in range(n)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 250,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=5) -> bool:\n    \"\"\"Find a matrix that has a specific number of rows and columns.\"\"\"\n    return len(matrix) == len(matrix[0]) == n",
        "solution_func": "def g(n=5):\n    return [[1] * n for _ in range(n)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Find a string that has a specific number of occurrences of a character.\"\"\"\n    return s.count('a') == n\ndef g(n=3):\n    return 'a' * n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 250,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Find a string that has a specific number of occurrences of a character.\"\"\"\n    return s.count('a') == n",
        "solution_func": "def g(n=3):\n    return 'a' * n",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=0):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 250,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=0):\n    nums = [1, 2, 3, 4, 5]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 250,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the string is a palindrome.\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"racecar\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order.\"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 250,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order.\"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr=\"world\") -> bool:\n    \"\"\"Check if a substring is present in a given string\"\"\"\n    return substr in s\ndef g(substr=\"world\"):\n    return \"Hello, \" + substr + \"!\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 250,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr=\"world\") -> bool:\n    \"\"\"Check if a substring is present in a given string\"\"\"\n    return substr in s",
        "solution_func": "def g(substr=\"world\"):\n    return \"Hello, \" + substr + \"!\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Check if a given date is in the future.\"\"\"\n    current_date = datetime.now().strftime(format)\n    return datetime.strptime(date, format) > datetime.strptime(current_date, format)\n\ndef g(format='%Y-%m-%d'):\n    future_date = (datetime.now() + timedelta(days=7)).strftime(format)\n    return future_date\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 251,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Check if a given date is in the future.\"\"\"\n    current_date = datetime.now().strftime(format)\n    return datetime.strptime(date, format) > datetime.strptime(current_date, format)",
        "solution_func": "def g(format='%Y-%m-%d'):\n    future_date = (datetime.now() + timedelta(days=7)).strftime(format)\n    return future_date",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    return num > 1 and all(num % i != 0 for i in range(2, int(num ** 0.5) + 1))\n\ndef g():\n    num = 31\n    return num\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 251,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    return num > 1 and all(num % i != 0 for i in range(2, int(num ** 0.5) + 1))",
        "solution_func": "def g():\n    num = 31\n    return num",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(li: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in a list whose sum is equal to the target number.\"\"\"\n    return any(target - num in li for num in li)\n\ndef g():\n    li = random.sample(range(1, 100), 10)\n    target = random.randint(1, 100)\n    return li, target\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 251,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(li: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in a list whose sum is equal to the target number.\"\"\"\n    return any(target - num in li for num in li)",
        "solution_func": "def g():\n    li = random.sample(range(1, 100), 10)\n    target = random.randint(1, 100)\n    return li, target",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=1, b=2, c=3) -> bool:\n    \"\"\"Check if the given values satisfy the equation a*x^2 + b*y^2 + c*z^2 = 1\"\"\"\n    assert all([v > 0 for v in [x, y, z]])\n    return math.isclose(a*x**2 + b*y**2 + c*z**2, 1)\n\ndef g(a=1, b=2, c=3):\n    x = 1 / math.sqrt(a)\n    y = 1 / math.sqrt(b)\n    z = 1 / math.sqrt(c)\n    return x, y, z\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 251,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=1, b=2, c=3) -> bool:\n    \"\"\"Check if the given values satisfy the equation a*x^2 + b*y^2 + c*z^2 = 1\"\"\"\n    assert all([v > 0 for v in [x, y, z]])\n    return math.isclose(a*x**2 + b*y**2 + c*z**2, 1)",
        "solution_func": "def g(a=1, b=2, c=3):\n    x = 1 / math.sqrt(a)\n    y = 1 / math.sqrt(b)\n    z = 1 / math.sqrt(c)\n    return x, y, z",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a sublist in lst such that the sum of its elements is equal to the target\"\"\"\n    return any(sum(sublst) == target for i in range(n) for sublst in combinations(lst, i))\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return len(lst), lst\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 251,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a sublist in lst such that the sum of its elements is equal to the target\"\"\"\n    return any(sum(sublst) == target for i in range(n) for sublst in combinations(lst, i))",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    return len(lst), lst",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int], target=10, m=3) -> bool:\n    \"\"\"Check if there exists a sublist in lst of length m such that the sum of its elements is equal to the target\"\"\"\n    return any(sum(sublst) == target for sublst in combinations(lst, m))\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return len(lst), lst\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 251,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst: List[int], target=10, m=3) -> bool:\n    \"\"\"Check if there exists a sublist in lst of length m such that the sum of its elements is equal to the target\"\"\"\n    return any(sum(sublst) == target for sublst in combinations(lst, m))",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    return len(lst), lst",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: list, target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target number\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 251,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num_list: list, target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target number\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(color_list: list, color='blue') -> bool:\n    \"\"\"Check if the given color exists in the list of colors\"\"\"\n    return color in color_list\ndef g(color='blue'):\n    return ['red', 'green', 'yellow', color]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 251,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(color_list: list, color='blue') -> bool:\n    \"\"\"Check if the given color exists in the list of colors\"\"\"\n    return color in color_list",
        "solution_func": "def g(color='blue'):\n    return ['red', 'green', 'yellow', color]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: list, target=10) -> bool:\n    \"\"\"Check if the target number exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, target]]\n    return matrix\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 251,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: list, target=10) -> bool:\n    \"\"\"Check if the target number exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, target]]\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=30) -> bool:\n    \"\"\"Given a list of integers, find a subset of the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, target_sum, i, curr_sum):\n        if curr_sum == target_sum:\n            return True\n        if i == len(nums):\n            return False\n        include = subset_sum(nums, target_sum, i+1, curr_sum+nums[i])\n        exclude = subset_sum(nums, target_sum, i+1, curr_sum)\n        return include or exclude\n    \n    return subset_sum(nums, target_sum, 0, 0)\n\ndef g(target_sum=30):\n    return [10, 5, 15, 20, 25]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 251,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=30) -> bool:\n    \"\"\"Given a list of integers, find a subset of the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, target_sum, i, curr_sum):\n        if curr_sum == target_sum:\n            return True\n        if i == len(nums):\n            return False\n        include = subset_sum(nums, target_sum, i+1, curr_sum+nums[i])\n        exclude = subset_sum(nums, target_sum, i+1, curr_sum)\n        return include or exclude\n    \n    return subset_sum(nums, target_sum, 0, 0)",
        "solution_func": "def g(target_sum=30):\n    return [10, 5, 15, 20, 25]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the number n is in the list of nums\"\"\"\n    return n in nums\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[0]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 252,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the number n is in the list of nums\"\"\"\n    return n in nums",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[0]",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if the character char is present in the string s\"\"\"\n    return char in s\ndef g(char='a'):\n    return char\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 252,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if the character char is present in the string s\"\"\"\n    return char in s",
        "solution_func": "def g(char='a'):\n    return char",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: List[int], threshold=50) -> bool:\n    \"\"\"Check if there is any element in the list lst that is greater than the threshold\"\"\"\n    return any([x > threshold for x in lst])\ndef g():\n    return [10, 20, 30, 40, 50]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 252,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], threshold=50) -> bool:\n    \"\"\"Check if there is any element in the list lst that is greater than the threshold\"\"\"\n    return any([x > threshold for x in lst])",
        "solution_func": "def g():\n    return [10, 20, 30, 40, 50]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray) -> bool:\n    \"\"\"Check if the given 2D array is a magic square.\"\"\"\n    n, m = arr.shape\n    if n != m:\n        return False\n    \n    target_sum = np.sum(arr[0, :])\n\n    # Check rows\n    if not np.all(np.sum(arr, axis=1) == target_sum):\n        return False\n\n    # Check columns\n    if not np.all(np.sum(arr, axis=0) == target_sum):\n        return False\n\n    # Check diagonals\n    if np.sum(np.diag(arr)) != target_sum or np.sum(np.diag(np.fliplr(arr))) != target_sum:\n        return False\n\n    return True\n\ndef g():\n    return np.array([[8, 1, 6], [3, 5, 7], [4, 9, 2]])\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 252,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray) -> bool:\n    \"\"\"Check if the given 2D array is a magic square.\"\"\"\n    n, m = arr.shape\n    if n != m:\n        return False\n    \n    target_sum = np.sum(arr[0, :])\n\n    # Check rows\n    if not np.all(np.sum(arr, axis=1) == target_sum):\n        return False\n\n    # Check columns\n    if not np.all(np.sum(arr, axis=0) == target_sum):\n        return False\n\n    # Check diagonals\n    if np.sum(np.diag(arr)) != target_sum or np.sum(np.diag(np.fliplr(arr))) != target_sum:\n        return False\n\n    return True",
        "solution_func": "def g():\n    return np.array([[8, 1, 6], [3, 5, 7], [4, 9, 2]])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(n: int, arr: list) -> bool:\n    \"\"\"Find if there exists a subset of the given list with sum equal to n.\"\"\"\n    for r in range(1, len(arr)+1):\n        for subset in itertools.combinations(arr, r):\n            if sum(subset) == n:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return 6\n\nassert f(g(), [1, 2, 3, 4, 5])\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 252,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\n\ndef f(n: int, arr: list) -> bool:\n    \"\"\"Find if there exists a subset of the given list with sum equal to n.\"\"\"\n    for r in range(1, len(arr)+1):\n        for subset in itertools.combinations(arr, r):\n            if sum(subset) == n:\n                return True\n    return False",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5]):\n    return 6",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(sides: list) -> bool:\n    \"\"\"Check if the given list of side lengths can form a valid triangle.\"\"\"\n    a, b, c = sides\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if a + b <= c or b + c <= a or c + a <= b:\n        return False\n    return True\n\ndef g():\n    return [3, 4, 5]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 252,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(sides: list) -> bool:\n    \"\"\"Check if the given list of side lengths can form a valid triangle.\"\"\"\n    a, b, c = sides\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if a + b <= c or b + c <= a or c + a <= b:\n        return False\n    return True",
        "solution_func": "def g():\n    return [3, 4, 5]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"Find the combination of n elements from lst that adds up to the target value.\"\"\"\n    from itertools import combinations\n    for combo in combinations(lst, n):\n        if sum(combo) == target:\n            return True\n    return False\ndef g(lst=[1, 2, 3, 4, 5], target=10):\n    from itertools import combinations\n    for n in range(1, len(lst)+1):\n        for combo in combinations(lst, n):\n            if sum(combo) == target:\n                return combo\n    return []\nassert f(g())\n",
        "emb": null,
        "idx_generation": 252,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"Find the combination of n elements from lst that adds up to the target value.\"\"\"\n    from itertools import combinations\n    for combo in combinations(lst, n):\n        if sum(combo) == target:\n            return True\n    return False",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5], target=10):\n    from itertools import combinations\n    for n in range(1, len(lst)+1):\n        for combo in combinations(lst, n):\n            if sum(combo) == target:\n                return combo\n    return []",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if n is a prime number and if it is in the list lst.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return is_prime(n) and n in lst\ndef g(lst=[1, 2, 3, 4, 5]):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in lst if is_prime(num)]\n    return primes[0] if primes else -1\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 252,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if n is a prime number and if it is in the list lst.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return is_prime(n) and n in lst",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in lst if is_prime(num)]\n    return primes[0] if primes else -1",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if s is a palindrome and if it contains exactly n vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = s.lower()\n    vowel_count = 0\n    for char in s:\n        if char in vowels:\n            vowel_count += 1\n    return s == s[::-1] and vowel_count == n\ndef g(n=4):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = ''\n    for i in range(n):\n        s += vowels[i % 5]\n    return s\nassert f(g())\n",
        "emb": null,
        "idx_generation": 252,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if s is a palindrome and if it contains exactly n vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = s.lower()\n    vowel_count = 0\n    for char in s:\n        if char in vowels:\n            vowel_count += 1\n    return s == s[::-1] and vowel_count == n",
        "solution_func": "def g(n=4):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = ''\n    for i in range(n):\n        s += vowels[i % 5]\n    return s",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=0) -> bool:\n    \"\"\"Find a number that is divisible by both 3 and 5 but not divisible by 2.\"\"\"\n    return n % 3 == 0 and n % 5 == 0 and n % 2 != 0\ndef g():\n    return 15\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 252,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target=0) -> bool:\n    \"\"\"Find a number that is divisible by both 3 and 5 but not divisible by 2.\"\"\"\n    return n % 3 == 0 and n % 5 == 0 and n % 2 != 0",
        "solution_func": "def g():\n    return 15",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(l: List[int], k: int) -> bool:\n    \"\"\"Given a list of integers and a target value k, return True if there are two distinct indices i and j in the list such that l[i] + l[j] == k. Otherwise, return False.\"\"\"\n    return any((l[i] + l[j] == k for i in range(len(l)) for j in range(i+1, len(l))))\ndef g(k: int):\n    l = [1, 2, 3, 4, 5]\n    return l\nassert f(g(), k=7)\n",
        "emb": null,
        "idx_generation": 253,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(l: List[int], k: int) -> bool:\n    \"\"\"Given a list of integers and a target value k, return True if there are two distinct indices i and j in the list such that l[i] + l[j] == k. Otherwise, return False.\"\"\"\n    return any((l[i] + l[j] == k for i in range(len(l)) for j in range(i+1, len(l))))",
        "solution_func": "def g(k: int):\n    l = [1, 2, 3, 4, 5]\n    return l",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Given a string s and an integer n, return True if s contains exactly n consecutive occurrences of the letter 'a'. Otherwise, return False.\"\"\"\n    return s.count('a'*n) == 1\ndef g(n: int):\n    s = 'aaabaaa'\n    return s\nassert f(g(n=3), n=3)\n",
        "emb": null,
        "idx_generation": 253,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Given a string s and an integer n, return True if s contains exactly n consecutive occurrences of the letter 'a'. Otherwise, return False.\"\"\"\n    return s.count('a'*n) == 1",
        "solution_func": "def g(n: int):\n    s = 'aaabaaa'\n    return s",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers and a target value, return True if there exists a subsequence of the list whose sum is equal to the target value. Otherwise, return False.\"\"\"\n    return any((sum(sub) == target for i in range(len(lst)) for j in range(i+1, len(lst)+1) for sub in [lst[i:j]]))\ndef g(target: int):\n    lst = [1, 2, 3, 4, 5]\n    return lst\nassert f(g(target=9), target=9)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 253,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers and a target value, return True if there exists a subsequence of the list whose sum is equal to the target value. Otherwise, return False.\"\"\"\n    return any((sum(sub) == target for i in range(len(lst)) for j in range(i+1, len(lst)+1) for sub in [lst[i:j]]))",
        "solution_func": "def g(target: int):\n    lst = [1, 2, 3, 4, 5]\n    return lst",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a number is divisible by any of the prime numbers in the list.\"\"\"\n    return any((n % p == 0 for p in primes))\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return primes[-1] + 1\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 253,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a number is divisible by any of the prime numbers in the list.\"\"\"\n    return any((n % p == 0 for p in primes))",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return primes[-1] + 1",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string contains exactly n vowels.\"\"\"\n    vowels = 'aeiou'\n    return sum((1 for c in s if c.lower() in vowels)) == n\ndef g(n=3):\n    return 'a' * n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 253,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string contains exactly n vowels.\"\"\"\n    vowels = 'aeiou'\n    return sum((1 for c in s if c.lower() in vowels)) == n",
        "solution_func": "def g(n=3):\n    return 'a' * n",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if n is divisible by any of the numbers in the list.\"\"\"\n    return any((n % num == 0 for num in nums))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums[-1] + 1\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 253,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if n is divisible by any of the numbers in the list.\"\"\"\n    return any((n % num == 0 for num in nums))",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums[-1] + 1",
        "map_ix": [
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: List[List[int]], n=5, m=5) -> bool:\n    \"\"\"Check if a matrix is symmetric along the main diagonal\"\"\"\n    return all([x[i][j] == x[j][i] for i in range(n) for j in range(m)])\ndef g(n=5, m=5):\n    x = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                x[i][j] = i + j\n            else:\n                x[i][j] = i - j\n    return x\nassert f(g())\n",
        "emb": null,
        "idx_generation": 253,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[List[int]], n=5, m=5) -> bool:\n    \"\"\"Check if a matrix is symmetric along the main diagonal\"\"\"\n    return all([x[i][j] == x[j][i] for i in range(n) for j in range(m)])",
        "solution_func": "def g(n=5, m=5):\n    x = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                x[i][j] = i + j\n            else:\n                x[i][j] = i - j\n    return x",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, t=\"python\") -> bool:\n    \"\"\"Check if a string contains all the characters in another string\"\"\"\n    return all([char in s for char in t])\ndef g(t=\"python\"):\n    import random\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    s = \"\"\n    for _ in range(len(t)):\n        s += random.choice(letters)\n    return s\nassert f(g())\n",
        "emb": null,
        "idx_generation": 253,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(s: str, t=\"python\") -> bool:\n    \"\"\"Check if a string contains all the characters in another string\"\"\"\n    return all([char in s for char in t])",
        "solution_func": "def g(t=\"python\"):\n    import random\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    s = \"\"\n    for _ in range(len(t)):\n        s += random.choice(letters)\n    return s",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nimport random\nfrom typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there are 4 numbers in a list that sum up to a target value\"\"\"\n    from itertools import combinations\n    return any([sum(comb) == target for comb in combinations(arr, 4)])\ndef g(target=100):\n    import random\n    arr = [random.randint(1, 50) for _ in range(10)]\n    return arr\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 253,
        "target_skills": null,
        "problem_func": "import itertools\nimport random\nfrom typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there are 4 numbers in a list that sum up to a target value\"\"\"\n    from itertools import combinations\n    return any([sum(comb) == target for comb in combinations(arr, 4)])",
        "solution_func": "def g(target=100):\n    import random\n    arr = [random.randint(1, 50) for _ in range(10)]\n    return arr",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=30) -> bool:\n    \"\"\"Check if there is a submatrix in the given matrix whose sum is equal to the target value\"\"\"\n    n, m = len(matrix), len(matrix[0])\n    for i in range(n):\n        for j in range(m):\n            for k in range(i, n):\n                for l in range(j, m):\n                    submatrix = [matrix[row][col] for row in range(i, k+1) for col in range(j, l+1)]\n                    if sum(submatrix) == target:\n                        return True\n    return False\n\ndef g(target=30):\n    return [\n        [2, 5, 8, 3],\n        [1, 3, 6, 2],\n        [4, 9, 7, 5]\n    ]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 253,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=30) -> bool:\n    \"\"\"Check if there is a submatrix in the given matrix whose sum is equal to the target value\"\"\"\n    n, m = len(matrix), len(matrix[0])\n    for i in range(n):\n        for j in range(m):\n            for k in range(i, n):\n                for l in range(j, m):\n                    submatrix = [matrix[row][col] for row in range(i, k+1) for col in range(j, l+1)]\n                    if sum(submatrix) == target:\n                        return True\n    return False",
        "solution_func": "def g(target=30):\n    return [\n        [2, 5, 8, 3],\n        [1, 3, 6, 2],\n        [4, 9, 7, 5]\n    ]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(val: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given value is a perfect square and divisible by the sum of the list of numbers\"\"\"\n    return val in [num**2 for num in nums] and val % sum(nums) == 0\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return sum(nums) ** 2\nassert f(g())\n",
        "emb": null,
        "idx_generation": 254,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(val: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given value is a perfect square and divisible by the sum of the list of numbers\"\"\"\n    return val in [num**2 for num in nums] and val % sum(nums) == 0",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return sum(nums) ** 2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], substr=\"python\") -> bool:\n    \"\"\"Check if the given list contains a string that ends with the given substring\"\"\"\n    return any(string.endswith(substr) for string in strings)\ndef g(substr=\"python\"):\n    return [f\"Hello,{substr}\", \"This is a test\", f\"Another {substr} test\"]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 254,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(strings: List[str], substr=\"python\") -> bool:\n    \"\"\"Check if the given list contains a string that ends with the given substring\"\"\"\n    return any(string.endswith(substr) for string in strings)",
        "solution_func": "def g(substr=\"python\"):\n    return [f\"Hello,{substr}\", \"This is a test\", f\"Another {substr} test\"]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value\"\"\"\n    return any(num1 + num2 == target for num1 in nums for num2 in nums if num1 != num2)\ndef g(target=100):\n    return [50, 25, 10, 15]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 254,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value\"\"\"\n    return any(num1 + num2 == target for num1 in nums for num2 in nums if num1 != num2)",
        "solution_func": "def g(target=100):\n    return [50, 25, 10, 15]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=5) -> bool:\n    \"\"\"Determine if n is divisible by both a and b\"\"\"\n    return n % a == 0 and n % b == 0\ndef g(a=3, b=5):\n    return a * b\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 254,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=5) -> bool:\n    \"\"\"Determine if n is divisible by both a and b\"\"\"\n    return n % a == 0 and n % b == 0",
        "solution_func": "def g(a=3, b=5):\n    return a * b",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=25) -> bool:\n    \"\"\"Check if any row or column in the matrix sums up to the target value\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    for col in zip(*matrix):\n        if sum(col) == target:\n            return True\n    return False\ndef g(target=25):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 254,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=25) -> bool:\n    \"\"\"Check if any row or column in the matrix sums up to the target value\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    for col in zip(*matrix):\n        if sum(col) == target:\n            return True\n    return False",
        "solution_func": "def g(target=25):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if s contains at least n consecutive uppercase letters\"\"\"\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n            if count >= n:\n                return True\n        else:\n            count = 0\n    return False\ndef g(n=3):\n    return \"HelloWORLD\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 254,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if s contains at least n consecutive uppercase letters\"\"\"\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n            if count >= n:\n                return True\n        else:\n            count = 0\n    return False",
        "solution_func": "def g(n=3):\n    return \"HelloWORLD\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray) -> bool:\n    \"\"\"Check if the sum of all elements in the given matrix is divisible by the maximum element in the matrix.\"\"\"\n    return np.sum(matrix) % np.max(matrix) == 0\n\ndef g():\n    return np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 254,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray) -> bool:\n    \"\"\"Check if the sum of all elements in the given matrix is divisible by the maximum element in the matrix.\"\"\"\n    return np.sum(matrix) % np.max(matrix) == 0",
        "solution_func": "def g():\n    return np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the sum of the first half of the numbers is equal to the product of the second half of the numbers.\"\"\"\n    midpoint = len(numbers) // 2\n    first_half_sum = sum(numbers[:midpoint])\n    second_half_product = 1\n    for num in numbers[midpoint:]:\n        second_half_product *= num\n    return first_half_sum == second_half_product\n\ndef g():\n    return [2, 4, 6, 1, 3, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 254,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the sum of the first half of the numbers is equal to the product of the second half of the numbers.\"\"\"\n    midpoint = len(numbers) // 2\n    first_half_sum = sum(numbers[:midpoint])\n    second_half_product = 1\n    for num in numbers[midpoint:]:\n        second_half_product *= num\n    return first_half_sum == second_half_product",
        "solution_func": "def g():\n    return [2, 4, 6, 1, 3, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=5, m=3) -> bool:\n    \"\"\"Check if the given string can be split into n substrings, each with length m, such that all substrings are palindromes.\"\"\"\n    for i in range(0, len(s), m):\n        substring = s[i:i+m]\n        if substring != substring[::-1]:\n            return False\n    return True\n\ndef g():\n    return 'madamlevelradarrotor'\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 254,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=5, m=3) -> bool:\n    \"\"\"Check if the given string can be split into n substrings, each with length m, such that all substrings are palindromes.\"\"\"\n    for i in range(0, len(s), m):\n        substring = s[i:i+m]\n        if substring != substring[::-1]:\n            return False\n    return True",
        "solution_func": "def g():\n    return 'madamlevelradarrotor'",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3, target=10) -> bool:\n    \"\"\"Given a list of integers and two parameters k and target, return True if there exists a sublist of length k\n    whose sum is equal to the target, and False otherwise.\"\"\"\n    return any(sum(arr[i:i+k]) == target for i in range(len(arr)-k+1))\ndef g(k=3, target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 254,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], k=3, target=10) -> bool:\n    \"\"\"Given a list of integers and two parameters k and target, return True if there exists a sublist of length k\n    whose sum is equal to the target, and False otherwise.\"\"\"\n    return any(sum(arr[i:i+k]) == target for i in range(len(arr)-k+1))",
        "solution_func": "def g(k=3, target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(x: datetime, days=10) -> bool:\n    \"\"\"Check if the given date x is within a certain number of days from today\"\"\"\n    today = datetime.now()\n    delta = x - today\n    return abs(delta.days) <= days\n\ndef g(days=10):\n    return datetime.now() + timedelta(days=days)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 255,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(x: datetime, days=10) -> bool:\n    \"\"\"Check if the given date x is within a certain number of days from today\"\"\"\n    today = datetime.now()\n    delta = x - today\n    return abs(delta.days) <= days",
        "solution_func": "def g(days=10):\n    return datetime.now() + timedelta(days=days)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: int, nums=[5, 2, 1, 4, 3]) -> bool:\n    \"\"\"Check if the given number x is present in a list of numbers\"\"\"\n    return x in nums\n\ndef g(nums=[5, 2, 1, 4, 3]):\n    return random.choice(nums)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 255,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(x: int, nums=[5, 2, 1, 4, 3]) -> bool:\n    \"\"\"Check if the given number x is present in a list of numbers\"\"\"\n    return x in nums",
        "solution_func": "def g(nums=[5, 2, 1, 4, 3]):\n    return random.choice(nums)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(x: int, n=5) -> bool:\n    \"\"\"Check if the given number x is divisible by n\"\"\"\n    return x % n == 0\n\ndef g(n=5):\n    return n * random.randint(1, 100)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 255,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(x: int, n=5) -> bool:\n    \"\"\"Check if the given number x is divisible by n\"\"\"\n    return x % n == 0",
        "solution_func": "def g(n=5):\n    return n * random.randint(1, 100)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, c=\"a\") -> bool:\n    \"\"\"Check if a character appears n times in a string\"\"\"\n    return s.count(c) == n\ndef g(n=3, c=\"a\"):\n    s = c * n\n    return s\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 255,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3, c=\"a\") -> bool:\n    \"\"\"Check if a character appears n times in a string\"\"\"\n    return s.count(c) == n",
        "solution_func": "def g(n=3, c=\"a\"):\n    s = c * n\n    return s",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sum up to a given value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == n:\n                return True\n    return False\ndef g(n=5):\n    arr = [1, 2, 3, 4, 5]\n    return arr\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 255,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sum up to a given value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == n:\n                return True\n    return False",
        "solution_func": "def g(n=5):\n    arr = [1, 2, 3, 4, 5]\n    return arr",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"Check if a substring appears n times in a string\"\"\"\n    return s.count(s[:n]) == n\ndef g(n=2):\n    s = \"hellohello\"\n    return s\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 255,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"Check if a substring appears n times in a string\"\"\"\n    return s.count(s[:n]) == n",
        "solution_func": "def g(n=2):\n    s = \"hellohello\"\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, days=7) -> bool:\n    \"\"\"Check if the given datetime is exactly one week (7 days) after the current date.\"\"\"\n    current_date = datetime.datetime.now().date()\n    return (dt.date() - current_date).days == days\n\ndef g(days=7):\n    current_date = datetime.datetime.now().date()\n    target_date = current_date + datetime.timedelta(days=days)\n    return datetime.datetime.combine(target_date, datetime.datetime.min.time())\n    \nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 255,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, days=7) -> bool:\n    \"\"\"Check if the given datetime is exactly one week (7 days) after the current date.\"\"\"\n    current_date = datetime.datetime.now().date()\n    return (dt.date() - current_date).days == days",
        "solution_func": "def g(days=7):\n    current_date = datetime.datetime.now().date()\n    target_date = current_date + datetime.timedelta(days=days)\n    return datetime.datetime.combine(target_date, datetime.datetime.min.time())",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: list, target=42) -> bool:\n    \"\"\"Check if the target number is present in the list and if it is the only even number in the list.\"\"\"\n    return target in lst and lst.count(target) == 1 and all(num % 2 != 0 for num in lst if num != target)\n\ndef g(target=42):\n    lst = random.sample(range(1, 100), 10)\n    lst.append(target)\n    return lst\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 255,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(lst: list, target=42) -> bool:\n    \"\"\"Check if the target number is present in the list and if it is the only even number in the list.\"\"\"\n    return target in lst and lst.count(target) == 1 and all(num % 2 != 0 for num in lst if num != target)",
        "solution_func": "def g(target=42):\n    lst = random.sample(range(1, 100), 10)\n    lst.append(target)\n    return lst",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, r=3) -> bool:\n    \"\"\"Check if the point (x, y, z) lies on the surface of a sphere with the given radius.\"\"\"\n    return abs(math.sqrt(x**2 + y**2 + z**2) - r) < 1e-6\n\ndef g(r=3):\n    x = r * math.cos(math.pi / 4)\n    y = r * math.sin(math.pi / 4)\n    z = 0\n    return x, y, z\n\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 255,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, r=3) -> bool:\n    \"\"\"Check if the point (x, y, z) lies on the surface of a sphere with the given radius.\"\"\"\n    return abs(math.sqrt(x**2 + y**2 + z**2) - r) < 1e-6",
        "solution_func": "def g(r=3):\n    x = r * math.cos(math.pi / 4)\n    y = r * math.sin(math.pi / 4)\n    z = 0\n    return x, y, z",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, nums=[4, 8, 15, 16, 23, 42]) -> bool:\n    \"\"\"Check if the given number is a product of two distinct numbers in the list\"\"\"\n    return any(num == nums[i] * nums[j] for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums=[4, 8, 15, 16, 23, 42]):\n    return nums[0] * nums[1]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 255,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int, nums=[4, 8, 15, 16, 23, 42]) -> bool:\n    \"\"\"Check if the given number is a product of two distinct numbers in the list\"\"\"\n    return any(num == nums[i] * nums[j] for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(nums=[4, 8, 15, 16, 23, 42]):\n    return nums[0] * nums[1]",
        "map_ix": [
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a', count=3) -> bool:\n    \"\"\"Find a string that contains at least 'count' occurrences of 'char'\"\"\"\n    return s.count(char) >= count\ndef g(char='a', count=3):\n    return char * count + 'b'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 256,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char='a', count=3) -> bool:\n    \"\"\"Find a string that contains at least 'count' occurrences of 'char'\"\"\"\n    return s.count(char) >= count",
        "solution_func": "def g(char='a', count=3):\n    return char * count + 'b'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], k=5, target=100) -> bool:\n    \"\"\"Find a sublist of length k whose sum is equal to target\"\"\"\n    return any(sum(lst[i:i+k]) == target for i in range(len(lst) - k + 1))\ndef g(k=5, target=100):\n    return list(range(1, 101))\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 256,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], k=5, target=100) -> bool:\n    \"\"\"Find a sublist of length k whose sum is equal to target\"\"\"\n    return any(sum(lst[i:i+k]) == target for i in range(len(lst) - k + 1))",
        "solution_func": "def g(k=5, target=100):\n    return list(range(1, 101))",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a cell in the matrix that is equal to the target\"\"\"\n    return any(target in row for row in matrix)\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 256,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a cell in the matrix that is equal to the target\"\"\"\n    return any(target in row for row in matrix)",
        "solution_func": "def g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 256,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 256,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True",
        "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the given number n is present in the list\"\"\"\n    return n in lst\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return 3\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 256,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the given number n is present in the list\"\"\"\n    return n in lst",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    return 3",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, x=4, y=7) -> bool:\n    \"\"\"Check if a number can be formed using only x and y.\nThe number can be formed by repeating x and y any number of times, in any order.\n\"\"\"\n    if num == 0:\n        return True\n    if num < 0:\n        return False\n    return f(num-x) or f(num-y)\ndef g(x=4, y=7):\n    return x + y\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 256,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int, x=4, y=7) -> bool:\n    \"\"\"Check if a number can be formed using only x and y.\nThe number can be formed by repeating x and y any number of times, in any order.\n\"\"\"\n    if num == 0:\n        return True\n    if num < 0:\n        return False\n    return f(num-x) or f(num-y)",
        "solution_func": "def g(x=4, y=7):\n    return x + y",
        "map_ix": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='fix') -> bool:\n    \"\"\"Check if all words in the given list start with the prefix and end with the suffix.\nReturn True if all words satisfy the condition, False otherwise.\n\"\"\"\n    return all(word.startswith(prefix) and word.endswith(suffix) for word in words)\ndef g(prefix='pre', suffix='fix'):\n    return [prefix + 'word' + suffix, prefix + 'another' + suffix, prefix + 'example' + suffix]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 256,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='fix') -> bool:\n    \"\"\"Check if all words in the given list start with the prefix and end with the suffix.\nReturn True if all words satisfy the condition, False otherwise.\n\"\"\"\n    return all(word.startswith(prefix) and word.endswith(suffix) for word in words)",
        "solution_func": "def g(prefix='pre', suffix='fix'):\n    return [prefix + 'word' + suffix, prefix + 'another' + suffix, prefix + 'example' + suffix]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, x=3, y=5, z=8) -> bool:\n    \"\"\"Check if a number can be formed using only x, y, and z.\nThe number can be formed by repeating x, y, and z any number of times, in any order.\n\"\"\"\n    if num == 0:\n        return True\n    if num < 0:\n        return False\n    return f(num-x) or f(num-y) or f(num-z)\ndef g(x=3, y=5, z=8):\n    return x + y + z\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 256,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int, x=3, y=5, z=8) -> bool:\n    \"\"\"Check if a number can be formed using only x, y, and z.\nThe number can be formed by repeating x, y, and z any number of times, in any order.\n\"\"\"\n    if num == 0:\n        return True\n    if num < 0:\n        return False\n    return f(num-x) or f(num-y) or f(num-z)",
        "solution_func": "def g(x=3, y=5, z=8):\n    return x + y + z",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target_sum=150, length=5) -> bool:\n    \"\"\"Find a list of integers with a certain sum and length\"\"\"\n    return sum(lst) == target_sum and len(lst) == length\ndef g(target_sum=150, length=5):\n    return [target_sum // length] * length\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 256,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target_sum=150, length=5) -> bool:\n    \"\"\"Find a list of integers with a certain sum and length\"\"\"\n    return sum(lst) == target_sum and len(lst) == length",
        "solution_func": "def g(target_sum=150, length=5):\n    return [target_sum // length] * length",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, operations=[\"+\", \"-\", \"*\", \"/\"]) -> bool:\n    \"\"\"Find a sequence of operations that when applied to the numbers in nums, results in the target value.\"\"\"\n    import itertools\n    for o in itertools.product(operations, repeat=len(nums)-1):\n        expr = str(nums[0])\n        for i in range(1, len(nums)):\n            expr += o[i-1] + str(nums[i])\n        if eval(expr) == target:\n            return True\n    return False\ndef g(target=100, operations=[\"+\", \"-\", \"*\", \"/\"]):\n    nums = [10, 20, 30, 40, 50]\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 257,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, operations=[\"+\", \"-\", \"*\", \"/\"]) -> bool:\n    \"\"\"Find a sequence of operations that when applied to the numbers in nums, results in the target value.\"\"\"\n    import itertools\n    for o in itertools.product(operations, repeat=len(nums)-1):\n        expr = str(nums[0])\n        for i in range(1, len(nums)):\n            expr += o[i-1] + str(nums[i])\n        if eval(expr) == target:\n            return True\n    return False",
        "solution_func": "def g(target=100, operations=[\"+\", \"-\", \"*\", \"/\"]):\n    nums = [10, 20, 30, 40, 50]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_row=1, target_col=2, value=5) -> bool:\n    \"\"\"Find a path in the matrix that starts at (0, 0) and ends at (target_row, target_col) without passing through any cell with the value.\"\"\"\n    def dfs(row, col, visited):\n        if row == target_row and col == target_col:\n            return True\n        if row < 0 or row >= len(matrix) or col < 0 or col >= len(matrix[0]) or matrix[row][col] == value or visited[row][col]:\n            return False\n        visited[row][col] = True\n        if dfs(row+1, col, visited) or dfs(row-1, col, visited) or dfs(row, col+1, visited) or dfs(row, col-1, visited):\n            return True\n        visited[row][col] = False\n        return False\n    \n    visited = [[False for _ in range(len(matrix[0]))] for _ in range(len(matrix))]\n    return dfs(0, 0, visited)\ndef g(target_row=1, target_col=2, value=5):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 257,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_row=1, target_col=2, value=5) -> bool:\n    \"\"\"Find a path in the matrix that starts at (0, 0) and ends at (target_row, target_col) without passing through any cell with the value.\"\"\"\n    def dfs(row, col, visited):\n        if row == target_row and col == target_col:\n            return True\n        if row < 0 or row >= len(matrix) or col < 0 or col >= len(matrix[0]) or matrix[row][col] == value or visited[row][col]:\n            return False\n        visited[row][col] = True\n        if dfs(row+1, col, visited) or dfs(row-1, col, visited) or dfs(row, col+1, visited) or dfs(row, col-1, visited):\n            return True\n        visited[row][col] = False\n        return False\n    \n    visited = [[False for _ in range(len(matrix[0]))] for _ in range(len(matrix))]\n    return dfs(0, 0, visited)",
        "solution_func": "def g(target_row=1, target_col=2, value=5):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], target=\"apple\") -> bool:\n    \"\"\"Find a word in the list that is an anagram of the target word.\"\"\"\n    def is_anagram(word1, word2):\n        return sorted(word1) == sorted(word2)\n    \n    for word in words:\n        if is_anagram(word, target):\n            return True\n    return False\ndef g(target=\"apple\"):\n    words = [\"pear\", \"banana\", \"orange\", \"lemon\", \"lapple\"]\n    return words\nassert f(g())\n",
        "emb": null,
        "idx_generation": 257,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target=\"apple\") -> bool:\n    \"\"\"Find a word in the list that is an anagram of the target word.\"\"\"\n    def is_anagram(word1, word2):\n        return sorted(word1) == sorted(word2)\n    \n    for word in words:\n        if is_anagram(word, target):\n            return True\n    return False",
        "solution_func": "def g(target=\"apple\"):\n    words = [\"pear\", \"banana\", \"orange\", \"lemon\", \"lapple\"]\n    return words",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100, k=3) -> bool:\n    \"\"\"Find a contiguous subarray of length k whose sum is equal to target.\"\"\"\n    return any(sum(nums[i:i+k]) == target for i in range(len(nums)-k+1))\ndef g(target=100, k=3):\n    return [i for i in range(1, target+1)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 257,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100, k=3) -> bool:\n    \"\"\"Find a contiguous subarray of length k whose sum is equal to target.\"\"\"\n    return any(sum(nums[i:i+k]) == target for i in range(len(nums)-k+1))",
        "solution_func": "def g(target=100, k=3):\n    return [i for i in range(1, target+1)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], n=3, letter='a') -> bool:\n    \"\"\"Find n words in the list that start with the letter 'letter'.\"\"\"\n    return len([word for word in words if word.startswith(letter)]) == n\ndef g(n=3, letter='a'):\n    return ['apple' for _ in range(n)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 257,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], n=3, letter='a') -> bool:\n    \"\"\"Find n words in the list that start with the letter 'letter'.\"\"\"\n    return len([word for word in words if word.startswith(letter)]) == n",
        "solution_func": "def g(n=3, letter='a'):\n    return ['apple' for _ in range(n)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], threshold=100, n=3) -> bool:\n    \"\"\"Find n distinct numbers that are less than threshold from the given list.\"\"\"\n    return len(set(nums)) >= n and all(num < threshold for num in nums)\ndef g(threshold=100, n=3):\n    return [i for i in range(1, threshold+1)][-n:]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 257,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], threshold=100, n=3) -> bool:\n    \"\"\"Find n distinct numbers that are less than threshold from the given list.\"\"\"\n    return len(set(nums)) >= n and all(num < threshold for num in nums)",
        "solution_func": "def g(threshold=100, n=3):\n    return [i for i in range(1, threshold+1)][-n:]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=7, c=10) -> bool:\n    \"\"\"Find n such that n + a == b * c\"\"\"\n    return n + a == b * c\ndef g(a=5, b=7, c=10):\n    return b * c - a\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 257,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=5, b=7, c=10) -> bool:\n    \"\"\"Find n such that n + a == b * c\"\"\"\n    return n + a == b * c",
        "solution_func": "def g(a=5, b=7, c=10):\n    return b * c - a",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find a pair of numbers in a list that sums to a specific target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[:2]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 257,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find a pair of numbers in a list that sums to a specific target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[:2]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, c='e') -> bool:\n    \"\"\"Check if a specific character is present in a word.\"\"\"\n    return c in word\ndef g(c='e'):\n    return 'hello'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 257,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str, c='e') -> bool:\n    \"\"\"Check if a specific character is present in a word.\"\"\"\n    return c in word",
        "solution_func": "def g(c='e'):\n    return 'hello'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to obtain the target number by combining the numbers using addition and subtraction.\"\"\"\n    return any((sum(numbers[:i]) + sum(numbers[i:]) == target for i in range(len(numbers) + 1)))\ndef g(numbers=[10, 20, 30, 40]):\n    return numbers\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 257,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to obtain the target number by combining the numbers using addition and subtraction.\"\"\"\n    return any((sum(numbers[:i]) + sum(numbers[i:]) == target for i in range(len(numbers) + 1)))",
        "solution_func": "def g(numbers=[10, 20, 30, 40]):\n    return numbers",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='apple') -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substring in s\ndef g(substring='apple'):\n    return \"I love eating \" + substring + \"s\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 258,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='apple') -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substring in s",
        "solution_func": "def g(substring='apple'):\n    return \"I love eating \" + substring + \"s\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: List[int], target_sum=100) -> bool:\n    \"\"\"Find if there are two numbers in a list that add up to a target sum\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 258,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target_sum=100) -> bool:\n    \"\"\"Find if there are two numbers in a list that add up to a target sum\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_row=2) -> bool:\n    \"\"\"Check if the sum of a row in a matrix is equal to a target value\"\"\"\n    return sum(matrix[target_row]) == target_row\ndef g(target_row=2):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 258,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_row=2) -> bool:\n    \"\"\"Check if the sum of a row in a matrix is equal to a target value\"\"\"\n    return sum(matrix[target_row]) == target_row",
        "solution_func": "def g(target_row=2):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int, a=2, b=3, c=5) -> bool:\n    \"\"\"Check if x^a + y^b = z^c\"\"\"\n    return x**a + y**b == z**c\ndef g(a=2, b=3, c=5):\n    x = 2\n    y = 3\n    z = 5\n    return x, y, z\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 258,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, y: int, z: int, a=2, b=3, c=5) -> bool:\n    \"\"\"Check if x^a + y^b = z^c\"\"\"\n    return x**a + y**b == z**c",
        "solution_func": "def g(a=2, b=3, c=5):\n    x = 2\n    y = 3\n    z = 5\n    return x, y, z",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']) -> bool:\n    \"\"\"Check if the nth element in the list is a fruit\"\"\"\n    fruits = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']\n    return lst[n] in fruits\ndef g(lst=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']):\n    n = 2\n    return n, lst\nassert f(*g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 258,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']) -> bool:\n    \"\"\"Check if the nth element in the list is a fruit\"\"\"\n    fruits = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']\n    return lst[n] in fruits",
        "solution_func": "def g(lst=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']):\n    n = 2\n    return n, lst",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, t: str, n=3) -> bool:\n    \"\"\"Check if the nth character in s is the same as the nth character in t\"\"\"\n    return s[n] == t[n]\ndef g(n=3):\n    s = \"python\"\n    t = \"java\"\n    return s, t, n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 258,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, t: str, n=3) -> bool:\n    \"\"\"Check if the nth character in s is the same as the nth character in t\"\"\"\n    return s[n] == t[n]",
        "solution_func": "def g(n=3):\n    s = \"python\"\n    t = \"java\"\n    return s, t, n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5, m=3) -> bool:\n    \"\"\"Given a string s, find a substring of length n that contains at least m distinct characters.\"\"\"\n    return any(len(set(s[i:i+n])) >= m for i in range(len(s) - n + 1))\ndef g(n=5, m=3):\n    return \"abccba\"*m\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 258,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=5, m=3) -> bool:\n    \"\"\"Given a string s, find a substring of length n that contains at least m distinct characters.\"\"\"\n    return any(len(set(s[i:i+n])) >= m for i in range(len(s) - n + 1))",
        "solution_func": "def g(n=5, m=3):\n    return \"abccba\"*m",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Given a list of numbers and a target, find two numbers in the list that add up to the target.\"\"\"\n    num_set = set(nums)\n    return any(target - num in num_set for num in nums)\ndef g(target=9):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 258,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Given a list of numbers and a target, find two numbers in the list that add up to the target.\"\"\"\n    num_set = set(nums)\n    return any(target - num in num_set for num in nums)",
        "solution_func": "def g(target=9):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Given a square matrix, find n consecutive elements in any row, column, or diagonal that are all the same.\"\"\"\n    for row in matrix:\n        if any(row[i:i+n] == [row[i]]*n for i in range(len(row) - n + 1)):\n            return True\n    for col in zip(*matrix):\n        if any(col[i:i+n] == [col[i]]*n for i in range(len(col) - n + 1)):\n            return True\n    for i in range(len(matrix) - n + 1):\n        for j in range(len(matrix[0]) - n + 1):\n            diag = [matrix[i+k][j+k] for k in range(n)]\n            if diag == [diag[0]]*n:\n                return True\n    return False\ndef g(n=3):\n    return [[1, 2, 3, 4, 5],\n            [6, 7, 8, 9, 10],\n            [11, 12, 13, 14, 15],\n            [16, 17, 18, 19, 20],\n            [21, 22, 23, 24, 25]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 258,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Given a square matrix, find n consecutive elements in any row, column, or diagonal that are all the same.\"\"\"\n    for row in matrix:\n        if any(row[i:i+n] == [row[i]]*n for i in range(len(row) - n + 1)):\n            return True\n    for col in zip(*matrix):\n        if any(col[i:i+n] == [col[i]]*n for i in range(len(col) - n + 1)):\n            return True\n    for i in range(len(matrix) - n + 1):\n        for j in range(len(matrix[0]) - n + 1):\n            diag = [matrix[i+k][j+k] for k in range(n)]\n            if diag == [diag[0]]*n:\n                return True\n    return False",
        "solution_func": "def g(n=3):\n    return [[1, 2, 3, 4, 5],\n            [6, 7, 8, 9, 10],\n            [11, 12, 13, 14, 15],\n            [16, 17, 18, 19, 20],\n            [21, 22, 23, 24, 25]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: int, y: int, z: int, target=50) -> bool:\n    \"\"\"Check if the product of three numbers is equal to the target\"\"\"\n    return x * y * z == target\n\ndef g(target=50):\n    random.seed(42)\n    x = random.randint(1, 10)\n    y = random.randint(1, 10)\n    z = target // (x * y)\n    return x, y, z\n\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 258,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(x: int, y: int, z: int, target=50) -> bool:\n    \"\"\"Check if the product of three numbers is equal to the target\"\"\"\n    return x * y * z == target",
        "solution_func": "def g(target=50):\n    random.seed(42)\n    x = random.randint(1, 10)\n    y = random.randint(1, 10)\n    z = target // (x * y)\n    return x, y, z",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: list, target_sum=100) -> bool:\n    \"\"\"Find a matrix where the sum of each row is equal to a target value\"\"\"\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    return True\ndef g(target_sum=100):\n    n = target_sum // 2\n    matrix = [[n] * target_sum for _ in range(target_sum)]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 259,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: list, target_sum=100) -> bool:\n    \"\"\"Find a matrix where the sum of each row is equal to a target value\"\"\"\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    return True",
        "solution_func": "def g(target_sum=100):\n    n = target_sum // 2\n    matrix = [[n] * target_sum for _ in range(target_sum)]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=2) -> bool:\n    \"\"\"Find a string with a certain number of occurrences of a given substring\"\"\"\n    return string.count(substring) == count\ndef g(substring='abc', count=2):\n    return substring * count\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 259,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='abc', count=2) -> bool:\n    \"\"\"Find a string with a certain number of occurrences of a given substring\"\"\"\n    return string.count(substring) == count",
        "solution_func": "def g(substring='abc', count=2):\n    return substring * count",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=5, c=7) -> bool:\n    \"\"\"Check if a number is divisible by three different integers\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=3, b=5, c=7):\n    return a * b * c\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 259,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=5, c=7) -> bool:\n    \"\"\"Check if a number is divisible by three different integers\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0",
        "solution_func": "def g(a=3, b=5, c=7):\n    return a * b * c",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string s is a palindrome of length n.\"\"\"\n    assert len(s) == n\n    return s == s[::-1]\ndef g(n=3):\n    return \"aba\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 259,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string s is a palindrome of length n.\"\"\"\n    assert len(s) == n\n    return s == s[::-1]",
        "solution_func": "def g(n=3):\n    return \"aba\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in nums whose sum is equal to the target.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=10):\n    return [5, 7, 2, 3, 1]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 259,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in nums whose sum is equal to the target.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(target=10):\n    return [5, 7, 2, 3, 1]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there exists a number in the matrix that is equal to the target.\"\"\"\n    return any((target in row for row in matrix))\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 259,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there exists a number in the matrix that is equal to the target.\"\"\"\n    return any((target in row for row in matrix))",
        "solution_func": "def g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10, k=3) -> bool:\n    \"\"\"Given a list of integers and a target number, return True if there exists a combination of k integers\nfrom the list that add up to the target, and False otherwise.\"\"\"\n    return len([c for c in combinations(nums, k) if sum(c) == target]) > 0\ndef g(target=10, k=3):\n    nums = [2, 4, 6, 8, 10]\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 259,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10, k=3) -> bool:\n    \"\"\"Given a list of integers and a target number, return True if there exists a combination of k integers\nfrom the list that add up to the target, and False otherwise.\"\"\"\n    return len([c for c in combinations(nums, k) if sum(c) == target]) > 0",
        "solution_func": "def g(target=10, k=3):\n    nums = [2, 4, 6, 8, 10]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Given a matrix and a target number, return True if there exists a row or column in the matrix that adds up\nto the target, and False otherwise.\"\"\"\n    rows = [sum(row) == target for row in matrix]\n    cols = [sum(col) == target for col in zip(*matrix)]\n    return any(rows) or any(cols)\ndef g(target=20):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 259,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Given a matrix and a target number, return True if there exists a row or column in the matrix that adds up\nto the target, and False otherwise.\"\"\"\n    rows = [sum(row) == target for row in matrix]\n    cols = [sum(col) == target for col in zip(*matrix)]\n    return any(rows) or any(cols)",
        "solution_func": "def g(target=20):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"Given a list of words and a target length, return True if there exists a pair of words in the list whose\nconcatenation has a length equal to the target length, and False otherwise.\"\"\"\n    return any(len(w1 + w2) == target_length for w1, w2 in combinations(words, 2))\ndef g(target_length=5):\n    words = [\"hello\", \"world\", \"python\", \"programming\"]\n    return words\nassert f(g())\n",
        "emb": null,
        "idx_generation": 259,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"Given a list of words and a target length, return True if there exists a pair of words in the list whose\nconcatenation has a length equal to the target length, and False otherwise.\"\"\"\n    return any(len(w1 + w2) == target_length for w1, w2 in combinations(words, 2))",
        "solution_func": "def g(target_length=5):\n    words = [\"hello\", \"world\", \"python\", \"programming\"]\n    return words",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return n in [x**2 for x in nums]\ndef g(nums=[1, 2, 3, 4, 5]):\n    return int(nums[-1] ** 0.5)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 259,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return n in [x**2 for x in nums]",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return int(nums[-1] ** 0.5)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=5, b=10) -> bool:\n    \"\"\"Check if x is within the range of a and b (inclusive)\"\"\"\n    return a <= x <= b\ndef g(a=5, b=10):\n    return (a + b) // 2\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 260,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=5, b=10) -> bool:\n    \"\"\"Check if x is within the range of a and b (inclusive)\"\"\"\n    return a <= x <= b",
        "solution_func": "def g(a=5, b=10):\n    return (a + b) // 2",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], x=10, y=5) -> bool:\n    \"\"\"Check if the sum of the elements in the array is divisible by x and if the maximum element is greater than y\"\"\"\n    return sum(arr) % x == 0 and max(arr) > y\ndef g(x=10, y=5):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 260,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], x=10, y=5) -> bool:\n    \"\"\"Check if the sum of the elements in the array is divisible by x and if the maximum element is greater than y\"\"\"\n    return sum(arr) % x == 0 and max(arr) > y",
        "solution_func": "def g(x=10, y=5):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a', count=3) -> bool:\n    \"\"\"Check if the character 'char' appears 'count' number of times in the string\"\"\"\n    return s.count(char) == count\ndef g(char='a', count=3):\n    return char * count + 'b' * count\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 260,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char='a', count=3) -> bool:\n    \"\"\"Check if the character 'char' appears 'count' number of times in the string\"\"\"\n    return s.count(char) == count",
        "solution_func": "def g(char='a', count=3):\n    return char * count + 'b' * count",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=10) -> bool:\n    \"\"\"Check if the sum of all elements in the given matrix is equal to the target value\"\"\"\n    return np.sum(matrix) == target\n\ndef g(rows=3, cols=3, target=10):\n    return np.ones((rows, cols)) * target\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 260,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=10) -> bool:\n    \"\"\"Check if the sum of all elements in the given matrix is equal to the target value\"\"\"\n    return np.sum(matrix) == target",
        "solution_func": "def g(rows=3, cols=3, target=10):\n    return np.ones((rows, cols)) * target",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the reverse of the string s is equal to the string itself\"\"\"\n    return s == s[::-1]\n\ndef g(s=\"radar\"):\n    return s\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 260,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the reverse of the string s is equal to the string itself\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g(s=\"radar\"):\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the given list that sum up to the target value\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[2, 4, 6, 8]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 260,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the given list that sum up to the target value\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(nums=[2, 4, 6, 8]):\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(numbers: list, target=100) -> bool:\n    \"\"\"Find a list of numbers that can be combined using addition, subtraction, multiplication, and division\n    to equal the target number.\"\"\"\n    return eval(''.join(str(num) + random.choice(['+', '-', '*', '/']) for num in numbers)) == target\n\ndef g(target=100):\n    numbers = []\n    for _ in range(4):\n        numbers.append(random.randint(1, 20))\n    return numbers\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 260,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(numbers: list, target=100) -> bool:\n    \"\"\"Find a list of numbers that can be combined using addition, subtraction, multiplication, and division\n    to equal the target number.\"\"\"\n    return eval(''.join(str(num) + random.choice(['+', '-', '*', '/']) for num in numbers)) == target",
        "solution_func": "def g(target=100):\n    numbers = []\n    for _ in range(4):\n        numbers.append(random.randint(1, 20))\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport math\n\ndef f(num: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"Find a number that can be divided by all the factors without a remainder.\"\"\"\n    return all(num % f == 0 for f in factors)\n\ndef g(factors=[2, 3, 5]):\n    num = math.prod(factors) * random.randint(1, 10)\n    return num\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 260,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\nimport math\n\ndef f(num: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"Find a number that can be divided by all the factors without a remainder.\"\"\"\n    return all(num % f == 0 for f in factors)",
        "solution_func": "def g(factors=[2, 3, 5]):\n    num = math.prod(factors) * random.randint(1, 10)\n    return num",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(matrix: list, num_rows=3, num_cols=3) -> bool:\n    \"\"\"Find a matrix (nested list) that has the specified number of rows and columns.\"\"\"\n    return len(matrix) == num_rows and all(len(row) == num_cols for row in matrix)\n\ndef g(num_rows=3, num_cols=3):\n    matrix = []\n    for _ in range(num_rows):\n        row = [random.randint(1, 10) for _ in range(num_cols)]\n        matrix.append(row)\n    return matrix\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 260,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(matrix: list, num_rows=3, num_cols=3) -> bool:\n    \"\"\"Find a matrix (nested list) that has the specified number of rows and columns.\"\"\"\n    return len(matrix) == num_rows and all(len(row) == num_cols for row in matrix)",
        "solution_func": "def g(num_rows=3, num_cols=3):\n    matrix = []\n    for _ in range(num_rows):\n        row = [random.randint(1, 10) for _ in range(num_cols)]\n        matrix.append(row)\n    return matrix",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.array, target=10) -> bool:\n    \"\"\"Check if the sum of each row in a given matrix is equal to the target\"\"\"\n    row_sums = np.sum(matrix, axis=1)\n    return all(row_sum == target for row_sum in row_sums)\n\ndef g(target=10):\n    matrix = np.ones((3, 4))\n    return matrix * target\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 260,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.array, target=10) -> bool:\n    \"\"\"Check if the sum of each row in a given matrix is equal to the target\"\"\"\n    row_sums = np.sum(matrix, axis=1)\n    return all(row_sum == target for row_sum in row_sums)",
        "solution_func": "def g(target=10):\n    matrix = np.ones((3, 4))\n    return matrix * target",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Find a list of integers such that the sum of the squares of the first i integers is equal to the sum of the first i cubes, for i = 0, 1, 2, ..., 10.\"\"\"\n    return all((sum([x ** 2 for x in li[:i]]) == sum([x ** 3 for x in li[:i]]) for i in range(11)))\ndef g():\n    return [i for i in range(11)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 261,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Find a list of integers such that the sum of the squares of the first i integers is equal to the sum of the first i cubes, for i = 0, 1, 2, ..., 10.\"\"\"\n    return all((sum([x ** 2 for x in li[:i]]) == sum([x ** 3 for x in li[:i]]) for i in range(11)))",
        "solution_func": "def g():\n    return [i for i in range(11)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a positive integer n such that n is divisible by all the integers from 1 to 10 (inclusive).\"\"\"\n    return all((n % i == 0 for i in range(1, 11)))\ndef g():\n    return 2520\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 261,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a positive integer n such that n is divisible by all the integers from 1 to 10 (inclusive).\"\"\"\n    return all((n % i == 0 for i in range(1, 11)))",
        "solution_func": "def g():\n    return 2520",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string s such that s is a palindrome and the reverse of s is equal to s plus 'abc'.\"\"\"\n    return s == s[::-1] and s[::-1] == s + 'abc'\ndef g():\n    return 'aba'\nassert f(g())\n",
        "emb": null,
        "idx_generation": 261,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string s such that s is a palindrome and the reverse of s is equal to s plus 'abc'.\"\"\"\n    return s == s[::-1] and s[::-1] == s + 'abc'",
        "solution_func": "def g():\n    return 'aba'",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: List[int], target=25, count=3) -> bool:\n    \"\"\"Find a sublist of a given list that sums up to a target value.\"\"\"\n    return sum(x) == target and len(x) == count\ndef g(target=25, count=3):\n    return [target//count] * count\nassert f(g())\n",
        "emb": null,
        "idx_generation": 261,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], target=25, count=3) -> bool:\n    \"\"\"Find a sublist of a given list that sums up to a target value.\"\"\"\n    return sum(x) == target and len(x) == count",
        "solution_func": "def g(target=25, count=3):\n    return [target//count] * count",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, char='a', count=3) -> bool:\n    \"\"\"Count the number of occurrences of a specific character in a string.\"\"\"\n    return x.count(char) == count\ndef g(char='a', count=3):\n    return char * count\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 261,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, char='a', count=3) -> bool:\n    \"\"\"Count the number of occurrences of a specific character in a string.\"\"\"\n    return x.count(char) == count",
        "solution_func": "def g(char='a', count=3):\n    return char * count",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a given list that sum up to a target value.\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 261,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a given list that sum up to a target value.\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], k=5) -> bool:\n    \"\"\"Given a list of non-decreasing integers and given an integer k, determine if there are exactly k integers in the list\nthat are divisible by k.\"\"\"\n    assert all((nums[i] <= nums[i + 1] for i in range(len(nums) - 1))), 'Hint: nums are non-decreasing'\n    count = 0\n    for num in nums:\n        if num % k == 0:\n            count += 1\n    return count == k\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], k=5):\n    divisible_nums = [num for num in nums if num % k == 0]\n    return len(divisible_nums) == k\nassert f(g())\n",
        "emb": null,
        "idx_generation": 261,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], k=5) -> bool:\n    \"\"\"Given a list of non-decreasing integers and given an integer k, determine if there are exactly k integers in the list\nthat are divisible by k.\"\"\"\n    assert all((nums[i] <= nums[i + 1] for i in range(len(nums) - 1))), 'Hint: nums are non-decreasing'\n    count = 0\n    for num in nums:\n        if num % k == 0:\n            count += 1\n    return count == k",
        "solution_func": "def g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], k=5):\n    divisible_nums = [num for num in nums if num % k == 0]\n    return len(divisible_nums) == k",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=6) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine if there are at least k integers in the list\nthat are divisible by k.\"\"\"\n    assert all((nums[i] >= nums[i + 1] for i in range(len(nums) - 1))), 'Hint: nums are non-increasing'\n    count = 0\n    for num in nums:\n        if num % k == 0:\n            count += 1\n            if count >= k:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=6):\n    divisible_nums = [num for num in nums if num % k == 0]\n    return len(divisible_nums) >= k\nassert f(g())\n",
        "emb": null,
        "idx_generation": 261,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=6) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine if there are at least k integers in the list\nthat are divisible by k.\"\"\"\n    assert all((nums[i] >= nums[i + 1] for i in range(len(nums) - 1))), 'Hint: nums are non-increasing'\n    count = 0\n    for num in nums:\n        if num % k == 0:\n            count += 1\n            if count >= k:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=6):\n    divisible_nums = [num for num in nums if num % k == 0]\n    return len(divisible_nums) >= k",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, names=['Alice', 'Bob', 'Charlie', 'Dave', 'Eve', 'Frank', 'Grace'], k=4) -> bool:\n    \"\"\"Given a list of strings and given an integer k, determine if there are exactly k strings in the list\nthat have a length greater than k.\"\"\"\n    assert all((len(name) >= k for name in names)), 'Hint: all names have a length greater than k'\n    count = 0\n    for name in names:\n        if len(name) > k:\n            count += 1\n    return count == k\ndef g(names=['Alice', 'Bob', 'Charlie', 'Dave', 'Eve', 'Frank', 'Grace'], k=4):\n    long_names = [name for name in names if len(name) > k]\n    return len(long_names) == k\nassert f(g())\n",
        "emb": null,
        "idx_generation": 261,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, names=['Alice', 'Bob', 'Charlie', 'Dave', 'Eve', 'Frank', 'Grace'], k=4) -> bool:\n    \"\"\"Given a list of strings and given an integer k, determine if there are exactly k strings in the list\nthat have a length greater than k.\"\"\"\n    assert all((len(name) >= k for name in names)), 'Hint: all names have a length greater than k'\n    count = 0\n    for name in names:\n        if len(name) > k:\n            count += 1\n    return count == k",
        "solution_func": "def g(names=['Alice', 'Bob', 'Charlie', 'Dave', 'Eve', 'Frank', 'Grace'], k=4):\n    long_names = [name for name in names if len(name) > k]\n    return len(long_names) == k",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find a pair of distinct numbers in the given array that sums up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=100):\n    return [1, target-1]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 261,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find a pair of distinct numbers in the given array that sums up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [1, target-1]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target value.\"\"\"\n    return any((a + b == target for a in nums for b in nums))\ndef g(target=100):\n    return [target // 2, target - (target // 2)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 262,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target value.\"\"\"\n    return any((a + b == target for a in nums for b in nums))",
        "solution_func": "def g(target=100):\n    return [target // 2, target - (target // 2)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subsequence of numbers in the list whose sum is equal to the target value.\"\"\"\n    return any((sum(sub) == target for r in range(1, len(nums) + 1) for sub in combinations(nums, r)))\ndef g(target=10):\n    return [target]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 262,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subsequence of numbers in the list whose sum is equal to the target value.\"\"\"\n    return any((sum(sub) == target for r in range(1, len(nums) + 1) for sub in combinations(nums, r)))",
        "solution_func": "def g(target=10):\n    return [target]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(nums: List[float], target=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum of squares is equal to the target value.\"\"\"\n    return any((sqrt(a ** 2 + b ** 2) == target for a in nums for b in nums))\ndef g(target=5):\n    return [sqrt(target ** 2 / 2), sqrt(target ** 2 / 2)]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 262,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(nums: List[float], target=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum of squares is equal to the target value.\"\"\"\n    return any((sqrt(a ** 2 + b ** 2) == target for a in nums for b in nums))",
        "solution_func": "def g(target=5):\n    return [sqrt(target ** 2 / 2), sqrt(target ** 2 / 2)]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15, n=3) -> bool:\n    \"\"\"Find a submatrix of size n x n whose sum is equal to the target\"\"\"\n    for i in range(len(matrix)-n+1):\n        for j in range(len(matrix[0])-n+1):\n            submatrix = [row[j:j+n] for row in matrix[i:i+n]]\n            if sum(sum(submatrix, [])) == target:\n                return True\n    return False\n\ndef g(target=15, n=3):\n    matrix = [[1, 2, 3, 4, 5],\n              [6, 7, 8, 9, 10],\n              [11, 12, 13, 14, 15],\n              [16, 17, 18, 19, 20],\n              [21, 22, 23, 24, 25]]\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 262,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=15, n=3) -> bool:\n    \"\"\"Find a submatrix of size n x n whose sum is equal to the target\"\"\"\n    for i in range(len(matrix)-n+1):\n        for j in range(len(matrix[0])-n+1):\n            submatrix = [row[j:j+n] for row in matrix[i:i+n]]\n            if sum(sum(submatrix, [])) == target:\n                return True\n    return False",
        "solution_func": "def g(target=15, n=3):\n    matrix = [[1, 2, 3, 4, 5],\n              [6, 7, 8, 9, 10],\n              [11, 12, 13, 14, 15],\n              [16, 17, 18, 19, 20],\n              [21, 22, 23, 24, 25]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(perm: List[int], pairs=[(1, 2), (3, 4), (5, 6)]) -> bool:\n    \"\"\"Check if a permutation of numbers satisfies a given pair condition\"\"\"\n    for pair in pairs:\n        if abs(perm.index(pair[0]) - perm.index(pair[1])) == 1:\n            return True\n    return False\n\ndef g(pairs=[(1, 2), (3, 4), (5, 6)]):\n    nums = set()\n    for pair in pairs:\n        nums.add(pair[0])\n        nums.add(pair[1])\n    perms = permutations(nums)\n    return next(perms)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 262,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(perm: List[int], pairs=[(1, 2), (3, 4), (5, 6)]) -> bool:\n    \"\"\"Check if a permutation of numbers satisfies a given pair condition\"\"\"\n    for pair in pairs:\n        if abs(perm.index(pair[0]) - perm.index(pair[1])) == 1:\n            return True\n    return False",
        "solution_func": "def g(pairs=[(1, 2), (3, 4), (5, 6)]):\n    nums = set()\n    for pair in pairs:\n        nums.add(pair[0])\n        nums.add(pair[1])\n    perms = permutations(nums)\n    return next(perms)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(dates: List[datetime], interval=60) -> bool:\n    \"\"\"Check if a list of dates has a time difference greater than or equal to the interval\"\"\"\n    for i in range(len(dates) - 1):\n        if (dates[i+1] - dates[i]).seconds < interval:\n            return False\n    return True\n\ndef g(interval=60):\n    dates = [datetime(2022, 1, 1, 12, 0, 0),\n             datetime(2022, 1, 1, 12, 0, 30),\n             datetime(2022, 1, 1, 12, 1, 0),\n             datetime(2022, 1, 1, 12, 1, 30),\n             datetime(2022, 1, 1, 12, 2, 0)]\n    return dates\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 262,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(dates: List[datetime], interval=60) -> bool:\n    \"\"\"Check if a list of dates has a time difference greater than or equal to the interval\"\"\"\n    for i in range(len(dates) - 1):\n        if (dates[i+1] - dates[i]).seconds < interval:\n            return False\n    return True",
        "solution_func": "def g(interval=60):\n    dates = [datetime(2022, 1, 1, 12, 0, 0),\n             datetime(2022, 1, 1, 12, 0, 30),\n             datetime(2022, 1, 1, 12, 1, 0),\n             datetime(2022, 1, 1, 12, 1, 30),\n             datetime(2022, 1, 1, 12, 2, 0)]\n    return dates",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, a=16, b=3) -> bool:\n    \"\"\"Check if x is a perfect square and divisible by a\"\"\"\n    return math.isqrt(x) ** 2 == x and x % a == 0\n\ndef g(a=16, b=3):\n    x = a * b\n    return x\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 262,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: int, a=16, b=3) -> bool:\n    \"\"\"Check if x is a perfect square and divisible by a\"\"\"\n    return math.isqrt(x) ** 2 == x and x % a == 0",
        "solution_func": "def g(a=16, b=3):\n    x = a * b\n    return x",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: list, target=0) -> bool:\n    \"\"\"Check if there exists two distinct indices i and j in arr such that arr[i] + arr[j] = target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    arr = [-1, 2, 3, 4, 5]\n    return arr\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 262,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: list, target=0) -> bool:\n    \"\"\"Check if there exists two distinct indices i and j in arr such that arr[i] + arr[j] = target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    arr = [-1, 2, 3, 4, 5]\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=5, k=2) -> bool:\n    \"\"\"Check if n is a multiple of m and divisible by k\"\"\"\n    return n % m == 0 and n % k == 0\n\ndef g(m=5, k=2):\n    n = m * k\n    return n\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 262,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=5, k=2) -> bool:\n    \"\"\"Check if n is a multiple of m and divisible by k\"\"\"\n    return n % m == 0 and n % k == 0",
        "solution_func": "def g(m=5, k=2):\n    n = m * k\n    return n",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: list, target=99, length=10) -> bool:\n    \"\"\"Check if a list contains a target value and has a certain length\"\"\"\n    return target in arr and len(arr) == length\ndef g(target=99, length=10):\n    return [target] * length\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 262,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: list, target=99, length=10) -> bool:\n    \"\"\"Check if a list contains a target value and has a certain length\"\"\"\n    return target in arr and len(arr) == length",
        "solution_func": "def g(target=99, length=10):\n    return [target] * length",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(s: str, num: int) -> bool:\n    \"\"\"Check if the given string is a palindrome when repeated n times.\"\"\"\n    return (s * num) == (s * num)[::-1]\n\ndef g(num: int):\n    string = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=10))\n    return string, num\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 263,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(s: str, num: int) -> bool:\n    \"\"\"Check if the given string is a palindrome when repeated n times.\"\"\"\n    return (s * num) == (s * num)[::-1]",
        "solution_func": "def g(num: int):\n    string = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=10))\n    return string, num",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int, lst: list) -> bool:\n    \"\"\"Check if the sum of the logarithms of the numbers in the list is equal to the logarithm of the product of the numbers.\"\"\"\n    return math.isclose(sum(math.log10(x) for x in lst), math.log10(math.prod(lst)))\n\ndef g(lst: list):\n    num = len(lst)\n    return num, lst\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 263,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(num: int, lst: list) -> bool:\n    \"\"\"Check if the sum of the logarithms of the numbers in the list is equal to the logarithm of the product of the numbers.\"\"\"\n    return math.isclose(sum(math.log10(x) for x in lst), math.log10(math.prod(lst)))",
        "solution_func": "def g(lst: list):\n    num = len(lst)\n    return num, lst",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nimport random\nfrom typing import*\nfrom itertools import permutations\n\ndef f(s: str, lst: list) -> bool:\n    \"\"\"Check if the given string can be formed by concatenating two strings from the list.\"\"\"\n    perms = permutations(lst, 2)\n    return any(''.join(p) == s for p in perms)\n\ndef g(lst: list):\n    s = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=10))\n    return s, lst\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 263,
        "target_skills": null,
        "problem_func": "import itertools\nimport random\nfrom typing import*\nfrom itertools import permutations\n\ndef f(s: str, lst: list) -> bool:\n    \"\"\"Check if the given string can be formed by concatenating two strings from the list.\"\"\"\n    perms = permutations(lst, 2)\n    return any(''.join(p) == s for p in perms)",
        "solution_func": "def g(lst: list):\n    s = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=10))\n    return s, lst",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string has exactly n consecutive vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(n=3):\n    vowel_string = 'aeiou'\n    return vowel_string * n\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 263,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string has exactly n consecutive vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False",
        "solution_func": "def g(n=3):\n    vowel_string = 'aeiou'\n    return vowel_string * n",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if n is a perfect square and its square root is a multiple of m\"\"\"\n    if math.isqrt(n) ** 2 == n:\n        return math.isqrt(n) % m == 0\n    return False\n\ndef g(m=5):\n    i = 1\n    while True:\n        if (i ** 2) % m == 0:\n            return i ** 2\n        i += 1\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 263,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if n is a perfect square and its square root is a multiple of m\"\"\"\n    if math.isqrt(n) ** 2 == n:\n        return math.isqrt(n) % m == 0\n    return False",
        "solution_func": "def g(m=5):\n    i = 1\n    while True:\n        if (i ** 2) % m == 0:\n            return i ** 2\n        i += 1",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string contains all the letters of the alphabet at least n times\"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    letter_counts = {letter: 0 for letter in alphabet}\n    for char in s:\n        if char.lower() in alphabet:\n            letter_counts[char.lower()] += 1\n    return all(value >= n for value in letter_counts.values())\n\ndef g(n=3):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return alphabet * n\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 263,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string contains all the letters of the alphabet at least n times\"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    letter_counts = {letter: 0 for letter in alphabet}\n    for char in s:\n        if char.lower() in alphabet:\n            letter_counts[char.lower()] += 1\n    return all(value >= n for value in letter_counts.values())",
        "solution_func": "def g(n=3):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return alphabet * n",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(dt: datetime, day_of_week: str = 'Sunday') -> bool:\n    \"\"\"Find a datetime object that falls on a given day of the week.\"\"\"\n    return dt.strftime('%A') == day_of_week\n\ndef g(day_of_week: str = 'Sunday'):\n    dt = datetime(2022, 1, 1)\n    while dt.strftime('%A') != day_of_week:\n        dt = dt + timedelta(days=1)\n    return dt\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 263,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(dt: datetime, day_of_week: str = 'Sunday') -> bool:\n    \"\"\"Find a datetime object that falls on a given day of the week.\"\"\"\n    return dt.strftime('%A') == day_of_week",
        "solution_func": "def g(day_of_week: str = 'Sunday'):\n    dt = datetime(2022, 1, 1)\n    while dt.strftime('%A') != day_of_week:\n        dt = dt + timedelta(days=1)\n    return dt",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(seq: list, target_sum: int = 100) -> bool:\n    \"\"\"Find a sublist of the given sequence that sums up to the target sum.\"\"\"\n    for i in range(len(seq)):\n        for j in range(i+1, len(seq)+1):\n            if sum(seq[i:j]) == target_sum:\n                return True\n    return False\n\ndef g(target_sum: int = 100):\n    seq = random.choices(range(1, 101), k=10)\n    return seq\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 263,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(seq: list, target_sum: int = 100) -> bool:\n    \"\"\"Find a sublist of the given sequence that sums up to the target sum.\"\"\"\n    for i in range(len(seq)):\n        for j in range(i+1, len(seq)+1):\n            if sum(seq[i:j]) == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum: int = 100):\n    seq = random.choices(range(1, 101), k=10)\n    return seq",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_substring: str = 'abc') -> bool:\n    \"\"\"Find a substring in the given string that matches the target substring.\"\"\"\n    return target_substring in s\n\ndef g(target_substring: str = 'abc'):\n    s = 'xyz' + target_substring + '123'\n    return s\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 263,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target_substring: str = 'abc') -> bool:\n    \"\"\"Find a substring in the given string that matches the target substring.\"\"\"\n    return target_substring in s",
        "solution_func": "def g(target_substring: str = 'abc'):\n    s = 'xyz' + target_substring + '123'\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, axis=1, target=5) -> bool:\n    \"\"\"Check if the sum of elements in a given axis of a numpy array is equal to the target value.\"\"\"\n    return np.sum(arr, axis=axis) == target\n\ndef g(axis=1, target=5):\n    return np.full((3, 4), target)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 263,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, axis=1, target=5) -> bool:\n    \"\"\"Check if the sum of elements in a given axis of a numpy array is equal to the target value.\"\"\"\n    return np.sum(arr, axis=axis) == target",
        "solution_func": "def g(axis=1, target=5):\n    return np.full((3, 4), target)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int, digits=2) -> bool:\n    \"\"\"Check if a number has the given number of digits after the decimal point\"\"\"\n    return math.isclose(num, round(num, digits), rel_tol=10**(-digits))\ndef g(digits=2):\n    return round(math.pi, digits)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "idx_generation": 264,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(num: int, digits=2) -> bool:\n    \"\"\"Check if a number has the given number of digits after the decimal point\"\"\"\n    return math.isclose(num, round(num, digits), rel_tol=10**(-digits))",
        "solution_func": "def g(digits=2):\n    return round(math.pi, digits)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: list, target=10) -> bool:\n    \"\"\"Check if the sum of the numbers in the list is equal to the target number\"\"\"\n    return sum(nums) == target\ndef g(target=10):\n    return [random.randint(1, 5) for _ in range(5)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 264,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(nums: list, target=10) -> bool:\n    \"\"\"Check if the sum of the numbers in the list is equal to the target number\"\"\"\n    return sum(nums) == target",
        "solution_func": "def g(target=10):\n    return [random.randint(1, 5) for _ in range(5)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Check if a given date string matches the specified format\"\"\"\n    try:\n        datetime.datetime.strptime(date, format)\n        return True\n    except ValueError:\n        return False\ndef g(format='%Y-%m-%d'):\n    return datetime.datetime.now().strftime(format)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 264,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Check if a given date string matches the specified format\"\"\"\n    try:\n        datetime.datetime.strptime(date, format)\n        return True\n    except ValueError:\n        return False",
        "solution_func": "def g(format='%Y-%m-%d'):\n    return datetime.datetime.now().strftime(format)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, target=0) -> bool:\n    \"\"\"Given three integers x, y, and z, determine if the sum of their square roots is equal to the target value.\n    Sample Input:\n    x = 2\n    y = 3\n    z = 4\n    target = 5\n    Sample Output:\n    True\"\"\"\n    sum_sqrt = math.sqrt(x) + math.sqrt(y) + math.sqrt(z)\n    return sum_sqrt == target\n\ndef g(x=2, y=3, z=4, target=0):\n    return target + math.sqrt(x) + math.sqrt(y) + math.sqrt(z)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 264,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, target=0) -> bool:\n    \"\"\"Given three integers x, y, and z, determine if the sum of their square roots is equal to the target value.\n    Sample Input:\n    x = 2\n    y = 3\n    z = 4\n    target = 5\n    Sample Output:\n    True\"\"\"\n    sum_sqrt = math.sqrt(x) + math.sqrt(y) + math.sqrt(z)\n    return sum_sqrt == target",
        "solution_func": "def g(x=2, y=3, z=4, target=0):\n    return target + math.sqrt(x) + math.sqrt(y) + math.sqrt(z)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int = 0) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if any two elements in the list add up to the target value.\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 7\n    Sample Output:\n    True\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], target=0):\n    return target + arr[0] + arr[1]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 264,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target: int = 0) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if any two elements in the list add up to the target value.\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 7\n    Sample Output:\n    True\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5], target=0):\n    return target + arr[0] + arr[1]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if any three elements in the list add up to the target value.\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 9\n    Sample Output:\n    True\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=0):\n    return target + nums[0] + nums[1] + nums[2]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 264,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if any three elements in the list add up to the target value.\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 9\n    Sample Output:\n    True\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=0):\n    return target + nums[0] + nums[1] + nums[2]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: List[int], x=-5, y=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to x and y\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == x or lst[i] + lst[j] == y:\n                return True\n    return False\ndef g(x=-5, y=10):\n    return [1, 2, -3, 4, -1, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 264,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], x=-5, y=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to x and y\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == x or lst[i] + lst[j] == y:\n                return True\n    return False",
        "solution_func": "def g(x=-5, y=10):\n    return [1, 2, -3, 4, -1, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the sum of each row in the matrix is equal to n\"\"\"\n    for row in matrix:\n        if sum(row) != n:\n            return False\n    return True\ndef g(n=3):\n    return [[1, 1, 1], [2, 2, -1], [3, -2, -1]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 264,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the sum of each row in the matrix is equal to n\"\"\"\n    for row in matrix:\n        if sum(row) != n:\n            return False\n    return True",
        "solution_func": "def g(n=3):\n    return [[1, 1, 1], [2, 2, -1], [3, -2, -1]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, vowels='aeiou') -> bool:\n    \"\"\"Check if the given string contains all the vowels\"\"\"\n    for vowel in vowels:\n        if vowel not in s:\n            return False\n    return True\ndef g(vowels='aeiou'):\n    return 'The quick brown fox jumps over the lazy dog.'\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 264,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, vowels='aeiou') -> bool:\n    \"\"\"Check if the given string contains all the vowels\"\"\"\n    for vowel in vowels:\n        if vowel not in s:\n            return False\n    return True",
        "solution_func": "def g(vowels='aeiou'):\n    return 'The quick brown fox jumps over the lazy dog.'",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m: int, k: int, result: int, numbers=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Given a list of numbers, find if there exists a pair of numbers whose sum is equal to the given result.\nThe pair of numbers must also satisfy the following conditions:\n1. The first number must be divisible by n.\n2. The second number must be divisible by m.\n3. The absolute difference between the two numbers must be greater than or equal to k.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] % n == 0 and numbers[j] % m == 0 and abs(numbers[i] - numbers[j]) >= k and numbers[i] + numbers[j] == result:\n                return True\n    return False\ndef g(n: int, m: int, k: int, result: int, numbers=[1, 2, 3, 4, 5]):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] % n == 0 and numbers[j] % m == 0 and abs(numbers[i] - numbers[j]) >= k and numbers[i] + numbers[j] == result:\n                return [numbers[i], numbers[j]]\n    return []\nassert f(g())\n",
        "emb": null,
        "idx_generation": 264,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m: int, k: int, result: int, numbers=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Given a list of numbers, find if there exists a pair of numbers whose sum is equal to the given result.\nThe pair of numbers must also satisfy the following conditions:\n1. The first number must be divisible by n.\n2. The second number must be divisible by m.\n3. The absolute difference between the two numbers must be greater than or equal to k.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] % n == 0 and numbers[j] % m == 0 and abs(numbers[i] - numbers[j]) >= k and numbers[i] + numbers[j] == result:\n                return True\n    return False",
        "solution_func": "def g(n: int, m: int, k: int, result: int, numbers=[1, 2, 3, 4, 5]):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] % n == 0 and numbers[j] % m == 0 and abs(numbers[i] - numbers[j]) >= k and numbers[i] + numbers[j] == result:\n                return [numbers[i], numbers[j]]\n    return []",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if n is a multiple of any number in lst\"\"\"\n    for num in lst:\n        if n % num == 0:\n            return True\n    return False\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return max(lst)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 265,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if n is a multiple of any number in lst\"\"\"\n    for num in lst:\n        if n % num == 0:\n            return True\n    return False",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return max(lst)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s=\"Hello, World!\") -> bool:\n    \"\"\"Check if the letter 'o' appears n times in the string s\"\"\"\n    return s.count('o') == n\ndef g(s=\"Hello, World!\"):\n    return s.count('o')\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 265,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, s=\"Hello, World!\") -> bool:\n    \"\"\"Check if the letter 'o' appears n times in the string s\"\"\"\n    return s.count('o') == n",
        "solution_func": "def g(s=\"Hello, World!\"):\n    return s.count('o')",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if n is divisible by the product of all numbers in lst\"\"\"\n    product = 1\n    for num in lst:\n        product *= num\n    return n % product == 0\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return sum(lst)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 265,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if n is divisible by the product of all numbers in lst\"\"\"\n    product = 1\n    for num in lst:\n        product *= num\n    return n % product == 0",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return sum(lst)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, count=5) -> bool:\n    \"\"\"Find a list of count integers from nums that add up to target\"\"\"\n    from itertools import combinations\n    return any((sum(comb) == target for comb in combinations(nums, count)))\ndef g(target=10, count=5):\n    return list(range(1, target+1))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 265,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, count=5) -> bool:\n    \"\"\"Find a list of count integers from nums that add up to target\"\"\"\n    from itertools import combinations\n    return any((sum(comb) == target for comb in combinations(nums, count)))",
        "solution_func": "def g(target=10, count=5):\n    return list(range(1, target+1))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='fix', count=3) -> bool:\n    \"\"\"Find a list of count words from words that start with prefix and end with suffix\"\"\"\n    return len([word for word in words if word.startswith(prefix) and word.endswith(suffix)]) >= count\ndef g(prefix='pre', suffix='fix', count=3):\n    return [prefix+'_'+str(i)+'_'+suffix for i in range(10)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 265,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='fix', count=3) -> bool:\n    \"\"\"Find a list of count words from words that start with prefix and end with suffix\"\"\"\n    return len([word for word in words if word.startswith(prefix) and word.endswith(suffix)]) >= count",
        "solution_func": "def g(prefix='pre', suffix='fix', count=3):\n    return [prefix+'_'+str(i)+'_'+suffix for i in range(10)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum=100, length=4) -> bool:\n    \"\"\"Find a list of length integers from nums that add up to target_sum\"\"\"\n    from itertools import combinations\n    return any((sum(comb) == target_sum for comb in combinations(nums, length)))\ndef g(target_sum=100, length=4):\n    return list(range(1, target_sum+1))\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 265,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum=100, length=4) -> bool:\n    \"\"\"Find a list of length integers from nums that add up to target_sum\"\"\"\n    from itertools import combinations\n    return any((sum(comb) == target_sum for comb in combinations(nums, length)))",
        "solution_func": "def g(target_sum=100, length=4):\n    return list(range(1, target_sum+1))",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(pairs: List[Tuple[str, str]], target='abcdef') -> bool:\n    \"\"\"Check if the target string can be formed by concatenating the pairs in order\"\"\"\n    assert all((len(a) == len(b) for (a, b) in pairs)) and all((set(a) == set(b) for (a, b) in pairs))\n    formed_str = ''\n    for (a, b) in pairs:\n        formed_str += a\n        if formed_str == target:\n            return True\n        formed_str += b\n        if formed_str == target:\n            return True\n    return False\ndef g(target='abcdef'):\n    pairs = []\n    for i in range(len(target) // 2):\n        pairs.append((target[i], target[i + 1]))\n    return pairs\nassert f(g())\n",
        "emb": null,
        "idx_generation": 265,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(pairs: List[Tuple[str, str]], target='abcdef') -> bool:\n    \"\"\"Check if the target string can be formed by concatenating the pairs in order\"\"\"\n    assert all((len(a) == len(b) for (a, b) in pairs)) and all((set(a) == set(b) for (a, b) in pairs))\n    formed_str = ''\n    for (a, b) in pairs:\n        formed_str += a\n        if formed_str == target:\n            return True\n        formed_str += b\n        if formed_str == target:\n            return True\n    return False",
        "solution_func": "def g(target='abcdef'):\n    pairs = []\n    for i in range(len(target) // 2):\n        pairs.append((target[i], target[i + 1]))\n    return pairs",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=1000) -> bool:\n    \"\"\"Find three distinct numbers from the list that sum to the target\"\"\"\n    for i in range(len(nums) - 2):\n        for j in range(i + 1, len(nums) - 1):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=1000):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 265,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=1000) -> bool:\n    \"\"\"Find three distinct numbers from the list that sum to the target\"\"\"\n    for i in range(len(nums) - 2):\n        for j in range(i + 1, len(nums) - 1):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=1000):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if the target word can be formed by concatenating the words in order\"\"\"\n    formed_word = ''\n    for word in words:\n        formed_word += word\n        if formed_word == target:\n            return True\n    return False\ndef g(target='python'):\n    words = ['p', 'yt', 'h', 'on']\n    return words\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 265,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if the target word can be formed by concatenating the words in order\"\"\"\n    formed_word = ''\n    for word in words:\n        formed_word += word\n        if formed_word == target:\n            return True\n    return False",
        "solution_func": "def g(target='python'):\n    words = ['p', 'yt', 'h', 'on']\n    return words",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=25) -> bool:\n    \"\"\"Find if there are three numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\ndef g(target=25):\n    return [1, 2, target - 3]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 265,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=25) -> bool:\n    \"\"\"Find if there are three numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=25):\n    return [1, 2, target - 3]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(x: int, lst=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Check if the given number is present in the list and is a multiple of 3.\"\"\"\n    return x in lst and x % 3 == 0\ndef g(lst=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    import random\n    return random.choice(lst)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 266,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(x: int, lst=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Check if the given number is present in the list and is a multiple of 3.\"\"\"\n    return x in lst and x % 3 == 0",
        "solution_func": "def g(lst=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    import random\n    return random.choice(lst)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(x: int, lst=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) -> bool:\n    \"\"\"Check if the given number is larger than all the numbers in the list.\"\"\"\n    return x > max(lst)\ndef g(lst=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]):\n    import random\n    return random.randint(max(lst) + 1, 100)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 266,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(x: int, lst=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) -> bool:\n    \"\"\"Check if the given number is larger than all the numbers in the list.\"\"\"\n    return x > max(lst)",
        "solution_func": "def g(lst=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]):\n    import random\n    return random.randint(max(lst) + 1, 100)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(x: str, lst=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'indian jujube', 'jackfruit']) -> bool:\n    \"\"\"Check if the given string has the same first letter as all the strings in the list.\"\"\"\n    return all(word[0] == x for word in lst)\ndef g(lst=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'indian jujube', 'jackfruit']):\n    import random\n    return random.choice(lst)[0]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 266,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(x: str, lst=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'indian jujube', 'jackfruit']) -> bool:\n    \"\"\"Check if the given string has the same first letter as all the strings in the list.\"\"\"\n    return all(word[0] == x for word in lst)",
        "solution_func": "def g(lst=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'indian jujube', 'jackfruit']):\n    import random\n    return random.choice(lst)[0]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10, threshold=5) -> bool:\n    \"\"\"Find two numbers in the array that sum up to the target value, with a minimum difference threshold.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) >= threshold and arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=10, threshold=5):\n    return [1, 4, 7, 3, 9, 2]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 266,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10, threshold=5) -> bool:\n    \"\"\"Find two numbers in the array that sum up to the target value, with a minimum difference threshold.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) >= threshold and arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10, threshold=5):\n    return [1, 4, 7, 3, 9, 2]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Check if there exists a row in the matrix whose sum is equal to the target sum.\"\"\"\n    for row in matrix:\n        if sum(row) == target_sum:\n            return True\n    return False\ndef g(target_sum=100):\n    return [[10, 20, 30], [40, 50, 60], [70, 80, 90]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 266,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Check if there exists a row in the matrix whose sum is equal to the target sum.\"\"\"\n    for row in matrix:\n        if sum(row) == target_sum:\n            return True\n    return False",
        "solution_func": "def g(target_sum=100):\n    return [[10, 20, 30], [40, 50, 60], [70, 80, 90]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=16):\n    return [5, 3, 1, 8, 10, 6, 14]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 266,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=16):\n    return [5, 3, 1, 8, 10, 6, 14]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(array: list, target=9) -> bool:\n    \"\"\"Find if there are two numbers in the array that add up to the target\"\"\"\n    for i in range(len(array)):\n        for j in range(i + 1, len(array)):\n            if array[i] + array[j] == target:\n                return True\n    return False\ndef g(target=9):\n    return [2, 7, 1, 5]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 266,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(array: list, target=9) -> bool:\n    \"\"\"Find if there are two numbers in the array that add up to the target\"\"\"\n    for i in range(len(array)):\n        for j in range(i + 1, len(array)):\n            if array[i] + array[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=9):\n    return [2, 7, 1, 5]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='world') -> bool:\n    \"\"\"Check if the substring exists in the string\"\"\"\n    return substring in string\ndef g(substring='world'):\n    return \"Hello, world!\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 266,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='world') -> bool:\n    \"\"\"Check if the substring exists in the string\"\"\"\n    return substring in string",
        "solution_func": "def g(substring='world'):\n    return \"Hello, world!\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: list, target=8) -> bool:\n    \"\"\"Check if the target number exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=8):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 266,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: list, target=8) -> bool:\n    \"\"\"Check if the target number exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=8):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(e: List[int], a=-9, b=3, c=-6, d=2) -> bool:\n    \"\"\"Find the solution to the equation a*x^2 + b*x + c = d.\nSolution should be a single value for x.\"\"\"\n    x = (d - c) / (a + b)\n    return abs(a * (x**2) + b * x + c - d) < 10 ** (-5)\ndef g(a=-9, b=3, c=-6, d=2):\n    return [(d - c) / (a + b)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 266,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: List[int], a=-9, b=3, c=-6, d=2) -> bool:\n    \"\"\"Find the solution to the equation a*x^2 + b*x + c = d.\nSolution should be a single value for x.\"\"\"\n    x = (d - c) / (a + b)\n    return abs(a * (x**2) + b * x + c - d) < 10 ** (-5)",
        "solution_func": "def g(a=-9, b=3, c=-6, d=2):\n    return [(d - c) / (a + b)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(s: str, substr=\"Python\", index=6) -> bool:\n    \"\"\"Check if a given substring exists in a string at a specific index\"\"\"\n    return s[index:index+len(substr)] == substr\ndef g(substr=\"Python\", index=6):\n    return \"I love Python programming\"[:index] + substr + \" programming\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 267,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(s: str, substr=\"Python\", index=6) -> bool:\n    \"\"\"Check if a given substring exists in a string at a specific index\"\"\"\n    return s[index:index+len(substr)] == substr",
        "solution_func": "def g(substr=\"Python\", index=6):\n    return \"I love Python programming\"[:index] + substr + \" programming\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=9):\n    return [1, 2, 3, 4, 5, 6, 7, 8, target-8]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 267,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=9):\n    return [1, 2, 3, 4, 5, 6, 7, 8, target-8]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, char=\"a\", count=3) -> bool:\n    \"\"\"Check if a given character appears a certain number of times in a string\"\"\"\n    return s.count(char) == count\ndef g(char=\"a\", count=3):\n    return char * count + \"bcdef\" + char * count\nassert f(g())\n",
        "emb": null,
        "idx_generation": 267,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char=\"a\", count=3) -> bool:\n    \"\"\"Check if a given character appears a certain number of times in a string\"\"\"\n    return s.count(char) == count",
        "solution_func": "def g(char=\"a\", count=3):\n    return char * count + \"bcdef\" + char * count",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(string: str, target='python') -> bool:\n    \"\"\"Find a permutation of the characters in the string that matches the target\"\"\"\n    perms = permutations(string)\n    for perm in perms:\n        if ''.join(perm) == target:\n            return True\n    return False\n\ndef g(target='python'):\n    return ''.join(sorted(target))\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 267,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(string: str, target='python') -> bool:\n    \"\"\"Find a permutation of the characters in the string that matches the target\"\"\"\n    perms = permutations(string)\n    for perm in perms:\n        if ''.join(perm) == target:\n            return True\n    return False",
        "solution_func": "def g(target='python'):\n    return ''.join(sorted(target))",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 267,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=100):\n    return [30, 40, 50, 60, 70, 80, 90]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find two numbers that multiply to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 267,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find two numbers that multiply to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(li: List[int], n=7) -> bool:\n    \"\"\"Given n, find n integers such that li[i] - li[i+1] == li[i+2], for i = 0, 1, ..., n-1\nwhere indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\nthat are multiples of 3 (as proven in the IMO problem).\nSample input:\n6\nSample output:\n[_, _, _, _, _, _]\n(Sample output hidden because showing sample output would give away too much information.)\"\"\"\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == li[i] - li[(i + 1) % n] for i in range(n)))\ndef g(n=7):\n    return [1, 2, 3] * (n // 3)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 267,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int], n=7) -> bool:\n    \"\"\"Given n, find n integers such that li[i] - li[i+1] == li[i+2], for i = 0, 1, ..., n-1\nwhere indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\nthat are multiples of 3 (as proven in the IMO problem).\nSample input:\n6\nSample output:\n[_, _, _, _, _, _]\n(Sample output hidden because showing sample output would give away too much information.)\"\"\"\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == li[i] - li[(i + 1) % n] for i in range(n)))",
        "solution_func": "def g(n=7):\n    return [1, 2, 3] * (n // 3)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='python', count=5, length=100) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring='python', count=5, length=100):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 267,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='python', count=5, length=100) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length",
        "solution_func": "def g(substring='python', count=5, length=100):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * '^'",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(li: List[int], n=10) -> bool:\n    \"\"\"Given n, find n integers such that li[i] + li[i+1] == li[i+2], for i = 0, 1, ..., n-1\nwhere indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\nthat are multiples of 3 (as proven in the IMO problem).\nSample input:\n6\nSample output:\n[_, _, _, _, _, _]\n(Sample output hidden because showing sample output would give away too much information.)\"\"\"\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == li[i] + li[(i + 1) % n] for i in range(n)))\ndef g(n=10):\n    return random.choices(range(1, 10), k=n)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 267,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(li: List[int], n=10) -> bool:\n    \"\"\"Given n, find n integers such that li[i] + li[i+1] == li[i+2], for i = 0, 1, ..., n-1\nwhere indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\nthat are multiples of 3 (as proven in the IMO problem).\nSample input:\n6\nSample output:\n[_, _, _, _, _, _]\n(Sample output hidden because showing sample output would give away too much information.)\"\"\"\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == li[i] + li[(i + 1) % n] for i in range(n)))",
        "solution_func": "def g(n=10):\n    return random.choices(range(1, 10), k=n)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=1000) -> bool:\n    \"\"\"Check if a string contains exactly n occurrences of a specific substring.\"\"\"\n    return s.count('abc') == n\ndef g(n=1000):\n    return 'abc' * n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 267,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=1000) -> bool:\n    \"\"\"Check if a string contains exactly n occurrences of a specific substring.\"\"\"\n    return s.count('abc') == n",
        "solution_func": "def g(n=1000):\n    return 'abc' * n",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], length=5, num_vowels=2) -> bool:\n    \"\"\"Find a sublist of words that contains at least num_vowels vowels and all words have length characters\"\"\"\n    def count_vowels(word):\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        return sum(1 for letter in word if letter.lower() in vowels)\n    \n    return any(len(word) == length and count_vowels(word) >= num_vowels for word in words)\ndef g(length=5, num_vowels=2):\n    words = [\"apple\", \"banana\", \"cat\", \"dog\", \"elephant\", \"frog\"]\n    return [word for word in words if len(word) == length and count_vowels(word) >= num_vowels]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 268,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], length=5, num_vowels=2) -> bool:\n    \"\"\"Find a sublist of words that contains at least num_vowels vowels and all words have length characters\"\"\"\n    def count_vowels(word):\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        return sum(1 for letter in word if letter.lower() in vowels)\n    \n    return any(len(word) == length and count_vowels(word) >= num_vowels for word in words)",
        "solution_func": "def g(length=5, num_vowels=2):\n    words = [\"apple\", \"banana\", \"cat\", \"dog\", \"elephant\", \"frog\"]\n    return [word for word in words if len(word) == length and count_vowels(word) >= num_vowels]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find a sublist of numbers whose sum is equal to target_sum\"\"\"\n    from itertools import combinations\n    \n    return any(sum(combination) == target_sum for length in range(1, len(nums)+1) for combination in combinations(nums, length))\ndef g(target_sum=100):\n    nums = [10, 20, 30, 40, 50, 60]\n    return [combination for length in range(1, len(nums)+1) for combination in combinations(nums, length) if sum(combination) == target_sum]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 268,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find a sublist of numbers whose sum is equal to target_sum\"\"\"\n    from itertools import combinations\n    \n    return any(sum(combination) == target_sum for length in range(1, len(nums)+1) for combination in combinations(nums, length))",
        "solution_func": "def g(target_sum=100):\n    nums = [10, 20, 30, 40, 50, 60]\n    return [combination for length in range(1, len(nums)+1) for combination in combinations(nums, length) if sum(combination) == target_sum]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], num_rows=3, num_cols=3) -> bool:\n    \"\"\"Check if the given matrix is a magic square\"\"\"\n    def check_rows(matrix):\n        for row in matrix:\n            if sum(row) != sum(matrix[0]):\n                return False\n        return True\n    \n    def check_columns(matrix):\n        for col in range(len(matrix[0])):\n            if sum(row[col] for row in matrix) != sum(row[col] for row in matrix[0]):\n                return False\n        return True\n    \n    def check_diagonals(matrix):\n        diagonal_sum = sum(matrix[i][i] for i in range(len(matrix)))\n        reverse_diagonal_sum = sum(matrix[i][len(matrix)-i-1] for i in range(len(matrix)))\n        return diagonal_sum == reverse_diagonal_sum == sum(matrix[0])\n    \n    return len(matrix) == num_rows and len(matrix[0]) == num_cols and check_rows(matrix) and check_columns(matrix) and check_diagonals(matrix)\ndef g(num_rows=3, num_cols=3):\n    matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 268,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], num_rows=3, num_cols=3) -> bool:\n    \"\"\"Check if the given matrix is a magic square\"\"\"\n    def check_rows(matrix):\n        for row in matrix:\n            if sum(row) != sum(matrix[0]):\n                return False\n        return True\n    \n    def check_columns(matrix):\n        for col in range(len(matrix[0])):\n            if sum(row[col] for row in matrix) != sum(row[col] for row in matrix[0]):\n                return False\n        return True\n    \n    def check_diagonals(matrix):\n        diagonal_sum = sum(matrix[i][i] for i in range(len(matrix)))\n        reverse_diagonal_sum = sum(matrix[i][len(matrix)-i-1] for i in range(len(matrix)))\n        return diagonal_sum == reverse_diagonal_sum == sum(matrix[0])\n    \n    return len(matrix) == num_rows and len(matrix[0]) == num_cols and check_rows(matrix) and check_columns(matrix) and check_diagonals(matrix)",
        "solution_func": "def g(num_rows=3, num_cols=3):\n    matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int], tot=100, n=5) -> bool:\n    \"\"\"Find n distinct positive integers that are perfect squares and sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((math.sqrt(i) % 1 == 0 for i in nums))\ndef g(tot=100, n=5):\n    return [i**2 for i in range(1, n+1)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 268,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(nums: List[int], tot=100, n=5) -> bool:\n    \"\"\"Find n distinct positive integers that are perfect squares and sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((math.sqrt(i) % 1 == 0 for i in nums))",
        "solution_func": "def g(tot=100, n=5):\n    return [i**2 for i in range(1, n+1)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], tot=100, n=10) -> bool:\n    \"\"\"Find n distinct positive integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot\ndef g(tot=100, n=10):\n    nums = set()\n    while len(nums) < n:\n        num = random.randint(1, tot)\n        if num not in nums:\n            nums.add(num)\n    return list(nums)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 268,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], tot=100, n=10) -> bool:\n    \"\"\"Find n distinct positive integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot",
        "solution_func": "def g(tot=100, n=10):\n    nums = set()\n    while len(nums) < n:\n        num = random.randint(1, tot)\n        if num not in nums:\n            nums.add(num)\n    return list(nums)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(nums: List[int], target=100, n=4) -> bool:\n    \"\"\"Find n distinct positive integers that can be combined using + and - operations to equal target\"\"\"\n    all_combinations = set(permutations(nums, n))\n    for combination in all_combinations:\n        if sum(combination) == target:\n            return True\n    return False\ndef g(target=100, n=4):\n    return list(range(1, n+1))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 268,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(nums: List[int], target=100, n=4) -> bool:\n    \"\"\"Find n distinct positive integers that can be combined using + and - operations to equal target\"\"\"\n    all_combinations = set(permutations(nums, n))\n    for combination in all_combinations:\n        if sum(combination) == target:\n            return True\n    return False",
        "solution_func": "def g(target=100, n=4):\n    return list(range(1, n+1))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=20, b=30, c=40) -> bool:\n    \"\"\"Check if x is a multiple of a or b or c\"\"\"\n    return x % a == 0 or x % b == 0 or x % c == 0\ndef g(a=20, b=30, c=40):\n    return a * b * c\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 268,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=20, b=30, c=40) -> bool:\n    \"\"\"Check if x is a multiple of a or b or c\"\"\"\n    return x % a == 0 or x % b == 0 or x % c == 0",
        "solution_func": "def g(a=20, b=30, c=40):\n    return a * b * c",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: str, y: str, z: str, a=\"apple\", b=\"banana\", c=\"cherry\") -> bool:\n    \"\"\"Check if x contains a, y contains b, and z contains c\"\"\"\n    return a in x and b in y and c in z\ndef g(a=\"apple\", b=\"banana\", c=\"cherry\"):\n    return f\"This is an {a}, a {b}, and a {c}\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 268,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, y: str, z: str, a=\"apple\", b=\"banana\", c=\"cherry\") -> bool:\n    \"\"\"Check if x contains a, y contains b, and z contains c\"\"\"\n    return a in x and b in y and c in z",
        "solution_func": "def g(a=\"apple\", b=\"banana\", c=\"cherry\"):\n    return f\"This is an {a}, a {b}, and a {c}\"",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], y: int, z: int, n=3) -> bool:\n    \"\"\"Check if there are n numbers in x that sum to y and their product is z\"\"\"\n    from itertools import combinations\n    for comb in combinations(x, n):\n        if sum(comb) == y and comb[0] * comb[1] * comb[2] == z:\n            return True\n    return False\ndef g(y=10, z=24, n=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 268,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(x: List[int], y: int, z: int, n=3) -> bool:\n    \"\"\"Check if there are n numbers in x that sum to y and their product is z\"\"\"\n    from itertools import combinations\n    for comb in combinations(x, n):\n        if sum(comb) == y and comb[0] * comb[1] * comb[2] == z:\n            return True\n    return False",
        "solution_func": "def g(y=10, z=24, n=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=0) -> bool:\n    \"\"\"Check if the sum of the digits of 2^n is equal to n.\"\"\"\n    return sum(int(i) for i in str(2 ** n)) == n\ndef g(n=0):\n    return 0 if n == 0 else 2 if n == 1 else 4\nassert f(g())\n",
        "emb": null,
        "idx_generation": 268,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=0) -> bool:\n    \"\"\"Check if the sum of the digits of 2^n is equal to n.\"\"\"\n    return sum(int(i) for i in str(2 ** n)) == n",
        "solution_func": "def g(n=0):\n    return 0 if n == 0 else 2 if n == 1 else 4",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(res: int, n=5) -> bool:\n    \"\"\"Find the result of multiplying an integer by itself n times.\"\"\"\n    m = 2\n    for _ in range(n):\n        m *= m\n    return res == m\ndef g(n=5):\n    m = 2\n    for _ in range(n):\n        m *= m\n    return m\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 269,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(res: int, n=5) -> bool:\n    \"\"\"Find the result of multiplying an integer by itself n times.\"\"\"\n    m = 2\n    for _ in range(n):\n        m *= m\n    return res == m",
        "solution_func": "def g(n=5):\n    m = 2\n    for _ in range(n):\n        m *= m\n    return m",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello world', length=5) -> bool:\n    \"\"\"Find a substring of the given length from the target string that starts with a vowel.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(target) - length + 1):\n        if target[i] in vowels:\n            return target[i:i+length] == s\n    return False\ndef g(target='hello world', length=5):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(target) - length + 1):\n        if target[i] in vowels:\n            return target[i:i+length]\n    return \"\"\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 269,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='hello world', length=5) -> bool:\n    \"\"\"Find a substring of the given length from the target string that starts with a vowel.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(target) - length + 1):\n        if target[i] in vowels:\n            return target[i:i+length] == s\n    return False",
        "solution_func": "def g(target='hello world', length=5):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(target) - length + 1):\n        if target[i] in vowels:\n            return target[i:i+length]\n    return \"\"",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(res: int, n=4, m=3) -> bool:\n    \"\"\"Find the result of raising an integer n to the power of m.\"\"\"\n    return res == n ** m\ndef g(n=4, m=3):\n    return n ** m\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 269,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(res: int, n=4, m=3) -> bool:\n    \"\"\"Find the result of raising an integer n to the power of m.\"\"\"\n    return res == n ** m",
        "solution_func": "def g(n=4, m=3):\n    return n ** m",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of numbers, find two numbers that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 8, 5, 3, 1]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 269,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of numbers, find two numbers that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [2, 8, 5, 3, 1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, pattern='abc') -> bool:\n    \"\"\"Check if a given string contains a specific pattern.\"\"\"\n    return pattern in string\n\ndef g(pattern='abc'):\n    return \"abcdefg\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 269,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, pattern='abc') -> bool:\n    \"\"\"Check if a given string contains a specific pattern.\"\"\"\n    return pattern in string",
        "solution_func": "def g(pattern='abc'):\n    return \"abcdefg\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=7) -> bool:\n    \"\"\"Given a matrix of integers, find if a specific target value exists in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=7):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 269,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=7) -> bool:\n    \"\"\"Given a matrix of integers, find if a specific target value exists in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=7):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: str, s=['P', 'y', 't', 'h', 'o', 'n'], n=6) -> bool:\n    \"\"\"Check if the string x is a palindrome.\"\"\"\n    return x == x[::-1]\ndef g(s=['P', 'y', 't', 'h', 'o', 'n'], n=6):\n    return ''.join(s)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 269,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, s=['P', 'y', 't', 'h', 'o', 'n'], n=6) -> bool:\n    \"\"\"Check if the string x is a palindrome.\"\"\"\n    return x == x[::-1]",
        "solution_func": "def g(s=['P', 'y', 't', 'h', 'o', 'n'], n=6):\n    return ''.join(s)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, m=1234567890) -> bool:\n    \"\"\"Check if the number x is divisible by 9.\"\"\"\n    return x % 9 == 0\ndef g(m=1234567890):\n    return m * 9\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 269,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, m=1234567890) -> bool:\n    \"\"\"Check if the number x is divisible by 9.\"\"\"\n    return x % 9 == 0",
        "solution_func": "def g(m=1234567890):\n    return m * 9",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, n=4) -> bool:\n    \"\"\"Check if x is a perfect square.\"\"\"\n    return math.isqrt(x) ** 2 == x\ndef g(n=4):\n    return n ** 2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 269,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: int, n=4) -> bool:\n    \"\"\"Check if x is a perfect square.\"\"\"\n    return math.isqrt(x) ** 2 == x",
        "solution_func": "def g(n=4):\n    return n ** 2",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, day_of_week='Saturday') -> bool:\n    \"\"\"Check if the given date falls on a specific day of the week.\"\"\"\n    return dt.strftime('%A') == day_of_week\n\ndef g(day_of_week='Saturday'):\n    return datetime.datetime.strptime('2022-01-01', '%Y-%m-%d')\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 269,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, day_of_week='Saturday') -> bool:\n    \"\"\"Check if the given date falls on a specific day of the week.\"\"\"\n    return dt.strftime('%A') == day_of_week",
        "solution_func": "def g(day_of_week='Saturday'):\n    return datetime.datetime.strptime('2022-01-01', '%Y-%m-%d')",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target_sum=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array that sum up to the target_sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=50):\n    return np.array([10, 20, 30, 40, target_sum - 100])\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 270,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target_sum=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array that sum up to the target_sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=50):\n    return np.array([10, 20, 30, 40, target_sum - 100])",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string contains exactly n number of vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count == n\n\ndef g(n=3):\n    return 'a' * n\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 270,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string contains exactly n number of vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count == n",
        "solution_func": "def g(n=3):\n    return 'a' * n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(a: float, b: float, c: float) -> bool:\n    \"\"\"Check if the given values a, b, and c form a valid triangle.\"\"\"\n    return a + b > c and a + c > b and b + c > a\n\ndef g():\n    return math.pi, math.e, math.sqrt(2)\n\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 270,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(a: float, b: float, c: float) -> bool:\n    \"\"\"Check if the given values a, b, and c form a valid triangle.\"\"\"\n    return a + b > c and a + c > b and b + c > a",
        "solution_func": "def g():\n    return math.pi, math.e, math.sqrt(2)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, m: int, x: int) -> bool:\n    \"\"\"Check if n is divisible by m and if the square root of n is greater than x\"\"\"\n    return n % m == 0 and math.sqrt(n) > x\n\ndef g(n=144, m=12, x=10):\n    return n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 270,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, m: int, x: int) -> bool:\n    \"\"\"Check if n is divisible by m and if the square root of n is greater than x\"\"\"\n    return n % m == 0 and math.sqrt(n) > x",
        "solution_func": "def g(n=144, m=12, x=10):\n    return n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: list) -> bool:\n    \"\"\"Check if the list contains both the minimum and maximum values\"\"\"\n    return min(lst) in lst and max(lst) in lst\n\ndef g(lst=[3, 5, 1, 7, 2]):\n    return lst\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 270,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: list) -> bool:\n    \"\"\"Check if the list contains both the minimum and maximum values\"\"\"\n    return min(lst) in lst and max(lst) in lst",
        "solution_func": "def g(lst=[3, 5, 1, 7, 2]):\n    return lst",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if s1 and s2 are anagrams of each other\"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g(s1='listen', s2='silent'):\n    return s1, s2\nassert f(g())\n",
        "emb": null,
        "idx_generation": 270,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if s1 and s2 are anagrams of each other\"\"\"\n    return sorted(s1) == sorted(s2)",
        "solution_func": "def g(s1='listen', s2='silent'):\n    return s1, s2",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom collections import Counter\n\ndef f(s: str, max_count=2) -> bool:\n    \"\"\"Check if a string has at most `max_count` distinct characters\"\"\"\n    counts = Counter(s)\n    return len(counts) <= max_count\n\ndef g(max_count=2):\n    s = \"abccba\"\n    return s\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 270,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom collections import Counter\n\ndef f(s: str, max_count=2) -> bool:\n    \"\"\"Check if a string has at most `max_count` distinct characters\"\"\"\n    counts = Counter(s)\n    return len(counts) <= max_count",
        "solution_func": "def g(max_count=2):\n    s = \"abccba\"\n    return s",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list that sum up to the target\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if target - num in num_set:\n            return True\n    return False\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 270,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list that sum up to the target\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if target - num in num_set:\n            return True\n    return False",
        "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target value exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 270,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target value exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: list, n=5, m=10) -> bool:\n    \"\"\"Check if the sum of the first n elements of lst is greater than m\"\"\"\n    return sum(lst[:n]) > m\ndef g(n=5, m=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 270,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: list, n=5, m=10) -> bool:\n    \"\"\"Check if the sum of the first n elements of lst is greater than m\"\"\"\n    return sum(lst[:n]) > m",
        "solution_func": "def g(n=5, m=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 271,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if the word is present in the string\"\"\"\n    return word in s\ndef g(word='python'):\n    return \"I love python programming\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 271,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if the word is present in the string\"\"\"\n    return word in s",
        "solution_func": "def g(word='python'):\n    return \"I love python programming\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there is any number in the list that is divisible by the target\"\"\"\n    for num in nums:\n        if num % target == 0:\n            return True\n    return False\ndef g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 271,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there is any number in the list that is divisible by the target\"\"\"\n    for num in nums:\n        if num % target == 0:\n            return True\n    return False",
        "solution_func": "def g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Find a number in the list that is divisible by n.\"\"\"\n    return any(x % n == 0 for x in lst)\ndef g(lst: List[int]):\n    return lst\nassert f(5, g())\n",
        "emb": null,
        "idx_generation": 271,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Find a number in the list that is divisible by n.\"\"\"\n    return any(x % n == 0 for x in lst)",
        "solution_func": "def g(lst: List[int]):\n    return lst",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, sub: str) -> bool:\n    \"\"\"Find if the given substring is present in the string.\"\"\"\n    return sub in s\ndef g(s: str, sub: str):\n    return s\nassert f(g(), \"Python\")\n",
        "emb": null,
        "idx_generation": 271,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, sub: str) -> bool:\n    \"\"\"Find if the given substring is present in the string.\"\"\"\n    return sub in s",
        "solution_func": "def g(s: str, sub: str):\n    return s",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Find if the sum of any two numbers in the list is equal to n.\"\"\"\n    return any(x + y == n for i, x in enumerate(lst) for y in lst[i+1:])\ndef g(lst: List[int]):\n    return lst\nassert f(10, g())\n",
        "emb": null,
        "idx_generation": 271,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Find if the sum of any two numbers in the list is equal to n.\"\"\"\n    return any(x + y == n for i, x in enumerate(lst) for y in lst[i+1:])",
        "solution_func": "def g(lst: List[int]):\n    return lst",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Find two numbers whose sum is n and product is m\"\"\"\n    return any((i * j == m and i + j == n) for i in range(1, n) for j in range(1, n))\ndef g(n: int, m: int):\n    return (n - m) // 2, m // ((n - m) // 2)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 271,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Find two numbers whose sum is n and product is m\"\"\"\n    return any((i * j == m and i + j == n) for i in range(1, n) for j in range(1, n))",
        "solution_func": "def g(n: int, m: int):\n    return (n - m) // 2, m // ((n - m) // 2)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"Check if n is a perfect square\"\"\"\n    return math.isqrt(n) ** 2 == n\ndef g(n: int):\n    return n ** 2\nassert f(g())\n",
        "emb": null,
        "idx_generation": 271,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"Check if n is a perfect square\"\"\"\n    return math.isqrt(n) ** 2 == n",
        "solution_func": "def g(n: int):\n    return n ** 2",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if n is the last element in the list\"\"\"\n    return lst[-1] == n\ndef g(n: int, lst: List[int]):\n    lst.append(n)\n    return lst\nassert f(g())\n",
        "emb": null,
        "idx_generation": 271,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if n is the last element in the list\"\"\"\n    return lst[-1] == n",
        "solution_func": "def g(n: int, lst: List[int]):\n    lst.append(n)\n    return lst",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find a number that when multiplied by all the elements in lst gives the result n\"\"\"\n    product = 1\n    for num in lst:\n        product *= num\n    return product == n\ndef g(lst=[1, 2, 3, 4, 5]):\n    product = 1\n    for num in lst:\n        product *= num\n    return product\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 271,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find a number that when multiplied by all the elements in lst gives the result n\"\"\"\n    product = 1\n    for num in lst:\n        product *= num\n    return product == n",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    product = 1\n    for num in lst:\n        product *= num\n    return product",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_row_sum=10, target_col_sum=15) -> bool:\n    \"\"\"Check if the sum of elements in each row equals target_row_sum and the sum of elements in each column equals target_col_sum\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return all(row_sum == target_row_sum for row_sum in row_sums) and all(col_sum == target_col_sum for col_sum in col_sums)\ndef g(target_row_sum=10, target_col_sum=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 272,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_row_sum=10, target_col_sum=15) -> bool:\n    \"\"\"Check if the sum of elements in each row equals target_row_sum and the sum of elements in each column equals target_col_sum\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return all(row_sum == target_row_sum for row_sum in row_sums) and all(col_sum == target_col_sum for col_sum in col_sums)",
        "solution_func": "def g(target_row_sum=10, target_col_sum=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a number n is divisible by all elements in nums\"\"\"\n    return all(n % num == 0 for num in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    n = 2520\n    return n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 272,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a number n is divisible by all elements in nums\"\"\"\n    return all(n % num == 0 for num in nums)",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    n = 2520\n    return n",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if the substring exists in the given string s\"\"\"\n    return substr in s\ndef g(substr='python'):\n    s = \"I love programming in python!\"\n    return s\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 272,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if the substring exists in the given string s\"\"\"\n    return substr in s",
        "solution_func": "def g(substr='python'):\n    s = \"I love programming in python!\"\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], target=100, m=5) -> bool:\n    \"\"\"Check if there exists a combination of m numbers in the list that add up to the target\"\"\"\n    assert all([v > 0 for v in x])\n    combinations = itertools.combinations(x, m)\n    for c in combinations:\n        if sum(c) == target:\n            return True\n    return False\n\ndef g(target=100, m=5):\n    return [20, 30, 40, 10, 50, 60, 70]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 272,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(x: List[int], target=100, m=5) -> bool:\n    \"\"\"Check if there exists a combination of m numbers in the list that add up to the target\"\"\"\n    assert all([v > 0 for v in x])\n    combinations = itertools.combinations(x, m)\n    for c in combinations:\n        if sum(c) == target:\n            return True\n    return False",
        "solution_func": "def g(target=100, m=5):\n    return [20, 30, 40, 10, 50, 60, 70]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: List[str], length=7) -> bool:\n    \"\"\"Check if all strings in the list have a length greater than a given value\"\"\"\n    return all([len(s) > length for s in x])\n\ndef g(length=7):\n    return [\"apple\", \"banana\", \"orange\", \"kiwi\"]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 272,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[str], length=7) -> bool:\n    \"\"\"Check if all strings in the list have a length greater than a given value\"\"\"\n    return all([len(s) > length for s in x])",
        "solution_func": "def g(length=7):\n    return [\"apple\", \"banana\", \"orange\", \"kiwi\"]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target\"\"\"\n    assert all([v > 0 for v in x])\n    combinations = itertools.combinations(x, 2)\n    for c in combinations:\n        if sum(c) == target:\n            return True\n    return False\n\ndef g(target=50):\n    return [10, 20, 30, 40, 50, 60, 70]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 272,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(x: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target\"\"\"\n    assert all([v > 0 for v in x])\n    combinations = itertools.combinations(x, 2)\n    for c in combinations:\n        if sum(c) == target:\n            return True\n    return False",
        "solution_func": "def g(target=50):\n    return [10, 20, 30, 40, 50, 60, 70]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, num=7) -> bool:\n    \"\"\"Check if a string contains exactly num consecutive numbers\"\"\"\n    for i in range(1, len(s)):\n        if int(s[i-1])+1 == int(s[i]):\n            num -= 1\n            if num == 0:\n                return True\n    return False\ndef g(num=7):\n    return ''.join(str(i) for i in range(1, num+1))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 272,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, num=7) -> bool:\n    \"\"\"Check if a string contains exactly num consecutive numbers\"\"\"\n    for i in range(1, len(s)):\n        if int(s[i-1])+1 == int(s[i]):\n            num -= 1\n            if num == 0:\n                return True\n    return False",
        "solution_func": "def g(num=7):\n    return ''.join(str(i) for i in range(1, num+1))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='@', count=11) -> bool:\n    \"\"\"Check if a string has exactly count occurrences of a specific character\"\"\"\n    return s.count(char) == count\ndef g(char='@', count=11):\n    return char * count\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 272,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char='@', count=11) -> bool:\n    \"\"\"Check if a string has exactly count occurrences of a specific character\"\"\"\n    return s.count(char) == count",
        "solution_func": "def g(char='@', count=11):\n    return char * count",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, s1='hello', s2='world') -> bool:\n    \"\"\"Check if a string starts with s1 and ends with s2\"\"\"\n    return s.startswith(s1) and s.endswith(s2)\ndef g(s1='hello', s2='world'):\n    return s1 + ' some random text ' + s2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 272,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(s: str, s1='hello', s2='world') -> bool:\n    \"\"\"Check if a string starts with s1 and ends with s2\"\"\"\n    return s.startswith(s1) and s.endswith(s2)",
        "solution_func": "def g(s1='hello', s2='world'):\n    return s1 + ' some random text ' + s2",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a number n such that the sum of its digits is equal to the product of its digits.\"\"\"\n    digits = [int(digit) for digit in str(n)]\n    return sum(digits) == 1 if 0 in digits else 1  # Exclude numbers with zero digits\ndef g():\n    return 111\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 272,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a number n such that the sum of its digits is equal to the product of its digits.\"\"\"\n    digits = [int(digit) for digit in str(n)]\n    return sum(digits) == 1 if 0 in digits else 1  # Exclude numbers with zero digits",
        "solution_func": "def g():\n    return 111",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], target=2021) -> bool:\n    \"\"\"Given a list of integers, find two distinct elements in the list that sum up to the target value.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g(target=2021):\n    lst = random.sample(range(1, 100), 10)\n    return lst\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 273,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(lst: List[int], target=2021) -> bool:\n    \"\"\"Given a list of integers, find two distinct elements in the list that sum up to the target value.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=2021):\n    lst = random.sample(range(1, 100), 10)\n    return lst",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find a combination of elements that adds up to the target value.\"\"\"\n    for r in range(1, len(lst)+1):\n        for combo in combinations(lst, r):\n            if sum(combo) == target:\n                return True\n    return False\n\ndef g(target=10):\n    lst = [1, 2, 3, 4, 5]\n    return lst\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 273,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find a combination of elements that adds up to the target value.\"\"\"\n    for r in range(1, len(lst)+1):\n        for combo in combinations(lst, r):\n            if sum(combo) == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    lst = [1, 2, 3, 4, 5]\n    return lst",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a symmetric matrix.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 273,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a symmetric matrix.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True",
        "solution_func": "def g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: List[int], n=5) -> bool:\n    \"\"\"Check if the sum of the first n elements in the list is equal to 10.\"\"\"\n    return sum(x[:n]) == 10\ndef g(n=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 273,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=5) -> bool:\n    \"\"\"Check if the sum of the first n elements in the list is equal to 10.\"\"\"\n    return sum(x[:n]) == 10",
        "solution_func": "def g(n=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string contains the same character repeated n times.\"\"\"\n    return any([s[i:i+n] == s[i]*n for i in range(len(s)-n+1)])\ndef g(n=3):\n    return 'aaaaaabbbcccdddeeeffggghhh'\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 273,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string contains the same character repeated n times.\"\"\"\n    return any([s[i:i+n] == s[i]*n for i in range(len(s)-n+1)])",
        "solution_func": "def g(n=3):\n    return 'aaaaaabbbcccdddeeeffggghhh'",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: List[int], n=3) -> bool:\n    \"\"\"Check if there are exactly n odd numbers in the list.\"\"\"\n    return len([num for num in x if num % 2 != 0]) == n\ndef g(n=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 273,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=3) -> bool:\n    \"\"\"Check if there are exactly n odd numbers in the list.\"\"\"\n    return len([num for num in x if num % 2 != 0]) == n",
        "solution_func": "def g(n=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(primes: List[int], n=5) -> bool:\n    \"\"\"Find the sum of the first n prime numbers\"\"\"\n    assert len(primes) == n\n    return sum(primes) == 2 + 3 + 5 + 7 + 11\ndef g(n=5):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 273,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(primes: List[int], n=5) -> bool:\n    \"\"\"Find the sum of the first n prime numbers\"\"\"\n    assert len(primes) == n\n    return sum(primes) == 2 + 3 + 5 + 7 + 11",
        "solution_func": "def g(n=5):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], n=3) -> bool:\n    \"\"\"Check if the first n words in the list are all palindromes\"\"\"\n    assert len(words) >= n\n    return all(word == word[::-1] for word in words[:n])\ndef g(n=3):\n    words = ['madam', 'racecar', 'level', 'python', 'radar']\n    return words[:n]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 273,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], n=3) -> bool:\n    \"\"\"Check if the first n words in the list are all palindromes\"\"\"\n    assert len(words) >= n\n    return all(word == word[::-1] for word in words[:n])",
        "solution_func": "def g(n=3):\n    words = ['madam', 'racecar', 'level', 'python', 'radar']\n    return words[:n]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target\"\"\"\n    return any(num1 + num2 == target for i, num1 in enumerate(numbers) for num2 in numbers[i+1:])\ndef g(target=10):\n    numbers = [2, 5, 8, 3, 7, 4]\n    return numbers\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 273,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target\"\"\"\n    return any(num1 + num2 == target for i, num1 in enumerate(numbers) for num2 in numbers[i+1:])",
        "solution_func": "def g(target=10):\n    numbers = [2, 5, 8, 3, 7, 4]\n    return numbers",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target=16) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target number\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False\n\ndef g(target=16):\n    return [6, 10, -2, 4, 8]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 273,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num_list: List[int], target=16) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target number\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=16):\n    return [6, 10, -2, 4, 8]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if a given string is a palindrome when each character is repeated n times.\"\"\"\n    return s == s[::-1]\ndef g(n=4):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    s = alphabet * n\n    return s\nassert f(g())\n",
        "emb": null,
        "idx_generation": 274,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if a given string is a palindrome when each character is repeated n times.\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g(n=4):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    s = alphabet * n\n    return s",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two distinct indices i and j in the given list such that nums[i] + nums[j] equals to target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 274,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two distinct indices i and j in the given list such that nums[i] + nums[j] equals to target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists three distinct indices i, j, and k in the given list such that nums[i] + nums[j] + nums[k] equals to target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 274,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists three distinct indices i, j, and k in the given list such that nums[i] + nums[j] + nums[k] equals to target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(result: int, target=50) -> bool:\n    \"\"\"Given a result and a target number, determine if the result is greater than the target number.\"\"\"\n    return result > target\n\ndef g(target=50):\n    result = random.randint(0, 100)\n    return result\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 274,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(result: int, target=50) -> bool:\n    \"\"\"Given a result and a target number, determine if the result is greater than the target number.\"\"\"\n    return result > target",
        "solution_func": "def g(target=50):\n    result = random.randint(0, 100)\n    return result",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, circumference=2*math.pi) -> bool:\n    \"\"\"Given a radius, check if the circumference of the circle with that radius is equal to the given circumference.\"\"\"\n    return circumference == 2 * math.pi * radius\n\ndef g(circumference=2*math.pi):\n    radius = circumference / (2 * math.pi)\n    return radius\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 274,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(radius: float, circumference=2*math.pi) -> bool:\n    \"\"\"Given a radius, check if the circumference of the circle with that radius is equal to the given circumference.\"\"\"\n    return circumference == 2 * math.pi * radius",
        "solution_func": "def g(circumference=2*math.pi):\n    radius = circumference / (2 * math.pi)\n    return radius",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='apple') -> bool:\n    \"\"\"Check if the given string contains the given substring.\"\"\"\n    return substr in s\n\ndef g(substr='apple'):\n    s = \"I have an apple and a banana.\"\n    return s\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 274,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr='apple') -> bool:\n    \"\"\"Check if the given string contains the given substring.\"\"\"\n    return substr in s",
        "solution_func": "def g(substr='apple'):\n    s = \"I have an apple and a banana.\"\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub='hello') -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return sub in s\ndef g(sub='hello'):\n    return 'This is a string that contains the word ' + sub\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 274,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, sub='hello') -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return sub in s",
        "solution_func": "def g(sub='hello'):\n    return 'This is a string that contains the word ' + sub",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in a list that sum up to a target\"\"\"\n    return any((x + y == target for x in nums for y in nums if x != y))\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 274,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in a list that sum up to a target\"\"\"\n    return any((x + y == target for x in nums for y in nums if x != y))",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"Check if a target number is present in a matrix\"\"\"\n    return any((target in row for row in matrix))\ndef g(target=8):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 274,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"Check if a target number is present in a matrix\"\"\"\n    return any((target in row for row in matrix))",
        "solution_func": "def g(target=8):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, n=3, k=2) -> bool:\n    \"\"\"Find a substring of length n that contains exactly k distinct characters.\"\"\"\n    return len(set(s[i:i+n])) == k for i in range(len(s) - n + 1))\ndef g(n=3, k=2):\n    import random\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    return ''.join(random.choice(letters) for _ in range(n))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 274,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(s: str, n=3, k=2) -> bool:\n    \"\"\"Find a substring of length n that contains exactly k distinct characters.\"\"\"\n    return len(set(s[i:i+n])) == k for i in range(len(s) - n + 1))",
        "solution_func": "def g(n=3, k=2):\n    import random\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    return ''.join(random.choice(letters) for _ in range(n))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=1.5, b=2.3, c=0.1) -> bool:\n    \"\"\"Check if the given values satisfy a mathematical equation\"\"\"\n    equation = math.sin(a * x) + math.cos(b * y) - math.exp(c * z)\n    return equation == 0\n\ndef g(a=1.5, b=2.3, c=0.1):\n    x = math.pi / a\n    y = math.pi / b\n    z = math.log(1 / c)\n    return x, y, z\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 275,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=1.5, b=2.3, c=0.1) -> bool:\n    \"\"\"Check if the given values satisfy a mathematical equation\"\"\"\n    equation = math.sin(a * x) + math.cos(b * y) - math.exp(c * z)\n    return equation == 0",
        "solution_func": "def g(a=1.5, b=2.3, c=0.1):\n    x = math.pi / a\n    y = math.pi / b\n    z = math.log(1 / c)\n    return x, y, z",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: list, n: int, a=5, b=10) -> bool:\n    \"\"\"Check if a specific number is present in the list\"\"\"\n    return n in lst and lst.count(n) >= a and lst.index(n) >= b\n\ndef g(a=5, b=10):\n    lst = [random.randint(0, 9) for _ in range(a + b + 1)]\n    return lst, lst[a + b]\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 275,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(lst: list, n: int, a=5, b=10) -> bool:\n    \"\"\"Check if a specific number is present in the list\"\"\"\n    return n in lst and lst.count(n) >= a and lst.index(n) >= b",
        "solution_func": "def g(a=5, b=10):\n    lst = [random.randint(0, 9) for _ in range(a + b + 1)]\n    return lst, lst[a + b]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, days: int, a=1, b=7) -> bool:\n    \"\"\"Check if the given date is a certain number of days ahead of today\"\"\"\n    today = datetime.date.today()\n    target_date = today + datetime.timedelta(days=days)\n    return date == target_date and date.weekday() == a and date.day < b\n\ndef g(days: int, a=1, b=7):\n    today = datetime.date.today()\n    target_date = today + datetime.timedelta(days=days)\n    return target_date\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 275,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, days: int, a=1, b=7) -> bool:\n    \"\"\"Check if the given date is a certain number of days ahead of today\"\"\"\n    today = datetime.date.today()\n    target_date = today + datetime.timedelta(days=days)\n    return date == target_date and date.weekday() == a and date.day < b",
        "solution_func": "def g(days: int, a=1, b=7):\n    today = datetime.date.today()\n    target_date = today + datetime.timedelta(days=days)\n    return target_date",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(names: List[str], k=5, target=4) -> bool:\n    \"\"\"Find the number of names in the list that have a length greater than k\"\"\"\n    count = 0\n    for name in names:\n        if len(name) > k:\n            count += 1\n    return count == target\ndef g(k=5, target=4):\n    names = ['John', 'Mary', 'Michael', 'Sarah', 'James']\n    return names\nassert f(g())\n",
        "emb": null,
        "idx_generation": 275,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(names: List[str], k=5, target=4) -> bool:\n    \"\"\"Find the number of names in the list that have a length greater than k\"\"\"\n    count = 0\n    for name in names:\n        if len(name) > k:\n            count += 1\n    return count == target",
        "solution_func": "def g(k=5, target=4):\n    names = ['John', 'Mary', 'Michael', 'Sarah', 'James']\n    return names",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target number\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5]\n    return numbers\nassert f(g())\n",
        "emb": null,
        "idx_generation": 275,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target number\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    numbers = [1, 2, 3, 4, 5]\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(sentence: str, word='hello', target=2) -> bool:\n    \"\"\"Count the number of times a word appears in the sentence\"\"\"\n    count = sentence.count(word)\n    return count == target\ndef g(word='hello', target=2):\n    sentence = 'Hello, how are you? Hello, nice to meet you!'\n    return sentence\nassert f(g())\n",
        "emb": null,
        "idx_generation": 275,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(sentence: str, word='hello', target=2) -> bool:\n    \"\"\"Count the number of times a word appears in the sentence\"\"\"\n    count = sentence.count(word)\n    return count == target",
        "solution_func": "def g(word='hello', target=2):\n    sentence = 'Hello, how are you? Hello, nice to meet you!'\n    return sentence",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Find n such that it is divisible by all the prime numbers in the list primes.\"\"\"\n    return all(n % prime == 0 for prime in primes)\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    n = 1\n    while True:\n        if f(n, primes):\n            return n\n        n += 1\nassert f(g())\n",
        "emb": null,
        "idx_generation": 275,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Find n such that it is divisible by all the prime numbers in the list primes.\"\"\"\n    return all(n % prime == 0 for prime in primes)",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    n = 1\n    while True:\n        if f(n, primes):\n            return n\n        n += 1",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find a matrix such that the target integer appears in the matrix.\"\"\"\n    return any(target in row for row in matrix)\ndef g(matrix: List[List[int]], target=0):\n    for row in matrix:\n        if target in row:\n            return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 275,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find a matrix such that the target integer appears in the matrix.\"\"\"\n    return any(target in row for row in matrix)",
        "solution_func": "def g(matrix: List[List[int]], target=0):\n    for row in matrix:\n        if target in row:\n            return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, sub: str='hello') -> bool:\n    \"\"\"Find a string such that the sub string appears in the string s.\"\"\"\n    return sub in s\ndef g(s: str, sub: str='hello'):\n    return s + sub\nassert f(g())\n",
        "emb": null,
        "idx_generation": 275,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, sub: str='hello') -> bool:\n    \"\"\"Find a string such that the sub string appears in the string s.\"\"\"\n    return sub in s",
        "solution_func": "def g(s: str, sub: str='hello'):\n    return s + sub",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, target='dog', max_len=6) -> bool:\n    \"\"\"Check if a string is a palindrome and its length is less than or equal to the given max_len.\n    The target string to check palindrome can be any value.\"\"\"\n    if len(s) <= max_len:\n        return s == s[::-1]\n    return s == target and len(s) <= max_len\n\ndef g(target='dog', max_len=6):\n    if len(target) <= max_len:\n        return target\n    return target[:max_len-2] + target[-1]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 275,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='dog', max_len=6) -> bool:\n    \"\"\"Check if a string is a palindrome and its length is less than or equal to the given max_len.\n    The target string to check palindrome can be any value.\"\"\"\n    if len(s) <= max_len:\n        return s == s[::-1]\n    return s == target and len(s) <= max_len",
        "solution_func": "def g(target='dog', max_len=6):\n    if len(target) <= max_len:\n        return target\n    return target[:max_len-2] + target[-1]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.array, target_sum=10) -> bool:\n    \"\"\"Find a pair of numbers in the array that sum up to the target sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\n\ndef g(arr: np.array):\n    return arr\n\nassert f(g(np.array([1, 2, 3, 4, 5])))\n",
        "emb": null,
        "idx_generation": 276,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.array, target_sum=10) -> bool:\n    \"\"\"Find a pair of numbers in the array that sum up to the target sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(arr: np.array):\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: float, target=100) -> bool:\n    \"\"\"Check if the square root of the given number is equal to the target.\"\"\"\n    return math.isclose(math.sqrt(num), target)\n\ndef g():\n    return 10000\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 276,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(num: float, target=100) -> bool:\n    \"\"\"Check if the square root of the given number is equal to the target.\"\"\"\n    return math.isclose(math.sqrt(num), target)",
        "solution_func": "def g():\n    return 10000",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target='hello') -> bool:\n    \"\"\"Check if the given string is a palindrome and contains the target word.\"\"\"\n    return string == string[::-1] and target in string\n\ndef g(target='hello'):\n    return target + target[::-1]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 276,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, target='hello') -> bool:\n    \"\"\"Check if the given string is a palindrome and contains the target word.\"\"\"\n    return string == string[::-1] and target in string",
        "solution_func": "def g(target='hello'):\n    return target + target[::-1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(result: float, x=5, y=7) -> bool:\n    \"\"\"Find the result of computing the logarithm of x to the base y\"\"\"\n    return result == math.log(x, y)\n\ndef g(x=5, y=7):\n    return math.log(x, y)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 276,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(result: float, x=5, y=7) -> bool:\n    \"\"\"Find the result of computing the logarithm of x to the base y\"\"\"\n    return result == math.log(x, y)",
        "solution_func": "def g(x=5, y=7):\n    return math.log(x, y)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: str, text=\"hello\", n=3) -> bool:\n    \"\"\"Find the result of repeating the text n times\"\"\"\n    return result == text * n\n\ndef g(text=\"hello\", n=3):\n    return text * n\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 276,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(result: str, text=\"hello\", n=3) -> bool:\n    \"\"\"Find the result of repeating the text n times\"\"\"\n    return result == text * n",
        "solution_func": "def g(text=\"hello\", n=3):\n    return text * n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(result: int, lst=[1,2,3,4,5,6,7,8,9,10]) -> bool:\n    \"\"\"Find a random element from the given list\"\"\"\n    return result in lst\n\ndef g(lst=[1,2,3,4,5,6,7,8,9,10]):\n    return random.choice(lst)\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 276,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(result: int, lst=[1,2,3,4,5,6,7,8,9,10]) -> bool:\n    \"\"\"Find a random element from the given list\"\"\"\n    return result in lst",
        "solution_func": "def g(lst=[1,2,3,4,5,6,7,8,9,10]):\n    return random.choice(lst)",
        "map_ix": [
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0, num_elements=2) -> bool:\n    \"\"\"Find num_elements elements in nums that sum up to the target.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, num_elements))\ndef g(target=0, num_elements=2):\n    return [target] * num_elements\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 276,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0, num_elements=2) -> bool:\n    \"\"\"Find num_elements elements in nums that sum up to the target.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, num_elements))",
        "solution_func": "def g(target=0, num_elements=2):\n    return [target] * num_elements",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, divisors=[3, 5], num_divisors=2) -> bool:\n    \"\"\"Find an integer that has num_divisors different divisors from the list divisors.\"\"\"\n    return sum(n % d == 0 for d in divisors) == num_divisors\ndef g(divisors=[3, 5], num_divisors=2):\n    from itertools import count\n    return next(n for n in count(1) if sum(n % d == 0 for d in divisors) == num_divisors)\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 276,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, divisors=[3, 5], num_divisors=2) -> bool:\n    \"\"\"Find an integer that has num_divisors different divisors from the list divisors.\"\"\"\n    return sum(n % d == 0 for d in divisors) == num_divisors",
        "solution_func": "def g(divisors=[3, 5], num_divisors=2):\n    from itertools import count\n    return next(n for n in count(1) if sum(n % d == 0 for d in divisors) == num_divisors)",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub_str='abba', num_sub_str=2) -> bool:\n    \"\"\"Find num_sub_str occurrences of sub_str in s.\"\"\"\n    return s.count(sub_str) == num_sub_str\ndef g(sub_str='abba', num_sub_str=2):\n    return sub_str * num_sub_str\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 276,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, sub_str='abba', num_sub_str=2) -> bool:\n    \"\"\"Find num_sub_str occurrences of sub_str in s.\"\"\"\n    return s.count(sub_str) == num_sub_str",
        "solution_func": "def g(sub_str='abba', num_sub_str=2):\n    return sub_str * num_sub_str",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int, n=100) -> bool:\n    \"\"\"Find three integers that sum up to n\"\"\"\n    return x + y + z == n\ndef g(n=100):\n    x = 1\n    y = 2\n    z = n - x - y\n    return x, y, z\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 276,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, y: int, z: int, n=100) -> bool:\n    \"\"\"Find three integers that sum up to n\"\"\"\n    return x + y + z == n",
        "solution_func": "def g(n=100):\n    x = 1\n    y = 2\n    z = n - x - y\n    return x, y, z",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom collections import Counter\n\ndef f(nums: List[int], target=10, length=5) -> bool:\n    \"\"\"Find a list of numbers where a specific target number appears a certain number of times consecutively.\"\"\"\n    count = 0\n    for num in nums:\n        if num == target:\n            count += 1\n            if count == length:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(target=10, length=5):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 11, 12, 13, 14, 15]\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 277,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom collections import Counter\n\ndef f(nums: List[int], target=10, length=5) -> bool:\n    \"\"\"Find a list of numbers where a specific target number appears a certain number of times consecutively.\"\"\"\n    count = 0\n    for num in nums:\n        if num == target:\n            count += 1\n            if count == length:\n                return True\n        else:\n            count = 0\n    return False",
        "solution_func": "def g(target=10, length=5):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 11, 12, 13, 14, 15]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(word: str, vowels='aeiou') -> bool:\n    \"\"\"Check if a word contains all the vowels in a specific order.\"\"\"\n    vowel_index = 0\n    for char in word:\n        if char == vowels[vowel_index]:\n            vowel_index += 1\n            if vowel_index == len(vowels):\n                return True\n    return False\n\ndef g(vowels='aeiou'):\n    word = 'queueing'\n    return word\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 277,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str, vowels='aeiou') -> bool:\n    \"\"\"Check if a word contains all the vowels in a specific order.\"\"\"\n    vowel_index = 0\n    for char in word:\n        if char == vowels[vowel_index]:\n            vowel_index += 1\n            if vowel_index == len(vowels):\n                return True\n    return False",
        "solution_func": "def g(vowels='aeiou'):\n    word = 'queueing'\n    return word",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100, length=4) -> bool:\n    \"\"\"Find a sublist of numbers where the sum is equal to a specific target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if sum(nums[i:j+1]) == target:\n                return True\n    return False\n\ndef g(target=100, length=4):\n    nums = [25, 50, 75, 100, 125, 150, 175, 200]\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 277,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100, length=4) -> bool:\n    \"\"\"Find a sublist of numbers where the sum is equal to a specific target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if sum(nums[i:j+1]) == target:\n                return True\n    return False",
        "solution_func": "def g(target=100, length=4):\n    nums = [25, 50, 75, 100, 125, 150, 175, 200]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13], target=100) -> bool:\n    \"\"\"Find a combination of numbers from nums that add up to the target value\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(len(nums)+1) for comb in combinations(nums, r))\ndef g(nums=[2, 3, 5, 7, 11, 13], target=100):\n    return [comb for r in range(len(nums)+1) for comb in combinations(nums, r) if sum(comb) == target][0]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 277,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13], target=100) -> bool:\n    \"\"\"Find a combination of numbers from nums that add up to the target value\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(len(nums)+1) for comb in combinations(nums, r))",
        "solution_func": "def g(nums=[2, 3, 5, 7, 11, 13], target=100):\n    return [comb for r in range(len(nums)+1) for comb in combinations(nums, r) if sum(comb) == target][0]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: str, target_length=5) -> bool:\n    \"\"\"Check if the given string can be rearranged to form a palindrome of length target_length\"\"\"\n    from itertools import permutations\n    return any(''.join(perm)[:target_length] == ''.join(perm)[:target_length][::-1] for perm in permutations(n))\ndef g(target_length=5):\n    return ''.join(['a', 'b', 'c', 'd', 'e'])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 277,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(n: str, target_length=5) -> bool:\n    \"\"\"Check if the given string can be rearranged to form a palindrome of length target_length\"\"\"\n    from itertools import permutations\n    return any(''.join(perm)[:target_length] == ''.join(perm)[:target_length][::-1] for perm in permutations(n))",
        "solution_func": "def g(target_length=5):\n    return ''.join(['a', 'b', 'c', 'd', 'e'])",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, nums=[2, 5, 7, 11, 13], target=100) -> bool:\n    \"\"\"Find a combination of numbers from nums that add up to the target value\"\"\"\n    from itertools import combinations_with_replacement\n    return any(sum(comb) == target for comb in combinations_with_replacement(nums, n))\ndef g(nums=[2, 5, 7, 11, 13], target=100):\n    return [comb for comb in combinations_with_replacement(nums, n) if sum(comb) == target][0]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 277,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, nums=[2, 5, 7, 11, 13], target=100) -> bool:\n    \"\"\"Find a combination of numbers from nums that add up to the target value\"\"\"\n    from itertools import combinations_with_replacement\n    return any(sum(comb) == target for comb in combinations_with_replacement(nums, n))",
        "solution_func": "def g(nums=[2, 5, 7, 11, 13], target=100):\n    return [comb for comb in combinations_with_replacement(nums, n) if sum(comb) == target][0]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums=[10, 20, 30, 40, 50]):\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 277,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(nums=[10, 20, 30, 40, 50]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(nums=[10, 20, 30, 40, 50]):\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 277,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))",
        "solution_func": "def g(nums=[10, 20, 30, 40, 50]):\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=1000) -> bool:\n    \"\"\"Check if there exists a quadruplet of numbers in the list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] + nums[k] + nums[l] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)) for l in range(k+1, len(nums)))\ndef g(nums=[100, 200, 300, 400, 500]):\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 277,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=1000) -> bool:\n    \"\"\"Check if there exists a quadruplet of numbers in the list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] + nums[k] + nums[l] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)) for l in range(k+1, len(nums)))",
        "solution_func": "def g(nums=[100, 200, 300, 400, 500]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, li: List[int]) -> bool:\n    \"\"\"Given a list of integers and a target number n, determine if there are two numbers in the list that add up to n.\n    Sample input:\n    10\n    [1, 2, 3, 4, 5]\n    Sample output:\n    True\"\"\"\n    return any(n - num in li for num in li)\ndef g(li: List[int]):\n    return li[:2]\nassert f(10, g([1, 2, 3, 4, 5]))\n",
        "emb": null,
        "idx_generation": 277,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, li: List[int]) -> bool:\n    \"\"\"Given a list of integers and a target number n, determine if there are two numbers in the list that add up to n.\n    Sample input:\n    10\n    [1, 2, 3, 4, 5]\n    Sample output:\n    True\"\"\"\n    return any(n - num in li for num in li)",
        "solution_func": "def g(li: List[int]):\n    return li[:2]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, substr=\"world\", start=6) -> bool:\n    \"\"\"Check if the given substring is present in the original string starting from the given index.\"\"\"\n    return s.startswith(substr, start)\ndef g(substr=\"world\", start=6):\n    return \"hello world!\"[start:].startswith(substr)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 278,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr=\"world\", start=6) -> bool:\n    \"\"\"Check if the given substring is present in the original string starting from the given index.\"\"\"\n    return s.startswith(substr, start)",
        "solution_func": "def g(substr=\"world\", start=6):\n    return \"hello world!\"[start:].startswith(substr)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 1]) -> bool:\n    \"\"\"Check if the nth number in the list is a Fibonacci number.\"\"\"\n    while len(lst) < n:\n        lst.append(lst[-1] + lst[-2])\n    return lst[n-1] == n\ndef g():\n    lst = [1, 1]\n    n = 7\n    while len(lst) < n:\n        lst.append(lst[-1] + lst[-2])\n    return lst[n-1]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 278,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[1, 1]) -> bool:\n    \"\"\"Check if the nth number in the list is a Fibonacci number.\"\"\"\n    while len(lst) < n:\n        lst.append(lst[-1] + lst[-2])\n    return lst[n-1] == n",
        "solution_func": "def g():\n    lst = [1, 1]\n    n = 7\n    while len(lst) < n:\n        lst.append(lst[-1] + lst[-2])\n    return lst[n-1]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if there are at least n occurrences of the same character in the string.\"\"\"\n    from collections import Counter\n    counts = Counter(s)\n    return any(count >= n for count in counts.values())\ndef g(n=3):\n    return \"abcaaadef\"[n-1]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 278,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if there are at least n occurrences of the same character in the string.\"\"\"\n    from collections import Counter\n    counts = Counter(s)\n    return any(count >= n for count in counts.values())",
        "solution_func": "def g(n=3):\n    return \"abcaaadef\"[n-1]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a list of numbers that can be added together to reach the target number\"\"\"\n    return sum(nums) == target\ndef g(target=100):\n    return [25, 25, 50]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 278,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a list of numbers that can be added together to reach the target number\"\"\"\n    return sum(nums) == target",
        "solution_func": "def g(target=100):\n    return [25, 25, 50]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Find a string that contains all the substrings in any order\"\"\"\n    return all((sub in s for sub in substrings))\ndef g(substrings=['apple', 'banana', 'cherry']):\n    return 'bananaapplecherry'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 278,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Find a string that contains all the substrings in any order\"\"\"\n    return all((sub in s for sub in substrings))",
        "solution_func": "def g(substrings=['apple', 'banana', 'cherry']):\n    return 'bananaapplecherry'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Find a list of numbers that can be multiplied together to reach the target number\"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product == target\ndef g(target=50):\n    return [2, 5, 5]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 278,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Find a list of numbers that can be multiplied together to reach the target number\"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product == target",
        "solution_func": "def g(target=50):\n    return [2, 5, 5]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='python', count=3) -> bool:\n    \"\"\"Check if a given substring appears count number of times in a string.\"\"\"\n    return string.count(substr) == count\ndef g(substr='python', count=3):\n    string = substr * count\n    return string\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 278,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substr='python', count=3) -> bool:\n    \"\"\"Check if a given substring appears count number of times in a string.\"\"\"\n    return string.count(substr) == count",
        "solution_func": "def g(substr='python', count=3):\n    string = substr * count\n    return string",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10, count=2) -> bool:\n    \"\"\"Find if there exists a pair of numbers in a list whose sum is equal to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=10, count=2):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 278,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10, count=2) -> bool:\n    \"\"\"Find if there exists a pair of numbers in a list whose sum is equal to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=10, count=2):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find if a target number exists in a matrix.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    row = 0\n    col = n - 1\n    while row < m and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] > target:\n            col -= 1\n        else:\n            row += 1\n    return False\ndef g(target=10):\n    matrix = [\n        [1, 4, 7, 11, 15],\n        [2, 5, 8, 12, 19],\n        [3, 6, 9, 16, 22],\n        [10, 13, 14, 17, 24],\n        [18, 21, 23, 26, 30]\n    ]\n    return matrix\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 278,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find if a target number exists in a matrix.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    row = 0\n    col = n - 1\n    while row < m and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] > target:\n            col -= 1\n        else:\n            row += 1\n    return False",
        "solution_func": "def g(target=10):\n    matrix = [\n        [1, 4, 7, 11, 15],\n        [2, 5, 8, 12, 19],\n        [3, 6, 9, 16, 22],\n        [10, 13, 14, 17, 24],\n        [18, 21, 23, 26, 30]\n    ]\n    return matrix",
        "map_ix": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Determine if there are three numbers in the list that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g(target=0):\n    return [-target, target, 0]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 278,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Determine if there are three numbers in the list that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))",
        "solution_func": "def g(target=0):\n    return [-target, target, 0]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: List[int], target=42) -> bool:\n    \"\"\"Find the two numbers in the list that add up to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(lst: List[int], target=42):\n    return lst\nassert f(g())\n",
        "emb": null,
        "idx_generation": 279,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=42) -> bool:\n    \"\"\"Find the two numbers in the list that add up to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False",
        "solution_func": "def g(lst: List[int], target=42):\n    return lst",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(sentence: str, word='') -> bool:\n    \"\"\"Check if the word is a palindrome in the sentence\"\"\"\n    sentence = sentence.lower()\n    sentence = sentence.replace(\" \", \"\")\n    return word.lower() == word[::-1].lower()\ndef g(sentence: str, word=''):\n    return sentence, word\nassert f(g())\n",
        "emb": null,
        "idx_generation": 279,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(sentence: str, word='') -> bool:\n    \"\"\"Check if the word is a palindrome in the sentence\"\"\"\n    sentence = sentence.lower()\n    sentence = sentence.replace(\" \", \"\")\n    return word.lower() == word[::-1].lower()",
        "solution_func": "def g(sentence: str, word=''):\n    return sentence, word",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the list\"\"\"\n    nums.sort()\n    for i in range(len(nums) - k + 1):\n        if nums[i+k-1] - nums[i] == k - 1:\n            return True\n    return False\ndef g(nums: List[int], k=3):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 279,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the list\"\"\"\n    nums.sort()\n    for i in range(len(nums) - k + 1):\n        if nums[i+k-1] - nums[i] == k - 1:\n            return True\n    return False",
        "solution_func": "def g(nums: List[int], k=3):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10, k=2) -> bool:\n    \"\"\"Find if there exists two integers in the given list such that their sum is equal to the target\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10, k=2):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 279,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10, k=2) -> bool:\n    \"\"\"Find if there exists two integers in the given list such that their sum is equal to the target\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=10, k=2):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Find if the given target value exists in the matrix\"\"\"\n    return any(target in row for row in matrix)\ndef g(target=5):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 279,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Find if the given target value exists in the matrix\"\"\"\n    return any(target in row for row in matrix)",
        "solution_func": "def g(target=5):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20, k=3) -> bool:\n    \"\"\"Find if there exists three integers in the given list such that their sum is equal to the target\"\"\"\n    return any((nums[i] + nums[j] + nums[z] == target) for i in range(len(nums)) for j in range(i+1, len(nums)) for z in range(j+1, len(nums)))\ndef g(target=20, k=3):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 279,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20, k=3) -> bool:\n    \"\"\"Find if there exists three integers in the given list such that their sum is equal to the target\"\"\"\n    return any((nums[i] + nums[j] + nums[z] == target) for i in range(len(nums)) for j in range(i+1, len(nums)) for z in range(j+1, len(nums)))",
        "solution_func": "def g(target=20, k=3):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the sum of any two elements in the list equals the given number n\"\"\"\n    for i, num1 in enumerate(arr):\n        for j, num2 in enumerate(arr[i+1:]):\n            if num1 + num2 == n:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return sum(arr)\n\nassert f(g(), n=9)\n",
        "emb": null,
        "idx_generation": 279,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the sum of any two elements in the list equals the given number n\"\"\"\n    for i, num1 in enumerate(arr):\n        for j, num2 in enumerate(arr[i+1:]):\n            if num1 + num2 == n:\n                return True\n    return False",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5]):\n    return sum(arr)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: list, n=3) -> bool:\n    \"\"\"Check if there exists a subarray in the list with a length greater than or equal to n, such that the sum of the elements in the subarray is divisible by n\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+n, len(arr)+1):\n            if sum(arr[i:j]) % n == 0:\n                return True\n    return False\n\ndef g(n=3):\n    return [num for num in range(1, 10)]\n\nassert f(g(), n=3)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 279,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: list, n=3) -> bool:\n    \"\"\"Check if there exists a subarray in the list with a length greater than or equal to n, such that the sum of the elements in the subarray is divisible by n\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+n, len(arr)+1):\n            if sum(arr[i:j]) % n == 0:\n                return True\n    return False",
        "solution_func": "def g(n=3):\n    return [num for num in range(1, 10)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the product of any two elements in the list equals the given number n\"\"\"\n    for i, num1 in enumerate(arr):\n        for j, num2 in enumerate(arr[i+1:]):\n            if num1 * num2 == n:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return sum(arr)\n\nassert f(g(), n=8)\n",
        "emb": null,
        "idx_generation": 279,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the product of any two elements in the list equals the given number n\"\"\"\n    for i, num1 in enumerate(arr):\n        for j, num2 in enumerate(arr[i+1:]):\n            if num1 * num2 == n:\n                return True\n    return False",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5]):\n    return sum(arr)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Given a list of integers, find the count of pairs (a, b) such that a + b = n\"\"\"\n    count = 0\n    for i, num1 in enumerate(nums):\n        for j, num2 in enumerate(nums[i+1:]):\n            if num1 + num2 == n:\n                count += 1\n    return count\ndef g(nums=[1, 2, 3, 4, 5]):\n    return sum(nums)\nassert f(g()) == True\n",
        "emb": null,
        "idx_generation": 279,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Given a list of integers, find the count of pairs (a, b) such that a + b = n\"\"\"\n    count = 0\n    for i, num1 in enumerate(nums):\n        for j, num2 in enumerate(nums[i+1:]):\n            if num1 + num2 == n:\n                count += 1\n    return count",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return sum(nums)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to n.\"\"\"\n    return any((n - x in nums for x in nums))\ndef g(nums=[2, 4, 6, 8, 10]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 280,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to n.\"\"\"\n    return any((n - x in nums for x in nums))",
        "solution_func": "def g(nums=[2, 4, 6, 8, 10]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if the string can be partitioned into k non-empty substrings with equal sums.\"\"\"\n    if len(s) % k != 0:\n        return False\n    target_sum = sum(map(int, s)) // k\n    if any((int(s[i:i+k]) != target_sum for i in range(0, len(s), k))):\n        return False\n    return True\ndef g(k=3):\n    return \"333333\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 280,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if the string can be partitioned into k non-empty substrings with equal sums.\"\"\"\n    if len(s) % k != 0:\n        return False\n    target_sum = sum(map(int, s)) // k\n    if any((int(s[i:i+k]) != target_sum for i in range(0, len(s), k))):\n        return False\n    return True",
        "solution_func": "def g(k=3):\n    return \"333333\"",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subset of nums that sums up to the target.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 280,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subset of nums that sums up to the target.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the given string contains all the characters of the target string in order\"\"\"\n    target_index = 0\n    for char in s:\n        if char == target[target_index]:\n            target_index += 1\n        if target_index == len(target):\n            return True\n    return False\ndef g(target='python'):\n    return ''.join([c for c in target] * 3)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 280,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the given string contains all the characters of the target string in order\"\"\"\n    target_index = 0\n    for char in s:\n        if char == target[target_index]:\n            target_index += 1\n        if target_index == len(target):\n            return True\n    return False",
        "solution_func": "def g(target='python'):\n    return ''.join([c for c in target] * 3)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if it is possible to find two numbers in the list that add up to the target\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, target-5]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 280,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if it is possible to find two numbers in the list that add up to the target\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, target-5]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Check if the given string can be rearranged to form a palindrome with the target length\"\"\"\n    char_count = {}\n    odd_count = 0\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n        if char_count[char] % 2:\n            odd_count += 1\n        else:\n            odd_count -= 1\n    return odd_count <= target_length\ndef g(target_length=10):\n    return 'aabbccddee' + 'a' * (target_length - 10)\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 280,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Check if the given string can be rearranged to form a palindrome with the target length\"\"\"\n    char_count = {}\n    odd_count = 0\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n        if char_count[char] % 2:\n            odd_count += 1\n        else:\n            odd_count -= 1\n    return odd_count <= target_length",
        "solution_func": "def g(target_length=10):\n    return 'aabbccddee' + 'a' * (target_length - 10)",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=19) -> bool:\n    \"\"\"Return True if the sum of all elements in the matrix is equal to the target value.\"\"\"\n    return np.sum(matrix) == target\n\ndef g(target=19):\n    return np.array([[1, 2, 3], [4, 5, 6], [7, 8, 10]])\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 280,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=19) -> bool:\n    \"\"\"Return True if the sum of all elements in the matrix is equal to the target value.\"\"\"\n    return np.sum(matrix) == target",
        "solution_func": "def g(target=19):\n    return np.array([[1, 2, 3], [4, 5, 6], [7, 8, 10]])",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Return True if two numbers in the list add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=9):\n    return [2, 7, 11, 15]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 280,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Return True if two numbers in the list add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=9):\n    return [2, 7, 11, 15]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(r: float, h=5, volume=100) -> bool:\n    \"\"\"Return True if the volume of a cylinder with given radius and height is equal to the target volume.\"\"\"\n    return math.pi * r**2 * h == volume\n\ndef g(h=5, volume=100):\n    return math.sqrt(volume / (math.pi * h))\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 280,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(r: float, h=5, volume=100) -> bool:\n    \"\"\"Return True if the volume of a cylinder with given radius and height is equal to the target volume.\"\"\"\n    return math.pi * r**2 * h == volume",
        "solution_func": "def g(h=5, volume=100):\n    return math.sqrt(volume / (math.pi * h))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=100, b=200) -> bool:\n    \"\"\"Check if a number is a multiple of either a or b\"\"\"\n    return x % a == 0 or x % b == 0\n\ndef g(a=100, b=200):\n    return a * b\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 280,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=100, b=200) -> bool:\n    \"\"\"Check if a number is a multiple of either a or b\"\"\"\n    return x % a == 0 or x % b == 0",
        "solution_func": "def g(a=100, b=200):\n    return a * b",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Given a list of numbers, find a subset that sums up to the target number.\"\"\"\n    import itertools\n    for r in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            if sum(subset) == target:\n                return True\n    return False\ndef g():\n    nums = [10, 5, 8, 3, 2, 7]\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 281,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Given a list of numbers, find a subset that sums up to the target number.\"\"\"\n    import itertools\n    for r in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            if sum(subset) == target:\n                return True\n    return False",
        "solution_func": "def g():\n    nums = [10, 5, 8, 3, 2, 7]\n    return nums",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, word='python') -> bool:\n    \"\"\"Given a sentence, check if a specific word is present.\"\"\"\n    return word in sentence.lower().split()\ndef g():\n    sentence = \"I love Python programming language.\"\n    word = \"python\"\n    return sentence, word\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 281,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(sentence: str, word='python') -> bool:\n    \"\"\"Given a sentence, check if a specific word is present.\"\"\"\n    return word in sentence.lower().split()",
        "solution_func": "def g():\n    sentence = \"I love Python programming language.\"\n    word = \"python\"\n    return sentence, word",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Given a matrix, find a row that contains the target number.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 281,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Given a matrix, find a row that contains the target number.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, k=2) -> bool:\n    \"\"\"Find if there exists k numbers in the list that sum up to the target value.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))\ndef g(target=10, k=2):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 281,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, k=2) -> bool:\n    \"\"\"Find if there exists k numbers in the list that sum up to the target value.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))",
        "solution_func": "def g(target=10, k=2):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7]) -> bool:\n    \"\"\"Find if the given number is a prime number.\"\"\"\n    return n in primes\ndef g(primes=[2, 3, 5, 7]):\n    return 7\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 281,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7]) -> bool:\n    \"\"\"Find if the given number is a prime number.\"\"\"\n    return n in primes",
        "solution_func": "def g(primes=[2, 3, 5, 7]):\n    return 7",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find if the target value exists in the matrix.\"\"\"\n    return any(target in row for row in matrix)\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 281,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find if the target value exists in the matrix.\"\"\"\n    return any(target in row for row in matrix)",
        "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Check if s can be rearranged to form a palindrome of length target_length\"\"\"\n    return len(s) == target_length and s == s[::-1]\ndef g(target_length=10):\n    import string\n    import random\n    chars = string.ascii_lowercase\n    s = ''.join(random.choices(chars, k=target_length))\n    return s\nassert f(g())\n",
        "emb": null,
        "idx_generation": 281,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Check if s can be rearranged to form a palindrome of length target_length\"\"\"\n    return len(s) == target_length and s == s[::-1]",
        "solution_func": "def g(target_length=10):\n    import string\n    import random\n    chars = string.ascii_lowercase\n    s = ''.join(random.choices(chars, k=target_length))\n    return s",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(lst: List[int], target_sum=100) -> bool:\n    \"\"\"Find two numbers in lst that sum up to target_sum\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=100):\n    import random\n    lst = random.sample(range(1, 101), 50)\n    return lst\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 281,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(lst: List[int], target_sum=100) -> bool:\n    \"\"\"Find two numbers in lst that sum up to target_sum\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=100):\n    import random\n    lst = random.sample(range(1, 101), 50)\n    return lst",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if n is divisible by k\"\"\"\n    return n % k == 0\ndef g(k=3):\n    import random\n    n = random.randint(1, 100)\n    return n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 281,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if n is divisible by k\"\"\"\n    return n % k == 0",
        "solution_func": "def g(k=3):\n    import random\n    n = random.randint(1, 100)\n    return n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[123456789, 987654321, 246813579], target=1234567890) -> bool:\n    \"\"\"Given a list of numbers and a target value, determine if there is a way to select a subset of the numbers\n    such that their sum is equal to the target value.\n    Sample Input:\n    nums = [123456789, 987654321, 246813579]\n    target = 1234567890\n    Sample Output:\n    True\"\"\"\n    return sum(n for n in nums if n <= target) == target\ndef g(nums=[123456789, 987654321, 246813579], target=1234567890):\n    return sum(nums)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 281,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[123456789, 987654321, 246813579], target=1234567890) -> bool:\n    \"\"\"Given a list of numbers and a target value, determine if there is a way to select a subset of the numbers\n    such that their sum is equal to the target value.\n    Sample Input:\n    nums = [123456789, 987654321, 246813579]\n    target = 1234567890\n    Sample Output:\n    True\"\"\"\n    return sum(n for n in nums if n <= target) == target",
        "solution_func": "def g(nums=[123456789, 987654321, 246813579], target=1234567890):\n    return sum(nums)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=10, b=2) -> bool:\n    \"\"\"Check if the square root of a number is equal to the product of two other numbers\"\"\"\n    return math.isclose(math.sqrt(x), a * b)\n\ndef g(a=10, b=2):\n    return a * b\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 282,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=10, b=2) -> bool:\n    \"\"\"Check if the square root of a number is equal to the product of two other numbers\"\"\"\n    return math.isclose(math.sqrt(x), a * b)",
        "solution_func": "def g(a=10, b=2):\n    return a * b",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=5, reverse=False) -> bool:\n    \"\"\"Check if a string is equal to the concatenation of n copies of itself\"\"\"\n    return s == s * n\n\ndef g(n=5):\n    return 'abc' * n\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 282,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=5, reverse=False) -> bool:\n    \"\"\"Check if a string is equal to the concatenation of n copies of itself\"\"\"\n    return s == s * n",
        "solution_func": "def g(n=5):\n    return 'abc' * n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=100, b=10, c=1) -> bool:\n    \"\"\"Check if a number is divisible by the product of three other numbers\"\"\"\n    return x % (a * b * c) == 0\n\ndef g(a=100, b=10, c=1):\n    return a * b * c\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 282,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=100, b=10, c=1) -> bool:\n    \"\"\"Check if a number is divisible by the product of three other numbers\"\"\"\n    return x % (a * b * c) == 0",
        "solution_func": "def g(a=100, b=10, c=1):\n    return a * b * c",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, y: int) -> bool:\n    \"\"\"Find if x is a factor of y!\"\"\"\n    assert x > 0 and y >= x\n    factorial = math.factorial(y)\n    return factorial % x == 0\n\ndef g(x: int, y: int):\n    return x\n\nassert f(g(x=3, y=6))\n",
        "emb": null,
        "idx_generation": 282,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: int, y: int) -> bool:\n    \"\"\"Find if x is a factor of y!\"\"\"\n    assert x > 0 and y >= x\n    factorial = math.factorial(y)\n    return factorial % x == 0",
        "solution_func": "def g(x: int, y: int):\n    return x",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(li: List[int]) -> bool:\n    \"\"\"Find if the list contains any duplicate values\"\"\"\n    return len(li) == len(set(li))\n\ndef g(n: int):\n    return random.sample(range(n), n)\n\nassert f(g(n=100))\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 282,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(li: List[int]) -> bool:\n    \"\"\"Find if the list contains any duplicate values\"\"\"\n    return len(li) == len(set(li))",
        "solution_func": "def g(n: int):\n    return random.sample(range(n), n)",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find if n is a Fibonacci number\"\"\"\n    assert n >= 0\n    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b\n    return b == n\n\ndef g():\n    return random.randint(0, 10000)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 282,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find if n is a Fibonacci number\"\"\"\n    assert n >= 0\n    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b\n    return b == n",
        "solution_func": "def g():\n    return random.randint(0, 10000)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list whose sum is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(arr, 3))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 282,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list whose sum is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(arr, 3))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find a row and column in the matrix where the sum of the elements in the row and column is equal to the target number.\"\"\"\n    for i, row in enumerate(matrix):\n        for j, col in enumerate(matrix[i]):\n            if sum(row) + sum(matrix[x][j] for x in range(len(matrix))) == target:\n                return True\n    return False\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 282,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find a row and column in the matrix where the sum of the elements in the row and column is equal to the target number.\"\"\"\n    for i, row in enumerate(matrix):\n        for j, col in enumerate(matrix[i]):\n            if sum(row) + sum(matrix[x][j] for x in range(len(matrix))) == target:\n                return True\n    return False",
        "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list whose product is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(a * b == target for a, b in combinations(arr, 2))\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 282,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list whose product is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(a * b == target for a, b in combinations(arr, 2))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, n=3) -> bool:\n    \"\"\"Find if there exists a combination of n numbers in the list that sum up to the target\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, n):\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=15):\n    return nums, target\n\nassert f(*g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 282,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, n=3) -> bool:\n    \"\"\"Find if there exists a combination of n numbers in the list that sum up to the target\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, n):\n        if sum(combo) == target:\n            return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=15):\n    return nums, target",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], tot=20, n=4) -> bool:\n    \"\"\"Find n distinct positive even integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 == 0 for i in nums))\ndef g(tot=20, n=4):\n    return list(range(2, 2 * n + 1, 2)) + [tot - sum(range(2, 2 * n + 1, 2))]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 283,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], tot=20, n=4) -> bool:\n    \"\"\"Find n distinct positive even integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 == 0 for i in nums))",
        "solution_func": "def g(tot=20, n=4):\n    return list(range(2, 2 * n + 1, 2)) + [tot - sum(range(2, 2 * n + 1, 2))]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    \"\"\"Find a path with an odd number of nodes from nodes 0 to n in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 1\ndef g(edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max((max(e) for e in edges))\n    for _ in range(n + 1):\n        for (i, j) in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 283,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    \"\"\"Find a path with an odd number of nodes from nodes 0 to n in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 1",
        "solution_func": "def g(edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max((max(e) for e in edges))\n    for _ in range(n + 1):\n        for (i, j) in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)",
        "map_ix": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(counts: List[int], target_prob=0.0625) -> bool:\n    \"\"\"Suppose a list of m 2's and n -1's are permuted at random.\n    What is the probability that all of the cumulative sums are positive?\n    The goal is to find counts = [m, n] that make the probability of the ballot problem close to target_prob.\"\"\"\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob=0.0625):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-06:\n            return [m, n]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 283,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(counts: List[int], target_prob=0.0625) -> bool:\n    \"\"\"Suppose a list of m 2's and n -1's are permuted at random.\n    What is the probability that all of the cumulative sums are positive?\n    The goal is to find counts = [m, n] that make the probability of the ballot problem close to target_prob.\"\"\"\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06",
        "solution_func": "def g(target_prob=0.0625):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-06:\n            return [m, n]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers that sum up to a target value.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 283,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers that sum up to a target value.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Find a target value in the matrix.\"\"\"\n    return any((target in row) for row in matrix)\ndef g(target=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 283,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Find a target value in the matrix.\"\"\"\n    return any((target in row) for row in matrix)",
        "solution_func": "def g(target=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], char='e') -> bool:\n    \"\"\"Check if any word in the list contains a specific character.\"\"\"\n    return any((char in word) for word in words)\ndef g(char='e'):\n    return ['apple', 'banana', 'cherry']\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 283,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], char='e') -> bool:\n    \"\"\"Check if any word in the list contains a specific character.\"\"\"\n    return any((char in word) for word in words)",
        "solution_func": "def g(char='e'):\n    return ['apple', 'banana', 'cherry']",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], n=5, prefix='pre') -> bool:\n    \"\"\"Check if there are n or more words in the list that start with a given prefix\"\"\"\n    return len([word for word in words if word.startswith(prefix)]) >= n\ndef g(n=5, prefix='pre'):\n    return ['prefix' + str(i) for i in range(n)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 283,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], n=5, prefix='pre') -> bool:\n    \"\"\"Check if there are n or more words in the list that start with a given prefix\"\"\"\n    return len([word for word in words if word.startswith(prefix)]) >= n",
        "solution_func": "def g(n=5, prefix='pre'):\n    return ['prefix' + str(i) for i in range(n)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[float], threshold=0.5) -> bool:\n    \"\"\"Check if the absolute difference between the square root of each number and its cube root is less than a given threshold\"\"\"\n    return all([abs(math.sqrt(num) - num**(1/3)) < threshold for num in nums])\ndef g(threshold=0.5):\n    return [i**2 + i**3 for i in range(10)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 283,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(nums: List[float], threshold=0.5) -> bool:\n    \"\"\"Check if the absolute difference between the square root of each number and its cube root is less than a given threshold\"\"\"\n    return all([abs(math.sqrt(num) - num**(1/3)) < threshold for num in nums])",
        "solution_func": "def g(threshold=0.5):\n    return [i**2 + i**3 for i in range(10)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], r=1, c=2, target=5) -> bool:\n    \"\"\"Check if the element at a given row and column in a matrix is equal to a given target\"\"\"\n    return matrix[r][c] == target\ndef g(r=1, c=2, target=5):\n    return [[i+j for i in range(5)] for j in range(5)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 283,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], r=1, c=2, target=5) -> bool:\n    \"\"\"Check if the element at a given row and column in a matrix is equal to a given target\"\"\"\n    return matrix[r][c] == target",
        "solution_func": "def g(r=1, c=2, target=5):\n    return [[i+j for i in range(5)] for j in range(5)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport datetime\n\ndef f(x: datetime.datetime, y: int, z: int, a=6, b=0) -> bool:\n    \"\"\"Check if the given datetime is in the future with a time difference of y days and z minutes from the current datetime\"\"\"\n    current_datetime = datetime.datetime.now()\n    future_datetime = current_datetime + datetime.timedelta(days=y, minutes=z)\n    return x > future_datetime\n\ndef g(y: int, z: int, a=6, b=0):\n    current_datetime = datetime.datetime.now()\n    future_datetime = current_datetime + datetime.timedelta(days=y, minutes=z)\n    return future_datetime\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 283,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(x: datetime.datetime, y: int, z: int, a=6, b=0) -> bool:\n    \"\"\"Check if the given datetime is in the future with a time difference of y days and z minutes from the current datetime\"\"\"\n    current_datetime = datetime.datetime.now()\n    future_datetime = current_datetime + datetime.timedelta(days=y, minutes=z)\n    return x > future_datetime",
        "solution_func": "def g(y: int, z: int, a=6, b=0):\n    current_datetime = datetime.datetime.now()\n    future_datetime = current_datetime + datetime.timedelta(days=y, minutes=z)\n    return future_datetime",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=3, m=5) -> bool:\n    \"\"\"Check if a string s has a repeating pattern of length n, with each substring having m characters\"\"\"\n    pattern = s[:n]\n    for i in range(0, len(s) - m + 1, m):\n        if s[i:i+m] != pattern:\n            return False\n    return True\ndef g(n=3, m=5):\n    return \"abcabcabcabcabc\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 284,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3, m=5) -> bool:\n    \"\"\"Check if a string s has a repeating pattern of length n, with each substring having m characters\"\"\"\n    pattern = s[:n]\n    for i in range(0, len(s) - m + 1, m):\n        if s[i:i+m] != pattern:\n            return False\n    return True",
        "solution_func": "def g(n=3, m=5):\n    return \"abcabcabcabcabc\"",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=3, b=4) -> bool:\n    \"\"\"Check if the given values satisfy the equation: x^(a+b) + y^(a+b) = z^(a+b)\"\"\"\n    return math.pow(x, a+b) + math.pow(y, a+b) == math.pow(z, a+b)\ndef g(a=3, b=4):\n    return 2, 3, 4\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 284,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=3, b=4) -> bool:\n    \"\"\"Check if the given values satisfy the equation: x^(a+b) + y^(a+b) = z^(a+b)\"\"\"\n    return math.pow(x, a+b) + math.pow(y, a+b) == math.pow(z, a+b)",
        "solution_func": "def g(a=3, b=4):\n    return 2, 3, 4",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int], x=5) -> bool:\n    \"\"\"Check if the sum of any two distinct elements in the list lst is equal to n+x\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n + x:\n                return True\n    return False\ndef g(x=5):\n    return 10, [1, 2, 3, 4, 5]\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 284,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst: List[int], x=5) -> bool:\n    \"\"\"Check if the sum of any two distinct elements in the list lst is equal to n+x\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n + x:\n                return True\n    return False",
        "solution_func": "def g(x=5):\n    return 10, [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=0) -> bool:\n    \"\"\"Find a subset of integers in the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, target_sum, index):\n        if target_sum == 0:\n            return True\n        if index < 0:\n            return False\n        if nums[index] > target_sum:\n            return subset_sum(nums, target_sum, index - 1)\n        return subset_sum(nums, target_sum, index - 1) or subset_sum(nums, target_sum - nums[index], index - 1)\n    \n    return subset_sum(nums, target_sum, len(nums) - 1)\n\ndef g(target_sum=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 284,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=0) -> bool:\n    \"\"\"Find a subset of integers in the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, target_sum, index):\n        if target_sum == 0:\n            return True\n        if index < 0:\n            return False\n        if nums[index] > target_sum:\n            return subset_sum(nums, target_sum, index - 1)\n        return subset_sum(nums, target_sum, index - 1) or subset_sum(nums, target_sum - nums[index], index - 1)\n    \n    return subset_sum(nums, target_sum, len(nums) - 1)",
        "solution_func": "def g(target_sum=0):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target_product=1) -> bool:\n    \"\"\"Find a pair of integers in the list whose product is equal to the target product\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target_product:\n                return True\n    return False\n\ndef g(target_product=1):\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 284,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_product=1) -> bool:\n    \"\"\"Find a pair of integers in the list whose product is equal to the target product\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target_product:\n                return True\n    return False",
        "solution_func": "def g(target_product=1):\n    return [2, 4, 6, 8, 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=0) -> bool:\n    \"\"\"Find a row in the matrix whose sum is equal to the target sum\"\"\"\n    for row in matrix:\n        if sum(row) == target_sum:\n            return True\n    return False\n\ndef g(target_sum=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 284,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=0) -> bool:\n    \"\"\"Find a row in the matrix whose sum is equal to the target sum\"\"\"\n    for row in matrix:\n        if sum(row) == target_sum:\n            return True\n    return False",
        "solution_func": "def g(target_sum=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if a word is a substring of any of the words in the list.\"\"\"\n    return any((w in s for w in words))\ndef g(words=['apple', 'banana', 'cherry']):\n    return ' '.join(words)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 284,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if a word is a substring of any of the words in the list.\"\"\"\n    return any((w in s for w in words))",
        "solution_func": "def g(words=['apple', 'banana', 'cherry']):\n    return ' '.join(words)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10], target_sum=20) -> bool:\n    \"\"\"Check if there exists a combination of n numbers from the list that sums up to the target sum.\"\"\"\n    from itertools import combinations\n    return any((sum(comb) == target_sum for comb in combinations(nums, n)))\ndef g(nums=[2, 4, 6, 8, 10], target_sum=20):\n    return len(nums)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 284,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10], target_sum=20) -> bool:\n    \"\"\"Check if there exists a combination of n numbers from the list that sums up to the target sum.\"\"\"\n    from itertools import combinations\n    return any((sum(comb) == target_sum for comb in combinations(nums, n)))",
        "solution_func": "def g(nums=[2, 4, 6, 8, 10], target_sum=20):\n    return len(nums)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if there exists a subsequence of length n in the array where the sum of the elements is divisible by n.\"\"\"\n    from itertools import combinations\n    return any((sum(comb) % n == 0 for comb in combinations(arr, n)))\ndef g(arr=[1, 2, 3, 4, 5, 6]):\n    return len(arr)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 284,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if there exists a subsequence of length n in the array where the sum of the elements is divisible by n.\"\"\"\n    from itertools import combinations\n    return any((sum(comb) % n == 0 for comb in combinations(arr, n)))",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5, 6]):\n    return len(arr)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target='python', num_repeats=3) -> bool:\n    \"\"\"Check if a string contains the target substring repeated num_repeats times\"\"\"\n    return string.count(target) >= num_repeats\ndef g(target='python', num_repeats=3):\n    return target * num_repeats\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 284,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, target='python', num_repeats=3) -> bool:\n    \"\"\"Check if a string contains the target substring repeated num_repeats times\"\"\"\n    return string.count(target) >= num_repeats",
        "solution_func": "def g(target='python', num_repeats=3):\n    return target * num_repeats",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=3) -> bool:\n    \"\"\"Check if a given number is present in a numpy array\"\"\"\n    return target in arr\ndef g(target=3):\n    return np.array([1, 2, 3, 4, 5])\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 285,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=3) -> bool:\n    \"\"\"Check if a given number is present in a numpy array\"\"\"\n    return target in arr",
        "solution_func": "def g(target=3):\n    return np.array([1, 2, 3, 4, 5])",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: list, target=10) -> bool:\n    \"\"\"Check if the sum of all numbers in a list is equal to the target\"\"\"\n    return sum(arr) == target\ndef g(target=10):\n    return [1, 2, 3, 4]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 285,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: list, target=10) -> bool:\n    \"\"\"Check if the sum of all numbers in a list is equal to the target\"\"\"\n    return sum(arr) == target",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: list, target=5) -> bool:\n    \"\"\"Check if the target number is present in a randomly shuffled list\"\"\"\n    random.shuffle(arr)\n    return target in arr\ndef g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 285,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(arr: list, target=5) -> bool:\n    \"\"\"Check if the target number is present in a randomly shuffled list\"\"\"\n    random.shuffle(arr)\n    return target in arr",
        "solution_func": "def g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(num: int, lst=[3, 5, 1, 9, 2, 7, 4, 8, 6], target=10) -> bool:\n    \"\"\"Check if the sum of two random elements in a list is equal to a target number.\"\"\"\n    a = random.choice(lst)\n    b = random.choice(lst)\n    return a + b == target\ndef g(lst=[3, 5, 1, 9, 2, 7, 4, 8, 6], target=10):\n    return target - random.choice(lst)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 285,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(num: int, lst=[3, 5, 1, 9, 2, 7, 4, 8, 6], target=10) -> bool:\n    \"\"\"Check if the sum of two random elements in a list is equal to a target number.\"\"\"\n    a = random.choice(lst)\n    b = random.choice(lst)\n    return a + b == target",
        "solution_func": "def g(lst=[3, 5, 1, 9, 2, 7, 4, 8, 6], target=10):\n    return target - random.choice(lst)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, lst=['apple', 'banana', 'cherry', 'date', 'elderberry'], n=5) -> bool:\n    \"\"\"Check if the length of a string is equal to the nth element in a list.\"\"\"\n    return len(s) == len(lst[n])\ndef g(lst=['apple', 'banana', 'cherry', 'date', 'elderberry'], n=5):\n    return lst[n]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 285,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, lst=['apple', 'banana', 'cherry', 'date', 'elderberry'], n=5) -> bool:\n    \"\"\"Check if the length of a string is equal to the nth element in a list.\"\"\"\n    return len(s) == len(lst[n])",
        "solution_func": "def g(lst=['apple', 'banana', 'cherry', 'date', 'elderberry'], n=5):\n    return lst[n]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: list, n=3, target=8) -> bool:\n    \"\"\"Check if the sum of the first n elements in a list is equal to a target number.\"\"\"\n    return sum(lst[:n]) == target\ndef g(lst=[2, 4, 6, 8, 10], n=3, target=8):\n    return lst\nassert f(g())\n",
        "emb": null,
        "idx_generation": 285,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: list, n=3, target=8) -> bool:\n    \"\"\"Check if the sum of the first n elements in a list is equal to a target number.\"\"\"\n    return sum(lst[:n]) == target",
        "solution_func": "def g(lst=[2, 4, 6, 8, 10], n=3, target=8):\n    return lst",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, n=3) -> bool:\n    \"\"\"Check if the sum of each row and each column in a square matrix is equal to n.\"\"\"\n    rows_sum = np.sum(matrix, axis=1)\n    cols_sum = np.sum(matrix, axis=0)\n    return all(rows_sum == n) and all(cols_sum == n)\n\ndef g(n=3):\n    return np.full((n, n), 1)\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 285,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, n=3) -> bool:\n    \"\"\"Check if the sum of each row and each column in a square matrix is equal to n.\"\"\"\n    rows_sum = np.sum(matrix, axis=1)\n    cols_sum = np.sum(matrix, axis=0)\n    return all(rows_sum == n) and all(cols_sum == n)",
        "solution_func": "def g(n=3):\n    return np.full((n, n), 1)",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: datetime, day='Monday') -> bool:\n    \"\"\"Check if a given date falls on a specified day of the week.\"\"\"\n    return date.strftime('%A') == day\n\ndef g(day='Monday'):\n    return datetime.strptime('2022-01-01', '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 285,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date: datetime, day='Monday') -> bool:\n    \"\"\"Check if a given date falls on a specified day of the week.\"\"\"\n    return date.strftime('%A') == day",
        "solution_func": "def g(day='Monday'):\n    return datetime.strptime('2022-01-01', '%Y-%m-%d').replace(hour=0, minute=0, second=0, microsecond=0)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(numbers: list, n=5) -> bool:\n    \"\"\"Check if a given list contains at least n unique random numbers.\"\"\"\n    return len(set(numbers)) >= n\n\ndef g(n=5):\n    return random.sample(range(1, 11), n)\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 285,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(numbers: list, n=5) -> bool:\n    \"\"\"Check if a given list contains at least n unique random numbers.\"\"\"\n    return len(set(numbers)) >= n",
        "solution_func": "def g(n=5):\n    return random.sample(range(1, 11), n)",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, count=10, threshold=5) -> bool:\n    \"\"\"Find an array with a certain number of elements greater than a given threshold\"\"\"\n    return np.sum(arr > threshold) == count\ndef g(count=10, threshold=5):\n    return np.arange(count) + threshold\nassert f(g())\n",
        "emb": null,
        "idx_generation": 285,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, count=10, threshold=5) -> bool:\n    \"\"\"Find an array with a certain number of elements greater than a given threshold\"\"\"\n    return np.sum(arr > threshold) == count",
        "solution_func": "def g(count=10, threshold=5):\n    return np.arange(count) + threshold",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, num_list=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if the sum of any two numbers in a list is equal to a given number n.\"\"\"\n    return any((n - num) in num_list for num in num_list)\ndef g(num_list=[2, 4, 6, 8, 10]):\n    return sum(num_list) // 2\nassert f(g())\n",
        "emb": null,
        "idx_generation": 286,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, num_list=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if the sum of any two numbers in a list is equal to a given number n.\"\"\"\n    return any((n - num) in num_list for num in num_list)",
        "solution_func": "def g(num_list=[2, 4, 6, 8, 10]):\n    return sum(num_list) // 2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char_list=['a', 'b', 'c', 'd', 'e']) -> bool:\n    \"\"\"Check if a string contains all the characters in a given list.\"\"\"\n    return all(char in s for char in char_list)\ndef g(char_list=['a', 'b', 'c', 'd', 'e']):\n    return ''.join(char_list)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 286,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char_list=['a', 'b', 'c', 'd', 'e']) -> bool:\n    \"\"\"Check if a string contains all the characters in a given list.\"\"\"\n    return all(char in s for char in char_list)",
        "solution_func": "def g(char_list=['a', 'b', 'c', 'd', 'e']):\n    return ''.join(char_list)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, num_list=[1, 3, 5, 7, 9]) -> bool:\n    \"\"\"Check if n is divisible by all the numbers in a list.\"\"\"\n    return all(n % num == 0 for num in num_list)\ndef g(num_list=[1, 3, 5, 7, 9]):\n    return num_list[0] * num_list[1] * num_list[2]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 286,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, num_list=[1, 3, 5, 7, 9]) -> bool:\n    \"\"\"Check if n is divisible by all the numbers in a list.\"\"\"\n    return all(n % num == 0 for num in num_list)",
        "solution_func": "def g(num_list=[1, 3, 5, 7, 9]):\n    return num_list[0] * num_list[1] * num_list[2]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, n=3) -> bool:\n    \"\"\"Find the nth power of a given number x.\"\"\"\n    return x ** n\ndef g(x=2, n=3):\n    return x\nassert f(g()) == True\n",
        "emb": null,
        "idx_generation": 286,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, n=3) -> bool:\n    \"\"\"Find the nth power of a given number x.\"\"\"\n    return x ** n",
        "solution_func": "def g(x=2, n=3):\n    return x",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if a given string contains a specific substring.\"\"\"\n    return target in s\ndef g(s='I love python!', target='python'):\n    return s\nassert f(g()) == True\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 286,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if a given string contains a specific substring.\"\"\"\n    return target in s",
        "solution_func": "def g(s='I love python!', target='python'):\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a given number is a prime number.\"\"\"\n    return n in primes\ndef g(n=7, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return n\nassert f(g()) == True\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 286,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a given number is a prime number.\"\"\"\n    return n in primes",
        "solution_func": "def g(n=7, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target=748) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list equals the target\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False\n\ndef g(target=748):\n    return [1, 2, 3, 4, 5, target-15]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 286,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target=748) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list equals the target\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=748):\n    return [1, 2, 3, 4, 5, target-15]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, palindrome=1221) -> bool:\n    \"\"\"Check if the number is a palindrome\"\"\"\n    return str(num) == str(num)[::-1]\n\ndef g(palindrome=1221):\n    return 11\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 286,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int, palindrome=1221) -> bool:\n    \"\"\"Check if the number is a palindrome\"\"\"\n    return str(num) == str(num)[::-1]",
        "solution_func": "def g(palindrome=1221):\n    return 11",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(li: List[int], target=10000) -> bool:\n    \"\"\"Check if there exists a subset of the list that sums up to the target\"\"\"\n    def subset_sum(li, target):\n        if target == 0:\n            return True\n        if not li or target < 0:\n            return False\n        return subset_sum(li[1:], target - li[0]) or subset_sum(li[1:], target)\n\n    return subset_sum(li, target)\n\ndef g(target=10000):\n    return random.sample(range(1, target), 10)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 286,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(li: List[int], target=10000) -> bool:\n    \"\"\"Check if there exists a subset of the list that sums up to the target\"\"\"\n    def subset_sum(li, target):\n        if target == 0:\n            return True\n        if not li or target < 0:\n            return False\n        return subset_sum(li[1:], target - li[0]) or subset_sum(li[1:], target)\n\n    return subset_sum(li, target)",
        "solution_func": "def g(target=10000):\n    return random.sample(range(1, target), 10)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[5, 10, 15, 25, 30]):\n    return (nums[0], nums[3])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 286,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[5, 10, 15, 25, 30]):\n    return (nums[0], nums[3])",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], prefixes=['a', 'b', 'c', 'd'], suffixes=['x', 'y', 'z'], min_length=5) -> bool:\n    \"\"\"Check if each word has a prefix and a suffix\"\"\"\n    assert all((word.startswith(tuple(prefixes)) and word.endswith(tuple(suffixes)) for word in words))\n    return all((len(word) >= min_length for word in words))\ndef g(prefixes=['a', 'b', 'c', 'd'], suffixes=['x', 'y', 'z'], min_length=5):\n    return [prefix + suffix for prefix in prefixes for suffix in suffixes]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 287,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], prefixes=['a', 'b', 'c', 'd'], suffixes=['x', 'y', 'z'], min_length=5) -> bool:\n    \"\"\"Check if each word has a prefix and a suffix\"\"\"\n    assert all((word.startswith(tuple(prefixes)) and word.endswith(tuple(suffixes)) for word in words))\n    return all((len(word) >= min_length for word in words))",
        "solution_func": "def g(prefixes=['a', 'b', 'c', 'd'], suffixes=['x', 'y', 'z'], min_length=5):\n    return [prefix + suffix for prefix in prefixes for suffix in suffixes]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the sum of each row in the matrix is equal to the target\"\"\"\n    return all((sum(row) == target for row in matrix))\ndef g(target=10):\n    return [[target] * target]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 287,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the sum of each row in the matrix is equal to the target\"\"\"\n    return all((sum(row) == target for row in matrix))",
        "solution_func": "def g(target=10):\n    return [[target] * target]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target\"\"\"\n    return any((target - num in nums for num in nums))\ndef g(target=100):\n    return [50, 50]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 287,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target\"\"\"\n    return any((target - num in nums for num in nums))",
        "solution_func": "def g(target=100):\n    return [50, 50]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"Check if a number is divisible by all the prime numbers in a given list.\"\"\"\n    return all((n % p == 0 for p in primes))\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19]):\n    return primes[-1] * primes[-2]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 287,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"Check if a number is divisible by all the prime numbers in a given list.\"\"\"\n    return all((n % p == 0 for p in primes))",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19]):\n    return primes[-1] * primes[-2]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=16) -> bool:\n    \"\"\"Check if there are two numbers in a list that add up to the target number.\"\"\"\n    return any((x + y == target for i, x in enumerate(lst) for y in lst[i+1:]))\ndef g(target=16):\n    return [2, 4, 6, 8, 10, 12]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 287,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=16) -> bool:\n    \"\"\"Check if there are two numbers in a list that add up to the target number.\"\"\"\n    return any((x + y == target for i, x in enumerate(lst) for y in lst[i+1:]))",
        "solution_func": "def g(target=16):\n    return [2, 4, 6, 8, 10, 12]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_len=3) -> bool:\n    \"\"\"Check if each row in a matrix has the same length as specified.\"\"\"\n    return all((len(row) == row_len for row in matrix))\ndef g(row_len=3):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 287,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row_len=3) -> bool:\n    \"\"\"Check if each row in a matrix has the same length as specified.\"\"\"\n    return all((len(row) == row_len for row in matrix))",
        "solution_func": "def g(row_len=3):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers such that their sum equals the target value\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[:-1]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 287,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers such that their sum equals the target value\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[:-1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Given a matrix of integers and a target value, find if there exists a row in the matrix where the sum of the elements equals the target value\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 287,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Given a matrix of integers and a target value, find if there exists a row in the matrix where the sum of the elements equals the target value\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, char='a', count=3) -> bool:\n    \"\"\"Given a word and a character, find if the character appears at least count number of times in the word\"\"\"\n    return word.count(char) >= count\n\ndef g(word='banana', char='a', count=3):\n    return word\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 287,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str, char='a', count=3) -> bool:\n    \"\"\"Given a word and a character, find if the character appears at least count number of times in the word\"\"\"\n    return word.count(char) >= count",
        "solution_func": "def g(word='banana', char='a', count=3):\n    return word",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"Given a list of integers, find if there are k numbers that sum up to the target\"\"\"\n    return len(nums) >= k and any(sum(comb) == target for comb in combinations(nums, k))\ndef g(target: int, k: int):\n    return [target] * k\nassert f(g(), target=10, k=3)\n",
        "emb": null,
        "idx_generation": 287,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"Given a list of integers, find if there are k numbers that sum up to the target\"\"\"\n    return len(nums) >= k and any(sum(comb) == target for comb in combinations(nums, k))",
        "solution_func": "def g(target: int, k: int):\n    return [target] * k",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], t=100, n=5) -> bool:\n    \"\"\"Check if the sum of the values in the list is equal to the target\"\"\"\n    assert all([v > 0 for v in x])\n    return sum(x) == t\n\ndef g(t=100, n=5):\n    return [20] * n + [t]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 288,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], t=100, n=5) -> bool:\n    \"\"\"Check if the sum of the values in the list is equal to the target\"\"\"\n    assert all([v > 0 for v in x])\n    return sum(x) == t",
        "solution_func": "def g(t=100, n=5):\n    return [20] * n + [t]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], t=50, n=3) -> bool:\n    \"\"\"Check if the maximum value in the list is greater than or equal to the target\"\"\"\n    assert all([v > 0 for v in x])\n    return max(x) >= t\n\ndef g(t=50, n=3):\n    return [10] * n + [t]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 288,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], t=50, n=3) -> bool:\n    \"\"\"Check if the maximum value in the list is greater than or equal to the target\"\"\"\n    assert all([v > 0 for v in x])\n    return max(x) >= t",
        "solution_func": "def g(t=50, n=3):\n    return [10] * n + [t]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], t=10, n=2) -> bool:\n    \"\"\"Check if the count of values in the list is less than the target\"\"\"\n    assert all([v > 0 for v in x])\n    return len(x) < t\n\ndef g(t=10, n=2):\n    return [5] * n + [t]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 288,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], t=10, n=2) -> bool:\n    \"\"\"Check if the count of values in the list is less than the target\"\"\"\n    assert all([v > 0 for v in x])\n    return len(x) < t",
        "solution_func": "def g(t=10, n=2):\n    return [5] * n + [t]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, num_list=[15, 30, 45], target=90) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target value.\"\"\"\n    return any((num_list[i] + num_list[j] == target for i in range(len(num_list)) for j in range(i+1, len(num_list))))\ndef g(num_list=[15, 30, 45], target=90):\n    return num_list\nassert f(g())\n",
        "emb": null,
        "idx_generation": 288,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, num_list=[15, 30, 45], target=90) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target value.\"\"\"\n    return any((num_list[i] + num_list[j] == target for i in range(len(num_list)) for j in range(i+1, len(num_list))))",
        "solution_func": "def g(num_list=[15, 30, 45], target=90):\n    return num_list",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, num_list=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"Find a combination of numbers in the list that add up to the target value, where each number can only be used once.\"\"\"\n    from itertools import combinations\n    return any((sum(comb) == target for comb in combinations(num_list, 2)))\ndef g(num_list=[1, 2, 3, 4, 5], target=10):\n    return num_list\nassert f(g())\n",
        "emb": null,
        "idx_generation": 288,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, num_list=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"Find a combination of numbers in the list that add up to the target value, where each number can only be used once.\"\"\"\n    from itertools import combinations\n    return any((sum(comb) == target for comb in combinations(num_list, 2)))",
        "solution_func": "def g(num_list=[1, 2, 3, 4, 5], target=10):\n    return num_list",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, num_list=[2, 3, 4, 5, 6], target=120) -> bool:\n    \"\"\"Find a combination of numbers in the list that multiply to the target value, where each number can only be used once.\"\"\"\n    from itertools import permutations\n    return any((n == target for perm in permutations(num_list, 2) if (n := perm[0] * perm[1]) == target))\ndef g(num_list=[2, 3, 4, 5, 6], target=120):\n    return num_list\nassert f(g())\n",
        "emb": null,
        "idx_generation": 288,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, num_list=[2, 3, 4, 5, 6], target=120) -> bool:\n    \"\"\"Find a combination of numbers in the list that multiply to the target value, where each number can only be used once.\"\"\"\n    from itertools import permutations\n    return any((n == target for perm in permutations(num_list, 2) if (n := perm[0] * perm[1]) == target))",
        "solution_func": "def g(num_list=[2, 3, 4, 5, 6], target=120):\n    return num_list",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, s: str, m=5, x=25, y=100) -> bool:\n    \"\"\"Check if the sum of the first n Fibonacci numbers is equal to m, and if the last digit of n^2 is equal to the last digit of x^y\"\"\"\n    fib_sum = sum([fib(i) for i in range(n)])\n    last_digit = lambda num: num % 10\n    return fib_sum == m and last_digit(n ** 2) == last_digit(x ** y)\n\ndef g(m=5, x=25, y=100):\n    fibonacci = lambda n: n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)\n    n = 0\n    fib_sum = 0\n    while fib_sum < m:\n        n += 1\n        fib_sum = sum([fibonacci(i) for i in range(n)])\n    return n\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 288,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, s: str, m=5, x=25, y=100) -> bool:\n    \"\"\"Check if the sum of the first n Fibonacci numbers is equal to m, and if the last digit of n^2 is equal to the last digit of x^y\"\"\"\n    fib_sum = sum([fib(i) for i in range(n)])\n    last_digit = lambda num: num % 10\n    return fib_sum == m and last_digit(n ** 2) == last_digit(x ** y)",
        "solution_func": "def g(m=5, x=25, y=100):\n    fibonacci = lambda n: n if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)\n    n = 0\n    fib_sum = 0\n    while fib_sum < m:\n        n += 1\n        fib_sum = sum([fibonacci(i) for i in range(n)])\n    return n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], n=10, m=2, k=3) -> bool:\n    \"\"\"Check if the sum of the first n elements in arr is divisible by m and if the count of occurrences of k in arr is greater than the average of arr\"\"\"\n    return sum(arr[:n]) % m == 0 and arr.count(k) > sum(arr) / len(arr)\n\ndef g(n=10, m=2, k=3):\n    arr = []\n    i = 1\n    while len(arr) < n:\n        arr.append(i)\n        i += 1\n    return arr\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 288,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], n=10, m=2, k=3) -> bool:\n    \"\"\"Check if the sum of the first n elements in arr is divisible by m and if the count of occurrences of k in arr is greater than the average of arr\"\"\"\n    return sum(arr[:n]) % m == 0 and arr.count(k) > sum(arr) / len(arr)",
        "solution_func": "def g(n=10, m=2, k=3):\n    arr = []\n    i = 1\n    while len(arr) < n:\n        arr.append(i)\n        i += 1\n    return arr",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(word: str, n=5, m=3) -> bool:\n    \"\"\"Check if the word has more than n characters and if the count of vowels in the word is divisible by m\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return len(word) > n and word.count(vowels) % m == 0\n\ndef g(n=5, m=3):\n    return \"programming\"\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 288,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str, n=5, m=3) -> bool:\n    \"\"\"Check if the word has more than n characters and if the count of vowels in the word is divisible by m\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return len(word) > n and word.count(vowels) % m == 0",
        "solution_func": "def g(n=5, m=3):\n    return \"programming\"",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Find a number in the list that is divisible by n.\"\"\"\n    return any(num % n == 0 for num in lst)\ndef g(lst: List[int]):\n    return lst + [n]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 288,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Find a number in the list that is divisible by n.\"\"\"\n    return any(num % n == 0 for num in lst)",
        "solution_func": "def g(lst: List[int]):\n    return lst + [n]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, numbers=[4, 2, 5, 7, 1, 3]) -> bool:\n    \"\"\"Find the index of the second smallest number in a list.\"\"\"\n    return numbers.index(sorted(numbers)[1]) == n\ndef g(numbers=[4, 2, 5, 7, 1, 3]):\n    return sorted(numbers)[1]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 289,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, numbers=[4, 2, 5, 7, 1, 3]) -> bool:\n    \"\"\"Find the index of the second smallest number in a list.\"\"\"\n    return numbers.index(sorted(numbers)[1]) == n",
        "solution_func": "def g(numbers=[4, 2, 5, 7, 1, 3]):\n    return sorted(numbers)[1]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if a given string is an anagram of any word in a list.\"\"\"\n    return sorted(s) in [sorted(w) for w in words]\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return ''.join(sorted(words[0]))\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 289,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if a given string is an anagram of any word in a list.\"\"\"\n    return sorted(s) in [sorted(w) for w in words]",
        "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return ''.join(sorted(words[0]))",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) -> bool:\n    \"\"\"Check if a given number is a multiple of the second to last number in a list.\"\"\"\n    return n % nums[-2] == 0\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    return nums[-2]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 289,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) -> bool:\n    \"\"\"Check if a given number is a multiple of the second to last number in a list.\"\"\"\n    return n % nums[-2] == 0",
        "solution_func": "def g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    return nums[-2]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(num: int, nums=[4, 3, 2, 1], target=10) -> bool:\n    \"\"\"Determine if it is possible to find a combination of numbers from the given list that adds up to the target number.\"\"\"\n    from itertools import combinations\n    for r in range(1, len(nums) + 1):\n        for combination in combinations(nums, r):\n            if sum(combination) == target:\n                return True\n    return False\ndef g(nums=[4, 3, 2, 1], target=10):\n    from itertools import combinations\n    for r in range(1, len(nums) + 1):\n        for combination in combinations(nums, r):\n            if sum(combination) == target:\n                return combination\n    return []\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 289,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(num: int, nums=[4, 3, 2, 1], target=10) -> bool:\n    \"\"\"Determine if it is possible to find a combination of numbers from the given list that adds up to the target number.\"\"\"\n    from itertools import combinations\n    for r in range(1, len(nums) + 1):\n        for combination in combinations(nums, r):\n            if sum(combination) == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[4, 3, 2, 1], target=10):\n    from itertools import combinations\n    for r in range(1, len(nums) + 1):\n        for combination in combinations(nums, r):\n            if sum(combination) == target:\n                return combination\n    return []",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Check if it is possible to form the given string by concatenating words from the given list.\"\"\"\n    def helper(s, words):\n        if not s:\n            return True\n        for word in words:\n            if s.startswith(word) and helper(s[len(word):], words):\n                return True\n        return False\n    return helper(s, words)\ndef g(words=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(words)\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 289,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Check if it is possible to form the given string by concatenating words from the given list.\"\"\"\n    def helper(s, words):\n        if not s:\n            return True\n        for word in words:\n            if s.startswith(word) and helper(s[len(word):], words):\n                return True\n        return False\n    return helper(s, words)",
        "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(words)",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"Determine if the target number is present in the given matrix.\"\"\"\n    rows = len(matrix)\n    if rows == 0:\n        return False\n    cols = len(matrix[0])\n    if cols == 0:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] == target:\n                return True\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 289,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"Determine if the target number is present in the given matrix.\"\"\"\n    rows = len(matrix)\n    if rows == 0:\n        return False\n    cols = len(matrix[0])\n    if cols == 0:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] == target:\n                return True\n    return False",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=20) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers that sum up to the target value.\"\"\"\n    return any((x + y == target for x in lst for y in lst if x != y))\ndef g(target=20):\n    return [x for x in range(target // 2)] + [target - x for x in range(target // 2)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 289,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=20) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers that sum up to the target value.\"\"\"\n    return any((x + y == target for x in lst for y in lst if x != y))",
        "solution_func": "def g(target=20):\n    return [x for x in range(target // 2)] + [target - x for x in range(target // 2)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Given a square matrix, check if it is a magic square.\n    A magic square is a square matrix of distinct positive integers in which the sums of the numbers in each\n    row, each column, and both main diagonals are the same.\"\"\"\n    target_sum = sum(matrix[0])\n    return all((sum(row) == target_sum for row in matrix)) and all(\n        (sum(col) == target_sum for col in zip(*matrix))) and sum(\n        (matrix[i][i] for i in range(n))) == sum((matrix[i][n - 1 - i] for i in range(n))) == target_sum\ndef g(n=3):\n    import random\n    return [[random.randint(1, n * n) for _ in range(n)] for _ in range(n)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 289,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Given a square matrix, check if it is a magic square.\n    A magic square is a square matrix of distinct positive integers in which the sums of the numbers in each\n    row, each column, and both main diagonals are the same.\"\"\"\n    target_sum = sum(matrix[0])\n    return all((sum(row) == target_sum for row in matrix)) and all(\n        (sum(col) == target_sum for col in zip(*matrix))) and sum(\n        (matrix[i][i] for i in range(n))) == sum((matrix[i][n - 1 - i] for i in range(n))) == target_sum",
        "solution_func": "def g(n=3):\n    import random\n    return [[random.randint(1, n * n) for _ in range(n)] for _ in range(n)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find a subarray whose sum is equal to the target value.\"\"\"\n    return any((sum(lst[i:j]) == target for i in range(len(lst)) for j in range(i + 1, len(lst) + 1)))\ndef g(target=10):\n    return [x for x in range(target + 1)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 289,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find a subarray whose sum is equal to the target value.\"\"\"\n    return any((sum(lst[i:j]) == target for i in range(len(lst)) for j in range(i + 1, len(lst) + 1)))",
        "solution_func": "def g(target=10):\n    return [x for x in range(target + 1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], a=100, b=200, c=300) -> bool:\n    \"\"\"Check if the list contains exactly one occurrence of a, b, and c in that order\"\"\"\n    return x.count(a) == 1 and x.count(b) == 1 and x.count(c) == 1 and x.index(a) < x.index(b) < x.index(c)\ndef g(a=100, b=200, c=300):\n    return [a, b, c]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 289,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], a=100, b=200, c=300) -> bool:\n    \"\"\"Check if the list contains exactly one occurrence of a, b, and c in that order\"\"\"\n    return x.count(a) == 1 and x.count(b) == 1 and x.count(c) == 1 and x.index(a) < x.index(b) < x.index(c)",
        "solution_func": "def g(a=100, b=200, c=300):\n    return [a, b, c]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Find if there exists two distinct indices i and j in the given list such that nums[i] == nums[j] and abs(i - j) <= k.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j] and abs(i-j) <= k:\n                return True\n    return False\n\ndef g(k=3):\n    nums = [1, 2, 3, 1, 4, 5]\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 290,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Find if there exists two distinct indices i and j in the given list such that nums[i] == nums[j] and abs(i - j) <= k.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j] and abs(i-j) <= k:\n                return True\n    return False",
        "solution_func": "def g(k=3):\n    nums = [1, 2, 3, 1, 4, 5]\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int], target=13) -> bool:\n    \"\"\"Find if there exists three distinct indices i, j, and k in the given list such that nums[i] + nums[j] + nums[k] == target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=13):\n    nums = [2, 4, 6, 8, 10]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 290,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(nums: List[int], target=13) -> bool:\n    \"\"\"Find if there exists three distinct indices i, j, and k in the given list such that nums[i] + nums[j] + nums[k] == target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=13):\n    nums = [2, 4, 6, 8, 10]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(s: str, pattern=r'^[a-zA-Z]+$') -> bool:\n    \"\"\"Find if the given string matches the specified pattern, which only allows alphabets.\"\"\"\n    return re.match(pattern, s) is not None\n\ndef g(pattern=r'^[a-zA-Z]+$'):\n    s = \"HelloWorld\"\n    return s\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 290,
        "target_skills": null,
        "problem_func": "from typing import*\nimport re\n\ndef f(s: str, pattern=r'^[a-zA-Z]+$') -> bool:\n    \"\"\"Find if the given string matches the specified pattern, which only allows alphabets.\"\"\"\n    return re.match(pattern, s) is not None",
        "solution_func": "def g(pattern=r'^[a-zA-Z]+$'):\n    s = \"HelloWorld\"\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=100, b=50, c=10) -> bool:\n    \"\"\"Check if n is divisible by a, b, and c.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=100, b=50, c=10):\n    return a * b * c\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 290,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=100, b=50, c=10) -> bool:\n    \"\"\"Check if n is divisible by a, b, and c.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0",
        "solution_func": "def g(a=100, b=50, c=10):\n    return a * b * c",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, string='', target='') -> bool:\n    \"\"\"Check if the target string is a substring of the given string.\"\"\"\n    return target in string\ndef g(string='', target=''):\n    return string + target\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 290,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, string='', target='') -> bool:\n    \"\"\"Check if the target string is a substring of the given string.\"\"\"\n    return target in string",
        "solution_func": "def g(string='', target=''):\n    return string + target",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=5, b=10, c=15) -> bool:\n    \"\"\"Check if n is a perfect square and divisible by a, b, and c.\"\"\"\n    return math.isqrt(n)**2 == n and n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=5, b=10, c=15):\n    return a * b * c\nassert f(g())\n",
        "emb": null,
        "idx_generation": 290,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=5, b=10, c=15) -> bool:\n    \"\"\"Check if n is a perfect square and divisible by a, b, and c.\"\"\"\n    return math.isqrt(n)**2 == n and n % a == 0 and n % b == 0 and n % c == 0",
        "solution_func": "def g(a=5, b=10, c=15):\n    return a * b * c",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(words: List[str], target='python', count=3) -> bool:\n    \"\"\"Find count number of distinct words that can be formed using the letters of target\"\"\"\n    return len(words) == len(set(words)) >= count and all((set(w).issubset(set(target)) for w in words))\ndef g(target='python', count=3):\n    from itertools import permutations\n    result = []\n    for i in range(1, len(target)+1):\n        for p in permutations(target, i):\n            result.append(''.join(p))\n            if len(result) == count:\n                return result\n    return result\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 290,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(words: List[str], target='python', count=3) -> bool:\n    \"\"\"Find count number of distinct words that can be formed using the letters of target\"\"\"\n    return len(words) == len(set(words)) >= count and all((set(w).issubset(set(target)) for w in words))",
        "solution_func": "def g(target='python', count=3):\n    from itertools import permutations\n    result = []\n    for i in range(1, len(target)+1):\n        for p in permutations(target, i):\n            result.append(''.join(p))\n            if len(result) == count:\n                return result\n    return result",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100, count=5) -> bool:\n    \"\"\"Find count number of distinct sublists of numbers that sum up to target_sum\"\"\"\n    result = []\n    for i in range(len(numbers)):\n        for j in range(i, len(numbers)):\n            sublist = numbers[i:j+1]\n            if sum(sublist) == target_sum:\n                result.append(sublist)\n            if len(result) == count:\n                return result\n    return result\ndef g(target_sum=100, count=5):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 290,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target_sum=100, count=5) -> bool:\n    \"\"\"Find count number of distinct sublists of numbers that sum up to target_sum\"\"\"\n    result = []\n    for i in range(len(numbers)):\n        for j in range(i, len(numbers)):\n            sublist = numbers[i:j+1]\n            if sum(sublist) == target_sum:\n                result.append(sublist)\n            if len(result) == count:\n                return result\n    return result",
        "solution_func": "def g(target_sum=100, count=5):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(password: str, strength=4, min_length=8) -> bool:\n    \"\"\"Check if the password is strong enough based on the given criteria\"\"\"\n    conditions = [\n        len(password) >= min_length,\n        any(c.isupper() for c in password),\n        any(c.islower() for c in password),\n        any(c.isdigit() for c in password)\n    ]\n    return strength == sum(conditions)\ndef g(strength=4, min_length=8):\n    return \"Passw0rd\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 290,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(password: str, strength=4, min_length=8) -> bool:\n    \"\"\"Check if the password is strong enough based on the given criteria\"\"\"\n    conditions = [\n        len(password) >= min_length,\n        any(c.isupper() for c in password),\n        any(c.islower() for c in password),\n        any(c.isdigit() for c in password)\n    ]\n    return strength == sum(conditions)",
        "solution_func": "def g(strength=4, min_length=8):\n    return \"Passw0rd\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a given number exists in a sorted array of integers.\nSample Input:\n`5`\nSample Output:\n`True`\"\"\"\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == n:\n            return True\n        elif arr[mid] < n:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr[0]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 290,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a given number exists in a sorted array of integers.\nSample Input:\n`5`\nSample Output:\n`True`\"\"\"\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == n:\n            return True\n        elif arr[mid] < n:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return False",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr[0]",
        "map_ix": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date_str: str, format_str='%Y-%m-%d') -> bool:\n    \"\"\"Check if the given date string matches the specified format\"\"\"\n    try:\n        datetime.strptime(date_str, format_str)\n        return True\n    except ValueError:\n        return False\n\ndef g(date_str: str):\n    return date_str\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 291,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date_str: str, format_str='%Y-%m-%d') -> bool:\n    \"\"\"Check if the given date string matches the specified format\"\"\"\n    try:\n        datetime.strptime(date_str, format_str)\n        return True\n    except ValueError:\n        return False",
        "solution_func": "def g(date_str: str):\n    return date_str",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 291,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False",
        "solution_func": "def g(nums: List[int]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport re\n\ndef f(email: str) -> bool:\n    \"\"\"Check if the given string is a valid email address\"\"\"\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return re.match(pattern, email) is not None\n\ndef g(email: str):\n    return email\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 291,
        "target_skills": null,
        "problem_func": "from typing import*\nimport re\n\ndef f(email: str) -> bool:\n    \"\"\"Check if the given string is a valid email address\"\"\"\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return re.match(pattern, email) is not None",
        "solution_func": "def g(email: str):\n    return email",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the sum of all elements in the list lst is equal to n.\"\"\"\n    return sum(lst) == n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return sum(lst)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 291,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the sum of all elements in the list lst is equal to n.\"\"\"\n    return sum(lst) == n",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return sum(lst)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n: int=3) -> bool:\n    \"\"\"Check if the string s contains exactly n vowels.\"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count == n\ndef g(s: str):\n    return s.count('a') + s.count('e') + s.count('i') + s.count('o') + s.count('u') + s.count('A') + s.count('E') + s.count('I') + s.count('O') + s.count('U')\nassert f(g())\n",
        "emb": null,
        "idx_generation": 291,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n: int=3) -> bool:\n    \"\"\"Check if the string s contains exactly n vowels.\"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count == n",
        "solution_func": "def g(s: str):\n    return s.count('a') + s.count('e') + s.count('i') + s.count('o') + s.count('u') + s.count('A') + s.count('E') + s.count('I') + s.count('O') + s.count('U')",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if n is not present in the list lst.\"\"\"\n    return n not in lst\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return 0\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 291,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if n is not present in the list lst.\"\"\"\n    return n not in lst",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return 0",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Check if there exists a sub-matrix in the given matrix that sums up to the target_sum.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(j, cols):\n                    sub_matrix = [row[j:l+1] for row in matrix[i:k+1]]\n                    if sum(sum(row) for row in sub_matrix) == target_sum:\n                        return True\n    return False\n\ndef g(rows=5, cols=5, target_sum=100):\n    import random\n    matrix = [[random.randint(1, 10) for _ in range(cols)] for _ in range(rows)]\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 291,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Check if there exists a sub-matrix in the given matrix that sums up to the target_sum.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(j, cols):\n                    sub_matrix = [row[j:l+1] for row in matrix[i:k+1]]\n                    if sum(sum(row) for row in sub_matrix) == target_sum:\n                        return True\n    return False",
        "solution_func": "def g(rows=5, cols=5, target_sum=100):\n    import random\n    matrix = [[random.randint(1, 10) for _ in range(cols)] for _ in range(rows)]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(string: str, substring='python') -> bool:\n    \"\"\"Check if the given string contains the substring 'python'.\"\"\"\n    return substring in string\n\ndef g(substring='python'):\n    import random\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    string = ''.join(random.choice(alphabet) for _ in range(10**6))\n    return string\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 291,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(string: str, substring='python') -> bool:\n    \"\"\"Check if the given string contains the substring 'python'.\"\"\"\n    return substring in string",
        "solution_func": "def g(substring='python'):\n    import random\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    string = ''.join(random.choice(alphabet) for _ in range(10**6))\n    return string",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a pair of integers in the list nums that sum up to the target value.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(length=10**6, target=0):\n    import random\n    nums = [random.randint(-10**6, 10**6) for _ in range(length)]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 291,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a pair of integers in the list nums that sum up to the target value.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False",
        "solution_func": "def g(length=10**6, target=0):\n    import random\n    nums = [random.randint(-10**6, 10**6) for _ in range(length)]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(num_list: List[int], target_sum=2021) -> bool:\n    \"\"\"Find a subset of numbers from num_list that adds up to the target_sum\"\"\"\n    return sum(num_list) == target_sum\ndef g(num_list: List[int]):\n    random.shuffle(num_list)\n    return num_list\nassert f(g())\n",
        "emb": null,
        "idx_generation": 291,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(num_list: List[int], target_sum=2021) -> bool:\n    \"\"\"Find a subset of numbers from num_list that adds up to the target_sum\"\"\"\n    return sum(num_list) == target_sum",
        "solution_func": "def g(num_list: List[int]):\n    random.shuffle(num_list)\n    return num_list",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers that sum up to a given target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 292,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers that sum up to a given target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, char_count=5) -> bool:\n    \"\"\"Given a string, check if it contains at least 'char_count' number of vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count >= char_count\n\ndef g(char_count=5):\n    return \"Hello, World!\"\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 292,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char_count=5) -> bool:\n    \"\"\"Given a string, check if it contains at least 'char_count' number of vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count >= char_count",
        "solution_func": "def g(char_count=5):\n    return \"Hello, World!\"",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=10) -> bool:\n    \"\"\"Given a matrix of integers, find if there exists a row where the sum of all elements is equal to a target value\"\"\"\n    for row in matrix:\n        if sum(row) == target_sum:\n            return True\n    return False\n\ndef g(target_sum=10):\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 292,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=10) -> bool:\n    \"\"\"Given a matrix of integers, find if there exists a row where the sum of all elements is equal to a target value\"\"\"\n    for row in matrix:\n        if sum(row) == target_sum:\n            return True\n    return False",
        "solution_func": "def g(target_sum=10):\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=100):\n    return [50, 30, 20]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 292,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=100):\n    return [50, 30, 20]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_product=1000) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target product\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target_product:\n                return True\n    return False\n\ndef g(target_product=1000):\n    return [10, 20, 50, 5]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 292,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_product=1000) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target product\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target_product:\n                return True\n    return False",
        "solution_func": "def g(target_product=1000):\n    return [10, 20, 50, 5]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list is a palindrome\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 292,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list is a palindrome\"\"\"\n    return nums == nums[::-1]",
        "solution_func": "def g():\n    return [1, 2, 3, 2, 1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 292,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=0) -> bool:\n    \"\"\"Check if a given number n appears in the matrix.\"\"\"\n    return any((n in row for row in matrix))\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 292,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=0) -> bool:\n    \"\"\"Check if a given number n appears in the matrix.\"\"\"\n    return any((n in row for row in matrix))",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 292,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: list, target=7) -> bool:\n    \"\"\"Find the sum of two numbers in a list that equals the target value.\"\"\"\n    return any(target - x in lst for x in lst)\ndef g(lst=[1, 2, 3, 4, 5, 6]):\n    return lst[0] + lst[1]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 292,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: list, target=7) -> bool:\n    \"\"\"Find the sum of two numbers in a list that equals the target value.\"\"\"\n    return any(target - x in lst for x in lst)",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6]):\n    return lst[0] + lst[1]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=3.14159, b=5) -> bool:\n    \"\"\"Find the absolute value of x and check if it is greater than the square root of a.\"\"\"\n    return abs(x) > math.sqrt(a) and x < b\n\ndef g(a=3.14159, b=5):\n    return -math.sqrt(a) - 1\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0
        ],
        "idx_generation": 293,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=3.14159, b=5) -> bool:\n    \"\"\"Find the absolute value of x and check if it is greater than the square root of a.\"\"\"\n    return abs(x) > math.sqrt(a) and x < b",
        "solution_func": "def g(a=3.14159, b=5):\n    return -math.sqrt(a) - 1",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: int, a=10, b=100) -> bool:\n    \"\"\"Check if x is divisible by both a and b.\"\"\"\n    return x % a == 0 and x % b == 0\n\ndef g(a=10, b=100):\n    return a * b * random.randint(1, 10)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 293,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(x: int, a=10, b=100) -> bool:\n    \"\"\"Check if x is divisible by both a and b.\"\"\"\n    return x % a == 0 and x % b == 0",
        "solution_func": "def g(a=10, b=100):\n    return a * b * random.randint(1, 10)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport datetime\n\ndef f(x: str, a='Monday', b='Friday') -> bool:\n    \"\"\"Check if x is a weekday between a and b (inclusive).\"\"\"\n    weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n    return a <= x <= b and x in weekdays\n\ndef g(a='Monday', b='Friday'):\n    return datetime.datetime.now().strftime('%A')\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 293,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(x: str, a='Monday', b='Friday') -> bool:\n    \"\"\"Check if x is a weekday between a and b (inclusive).\"\"\"\n    weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n    return a <= x <= b and x in weekdays",
        "solution_func": "def g(a='Monday', b='Friday'):\n    return datetime.datetime.now().strftime('%A')",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(d: datetime, format='%Y-%m-%d %H:%M:%S') -> bool:\n    \"\"\"Check if the formatted datetime string matches the expected format\"\"\"\n    return d.strftime(format) == '2022-12-31 23:59:59'\n\ndef g(format='%Y-%m-%d %H:%M:%S'):\n    return datetime.strptime('2022-12-31 23:59:59', format)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 293,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(d: datetime, format='%Y-%m-%d %H:%M:%S') -> bool:\n    \"\"\"Check if the formatted datetime string matches the expected format\"\"\"\n    return d.strftime(format) == '2022-12-31 23:59:59'",
        "solution_func": "def g(format='%Y-%m-%d %H:%M:%S'):\n    return datetime.strptime('2022-12-31 23:59:59', format)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sum up to the target sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=100):\n    return [i for i in range(target_sum//2)] + [target_sum//2]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 293,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sum up to the target sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=100):\n    return [i for i in range(target_sum//2)] + [target_sum//2]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, target=999) -> bool:\n    \"\"\"Check if a randomly generated sequence contains the target number\"\"\"\n    random.seed(0)\n    sequence = [random.randint(0, 1000) for _ in range(n)]\n    return target in sequence\n\ndef g(target=999):\n    return 1000\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 293,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, target=999) -> bool:\n    \"\"\"Check if a randomly generated sequence contains the target number\"\"\"\n    random.seed(0)\n    sequence = [random.randint(0, 1000) for _ in range(n)]\n    return target in sequence",
        "solution_func": "def g(target=999):\n    return 1000",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=6) -> bool:\n    \"\"\"Find a string of length n that is a palindrome.\"\"\"\n    return len(s) == n and s == s[::-1]\ndef g(n=6):\n    return 'racecar'\nassert f(g())\n",
        "emb": null,
        "idx_generation": 293,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=6) -> bool:\n    \"\"\"Find a string of length n that is a palindrome.\"\"\"\n    return len(s) == n and s == s[::-1]",
        "solution_func": "def g(n=6):\n    return 'racecar'",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Find a square matrix of size n x n that is symmetric.\"\"\"\n    return matrix == [[matrix[i][j] for i in range(n)] for j in range(n)]\ndef g(n=3):\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 293,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Find a square matrix of size n x n that is symmetric.\"\"\"\n    return matrix == [[matrix[i][j] for i in range(n)] for j in range(n)]",
        "solution_func": "def g(n=3):\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 293,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=0):\n    return [target//2, target//2 + 1]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 293,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=0):\n    return [target//2, target//2 + 1]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(timestamp: int, fmt='%Y-%m-%d %H:%M:%S') -> bool:\n    \"\"\"Check if the formatted timestamp matches the original timestamp\"\"\"\n    return datetime.strptime(fmt, '%Y-%m-%d %H:%M:%S').timestamp() == timestamp\ndef g(fmt='%Y-%m-%d %H:%M:%S'):\n    return int(datetime.now().timestamp())\nassert f(g())\n",
        "emb": null,
        "idx_generation": 294,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(timestamp: int, fmt='%Y-%m-%d %H:%M:%S') -> bool:\n    \"\"\"Check if the formatted timestamp matches the original timestamp\"\"\"\n    return datetime.strptime(fmt, '%Y-%m-%d %H:%M:%S').timestamp() == timestamp",
        "solution_func": "def g(fmt='%Y-%m-%d %H:%M:%S'):\n    return int(datetime.now().timestamp())",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number is in the matrix\"\"\"\n    return any(target in row for row in matrix)\ndef g(target=0):\n    return [[i+j for j in range(5)] for i in range(5)]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 294,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number is in the matrix\"\"\"\n    return any(target in row for row in matrix)",
        "solution_func": "def g(target=0):\n    return [[i+j for j in range(5)] for i in range(5)]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17]) -> bool:\n    \"\"\"Check if n is divisible by all prime numbers in the list\"\"\"\n    return all(n % p == 0 for p in primes)\ndef g(primes=[2, 3, 5, 7, 11, 13, 17]):\n    return primes[-1] * 2\nassert f(g())\n",
        "emb": null,
        "idx_generation": 294,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17]) -> bool:\n    \"\"\"Check if n is divisible by all prime numbers in the list\"\"\"\n    return all(n % p == 0 for p in primes)",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17]):\n    return primes[-1] * 2",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the sum of any two numbers in lst is equal to n.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False\ndef g(lst: List[int]):\n    return sum(lst)//2\nassert f(g())\n",
        "emb": null,
        "idx_generation": 294,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the sum of any two numbers in lst is equal to n.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False",
        "solution_func": "def g(lst: List[int]):\n    return sum(lst)//2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"Check if the grid is a valid Sudoku solution.\"\"\"\n    def check_rows(grid):\n        for row in grid:\n            if len(set(row)) != len(row):\n                return False\n        return True\n\n    def check_columns(grid):\n        for col in range(9):\n            if len(set(row[col] for row in grid)) != 9:\n                return False\n        return True\n\n    def check_subgrids(grid):\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                subgrid = [row[j:j+3] for row in grid[i:i+3]]\n                flat_subgrid = [num for row in subgrid for num in row]\n                if len(set(flat_subgrid)) != 9:\n                    return False\n        return True\n\n    return check_rows(grid) and check_columns(grid) and check_subgrids(grid)\n\ndef g():\n    return [[5, 3, 4, 6, 7, 8, 9, 1, 2],\n            [6, 7, 2, 1, 9, 5, 3, 4, 8],\n            [1, 9, 8, 3, 4, 2, 5, 6, 7],\n            [8, 5, 9, 7, 6, 1, 4, 2, 3],\n            [4, 2, 6, 8, 5, 3, 7, 9, 1],\n            [7, 1, 3, 9, 2, 4, 8, 5, 6],\n            [9, 6, 1, 5, 3, 7, 2, 8, 4],\n            [2, 8, 7, 4, 1, 9, 6, 3, 5],\n            [3, 4, 5, 2, 8, 6, 1, 7, 9]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 294,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"Check if the grid is a valid Sudoku solution.\"\"\"\n    def check_rows(grid):\n        for row in grid:\n            if len(set(row)) != len(row):\n                return False\n        return True\n\n    def check_columns(grid):\n        for col in range(9):\n            if len(set(row[col] for row in grid)) != 9:\n                return False\n        return True\n\n    def check_subgrids(grid):\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                subgrid = [row[j:j+3] for row in grid[i:i+3]]\n                flat_subgrid = [num for row in subgrid for num in row]\n                if len(set(flat_subgrid)) != 9:\n                    return False\n        return True\n\n    return check_rows(grid) and check_columns(grid) and check_subgrids(grid)",
        "solution_func": "def g():\n    return [[5, 3, 4, 6, 7, 8, 9, 1, 2],\n            [6, 7, 2, 1, 9, 5, 3, 4, 8],\n            [1, 9, 8, 3, 4, 2, 5, 6, 7],\n            [8, 5, 9, 7, 6, 1, 4, 2, 3],\n            [4, 2, 6, 8, 5, 3, 7, 9, 1],\n            [7, 1, 3, 9, 2, 4, 8, 5, 6],\n            [9, 6, 1, 5, 3, 7, 2, 8, 4],\n            [2, 8, 7, 4, 1, 9, 6, 3, 5],\n            [3, 4, 5, 2, 8, 6, 1, 7, 9]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(lst: List[str], n=5) -> bool:\n    \"\"\"Check if there exists a permutation of lst such that the first n letters form a word.\"\"\"\n    perms = permutations(lst)\n    for perm in perms:\n        word = ''.join(perm[:n])\n        if word in lst:\n            return True\n    return False\n\ndef g(n=5):\n    return ['l', 'e', 'a', 'p', 's', 'e', 'i', 's', 't']\nassert f(g())\n",
        "emb": null,
        "idx_generation": 294,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(lst: List[str], n=5) -> bool:\n    \"\"\"Check if there exists a permutation of lst such that the first n letters form a word.\"\"\"\n    perms = permutations(lst)\n    for perm in perms:\n        word = ''.join(perm[:n])\n        if word in lst:\n            return True\n    return False",
        "solution_func": "def g(n=5):\n    return ['l', 'e', 'a', 'p', 's', 'e', 'i', 's', 't']",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 294,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Check if any combination of four numbers from the list can be used to achieve the target value of 24 using addition, subtraction, multiplication, and division\"\"\"\n    def helper(nums):\n        if len(nums) == 1:\n            return abs(nums[0] - target) < 1e-6\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                a, b = nums[i], nums[j]\n                rest = [nums[k] for k in range(len(nums)) if k != i and k != j]\n                if helper([a+b]+rest) or helper([a-b]+rest) or helper([a*b]+rest) or (b != 0 and helper([a/b]+rest)):\n                    return True\n        return False\n    \n    return helper(nums)\n\ndef g(target=24):\n    return [4, 5, 6, 7]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 294,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Check if any combination of four numbers from the list can be used to achieve the target value of 24 using addition, subtraction, multiplication, and division\"\"\"\n    def helper(nums):\n        if len(nums) == 1:\n            return abs(nums[0] - target) < 1e-6\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                a, b = nums[i], nums[j]\n                rest = [nums[k] for k in range(len(nums)) if k != i and k != j]\n                if helper([a+b]+rest) or helper([a-b]+rest) or helper([a*b]+rest) or (b != 0 and helper([a/b]+rest)):\n                    return True\n        return False\n    \n    return helper(nums)",
        "solution_func": "def g(target=24):\n    return [4, 5, 6, 7]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subset of the list that sums up to the target value\"\"\"\n    def helper(nums, target, index):\n        if target == 0:\n            return True\n        if target < 0 or index >= len(nums):\n            return False\n        return helper(nums, target-nums[index], index+1) or helper(nums, target, index+1)\n    \n    return helper(nums, target, 0)\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 294,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subset of the list that sums up to the target value\"\"\"\n    def helper(nums, target, index):\n        if target == 0:\n            return True\n        if target < 0 or index >= len(nums):\n            return False\n        return helper(nums, target-nums[index], index+1) or helper(nums, target, index+1)\n    \n    return helper(nums, target, 0)",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the sum of the first n elements in the list is equal to the sum of the last n elements in the list.\"\"\"\n    return sum(lst[:n]) == sum(lst[-n:])\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return len(lst) // 2\nassert f(g())\n",
        "emb": null,
        "idx_generation": 294,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the sum of the first n elements in the list is equal to the sum of the last n elements in the list.\"\"\"\n    return sum(lst[:n]) == sum(lst[-n:])",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return len(lst) // 2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, char_count=3, char='a') -> bool:\n    \"\"\"Check if the given character appears the given number of times in the string\"\"\"\n    return string.count(char) == char_count\ndef g(char_count=3, char='a'):\n    return char * char_count + 'b'\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 295,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, char_count=3, char='a') -> bool:\n    \"\"\"Check if the given character appears the given number of times in the string\"\"\"\n    return string.count(char) == char_count",
        "solution_func": "def g(char_count=3, char='a'):\n    return char * char_count + 'b'",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(num_list: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target sum\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=100):\n    return [50, 25, 10, 15, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 295,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num_list: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target sum\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=100):\n    return [50, 25, 10, 15, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sum=100) -> bool:\n    \"\"\"Check if any row in the matrix has a sum equal to the given value\"\"\"\n    for row in matrix:\n        if sum(row) == row_sum:\n            return True\n    return False\ndef g(row_sum=100):\n    return [[10, 20, 30], [40, 50, 60], [70, 80, 90]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 295,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row_sum=100) -> bool:\n    \"\"\"Check if any row in the matrix has a sum equal to the given value\"\"\"\n    for row in matrix:\n        if sum(row) == row_sum:\n            return True\n    return False",
        "solution_func": "def g(row_sum=100):\n    return [[10, 20, 30], [40, 50, 60], [70, 80, 90]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: float, y: float, z: float, result=True) -> bool:\n    \"\"\"Check if the given numbers satisfy a mathematical equation\"\"\"\n    return ((x ** 2) + (y ** 2) + (z ** 2)) == result\ndef g(x=3, y=4, z=5):\n    return sqrt((x ** 2) + (y ** 2) + (z ** 2))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 295,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: float, y: float, z: float, result=True) -> bool:\n    \"\"\"Check if the given numbers satisfy a mathematical equation\"\"\"\n    return ((x ** 2) + (y ** 2) + (z ** 2)) == result",
        "solution_func": "def g(x=3, y=4, z=5):\n    return sqrt((x ** 2) + (y ** 2) + (z ** 2))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, target='palindrome', palindrome=True) -> bool:\n    \"\"\"Check if a string is a palindrome or not based on the palindrome flag\"\"\"\n    return (s == s[::-1]) == palindrome\ndef g(target='palindrome', palindrome=True):\n    return target if palindrome else target + 'x'\nassert f(g())\n",
        "emb": null,
        "idx_generation": 295,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='palindrome', palindrome=True) -> bool:\n    \"\"\"Check if a string is a palindrome or not based on the palindrome flag\"\"\"\n    return (s == s[::-1]) == palindrome",
        "solution_func": "def g(target='palindrome', palindrome=True):\n    return target if palindrome else target + 'x'",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct positive integers whose sum is equal to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target and all((i > 0 for i in nums))\ndef g(target=100, n=5):\n    return list(range(1, n + 1))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 295,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct positive integers whose sum is equal to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target and all((i > 0 for i in nums))",
        "solution_func": "def g(target=100, n=5):\n    return list(range(1, n + 1))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, t: str, n=10) -> bool:\n    \"\"\"Given two strings s and t, determine if s is a substring of t after removing the first n characters from t.\"\"\"\n    return s in t[n:]\ndef g(s: str, t: str, n=10):\n    return t[:n] + s + t[n:]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 295,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, t: str, n=10) -> bool:\n    \"\"\"Given two strings s and t, determine if s is a substring of t after removing the first n characters from t.\"\"\"\n    return s in t[n:]",
        "solution_func": "def g(s: str, t: str, n=10):\n    return t[:n] + s + t[n:]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m=100) -> bool:\n    \"\"\"Given an integer n, determine if n is a multiple of m.\"\"\"\n    return n % m == 0\ndef g(n: int, m=100):\n    return n * m\nassert f(g())\n",
        "emb": null,
        "idx_generation": 295,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=100) -> bool:\n    \"\"\"Given an integer n, determine if n is a multiple of m.\"\"\"\n    return n % m == 0",
        "solution_func": "def g(n: int, m=100):\n    return n * m",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=0, b=1) -> bool:\n    \"\"\"Generate the nth Fibonacci number.\"\"\"\n    fib = [a, b]\n    while len(fib) < n:\n        fib.append(fib[-1] + fib[-2])\n    return fib[-1] == n\ndef g(n: int, a=0, b=1):\n    fib = [a, b]\n    while len(fib) < n:\n        fib.append(fib[-1] + fib[-2])\n    return fib[n-1]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 295,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=0, b=1) -> bool:\n    \"\"\"Generate the nth Fibonacci number.\"\"\"\n    fib = [a, b]\n    while len(fib) < n:\n        fib.append(fib[-1] + fib[-2])\n    return fib[-1] == n",
        "solution_func": "def g(n: int, a=0, b=1):\n    fib = [a, b]\n    while len(fib) < n:\n        fib.append(fib[-1] + fib[-2])\n    return fib[n-1]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: list, n=10, target=9) -> bool:\n    \"\"\"Given a list of integers, find if there exists two elements in the list such that their sum is equal to the target number.\"\"\"\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(n=10, target=9):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 295,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: list, n=10, target=9) -> bool:\n    \"\"\"Given a list of integers, find if there exists two elements in the list such that their sum is equal to the target number.\"\"\"\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(n=10, target=9):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(t: str, s='aBcDefG') -> bool:\n    \"\"\"Given a string s, convert it to a string t by capitalizing the first letter and adding a random lowercase letter\n    after each uppercase letter. Ignore any non-alphabetic characters in s.\n    Sample Input:\n    s = \"aBcDefG\"\n    Sample Output:\n    t = \"AbcDfGh\"\n    \"\"\"\n    i = 0\n    for c in s:\n        if c.isalpha() and c.isupper():\n            assert t[i] == c.upper(), f'expecting `{c.upper()}` at position {i}'\n            i += 1\n            assert t[i] == chr(ord(c.lower()) + 1), f'expecting `{chr(ord(c.lower()) + 1)}`'\n            i += 1\n        else:\n            assert t[i] == c, f'expecting `{c}` at position {i}'\n            i += 1\n    return i == len(t)\ndef g(s='aBcDefG'):\n    t = \"\"\n    for c in s:\n        if c.isalpha() and c.isupper():\n            t += c.upper() + chr(ord(c.lower()) + 1)\n        else:\n            t += c\n    return t\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 296,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(t: str, s='aBcDefG') -> bool:\n    \"\"\"Given a string s, convert it to a string t by capitalizing the first letter and adding a random lowercase letter\n    after each uppercase letter. Ignore any non-alphabetic characters in s.\n    Sample Input:\n    s = \"aBcDefG\"\n    Sample Output:\n    t = \"AbcDfGh\"\n    \"\"\"\n    i = 0\n    for c in s:\n        if c.isalpha() and c.isupper():\n            assert t[i] == c.upper(), f'expecting `{c.upper()}` at position {i}'\n            i += 1\n            assert t[i] == chr(ord(c.lower()) + 1), f'expecting `{chr(ord(c.lower()) + 1)}`'\n            i += 1\n        else:\n            assert t[i] == c, f'expecting `{c}` at position {i}'\n            i += 1\n    return i == len(t)",
        "solution_func": "def g(s='aBcDefG'):\n    t = \"\"\n    for c in s:\n        if c.isalpha() and c.isupper():\n            t += c.upper() + chr(ord(c.lower()) + 1)\n        else:\n            t += c\n    return t",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(t: int, s=12345) -> bool:\n    \"\"\"Given an integer s, subtract 1 from each digit and concatenate them to form an integer t.\n    Sample Input:\n    s = 12345\n    Sample Output:\n    t = 01234\n    \"\"\"\n    t = str(t)\n    s = str(s)\n    for i in range(len(t)):\n        assert int(t[i]) == int(s[i]) - 1, f'expecting `{int(s[i]) - 1}` at position {i}'\n    return True\ndef g(s=12345):\n    t = \"\"\n    for c in str(s):\n        t += str(int(c) - 1)\n    return int(t)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 296,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(t: int, s=12345) -> bool:\n    \"\"\"Given an integer s, subtract 1 from each digit and concatenate them to form an integer t.\n    Sample Input:\n    s = 12345\n    Sample Output:\n    t = 01234\n    \"\"\"\n    t = str(t)\n    s = str(s)\n    for i in range(len(t)):\n        assert int(t[i]) == int(s[i]) - 1, f'expecting `{int(s[i]) - 1}` at position {i}'\n    return True",
        "solution_func": "def g(s=12345):\n    t = \"\"\n    for c in str(s):\n        t += str(int(c) - 1)\n    return int(t)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(t: str, s='abcdefg') -> bool:\n    \"\"\"Given a string s, convert it to a string t by reversing the order of the characters and converting all\n    lowercase letters to uppercase.\n    Sample Input:\n    s = \"abcdefg\"\n    Sample Output:\n    t = \"GFEDCBA\"\n    \"\"\"\n    i = 0\n    for c in s[::-1]:\n        if c.isalpha() and c.islower():\n            assert t[i] == c.upper(), f'expecting `{c.upper()}` at position {i}'\n            i += 1\n        else:\n            assert t[i] == c, f'expecting `{c}` at position {i}'\n            i += 1\n    return i == len(t)\ndef g(s='abcdefg'):\n    return s[::-1].upper()\nassert f(g())",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 296,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(t: str, s='abcdefg') -> bool:\n    \"\"\"Given a string s, convert it to a string t by reversing the order of the characters and converting all\n    lowercase letters to uppercase.\n    Sample Input:\n    s = \"abcdefg\"\n    Sample Output:\n    t = \"GFEDCBA\"\n    \"\"\"\n    i = 0\n    for c in s[::-1]:\n        if c.isalpha() and c.islower():\n            assert t[i] == c.upper(), f'expecting `{c.upper()}` at position {i}'\n            i += 1\n        else:\n            assert t[i] == c, f'expecting `{c}` at position {i}'\n            i += 1\n    return i == len(t)",
        "solution_func": "def g(s='abcdefg'):\n    return s[::-1].upper()",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Find a pair of numbers from a list that adds up to a given target.\nReturn True if such a pair exists, False otherwise.\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(target=12):\n    return [2, 10, 5, 7, 3, 1, 9, 4]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 296,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Find a pair of numbers from a list that adds up to a given target.\nReturn True if such a pair exists, False otherwise.\"\"\"\n    return any(target - num in nums for num in nums)",
        "solution_func": "def g(target=12):\n    return [2, 10, 5, 7, 3, 1, 9, 4]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Determine if a string has at least k consecutive occurrences of a vowel.\nReturn True if the string has at least k consecutive occurrences of a vowel, False otherwise.\nThe string only contains lowercase letters.\"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n            if count == k:\n                return True\n        else:\n            count = 0\n    return False\ndef g(k=3):\n    return 'university'\nassert f(g())\n",
        "emb": null,
        "idx_generation": 296,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Determine if a string has at least k consecutive occurrences of a vowel.\nReturn True if the string has at least k consecutive occurrences of a vowel, False otherwise.\nThe string only contains lowercase letters.\"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n            if count == k:\n                return True\n        else:\n            count = 0\n    return False",
        "solution_func": "def g(k=3):\n    return 'university'",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Given a matrix of integers and a target value, determine if the target value exists in the matrix.\nReturn True if the target value exists, False otherwise.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    left = 0\n    right = m * n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        row = mid // n\n        col = mid % n\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\ndef g(target=5):\n    return [\n        [1, 3, 5, 7],\n        [10, 11, 16, 20],\n        [23, 30, 34, 60]\n    ]\nassert f(g())",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 296,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Given a matrix of integers and a target value, determine if the target value exists in the matrix.\nReturn True if the target value exists, False otherwise.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    left = 0\n    right = m * n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        row = mid // n\n        col = mid % n\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False",
        "solution_func": "def g(target=5):\n    return [\n        [1, 3, 5, 7],\n        [10, 11, 16, 20],\n        [23, 30, 34, 60]\n    ]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find if there is a pair of numbers in the list that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=100):\n    return [i for i in range(target//2)] + [target - i for i in range(target//2)]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 296,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find if there is a pair of numbers in the list that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=100):\n    return [i for i in range(target//2)] + [target - i for i in range(target//2)]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]], target=50) -> bool:\n    \"\"\"Find if there is a subgrid within the grid that sums up to the target\"\"\"\n    m, n = len(grid), len(grid[0])\n    for i in range(m):\n        for j in range(n):\n            for k in range(i, m):\n                for l in range(j, n):\n                    subgrid_sum = sum(grid[x][y] for x in range(i, k+1) for y in range(j, l+1))\n                    if subgrid_sum == target:\n                        return True\n    return False\ndef g(target=50):\n    return [[i+j for j in range(10)] for i in range(10)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 296,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(grid: List[List[int]], target=50) -> bool:\n    \"\"\"Find if there is a subgrid within the grid that sums up to the target\"\"\"\n    m, n = len(grid), len(grid[0])\n    for i in range(m):\n        for j in range(n):\n            for k in range(i, m):\n                for l in range(j, n):\n                    subgrid_sum = sum(grid[x][y] for x in range(i, k+1) for y in range(j, l+1))\n                    if subgrid_sum == target:\n                        return True\n    return False",
        "solution_func": "def g(target=50):\n    return [[i+j for j in range(10)] for i in range(10)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find if there is a subset of numbers in the list that sums up to n\"\"\"\n    return any((sum(subset) == n) for subset in itertools.combinations(nums, len(nums)//2))\ndef g(nums=[1, 2, 3, 4, 5]):\n    return [i for i in nums]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 296,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find if there is a subset of numbers in the list that sums up to n\"\"\"\n    return any((sum(subset) == n) for subset in itertools.combinations(nums, len(nums)//2))",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return [i for i in nums]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100, count=5) -> bool:\n    \"\"\"Find a list of count numbers whose sum is equal to target\"\"\"\n    return sum(nums) == target and len(nums) == count\ndef g(target=100, count=5):\n    return [target/count] * count\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 296,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100, count=5) -> bool:\n    \"\"\"Find a list of count numbers whose sum is equal to target\"\"\"\n    return sum(nums) == target and len(nums) == count",
        "solution_func": "def g(target=100, count=5):\n    return [target/count] * count",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=50) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers that sum up to the target\"\"\"\n    return any((a + b == target for i, a in enumerate(lst) for b in lst[i+1:]))\ndef g(target=50):\n    return [10, 20, 30, 40, 50]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 297,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=50) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers that sum up to the target\"\"\"\n    return any((a + b == target for i, a in enumerate(lst) for b in lst[i+1:]))",
        "solution_func": "def g(target=50):\n    return [10, 20, 30, 40, 50]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='cdaotg') -> bool:\n    \"\"\"Find if the string contains the given substring in a palindrome-like pattern, e.g., 'dcattodc' for 'cat'\"\"\"\n    return s == s[::-1] and s.find(substr) != -1\ndef g(substr='cdaotg'):\n    return substr + substr[::-1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 297,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr='cdaotg') -> bool:\n    \"\"\"Find if the string contains the given substring in a palindrome-like pattern, e.g., 'dcattodc' for 'cat'\"\"\"\n    return s == s[::-1] and s.find(substr) != -1",
        "solution_func": "def g(substr='cdaotg'):\n    return substr + substr[::-1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers, find if there exists a triplet of numbers that sum up to the target\"\"\"\n    return any((a + b + c == target for i, a in enumerate(lst) for j, b in enumerate(lst[i+1:]) for c in lst[i+j+2:]))\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 297,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers, find if there exists a triplet of numbers that sum up to the target\"\"\"\n    return any((a + b + c == target for i, a in enumerate(lst) for j, b in enumerate(lst[i+1:]) for c in lst[i+j+2:]))",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target_sum=100) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target_sum\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            for k in range(j+1, len(num_list)):\n                if num_list[i] + num_list[j] + num_list[k] == target_sum:\n                    return True\n    return False\n\ndef g(target_sum=100):\n    return [10, 20, target_sum-30, 40, 50]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 297,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num_list: List[int], target_sum=100) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target_sum\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            for k in range(j+1, len(num_list)):\n                if num_list[i] + num_list[j] + num_list[k] == target_sum:\n                    return True\n    return False",
        "solution_func": "def g(target_sum=100):\n    return [10, 20, target_sum-30, 40, 50]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words_list: List[str], letters='aeiou') -> bool:\n    \"\"\"Check if all words in the list contain at least one of the letters\"\"\"\n    return all(any(letter in word for letter in letters) for word in words_list)\n\ndef g(letters='aeiou'):\n    return ['apple', 'banana', 'orange', 'grapefruit']\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 297,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words_list: List[str], letters='aeiou') -> bool:\n    \"\"\"Check if all words in the list contain at least one of the letters\"\"\"\n    return all(any(letter in word for letter in letters) for word in words_list)",
        "solution_func": "def g(letters='aeiou'):\n    return ['apple', 'banana', 'orange', 'grapefruit']",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"Check if the substring is present in the string in reverse order\"\"\"\n    return substr[::-1] in string\n\ndef g(substr='python'):\n    return 'nohtyp'\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 297,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"Check if the substring is present in the string in reverse order\"\"\"\n    return substr[::-1] in string",
        "solution_func": "def g(substr='python'):\n    return 'nohtyp'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(year: int, month=12) -> bool:\n    \"\"\"Check if a given year and month has a Friday the 13th.\"\"\"\n    import datetime\n\n    date = datetime.datetime(year, month, 13)\n    return date.weekday() == 4\ndef g(month=12):\n    return 2022, month\nassert f(g())\n",
        "emb": null,
        "idx_generation": 297,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(year: int, month=12) -> bool:\n    \"\"\"Check if a given year and month has a Friday the 13th.\"\"\"\n    import datetime\n\n    date = datetime.datetime(year, month, 13)\n    return date.weekday() == 4",
        "solution_func": "def g(month=12):\n    return 2022, month",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, target='python', case_sensitive=False) -> bool:\n    \"\"\"Check if a target word is present in a given sentence.\"\"\"\n    if not case_sensitive:\n        sentence = sentence.lower()\n        target = target.lower()\n    return target in sentence\ndef g(target='python', case_sensitive=False):\n    if not case_sensitive:\n        target = target.lower()\n    return f\"This sentence contains the word {target}.\"\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 297,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(sentence: str, target='python', case_sensitive=False) -> bool:\n    \"\"\"Check if a target word is present in a given sentence.\"\"\"\n    if not case_sensitive:\n        sentence = sentence.lower()\n        target = target.lower()\n    return target in sentence",
        "solution_func": "def g(target='python', case_sensitive=False):\n    if not case_sensitive:\n        target = target.lower()\n    return f\"This sentence contains the word {target}.\"",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists three distinct indices i, j, k in the given list such that nums[i] + nums[j] + nums[k] is divisible by k.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if (nums[i] + nums[j] + nums[k]) % k == 0:\n                    return True\n    return False\ndef g(k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 297,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists three distinct indices i, j, k in the given list such that nums[i] + nums[j] + nums[k] is divisible by k.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if (nums[i] + nums[j] + nums[k]) % k == 0:\n                    return True\n    return False",
        "solution_func": "def g(k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport pandas as pd\n\ndef f(df: pd.DataFrame, num_rows=5, num_cols=3) -> bool:\n    \"\"\"Check if the number of rows and columns in the dataframe match the specified values.\"\"\"\n    return df.shape == (num_rows, num_cols)\n\ndef g(num_rows=5, num_cols=3):\n    data = {'col1': [1, 2, 3, 4, 5],\n            'col2': ['a', 'b', 'c', 'd', 'e'],\n            'col3': [True, False, True, False, True]}\n    return pd.DataFrame(data=data).head(num_rows)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 297,
        "target_skills": null,
        "problem_func": "from typing import*\nimport pandas as pd\n\ndef f(df: pd.DataFrame, num_rows=5, num_cols=3) -> bool:\n    \"\"\"Check if the number of rows and columns in the dataframe match the specified values.\"\"\"\n    return df.shape == (num_rows, num_cols)",
        "solution_func": "def g(num_rows=5, num_cols=3):\n    data = {'col1': [1, 2, 3, 4, 5],\n            'col2': ['a', 'b', 'c', 'd', 'e'],\n            'col3': [True, False, True, False, True]}\n    return pd.DataFrame(data=data).head(num_rows)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, year=2022) -> bool:\n    \"\"\"Check if a given date is in the future\"\"\"\n    given_date = datetime.datetime.strptime(date, '%Y-%m-%d').date()\n    current_date = datetime.datetime.now().date()\n    return given_date > current_date and given_date.year == year\n\ndef g(year=2022):\n    current_date = datetime.datetime.now().date()\n    future_date = current_date.replace(year=year) + datetime.timedelta(days=7)\n    return future_date.strftime('%Y-%m-%d')\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 298,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(date: str, year=2022) -> bool:\n    \"\"\"Check if a given date is in the future\"\"\"\n    given_date = datetime.datetime.strptime(date, '%Y-%m-%d').date()\n    current_date = datetime.datetime.now().date()\n    return given_date > current_date and given_date.year == year",
        "solution_func": "def g(year=2022):\n    current_date = datetime.datetime.now().date()\n    future_date = current_date.replace(year=year) + datetime.timedelta(days=7)\n    return future_date.strftime('%Y-%m-%d')",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], n=5) -> bool:\n    \"\"\"Check if there are at least n unique elements in the list\"\"\"\n    unique_elements = set(lst)\n    return len(unique_elements) >= n\n\ndef g(n=5):\n    lst = random.choices(range(10), k=n-1)\n    lst.append(random.randint(0, 9))\n    return lst\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 298,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(lst: List[int], n=5) -> bool:\n    \"\"\"Check if there are at least n unique elements in the list\"\"\"\n    unique_elements = set(lst)\n    return len(unique_elements) >= n",
        "solution_func": "def g(n=5):\n    lst = random.choices(range(10), k=n-1)\n    lst.append(random.randint(0, 9))\n    return lst",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if a substring is present in the given string\"\"\"\n    return substring in s.lower()\n\ndef g(substring='python'):\n    s = 'Python is a powerful programming language.'\n    return s\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 298,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if a substring is present in the given string\"\"\"\n    return substring in s.lower()",
        "solution_func": "def g(substring='python'):\n    s = 'Python is a powerful programming language.'\n    return s",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, n=3) -> bool:\n    \"\"\"Check if the sum of all numbers in the array is divisible by n.\"\"\"\n    return np.sum(arr) % n == 0\n\ndef g(n=3):\n    return np.array([i for i in range(n**2)])\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 298,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, n=3) -> bool:\n    \"\"\"Check if the sum of all numbers in the array is divisible by n.\"\"\"\n    return np.sum(arr) % n == 0",
        "solution_func": "def g(n=3):\n    return np.array([i for i in range(n**2)])",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, a=10, b=3) -> bool:\n    \"\"\"Check if the square root of x is between a and b.\"\"\"\n    return math.sqrt(x) > a and math.sqrt(x) < b\n\ndef g(a=10, b=3):\n    return (a + b) ** 2\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 298,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: int, a=10, b=3) -> bool:\n    \"\"\"Check if the square root of x is between a and b.\"\"\"\n    return math.sqrt(x) > a and math.sqrt(x) < b",
        "solution_func": "def g(a=10, b=3):\n    return (a + b) ** 2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: int, a=5, b=10) -> bool:\n    \"\"\"Check if x is within the range of a and b (inclusive).\"\"\"\n    return x >= a and x <= b\n\ndef g(a=5, b=10):\n    return random.randint(a, b)\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 298,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(x: int, a=5, b=10) -> bool:\n    \"\"\"Check if x is within the range of a and b (inclusive).\"\"\"\n    return x >= a and x <= b",
        "solution_func": "def g(a=5, b=10):\n    return random.randint(a, b)",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, arr=[1, 3, 5, 7, 9], n=5) -> bool:\n    \"\"\"Check if x is present in the first n elements of arr\"\"\"\n    return x in arr[:n]\ndef g(arr=[1, 3, 5, 7, 9], n=5):\n    return arr[n-1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 298,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, arr=[1, 3, 5, 7, 9], n=5) -> bool:\n    \"\"\"Check if x is present in the first n elements of arr\"\"\"\n    return x in arr[:n]",
        "solution_func": "def g(arr=[1, 3, 5, 7, 9], n=5):\n    return arr[n-1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, arr=['apple', 'banana', 'cherry', 'date'], n=4) -> bool:\n    \"\"\"Check if x is the last element of arr\"\"\"\n    return x == arr[-1]\ndef g(arr=['apple', 'banana', 'cherry', 'date'], n=4):\n    return arr[n-1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 298,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, arr=['apple', 'banana', 'cherry', 'date'], n=4) -> bool:\n    \"\"\"Check if x is the last element of arr\"\"\"\n    return x == arr[-1]",
        "solution_func": "def g(arr=['apple', 'banana', 'cherry', 'date'], n=4):\n    return arr[n-1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, arr=[1, 2, 4, 8, 16], n=5) -> bool:\n    \"\"\"Check if x is a power of 2 and present in arr\"\"\"\n    return x in arr and x & (x-1) == 0\ndef g(arr=[1, 2, 4, 8, 16], n=5):\n    return arr[2]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 298,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, arr=[1, 2, 4, 8, 16], n=5) -> bool:\n    \"\"\"Check if x is a power of 2 and present in arr\"\"\"\n    return x in arr and x & (x-1) == 0",
        "solution_func": "def g(arr=[1, 2, 4, 8, 16], n=5):\n    return arr[2]",
        "map_ix": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a number in the matrix that is equal to the target\"\"\"\n    return any((target in row for row in matrix))\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 298,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a number in the matrix that is equal to the target\"\"\"\n    return any((target in row for row in matrix))",
        "solution_func": "def g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=10, m=4) -> bool:\n    \"\"\"Check if the string contains the same character repeated n times consecutively, and the length of the string is divisible by m.\"\"\"\n    return all(s[i] == s[i+1] for i in range(len(s)-1)) and len(s) % m == 0\ndef g(n=10, m=4):\n    return 'a' * n * m\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 299,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=10, m=4) -> bool:\n    \"\"\"Check if the string contains the same character repeated n times consecutively, and the length of the string is divisible by m.\"\"\"\n    return all(s[i] == s[i+1] for i in range(len(s)-1)) and len(s) % m == 0",
        "solution_func": "def g(n=10, m=4):\n    return 'a' * n * m",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, target='python', n=3) -> bool:\n    \"\"\"Check if the string starts with the target and ends with n exclamation marks.\"\"\"\n    return s.startswith(target) and s.endswith('!' * n)\ndef g(target='python', n=3):\n    return target + '!'\nassert f(g())\n",
        "emb": null,
        "idx_generation": 299,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='python', n=3) -> bool:\n    \"\"\"Check if the string starts with the target and ends with n exclamation marks.\"\"\"\n    return s.startswith(target) and s.endswith('!' * n)",
        "solution_func": "def g(target='python', n=3):\n    return target + '!'",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the string is a palindrome and the sum of the ASCII values of its characters is divisible by n.\"\"\"\n    return s == s[::-1] and sum(ord(c) for c in s) % n == 0\ndef g(n=5):\n    return 'level'\nassert f(g())\n",
        "emb": null,
        "idx_generation": 299,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the string is a palindrome and the sum of the ASCII values of its characters is divisible by n.\"\"\"\n    return s == s[::-1] and sum(ord(c) for c in s) % n == 0",
        "solution_func": "def g(n=5):\n    return 'level'",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, nums=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Find if the sum of any two numbers in the list nums equals n\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == n:\n                return True\n    return False\n\ndef g(nums=[2, 4, 6, 8, 10]):\n    return sum(nums)\n\nassert f(g(), n=16)\n",
        "emb": null,
        "idx_generation": 299,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(n: int, nums=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Find if the sum of any two numbers in the list nums equals n\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == n:\n                return True\n    return False",
        "solution_func": "def g(nums=[2, 4, 6, 8, 10]):\n    return sum(nums)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, num_digits=3) -> bool:\n    \"\"\"Find if the square root of n has exactly num_digits after the decimal point\"\"\"\n    sqrt_n = math.sqrt(n)\n    decimal_part = str(sqrt_n).split('.')[1]\n    return len(decimal_part) == num_digits\n\ndef g(num_digits=3):\n    return int('1' + '0' * (num_digits - 1)) ** 2\n\nassert f(g(), num_digits=3)\n",
        "emb": null,
        "idx_generation": 299,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, num_digits=3) -> bool:\n    \"\"\"Find if the square root of n has exactly num_digits after the decimal point\"\"\"\n    sqrt_n = math.sqrt(n)\n    decimal_part = str(sqrt_n).split('.')[1]\n    return len(decimal_part) == num_digits",
        "solution_func": "def g(num_digits=3):\n    return int('1' + '0' * (num_digits - 1)) ** 2",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s1: str, s2: str, s3: str, n=3) -> bool:\n    \"\"\"Find if the nth character of s1 is the same as the nth character of s2 and s3\"\"\"\n    return s1[n] == s2[n] == s3[n]\n\ndef g(s1='abcdefg', s2='hijklmn', s3='opqrst'):\n    return s1 + s2 + s3\n\nassert f(g(), 'def', 'jkl', n=3)\n",
        "emb": null,
        "idx_generation": 299,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s1: str, s2: str, s3: str, n=3) -> bool:\n    \"\"\"Find if the nth character of s1 is the same as the nth character of s2 and s3\"\"\"\n    return s1[n] == s2[n] == s3[n]",
        "solution_func": "def g(s1='abcdefg', s2='hijklmn', s3='opqrst'):\n    return s1 + s2 + s3",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to n.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == n:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return sum(nums)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 299,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to n.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == n:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return sum(nums)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit', 'honeydew', 'imbe', 'jackfruit']) -> bool:\n    \"\"\"Check if the given string contains all the substrings in the list.\"\"\"\n    return all(sub in s for sub in substrings)\ndef g(substrings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit', 'honeydew', 'imbe', 'jackfruit']):\n    return ''.join(substrings)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 299,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit', 'honeydew', 'imbe', 'jackfruit']) -> bool:\n    \"\"\"Check if the given string contains all the substrings in the list.\"\"\"\n    return all(sub in s for sub in substrings)",
        "solution_func": "def g(substrings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit', 'honeydew', 'imbe', 'jackfruit']):\n    return ''.join(substrings)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiplies to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 299,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiplies to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(a: int, b: int, c: int, d: int) -> bool:\n    \"\"\"Check if the given integers satisfy the equation a^2 + b^2 + c^2 = d^2\"\"\"\n    return a**2 + b**2 + c**2 == d**2\n\ndef g():\n    a = 3\n    b = 4\n    c = 5\n    d = 2\n    return a, b, c, d\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 299,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(a: int, b: int, c: int, d: int) -> bool:\n    \"\"\"Check if the given integers satisfy the equation a^2 + b^2 + c^2 = d^2\"\"\"\n    return a**2 + b**2 + c**2 == d**2",
        "solution_func": "def g():\n    a = 3\n    b = 4\n    c = 5\n    d = 2\n    return a, b, c, d",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"Find a number that is a perfect square and a perfect cube.\"\"\"\n    return int(math.sqrt(n))**2 == n and int(n**(1/3))**3 == n\n\ndef g():\n    return 64\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 300,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"Find a number that is a perfect square and a perfect cube.\"\"\"\n    return int(math.sqrt(n))**2 == n and int(n**(1/3))**3 == n",
        "solution_func": "def g():\n    return 64",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: list) -> bool:\n    \"\"\"Find a list of numbers where every element is divisible by 3.\"\"\"\n    return all(num % 3 == 0 for num in nums)\n\ndef g():\n    return [3, 6, 9, 12]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 300,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: list) -> bool:\n    \"\"\"Find a list of numbers where every element is divisible by 3.\"\"\"\n    return all(num % 3 == 0 for num in nums)",
        "solution_func": "def g():\n    return [3, 6, 9, 12]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string that is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 300,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string that is a palindrome.\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"racecar\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number exists in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix: List[List[int]], target=0):\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 300,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number exists in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(matrix: List[List[int]], target=0):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(word: str, substring='python') -> bool:\n    \"\"\"Check if the given word contains the given substring.\"\"\"\n    return substring in word\n\ndef g(word: str, substring='python'):\n    return word\nassert f(g())\n",
        "emb": null,
        "idx_generation": 300,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str, substring='python') -> bool:\n    \"\"\"Check if the given word contains the given substring.\"\"\"\n    return substring in word",
        "solution_func": "def g(word: str, substring='python'):\n    return word",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers: List[int], target=0):\n    return numbers\nassert f(g())\n",
        "emb": null,
        "idx_generation": 300,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(numbers: List[int], target=0):\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=3) -> bool:\n    \"\"\"Check if the remainder of dividing a by b is equal to n\"\"\"\n    return a % b == n\ndef g(a=10, b=3):\n    return a % b\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 300,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=10, b=3) -> bool:\n    \"\"\"Check if the remainder of dividing a by b is equal to n\"\"\"\n    return a % b == n",
        "solution_func": "def g(a=10, b=3):\n    return a % b",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the sum of the first n elements of lst is equal to n\"\"\"\n    return sum(lst[:n]) == n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return len(lst)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 300,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the sum of the first n elements of lst is equal to n\"\"\"\n    return sum(lst[:n]) == n",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    return len(lst)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the length of s is greater than n\"\"\"\n    return len(s) > n\ndef g(n=3):\n    s = \"Hello World!\"\n    return s\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 300,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the length of s is greater than n\"\"\"\n    return len(s) > n",
        "solution_func": "def g(n=3):\n    s = \"Hello World!\"\n    return s",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='code') -> bool:\n    \"\"\"Check if the substring 'code' appears at least twice in the string.\"\"\"\n    return string.count(substring) >= 2\ndef g(substring='code'):\n    return substring * 2\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 300,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='code') -> bool:\n    \"\"\"Check if the substring 'code' appears at least twice in the string.\"\"\"\n    return string.count(substring) >= 2",
        "solution_func": "def g(substring='code'):\n    return substring * 2",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of numbers, find a pair of numbers that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 301,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of numbers, find a pair of numbers that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[str], target='apple') -> bool:\n    \"\"\"Given a list of strings, find the index of the target string\"\"\"\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1\n\ndef g(target='apple'):\n    return ['orange', 'banana', 'apple', 'grape', 'mango']\n\nassert f(g()) == 2\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 301,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[str], target='apple') -> bool:\n    \"\"\"Given a list of strings, find the index of the target string\"\"\"\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1",
        "solution_func": "def g(target='apple'):\n    return ['orange', 'banana', 'apple', 'grape', 'mango']",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of numbers, find three numbers that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [50, 25, 10, 15, 30, 40, 60]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 301,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of numbers, find three numbers that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=100):\n    return [50, 25, 10, 15, 30, 40, 60]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y=5.2) -> bool:\n    \"\"\"Check if the given number is a perfect square and the square root is less than or equal to y\"\"\"\n    return math.isqrt(x) ** 2 == x and math.isqrt(x) <= y\n\ndef g(y=5.2):\n    return int(y) ** 2\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 301,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y=5.2) -> bool:\n    \"\"\"Check if the given number is a perfect square and the square root is less than or equal to y\"\"\"\n    return math.isqrt(x) ** 2 == x and math.isqrt(x) <= y",
        "solution_func": "def g(y=5.2):\n    return int(y) ** 2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport statistics\n\ndef f(lst: list, mean=10.5, stdev=3.7) -> bool:\n    \"\"\"Check if the given list has a mean equal to mean and standard deviation equal to stdev\"\"\"\n    return statistics.mean(lst) == mean and statistics.stdev(lst) == stdev\n\ndef g(mean=10.5, stdev=3.7):\n    return [mean - stdev, mean, mean + stdev]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 301,
        "target_skills": null,
        "problem_func": "from typing import*\nimport statistics\n\ndef f(lst: list, mean=10.5, stdev=3.7) -> bool:\n    \"\"\"Check if the given list has a mean equal to mean and standard deviation equal to stdev\"\"\"\n    return statistics.mean(lst) == mean and statistics.stdev(lst) == stdev",
        "solution_func": "def g(mean=10.5, stdev=3.7):\n    return [mean - stdev, mean, mean + stdev]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: list, num=3) -> bool:\n    \"\"\"Check if the given list contains at least num unique elements\"\"\"\n    return len(set(lst)) >= num\n\ndef g(num=3):\n    return random.choices(range(num * 2), k=num)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 301,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(lst: list, num=3) -> bool:\n    \"\"\"Check if the given list contains at least num unique elements\"\"\"\n    return len(set(lst)) >= num",
        "solution_func": "def g(num=3):\n    return random.choices(range(num * 2), k=num)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(li: List[int], target=500) -> bool:\n    \"\"\"Find a sublist in the given list that adds up to the target number.\"\"\"\n    for i in range(len(li)):\n        for j in range(i, len(li)):\n            if sum(li[i:j+1]) == target:\n                return True\n    return False\n\ndef g(target=500):\n    li = [random.randint(1, 100) for _ in range(100)]\n    return li\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 301,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(li: List[int], target=500) -> bool:\n    \"\"\"Find a sublist in the given list that adds up to the target number.\"\"\"\n    for i in range(len(li)):\n        for j in range(i, len(li)):\n            if sum(li[i:j+1]) == target:\n                return True\n    return False",
        "solution_func": "def g(target=500):\n    li = [random.randint(1, 100) for _ in range(100)]\n    return li",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Find the number of times the given substring appears in the string.\"\"\"\n    count = 0\n    i = s.find(substr)\n    while i != -1:\n        count += 1\n        i = s.find(substr, i + 1)\n    return count\n\ndef g(substr='abc'):\n    s = 'abcbcabcabcbabc'\n    return s\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 301,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Find the number of times the given substring appears in the string.\"\"\"\n    count = 0\n    i = s.find(substr)\n    while i != -1:\n        count += 1\n        i = s.find(substr, i + 1)\n    return count",
        "solution_func": "def g(substr='abc'):\n    s = 'abcbcabcabcbabc'\n    return s",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray in the given list such that the sum of elements is divisible by k.\"\"\"\n    n = len(li)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + li[i - 1]\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if (prefix_sum[j] - prefix_sum[i]) % k == 0:\n                return True\n    return False\n\ndef g(k=3):\n    li = [4, 2, 6, 1, 7, 3]\n    return li\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 301,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray in the given list such that the sum of elements is divisible by k.\"\"\"\n    n = len(li)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + li[i - 1]\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if (prefix_sum[j] - prefix_sum[i]) % k == 0:\n                return True\n    return False",
        "solution_func": "def g(k=3):\n    li = [4, 2, 6, 1, 7, 3]\n    return li",
        "map_ix": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Given a list of numbers, find if there are two numbers that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 301,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Given a list of numbers, find if there are two numbers that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python', case_sensitive=True) -> bool:\n    \"\"\"Check if a string contains a target word.\"\"\"\n    if case_sensitive:\n        return target in s\n    else:\n        return target.lower() in s.lower()\ndef g(target='python', case_sensitive=True):\n    return target if case_sensitive else target.upper()\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 302,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='python', case_sensitive=True) -> bool:\n    \"\"\"Check if a string contains a target word.\"\"\"\n    if case_sensitive:\n        return target in s\n    else:\n        return target.lower() in s.lower()",
        "solution_func": "def g(target='python', case_sensitive=True):\n    return target if case_sensitive else target.upper()",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=7, c=3) -> bool:\n    \"\"\"Check if a number is divisible by a, b, and c.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=5, b=7, c=3):\n    return a * b * c\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 302,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=5, b=7, c=3) -> bool:\n    \"\"\"Check if a number is divisible by a, b, and c.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0",
        "solution_func": "def g(a=5, b=7, c=3):\n    return a * b * c",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, volume=113.0976) -> bool:\n    \"\"\"Check if the volume of a sphere is equal to a given value.\"\"\"\n    calculated_volume = (4/3) * math.pi * radius**3\n    return math.isclose(calculated_volume, volume)\ndef g(volume=113.0976):\n    radius = (3 * volume / (4 * math.pi))**(1/3)\n    return radius\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 302,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(radius: float, volume=113.0976) -> bool:\n    \"\"\"Check if the volume of a sphere is equal to a given value.\"\"\"\n    calculated_volume = (4/3) * math.pi * radius**3\n    return math.isclose(calculated_volume, volume)",
        "solution_func": "def g(volume=113.0976):\n    radius = (3 * volume / (4 * math.pi))**(1/3)\n    return radius",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\ndef f(lst: list, target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of distinct numbers in the list that sum up to the target sum.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False\n\ndef g(lst=[random.randint(1, 50) for _ in range(10)], target_sum=100):\n    return lst\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 302,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\ndef f(lst: list, target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of distinct numbers in the list that sum up to the target sum.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(lst=[random.randint(1, 50) for _ in range(10)], target_sum=100):\n    return lst",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(num: int, threshold=10) -> bool:\n    \"\"\"Check if the given number is a prime number with more than the threshold number of digits.\"\"\"\n    if num < 2 or len(str(num)) <= threshold:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(threshold=10):\n    num = 10 ** threshold\n    while True:\n        if f(num, threshold):\n            return num\n        num += 1\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 302,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\ndef f(num: int, threshold=10) -> bool:\n    \"\"\"Check if the given number is a prime number with more than the threshold number of digits.\"\"\"\n    if num < 2 or len(str(num)) <= threshold:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(threshold=10):\n    num = 10 ** threshold\n    while True:\n        if f(num, threshold):\n            return num\n        num += 1",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: list, target=0) -> bool:\n    \"\"\"Check if there exists a row in the matrix whose sum of elements is equal to the target value.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=0):\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 302,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: list, target=0) -> bool:\n    \"\"\"Check if there exists a row in the matrix whose sum of elements is equal to the target value.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=0):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a number is present in the list.\"\"\"\n    return n in numbers\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return numbers[3]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 302,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a number is present in the list.\"\"\"\n    return n in numbers",
        "solution_func": "def g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return numbers[3]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if a string is an anagram of any word in the list.\"\"\"\n    sorted_s = sorted(s)\n    return any(sorted_s == sorted(w) for w in words)\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return 'leppa'\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 302,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if a string is an anagram of any word in the list.\"\"\"\n    sorted_s = sorted(s)\n    return any(sorted_s == sorted(w) for w in words)",
        "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return 'leppa'",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, prime_factors=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a number is a product of any two prime factors in the list.\"\"\"\n    for i in range(len(prime_factors)):\n        for j in range(i, len(prime_factors)):\n            if prime_factors[i] * prime_factors[j] == n:\n                return True\n    return False\ndef g(prime_factors=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return prime_factors[5] * prime_factors[7]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 302,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, prime_factors=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a number is a product of any two prime factors in the list.\"\"\"\n    for i in range(len(prime_factors)):\n        for j in range(i, len(prime_factors)):\n            if prime_factors[i] * prime_factors[j] == n:\n                return True\n    return False",
        "solution_func": "def g(prime_factors=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return prime_factors[5] * prime_factors[7]",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10, k=3) -> bool:\n    \"\"\"Find k numbers in the list that sum up to the target value.\"\"\"\n    assert len(nums) >= k, \"Not enough numbers in the list.\"\n    def find_combinations(curr_nums, curr_sum, remaining_nums):\n        if len(curr_nums) == k and curr_sum == target:\n            return True\n        if len(curr_nums) > k or curr_sum > target or not remaining_nums:\n            return False\n        return find_combinations(curr_nums + [remaining_nums[0]], curr_sum + remaining_nums[0], remaining_nums[1:]) or find_combinations(curr_nums, curr_sum, remaining_nums[1:])\n    return find_combinations([], 0, nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    nums.sort(reverse=True)\n    return nums[:3]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 302,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10, k=3) -> bool:\n    \"\"\"Find k numbers in the list that sum up to the target value.\"\"\"\n    assert len(nums) >= k, \"Not enough numbers in the list.\"\n    def find_combinations(curr_nums, curr_sum, remaining_nums):\n        if len(curr_nums) == k and curr_sum == target:\n            return True\n        if len(curr_nums) > k or curr_sum > target or not remaining_nums:\n            return False\n        return find_combinations(curr_nums + [remaining_nums[0]], curr_sum + remaining_nums[0], remaining_nums[1:]) or find_combinations(curr_nums, curr_sum, remaining_nums[1:])\n    return find_combinations([], 0, nums)",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    nums.sort(reverse=True)\n    return nums[:3]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, n=4) -> bool:\n    \"\"\"Check if a number is a power of n\"\"\"\n    if x == 1:\n        return True\n    while x != 0 and x % n == 0:\n        x = x / n\n    return x == 1\ndef g(n=4):\n    return n**2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 303,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, n=4) -> bool:\n    \"\"\"Check if a number is a power of n\"\"\"\n    if x == 1:\n        return True\n    while x != 0 and x % n == 0:\n        x = x / n\n    return x == 1",
        "solution_func": "def g(n=4):\n    return n**2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=5) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by n\"\"\"\n    return all(num % n == 0 for num in x)\ndef g(n=5):\n    return [n] * 10\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 303,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=5) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by n\"\"\"\n    return all(num % n == 0 for num in x)",
        "solution_func": "def g(n=5):\n    return [n] * 10",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, vowels='aeiou') -> bool:\n    \"\"\"Check if all vowels in the string are in the given set of vowels\"\"\"\n    return all(char in vowels for char in s if char.lower() in vowels)\ndef g(vowels='aeiou'):\n    return 'hello'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 303,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, vowels='aeiou') -> bool:\n    \"\"\"Check if all vowels in the string are in the given set of vowels\"\"\"\n    return all(char in vowels for char in s if char.lower() in vowels)",
        "solution_func": "def g(vowels='aeiou'):\n    return 'hello'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int, a=6, b=2, c=3) -> bool:\n    \"\"\"Find three integers x, y, and z such that x^a + y^b = z^c\"\"\"\n    return x ** a + y ** b == z ** c\ndef g(a=6, b=2, c=3):\n    x = 1\n    y = 1\n    z = 2\n    while not f(x, y, z):\n        if y < x:\n            y += 1\n        else:\n            x += 1\n            y = 1\n        z += 1\n    return x, y, z\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 303,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, y: int, z: int, a=6, b=2, c=3) -> bool:\n    \"\"\"Find three integers x, y, and z such that x^a + y^b = z^c\"\"\"\n    return x ** a + y ** b == z ** c",
        "solution_func": "def g(a=6, b=2, c=3):\n    x = 1\n    y = 1\n    z = 2\n    while not f(x, y, z):\n        if y < x:\n            y += 1\n        else:\n            x += 1\n            y = 1\n        z += 1\n    return x, y, z",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, k: int, a=2, b=3) -> bool:\n    \"\"\"Find a number n such that n^a - n^b = k\"\"\"\n    return n ** a - n ** b == k\ndef g(a=2, b=3):\n    n = 1\n    k = 0\n    while not f(n, k):\n        n += 1\n        k = n ** a - n ** b\n    return n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 303,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, k: int, a=2, b=3) -> bool:\n    \"\"\"Find a number n such that n^a - n^b = k\"\"\"\n    return n ** a - n ** b == k",
        "solution_func": "def g(a=2, b=3):\n    n = 1\n    k = 0\n    while not f(n, k):\n        n += 1\n        k = n ** a - n ** b\n    return n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='abcdefg', b='hijklmn') -> bool:\n    \"\"\"Find a string s such that it contains all characters from a and b\"\"\"\n    return all(char in s for char in a) and all(char in s for char in b)\ndef g(a='abcdefg', b='hijklmn'):\n    s = a + b\n    return s\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 303,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, a='abcdefg', b='hijklmn') -> bool:\n    \"\"\"Find a string s such that it contains all characters from a and b\"\"\"\n    return all(char in s for char in a) and all(char in s for char in b)",
        "solution_func": "def g(a='abcdefg', b='hijklmn'):\n    s = a + b\n    return s",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=120) -> bool:\n    \"\"\"Find the smallest positive integer n such that the sum of the first n positive integers is equal to the target value.\"\"\"\n    return (n * (n + 1) // 2) == target\ndef g(target=120):\n    n = 1\n    while (n * (n + 1) // 2) < target:\n        n += 1\n    return n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 303,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target=120) -> bool:\n    \"\"\"Find the smallest positive integer n such that the sum of the first n positive integers is equal to the target value.\"\"\"\n    return (n * (n + 1) // 2) == target",
        "solution_func": "def g(target=120):\n    n = 1\n    while (n * (n + 1) // 2) < target:\n        n += 1\n    return n",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, target_length=9) -> bool:\n    \"\"\"Check if the given string is a palindrome and has a length equal to the target length.\"\"\"\n    return (s == s[::-1]) and (len(s) == target_length)\ndef g(target_length=9):\n    return \"racecar\" if target_length % 2 == 1 else \"radar\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 303,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target_length=9) -> bool:\n    \"\"\"Check if the given string is a palindrome and has a length equal to the target length.\"\"\"\n    return (s == s[::-1]) and (len(s) == target_length)",
        "solution_func": "def g(target_length=9):\n    return \"racecar\" if target_length % 2 == 1 else \"radar\"",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target sum.\"\"\"\n    num_set = set()\n    for num in nums:\n        if (target_sum - num) in num_set:\n            return True\n        num_set.add(num)\n    return False\ndef g(target_sum=100):\n    return [50, 75, 25, 10, 90] if target_sum % 10 == 0 else [50, 75, 25, 10, 80]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 303,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target sum.\"\"\"\n    num_set = set()\n    for num in nums:\n        if (target_sum - num) in num_set:\n            return True\n        num_set.add(num)\n    return False",
        "solution_func": "def g(target_sum=100):\n    return [50, 75, 25, 10, 90] if target_sum % 10 == 0 else [50, 75, 25, 10, 80]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, x=10, y=5) -> bool:\n    \"\"\"Check if the given number is a perfect square and divisible by both x and y\"\"\"\n    return sqrt(n) == int(sqrt(n)) and n % x == 0 and n % y == 0\n\ndef g(x=10, y=5):\n    return x * y * x * y\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 303,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, x=10, y=5) -> bool:\n    \"\"\"Check if the given number is a perfect square and divisible by both x and y\"\"\"\n    return sqrt(n) == int(sqrt(n)) and n % x == 0 and n % y == 0",
        "solution_func": "def g(x=10, y=5):\n    return x * y * x * y",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=200, k=3) -> bool:\n    \"\"\"Find k numbers in the list that sum up to target\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, k):\n        if sum(combo) == target:\n            return True\n    return False\ndef g(target=200, k=3):\n    return [i for i in range(1, target+1)]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 304,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=200, k=3) -> bool:\n    \"\"\"Find k numbers in the list that sum up to target\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, k):\n        if sum(combo) == target:\n            return True\n    return False",
        "solution_func": "def g(target=200, k=3):\n    return [i for i in range(1, target+1)]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='fix') -> bool:\n    \"\"\"Check if any word in the list starts with a specific prefix and ends with a specific suffix\"\"\"\n    return any((word.startswith(prefix) and word.endswith(suffix) for word in words))\ndef g(prefix='pre', suffix='fix'):\n    return [prefix + str(i) + suffix for i in range(10)]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 304,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='fix') -> bool:\n    \"\"\"Check if any word in the list starts with a specific prefix and ends with a specific suffix\"\"\"\n    return any((word.startswith(prefix) and word.endswith(suffix) for word in words))",
        "solution_func": "def g(prefix='pre', suffix='fix'):\n    return [prefix + str(i) + suffix for i in range(10)]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Check if any row in the matrix contains all even numbers that sum up to target\"\"\"\n    return any((sum(row) == target and all((num % 2 == 0 for num in row)) for row in matrix))\ndef g(target=100):\n    return [[i for i in range(1, target+1)] for _ in range(10)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 304,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Check if any row in the matrix contains all even numbers that sum up to target\"\"\"\n    return any((sum(row) == target and all((num % 2 == 0 for num in row)) for row in matrix))",
        "solution_func": "def g(target=100):\n    return [[i for i in range(1, target+1)] for _ in range(10)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x, y, z) -> bool:\n    \"\"\"Check if the given number is a perfect square.\"\"\"\n    return n == math.isqrt(n)**2\n\ndef g(x, y=4, z=5):\n    return x**2\n\nassert f(g(25), 25)\n",
        "emb": null,
        "idx_generation": 304,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x, y, z) -> bool:\n    \"\"\"Check if the given number is a perfect square.\"\"\"\n    return n == math.isqrt(n)**2",
        "solution_func": "def g(x, y=4, z=5):\n    return x**2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g(n=5):\n    return str(n) + str(n)[::-1]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 304,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g(n=5):\n    return str(n) + str(n)[::-1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: list, n=10) -> bool:\n    \"\"\"Check if the given list contains a random number from 1 to 10.\"\"\"\n    return random.choice(arr) in range(1, n + 1)\n\ndef g(n=10):\n    return [random.randint(1, n) for _ in range(n)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 304,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(arr: list, n=10) -> bool:\n    \"\"\"Check if the given list contains a random number from 1 to 10.\"\"\"\n    return random.choice(arr) in range(1, n + 1)",
        "solution_func": "def g(n=10):\n    return [random.randint(1, n) for _ in range(n)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=28) -> bool:\n    \"\"\"Find two numbers in the array that add up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(arr=[3, 7, 2, 11, 5, 9]):\n    return arr\nassert f(g())\n",
        "emb": null,
        "idx_generation": 304,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=28) -> bool:\n    \"\"\"Find two numbers in the array that add up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(arr=[3, 7, 2, 11, 5, 9]):\n    return arr",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the array that add up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\ndef g(arr=[20, 30, 10, 15, 5, 25]):\n    return arr\nassert f(g())\n",
        "emb": null,
        "idx_generation": 304,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the array that add up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(arr=[20, 30, 10, 15, 5, 25]):\n    return arr",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=1000) -> bool:\n    \"\"\"Find four numbers in the array that add up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                for l in range(k+1, len(arr)):\n                    if arr[i] + arr[j] + arr[k] + arr[l] == target:\n                        return True\n    return False\ndef g(arr=[200, 300, 100, 150, 50, 250]):\n    return arr\nassert f(g())\n",
        "emb": null,
        "idx_generation": 304,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=1000) -> bool:\n    \"\"\"Find four numbers in the array that add up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                for l in range(k+1, len(arr)):\n                    if arr[i] + arr[j] + arr[k] + arr[l] == target:\n                        return True\n    return False",
        "solution_func": "def g(arr=[200, 300, 100, 150, 50, 250]):\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=42) -> bool:\n    \"\"\"Given a list of integers, find two numbers that sum up to a target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=42):\n    return [10, 32, 5, 17, 23, 7, 9, 13, 15, 20, 25]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 304,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=42) -> bool:\n    \"\"\"Given a list of integers, find two numbers that sum up to a target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=42):\n    return [10, 32, 5, 17, 23, 7, 9, 13, 15, 20, 25]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=10, subset_len=3) -> bool:\n    \"\"\"Find a subset of numbers from the list whose sum is equal to the target.\"\"\"\n    from itertools import combinations\n    for subset in combinations(lst, subset_len):\n        if sum(subset) == target:\n            return True\n    return False\ndef g(target=10, subset_len=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 305,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=10, subset_len=3) -> bool:\n    \"\"\"Find a subset of numbers from the list whose sum is equal to the target.\"\"\"\n    from itertools import combinations\n    for subset in combinations(lst, subset_len):\n        if sum(subset) == target:\n            return True\n    return False",
        "solution_func": "def g(target=10, subset_len=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='abc', position=0) -> bool:\n    \"\"\"Check if the substring is present at the specified position in the string.\"\"\"\n    return string.find(substr, position) == position\ndef g(substr='abc', position=0):\n    return \"abcdefg\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 305,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substr='abc', position=0) -> bool:\n    \"\"\"Check if the substring is present at the specified position in the string.\"\"\"\n    return string.find(substr, position) == position",
        "solution_func": "def g(substr='abc', position=0):\n    return \"abcdefg\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the matrix that sum up to the target.\"\"\"\n    for row in matrix:\n        for i in range(len(row)):\n            for j in range(i+1, len(row)):\n                if row[i] + row[j] == target_sum:\n                    return True\n    return False\ndef g(target_sum=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 305,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the matrix that sum up to the target.\"\"\"\n    for row in matrix:\n        for i in range(len(row)):\n            for j in range(i+1, len(row)):\n                if row[i] + row[j] == target_sum:\n                    return True\n    return False",
        "solution_func": "def g(target_sum=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, s=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']) -> bool:\n    \"\"\"Check if the string x consists of only lowercase alphabets in the list s\"\"\"\n    return all([c in s for c in x])\ndef g(s=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']):\n    return ''.join(s)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 305,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, s=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']) -> bool:\n    \"\"\"Check if the string x consists of only lowercase alphabets in the list s\"\"\"\n    return all([c in s for c in x])",
        "solution_func": "def g(s=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']):\n    return ''.join(s)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) -> bool:\n    \"\"\"Check if n is a prime number from the list of primes\"\"\"\n    return n in primes\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]):\n    return primes[0]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 305,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) -> bool:\n    \"\"\"Check if n is a prime number from the list of primes\"\"\"\n    return n in primes",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]):\n    return primes[0]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: str, y: str, z: str, a='apple', b='banana', c='cherry') -> bool:\n    \"\"\"Check if the combination of three strings is equal to 'applebananacherry'\"\"\"\n    return x + y + z == a + b + c\ndef g(a='apple', b='banana', c='cherry'):\n    return a + b + c\nassert f(g(), g(), g())\n",
        "emb": null,
        "idx_generation": 305,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, y: str, z: str, a='apple', b='banana', c='cherry') -> bool:\n    \"\"\"Check if the combination of three strings is equal to 'applebananacherry'\"\"\"\n    return x + y + z == a + b + c",
        "solution_func": "def g(a='apple', b='banana', c='cherry'):\n    return a + b + c",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(prime_factors: List[int], n=100, target=10) -> bool:\n    \"\"\"Check if the product of prime factors of n is equal to the target.\"\"\"\n    product = math.prod(prime_factors)\n    return product == target\n\ndef g(n=100):\n    factors = []\n    for i in range(2, n+1):\n        while n % i == 0:\n            factors.append(i)\n            n = n / i\n    return factors\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 305,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(prime_factors: List[int], n=100, target=10) -> bool:\n    \"\"\"Check if the product of prime factors of n is equal to the target.\"\"\"\n    product = math.prod(prime_factors)\n    return product == target",
        "solution_func": "def g(n=100):\n    factors = []\n    for i in range(2, n+1):\n        while n % i == 0:\n            factors.append(i)\n            n = n / i\n    return factors",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(numbers: List[int], target=50) -> bool:\n    \"\"\"Check if any two numbers in the list add up to the target.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g():\n    numbers = [random.randint(1, 25) for _ in range(10)]\n    return numbers\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 305,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(numbers: List[int], target=50) -> bool:\n    \"\"\"Check if any two numbers in the list add up to the target.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g():\n    numbers = [random.randint(1, 25) for _ in range(10)]\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(years: List[int], target=5) -> bool:\n    \"\"\"Check if the difference between the current year and any of the years in the list is equal to the target.\"\"\"\n    current_year = datetime.datetime.now().year\n    for year in years:\n        if abs(current_year - year) == target:\n            return True\n    return False\n\ndef g():\n    current_year = datetime.datetime.now().year\n    years = [current_year - i for i in range(10)]\n    return years\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 305,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(years: List[int], target=5) -> bool:\n    \"\"\"Check if the difference between the current year and any of the years in the list is equal to the target.\"\"\"\n    current_year = datetime.datetime.now().year\n    for year in years:\n        if abs(current_year - year) == target:\n            return True\n    return False",
        "solution_func": "def g():\n    current_year = datetime.datetime.now().year\n    years = [current_year - i for i in range(10)]\n    return years",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, m=1000000) -> bool:\n    \"\"\"Find a number n such that n! is divisible by m\"\"\"\n    return math.factorial(n) % m == 0\n\ndef g(m=1000000):\n    return m // 2\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 305,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, m=1000000) -> bool:\n    \"\"\"Find a number n such that n! is divisible by m\"\"\"\n    return math.factorial(n) % m == 0",
        "solution_func": "def g(m=1000000):\n    return m // 2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=16, max_elements=4) -> bool:\n    \"\"\"Find a combination of max_elements elements from the array such that their sum is equal to the target.\"\"\"\n    assert len(arr) >= max_elements\n    from itertools import combinations\n    for comb in combinations(arr, max_elements):\n        if sum(comb) == target:\n            return True\n    return False\ndef g(target=16, max_elements=4):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 306,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=16, max_elements=4) -> bool:\n    \"\"\"Find a combination of max_elements elements from the array such that their sum is equal to the target.\"\"\"\n    assert len(arr) >= max_elements\n    from itertools import combinations\n    for comb in combinations(arr, max_elements):\n        if sum(comb) == target:\n            return True\n    return False",
        "solution_func": "def g(target=16, max_elements=4):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a subset of numbers in the list that add up to the target value.\"\"\"\n    from itertools import combinations\n    for i in range(len(nums)):\n        for comb in combinations(nums, i):\n            if sum(comb) == target:\n                return True\n    return False\ndef g(target=100):\n    return [23, 7, 12, 45, 9, 55, 17]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 306,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a subset of numbers in the list that add up to the target value.\"\"\"\n    from itertools import combinations\n    for i in range(len(nums)):\n        for comb in combinations(nums, i):\n            if sum(comb) == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [23, 7, 12, 45, 9, 55, 17]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring=\"python\") -> bool:\n    \"\"\"Check if the substring appears in the given string.\"\"\"\n    return substring in string\ndef g(substring=\"python\"):\n    return \"I love python programming!\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 306,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring=\"python\") -> bool:\n    \"\"\"Check if the substring appears in the given string.\"\"\"\n    return substring in string",
        "solution_func": "def g(substring=\"python\"):\n    return \"I love python programming!\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, arr=[2, 3, 5, 7, 11]) -> bool:\n    \"\"\"Given an integer n and a list of prime numbers, check if n can be expressed as the sum of two prime numbers from the list.\"\"\"\n    primes = set(arr)\n    for i in primes:\n        if n - i in primes:\n            return True\n    return False\ndef g(arr=[2, 3, 5, 7, 11]):\n    primes = set(arr)\n    return sum(primes)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 306,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, arr=[2, 3, 5, 7, 11]) -> bool:\n    \"\"\"Given an integer n and a list of prime numbers, check if n can be expressed as the sum of two prime numbers from the list.\"\"\"\n    primes = set(arr)\n    for i in primes:\n        if n - i in primes:\n            return True\n    return False",
        "solution_func": "def g(arr=[2, 3, 5, 7, 11]):\n    primes = set(arr)\n    return sum(primes)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Given a string s and an integer n, check if there exists a substring of s with length n that contains only vowels (a, e, i, o, u).\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(s) - n + 1):\n        substring = s[i:i+n]\n        if all(char in vowels for char in substring):\n            return True\n    return False\ndef g(n=3):\n    return \"aeiou\" * (n // 5) + \"aeiou\"[:n % 5]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 306,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Given a string s and an integer n, check if there exists a substring of s with length n that contains only vowels (a, e, i, o, u).\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(s) - n + 1):\n        substring = s[i:i+n]\n        if all(char in vowels for char in substring):\n            return True\n    return False",
        "solution_func": "def g(n=3):\n    return \"aeiou\" * (n // 5) + \"aeiou\"[:n % 5]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Given an integer n and a list of numbers, check if there exists a pair of numbers in the list whose sum is equal to n.\"\"\"\n    nums = set(arr)\n    for i in nums:\n        if n - i in nums:\n            return True\n    return False\ndef g(arr=[1, 2, 3, 4, 5]):\n    nums = set(arr)\n    return sum(nums)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 306,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Given an integer n and a list of numbers, check if there exists a pair of numbers in the list whose sum is equal to n.\"\"\"\n    nums = set(arr)\n    for i in nums:\n        if n - i in nums:\n            return True\n    return False",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5]):\n    nums = set(arr)\n    return sum(nums)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the sum of the first n elements in lst is equal to n*(n+1)/2\"\"\"\n    return sum(lst[:n]) == n*(n+1)//2\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return len(lst)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 306,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the sum of the first n elements in lst is equal to n*(n+1)/2\"\"\"\n    return sum(lst[:n]) == n*(n+1)//2",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    return len(lst)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in lst that sum up to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 306,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in lst that sum up to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the product of the first n elements in lst is equal to the factorial of n\"\"\"\n    import math\n    return math.prod(lst[:n]) == math.factorial(n)\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return len(lst)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 306,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the product of the first n elements in lst is equal to the factorial of n\"\"\"\n    import math\n    return math.prod(lst[:n]) == math.factorial(n)",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    return len(lst)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(a: int, b: int, c: int, n=100) -> bool:\n    \"\"\"Find three integers, (x, y, z), such that x^a + y^b = z^c and z > n\"\"\"\n    return any((x ** a + y ** b == z ** c) for x in range(1, n+1) for y in range(1, n+1) for z in range(n+1, 2*n+1))\ndef g(n=100):\n    return n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 306,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(a: int, b: int, c: int, n=100) -> bool:\n    \"\"\"Find three integers, (x, y, z), such that x^a + y^b = z^c and z > n\"\"\"\n    return any((x ** a + y ** b == z ** c) for x in range(1, n+1) for y in range(1, n+1) for z in range(n+1, 2*n+1))",
        "solution_func": "def g(n=100):\n    return n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find two numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 9]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 307,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num_list: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find two numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='world') -> bool:\n    \"\"\"Check if a given substring is present in a string.\"\"\"\n    return substr in s\ndef g(substr='world'):\n    return \"Hello, world!\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 307,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr='world') -> bool:\n    \"\"\"Check if a given substring is present in a string.\"\"\"\n    return substr in s",
        "solution_func": "def g(substr='world'):\n    return \"Hello, world!\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_row=1, target_col=1, target_value=5) -> bool:\n    \"\"\"Check if a given value is present at the specified row and column in a matrix.\"\"\"\n    return matrix[target_row][target_col] == target_value\ndef g(target_row=1, target_col=1, target_value=5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 307,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_row=1, target_col=1, target_value=5) -> bool:\n    \"\"\"Check if a given value is present at the specified row and column in a matrix.\"\"\"\n    return matrix[target_row][target_col] == target_value",
        "solution_func": "def g(target_row=1, target_col=1, target_value=5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if the given string is equal to the target string\"\"\"\n    return s == target\ndef g(target='hello'):\n    return target\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 307,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if the given string is equal to the target string\"\"\"\n    return s == target",
        "solution_func": "def g(target='hello'):\n    return target",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if the given number is prime\"\"\"\n    return n in primes\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return primes[0]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 307,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if the given number is prime\"\"\"\n    return n in primes",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return primes[0]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='world') -> bool:\n    \"\"\"Check if the given substring exists in the string\"\"\"\n    return substring in s\ndef g(substring='world'):\n    return \"Hello, \" + substring + \"!\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 307,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='world') -> bool:\n    \"\"\"Check if the given substring exists in the string\"\"\"\n    return substring in s",
        "solution_func": "def g(substring='world'):\n    return \"Hello, \" + substring + \"!\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(t: int, s=5) -> bool:\n    \"\"\"Given an integer t, determine if it is a prime number.\nSample Input:\nt = 7\nSample Output:\nTrue\"\"\"\n    if t < 2:\n        return False\n    for i in range(2, int(t**0.5) + 1):\n        if t % i == 0:\n            return False\n    return True\ndef g(s=5):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return random.choice(primes)\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 307,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(t: int, s=5) -> bool:\n    \"\"\"Given an integer t, determine if it is a prime number.\nSample Input:\nt = 7\nSample Output:\nTrue\"\"\"\n    if t < 2:\n        return False\n    for i in range(2, int(t**0.5) + 1):\n        if t % i == 0:\n            return False\n    return True",
        "solution_func": "def g(s=5):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return random.choice(primes)",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(t: str, s='football', target='fbl') -> bool:\n    \"\"\"Given a target string and a source string, find if the source string contains all the characters of the target string in order.\nSample Input:\nt = \"fbl\"\ns = \"football\"\nSample Output:\nTrue\"\"\"\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return True\ndef g(s='football', target='fbl'):\n    return ''.join([c for c in s if c in target])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 307,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(t: str, s='football', target='fbl') -> bool:\n    \"\"\"Given a target string and a source string, find if the source string contains all the characters of the target string in order.\nSample Input:\nt = \"fbl\"\ns = \"football\"\nSample Output:\nTrue\"\"\"\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return True",
        "solution_func": "def g(s='football', target='fbl'):\n    return ''.join([c for c in s if c in target])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(t: str, s='abcdefghij', target=4) -> bool:\n    \"\"\"Given a string consisting of lowercase letters, find any longest substring containing no more than n distinct characters.\nSample Input:\nt = \"abcdefghij\"\nSample Output:\n\"abcd\" or \"bcde\" or \"cdef\" or \"defg\" or \"efgh\" or \"fghi\" or \"ghij\" \"\"\"\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all((t[i] != t[i + 1] for i in range(len(t) - 1)))\ndef g(s='abcdefghij', target=4):\n    return s[:target]\nassert f(g())",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 307,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(t: str, s='abcdefghij', target=4) -> bool:\n    \"\"\"Given a string consisting of lowercase letters, find any longest substring containing no more than n distinct characters.\nSample Input:\nt = \"abcdefghij\"\nSample Output:\n\"abcd\" or \"bcde\" or \"cdef\" or \"defg\" or \"efgh\" or \"fghi\" or \"ghij\" \"\"\"\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all((t[i] != t[i + 1] for i in range(len(t) - 1)))",
        "solution_func": "def g(s='abcdefghij', target=4):\n    return s[:target]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists two numbers in the list such that their sum is equal to the target.\"\"\"\n    return any(((nums[i] + nums[j]) == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 307,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists two numbers in the list such that their sum is equal to the target.\"\"\"\n    return any(((nums[i] + nums[j]) == target for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=6) -> bool:\n    \"\"\"Given a 2D array of integers and a target number, find any row that contains at least two numbers that add up to the target.\nSample Input:\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ntarget = 6\nSample Output:\n[1, 2, 3]\"\"\"\n    for row in arr:\n        count = 0\n        for i in range(len(row)-1):\n            for j in range(i+1, len(row)):\n                if row[i] + row[j] == target:\n                    count += 1\n        if count >= 2:\n            return True\n    return False\n\ndef g(target=6):\n    return np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 308,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=6) -> bool:\n    \"\"\"Given a 2D array of integers and a target number, find any row that contains at least two numbers that add up to the target.\nSample Input:\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ntarget = 6\nSample Output:\n[1, 2, 3]\"\"\"\n    for row in arr:\n        count = 0\n        for i in range(len(row)-1):\n            for j in range(i+1, len(row)):\n                if row[i] + row[j] == target:\n                    count += 1\n        if count >= 2:\n            return True\n    return False",
        "solution_func": "def g(target=6):\n    return np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"Given a string consisting of lowercase English letters, find any substring of length n that contains all vowels (a, e, i, o, u) in any order.\nSample Input:\ns = \"aeiouaxxxeiaa\"\nn = 3\nSample Output:\n\"eia\" \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i in range(len(s)-n+1):\n        substring = s[i:i+n]\n        if all((v in substring for v in vowels)):\n            return True\n    return False\n\ndef g(n=2):\n    return \"aeiouaxxxeiaa\"\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 308,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"Given a string consisting of lowercase English letters, find any substring of length n that contains all vowels (a, e, i, o, u) in any order.\nSample Input:\ns = \"aeiouaxxxeiaa\"\nn = 3\nSample Output:\n\"eia\" \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i in range(len(s)-n+1):\n        substring = s[i:i+n]\n        if all((v in substring for v in vowels)):\n            return True\n    return False",
        "solution_func": "def g(n=2):\n    return \"aeiouaxxxeiaa\"",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[List[int]], target_sum=0) -> bool:\n    \"\"\"Given a 2D array of integers, find any two rows whose sums are equal to the target sum.\nSample Input:\narr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\ntarget_sum = 15\nSample Output:\n[[1, 2, 3], [4, 5, 6]]\"\"\"\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if sum(arr[i]) == sum(arr[j]) == target_sum:\n                return True\n    return False\n\ndef g(target_sum=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 308,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[List[int]], target_sum=0) -> bool:\n    \"\"\"Given a 2D array of integers, find any two rows whose sums are equal to the target sum.\nSample Input:\narr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\ntarget_sum = 15\nSample Output:\n[[1, 2, 3], [4, 5, 6]]\"\"\"\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if sum(arr[i]) == sum(arr[j]) == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m: int, target=12) -> bool:\n    \"\"\"Given two numbers n and m, find the sum of the squares of their absolute differences that equals the target.\nSample Input:\nn = 5\nm = 3\ntarget = 34\nSample Output:\nTrue\"\"\"\n    return (abs(n-m)**2) + (abs(m-n)**2) == target\n\ndef g(n=5, m=3, target=12):\n    return target + (abs(n-m)**2) + (abs(m-n)**2)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 308,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m: int, target=12) -> bool:\n    \"\"\"Given two numbers n and m, find the sum of the squares of their absolute differences that equals the target.\nSample Input:\nn = 5\nm = 3\ntarget = 34\nSample Output:\nTrue\"\"\"\n    return (abs(n-m)**2) + (abs(m-n)**2) == target",
        "solution_func": "def g(n=5, m=3, target=12):\n    return target + (abs(n-m)**2) + (abs(m-n)**2)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m: int, target=11) -> bool:\n    \"\"\"Given two numbers n and m, find the difference between their squares that equals the target.\nSample Input:\nn = 6\nm = 2\ntarget = 32\nSample Output:\nTrue\"\"\"\n    return (n**2) - (m**2) == target\n\ndef g(n=6, m=2, target=11):\n    return target + (n**2) - (m**2)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 308,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m: int, target=11) -> bool:\n    \"\"\"Given two numbers n and m, find the difference between their squares that equals the target.\nSample Input:\nn = 6\nm = 2\ntarget = 32\nSample Output:\nTrue\"\"\"\n    return (n**2) - (m**2) == target",
        "solution_func": "def g(n=6, m=2, target=11):\n    return target + (n**2) - (m**2)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target=\"racecar\") -> bool:\n    \"\"\"Given a string, determine if it is a palindrome and if it matches the target string.\nSample Input:\nstring = \"radar\"\ntarget = \"racecar\"\nSample Output:\nFalse\"\"\"\n    return string == string[::-1] and string == target\n\ndef g(string=\"radar\", target=\"racecar\"):\n    return target\n\nassert f(g())",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 308,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, target=\"racecar\") -> bool:\n    \"\"\"Given a string, determine if it is a palindrome and if it matches the target string.\nSample Input:\nstring = \"radar\"\ntarget = \"racecar\"\nSample Output:\nFalse\"\"\"\n    return string == string[::-1] and string == target",
        "solution_func": "def g(string=\"radar\", target=\"racecar\"):\n    return target",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find two numbers such that they add up to a target value.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [5, target-5]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 308,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find two numbers such that they add up to a target value.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=10):\n    return [5, target-5]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Given a matrix, find a row and column such that the sum of the elements in the row and column are equal to the target value.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if sum(matrix[i]) + sum(row[j] for row in matrix) == target:\n                return True\n    return False\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, target-9], [6, 7, 8]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 308,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Given a matrix, find a row and column such that the sum of the elements in the row and column are equal to the target value.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if sum(matrix[i]) + sum(row[j] for row in matrix) == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, target-9], [6, 7, 8]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target_char='a') -> bool:\n    \"\"\"Check if a given character is present in the given string.\"\"\"\n    return target_char in string\ndef g(target_char='a'):\n    return \"Hello, World!\" + target_char\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 308,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, target_char='a') -> bool:\n    \"\"\"Check if a given character is present in the given string.\"\"\"\n    return target_char in string",
        "solution_func": "def g(target_char='a'):\n    return \"Hello, World!\" + target_char",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=10) -> bool:\n    \"\"\"Check if the sum of the elements in the given array is equal to the target value.\"\"\"\n    return np.sum(arr) == target\n\ndef g(target=10):\n    return np.array([1, 2, 3, 4])\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 308,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=10) -> bool:\n    \"\"\"Check if the sum of the elements in the given array is equal to the target value.\"\"\"\n    return np.sum(arr) == target",
        "solution_func": "def g(target=10):\n    return np.array([1, 2, 3, 4])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=7, b=2) -> bool:\n    \"\"\"Check if the remainder of a divided by b is equal to x\"\"\"\n    return a % b == x\ndef g(a=7, b=2):\n    return a % b\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 309,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=7, b=2) -> bool:\n    \"\"\"Check if the remainder of a divided by b is equal to x\"\"\"\n    return a % b == x",
        "solution_func": "def g(a=7, b=2):\n    return a % b",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=2) -> bool:\n    \"\"\"Check if x raised to the power of n is equal to the factorial of n\"\"\"\n    return math.pow(x, n) == math.factorial(n)\ndef g(n=2):\n    return n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 309,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=2) -> bool:\n    \"\"\"Check if x raised to the power of n is equal to the factorial of n\"\"\"\n    return math.pow(x, n) == math.factorial(n)",
        "solution_func": "def g(n=2):\n    return n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the concatenation of s and the string representation of n is a palindrome\"\"\"\n    return (s + str(n)) == (s + str(n))[::-1]\ndef g(n=3):\n    return str(n)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 309,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the concatenation of s and the string representation of n is a palindrome\"\"\"\n    return (s + str(n)) == (s + str(n))[::-1]",
        "solution_func": "def g(n=3):\n    return str(n)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Determine if there exists a pair of distinct integers in the list that sum up to the target.\"\"\"\n    return any((target - x) in lst for x in lst)\ndef g(target=0):\n    return [x for x in range(target)]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 309,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Determine if there exists a pair of distinct integers in the list that sum up to the target.\"\"\"\n    return any((target - x) in lst for x in lst)",
        "solution_func": "def g(target=0):\n    return [x for x in range(target)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Find all pairs of distinct integers in the list that sum up to the target.\"\"\"\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                pairs.append((arr[i], arr[j]))\n    return pairs\ndef g(target=0):\n    return [x for x in range(target)]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 309,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Find all pairs of distinct integers in the list that sum up to the target.\"\"\"\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                pairs.append((arr[i], arr[j]))\n    return pairs",
        "solution_func": "def g(target=0):\n    return [x for x in range(target)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=0) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g(n=0):\n    return str(n)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 309,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=0) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g(n=0):\n    return str(n)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[str], c=\"apple\", l=5, e=10) -> bool:\n    \"\"\"Create a list that contains a specific word and its length is within a given range.\"\"\"\n    return c in x and l <= len(x) <= e\ndef g(c=\"apple\", l=5, e=10):\n    return [c] * l\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 309,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[str], c=\"apple\", l=5, e=10) -> bool:\n    \"\"\"Create a list that contains a specific word and its length is within a given range.\"\"\"\n    return c in x and l <= len(x) <= e",
        "solution_func": "def g(c=\"apple\", l=5, e=10):\n    return [c] * l",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, s=\"hello\", n=3) -> bool:\n    \"\"\"Concatenate a string a certain number of times and check if it starts with a specific substring.\"\"\"\n    return x.startswith(s) and x == s * n\ndef g(s=\"hello\", n=3):\n    return s * n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 309,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, s=\"hello\", n=3) -> bool:\n    \"\"\"Concatenate a string a certain number of times and check if it starts with a specific substring.\"\"\"\n    return x.startswith(s) and x == s * n",
        "solution_func": "def g(s=\"hello\", n=3):\n    return s * n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], a=10, b=20, c=30) -> bool:\n    \"\"\"Create a list of numbers that are multiples of a, b, and c.\"\"\"\n    return all([num % a == 0 and num % b == 0 and num % c == 0 for num in x])\ndef g(a=10, b=20, c=30):\n    return [num for num in range(a * b * c + 1) if num % a == 0 and num % b == 0 and num % c == 0]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 309,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], a=10, b=20, c=30) -> bool:\n    \"\"\"Create a list of numbers that are multiples of a, b, and c.\"\"\"\n    return all([num % a == 0 and num % b == 0 and num % c == 0 for num in x])",
        "solution_func": "def g(a=10, b=20, c=30):\n    return [num for num in range(a * b * c + 1) if num % a == 0 and num % b == 0 and num % c == 0]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], a=50, b=100, target=75) -> bool:\n    \"\"\"Find a pair of numbers in a list that sum up to a target number\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(a=50, b=100, target=75):\n    return [n for n in range(a, b+1)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 309,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], a=50, b=100, target=75) -> bool:\n    \"\"\"Find a pair of numbers in a list that sum up to a target number\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(a=50, b=100, target=75):\n    return [n for n in range(a, b+1)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=4, b=5) -> bool:\n    \"\"\"Check if n is divisible by both a and b\"\"\"\n    return n % a == 0 and n % b == 0\n\ndef g(a=4, b=5):\n    return a * b\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 310,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=4, b=5) -> bool:\n    \"\"\"Check if n is divisible by both a and b\"\"\"\n    return n % a == 0 and n % b == 0",
        "solution_func": "def g(a=4, b=5):\n    return a * b",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], n=5) -> bool:\n    \"\"\"Check if n is in the list\"\"\"\n    return n in lst\n\ndef g(n=5):\n    lst = [random.randint(1, 10) for _ in range(10)]\n    return lst\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 310,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(lst: List[int], n=5) -> bool:\n    \"\"\"Check if n is in the list\"\"\"\n    return n in lst",
        "solution_func": "def g(n=5):\n    lst = [random.randint(1, 10) for _ in range(10)]\n    return lst",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the length of s is greater than n\"\"\"\n    return len(s) > n\n\ndef g(n=3):\n    return \"abcd\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 310,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the length of s is greater than n\"\"\"\n    return len(s) > n",
        "solution_func": "def g(n=3):\n    return \"abcd\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 7, 10, 14, 21], target=42) -> bool:\n    \"\"\"Check if there exists a combination of numbers from the list that sums up to the target value.\"\"\"\n    return any(sum(c) == target for r in range(len(nums) + 1) for c in combinations(nums, r))\ndef g(nums=[2, 7, 10, 14, 21], target=42):\n    return target\nassert f(g())\n",
        "emb": null,
        "idx_generation": 310,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[2, 7, 10, 14, 21], target=42) -> bool:\n    \"\"\"Check if there exists a combination of numbers from the list that sums up to the target value.\"\"\"\n    return any(sum(c) == target for r in range(len(nums) + 1) for c in combinations(nums, r))",
        "solution_func": "def g(nums=[2, 7, 10, 14, 21], target=42):\n    return target",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, min_length=5, max_length=10) -> bool:\n    \"\"\"Check if the string is a valid password, which satisfies the length requirements and contains at least one uppercase letter.\"\"\"\n    return len(s) >= min_length and len(s) <= max_length and any(c.isupper() for c in s)\ndef g(min_length=5, max_length=10):\n    import random\n    import string\n    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(random.randint(min_length, max_length)))\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 310,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(s: str, min_length=5, max_length=10) -> bool:\n    \"\"\"Check if the string is a valid password, which satisfies the length requirements and contains at least one uppercase letter.\"\"\"\n    return len(s) >= min_length and len(s) <= max_length and any(c.isupper() for c in s)",
        "solution_func": "def g(min_length=5, max_length=10):\n    import random\n    import string\n    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(random.randint(min_length, max_length)))",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[15, 20, 25, 30, 35], target=100) -> bool:\n    \"\"\"Check if there exists a combination of numbers from the list whose product is equal to the target value.\"\"\"\n    return any(reduce(lambda x, y: x * y, c) == target for r in range(len(nums) + 1) for c in combinations(nums, r))\ndef g(nums=[15, 20, 25, 30, 35], target=100):\n    return target\nassert f(g())\n",
        "emb": null,
        "idx_generation": 310,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[15, 20, 25, 30, 35], target=100) -> bool:\n    \"\"\"Check if there exists a combination of numbers from the list whose product is equal to the target value.\"\"\"\n    return any(reduce(lambda x, y: x * y, c) == target for r in range(len(nums) + 1) for c in combinations(nums, r))",
        "solution_func": "def g(nums=[15, 20, 25, 30, 35], target=100):\n    return target",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(result: bool, x=10, y=5) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to the product of those numbers\"\"\"\n    return x + y == x * y\ndef g(x=10, y=5):\n    return x * y\nassert f(g())\n",
        "emb": null,
        "idx_generation": 310,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(result: bool, x=10, y=5) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to the product of those numbers\"\"\"\n    return x + y == x * y",
        "solution_func": "def g(x=10, y=5):\n    return x * y",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(result: bool, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=30) -> bool:\n    \"\"\"Find three numbers in a list that sum up to a target value\"\"\"\n    from itertools import combinations\n    for combination in combinations(nums, 3):\n        if sum(combination) == target:\n            return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=30):\n    from itertools import combinations\n    for combination in combinations(nums, 3):\n        if sum(combination) == target:\n            return combination\n    return []\nassert f(g())\n",
        "emb": null,
        "idx_generation": 310,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(result: bool, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=30) -> bool:\n    \"\"\"Find three numbers in a list that sum up to a target value\"\"\"\n    from itertools import combinations\n    for combination in combinations(nums, 3):\n        if sum(combination) == target:\n            return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=30):\n    from itertools import combinations\n    for combination in combinations(nums, 3):\n        if sum(combination) == target:\n            return combination\n    return []",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(result: bool, word=\"python\", pattern=\"***\") -> bool:\n    \"\"\"Check if a given pattern matches the word, where '*' represents any character\"\"\"\n    if len(word) != len(pattern):\n        return False\n    for w, p in zip(word, pattern):\n        if p != '*' and w != p:\n            return False\n    return True\ndef g(word=\"python\", pattern=\"***\"):\n    return pattern.replace('*', word[0])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 310,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(result: bool, word=\"python\", pattern=\"***\") -> bool:\n    \"\"\"Check if a given pattern matches the word, where '*' represents any character\"\"\"\n    if len(word) != len(pattern):\n        return False\n    for w, p in zip(word, pattern):\n        if p != '*' and w != p:\n            return False\n    return True",
        "solution_func": "def g(word=\"python\", pattern=\"***\"):\n    return pattern.replace('*', word[0])",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(p: List[int], edges=[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]) -> bool:\n    \"\"\"Determine if there exists a path from node 1 to node 6 in the given directed graph\"\"\"\n    return p[0] == 1 and p[-1] == 6 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges=[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]):\n    paths = {1: [1]}\n    for (i, j) in edges:\n        if i in paths and j not in paths:\n            paths[j] = paths[i] + [j]\n    return paths.get(6)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 310,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(p: List[int], edges=[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]) -> bool:\n    \"\"\"Determine if there exists a path from node 1 to node 6 in the given directed graph\"\"\"\n    return p[0] == 1 and p[-1] == 6 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])",
        "solution_func": "def g(edges=[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]):\n    paths = {1: [1]}\n    for (i, j) in edges:\n        if i in paths and j not in paths:\n            paths[j] = paths[i] + [j]\n    return paths.get(6)",
        "map_ix": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Check if a number is present in a list.\"\"\"\n    return n in arr\n\ndef g(arr: List[int]):\n    n = random.choice(arr)\n    return n, arr\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 311,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Check if a number is present in a list.\"\"\"\n    return n in arr",
        "solution_func": "def g(arr: List[int]):\n    n = random.choice(arr)\n    return n, arr",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, char: str) -> bool:\n    \"\"\"Check if a string starts with a specific character.\"\"\"\n    return s.startswith(char)\n\ndef g(char: str):\n    s = char + \"some random string\"\n    return s, char\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 311,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(s: str, char: str) -> bool:\n    \"\"\"Check if a string starts with a specific character.\"\"\"\n    return s.startswith(char)",
        "solution_func": "def g(char: str):\n    s = char + \"some random string\"\n    return s, char",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, m: int, p: int) -> bool:\n    \"\"\"Check if the square root of a number is divisible by another number.\"\"\"\n    return sqrt(n) % p == 0\n\ndef g(n: int, p: int):\n    m = n * p\n    return n, m, p\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 311,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, m: int, p: int) -> bool:\n    \"\"\"Check if the square root of a number is divisible by another number.\"\"\"\n    return sqrt(n) % p == 0",
        "solution_func": "def g(n: int, p: int):\n    m = n * p\n    return n, m, p",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(angle: float, sides=[5, 7]) -> bool:\n    \"\"\"Find the length of the missing side in a right triangle, given an angle in degrees and the lengths of two sides\"\"\"\n    (side1, side2) = sides\n    angle_radians = math.radians(angle)\n    return math.sqrt(side1**2 + side2**2 - 2*side1*side2*math.cos(angle_radians))\n    \ndef g(sides=[5, 7]):\n    (side1, side2) = sides\n    return math.degrees(math.acos((side1**2 + side2**2 - g()**2) / (2*side1*side2)))\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 311,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(angle: float, sides=[5, 7]) -> bool:\n    \"\"\"Find the length of the missing side in a right triangle, given an angle in degrees and the lengths of two sides\"\"\"\n    (side1, side2) = sides\n    angle_radians = math.radians(angle)\n    return math.sqrt(side1**2 + side2**2 - 2*side1*side2*math.cos(angle_radians))",
        "solution_func": "def g(sides=[5, 7]):\n    (side1, side2) = sides\n    return math.degrees(math.acos((side1**2 + side2**2 - g()**2) / (2*side1*side2)))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, numbers=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a number n is present in a given list of numbers\"\"\"\n    return n in numbers\n\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return random.choice(numbers)\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 311,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, numbers=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a number n is present in a given list of numbers\"\"\"\n    return n in numbers",
        "solution_func": "def g(numbers=[1, 2, 3, 4, 5]):\n    return random.choice(numbers)",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"Check if a substring is present in a given string\"\"\"\n    return substr in string\n\ndef g(substr='python'):\n    return f\"This is a string that contains the word {substr}\"\n\nassert f(g())",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 311,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"Check if a substring is present in a given string\"\"\"\n    return substr in string",
        "solution_func": "def g(substr='python'):\n    return f\"This is a string that contains the word {substr}\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: List[int], n=6) -> bool:\n    \"\"\"Find a list of n numbers that contains the same number of even and odd numbers\"\"\"\n    return lst.count(even) == lst.count(odd) and len(lst) >= n\ndef g(n=6):\n    return [i for i in range(1, 2 * n + 1) if i % 2 == 0] + [i for i in range(1, 2 * n + 1) if i % 2 != 0]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 311,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], n=6) -> bool:\n    \"\"\"Find a list of n numbers that contains the same number of even and odd numbers\"\"\"\n    return lst.count(even) == lst.count(odd) and len(lst) >= n",
        "solution_func": "def g(n=6):\n    return [i for i in range(1, 2 * n + 1) if i % 2 == 0] + [i for i in range(1, 2 * n + 1) if i % 2 != 0]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='python', count=5) -> bool:\n    \"\"\"Find a string that contains count number of substrings\"\"\"\n    return s.count(substr) == count\ndef g(substr='python', count=5):\n    return substr * count\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 311,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr='python', count=5) -> bool:\n    \"\"\"Find a string that contains count number of substrings\"\"\"\n    return s.count(substr) == count",
        "solution_func": "def g(substr='python', count=5):\n    return substr * count",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n=10) -> bool:\n    \"\"\"Find a list of n consecutive numbers\"\"\"\n    return len(lst) == n and max(lst) - min(lst) == n - 1\ndef g(n=10):\n    return [i for i in range(1, n + 1)]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 311,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], n=10) -> bool:\n    \"\"\"Find a list of n consecutive numbers\"\"\"\n    return len(lst) == n and max(lst) - min(lst) == n - 1",
        "solution_func": "def g(n=10):\n    return [i for i in range(1, n + 1)]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, target=25) -> bool:\n    \"\"\"Find two numbers in the given list that add up to the target number.\"\"\"\n    nums = [4, 8, 12, 16, 20]\n    return any([True for i in range(len(nums)) for j in range(i+1, len(nums)) if nums[i] + nums[j] == target])\ndef g(target=25):\n    nums = [4, 8, 12, 16, 20]\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 311,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target=25) -> bool:\n    \"\"\"Find two numbers in the given list that add up to the target number.\"\"\"\n    nums = [4, 8, 12, 16, 20]\n    return any([True for i in range(len(nums)) for j in range(i+1, len(nums)) if nums[i] + nums[j] == target])",
        "solution_func": "def g(target=25):\n    nums = [4, 8, 12, 16, 20]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array that sums up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 312,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array that sums up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the number n is present in the list lst\"\"\"\n    return n in lst\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return 3\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 312,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the number n is present in the list lst\"\"\"\n    return n in lst",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    return 3",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, r: float, center=(0, 0)) -> bool:\n    \"\"\"Check if the point (x, y) lies inside the circle with radius r and center at the given center point\"\"\"\n    distance = math.sqrt((x - center[0])**2 + (y - center[1])**2)\n    return distance < r\n\ndef g(center=(0, 0)):\n    return 1.5, 2.5, 3.0\n\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 312,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, r: float, center=(0, 0)) -> bool:\n    \"\"\"Check if the point (x, y) lies inside the circle with radius r and center at the given center point\"\"\"\n    distance = math.sqrt((x - center[0])**2 + (y - center[1])**2)\n    return distance < r",
        "solution_func": "def g(center=(0, 0)):\n    return 1.5, 2.5, 3.0",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(x: List[int], n=10, s=100) -> bool:\n    \"\"\"Find a list of n distinct integers that sum up to s and the product of all elements is greater than 1000\"\"\"\n    return len(x) == n and sum(x) == s and (len(set(x)) == n) and (math.prod(x) > 1000)\ndef g(n=10, s=100):\n    x = [i for i in range(1, n)]\n    x.append(s - sum(x))\n    return x\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 312,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\ndef f(x: List[int], n=10, s=100) -> bool:\n    \"\"\"Find a list of n distinct integers that sum up to s and the product of all elements is greater than 1000\"\"\"\n    return len(x) == n and sum(x) == s and (len(set(x)) == n) and (math.prod(x) > 1000)",
        "solution_func": "def g(n=10, s=100):\n    x = [i for i in range(1, n)]\n    x.append(s - sum(x))\n    return x",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: List[int], n=6, s=30) -> bool:\n    \"\"\"Find a list of n integers that sum up to s and the difference between the maximum and minimum elements is 10\"\"\"\n    return len(x) == n and sum(x) == s and (max(x) - min(x) == 10)\ndef g(n=6, s=30):\n    x = [i for i in range(1, n-1)]\n    x.append(s - sum(x))\n    x.append(min(x) + 10)\n    return x\nassert f(g())\n",
        "emb": null,
        "idx_generation": 312,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=6, s=30) -> bool:\n    \"\"\"Find a list of n integers that sum up to s and the difference between the maximum and minimum elements is 10\"\"\"\n    return len(x) == n and sum(x) == s and (max(x) - min(x) == 10)",
        "solution_func": "def g(n=6, s=30):\n    x = [i for i in range(1, n-1)]\n    x.append(s - sum(x))\n    x.append(min(x) + 10)\n    return x",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\ndef f(x: List[int], n=8, s=100) -> bool:\n    \"\"\"Find a list of n distinct integers that sum up to s and the sum of the squares of all elements is a perfect square\"\"\"\n    return len(x) == n and sum(x) == s and (len(set(x)) == n) and (math.isqrt(sum([i**2 for i in x])))\ndef g(n=8, s=100):\n    x = [i for i in range(1, n - 1)]\n    x.append(s - sum(x))\n    x.append(math.isqrt(sum([i**2 for i in x])))\n    return x\nassert f(g())\n",
        "emb": null,
        "idx_generation": 312,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\ndef f(x: List[int], n=8, s=100) -> bool:\n    \"\"\"Find a list of n distinct integers that sum up to s and the sum of the squares of all elements is a perfect square\"\"\"\n    return len(x) == n and sum(x) == s and (len(set(x)) == n) and (math.isqrt(sum([i**2 for i in x])))",
        "solution_func": "def g(n=8, s=100):\n    x = [i for i in range(1, n - 1)]\n    x.append(s - sum(x))\n    x.append(math.isqrt(sum([i**2 for i in x])))\n    return x",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    assert len(nums) >= 2\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=16):\n    return list(range(target-10, target))\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 312,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    assert len(nums) >= 2\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=16):\n    return list(range(target-10, target))",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the given matrix is a magic square of order n.\"\"\"\n    assert len(matrix) == n and all(len(row) == n for row in matrix)\n    target_sum = n * (n**2 + 1) // 2\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag_sum = sum(matrix[i][i] for i in range(n))\n    anti_diag_sum = sum(matrix[i][n-i-1] for i in range(n))\n    return all(row_sum == target_sum for row_sum in row_sums) and \\\n        all(col_sum == target_sum for col_sum in col_sums) and \\\n        diag_sum == target_sum and anti_diag_sum == target_sum\ndef g(n=3):\n    return [[(i*n + j + 1) for j in range(n)] for i in range(n)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 312,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the given matrix is a magic square of order n.\"\"\"\n    assert len(matrix) == n and all(len(row) == n for row in matrix)\n    target_sum = n * (n**2 + 1) // 2\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag_sum = sum(matrix[i][i] for i in range(n))\n    anti_diag_sum = sum(matrix[i][n-i-1] for i in range(n))\n    return all(row_sum == target_sum for row_sum in row_sums) and \\\n        all(col_sum == target_sum for col_sum in col_sums) and \\\n        diag_sum == target_sum and anti_diag_sum == target_sum",
        "solution_func": "def g(n=3):\n    return [[(i*n + j + 1) for j in range(n)] for i in range(n)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exist three numbers in the list that add up to the target value.\"\"\"\n    assert len(nums) >= 3\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(target=20):\n    return list(range(target-10, target))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 312,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exist three numbers in the list that add up to the target value.\"\"\"\n    assert len(nums) >= 3\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))",
        "solution_func": "def g(target=20):\n    return list(range(target-10, target))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 312,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=5) -> bool:\n    \"\"\"Check if the sum of the elements in a 2D array is equal to the target value.\"\"\"\n    return np.sum(arr) == target\n\ndef g(target=5):\n    return np.zeros((2, 3)) + target\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 313,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=5) -> bool:\n    \"\"\"Check if the sum of the elements in a 2D array is equal to the target value.\"\"\"\n    return np.sum(arr) == target",
        "solution_func": "def g(target=5):\n    return np.zeros((2, 3)) + target",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, year=2022) -> bool:\n    \"\"\"Check if a given date is in the future compared to the year value.\"\"\"\n    return dt.year > year\n\ndef g(year=2022):\n    return datetime.datetime(year + 1, 1, 1)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 313,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, year=2022) -> bool:\n    \"\"\"Check if a given date is in the future compared to the year value.\"\"\"\n    return dt.year > year",
        "solution_func": "def g(year=2022):\n    return datetime.datetime(year + 1, 1, 1)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(num: int, seed=42) -> bool:\n    \"\"\"Check if a given number is divisible by a randomly generated number.\"\"\"\n    random.seed(seed)\n    divisor = random.randint(1, 10)\n    return num % divisor == 0\n\ndef g(seed=42):\n    random.seed(seed)\n    return random.randint(1, 100)\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 313,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(num: int, seed=42) -> bool:\n    \"\"\"Check if a given number is divisible by a randomly generated number.\"\"\"\n    random.seed(seed)\n    divisor = random.randint(1, 10)\n    return num % divisor == 0",
        "solution_func": "def g(seed=42):\n    random.seed(seed)\n    return random.randint(1, 100)",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, day_of_week='Monday') -> bool:\n    \"\"\"Check if the given date falls on a specific day of the week\"\"\"\n    d = datetime.datetime.strptime(date, '%Y-%m-%d')\n    return d.strftime('%A') == day_of_week\n\ndef g(day_of_week='Monday'):\n    today = datetime.datetime.now()\n    days_ahead = (7 - today.weekday() + datetime.datetime.strptime(day_of_week, '%A').weekday()) % 7\n    target_date = today + datetime.timedelta(days=days_ahead)\n    return target_date.strftime('%Y-%m-%d')\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 313,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(date: str, day_of_week='Monday') -> bool:\n    \"\"\"Check if the given date falls on a specific day of the week\"\"\"\n    d = datetime.datetime.strptime(date, '%Y-%m-%d')\n    return d.strftime('%A') == day_of_week",
        "solution_func": "def g(day_of_week='Monday'):\n    today = datetime.datetime.now()\n    days_ahead = (7 - today.weekday() + datetime.datetime.strptime(day_of_week, '%A').weekday()) % 7\n    target_date = today + datetime.timedelta(days=days_ahead)\n    return target_date.strftime('%Y-%m-%d')",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(number: int, target_sum=100) -> bool:\n    \"\"\"Check if the given number is part of a list of random numbers that add up to the target sum\"\"\"\n    random_numbers = [random.randint(1, 10) for _ in range(10)]\n    return number in random_numbers and sum(random_numbers) == target_sum\n\ndef g(target_sum=100):\n    random_numbers = [random.randint(1, 10) for _ in range(9)]\n    number = target_sum - sum(random_numbers)\n    random_numbers.append(number)\n    return number\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 313,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(number: int, target_sum=100) -> bool:\n    \"\"\"Check if the given number is part of a list of random numbers that add up to the target sum\"\"\"\n    random_numbers = [random.randint(1, 10) for _ in range(10)]\n    return number in random_numbers and sum(random_numbers) == target_sum",
        "solution_func": "def g(target_sum=100):\n    random_numbers = [random.randint(1, 10) for _ in range(9)]\n    number = target_sum - sum(random_numbers)\n    random_numbers.append(number)\n    return number",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\nimport math\n\ndef f(x: float, y=10) -> bool:\n    \"\"\"Check if the given coordinates fall within a circle with a certain radius\"\"\"\n    return math.sqrt(x**2 + y**2) <= 10\n\ndef g(y=10):\n    x = random.uniform(-10, 10)\n    return x\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 313,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\nimport math\n\ndef f(x: float, y=10) -> bool:\n    \"\"\"Check if the given coordinates fall within a circle with a certain radius\"\"\"\n    return math.sqrt(x**2 + y**2) <= 10",
        "solution_func": "def g(y=10):\n    x = random.uniform(-10, 10)\n    return x",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, arr=[2, 4, 6, 8, 10], target=3) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sum up to a given target number.\"\"\"\n    return any((arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr))))\ndef g(arr=[2, 4, 6, 8, 10], target=3):\n    return arr[:2]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 313,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, arr=[2, 4, 6, 8, 10], target=3) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sum up to a given target number.\"\"\"\n    return any((arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr))))",
        "solution_func": "def g(arr=[2, 4, 6, 8, 10], target=3):\n    return arr[:2]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=10, target=4) -> bool:\n    \"\"\"Check if the logarithm of a number, given a base, is equal to a target number.\"\"\"\n    return math.log(n, x) == target\ndef g(x=10, target=4):\n    return x**target\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 313,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=10, target=4) -> bool:\n    \"\"\"Check if the logarithm of a number, given a base, is equal to a target number.\"\"\"\n    return math.log(n, x) == target",
        "solution_func": "def g(x=10, target=4):\n    return x**target",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nimport math\nfrom typing import*\ndef f(n: int, num_list=[4, 8, 15, 16, 23, 42], target=120) -> bool:\n    \"\"\"Check if there exists a combination of numbers in a list that multiply to a given target number.\"\"\"\n    from itertools import combinations\n    return any((math.prod(comb) == target for comb in combinations(num_list, n)))\ndef g(num_list=[4, 8, 15, 16, 23, 42], target=120):\n    return num_list[:3]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 313,
        "target_skills": null,
        "problem_func": "import itertools\nimport math\nfrom typing import*\ndef f(n: int, num_list=[4, 8, 15, 16, 23, 42], target=120) -> bool:\n    \"\"\"Check if there exists a combination of numbers in a list that multiply to a given target number.\"\"\"\n    from itertools import combinations\n    return any((math.prod(comb) == target for comb in combinations(num_list, n)))",
        "solution_func": "def g(num_list=[4, 8, 15, 16, 23, 42], target=120):\n    return num_list[:3]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if the given string is a palindrome and has length n.\"\"\"\n    return s == s[::-1] and len(s) == n\ndef g(n=4):\n    return \"race\"[:n]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 313,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if the given string is a palindrome and has length n.\"\"\"\n    return s == s[::-1] and len(s) == n",
        "solution_func": "def g(n=4):\n    return \"race\"[:n]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(l: List[int], k = 3) -> bool:\n    \"\"\"Given a list of integers and a value k, return True if there are exactly k even numbers in the list, and False otherwise.\"\"\"\n    return len([x for x in l if x % 2 == 0]) == k\n\ndef g(k = 3):\n    return [2*i for i in range(k)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 314,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(l: List[int], k = 3) -> bool:\n    \"\"\"Given a list of integers and a value k, return True if there are exactly k even numbers in the list, and False otherwise.\"\"\"\n    return len([x for x in l if x % 2 == 0]) == k",
        "solution_func": "def g(k = 3):\n    return [2*i for i in range(k)]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(l: List[int]) -> bool:\n    \"\"\"Given a list of integers, return True if all the numbers in the list are positive, and False otherwise.\"\"\"\n    return all(x > 0 for x in l)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 314,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(l: List[int]) -> bool:\n    \"\"\"Given a list of integers, return True if all the numbers in the list are positive, and False otherwise.\"\"\"\n    return all(x > 0 for x in l)",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(l: List[int]) -> bool:\n    \"\"\"Given a list of integers, return True if the sum of all the numbers in the list is divisible by 10, and False otherwise.\"\"\"\n    return sum(l) % 10 == 0\n\ndef g():\n    return [10, 20, 30, 40]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 314,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(l: List[int]) -> bool:\n    \"\"\"Given a list of integers, return True if the sum of all the numbers in the list is divisible by 10, and False otherwise.\"\"\"\n    return sum(l) % 10 == 0",
        "solution_func": "def g():\n    return [10, 20, 30, 40]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Given a list of integers, find if there exists any two elements in the list that sum up to the target value\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums: List[int]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 314,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Given a list of integers, find if there exists any two elements in the list that sum up to the target value\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(nums: List[int]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(word: str, letters='aeiou', target=5) -> bool:\n    \"\"\"Given a word and a string of letters, determine if the word contains at least `target` number of distinct letters from the given string\"\"\"\n    return len(set(word) & set(letters)) >= target\ndef g(word: str, letters='aeiou'):\n    return word\nassert f(g())\n",
        "emb": null,
        "idx_generation": 314,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str, letters='aeiou', target=5) -> bool:\n    \"\"\"Given a word and a string of letters, determine if the word contains at least `target` number of distinct letters from the given string\"\"\"\n    return len(set(word) & set(letters)) >= target",
        "solution_func": "def g(word: str, letters='aeiou'):\n    return word",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 3, 5, 7, 9]) -> bool:\n    \"\"\"Given a number and a list of integers, determine if the number is present in the list\"\"\"\n    return n in lst\ndef g(n: int):\n    return n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 314,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[1, 3, 5, 7, 9]) -> bool:\n    \"\"\"Given a number and a list of integers, determine if the number is present in the list\"\"\"\n    return n in lst",
        "solution_func": "def g(n: int):\n    return n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if the number n is a product of any two prime numbers in the primes list.\"\"\"\n    for p1 in primes:\n        for p2 in primes:\n            if p1 * p2 == n:\n                return True\n    return False\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    for p1 in primes:\n        for p2 in primes:\n            if p1 * p2 > max(primes):\n                return p1 * p2\n    return 0\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 314,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if the number n is a product of any two prime numbers in the primes list.\"\"\"\n    for p1 in primes:\n        for p2 in primes:\n            if p1 * p2 == n:\n                return True\n    return False",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    for p1 in primes:\n        for p2 in primes:\n            if p1 * p2 > max(primes):\n                return p1 * p2\n    return 0",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, target='abc') -> bool:\n    \"\"\"Check if the target string is a substring of s, repeated n times.\"\"\"\n    return target * n in s\ndef g(n=3, target='abc'):\n    return target * n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 314,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3, target='abc') -> bool:\n    \"\"\"Check if the target string is a substring of s, repeated n times.\"\"\"\n    return target * n in s",
        "solution_func": "def g(n=3, target='abc'):\n    return target * n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=100, k=3) -> bool:\n    \"\"\"Check if there are any k numbers in lst that sum up to the target value.\"\"\"\n    from itertools import combinations\n    for c in combinations(lst, k):\n        if sum(c) == target:\n            return True\n    return False\ndef g(target=100, k=3):\n    return [target // k] * k\nassert f(g())\n",
        "emb": null,
        "idx_generation": 314,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=100, k=3) -> bool:\n    \"\"\"Check if there are any k numbers in lst that sum up to the target value.\"\"\"\n    from itertools import combinations\n    for c in combinations(lst, k):\n        if sum(c) == target:\n            return True\n    return False",
        "solution_func": "def g(target=100, k=3):\n    return [target // k] * k",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, nums=[random.randint(1, 100) for _ in range(10)]) -> bool:\n    \"\"\"Check if the sum of the first n numbers in a list is divisible by 3.\"\"\"\n    return sum(nums[:n]) % 3 == 0\n\ndef g(nums=[random.randint(1, 100) for _ in range(10)]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 314,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(n: int, nums=[random.randint(1, 100) for _ in range(10)]) -> bool:\n    \"\"\"Check if the sum of the first n numbers in a list is divisible by 3.\"\"\"\n    return sum(nums[:n]) % 3 == 0",
        "solution_func": "def g(nums=[random.randint(1, 100) for _ in range(10)]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, nums=[15, 25, 35, 45, 55], upper_bound=1000) -> bool:\n    \"\"\"Check if a number is a perfect square and a multiple of all the numbers in the list\"\"\"\n    return all((n % i == 0 for i in nums)) and math.isqrt(n)**2 == n and n <= upper_bound\n\ndef g(nums=[15, 25, 35, 45, 55], upper_bound=1000):\n    ans = 1\n    for i in nums:\n        ans *= i\n    return ans\nassert f(g())\n",
        "emb": null,
        "idx_generation": 315,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, nums=[15, 25, 35, 45, 55], upper_bound=1000) -> bool:\n    \"\"\"Check if a number is a perfect square and a multiple of all the numbers in the list\"\"\"\n    return all((n % i == 0 for i in nums)) and math.isqrt(n)**2 == n and n <= upper_bound",
        "solution_func": "def g(nums=[15, 25, 35, 45, 55], upper_bound=1000):\n    ans = 1\n    for i in nums:\n        ans *= i\n    return ans",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport itertools\n\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=100) -> bool:\n    \"\"\"Find a combination of numbers from the list that adds up to the target value\"\"\"\n    return any((sum(combo) == target for r in range(len(nums) + 1) for combo in itertools.combinations(nums, r)))\n\ndef g(nums=[1, 2, 3, 4, 5], target=100):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 315,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\n\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=100) -> bool:\n    \"\"\"Find a combination of numbers from the list that adds up to the target value\"\"\"\n    return any((sum(combo) == target for r in range(len(nums) + 1) for combo in itertools.combinations(nums, r)))",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=100):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom string import ascii_lowercase\n\ndef f(word: str, vowels=['a', 'e', 'i', 'o', 'u'], consonants=list(set(ascii_lowercase) - set(vowels))) -> bool:\n    \"\"\"Check if a word contains only vowels or only consonants\"\"\"\n    return all((char in vowels for char in word.lower())) or all((char in consonants for char in word.lower()))\n\ndef g(vowels=['a', 'e', 'i', 'o', 'u'], consonants=list(set(ascii_lowercase) - set(vowels))):\n    return \"abcde\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 315,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom string import ascii_lowercase\n\ndef f(word: str, vowels=['a', 'e', 'i', 'o', 'u'], consonants=list(set(ascii_lowercase) - set(vowels))) -> bool:\n    \"\"\"Check if a word contains only vowels or only consonants\"\"\"\n    return all((char in vowels for char in word.lower())) or all((char in consonants for char in word.lower()))",
        "solution_func": "def g(vowels=['a', 'e', 'i', 'o', 'u'], consonants=list(set(ascii_lowercase) - set(vowels))):\n    return \"abcde\"",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(p: int, q: int, x: int, y: int, z: int, a=10, b=5, c=7) -> bool:\n    \"\"\"Given two points (p,q) and (x,y), determine if the second point is within the rectangle formed by the first point and two other points (p,b), (a,q).\"\"\"\n    return p <= x <= a and q <= y <= b\ndef g(a=10, b=5, c=7):\n    p = random.randint(0, a)\n    q = random.randint(0, b)\n    x = random.randint(p, a)\n    y = random.randint(q, b)\n    z = random.randint(c, p * q * x * y)\n    return p, q, x, y, z\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 315,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(p: int, q: int, x: int, y: int, z: int, a=10, b=5, c=7) -> bool:\n    \"\"\"Given two points (p,q) and (x,y), determine if the second point is within the rectangle formed by the first point and two other points (p,b), (a,q).\"\"\"\n    return p <= x <= a and q <= y <= b",
        "solution_func": "def g(a=10, b=5, c=7):\n    p = random.randint(0, a)\n    q = random.randint(0, b)\n    x = random.randint(p, a)\n    y = random.randint(q, b)\n    z = random.randint(c, p * q * x * y)\n    return p, q, x, y, z",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(lst: list, x: int, y: int, z: int, a: int = 1, b: int = 2, c: int = 3) -> bool:\n    \"\"\"Check if the list contains x, y, and z in any order.\"\"\"\n    return all(e in lst for e in (x, y, z))\ndef g(a=1, b=2, c=3):\n    lst = [a, b, c]\n    random.shuffle(lst)\n    return lst, a, b, c\nassert f(*g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 315,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(lst: list, x: int, y: int, z: int, a: int = 1, b: int = 2, c: int = 3) -> bool:\n    \"\"\"Check if the list contains x, y, and z in any order.\"\"\"\n    return all(e in lst for e in (x, y, z))",
        "solution_func": "def g(a=1, b=2, c=3):\n    lst = [a, b, c]\n    random.shuffle(lst)\n    return lst, a, b, c",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, lst: list, a=3, b=2, c=5) -> bool:\n    \"\"\"Check if the sum of the first n elements of the list is divisible by a and b, but not divisible by c.\"\"\"\n    return sum(lst[:n]) % a == 0 and sum(lst[:n]) % b == 0 and sum(lst[:n]) % c != 0\ndef g(a=3, b=2, c=5):\n    lst = [random.randint(1, 100) for _ in range(10)]\n    return random.randint(1, 10), lst, a, b, c\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 315,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(n: int, lst: list, a=3, b=2, c=5) -> bool:\n    \"\"\"Check if the sum of the first n elements of the list is divisible by a and b, but not divisible by c.\"\"\"\n    return sum(lst[:n]) % a == 0 and sum(lst[:n]) % b == 0 and sum(lst[:n]) % c != 0",
        "solution_func": "def g(a=3, b=2, c=5):\n    lst = [random.randint(1, 100) for _ in range(10)]\n    return random.randint(1, 10), lst, a, b, c",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Given a list of integers, find if there exists a subarray of length k in the list such that the sum of its elements is even\"\"\"\n    return any(sum(arr[i:i+k]) % 2 == 0 for i in range(len(arr)-k+1))\ndef g(k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 315,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Given a list of integers, find if there exists a subarray of length k in the list such that the sum of its elements is even\"\"\"\n    return any(sum(arr[i:i+k]) % 2 == 0 for i in range(len(arr)-k+1))",
        "solution_func": "def g(k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s1: str, s2: str, n=3) -> bool:\n    \"\"\"Given two strings, find if there exists a common substring of length n\"\"\"\n    for i in range(len(s1)-n+1):\n        if s1[i:i+n] in s2:\n            return True\n    return False\ndef g(n=3):\n    return \"abcdefg\", \"xyz\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 315,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s1: str, s2: str, n=3) -> bool:\n    \"\"\"Given two strings, find if there exists a common substring of length n\"\"\"\n    for i in range(len(s1)-n+1):\n        if s1[i:i+n] in s2:\n            return True\n    return False",
        "solution_func": "def g(n=3):\n    return \"abcdefg\", \"xyz\"",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of elements that sum up to the target value\"\"\"\n    return any(target - x in arr for x in arr)\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 315,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of elements that sum up to the target value\"\"\"\n    return any(target - x in arr for x in arr)",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=121, b=11) -> bool:\n    \"\"\"Find a number that is divisible by a but not divisible by b\"\"\"\n    return n % a == 0 and n % b != 0\ndef g(a=121, b=11):\n    return a * b\nassert f(g())\n",
        "emb": null,
        "idx_generation": 315,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=121, b=11) -> bool:\n    \"\"\"Find a number that is divisible by a but not divisible by b\"\"\"\n    return n % a == 0 and n % b != 0",
        "solution_func": "def g(a=121, b=11):\n    return a * b",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Find the smallest positive integer that is not present in the given array.\"\"\"\n    return min(arr) > 1 and all(((i+1) in arr for i in range(n)))\ndef g(arr: List[int]):\n    return list(range(1, len(arr)+2))\nassert f(len(g()), g())\n",
        "emb": null,
        "idx_generation": 316,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Find the smallest positive integer that is not present in the given array.\"\"\"\n    return min(arr) > 1 and all(((i+1) in arr for i in range(n)))",
        "solution_func": "def g(arr: List[int]):\n    return list(range(1, len(arr)+2))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20, k=3) -> bool:\n    \"\"\"Find k numbers in the given list that add up to the target number.\"\"\"\n    return len(nums) >= k and any(((sum(comb) == target) for comb in combinations(nums, k)))\ndef g(target=20, k=3):\n    return list(range(1, target+1))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 316,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20, k=3) -> bool:\n    \"\"\"Find k numbers in the given list that add up to the target number.\"\"\"\n    return len(nums) >= k and any(((sum(comb) == target) for comb in combinations(nums, k)))",
        "solution_func": "def g(target=20, k=3):\n    return list(range(1, target+1))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, t: str, k=3) -> bool:\n    \"\"\"Check if t is a substring of s, and if so, return the starting index of the first occurrence.\"\"\"\n    return len(s) >= len(t) and any((s[i:i+len(t)] == t for i in range(len(s)-len(t)+1)))\ndef g(t: str):\n    s = \"abcdefghi\"\n    return s.index(t)\nassert f(g(), g())\n",
        "emb": null,
        "idx_generation": 316,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, t: str, k=3) -> bool:\n    \"\"\"Check if t is a substring of s, and if so, return the starting index of the first occurrence.\"\"\"\n    return len(s) >= len(t) and any((s[i:i+len(t)] == t for i in range(len(s)-len(t)+1)))",
        "solution_func": "def g(t: str):\n    s = \"abcdefghi\"\n    return s.index(t)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subset of the given list whose elements sum up to the target\"\"\"\n    from itertools import combinations\n    for r in range(1, len(num_list)+1):\n        for subset in combinations(num_list, r):\n            if sum(subset) == target:\n                return True\n    return False\ndef g(num_list: List[int], target=100):\n    return num_list\nassert f(g())\n",
        "emb": null,
        "idx_generation": 316,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subset of the given list whose elements sum up to the target\"\"\"\n    from itertools import combinations\n    for r in range(1, len(num_list)+1):\n        for subset in combinations(num_list, r):\n            if sum(subset) == target:\n                return True\n    return False",
        "solution_func": "def g(num_list: List[int], target=100):\n    return num_list",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there is a row in the matrix whose elements sum up to the target\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False\ndef g(matrix: List[List[int]], target=0):\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 316,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there is a row in the matrix whose elements sum up to the target\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False",
        "solution_func": "def g(matrix: List[List[int]], target=0):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(num_list: List[int], target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in the given list whose sum is equal to the target\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False\ndef g(num_list: List[int], target=0):\n    return num_list\nassert f(g())\n",
        "emb": null,
        "idx_generation": 316,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num_list: List[int], target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in the given list whose sum is equal to the target\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False",
        "solution_func": "def g(num_list: List[int], target=0):\n    return num_list",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if the given character appears at least once in the string\"\"\"\n    return char in s\ndef g(char='a'):\n    return char * 5\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 316,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if the given character appears at least once in the string\"\"\"\n    return char in s",
        "solution_func": "def g(char='a'):\n    return char * 5",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=2) -> bool:\n    \"\"\"Check if the given number is a power of x\"\"\"\n    return math.log(n, x).is_integer()\ndef g(x=2):\n    return x ** 5\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 316,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=2) -> bool:\n    \"\"\"Check if the given number is a power of x\"\"\"\n    return math.log(n, x).is_integer()",
        "solution_func": "def g(x=2):\n    return x ** 5",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: list, n=5) -> bool:\n    \"\"\"Check if there are exactly n even numbers in the list\"\"\"\n    return len([num for num in lst if num % 2 == 0]) == n\ndef g(n=5):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 316,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: list, n=5) -> bool:\n    \"\"\"Check if there are exactly n even numbers in the list\"\"\"\n    return len([num for num in lst if num % 2 == 0]) == n",
        "solution_func": "def g(n=5):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(year: int, is_leap_year=False) -> bool:\n    \"\"\"Check if a given year is a leap year.\"\"\"\n    return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0) == is_leap_year\ndef g(is_leap_year=False):\n    year = 2000\n    while True:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0) == is_leap_year:\n            return year\n        year += 1\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0
        ],
        "idx_generation": 316,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(year: int, is_leap_year=False) -> bool:\n    \"\"\"Check if a given year is a leap year.\"\"\"\n    return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0) == is_leap_year",
        "solution_func": "def g(is_leap_year=False):\n    year = 2000\n    while True:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0) == is_leap_year:\n            return year\n        year += 1",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers in a list that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums: List[int], target=0):\n    random.shuffle(nums)\n    return nums\n\nnums = [1, 2, 3, 4, 5]\nassert f(g(nums), target=7)\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 317,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers in a list that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums: List[int], target=0):\n    random.shuffle(nums)\n    return nums\n\nnums = [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Check if a string is a palindrome and has a length greater than or equal to the target length\"\"\"\n    return s == s[::-1] and len(s) >= target_length\n\ndef g(target_length=10):\n    return \"racecar\" + \"a\" * (target_length - 7)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 317,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Check if a string is a palindrome and has a length greater than or equal to the target length\"\"\"\n    return s == s[::-1] and len(s) >= target_length",
        "solution_func": "def g(target_length=10):\n    return \"racecar\" + \"a\" * (target_length - 7)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that multiply to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(nums: List[int], target: int):\n    return nums\n\nnums = [1, 2, 3, 4, 5]\nassert f(g(nums), target=20)\n",
        "emb": null,
        "idx_generation": 317,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that multiply to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums: List[int], target: int):\n    return nums\n\nnums = [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=10) -> bool:\n    \"\"\"Find if the sum of the digits in the string is equal to the target.\"\"\"\n    return sum(map(int, s)) == target\ndef g(target=10):\n    return str(target) * target\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 317,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=10) -> bool:\n    \"\"\"Find if the sum of the digits in the string is equal to the target.\"\"\"\n    return sum(map(int, s)) == target",
        "solution_func": "def g(target=10):\n    return str(target) * target",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"Find if the sum of the first n natural numbers is equal to the target.\"\"\"\n    return sum(range(n+1)) == target\ndef g(target=100):\n    return int(((1 + 8 * target) ** 0.5 - 1) / 2)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 317,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"Find if the sum of the first n natural numbers is equal to the target.\"\"\"\n    return sum(range(n+1)) == target",
        "solution_func": "def g(target=100):\n    return int(((1 + 8 * target) ** 0.5 - 1) / 2)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find if there exists two numbers in the list that sum up to the target.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if target - num in num_set:\n            return True\n    return False\ndef g(target=0):\n    return [target // 2, target - target // 2]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 317,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find if there exists two numbers in the list that sum up to the target.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if target - num in num_set:\n            return True\n    return False",
        "solution_func": "def g(target=0):\n    return [target // 2, target - target // 2]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the sum of all elements in the list is equal to n.\"\"\"\n    return sum(lst) == n\ndef g(lst: List[int]):\n    return lst\nassert f(g(), n=10)\n",
        "emb": null,
        "idx_generation": 317,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the sum of all elements in the list is equal to n.\"\"\"\n    return sum(lst) == n",
        "solution_func": "def g(lst: List[int]):\n    return lst",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if the substring 'python' is present in the given string.\"\"\"\n    return substr in s\ndef g(substr='python'):\n    return \"I love python programming\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 317,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if the substring 'python' is present in the given string.\"\"\"\n    return substr in s",
        "solution_func": "def g(substr='python'):\n    return \"I love python programming\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if there are exactly n even numbers in the list.\"\"\"\n    return len([num for num in lst if num % 2 == 0]) == n\ndef g(lst: List[int]):\n    return lst\nassert f(g(), n=4)\n",
        "emb": null,
        "idx_generation": 317,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if there are exactly n even numbers in the list.\"\"\"\n    return len([num for num in lst if num % 2 == 0]) == n",
        "solution_func": "def g(lst: List[int]):\n    return lst",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=0) -> bool:\n    \"\"\"Given a square matrix of integers, determine if the sum of each row and column is equal to the target value.\"\"\"\n    row_sums = np.sum(matrix, axis=1)\n    col_sums = np.sum(matrix, axis=0)\n    return np.all(row_sums == target) and np.all(col_sums == target)\n\ndef g(target=0):\n    matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 317,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=0) -> bool:\n    \"\"\"Given a square matrix of integers, determine if the sum of each row and column is equal to the target value.\"\"\"\n    row_sums = np.sum(matrix, axis=1)\n    col_sums = np.sum(matrix, axis=0)\n    return np.all(row_sums == target) and np.all(col_sums == target)",
        "solution_func": "def g(target=0):\n    matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, num_elements=3) -> bool:\n    \"\"\"Find num_elements numbers in nums that adds up to target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, num_elements))\ndef g(target=10, num_elements=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 318,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, num_elements=3) -> bool:\n    \"\"\"Find num_elements numbers in nums that adds up to target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, num_elements))",
        "solution_func": "def g(target=10, num_elements=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a', num_chars=3) -> bool:\n    \"\"\"Check if s contains exactly num_chars occurrences of char\"\"\"\n    return s.count(char) == num_chars\ndef g(char='a', num_chars=3):\n    return \"banana\"\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 318,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char='a', num_chars=3) -> bool:\n    \"\"\"Check if s contains exactly num_chars occurrences of char\"\"\"\n    return s.count(char) == num_chars",
        "solution_func": "def g(char='a', num_chars=3):\n    return \"banana\"",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if the sum of any row or column in the matrix is equal to the target\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return target in row_sums or target in col_sums\ndef g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 318,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if the sum of any row or column in the matrix is equal to the target\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return target in row_sums or target in col_sums",
        "solution_func": "def g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [target//2, target//2] if target%2 == 0 else [target//2, target//2+1]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 318,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    return [target//2, target//2] if target%2 == 0 else [target//2, target//2+1]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a number in the list that is equal to the target number\"\"\"\n    return target in nums\n\ndef g(target=0):\n    return [target]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 318,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a number in the list that is equal to the target number\"\"\"\n    return target in nums",
        "solution_func": "def g(target=0):\n    return [target]",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers in the list that multiply to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, target]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 318,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers in the list that multiply to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    return [1, target]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by all the given divisors\"\"\"\n    return all(n % d == 0 for d in divisors)\ndef g(divisors=[2, 3, 5]):\n    i = max(divisors) + 1\n    while True:\n        if all(i % d == 0 for d in divisors):\n            return i\n        i += 1\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 318,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, divisors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by all the given divisors\"\"\"\n    return all(n % d == 0 for d in divisors)",
        "solution_func": "def g(divisors=[2, 3, 5]):\n    i = max(divisors) + 1\n    while True:\n        if all(i % d == 0 for d in divisors):\n            return i\n        i += 1",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub_str='abc', count=3) -> bool:\n    \"\"\"Check if a substring appears a certain number of times in a string\"\"\"\n    return s.count(sub_str) == count\ndef g(sub_str='abc', count=3):\n    return sub_str * count\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 318,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, sub_str='abc', count=3) -> bool:\n    \"\"\"Check if a substring appears a certain number of times in a string\"\"\"\n    return s.count(sub_str) == count",
        "solution_func": "def g(sub_str='abc', count=3):\n    return sub_str * count",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if a number is divisible by any of the given primes\"\"\"\n    return any(n % p == 0 for p in primes)\ndef g(primes=[2, 3, 5, 7, 11, 13]):\n    i = max(primes) + 1\n    while True:\n        if any(i % p == 0 for p in primes):\n            return i\n        i += 1\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 318,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if a number is divisible by any of the given primes\"\"\"\n    return any(n % p == 0 for p in primes)",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13]):\n    i = max(primes) + 1\n    while True:\n        if any(i % p == 0 for p in primes):\n            return i\n        i += 1",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return lst[1]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 318,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return lst[1]",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\ndef f(equation: str, result=100) -> bool:\n    \"\"\"Solve a mathematical equation for x and check if the result is equal to a given value\"\"\"\n    x = result\n    return eval(equation) == result\ndef g(result=100):\n    equation = \"x**2 + 5*x + 6\"\n    return equation\nassert f(g())\n",
        "emb": null,
        "idx_generation": 319,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\ndef f(equation: str, result=100) -> bool:\n    \"\"\"Solve a mathematical equation for x and check if the result is equal to a given value\"\"\"\n    x = result\n    return eval(equation) == result",
        "solution_func": "def g(result=100):\n    equation = \"x**2 + 5*x + 6\"\n    return equation",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Find a pair of numbers from a given list that sums up to a target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\ndef g(target=20):\n    numbers = [1, 5, 10, 15]\n    return numbers\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 319,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Find a pair of numbers from a given list that sums up to a target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=20):\n    numbers = [1, 5, 10, 15]\n    return numbers",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sum=100) -> bool:\n    \"\"\"Check if the sum of each row in a matrix is equal to a given value\"\"\"\n    for row in matrix:\n        if sum(row) != row_sum:\n            return False\n    return True\ndef g(row_sum=100):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 319,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row_sum=100) -> bool:\n    \"\"\"Check if the sum of each row in a matrix is equal to a given value\"\"\"\n    for row in matrix:\n        if sum(row) != row_sum:\n            return False\n    return True",
        "solution_func": "def g(row_sum=100):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"Check if the string is a palindrome after removing n characters\"\"\"\n    return s == s[::-1] and len(s) - n == len(set(s))\ndef g(n=2):\n    return \"racecar\"[:n] + \"racecar\"[n+1:]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 319,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"Check if the string is a palindrome after removing n characters\"\"\"\n    return s == s[::-1] and len(s) - n == len(set(s))",
        "solution_func": "def g(n=2):\n    return \"racecar\"[:n] + \"racecar\"[n+1:]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Check if it is possible to obtain the target number using the four basic arithmetic operations (+, -, *, /) on the given list of numbers\"\"\"\n    operators = ['+', '-', '*', '/']\n    for p in permutations(nums):\n        for o1 in operators:\n            for o2 in operators:\n                for o3 in operators:\n                    expr = f\"({p[0]} {o1} {p[1]}) {o2} {p[2]} {o3} {p[3]}\"\n                    try:\n                        result = eval(expr)\n                        if result == target:\n                            return True\n                    except ZeroDivisionError:\n                        pass\n    return False\ndef g(nums=[4, 6, 8, 2]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 319,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Check if it is possible to obtain the target number using the four basic arithmetic operations (+, -, *, /) on the given list of numbers\"\"\"\n    operators = ['+', '-', '*', '/']\n    for p in permutations(nums):\n        for o1 in operators:\n            for o2 in operators:\n                for o3 in operators:\n                    expr = f\"({p[0]} {o1} {p[1]}) {o2} {p[2]} {o3} {p[3]}\"\n                    try:\n                        result = eval(expr)\n                        if result == target:\n                            return True\n                    except ZeroDivisionError:\n                        pass\n    return False",
        "solution_func": "def g(nums=[4, 6, 8, 2]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, pattern='101') -> bool:\n    \"\"\"Check if the binary representation of n follows the given pattern\"\"\"\n    binary = bin(n)[2:]\n    return all((binary[i] == pattern[i % len(pattern)] for i in range(len(binary))))\ndef g(pattern='101'):\n    n = 0\n    while True:\n        binary = bin(n)[2:]\n        if all((binary[i] == pattern[i % len(pattern)] for i in range(len(binary)))):\n            return n\n        n += 1\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 319,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, pattern='101') -> bool:\n    \"\"\"Check if the binary representation of n follows the given pattern\"\"\"\n    binary = bin(n)[2:]\n    return all((binary[i] == pattern[i % len(pattern)] for i in range(len(binary))))",
        "solution_func": "def g(pattern='101'):\n    n = 0\n    while True:\n        binary = bin(n)[2:]\n        if all((binary[i] == pattern[i % len(pattern)] for i in range(len(binary)))):\n            return n\n        n += 1",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find two numbers in the given list that add up to the target number n\"\"\"\n    return any(n - x in nums for x in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[0], nums[-1]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 319,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find two numbers in the given list that add up to the target number n\"\"\"\n    return any(n - x in nums for x in nums)",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[0], nums[-1]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Check if the given number n exists in the given matrix\"\"\"\n    return any(n in row for row in matrix)\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix[0][0] - 1\nassert f(g())\n",
        "emb": null,
        "idx_generation": 319,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Check if the given number n exists in the given matrix\"\"\"\n    return any(n in row for row in matrix)",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix[0][0] - 1",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if the given number n is equal to the number of characters in any of the given words\"\"\"\n    return any(n == len(word) for word in words)\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return len(words[0])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 319,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if the given number n is equal to the number of characters in any of the given words\"\"\"\n    return any(n == len(word) for word in words)",
        "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return len(words[0])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a: int, b: int) -> bool:\n    \"\"\"Determine if the number 'n' can be expressed as the sum of 'a' and 'b' squared.\"\"\"\n    return n == a**2 + b**2\n\ndef g(n: int):\n    max_val = math.isqrt(n)\n    for a in range(max_val+1):\n        for b in range(max_val+1):\n            if f(n, a, b):\n                return a, b\n    return None\nassert f(g(65), 65, 0)\n",
        "emb": null,
        "idx_generation": 319,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a: int, b: int) -> bool:\n    \"\"\"Determine if the number 'n' can be expressed as the sum of 'a' and 'b' squared.\"\"\"\n    return n == a**2 + b**2",
        "solution_func": "def g(n: int):\n    max_val = math.isqrt(n)\n    for a in range(max_val+1):\n        for b in range(max_val+1):\n            if f(n, a, b):\n                return a, b\n    return None",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=150) -> bool:\n    \"\"\"Find a subset of nums whose sum is equal to target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if len(nums) == 0:\n            return False\n        if nums[0] > target:\n            return subset_sum(nums[1:], target)\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    \n    return subset_sum(nums, target)\n\ndef g(target=150):\n    return [50, 60, 40, 70, 30, 80, 20, 90, 10]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 320,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=150) -> bool:\n    \"\"\"Find a subset of nums whose sum is equal to target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if len(nums) == 0:\n            return False\n        if nums[0] > target:\n            return subset_sum(nums[1:], target)\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    \n    return subset_sum(nums, target)",
        "solution_func": "def g(target=150):\n    return [50, 60, 40, 70, 30, 80, 20, 90, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], length=5) -> bool:\n    \"\"\"Find a subsequence of nums with length 5 in which the sum of the elements is equal to 100\"\"\"\n    def find_subsequence(nums, target, length):\n        if target == 0 and length == 0:\n            return True\n        if length == 0 or len(nums) == 0:\n            return False\n        if nums[0] > target:\n            return find_subsequence(nums[1:], target, length)\n        return find_subsequence(nums[1:], target - nums[0], length - 1) or find_subsequence(nums[1:], target, length)\n    \n    return find_subsequence(nums, 100, length)\n\ndef g(length=5):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 320,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], length=5) -> bool:\n    \"\"\"Find a subsequence of nums with length 5 in which the sum of the elements is equal to 100\"\"\"\n    def find_subsequence(nums, target, length):\n        if target == 0 and length == 0:\n            return True\n        if length == 0 or len(nums) == 0:\n            return False\n        if nums[0] > target:\n            return find_subsequence(nums[1:], target, length)\n        return find_subsequence(nums[1:], target - nums[0], length - 1) or find_subsequence(nums[1:], target, length)\n    \n    return find_subsequence(nums, 100, length)",
        "solution_func": "def g(length=5):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of nums whose product is equal to target\"\"\"\n    def find_combination(nums, target):\n        if target == 1:\n            return True\n        if len(nums) == 0:\n            return False\n        if nums[0] > target:\n            return find_combination(nums[1:], target)\n        return find_combination(nums[1:], target // nums[0]) or find_combination(nums[1:], target)\n    \n    return find_combination(nums, target)\n\ndef g(target=100):\n    return [2, 4, 5, 10, 20, 25, 50]\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 320,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of nums whose product is equal to target\"\"\"\n    def find_combination(nums, target):\n        if target == 1:\n            return True\n        if len(nums) == 0:\n            return False\n        if nums[0] > target:\n            return find_combination(nums[1:], target)\n        return find_combination(nums[1:], target // nums[0]) or find_combination(nums[1:], target)\n    \n    return find_combination(nums, target)",
        "solution_func": "def g(target=100):\n    return [2, 4, 5, 10, 20, 25, 50]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, s: str, c='a') -> bool:\n    \"\"\"Given a string s and a character c, determine if c appears exactly n times in s.\"\"\"\n    return s.count(c) == n\ndef g(s: str, c='a'):\n    return s.count(c)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 320,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, s: str, c='a') -> bool:\n    \"\"\"Given a string s and a character c, determine if c appears exactly n times in s.\"\"\"\n    return s.count(c) == n",
        "solution_func": "def g(s: str, c='a'):\n    return s.count(c)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, li: List[int]) -> bool:\n    \"\"\"Given a list of integers, determine if there are exactly n distinct even numbers in the list.\"\"\"\n    even_nums = [num for num in li if num % 2 == 0]\n    return len(set(even_nums)) == n\ndef g(li: List[int]):\n    return [2, 4, 6, 8] * (len(li) // 4)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 320,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, li: List[int]) -> bool:\n    \"\"\"Given a list of integers, determine if there are exactly n distinct even numbers in the list.\"\"\"\n    even_nums = [num for num in li if num % 2 == 0]\n    return len(set(even_nums)) == n",
        "solution_func": "def g(li: List[int]):\n    return [2, 4, 6, 8] * (len(li) // 4)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, s: str, sub: str) -> bool:\n    \"\"\"Given a string s and a substring sub, determine if sub appears exactly n times in s.\"\"\"\n    return s.count(sub) == n\ndef g(s: str, sub: str):\n    return s.count(sub)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 320,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, s: str, sub: str) -> bool:\n    \"\"\"Given a string s and a substring sub, determine if sub appears exactly n times in s.\"\"\"\n    return s.count(sub) == n",
        "solution_func": "def g(s: str, sub: str):\n    return s.count(sub)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, a=3, b=5) -> bool:\n    \"\"\"Check if a number is divisible by both a and b.\"\"\"\n    return num % a == 0 and num % b == 0\ndef g(a=3, b=5):\n    num = a * b\n    return num\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 320,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int, a=3, b=5) -> bool:\n    \"\"\"Check if a number is divisible by both a and b.\"\"\"\n    return num % a == 0 and num % b == 0",
        "solution_func": "def g(a=3, b=5):\n    num = a * b\n    return num",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if a given string is a substring of the target string.\"\"\"\n    return s in target\ndef g(target='python'):\n    s = target[1:4]\n    return s\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 320,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if a given string is a substring of the target string.\"\"\"\n    return s in target",
        "solution_func": "def g(target='python'):\n    s = target[1:4]\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to the target number.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(target: int):\n    lst = [1, 2, 3, 4, 5]\n    return lst\nassert f(g())\n",
        "emb": null,
        "idx_generation": 320,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to the target number.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target: int):\n    lst = [1, 2, 3, 4, 5]\n    return lst",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=16) -> bool:\n    \"\"\"Find a row and column in a matrix where the sum of the row and column is equal to the target number\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if sum(matrix[i]) + sum(row[j] for row in matrix) == target:\n                return True\n    return False\ndef g(target=16):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target - 15]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 320,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=16) -> bool:\n    \"\"\"Find a row and column in a matrix where the sum of the row and column is equal to the target number\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if sum(matrix[i]) + sum(row[j] for row in matrix) == target:\n                return True\n    return False",
        "solution_func": "def g(target=16):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target - 15]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    }
]